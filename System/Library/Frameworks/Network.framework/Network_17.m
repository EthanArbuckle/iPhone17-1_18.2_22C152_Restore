nw_service_class_t nw_ip_metadata_get_service_class(nw_protocol_metadata_t metadata)
{
  nw_protocol_metadata_t v1;
  nw_protocol_metadata_t v2;
  unsigned char *v3;
  uint64_t isa;
  nw_service_class_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  BOOL v13;
  os_log_type_t v14;
  void v15[5];
  char v16;
  os_log_type_t type;
  unsigned char buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E4F143B8];
  v1 = metadata;
  v2 = v1;
  if (v1)
  {
    v3 = buf;
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    v19 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_ip_metadata_get_service_class_block_invoke;
    v15[3] = &unk_1E5248E90;
    v15[4] = buf;
    isa = (uint64_t)v1[4].isa;
    if (isa)
    {
      __nw_ip_metadata_get_service_class_block_invoke((uint64_t)v15, isa);
      v3 = *(unsigned char **)&buf[8];
    }
    v5 = *((_DWORD *)v3 + 6);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_ip_metadata_get_service_class";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_service_class";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_ip_metadata_get_service_class";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_service_class";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v9 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_service_class";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  v5 = nw_service_class_best_effort;
LABEL_5:

  return v5;
}

uint64_t __nw_ip_metadata_get_service_class_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 12);
  return 1;
}

uint64_t __nw_ip_metadata_set_receive_time_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1;
}

uint64_t nw_ip_metadata_get_receive_time(nw_protocol_metadata_t metadata)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_protocol_metadata_t v1 = metadata;
  nw_protocol_metadata_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v20 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_ip_metadata_get_receive_time_block_invoke;
    v16[3] = &unk_1E5248E90;
    v16[4] = buf;
    isa = v1[4].isa;
    if (isa
      && (__nw_ip_metadata_get_receive_time_block_invoke((uint64_t)v16, isa),
          (uint64_t v4 = *(void *)(*(void *)&buf[8] + 24)) != 0))
    {
      unsigned int v5 = dword_1EB267624;
      if (!dword_1EB267624)
      {
        mach_timebase_info((mach_timebase_info_t)&time_base);
        unsigned int v5 = dword_1EB267624;
      }
      uint64_t v6 = v4 * (unint64_t)time_base / v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_9;
  }
  v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_ip_metadata_get_receive_time";
  v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_receive_time";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_ip_metadata_get_receive_time";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_receive_time";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_receive_time";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_ip_metadata_get_receive_time_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t __nw_ip_metadata_set_hop_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 32);
  return 1;
}

uint64_t nw_ip_metadata_get_hop_limit(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_protocol_metadata_t v1 = a1;
  nw_protocol_metadata_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_ip_metadata_get_hop_limit_block_invoke;
    v14[3] = &unk_1E5248E90;
    v14[4] = buf;
    uint64_t v3 = v1[4];
    if (v3)
    {
      __nw_ip_metadata_get_hop_limit_block_invoke((uint64_t)v14, v3);
      uint64_t v4 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    }
    else
    {
      uint64_t v4 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_ip_metadata_get_hop_limit";
  v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_hop_limit";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_ip_metadata_get_hop_limit";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_hop_limit";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ip_metadata_get_hop_limit";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_6:

  return v4;
}

uint64_t __nw_ip_metadata_get_hop_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 21);
  return 1;
}

void nw_ip_metadata_set_enable_fragmentation(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_ip_metadata_set_enable_fragmentation_block_invoke;
    v14[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v15 = a2;
    uint64_t v5 = v3[4];
    if (v5) {
      __nw_ip_metadata_set_enable_fragmentation_block_invoke((uint64_t)v14, v5);
    }
    goto LABEL_4;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_ip_metadata_set_enable_fragmentation";
  v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_ip_metadata_set_enable_fragmentation";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_ip_metadata_set_enable_fragmentation";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_ip_metadata_set_enable_fragmentation";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_ip_metadata_set_enable_fragmentation";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
LABEL_4:
}

BOOL __nw_ip_metadata_set_enable_fragmentation_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  char v2 = *(unsigned char *)(a2 + 22);
  if (v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136446210;
      v7 = "nw_ip_metadata_set_enable_fragmentation_block_invoke";
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s Cannot modify static IP metadata", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 32)) {
      int v3 = 2;
    }
    else {
      int v3 = 1;
    }
    *(_DWORD *)(a2 + 16) = v3;
  }
  return (v2 & 1) == 0;
}

uint64_t nw_ip_metadata_get_fragmentation_value(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_protocol_metadata_t v1 = a1;
  char v2 = v1;
  if (v1)
  {
    int v3 = buf;
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v19 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_ip_metadata_get_fragmentation_value_block_invoke;
    v15[3] = &unk_1E5248E90;
    v15[4] = buf;
    uint64_t v4 = v1[4];
    if (v4)
    {
      __nw_ip_metadata_get_fragmentation_value_block_invoke((uint64_t)v15, v4);
      int v3 = *(unsigned char **)&buf[8];
    }
    uint64_t v5 = *((unsigned int *)v3 + 6);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ip_metadata_get_fragmentation_value";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_metadata_get_fragmentation_value";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ip_metadata_get_fragmentation_value";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_metadata_get_fragmentation_value";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_metadata_get_fragmentation_value";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_5:

  return v5;
}

uint64_t __nw_ip_metadata_get_fragmentation_value_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 16);
  return 1;
}

void nw_ip_options_set_disable_fragmentation(nw_protocol_options_t options, BOOL disable_fragmentation)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_disable_fragmentation_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = disable_fragmentation;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_ip_options_set_disable_fragmentation";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_ip_options_set_disable_fragmentation";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_ip_options_set_disable_fragmentation";
          __int16 v18 = 2082;
          int v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_ip_options_set_disable_fragmentation";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_ip_options_set_disable_fragmentation";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AA79D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_disable_fragmentation_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  *(_DWORD *)(a2 + 8) = v2;
  return 1;
}

NWConcrete_nw_protocol_options *nw_custom_ip_create_options(char a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_copy_custom_ip_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_custom_ip_definition(void)::onceToken, &__block_literal_global_7_53383);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_custom_ip_definition(void)::definition);
  int v3 = options;
  if (options)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_custom_ip_create_options_block_invoke;
    v14[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v15 = a1;
    nw_protocol_options_access_handle(options, v14);
    uint64_t v4 = v3;
    goto LABEL_5;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v19 = "nw_custom_ip_create_options";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_custom_ip_create_options";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          int v19 = "nw_custom_ip_create_options";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_custom_ip_create_options";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_custom_ip_create_options";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:

  return v3;
}

void sub_183AA7D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_custom_ip_create_options_block_invoke(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(a1 + 32);
  return 1;
}

BOOL nw_custom_ip_option_is_equal(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

void nw_custom_ip_deallocate_options(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_custom_ip_copy_options(void *a1, unsigned char *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    int v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v19 = "nw_custom_ip_copy_options";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          int v19 = "nw_custom_ip_copy_options";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            int v19 = "nw_custom_ip_copy_options";
            __int16 v20 = 2082;
            uint64_t v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          int v19 = "nw_custom_ip_copy_options";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          int v19 = "nw_custom_ip_copy_options";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v7) {
      free(v7);
    }
    uint64_t v4 = 0;
    goto LABEL_4;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *uint64_t v4 = 0;
    *uint64_t v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  BOOL v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  int v19 = "strict_calloc";
  __int16 v20 = 2048;
  uint64_t v21 = 1;
  __int16 v22 = 2048;
  uint64_t v23 = 1;
  os_log_type_t v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_183AA80D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_custom_ip_allocate_options(void *a1)
{
  id v1 = a1;
  int v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *int v2 = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_183AA8218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_custom_ip_options_get_protocol(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_custom_ip(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_custom_ip_options_get_protocol_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_custom_ip_options_get_protocol";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_custom_ip_options_get_protocol";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_custom_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_custom_ip_options_get_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_custom_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_custom_ip_options_get_protocol";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_custom_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_custom_ip_options_get_protocol";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_custom_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AA8540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_custom_ip_options_get_protocol_block_invoke(uint64_t a1, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

void sub_183AAADCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a25, 8);
  std::ostringstream::~ostringstream(v25);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__53705(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 48;
  uint64_t v5 = MEMORY[0x1E4FBA418];
  *(void *)(a1 + 160) = MEMORY[0x1E4FBA4A8] + 16;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v5 + 8);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 48 + *(void *)(v7 - 24)) = v6;
  uint64_t v8 = (std::ios_base *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24));
  os_log_type_t v9 = (std::ios_base *)(a2 + 48 + *(void *)(*(void *)(a2 + 48) - 24));
  std::ios_base::move(v8, v9);
  v8[1].__vftable = v9[1].__vftable;
  v9[1].__vftable = 0;
  v8[1].__fmtflags_ = v9[1].__fmtflags_;
  *(void *)(a1 + 48) = MEMORY[0x1E4FBA498] + 24;
  *(void *)(a1 + 160) = MEMORY[0x1E4FBA498] + 64;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  *(void *)(a1 + 120) = 0;
  os_log_type_t v11 = (_OWORD *)(a1 + 120);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  BOOL v12 = (long long *)(a2 + 120);
  if (*(char *)(a2 + 143) >= 0) {
    uint64_t v13 = a2 + 120;
  }
  else {
    uint64_t v13 = *(void *)(a2 + 120);
  }
  uint64_t v14 = *(void *)(a2 + 72);
  if (v14)
  {
    uint64_t v15 = v14 - v13;
    uint64_t v16 = *(void *)(a2 + 80) - v13;
    uint64_t v17 = *(void *)(a2 + 88) - v13;
    uint64_t v18 = *(void *)(a2 + 96);
    if (v18)
    {
LABEL_6:
      uint64_t v19 = v18 - v13;
      uint64_t v20 = *(void *)(a2 + 104) - v13;
      uint64_t v21 = *(void *)(a2 + 112) - v13;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = -1;
    uint64_t v16 = -1;
    uint64_t v15 = -1;
    uint64_t v18 = *(void *)(a2 + 96);
    if (v18) {
      goto LABEL_6;
    }
  }
  uint64_t v19 = -1;
  uint64_t v20 = -1;
  uint64_t v21 = -1;
LABEL_9:
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = v22 - v13;
  if (!v22) {
    uint64_t v23 = -1;
  }
  long long v24 = *v12;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *os_log_type_t v11 = v24;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  uint64_t v25 = a1 + 120;
  if (*(char *)(a1 + 143) < 0) {
    uint64_t v25 = *(void *)v11;
  }
  if (v15 != -1)
  {
    *(void *)(a1 + 72) = v25 + v15;
    *(void *)(a1 + 80) = v25 + v16;
    *(void *)(a1 + 88) = v25 + v17;
  }
  if (v19 != -1)
  {
    *(void *)(a1 + 112) = v25 + v21;
    *(void *)(a1 + 96) = v25 + v19;
    *(void *)(a1 + 104) = v25 + v19 + v20;
  }
  uint64_t v26 = v25 + v23;
  if (v23 == -1) {
    uint64_t v26 = 0;
  }
  *(void *)(a1 + 144) = v26;
  if (*(char *)(a2 + 143) < 0) {
    BOOL v12 = *(long long **)(a2 + 120);
  }
  *(void *)(a2 + 72) = v12;
  *(void *)(a2 + 80) = v12;
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = v12;
  *(void *)(a2 + 104) = v12;
  *(void *)(a2 + 112) = v12;
  *(void *)(a2 + 144) = v12;
  std::locale::locale(&v27, (const std::locale *)(a2 + 64));
  (*(void (**)(uint64_t, std::locale *))(*(void *)(a1 + 56) + 16))(a1 + 56, &v27);
  std::locale::locale(&v28, (const std::locale *)(a1 + 64));
  std::locale::operator=((std::locale *)(a1 + 64), &v27);
  std::locale::~locale(&v28);
  std::locale::~locale(&v27);
  *(void *)(v4 + *(void *)(*(void *)(a1 + 48) - 24) + 40) = a1 + 56;
}

void sub_183AAB154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*v11);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x185316200](v9);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__53706(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1E4FBA418];
  uint64_t v2 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 48) = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 48 + *(void *)(v2 - 24)) = *(void *)(v1 + 24);
  *(void *)(a1 + 56) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();

  JUMPOUT(0x185316200);
}

uint64_t nw_resolver_config_get_protocol(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_protocol_block_invoke;
    v14[3] = &unk_1E524B978;
    uint64_t v16 = buf;
    uint64_t v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_protocol_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_protocol";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_protocol";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_protocol";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_protocol";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_183AAB5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_resolver_config_enumerate_name_servers(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v23 = __Block_byref_object_copy__24_53741;
    long long v24 = __Block_byref_object_dispose__25_53742;
    id v25 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_resolver_config_enumerate_name_servers_block_invoke;
    v17[3] = &unk_1E524B978;
    uint64_t v19 = buf;
    uint64_t v18 = (os_unfair_lock_s *)v3;
    uint64_t v5 = v18 + 22;
    os_unfair_lock_lock(v18 + 22);
    __nw_resolver_config_enumerate_name_servers_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *(void **)(*(void *)&buf[8] + 40);
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_name_servers_block_invoke_2;
      applier[3] = &unk_1E5244348;
      id v16 = v4;
      xpc_array_apply(v6, applier);
    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_name_servers";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_name_servers";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_name_servers";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_name_servers";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_name_servers";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_183AABA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void nw_resolver_config_enumerate_search_domains(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v23 = __Block_byref_object_copy__24_53741;
    long long v24 = __Block_byref_object_dispose__25_53742;
    id v25 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_resolver_config_enumerate_search_domains_block_invoke;
    v17[3] = &unk_1E524B978;
    uint64_t v19 = buf;
    uint64_t v18 = (os_unfair_lock_s *)v3;
    uint64_t v5 = v18 + 22;
    os_unfair_lock_lock(v18 + 22);
    __nw_resolver_config_enumerate_search_domains_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *(void **)(*(void *)&buf[8] + 40);
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_search_domains_block_invoke_2;
      applier[3] = &unk_1E5244348;
      id v16 = v4;
      xpc_array_apply(v6, applier);
    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_search_domains";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_search_domains";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_search_domains";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_search_domains";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_search_domains";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_183AABEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_get_provider_name(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_provider_name_block_invoke;
    v14[3] = &unk_1E524B978;
    id v16 = buf;
    uint64_t v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_provider_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_name";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_name";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_name";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_name";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_name";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_183AAC248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_get_provider_path(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_provider_path_block_invoke;
    v14[3] = &unk_1E524B978;
    id v16 = buf;
    uint64_t v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_provider_path_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_path";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_path";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_path";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_path";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_path";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_183AAC5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x185316200](a1 + 112);
  return a1;
}

void __nw_resolver_config_get_provider_path_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProviderPath");
}

void sub_183AAC740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_provider_name_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProviderName");
}

void sub_183AAC7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24_53741(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25_53742(uint64_t a1)
{
}

void __nw_resolver_config_enumerate_search_domains_block_invoke(uint64_t a1)
{
  id v5 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = xpc_dictionary_get_value(v5, "SearchDomains");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_183AAC854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_search_domains_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    uint64_t v6 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *))(v6 + 16))(v6, string_ptr);
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183AAC8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_name_servers_block_invoke(uint64_t a1)
{
  id v5 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = xpc_dictionary_get_value(v5, "NameServers");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_183AAC958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_name_servers_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    uint64_t v6 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *))(v6 + 16))(v6, string_ptr);
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183AAC9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_protocol_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_int64(v2, "Protocol");
}

void sub_183AACA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_resolver_config *nw_resolver_config_create()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  id v1 = nw_resolver_config_create_with_dictionary(v0);
  if (v0) {

  }
  return v1;
}

void sub_183AACABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

nw_resolver_config_t nw_resolver_config_create_https(nw_endpoint_t url_endpoint)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v1 = url_endpoint;
  id v2 = v1;
  if (!v1)
  {
    long long v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v8, type, out)) {
      goto LABEL_26;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v25 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null url_endpoint", buf, 0xCu);
      }
    }
    else if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v25 = __nwlog_obj();
      os_log_type_t v30 = type[0];
      BOOL v31 = os_log_type_enabled(v25, type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null url_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null url_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v25 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null url_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_62;
  }
  uint64_t v3 = v1;
  int v4 = [v3 type];

  if (v4 != 4)
  {
    std::locale v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v8, type, out)) {
      goto LABEL_26;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v25 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url)", buf, 0xCu);
      }
    }
    else if (out[0])
    {
      v32 = (char *)__nw_create_backtrace_string();
      id v25 = __nwlog_obj();
      os_log_type_t v33 = type[0];
      BOOL v34 = os_log_type_enabled(v25, type[0]);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v32;
          _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
LABEL_26:
        if (!v8)
        {
LABEL_28:
          uint64_t v18 = 0;
          goto LABEL_29;
        }
LABEL_27:
        free(v8);
        goto LABEL_28;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v25 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_62:

    goto LABEL_26;
  }
  url_scheme = (const char *)nw_endpoint_get_url_scheme(v3);
  uint64_t v6 = url_scheme;
  if (!url_scheme || strcasecmp(url_scheme, "https"))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v6;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (__nwlog_fault(v8, type, out))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v6;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s Invalid URL scheme: %s", buf, 0x16u);
        }
      }
      else if (out[0])
      {
        os_log_type_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v12 = type[0];
        BOOL v13 = os_log_type_enabled(v9, type[0]);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v6;
            *(_WORD *)&buf[22] = 2082;
            *(void *)&unsigned char buf[24] = v11;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Invalid URL scheme: %s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v11);
          if (!v8) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v6;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Invalid URL scheme: %s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v22 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v6;
          _os_log_impl(&dword_1830D4000, v9, v22, "%{public}s Invalid URL scheme: %s, backtrace limit exceeded", buf, 0x16u);
        }
      }
    }
    goto LABEL_26;
  }
  xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
  *(void *)buf = v14;
  buf[8] = -1;
  uint64_t v15 = nw_resolver_config_create_with_dictionary(v14);
  if (v14) {

  }
  *(void *)os_log_type_t type = v15;
  char v38 = -1;
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  nw_resolver_config_set_identifier(v15, out);
  memset(buf, 0, 37);
  uuid_unparse(out, (char *)buf);
  m_obj = v15->dictionary.m_obj;
  char v17 = v15;
  xpc_dictionary_set_string(m_obj, "Identifier", (const char *)buf);

  nw_resolver_config_set_class(v17, 3);
  nw_resolver_config_set_protocol(v17, 2);
  uint64_t v18 = v17;
  uint64_t v19 = v3;
  uint64_t v20 = [v19 hostname];

  nw_resolver_config_set_provider_name(v18, v20);
  uint64_t url_path = nw_endpoint_get_url_path(v19);
  if (url_path) {
    nw_resolver_config_set_provider_path(v18, url_path);
  }
LABEL_29:

  return v18;
}

void sub_183AAD344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_identifier(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 24) = *a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_resolver_config_set_identifier";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_resolver_config_set_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_resolver_config_set_identifier";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_resolver_config_set_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_resolver_config_set_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_resolver_config_set_class(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_class_block_invoke;
    v14[3] = &unk_1E524A070;
    uint64_t v15 = (os_unfair_lock_s *)v3;
    int v16 = a2;
    uint64_t v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_set_class_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_resolver_config_set_class";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_class";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_resolver_config_set_class";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_class";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_class";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AAD968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_set_protocol(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_protocol_block_invoke;
    v14[3] = &unk_1E524A070;
    uint64_t v15 = (os_unfair_lock_s *)v3;
    int v16 = a2;
    uint64_t v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_set_protocol_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_resolver_config_set_protocol";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_protocol";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_resolver_config_set_protocol";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_protocol";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_protocol";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AADC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_set_provider_name(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_provider_name_block_invoke;
    v14[3] = &unk_1E52491B0;
    uint64_t v15 = (os_unfair_lock_s *)v3;
    uint64_t v16 = a2;
    uint64_t v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_set_provider_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_resolver_config_set_provider_name";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_provider_name";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_resolver_config_set_provider_name";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_provider_name";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_provider_name";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AADFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_set_provider_path(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_provider_path_block_invoke;
    v14[3] = &unk_1E52491B0;
    uint64_t v15 = (os_unfair_lock_s *)v3;
    uint64_t v16 = a2;
    uint64_t v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_set_provider_path_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_resolver_config_set_provider_path";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_provider_path";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_resolver_config_set_provider_path";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_provider_path";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_provider_path";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AAE2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_provider_path_block_invoke(uint64_t a1)
{
}

void __nw_resolver_config_set_provider_name_block_invoke(uint64_t a1)
{
}

void __nw_resolver_config_set_protocol_block_invoke(uint64_t a1)
{
}

void __nw_resolver_config_set_class_block_invoke(uint64_t a1)
{
}

nw_resolver_config_t nw_resolver_config_create_tls(nw_endpoint_t server_endpoint)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v1 = server_endpoint;
  id v2 = v1;
  if (!v1)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)uuid_string_t string = 136446210;
    *(void *)&string[4] = "nw_resolver_config_create_tls";
    xpc_object_t v14 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v14, type, out)) {
      goto LABEL_40;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)uuid_string_t string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null server_endpoint", (uint8_t *)string, 0xCu);
      }
    }
    else if (out[0])
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      BOOL v21 = os_log_type_enabled(v15, type[0]);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)uuid_string_t string = 136446466;
          *(void *)&string[4] = "nw_resolver_config_create_tls";
          *(_WORD *)&string[12] = 2082;
          *(void *)&string[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null server_endpoint, dumping backtrace:%{public}s", (uint8_t *)string, 0x16u);
        }

        free(backtrace_string);
        if (!v14) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (v21)
      {
        *(_DWORD *)uuid_string_t string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null server_endpoint, no backtrace", (uint8_t *)string, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)uuid_string_t string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null server_endpoint, backtrace limit exceeded", (uint8_t *)string, 0xCu);
      }
    }
    goto LABEL_39;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if ((v4 - 3) < 0xFFFFFFFE)
  {
    char v17 = __nwlog_obj();
    *(_DWORD *)uuid_string_t string = 136446210;
    *(void *)&string[4] = "nw_resolver_config_create_tls";
    xpc_object_t v14 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v14, type, out)) {
      goto LABEL_40;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)uuid_string_t string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address)", (uint8_t *)string, 0xCu);
      }
    }
    else if (out[0])
    {
      os_log_type_t v22 = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      BOOL v24 = os_log_type_enabled(v15, type[0]);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)uuid_string_t string = 136446466;
          *(void *)&string[4] = "nw_resolver_config_create_tls";
          *(_WORD *)&string[12] = 2082;
          *(void *)&string[14] = v22;
          _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), dumping backtrace:%{public}s", (uint8_t *)string, 0x16u);
        }

        free(v22);
LABEL_40:
        if (!v14)
        {
LABEL_42:
          os_log_type_t v9 = 0;
          goto LABEL_6;
        }
LABEL_41:
        free(v14);
        goto LABEL_42;
      }
      if (v24)
      {
        *(_DWORD *)uuid_string_t string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), no backtrace", (uint8_t *)string, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)uuid_string_t string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), backtrace limit exceeded", (uint8_t *)string, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  *(void *)uuid_string_t string = v5;
  string[8] = -1;
  uint64_t v6 = nw_resolver_config_create_with_dictionary(v5);
  if (v5) {

  }
  *(void *)os_log_type_t type = v6;
  char v28 = -1;
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  nw_resolver_config_set_identifier(v6, out);
  memset(string, 0, sizeof(string));
  uuid_unparse(out, string);
  m_obj = v6->dictionary.m_obj;
  os_log_type_t v8 = v6;
  xpc_dictionary_set_string(m_obj, "Identifier", string);

  nw_resolver_config_set_class(v8, 3);
  nw_resolver_config_set_protocol(v8, 1);
  os_log_type_t v9 = v8;
  os_log_type_t v10 = v3;
  uint64_t v11 = [v10 hostname];

  nw_resolver_config_set_provider_name(v9, v11);
LABEL_6:

  return v9;
}

void sub_183AAE8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

id nw_resolver_config_copy_dictionary(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x4012000000;
    os_log_type_t v23 = __Block_byref_object_copy__14_53907;
    BOOL v24 = __Block_byref_object_dispose__15_53908;
    uint64_t v25 = 256;
    id v26 = 0;
    char v27 = -1;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_resolver_config_copy_dictionary_block_invoke;
    v17[3] = &unk_1E524B978;
    uint64_t v19 = buf;
    os_log_type_t v18 = (os_unfair_lock_s *)v1;
    id v3 = v18 + 22;
    os_unfair_lock_lock(v18 + 22);
    __nw_resolver_config_copy_dictionary_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)&buf[8];
    id v5 = *(id *)(*(void *)&buf[8] + 48);
    uint64_t v6 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = 0;

    _Block_object_dispose(buf, 8);
    id v7 = v26;
    if ((v27 & 1) != 0 && v26)
    {
      id v26 = 0;

      id v7 = v26;
    }
    id v26 = 0;

    goto LABEL_6;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_dictionary";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v10, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_dictionary";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v10) {
    free(v10);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183AAED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr(v13);

  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__14_53907(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(id *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 56) & 0xFE | *(unsigned char *)(a2 + 56) & 1;
  uint64_t v4 = *(void **)(a2 + 48);
  *(void *)(a2 + 48) = 0;

  *(unsigned char *)(a2 + 56) &= ~1u;
}

void __Block_byref_object_dispose__15_53908(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if ((*(unsigned char *)(a1 + 56) & 1) != 0 && v2)
  {
    *(void *)(a1 + 48) = 0;

    id v2 = *(void **)(a1 + 48);
  }
  *(void *)(a1 + 48) = 0;

  id v3 = *(void **)(a1 + 48);
}

void __nw_resolver_config_copy_dictionary_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 48);
  if ((*(unsigned char *)(v3 + 56) & 1) != 0 && v4)
  {
    *(void *)(v3 + 48) = 0;

    uint64_t v4 = *(void **)(v3 + 48);
  }
  *(void *)(v3 + 48) = 0;

  id v5 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v2;
  id v6 = v2;

  *(unsigned char *)(v3 + 56) |= 1u;
}

CFDataRef nw_resolver_config_copy_plist_data_ref(void *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)v32 = 0;
    *(void *)&v32[8] = v32;
    *(void *)&v32[16] = 0x4012000000;
    os_log_type_t v33 = __Block_byref_object_copy__17_53917;
    BOOL v34 = __Block_byref_object_dispose__18_53918;
    os_log_type_t v35 = &unk_18405C45D;
    CFTypeRef v36 = 0;
    char v37 = -1;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_resolver_config_copy_plist_data_ref_block_invoke;
    v24[3] = &unk_1E524B978;
    id v26 = v32;
    uint64_t v25 = (os_unfair_lock_s *)v1;
    uint64_t v3 = v25 + 22;
    os_unfair_lock_lock(v25 + 22);
    __nw_resolver_config_copy_plist_data_ref_block_invoke((uint64_t)v24);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(const void **)(*(void *)&v32[8] + 48);
    if (v4)
    {
      CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, kCFPropertyListBinaryFormat_v1_0, 0, 0);
LABEL_12:

      _Block_object_dispose(v32, 8);
      if ((v37 & 1) != 0 && v36) {
        CFRelease(v36);
      }
      goto LABEL_15;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_resolver_config_copy_plist_data_ref";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v7, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_resolver_config_copy_plist_data_ref";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "nw_resolver_config_copy_plist_data_ref";
            __int16 v30 = 2082;
            uint64_t v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v7) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_resolver_config_copy_plist_data_ref";
          _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_resolver_config_copy_plist_data_ref";
          _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v7)
    {
LABEL_11:
      CFDataRef Data = 0;
      goto LABEL_12;
    }
LABEL_10:
    free(v7);
    goto LABEL_11;
  }
  BOOL v15 = __nwlog_obj();
  *(_DWORD *)v32 = 136446210;
  *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
  os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v16, buf, &type))
  {
    if (buf[0] == 17)
    {
      char v17 = __nwlog_obj();
      os_log_type_t v18 = buf[0];
      if (os_log_type_enabled(v17, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null config", v32, 0xCu);
      }
    }
    else if (type)
    {
      uint64_t v19 = (char *)__nw_create_backtrace_string();
      char v17 = __nwlog_obj();
      os_log_type_t v20 = buf[0];
      BOOL v21 = os_log_type_enabled(v17, (os_log_type_t)buf[0]);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)v32 = 136446466;
          *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
          *(_WORD *)&v32[12] = 2082;
          *(void *)&v32[14] = v19;
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null config, dumping backtrace:%{public}s", v32, 0x16u);
        }

        free(v19);
        goto LABEL_44;
      }
      if (v21)
      {
        *(_DWORD *)v32 = 136446210;
        *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null config, no backtrace", v32, 0xCu);
      }
    }
    else
    {
      char v17 = __nwlog_obj();
      os_log_type_t v22 = buf[0];
      if (os_log_type_enabled(v17, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null config, backtrace limit exceeded", v32, 0xCu);
      }
    }
  }
LABEL_44:
  if (v16) {
    free(v16);
  }
  CFDataRef Data = 0;
LABEL_15:

  return Data;
}

void sub_183AAF4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a25, 8);
  if (a32)
  {
    os_log_type_t v35 = *(const void **)(v33 + 48);
    if (v35) {
      CFRelease(v35);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17_53917(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(result + 56) & 0xFE | *(unsigned char *)(a2 + 56) & 1;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__18_53918(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    id v2 = *(const void **)(a1 + 48);
    if (v2) {
      CFRelease(v2);
    }
  }
  *(void *)(a1 + 48) = 0;
}

void __nw_resolver_config_copy_plist_data_ref_block_invoke(uint64_t a1)
{
  id v6 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = _CFXPCCreateCFObjectFromXPCObject();
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  char v4 = *(unsigned char *)(v3 + 56);
  if (v4)
  {
    id v5 = *(const void **)(v3 + 48);
    if (v5)
    {
      CFRelease(v5);
      char v4 = *(unsigned char *)(v3 + 56);
    }
  }
  *(void *)(v3 + 48) = v2;
  *(unsigned char *)(v3 + 56) = v4 | 1;
}

void sub_183AAF5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

dispatch_data_t nw_resolver_config_copy_plist_data(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x4012000000;
    os_log_type_t v20 = __Block_byref_object_copy__20;
    BOOL v21 = __Block_byref_object_dispose__21;
    os_log_type_t v22 = &unk_18405C45D;
    CFTypeRef cf = nw_resolver_config_copy_plist_data_ref(v1);
    v24 |= 1u;
    CFDataRef v3 = *(const __CFData **)(*(void *)&buf[8] + 48);
    if (v3)
    {
      BytePtr = CFDataGetBytePtr(v3);
      CFIndex Length = CFDataGetLength(*(CFDataRef *)(*(void *)&buf[8] + 48));
      destructor[0] = MEMORY[0x1E4F143A8];
      destructor[1] = 3221225472;
      destructor[2] = __nw_resolver_config_copy_plist_data_block_invoke;
      destructor[3] = &unk_1E52448D8;
      destructor[4] = buf;
      dispatch_data_t v6 = dispatch_data_create(BytePtr, Length, 0, destructor);
    }
    else
    {
      dispatch_data_t v6 = 0;
    }
    _Block_object_dispose(buf, 8);
    if ((v24 & 1) != 0 && cf) {
      CFRelease(cf);
    }
    goto LABEL_8;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_plist_data";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_plist_data";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_plist_data";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_plist_data";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_copy_plist_data";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v9) {
    free(v9);
  }
  dispatch_data_t v6 = 0;
LABEL_8:

  return v6;
}

void sub_183AAF9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef cf,char a26)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(result + 56) & 0xFE | *(unsigned char *)(a2 + 56) & 1;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(const void **)(a1 + 48);
    if (v2) {
      CFRelease(v2);
    }
  }
  *(void *)(a1 + 48) = 0;
}

void __nw_resolver_config_copy_plist_data_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  char v2 = *(unsigned char *)(v1 + 56);
  if (v2)
  {
    CFDataRef v3 = *(const void **)(v1 + 48);
    if (v3)
    {
      CFRelease(v3);
      char v2 = *(unsigned char *)(v1 + 56);
    }
  }
  *(void *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 56) = v2 | 1;
}

void nw_resolver_config_add_name_server(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  char v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_add_name_server_block_invoke;
    v14[3] = &unk_1E52491B0;
    os_log_type_t v15 = (os_unfair_lock_s *)v3;
    uint64_t v16 = a2;
    id v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_add_name_server_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  dispatch_data_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_resolver_config_add_name_server";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_resolver_config_add_name_server";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_resolver_config_add_name_server";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_resolver_config_add_name_server";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_resolver_config_add_name_server";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AAFD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_name_server_block_invoke(uint64_t a1)
{
  char v2 = xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "NameServers");
  if (v2)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = xpc_array_create(0, 0);
    char v2 = v3;
  }
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "NameServers", v2);

  if (v3)
  {
  }
}

void sub_183AAFE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_name_servers(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_name_servers_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_name_servers_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  char v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_name_servers";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_name_servers";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_name_servers";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_name_servers";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_name_servers";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB01B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_name_servers_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_add_search_domain(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  char v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_add_search_domain_block_invoke;
    v14[3] = &unk_1E52491B0;
    os_log_type_t v15 = (os_unfair_lock_s *)v3;
    uint64_t v16 = a2;
    id v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_add_search_domain_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  dispatch_data_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_resolver_config_add_search_domain";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_add_search_domain";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_resolver_config_add_search_domain";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_add_search_domain";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_add_search_domain";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AB04EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_search_domain_block_invoke(uint64_t a1)
{
  char v2 = xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "SearchDomains");
  if (v2)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = xpc_array_create(0, 0);
    char v2 = v3;
  }
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "SearchDomains", v2);

  if (v3)
  {
  }
}

void sub_183AB05E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_search_domains(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_search_domains_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_search_domains_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  char v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_search_domains";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_search_domains";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_search_domains";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_search_domains";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_search_domains";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB0904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_search_domains_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_add_match_domain(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  char v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_add_match_domain_block_invoke;
    v14[3] = &unk_1E52491B0;
    os_log_type_t v15 = (os_unfair_lock_s *)v3;
    uint64_t v16 = a2;
    id v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_add_match_domain_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  dispatch_data_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_resolver_config_add_match_domain";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_add_match_domain";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_resolver_config_add_match_domain";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_add_match_domain";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_add_match_domain";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AB0C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_match_domain_block_invoke(uint64_t a1)
{
  char v2 = xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "MatchDomains");
  if (v2)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = xpc_array_create(0, 0);
    char v2 = v3;
  }
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "MatchDomains", v2);

  if (v3)
  {
  }
}

void sub_183AB0D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_match_domains(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_match_domains_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_match_domains_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  char v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_match_domains";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_match_domains";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_match_domains";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_match_domains";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_match_domains";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB1058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_match_domains_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_enumerate_match_domains(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v23 = __Block_byref_object_copy__24_53741;
    char v24 = __Block_byref_object_dispose__25_53742;
    id v25 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_resolver_config_enumerate_match_domains_block_invoke;
    v17[3] = &unk_1E524B978;
    uint64_t v19 = buf;
    __int16 v18 = (os_unfair_lock_s *)v3;
    id v5 = v18 + 22;
    os_unfair_lock_lock(v18 + 22);
    __nw_resolver_config_enumerate_match_domains_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v5);
    dispatch_data_t v6 = *(void **)(*(void *)&buf[8] + 40);
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_match_domains_block_invoke_2;
      applier[3] = &unk_1E5244348;
      id v16 = v4;
      xpc_array_apply(v6, applier);
    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_match_domains";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_match_domains";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_match_domains";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_match_domains";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_match_domains";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_183AB1468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_match_domains_block_invoke(uint64_t a1)
{
  id v5 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = xpc_dictionary_get_value(v5, "MatchDomains");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_183AB1520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_match_domains_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    uint64_t v6 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *))(v6 + 16))(v6, string_ptr);
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183AB15A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_add_server_raw_public_key(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_add_server_raw_public_key_block_invoke;
    v16[3] = &unk_1E5249DC0;
    char v17 = (os_unfair_lock_s *)v5;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    os_log_type_t v7 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_add_server_raw_public_key_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7);

    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_resolver_config_add_server_raw_public_key";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_add_server_raw_public_key";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = v21;
      BOOL v14 = os_log_type_enabled(v10, v21);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_resolver_config_add_server_raw_public_key";
          __int16 v24 = 2082;
          id v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_add_server_raw_public_key";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_add_server_raw_public_key";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_183AB18C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_server_raw_public_key_block_invoke(uint64_t a1)
{
  uint64_t v2 = xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "ServerRawPublicKey");
  if (v2)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = xpc_array_create(0, 0);
    uint64_t v2 = v3;
  }
  xpc_array_set_data(v2, 0xFFFFFFFFFFFFFFFFLL, *(const void **)(a1 + 40), *(void *)(a1 + 48));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "ServerRawPublicKey", v2);

  if (v3)
  {
  }
}

void sub_183AB19B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_server_raw_public_keys(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_server_raw_public_keys_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_server_raw_public_keys_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_server_raw_public_keys";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_server_raw_public_keys";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB1CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_server_raw_public_keys_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_enumerate_server_raw_public_keys(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v23 = __Block_byref_object_copy__24_53741;
    __int16 v24 = __Block_byref_object_dispose__25_53742;
    id v25 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke;
    v17[3] = &unk_1E524B978;
    uint64_t v19 = buf;
    __int16 v18 = (os_unfair_lock_s *)v3;
    id v5 = v18 + 22;
    os_unfair_lock_lock(v18 + 22);
    __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *(void **)(*(void *)&buf[8] + 40);
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke_2;
      applier[3] = &unk_1E5244348;
      id v16 = v4;
      xpc_array_apply(v6, applier);
    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_183AB20E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke(uint64_t a1)
{
  id v5 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = xpc_dictionary_get_value(v5, "ServerRawPublicKey");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_183AB21A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14580])
  {
    uint64_t v6 = *(void *)(a1 + 32);
    bytes_ptr = xpc_data_get_bytes_ptr(v4);
    size_t length = xpc_data_get_length(v4);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const void *, size_t))(v6 + 16))(v6, bytes_ptr, length);
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183AB223C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_add_client_raw_public_key(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_add_client_raw_public_key_block_invoke;
    v16[3] = &unk_1E5249DC0;
    char v17 = (os_unfair_lock_s *)v5;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    os_log_type_t v7 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_add_client_raw_public_key_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7);

    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_resolver_config_add_client_raw_public_key";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_add_client_raw_public_key";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = v21;
      BOOL v14 = os_log_type_enabled(v10, v21);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_resolver_config_add_client_raw_public_key";
          __int16 v24 = 2082;
          id v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_add_client_raw_public_key";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_add_client_raw_public_key";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_183AB2558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_client_raw_public_key_block_invoke(uint64_t a1)
{
  uint64_t v2 = xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "ClientRawPublicKey");
  if (v2)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = xpc_array_create(0, 0);
    uint64_t v2 = v3;
  }
  xpc_array_set_data(v2, 0xFFFFFFFFFFFFFFFFLL, *(const void **)(a1 + 40), *(void *)(a1 + 48));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(a1 + 32) + 8), "ClientRawPublicKey", v2);

  if (v3)
  {
  }
}

void sub_183AB264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_client_raw_public_keys(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_client_raw_public_keys_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_client_raw_public_keys_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_client_raw_public_keys";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_client_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_client_raw_public_keys";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_client_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_client_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB2970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_client_raw_public_keys_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_enumerate_client_raw_public_keys(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v23 = __Block_byref_object_copy__24_53741;
    __int16 v24 = __Block_byref_object_dispose__25_53742;
    id v25 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke;
    v17[3] = &unk_1E524B978;
    uint64_t v19 = buf;
    __int16 v18 = (os_unfair_lock_s *)v3;
    id v5 = v18 + 22;
    os_unfair_lock_lock(v18 + 22);
    __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *(void **)(*(void *)&buf[8] + 40);
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke_2;
      applier[3] = &unk_1E5244348;
      id v16 = v4;
      xpc_array_apply(v6, applier);
    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_183AB2D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke(uint64_t a1)
{
  id v5 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = xpc_dictionary_get_value(v5, "ClientRawPublicKey");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_183AB2E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14580])
  {
    uint64_t v6 = *(void *)(a1 + 32);
    bytes_ptr = xpc_data_get_bytes_ptr(v4);
    size_t length = xpc_data_get_length(v4);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const void *, size_t))(v6 + 16))(v6, bytes_ptr, length);
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183AB2ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_set_interface_name(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_interface_name_block_invoke;
    v14[3] = &unk_1E52491B0;
    os_log_type_t v15 = (os_unfair_lock_s *)v3;
    uint64_t v16 = a2;
    uint64_t v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_set_interface_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v20 = "nw_resolver_config_set_interface_name";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_resolver_config_set_interface_name";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v20 = "nw_resolver_config_set_interface_name";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_resolver_config_set_interface_name";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_resolver_config_set_interface_name";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AB31E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_interface_name_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_clear_interface_name(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_interface_name_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_interface_name_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_interface_name";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_interface_name";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_interface_name";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_interface_name";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_interface_name";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_interface_name_block_invoke(uint64_t a1)
{
}

uint64_t nw_resolver_config_get_interface_name(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_interface_name_block_invoke;
    v14[3] = &unk_1E524B978;
    uint64_t v16 = buf;
    os_log_type_t v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_interface_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_interface_name";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_interface_name";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_interface_name";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_interface_name";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_interface_name";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_183AB388C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_interface_name_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "InterfaceName");
}

void sub_183AB391C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_provider_description(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_provider_description_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_provider_description_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_provider_description";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_description";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_provider_description";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_description";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_description";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB3C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_provider_description_block_invoke(uint64_t a1)
{
}

uint64_t nw_resolver_config_get_provider_description(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_provider_description_block_invoke;
    v14[3] = &unk_1E524B978;
    uint64_t v16 = buf;
    os_log_type_t v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_provider_description_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_description";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_description";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_description";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_description";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_provider_description";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_183AB3FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_provider_description_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProviderDescription");
}

void sub_183AB4030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_provider_name(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_provider_name_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_provider_name_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_provider_name";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_name";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_provider_name";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_name";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_name";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB4344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_provider_name_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_clear_provider_path(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_provider_path_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_provider_path_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_provider_path";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_path";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_provider_path";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_path";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_provider_path";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_provider_path_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_set_proxy_agent(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_proxy_agent_block_invoke;
    v14[3] = &unk_1E52491B0;
    os_log_type_t v15 = (os_unfair_lock_s *)v3;
    uint64_t v16 = a2;
    uint64_t v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_set_proxy_agent_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_resolver_config_set_proxy_agent";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_proxy_agent";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_resolver_config_set_proxy_agent";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_proxy_agent";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_resolver_config_set_proxy_agent";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AB49B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_proxy_agent_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_clear_proxy_agent(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_proxy_agent_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_proxy_agent_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_proxy_agent";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_proxy_agent";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_proxy_agent";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_proxy_agent";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_proxy_agent";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB4CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_proxy_agent_block_invoke(uint64_t a1)
{
}

uint64_t nw_resolver_config_get_proxy_agent(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_proxy_agent_block_invoke;
    v14[3] = &unk_1E524B978;
    uint64_t v16 = buf;
    os_log_type_t v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_proxy_agent_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_proxy_agent";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_proxy_agent";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_proxy_agent";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_proxy_agent";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_proxy_agent";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_183AB505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_proxy_agent_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProxyAgent");
}

void sub_183AB50EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_set_identity_reference(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_set_identity_reference_block_invoke;
    v16[3] = &unk_1E5249DC0;
    char v17 = (os_unfair_lock_s *)v5;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    os_log_type_t v7 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_set_identity_reference_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7);

    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_resolver_config_set_identity_reference";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_set_identity_reference";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = v21;
      BOOL v14 = os_log_type_enabled(v10, v21);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_resolver_config_set_identity_reference";
          __int16 v24 = 2082;
          id v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_set_identity_reference";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_set_identity_reference";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_183AB540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_identity_reference_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_clear_identity_reference(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_identity_reference_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_identity_reference_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_identity_reference";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_identity_reference";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_identity_reference";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_identity_reference";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_identity_reference";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB5748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_identity_reference_block_invoke(uint64_t a1)
{
}

uint64_t nw_resolver_config_get_identity_reference(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v23 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_get_identity_reference_block_invoke;
    v16[3] = &unk_1E524BAF8;
    __int16 v18 = buf;
    char v17 = (os_unfair_lock_s *)v3;
    uint64_t v19 = a2;
    id v5 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_get_identity_reference_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_identity_reference";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_identity_reference";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_identity_reference";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_identity_reference";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_identity_reference";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_3:

  return v6;
}

void sub_183AB5AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_identity_reference_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_data(v2, "IdentityReference", *(size_t **)(a1 + 48));
}

void sub_183AB5B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_set_odoh_config(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_set_odoh_config_block_invoke;
    v16[3] = &unk_1E5249DC0;
    char v17 = (os_unfair_lock_s *)v5;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    os_log_type_t v7 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_set_odoh_config_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7);

    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_resolver_config_set_odoh_config";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_set_odoh_config";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = v21;
      BOOL v14 = os_log_type_enabled(v10, v21);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_resolver_config_set_odoh_config";
          __int16 v24 = 2082;
          id v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_set_odoh_config";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_resolver_config_set_odoh_config";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_183AB5E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_odoh_config_block_invoke(uint64_t a1)
{
}

void nw_resolver_config_clear_odoh_config(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_odoh_config_block_invoke;
    v12[3] = &unk_1E524BAA8;
    os_log_type_t v13 = (os_unfair_lock_s *)v1;
    id v3 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    __nw_resolver_config_clear_odoh_config_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_resolver_config_clear_odoh_config";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_odoh_config";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_resolver_config_clear_odoh_config";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_odoh_config";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_resolver_config_clear_odoh_config";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AB61B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_odoh_config_block_invoke(uint64_t a1)
{
}

uint64_t nw_resolver_config_get_odoh_config(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v23 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_get_odoh_config_block_invoke;
    v16[3] = &unk_1E524BAF8;
    __int16 v18 = buf;
    char v17 = (os_unfair_lock_s *)v3;
    uint64_t v19 = a2;
    id v5 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_get_odoh_config_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_odoh_config";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_odoh_config";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_odoh_config";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_odoh_config";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_odoh_config";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_3:

  return v6;
}

void sub_183AB6528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_odoh_config_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_data(v2, "ODoHConfig", *(size_t **)(a1 + 48));
}

void sub_183AB65BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_set_allow_failover(void *a1, char a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_allow_failover_block_invoke;
    v14[3] = &unk_1E5248D20;
    os_log_type_t v15 = (os_unfair_lock_s *)v3;
    char v16 = a2;
    id v5 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_set_allow_failover_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v20 = "nw_resolver_config_set_allow_failover";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_resolver_config_set_allow_failover";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v20 = "nw_resolver_config_set_allow_failover";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_resolver_config_set_allow_failover";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_resolver_config_set_allow_failover";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AB68D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_allow_failover_block_invoke(uint64_t a1)
{
}

BOOL nw_resolver_config_get_allow_failover(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_allow_failover_block_invoke;
    v14[3] = &unk_1E524B978;
    char v16 = buf;
    os_log_type_t v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_allow_failover_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_allow_failover";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_allow_failover";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_allow_failover";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_allow_failover";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_allow_failover";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  BOOL v4 = 0;
LABEL_3:

  return v4;
}

void sub_183AB6C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_allow_failover_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_BOOL(v2, "AllowFailover");
}

void sub_183AB6CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id nw_resolver_config_copy_proxy_config(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)uu = 136446210;
    *(void *)&uu[4] = "nw_resolver_config_copy_proxy_config";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v9, type, &v19))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)uu = 136446210;
          *(void *)&uu[4] = "nw_resolver_config_copy_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", uu, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        BOOL v10 = __nwlog_obj();
        os_log_type_t v13 = type[0];
        BOOL v14 = os_log_type_enabled(v10, type[0]);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)uu = 136446466;
            *(void *)&uu[4] = "nw_resolver_config_copy_proxy_config";
            *(_WORD *)&uu[12] = 2082;
            *(void *)&uu[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v14)
        {
          *(_DWORD *)uu = 136446210;
          *(void *)&uu[4] = "nw_resolver_config_copy_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", uu, 0xCu);
        }
      }
      else
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v15 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)uu = 136446210;
          *(void *)&uu[4] = "nw_resolver_config_copy_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", uu, 0xCu);
        }
      }
    }
LABEL_25:
    if (v9) {
      free(v9);
    }
    goto LABEL_27;
  }
  proxy_agent = (const char *)nw_resolver_config_get_proxy_agent(v1);
  if (!proxy_agent)
  {
LABEL_27:
    id v5 = 0;
    goto LABEL_28;
  }
  *(void *)uu = 0;
  *(void *)&uu[8] = 0;
  uuid_parse(proxy_agent, uu);
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v4 = (id)nw_context_copy_implicit_context::implicit_context;
  *(void *)os_log_type_t type = v4;
  char v18 = -1;
  id v5 = nw_path_copy_proxy_config_for_agent_uuid(uu, 0xFFFFFFFF, v4);
  if (v4) {

  }
  if (v5)
  {
    int v6 = v2[23];
    os_log_type_t v7 = v5;
    v7[41] = v6;
  }
LABEL_28:

  return v5;
}

void sub_183AB7014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);

  _Unwind_Resume(a1);
}

void nw_resolver_config_add_server_address(nw_resolver_config_t config, nw_endpoint_t server_address)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = config;
  id v4 = server_address;
  id v5 = v4;
  if (!v3)
  {
    BOOL v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_config_add_server_address";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_resolver_config_add_server_address";
          __int16 v33 = 2082;
          BOOL v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11) {
          goto LABEL_5;
        }
LABEL_56:
        free(v11);
        goto LABEL_5;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_config_add_server_address";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null server_address", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null server_address, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v21 = (char *)__nw_create_backtrace_string();
    BOOL v12 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null server_address, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_resolver_config_add_server_address";
      __int16 v33 = 2082;
      BOOL v34 = v21;
      _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null server_address, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  int v6 = v4;
  int v7 = [v6 type];

  if (v7 != 1)
  {
    char v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_config_add_server_address";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address)", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v21 = (char *)__nw_create_backtrace_string();
    BOOL v12 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address), no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_resolver_config_add_server_address";
      __int16 v33 = 2082;
      BOOL v34 = v21;
      _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v21);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v8 = v6;
  uint64_t v9 = [v8 hostname];

  nw_resolver_config_add_name_server(v3, v9);
LABEL_5:
}

void sub_183AB772C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_config_get_identifier(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 24);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_resolver_config_get_identifier";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_resolver_config_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_resolver_config_get_identifier";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_resolver_config_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_resolver_config_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_resolver_config_set_generation(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 23) = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_resolver_config_set_generation";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_resolver_config_set_generation";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_resolver_config_set_generation";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_resolver_config_set_generation";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_resolver_config_set_generation";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_resolver_config_watch_updates(void *a1, void *a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_resolver_config_watch_updates";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v38 = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v13, &v38, &v37)) {
      goto LABEL_57;
    }
    if (v38 == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = v38;
      if (os_log_type_enabled(v14, v38))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v21 = v38;
      BOOL v22 = os_log_type_enabled(v14, v38);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_resolver_config_watch_updates";
          __int16 v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13) {
          goto LABEL_7;
        }
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v28 = v38;
      if (os_log_type_enabled(v14, v38))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v6)
  {
    char v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_resolver_config_watch_updates";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v38 = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v13, &v38, &v37)) {
      goto LABEL_57;
    }
    if (v38 == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v17 = v38;
      if (os_log_type_enabled(v14, v38))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v37)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v29 = v38;
      if (os_log_type_enabled(v14, v38))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    BOOL v23 = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v24 = v38;
    BOOL v25 = os_log_type_enabled(v14, v38);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_resolver_config_watch_updates";
      __int16 v41 = 2082;
      v42 = v23;
      _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v7)
  {
    char v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_resolver_config_watch_updates";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v38 = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v13, &v38, &v37)) {
      goto LABEL_57;
    }
    if (v38 == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v19 = v38;
      if (os_log_type_enabled(v14, v38))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null update_handler", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v37)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v30 = v38;
      if (os_log_type_enabled(v14, v38))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null update_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    BOOL v23 = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v26 = v38;
    BOOL v27 = os_log_type_enabled(v14, v38);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null update_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_resolver_config_watch_updates";
      __int16 v41 = 2082;
      v42 = v23;
      _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null update_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = __nw_resolver_config_watch_updates_block_invoke;
  v33[3] = &unk_1E5248030;
  uint64_t v9 = (NWConcrete_nw_resolver_config *)v5;
  BOOL v34 = v9;
  os_log_type_t v10 = v6;
  uint64_t v35 = v10;
  id v11 = v8;
  id v36 = v11;
  os_unfair_lock_lock(&v9->lock.m_mutex);
  __nw_resolver_config_watch_updates_block_invoke(v33);
  os_unfair_lock_unlock(&v9->lock.m_mutex);
  if (!nw_resolver_config_update_from_path(v9))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_resolver_config_watch_updates_block_invoke_2;
    block[3] = &unk_1E524AFA8;
    id v32 = v11;
    dispatch_async(v10, block);
  }
LABEL_7:
}

void sub_183AB8468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_watch_updates_block_invoke(void *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v1 = (dispatch_object_t *)a1[4];
  if (!v1[5])
  {
    id v2 = (void *)a1[5];
    id v3 = (void *)a1[6];
    id v4 = v1;
    id v5 = v2;
    id v6 = v3;
    int v7 = socket(32, 3, 1);
    unsigned int v8 = v7;
    if (v7 < 0)
    {
LABEL_68:

      return;
    }
    uint64_t v9 = nw_fd_wrapper_create(v7);
    nw_fd_wrapper_guard(v9);
    int v51 = 9;
    uint64_t v50 = 0x100000001;
    if (ioctl(v8, 0x800C6502uLL, &v50))
    {
      int v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v49) = 0;
      if (!__nwlog_fault(v12, type, &v49)) {
        goto LABEL_64;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v13 = (id)gLogObj;
        os_log_type_t v14 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d", buf, 0x12u);
        }
LABEL_63:

        goto LABEL_64;
      }
      if (!(_BYTE)v49)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v13 = (id)gLogObj;
        os_log_type_t v31 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl(&dword_1830D4000, v13, v31, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_63;
      }
      backtrace_uuid_string_t string = __nw_create_backtrace_string();
      if (!backtrace_string)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl(&dword_1830D4000, v13, v35, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
        goto LABEL_63;
      }
      os_log_type_t v19 = (char *)backtrace_string;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v20 = (id)gLogObj;
      os_log_type_t v21 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v10;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v19;
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(v19);
      if (!v12) {
        goto LABEL_66;
      }
    }
    else
    {
      int v49 = 1;
      if (ioctl(v8, 0x8004667EuLL, &v49))
      {
        int v15 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v16 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v15;
        os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v48 = 0;
        if (!__nwlog_fault(v12, type, &v48)) {
          goto LABEL_64;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v13 = (id)gLogObj;
          os_log_type_t v17 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_63;
        }
        if (!v48)
        {
          char v13 = __nwlog_obj();
          os_log_type_t v38 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            _os_log_impl(&dword_1830D4000, v13, v38, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_63;
        }
        id v32 = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v33 = type[0];
        BOOL v34 = os_log_type_enabled(v13, type[0]);
        if (!v32)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
          goto LABEL_63;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v32;
          _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v32);
        if (!v12) {
          goto LABEL_66;
        }
      }
      else
      {
        dispatch_source_t v22 = dispatch_source_create(MEMORY[0x1E4F14478], v8, 0, v5);
        if (v22)
        {
          BOOL v23 = v22;
          dispatch_object_t v24 = v1[5];
          if (((_BYTE)v4[6] & 1) != 0 && v24)
          {
            v1[5] = 0;

            dispatch_object_t v24 = v1[5];
          }
          v1[5] = 0;

          dispatch_object_t v25 = v1[5];
          v1[5] = v23;

          *((unsigned char *)v4 + 48) |= 1u;
          dispatch_object_t v26 = v4[7];
          if (((_BYTE)v4[8] & 1) != 0 && v26)
          {
            v4[7] = 0;

            dispatch_object_t v26 = v4[7];
          }
          v4[7] = 0;

          dispatch_object_t v27 = v4[7];
          v4[7] = v9;

          *((unsigned char *)v4 + 64) |= 1u;
          os_log_type_t v28 = v1[5];
          *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
          uint64_t v44 = 3221225472;
          v45 = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke;
          v46 = &unk_1E524BAA8;
          os_log_type_t v29 = v4;
          v47 = v29;
          dispatch_source_set_cancel_handler(v28, type);
          os_log_type_t v30 = v1[5];
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_3;
          *(void *)&unsigned char buf[24] = &unk_1E524BB48;
          unsigned int v55 = v8;
          v53 = v29;
          id v54 = v6;
          dispatch_source_set_event_handler(v30, buf);
          dispatch_activate(v1[5]);

          uint64_t v9 = 0;
          goto LABEL_66;
        }
        id v36 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
        os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v48 = 0;
        if (!__nwlog_fault(v12, type, &v48))
        {
LABEL_64:
          if (!v12) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          char v13 = __nwlog_obj();
          os_log_type_t v37 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
            _os_log_impl(&dword_1830D4000, v13, v37, "%{public}s dispatch_source_create failed", buf, 0xCu);
          }
          goto LABEL_63;
        }
        if (!v48)
        {
          char v13 = __nwlog_obj();
          os_log_type_t v42 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
            _os_log_impl(&dword_1830D4000, v13, v42, "%{public}s dispatch_source_create failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_63;
        }
        v39 = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v40 = type[0];
        BOOL v41 = os_log_type_enabled(v13, type[0]);
        if (!v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
            _os_log_impl(&dword_1830D4000, v13, v40, "%{public}s dispatch_source_create failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_63;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v39;
          _os_log_impl(&dword_1830D4000, v13, v40, "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        if (!v12) {
          goto LABEL_66;
        }
      }
    }
LABEL_65:
    free(v12);
LABEL_66:
    if (v9) {

    }
    goto LABEL_68;
  }
}

void sub_183AB8EE0(_Unwind_Exception *a1)
{
  if (v4) {

  }
  _Unwind_Resume(a1);
}

BOOL nw_resolver_config_update_from_path(NWConcrete_nw_resolver_config *a1)
{
  id v1 = a1;
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x4012000000;
  os_log_type_t v12 = __Block_byref_object_copy__123;
  char v13 = __Block_byref_object_dispose__124;
  uint64_t v14 = 256;
  int v15 = nw_path_copy_resolver_config_for_identifier((uint64_t)v1->identifier);
  v16 |= 1u;
  uint64_t v2 = v10[6];
  if (v2)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___ZL35nw_resolver_config_update_from_pathP29NWConcrete_nw_resolver_config_block_invoke;
    v6[3] = &unk_1E524B978;
    int v7 = v1;
    unsigned int v8 = &v9;
    id v3 = v7 + 22;
    os_unfair_lock_lock(v7 + 22);
    ___ZL35nw_resolver_config_update_from_pathP29NWConcrete_nw_resolver_config_block_invoke((uint64_t)v6);
    os_unfair_lock_unlock(v3);
  }
  _Block_object_dispose(&v9, 8);
  id v4 = v15;
  if ((v16 & 1) != 0 && v15)
  {
    int v15 = 0;

    id v4 = v15;
  }
  int v15 = 0;

  return v2 != 0;
}

void sub_183AB9080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr(v8);

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_watch_updates_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __Block_byref_object_copy__123(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(id *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 56) & 0xFE | *(unsigned char *)(a2 + 56) & 1;
  id v4 = *(void **)(a2 + 48);
  *(void *)(a2 + 48) = 0;

  *(unsigned char *)(a2 + 56) &= ~1u;
}

void __Block_byref_object_dispose__124(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if ((*(unsigned char *)(a1 + 56) & 1) != 0 && v2)
  {
    *(void *)(a1 + 48) = 0;

    uint64_t v2 = *(void **)(a1 + 48);
  }
  *(void *)(a1 + 48) = 0;

  id v3 = *(void **)(a1 + 48);
}

void ___ZL35nw_resolver_config_update_from_pathP29NWConcrete_nw_resolver_config_block_invoke(uint64_t a1)
{
  int v7 = (id *)*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
  id v2 = v7[1];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 8);
  if ((*(unsigned char *)(v3 + 16) & 1) != 0 && v4)
  {
    *(void *)(v3 + 8) = 0;

    id v4 = *(void **)(v3 + 8);
  }
  *(void *)(v3 + 8) = 0;

  id v5 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v2;
  id v6 = v2;

  *(unsigned char *)(v3 + 16) |= 1u;
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_2;
  v3[3] = &unk_1E524BAA8;
  id v4 = v1;
  id v2 = (os_unfair_lock_s *)v4;
  os_unfair_lock_lock(v2 + 22);
  ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_2((uint64_t)v3);
  os_unfair_lock_unlock(v2 + 22);
}

void sub_183AB92D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_3(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  memset(v32, 0, sizeof(v32));
  while (1)
  {
    ssize_t v2 = recv(*(_DWORD *)(a1 + 48), v32, 0x80uLL, 0);
    unint64_t v3 = v2;
    if (v2 < 1) {
      break;
    }
    id v4 = *(void **)(a1 + 40);
    id v5 = (NWConcrete_nw_resolver_config *)*(id *)(a1 + 32);
    id v6 = v4;
    if (v3 >= 0x18
      && DWORD1(v32[0]) == 1
      && DWORD2(v32[0]) == 1
      && HIDWORD(v32[0]) == 9
      && LODWORD(v32[0]) >= 0x28
      && v3 >= LODWORD(v32[0])
      && (DWORD1(v32[1]) & 0xFFFFFFFE) == 2
      && !uuid_compare(v5->identifier, (const unsigned __int8 *)&v32[1] + 8))
    {
      int v10 = DWORD1(v32[1]);
      if (DWORD1(v32[1]) == 2 || nw_resolver_config_update_from_path(v5)) {
        v6[2](v6, v10 == 2);
      }
    }
  }
  if (v2 < 0)
  {
    int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v11 != 35)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      dispatch_object_t v27 = "nw_resolver_config_watch_kernel_events_block_invoke_3";
      __int16 v28 = 1024;
      int v29 = v11;
      char v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (__nwlog_fault(v13, &type, &v24))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v14 = (id)gLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446466;
            dispatch_object_t v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
            __int16 v28 = 1024;
            int v29 = v11;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s receive from kernel event socket failed %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v24)
        {
          backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v14 = (id)gLogObj;
          os_log_type_t v19 = type;
          BOOL v20 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v20)
            {
              *(_DWORD *)buf = 136446722;
              dispatch_object_t v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
              __int16 v28 = 1024;
              int v29 = v11;
              __int16 v30 = 2082;
              os_log_type_t v31 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s receive from kernel event socket failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            if (!v13) {
              goto LABEL_30;
            }
            goto LABEL_29;
          }
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            dispatch_object_t v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
            __int16 v28 = 1024;
            int v29 = v11;
            _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s receive from kernel event socket failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v14 = (id)gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446466;
            dispatch_object_t v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
            __int16 v28 = 1024;
            int v29 = v11;
            _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s receive from kernel event socket failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
      if (!v13)
      {
LABEL_30:
        char v16 = *(void **)(a1 + 32);
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 3221225472;
        v22[2] = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_122;
        v22[3] = &unk_1E524BAA8;
        id v23 = v16;
        os_log_type_t v17 = (os_unfair_lock_s *)v23;
        os_unfair_lock_lock(v17 + 22);
        ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_122((uint64_t)v22);
        os_unfair_lock_unlock(v17 + 22);

        return;
      }
LABEL_29:
      free(v13);
      goto LABEL_30;
    }
  }
}

void sub_183AB97C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_122(uint64_t a1)
{
  ssize_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 40);
    if (*(unsigned char *)(v3 + 48))
    {
      if (v4)
      {
        *(void *)(v3 + 40) = 0;

        id v4 = *(void **)(v3 + 40);
      }
    }
    *(void *)(v3 + 40) = 0;

    id v5 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0;

    *(unsigned char *)(v3 + 48) |= 1u;
  }
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_2(uint64_t a1)
{
  ssize_t v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    nw_fd_wrapper_close(v2);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 56);
    if (*(unsigned char *)(v3 + 64))
    {
      if (v4)
      {
        *(void *)(v3 + 56) = 0;

        id v4 = *(void **)(v3 + 56);
      }
    }
    *(void *)(v3 + 56) = 0;

    id v5 = *(void **)(v3 + 56);
    *(void *)(v3 + 56) = 0;

    *(unsigned char *)(v3 + 64) |= 1u;
  }
}

void __nw_resolver_config_cancel_updates_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  ssize_t v2 = v1[5];
  if (v2)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = __nw_resolver_config_cancel_updates_block_invoke_2;
    handler[3] = &unk_1E5248030;
    uint64_t v8 = v1;
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    dispatch_source_set_cancel_handler(v2, handler);
    dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 40));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 40);
    if (*(unsigned char *)(v4 + 48))
    {
      if (v5)
      {
        *(void *)(v4 + 40) = 0;

        id v5 = *(void **)(v4 + 40);
      }
    }
    *(void *)(v4 + 40) = 0;

    id v6 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;

    *(unsigned char *)(v4 + 48) |= 1u;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

void __nw_resolver_config_cancel_updates_block_invoke_2(uint64_t a1)
{
  ssize_t v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_resolver_config_cancel_updates_block_invoke_3;
  v4[3] = &unk_1E524BAA8;
  id v5 = v2;
  uint64_t v3 = (os_unfair_lock_s *)v5;
  os_unfair_lock_lock(v3 + 22);
  __nw_resolver_config_cancel_updates_block_invoke_3((uint64_t)v4);
  os_unfair_lock_unlock(v3 + 22);

  dispatch_async(*(dispatch_queue_t *)(a1 + 40), *(dispatch_block_t *)(a1 + 48));
}

void sub_183AB9AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_config_cancel_updates_block_invoke_3(uint64_t a1)
{
  ssize_t v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    nw_fd_wrapper_close(v2);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 56);
    if (*(unsigned char *)(v3 + 64))
    {
      if (v4)
      {
        *(void *)(v3 + 56) = 0;

        uint64_t v4 = *(void **)(v3 + 56);
      }
    }
    *(void *)(v3 + 56) = 0;

    id v5 = *(void **)(v3 + 56);
    *(void *)(v3 + 56) = 0;

    *(unsigned char *)(v3 + 64) |= 1u;
  }
}

void nw_resolver_config_report_error(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = (unsigned __int8 *)v3;
  if (v3)
  {
    if (!uuid_is_null((const unsigned __int8 *)v3 + 24))
    {
      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, 0);
      id v6 = (os_unfair_lock_s *)evaluator_for_endpoint;
      *(void *)buf = evaluator_for_endpoint;
      buf[8] = -1;
      if (evaluator_for_endpoint)
      {
        int v7 = evaluator_for_endpoint;
        os_unfair_lock_lock(v6 + 24);
        id v8 = v7[6];
        os_unfair_lock_unlock(v6 + 24);
      }
      else
      {
        id v8 = 0;
      }
      *(void *)os_log_type_t type = v8;
      char v18 = -1;
      nw_path_report_error_to_agent(v8, v4 + 24, a2);
      if (v8) {

      }
      if (v6) {
    }
      }
    goto LABEL_10;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_report_error";
  id v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v10, type, &v19))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_report_error";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v11 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_report_error";
          __int16 v21 = 2082;
          dispatch_source_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_report_error";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v11 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_report_error";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v10) {
    free(v10);
  }
LABEL_10:
}

void sub_183AB9E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_publish(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  ssize_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)v1[9];
    if (v3)
    {
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      v27[2] = __nw_resolver_config_publish_block_invoke;
      v27[3] = &unk_1E524A220;
      __int16 v28 = v1;
      id v4 = v3;
      uint64_t fd = nw_fd_wrapper_get_fd(v4, v27);
    }
    else
    {
      int v6 = nw_network_agent_open_control_socket();
      int v7 = nw_fd_wrapper_create(v6);
      uint64_t v8 = (void *)v2[9];
      if ((v2[10] & 1) != 0 && v8)
      {
        v2[9] = 0;

        uint64_t v8 = (void *)v2[9];
      }
      v2[9] = 0;

      id v9 = (void *)v2[9];
      v2[9] = v7;

      *((unsigned char *)v2 + 80) |= 1u;
      CFDataRef v10 = nw_resolver_config_copy_plist_data_ref(v2);
      uint64_t provider_description = nw_resolver_config_get_provider_description(v2);
      if (!provider_description) {
        uint64_t provider_description = nw_resolver_config_get_provider_name(v2);
      }
      if (provider_description) {
        os_log_type_t v12 = (const char *)provider_description;
      }
      else {
        os_log_type_t v12 = "DNS";
      }
      BytePtr = CFDataGetBytePtr(v10);
      unsigned int Length = CFDataGetLength(v10);
      int v15 = nw_network_agent_ctl_setsockopt(v6, 1, (unsigned __int8 *)v2 + 24, "SystemConfig", "DNSAgent", (uint64_t)v12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              BytePtr,
              Length);
      uint64_t fd = v15 >= 0;
      if (v15 < 0)
      {
        os_log_type_t v16 = (void *)v2[9];
        if ((v2[10] & 1) != 0 && v16)
        {
          v2[9] = 0;

          os_log_type_t v16 = (void *)v2[9];
        }
        v2[9] = 0;

        os_log_type_t v17 = (void *)v2[9];
        v2[9] = 0;

        *((unsigned char *)v2 + 80) |= 1u;
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    goto LABEL_19;
  }
  char v19 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v32 = "nw_resolver_config_publish";
  BOOL v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v30 = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v20, &v30, &v29))
  {
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __int16 v21 = __nwlog_obj();
      os_log_type_t v22 = v30;
      if (os_log_type_enabled(v21, v30))
      {
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_resolver_config_publish";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v21 = __nwlog_obj();
      os_log_type_t v24 = v30;
      BOOL v25 = os_log_type_enabled(v21, v30);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          id v32 = "nw_resolver_config_publish";
          __int16 v33 = 2082;
          BOOL v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_resolver_config_publish";
        _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v21 = __nwlog_obj();
      os_log_type_t v26 = v30;
      if (os_log_type_enabled(v21, v30))
      {
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_resolver_config_publish";
        _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_36:
  if (v20) {
    free(v20);
  }
  uint64_t fd = 0;
LABEL_19:

  return fd;
}

void sub_183ABA29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_resolver_config_publish_block_invoke(uint64_t a1, int a2)
{
  CFDataRef v4 = nw_resolver_config_copy_plist_data_ref(*(void **)(a1 + 32));
  uint64_t provider_description = nw_resolver_config_get_provider_description(*(void **)(a1 + 32));
  if (!provider_description) {
    uint64_t provider_description = nw_resolver_config_get_provider_name(*(void **)(a1 + 32));
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (provider_description) {
    int v7 = (const char *)provider_description;
  }
  else {
    int v7 = "DNS";
  }
  BytePtr = CFDataGetBytePtr(v4);
  unsigned int Length = CFDataGetLength(v4);
  int v10 = nw_network_agent_ctl_setsockopt(a2, 3, (unsigned __int8 *)(v6 + 24), "SystemConfig", "DNSAgent", (uint64_t)v7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          BytePtr,
          Length);
  if (v4) {
    CFRelease(v4);
  }
  return v10 >= 0;
}

void sub_183ABA3C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void nw_resolver_config_unpublish(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  ssize_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)v1[9];
    if ((v1[10] & 1) != 0 && v3)
    {
      v1[9] = 0;

      id v3 = (void *)v2[9];
    }
    v2[9] = 0;

    CFDataRef v4 = (void *)v2[9];
    v2[9] = 0;

    *((unsigned char *)v2 + 80) |= 1u;
    goto LABEL_6;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolver_config_unpublish";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolver_config_unpublish";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolver_config_unpublish";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolver_config_unpublish";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolver_config_unpublish";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v6) {
    free(v6);
  }
LABEL_6:
}

uint64_t nw_protocol_common_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
    os_log_type_t v8 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24)) {
      goto LABEL_71;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s called with null protocol";
      goto LABEL_70;
    }
    if (!v24)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_70;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_70;
    }
    if (!v17) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446466;
    dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
    __int16 v28 = 2082;
    char v29 = backtrace_string;
    char v18 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_49:
    _os_log_impl(&dword_1830D4000, v9, v10, v18, buf, 0x16u);
    goto LABEL_50;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
    os_log_type_t v8 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24)) {
      goto LABEL_71;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s called with null input_protocol";
      goto LABEL_70;
    }
    if (!v24)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_70;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v19) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_70;
    }
    if (!v19) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446466;
    dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
    __int16 v28 = 2082;
    char v29 = backtrace_string;
    char v18 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_49;
  }
  if (a1 == a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
    __int16 v28 = 2048;
    char v29 = (char *)a1;
    os_log_type_t v12 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      __int16 v28 = 2048;
      char v29 = (char *)a1;
      int v15 = "%{public}s Cannot add input handler %p to itself";
    }
    else if (v24)
    {
      BOOL v20 = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (v20)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446722;
          dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
          __int16 v28 = 2048;
          char v29 = (char *)a1;
          __int16 v30 = 2082;
          os_log_type_t v31 = v20;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v20);
LABEL_66:
        if (v12)
        {
          uint64_t v23 = (char *)v12;
LABEL_73:
          free(v23);
        }
        return 0;
      }
      if (!v21) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      __int16 v28 = 2048;
      char v29 = (char *)a1;
      int v15 = "%{public}s Cannot add input handler %p to itself, no backtrace";
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      __int16 v28 = 2048;
      char v29 = (char *)a1;
      int v15 = "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0x16u);
    goto LABEL_66;
  }
  if (*(void *)(a1 + 48))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
    os_log_type_t v8 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24)) {
      goto LABEL_71;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing protocols";
      goto LABEL_70;
    }
    if (!v24)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      BOOL v11 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing prot"
            "ocols, backtrace limit exceeded";
      goto LABEL_70;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
        __int16 v28 = 2082;
        char v29 = backtrace_string;
        char v18 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing pr"
              "otocols, dumping backtrace:%{public}s";
        goto LABEL_49;
      }
LABEL_50:
      free(backtrace_string);
      goto LABEL_71;
    }
    if (!v22) {
      goto LABEL_71;
    }
    *(_DWORD *)buf = 136446210;
    dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
    BOOL v11 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing protoc"
          "ols, no backtrace";
LABEL_70:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
LABEL_71:
    if (v8)
    {
      uint64_t v23 = (char *)v8;
      goto LABEL_73;
    }
    return 0;
  }
  *(void *)(a1 + 48) = a2;
  if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    if (v4) {
      *(void *)(a2 + 88) = v4 + 1;
    }
  }
  if (*(void *)(a2 + 32))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      dispatch_object_t v27 = "nw_protocol_common_add_input_handler";
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
    }
  }
  else
  {
    *(void *)(a2 + 32) = a1;
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (v6) {
        *(void *)(a1 + 88) = v6 + 1;
      }
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return 1;
}

uint64_t nw_protocol_common_replace_input_handler(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    char v29 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      uint64_t v32 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
          __int16 v43 = 2082;
          uint64_t v44 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_89:
        if (!v29) {
          return 0;
        }
        goto LABEL_90;
      }
      if (!v34) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      uint64_t v32 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      uint64_t v32 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_88;
  }
  id v3 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    char v29 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39)) {
      goto LABEL_89;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v39)
      {
        __int16 v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
        uint64_t v32 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_88;
      }
      uint64_t v35 = (char *)__nw_create_backtrace_string();
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v36 = os_log_type_enabled(v30, type);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
        uint64_t v32 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_88;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
        __int16 v43 = 2082;
        uint64_t v44 = v35;
        os_log_type_t v37 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_73:
        _os_log_impl(&dword_1830D4000, v30, v31, v37, buf, 0x16u);
      }
LABEL_74:
      free(v35);
      if (!v29) {
        return 0;
      }
LABEL_90:
      __int16 v28 = (char *)v29;
      goto LABEL_46;
    }
    __int16 v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    uint64_t v32 = "%{public}s called with null old_input_protocol";
LABEL_88:
    _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
    goto LABEL_89;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    char v29 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      uint64_t v32 = "%{public}s called with null new_input_protocol";
      goto LABEL_88;
    }
    if (!v39)
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      uint64_t v32 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_88;
    }
    uint64_t v35 = (char *)__nw_create_backtrace_string();
    __int16 v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v38 = os_log_type_enabled(v30, type);
    if (!v35)
    {
      if (!v38) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      uint64_t v32 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_88;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      __int16 v43 = 2082;
      uint64_t v44 = v35;
      os_log_type_t v37 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    goto LABEL_74;
  }
  if (*(void **)(a1 + 48) != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = *(char **)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    __int16 v43 = 2048;
    uint64_t v44 = v6;
    __int16 v45 = 2048;
    v46 = v3;
    int v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v7, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          os_log_type_t v10 = *(char **)(a1 + 48);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
          __int16 v43 = 2048;
          uint64_t v44 = v10;
          __int16 v45 = 2048;
          v46 = v3;
          BOOL v11 = "%{public}s Old input handler does not match (%p != %p)";
LABEL_43:
          _os_log_impl(&dword_1830D4000, v8, v9, v11, buf, 0x20u);
        }
      }
      else if (v39)
      {
        os_log_type_t v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = gLogObj;
        os_log_type_t v9 = type;
        BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v14)
        {
          if (v15)
          {
            os_log_type_t v16 = *(char **)(a1 + 48);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
            __int16 v43 = 2048;
            uint64_t v44 = v16;
            __int16 v45 = 2048;
            v46 = v3;
            __int16 v47 = 2082;
            char v48 = v14;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v14);
          goto LABEL_44;
        }
        if (v15)
        {
          dispatch_object_t v27 = *(char **)(a1 + 48);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
          __int16 v43 = 2048;
          uint64_t v44 = v27;
          __int16 v45 = 2048;
          v46 = v3;
          BOOL v11 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
          goto LABEL_43;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          BOOL v21 = *(char **)(a1 + 48);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
          __int16 v43 = 2048;
          uint64_t v44 = v21;
          __int16 v45 = 2048;
          v46 = v3;
          BOOL v11 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_43;
        }
      }
    }
LABEL_44:
    if (!v7) {
      return 0;
    }
    __int16 v28 = (char *)v7;
LABEL_46:
    free(v28);
    return 0;
  }
  uint64_t v12 = a2[4];
  if (v12)
  {
    if (*(_UNKNOWN **)(v12 + 40) == &nw_protocol_ref_counted_handle
      && (uint64_t v22 = *(void *)(v12 + 88)) != 0
      && (uint64_t v23 = v22 - 1, (*(void *)(v12 + 88) = v23) == 0))
    {
      char v24 = *(void (***)(void))(v12 + 64);
      if (v24)
      {
        *(void *)(v12 + 64) = 0;
        v24[2](v24);
        _Block_release(v24);
      }
      if (*(unsigned char *)(v12 + 72))
      {
        BOOL v25 = *(const void **)(v12 + 64);
        if (v25) {
          _Block_release(v25);
        }
      }
      free((void *)v12);
      os_log_type_t v26 = *(void **)(a1 + 48);
      void v3[4] = 0;
      id v3 = v26;
      if (!v26) {
        goto LABEL_14;
      }
    }
    else
    {
      a2[4] = 0;
    }
  }
  if ((_UNKNOWN *)v3[5] == &nw_protocol_ref_counted_handle)
  {
    uint64_t v17 = v3[11];
    if (v17)
    {
      uint64_t v18 = v17 - 1;
      v3[11] = v18;
      if (!v18)
      {
        BOOL v19 = (void (**)(void))v3[8];
        if (v19)
        {
          v3[8] = 0;
          v19[2](v19);
          _Block_release(v19);
        }
        if (v3[9])
        {
          BOOL v20 = (const void *)v3[8];
          if (v20) {
            _Block_release(v20);
          }
        }
        free(v3);
      }
    }
  }
  *(void *)(a1 + 48) = 0;
LABEL_14:

  return nw_protocol_common_add_input_handler(a1, a3);
}

uint64_t nw_protocol_common_remove_input_handler(void *a1, void *a2, uint64_t a3)
{
  return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, 0, 0);
}

uint64_t nw_protocol_common_remove_input_handler_with_cleanup_blocks(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
    uint64_t v49 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v49, &type, &v68)) {
      goto LABEL_126;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (!os_log_type_enabled(v50, type)) {
        goto LABEL_126;
      }
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null protocol";
      goto LABEL_125;
    }
    if (!v68)
    {
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (!os_log_type_enabled(v50, type)) {
        goto LABEL_126;
      }
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_125;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v50 = __nwlog_obj();
    os_log_type_t v51 = type;
    BOOL v54 = os_log_type_enabled(v50, type);
    if (!backtrace_string)
    {
      if (!v54) {
        goto LABEL_126;
      }
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_125;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      __int16 v72 = 2082;
      v73 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_126:
    if (!v49) {
      return 0;
    }
    goto LABEL_127;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
    uint64_t v49 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v49, &type, &v68)) {
      goto LABEL_126;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (!os_log_type_enabled(v50, type)) {
        goto LABEL_126;
      }
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null input_protocol";
      goto LABEL_125;
    }
    if (!v68)
    {
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (!os_log_type_enabled(v50, type)) {
        goto LABEL_126;
      }
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_125;
    }
    unsigned int v55 = (char *)__nw_create_backtrace_string();
    uint64_t v50 = __nwlog_obj();
    os_log_type_t v51 = type;
    BOOL v56 = os_log_type_enabled(v50, type);
    if (v55)
    {
      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
        __int16 v72 = 2082;
        v73 = v55;
        _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v55);
      if (!v49) {
        return 0;
      }
LABEL_127:
      __int16 v43 = (char *)v49;
      goto LABEL_72;
    }
    if (v56)
    {
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null input_protocol, no backtrace";
LABEL_125:
      _os_log_impl(&dword_1830D4000, v50, v51, v52, buf, 0xCu);
      goto LABEL_126;
    }
    goto LABEL_126;
  }
  os_log_type_t v10 = (void *)a2[4];
  if (v10 == a1 && v10 != 0)
  {
    if ((_UNKNOWN *)a1[5] == &nw_protocol_ref_counted_handle)
    {
      uint64_t v33 = a1[11];
      if (v33)
      {
        uint64_t v34 = v33 - 1;
        a1[11] = v34;
        if (!v34)
        {
          uint64_t v35 = (void (**)(void))a1[8];
          if (v35)
          {
            a1[8] = 0;
            v35[2](v35);
            _Block_release(v35);
          }
          if (a1[9])
          {
            BOOL v36 = (const void *)a1[8];
            if (v36) {
              _Block_release(v36);
            }
          }
          free(a1);
        }
      }
    }
    a2[4] = 0;
  }
  if ((void *)a1[6] != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = (void *)a1[6];
    *(_DWORD *)buf = 136446722;
    v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
    __int16 v72 = 2048;
    v73 = v12;
    __int16 v74 = 2048;
    v75 = a2;
    char v13 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (__nwlog_fault(v13, &type, &v68))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          os_log_type_t v16 = (void *)a1[6];
          *(_DWORD *)buf = 136446722;
          v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
          __int16 v72 = 2048;
          v73 = v16;
          __int16 v74 = 2048;
          v75 = a2;
          uint64_t v17 = "%{public}s Input protocol does not match (%p != %p)";
LABEL_69:
          _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x20u);
        }
      }
      else if (v68)
      {
        __int16 v30 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v30)
        {
          if (v31)
          {
            uint64_t v32 = (void *)a1[6];
            *(_DWORD *)buf = 136446978;
            v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
            __int16 v72 = 2048;
            v73 = v32;
            __int16 v74 = 2048;
            v75 = a2;
            __int16 v76 = 2082;
            v77 = v30;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Input protocol does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v30);
          goto LABEL_70;
        }
        if (v31)
        {
          os_log_type_t v42 = (void *)a1[6];
          *(_DWORD *)buf = 136446722;
          v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
          __int16 v72 = 2048;
          v73 = v42;
          __int16 v74 = 2048;
          v75 = a2;
          uint64_t v17 = "%{public}s Input protocol does not match (%p != %p), no backtrace";
          goto LABEL_69;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          BOOL v41 = (void *)a1[6];
          *(_DWORD *)buf = 136446722;
          v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
          __int16 v72 = 2048;
          v73 = v41;
          __int16 v74 = 2048;
          v75 = a2;
          uint64_t v17 = "%{public}s Input protocol does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_69;
        }
      }
    }
LABEL_70:
    if (!v13) {
      return 0;
    }
    __int16 v43 = (char *)v13;
LABEL_72:
    free(v43);
    return 0;
  }
  if ((_UNKNOWN *)a2[5] == &nw_protocol_ref_counted_handle)
  {
    uint64_t v37 = a2[11];
    if (v37)
    {
      uint64_t v38 = v37 - 1;
      a2[11] = v38;
      if (!v38)
      {
        char v39 = (void (**)(void))a2[8];
        if (v39)
        {
          a2[8] = 0;
          v39[2](v39);
          _Block_release(v39);
        }
        if (a2[9])
        {
          os_log_type_t v40 = (const void *)a2[8];
          if (v40) {
            _Block_release(v40);
          }
        }
        free(a2);
      }
    }
  }
  a1[6] = 0;
  if (a4) {
    (*(void (**)(uint64_t))(a4 + 16))(a4);
  }
  uint64_t v18 = a1[4];
  if (v18)
  {
    BOOL v19 = *(void **)(v18 + 40);
    if (v19 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v20 = *(void *)(v18 + 88);
      if (v20) {
        *(void *)(v18 + 88) = v20 + 1;
      }
    }
    BOOL v21 = (void *)a1[5];
    if (v21 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v22 = a1[11];
      if (v22) {
        a1[11] = v22 + 1;
      }
    }
    uint64_t v23 = *(void *)(v18 + 24);
    if (v23)
    {
      char v24 = *(uint64_t (**)(uint64_t, void *, uint64_t))(v23 + 8);
      if (v24)
      {
        uint64_t v25 = v24(v18, a1, a3);
        if (v21 != &nw_protocol_ref_counted_handle)
        {
LABEL_28:
          if (v19 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v18 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v26 = *(void *)(v18 + 88);
            if (v26)
            {
              uint64_t v27 = v26 - 1;
              *(void *)(v18 + 88) = v27;
              if (!v27)
              {
                __int16 v28 = *(void (***)(void))(v18 + 64);
                if (v28)
                {
                  *(void *)(v18 + 64) = 0;
                  v28[2](v28);
                  _Block_release(v28);
                }
                if (*(unsigned char *)(v18 + 72))
                {
                  char v29 = *(const void **)(v18 + 64);
                  if (v29) {
                    _Block_release(v29);
                  }
                }
                free((void *)v18);
              }
            }
          }
          goto LABEL_60;
        }
LABEL_27:
        if ((_UNKNOWN *)a1[5] == &nw_protocol_ref_counted_handle)
        {
          uint64_t v45 = a1[11];
          if (v45)
          {
            uint64_t v46 = v45 - 1;
            a1[11] = v46;
            if (!v46)
            {
              __int16 v47 = (void (**)(void))a1[8];
              if (v47)
              {
                a1[8] = 0;
                v47[2](v47);
                _Block_release(v47);
              }
              if (a1[9])
              {
                char v48 = (const void *)a1[8];
                if (v48) {
                  _Block_release(v48);
                }
              }
              free(a1);
            }
          }
        }
        goto LABEL_28;
      }
    }
    __nwlog_obj();
    v57 = *(const char **)(v18 + 16);
    *(_DWORD *)buf = 136446722;
    v71 = "__nw_protocol_remove_input_handler";
    if (!v57) {
      v57 = "invalid";
    }
    __int16 v72 = 2082;
    v73 = (void *)v57;
    __int16 v74 = 2048;
    v75 = (void *)v18;
    v58 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (__nwlog_fault(v58, &type, &v68))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v59 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (!os_log_type_enabled(v59, type)) {
          goto LABEL_137;
        }
        v61 = *(const char **)(v18 + 16);
        if (!v61) {
          v61 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v71 = "__nw_protocol_remove_input_handler";
        __int16 v72 = 2082;
        v73 = (void *)v61;
        __int16 v74 = 2048;
        v75 = (void *)v18;
        v62 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback";
LABEL_136:
        _os_log_impl(&dword_1830D4000, v59, v60, v62, buf, 0x20u);
        goto LABEL_137;
      }
      if (!v68)
      {
        v59 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (!os_log_type_enabled(v59, type)) {
          goto LABEL_137;
        }
        v66 = *(const char **)(v18 + 16);
        if (!v66) {
          v66 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v71 = "__nw_protocol_remove_input_handler";
        __int16 v72 = 2082;
        v73 = (void *)v66;
        __int16 v74 = 2048;
        v75 = (void *)v18;
        v62 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded";
        goto LABEL_136;
      }
      v63 = (char *)__nw_create_backtrace_string();
      v59 = __nwlog_obj();
      os_log_type_t v60 = type;
      BOOL v64 = os_log_type_enabled(v59, type);
      if (!v63)
      {
        if (!v64) {
          goto LABEL_137;
        }
        v67 = *(const char **)(v18 + 16);
        if (!v67) {
          v67 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v71 = "__nw_protocol_remove_input_handler";
        __int16 v72 = 2082;
        v73 = (void *)v67;
        __int16 v74 = 2048;
        v75 = (void *)v18;
        v62 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace";
        goto LABEL_136;
      }
      if (v64)
      {
        v65 = *(const char **)(v18 + 16);
        if (!v65) {
          v65 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v71 = "__nw_protocol_remove_input_handler";
        __int16 v72 = 2082;
        v73 = (void *)v65;
        __int16 v74 = 2048;
        v75 = (void *)v18;
        __int16 v76 = 2082;
        v77 = v63;
        _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v63);
    }
LABEL_137:
    if (v58) {
      free(v58);
    }
    uint64_t v25 = 0;
    if (v21 != &nw_protocol_ref_counted_handle) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v25 = 1;
LABEL_60:
  if (a3 && (_UNKNOWN *)a1[5] != &nw_protocol_ref_counted_handle) {
    a1[5] = 0;
  }
  if (a5) {
    (*(void (**)(uint64_t))(a5 + 16))(a5);
  }
  return v25;
}

uint64_t nw_protocol_common_get_input_frames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_common_get_input_frames";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v19, &type, &v50)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (!v50)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v44 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v44) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_44;
    }
    if (!v44) {
      goto LABEL_92;
    }
    *(_DWORD *)buf = 136446466;
    v53 = "nw_protocol_common_get_input_frames";
    __int16 v54 = 2082;
    unsigned int v55 = backtrace_string;
    uint64_t v45 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_91;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_common_get_input_frames";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v19, &type, &v50)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null input_protocol";
      goto LABEL_44;
    }
    if (!v50)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v46 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v46) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_44;
    }
    if (!v46) {
      goto LABEL_92;
    }
    *(_DWORD *)buf = 136446466;
    v53 = "nw_protocol_common_get_input_frames";
    __int16 v54 = 2082;
    unsigned int v55 = backtrace_string;
    uint64_t v45 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_91:
    _os_log_impl(&dword_1830D4000, v20, v21, v45, buf, 0x16u);
    goto LABEL_92;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_common_get_input_frames";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v19, &type, &v50)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null return_array";
      goto LABEL_44;
    }
    if (!v50)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v47 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v47) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_input_frames";
      uint64_t v22 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_44;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      v53 = "nw_protocol_common_get_input_frames";
      __int16 v54 = 2082;
      unsigned int v55 = backtrace_string;
      uint64_t v45 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_91;
    }
LABEL_92:
    free(backtrace_string);
    goto LABEL_46;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    os_log_type_t v8 = *(void **)(v7 + 40);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = *(void *)(v7 + 88);
      if (v9) {
        *(void *)(v7 + 88) = v9 + 1;
      }
    }
    os_log_type_t v10 = *(void **)(a1 + 40);
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v11 = *(void *)(a1 + 88);
      if (v11) {
        *(void *)(a1 + 88) = v11 + 1;
      }
    }
    uint64_t v12 = *(void *)(v7 + 24);
    if (v12)
    {
      char v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 80);
      if (v13)
      {
        uint64_t v14 = v13(v7, a1);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_15:
          if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v7 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v15 = *(void *)(v7 + 88);
            if (v15)
            {
              uint64_t v16 = v15 - 1;
              *(void *)(v7 + 88) = v16;
              if (!v16)
              {
                uint64_t v17 = *(void (***)(void))(v7 + 64);
                if (v17)
                {
                  *(void *)(v7 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if (*(unsigned char *)(v7 + 72))
                {
                  uint64_t v18 = *(const void **)(v7 + 64);
                  if (v18) {
                    _Block_release(v18);
                  }
                }
                free((void *)v7);
              }
            }
          }
          return v14;
        }
LABEL_14:
        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v27 = *(void *)(a1 + 88);
          if (v27)
          {
            uint64_t v28 = v27 - 1;
            *(void *)(a1 + 88) = v28;
            if (!v28)
            {
              char v29 = *(void (***)(void))(a1 + 64);
              if (v29)
              {
                *(void *)(a1 + 64) = 0;
                v29[2](v29);
                _Block_release(v29);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                __int16 v30 = *(const void **)(a1 + 64);
                if (v30) {
                  _Block_release(v30);
                }
              }
              free((void *)a1);
            }
          }
        }
        goto LABEL_15;
      }
    }
    __nwlog_obj();
    uint64_t v34 = *(const char **)(v7 + 16);
    *(_DWORD *)buf = 136446722;
    v53 = "__nw_protocol_get_input_frames";
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    __int16 v54 = 2082;
    unsigned int v55 = (void *)v34;
    __int16 v56 = 2048;
    uint64_t v57 = v7;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v35, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_108;
        }
        uint64_t v38 = *(const char **)(v7 + 16);
        if (!v38) {
          uint64_t v38 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v53 = "__nw_protocol_get_input_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v38;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        char v39 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_107:
        _os_log_impl(&dword_1830D4000, v36, v37, v39, buf, 0x20u);
        goto LABEL_108;
      }
      if (!v50)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_108;
        }
        char v48 = *(const char **)(v7 + 16);
        if (!v48) {
          char v48 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v53 = "__nw_protocol_get_input_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v48;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        char v39 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
        goto LABEL_107;
      }
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      BOOL v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v41 = os_log_type_enabled(v36, type);
      if (!v40)
      {
        if (!v41) {
          goto LABEL_108;
        }
        uint64_t v49 = *(const char **)(v7 + 16);
        if (!v49) {
          uint64_t v49 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v53 = "__nw_protocol_get_input_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v49;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        char v39 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
        goto LABEL_107;
      }
      if (v41)
      {
        os_log_type_t v42 = *(const char **)(v7 + 16);
        if (!v42) {
          os_log_type_t v42 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v53 = "__nw_protocol_get_input_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v42;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        __int16 v58 = 2082;
        v59 = v40;
        _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v40);
    }
LABEL_108:
    if (v35) {
      free(v35);
    }
    uint64_t v14 = 0;
    if (v10 != &nw_protocol_ref_counted_handle) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v53 = "nw_protocol_common_get_input_frames";
  BOOL v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (__nwlog_fault(v19, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_common_get_input_frames";
        uint64_t v22 = "%{public}s get_input_frames requires an output handler";
LABEL_44:
        BOOL v31 = v20;
        os_log_type_t v32 = v21;
LABEL_45:
        _os_log_impl(&dword_1830D4000, v31, v32, v22, buf, 0xCu);
      }
    }
    else if (v50)
    {
      uint64_t v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v24 = gLogObj;
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v23)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_protocol_common_get_input_frames";
          __int16 v54 = 2082;
          unsigned int v55 = v23;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s get_input_frames requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v23);
        goto LABEL_46;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_common_get_input_frames";
        uint64_t v22 = "%{public}s get_input_frames requires an output handler, no backtrace";
        BOOL v31 = v24;
        os_log_type_t v32 = v25;
        goto LABEL_45;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_common_get_input_frames";
        uint64_t v22 = "%{public}s get_input_frames requires an output handler, backtrace limit exceeded";
        goto LABEL_44;
      }
    }
  }
LABEL_46:
  if (v19) {
    free(v19);
  }
  return 0;
}

uint64_t nw_protocol_common_get_output_frames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_common_get_output_frames";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v19, &type, &v50)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (!v50)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v44 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v44) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_44;
    }
    if (!v44) {
      goto LABEL_92;
    }
    *(_DWORD *)buf = 136446466;
    v53 = "nw_protocol_common_get_output_frames";
    __int16 v54 = 2082;
    unsigned int v55 = backtrace_string;
    uint64_t v45 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_91;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_common_get_output_frames";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v19, &type, &v50)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null input_protocol";
      goto LABEL_44;
    }
    if (!v50)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v46 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v46) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_44;
    }
    if (!v46) {
      goto LABEL_92;
    }
    *(_DWORD *)buf = 136446466;
    v53 = "nw_protocol_common_get_output_frames";
    __int16 v54 = 2082;
    unsigned int v55 = backtrace_string;
    uint64_t v45 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_91:
    _os_log_impl(&dword_1830D4000, v20, v21, v45, buf, 0x16u);
    goto LABEL_92;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_common_get_output_frames";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v19, &type, &v50)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null return_array";
      goto LABEL_44;
    }
    if (!v50)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v47 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v47) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_common_get_output_frames";
      uint64_t v22 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_44;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      v53 = "nw_protocol_common_get_output_frames";
      __int16 v54 = 2082;
      unsigned int v55 = backtrace_string;
      uint64_t v45 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_91;
    }
LABEL_92:
    free(backtrace_string);
    goto LABEL_46;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    os_log_type_t v8 = *(void **)(v7 + 40);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = *(void *)(v7 + 88);
      if (v9) {
        *(void *)(v7 + 88) = v9 + 1;
      }
    }
    os_log_type_t v10 = *(void **)(a1 + 40);
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v11 = *(void *)(a1 + 88);
      if (v11) {
        *(void *)(a1 + 88) = v11 + 1;
      }
    }
    uint64_t v12 = *(void *)(v7 + 24);
    if (v12)
    {
      char v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 88);
      if (v13)
      {
        uint64_t v14 = v13(v7, a1);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_15:
          if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v7 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v15 = *(void *)(v7 + 88);
            if (v15)
            {
              uint64_t v16 = v15 - 1;
              *(void *)(v7 + 88) = v16;
              if (!v16)
              {
                uint64_t v17 = *(void (***)(void))(v7 + 64);
                if (v17)
                {
                  *(void *)(v7 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if (*(unsigned char *)(v7 + 72))
                {
                  uint64_t v18 = *(const void **)(v7 + 64);
                  if (v18) {
                    _Block_release(v18);
                  }
                }
                free((void *)v7);
              }
            }
          }
          return v14;
        }
LABEL_14:
        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v27 = *(void *)(a1 + 88);
          if (v27)
          {
            uint64_t v28 = v27 - 1;
            *(void *)(a1 + 88) = v28;
            if (!v28)
            {
              char v29 = *(void (***)(void))(a1 + 64);
              if (v29)
              {
                *(void *)(a1 + 64) = 0;
                v29[2](v29);
                _Block_release(v29);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                __int16 v30 = *(const void **)(a1 + 64);
                if (v30) {
                  _Block_release(v30);
                }
              }
              free((void *)a1);
            }
          }
        }
        goto LABEL_15;
      }
    }
    __nwlog_obj();
    uint64_t v34 = *(const char **)(v7 + 16);
    *(_DWORD *)buf = 136446722;
    v53 = "__nw_protocol_get_output_frames";
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    __int16 v54 = 2082;
    unsigned int v55 = (void *)v34;
    __int16 v56 = 2048;
    uint64_t v57 = v7;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v35, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_108;
        }
        uint64_t v38 = *(const char **)(v7 + 16);
        if (!v38) {
          uint64_t v38 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v53 = "__nw_protocol_get_output_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v38;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        char v39 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_107:
        _os_log_impl(&dword_1830D4000, v36, v37, v39, buf, 0x20u);
        goto LABEL_108;
      }
      if (!v50)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_108;
        }
        char v48 = *(const char **)(v7 + 16);
        if (!v48) {
          char v48 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v53 = "__nw_protocol_get_output_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v48;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        char v39 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
        goto LABEL_107;
      }
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      BOOL v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v41 = os_log_type_enabled(v36, type);
      if (!v40)
      {
        if (!v41) {
          goto LABEL_108;
        }
        uint64_t v49 = *(const char **)(v7 + 16);
        if (!v49) {
          uint64_t v49 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v53 = "__nw_protocol_get_output_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v49;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        char v39 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
        goto LABEL_107;
      }
      if (v41)
      {
        os_log_type_t v42 = *(const char **)(v7 + 16);
        if (!v42) {
          os_log_type_t v42 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v53 = "__nw_protocol_get_output_frames";
        __int16 v54 = 2082;
        unsigned int v55 = (void *)v42;
        __int16 v56 = 2048;
        uint64_t v57 = v7;
        __int16 v58 = 2082;
        v59 = v40;
        _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v40);
    }
LABEL_108:
    if (v35) {
      free(v35);
    }
    uint64_t v14 = 0;
    if (v10 != &nw_protocol_ref_counted_handle) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v53 = "nw_protocol_common_get_output_frames";
  BOOL v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (__nwlog_fault(v19, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_common_get_output_frames";
        uint64_t v22 = "%{public}s get_ouput_frames requires an output handler";
LABEL_44:
        BOOL v31 = v20;
        os_log_type_t v32 = v21;
LABEL_45:
        _os_log_impl(&dword_1830D4000, v31, v32, v22, buf, 0xCu);
      }
    }
    else if (v50)
    {
      uint64_t v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v24 = gLogObj;
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v23)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_protocol_common_get_output_frames";
          __int16 v54 = 2082;
          unsigned int v55 = v23;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s get_ouput_frames requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v23);
        goto LABEL_46;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_common_get_output_frames";
        uint64_t v22 = "%{public}s get_ouput_frames requires an output handler, no backtrace";
        BOOL v31 = v24;
        os_log_type_t v32 = v25;
        goto LABEL_45;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_protocol_common_get_output_frames";
        uint64_t v22 = "%{public}s get_ouput_frames requires an output handler, backtrace limit exceeded";
        goto LABEL_44;
      }
    }
  }
LABEL_46:
  if (v19) {
    free(v19);
  }
  return 0;
}

uint64_t nw_protocol_common_finalize_output_frames(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v41 = "nw_protocol_common_finalize_output_frames";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v12, &type, &v38)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      uint64_t v15 = "%{public}s called with null protocol";
      goto LABEL_30;
    }
    if (!v38)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      uint64_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_30;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v33 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (!v33) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      uint64_t v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_30;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      __int16 v42 = 2082;
      __int16 v43 = backtrace_string;
      uint64_t v34 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_69:
      _os_log_impl(&dword_1830D4000, v13, v14, v34, buf, 0x16u);
    }
LABEL_70:
    free(backtrace_string);
    goto LABEL_32;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v41 = "nw_protocol_common_finalize_output_frames";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v12, &type, &v38)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      uint64_t v15 = "%{public}s called with null frames";
      goto LABEL_30;
    }
    if (!v38)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      uint64_t v15 = "%{public}s called with null frames, backtrace limit exceeded";
      goto LABEL_30;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v35 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (!v35) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      uint64_t v15 = "%{public}s called with null frames, no backtrace";
      goto LABEL_30;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v41 = "nw_protocol_common_finalize_output_frames";
      __int16 v42 = 2082;
      __int16 v43 = backtrace_string;
      uint64_t v34 = "%{public}s called with null frames, dumping backtrace:%{public}s";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    BOOL v41 = "nw_protocol_common_finalize_output_frames";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v12, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v13 = gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v41 = "nw_protocol_common_finalize_output_frames";
          uint64_t v15 = "%{public}s finalize_output_frames requires an output handler";
LABEL_30:
          uint64_t v20 = v13;
          os_log_type_t v21 = v14;
LABEL_31:
          _os_log_impl(&dword_1830D4000, v20, v21, v15, buf, 0xCu);
        }
      }
      else if (v38)
      {
        uint64_t v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v16)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v41 = "nw_protocol_common_finalize_output_frames";
            __int16 v42 = 2082;
            __int16 v43 = v16;
            _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s finalize_output_frames requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v16);
          goto LABEL_32;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v41 = "nw_protocol_common_finalize_output_frames";
          uint64_t v15 = "%{public}s finalize_output_frames requires an output handler, no backtrace";
          uint64_t v20 = v17;
          os_log_type_t v21 = v18;
          goto LABEL_31;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v13 = gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v41 = "nw_protocol_common_finalize_output_frames";
          uint64_t v15 = "%{public}s finalize_output_frames requires an output handler, backtrace limit exceeded";
          goto LABEL_30;
        }
      }
    }
LABEL_32:
    if (v12) {
      free(v12);
    }
    return 0;
  }
  id v3 = *(void **)(v2 + 40);
  if (v3 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v4 = *(void *)(v2 + 88);
    if (v4) {
      *(void *)(v2 + 88) = v4 + 1;
    }
  }
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 96);
    if (v6)
    {
      uint64_t v7 = v6(v2);
      if (v3 != &nw_protocol_ref_counted_handle) {
        return v7;
      }
      goto LABEL_10;
    }
  }
  __nwlog_obj();
  uint64_t v23 = *(const char **)(v2 + 16);
  *(_DWORD *)buf = 136446722;
  BOOL v41 = "__nw_protocol_finalize_output_frames";
  if (!v23) {
    uint64_t v23 = "invalid";
  }
  __int16 v42 = 2082;
  __int16 v43 = (void *)v23;
  __int16 v44 = 2048;
  uint64_t v45 = v2;
  char v24 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (!__nwlog_fault(v24, &type, &v38)) {
    goto LABEL_84;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_84;
    }
    uint64_t v27 = *(const char **)(v2 + 16);
    if (!v27) {
      uint64_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    BOOL v41 = "__nw_protocol_finalize_output_frames";
    __int16 v42 = 2082;
    __int16 v43 = (void *)v27;
    __int16 v44 = 2048;
    uint64_t v45 = v2;
    uint64_t v28 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
LABEL_83:
    _os_log_impl(&dword_1830D4000, v25, v26, v28, buf, 0x20u);
    goto LABEL_84;
  }
  if (!v38)
  {
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_84;
    }
    BOOL v36 = *(const char **)(v2 + 16);
    if (!v36) {
      BOOL v36 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    BOOL v41 = "__nw_protocol_finalize_output_frames";
    __int16 v42 = 2082;
    __int16 v43 = (void *)v36;
    __int16 v44 = 2048;
    uint64_t v45 = v2;
    uint64_t v28 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
    goto LABEL_83;
  }
  char v29 = (char *)__nw_create_backtrace_string();
  os_log_type_t v25 = __nwlog_obj();
  os_log_type_t v26 = type;
  BOOL v30 = os_log_type_enabled(v25, type);
  if (!v29)
  {
    if (!v30) {
      goto LABEL_84;
    }
    os_log_type_t v37 = *(const char **)(v2 + 16);
    if (!v37) {
      os_log_type_t v37 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    BOOL v41 = "__nw_protocol_finalize_output_frames";
    __int16 v42 = 2082;
    __int16 v43 = (void *)v37;
    __int16 v44 = 2048;
    uint64_t v45 = v2;
    uint64_t v28 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
    goto LABEL_83;
  }
  if (v30)
  {
    BOOL v31 = *(const char **)(v2 + 16);
    if (!v31) {
      BOOL v31 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    BOOL v41 = "__nw_protocol_finalize_output_frames";
    __int16 v42 = 2082;
    __int16 v43 = (void *)v31;
    __int16 v44 = 2048;
    uint64_t v45 = v2;
    __int16 v46 = 2082;
    BOOL v47 = v29;
    _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v29);
LABEL_84:
  if (v24) {
    free(v24);
  }
  uint64_t v7 = 0;
  if (v3 == &nw_protocol_ref_counted_handle)
  {
LABEL_10:
    if (*(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(v2 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(v2 + 88) = v9;
        if (!v9)
        {
          os_log_type_t v10 = *(void (***)(void))(v2 + 64);
          if (v10)
          {
            *(void *)(v2 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(v2 + 72))
          {
            uint64_t v11 = *(const void **)(v2 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)v2);
        }
      }
    }
  }
  return v7;
}

uint64_t nw_protocol_common_get_parameters(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_parameters";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v11, &type, &v35)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_parameters";
      os_log_type_t v14 = "%{public}s called with null protocol";
      goto LABEL_29;
    }
    if (!v35)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_parameters";
      os_log_type_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v32 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        char v38 = "nw_protocol_common_get_parameters";
        __int16 v39 = 2082;
        os_log_type_t v40 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_parameters";
      os_log_type_t v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_parameters";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_parameters";
          os_log_type_t v14 = "%{public}s get_parameters requires a default input handler";
LABEL_29:
          BOOL v19 = v12;
          os_log_type_t v20 = v13;
LABEL_30:
          _os_log_impl(&dword_1830D4000, v19, v20, v14, buf, 0xCu);
        }
      }
      else if (v35)
      {
        uint64_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v15)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            char v38 = "nw_protocol_common_get_parameters";
            __int16 v39 = 2082;
            os_log_type_t v40 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s get_parameters requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v15);
          goto LABEL_31;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_parameters";
          os_log_type_t v14 = "%{public}s get_parameters requires a default input handler, no backtrace";
          BOOL v19 = v16;
          os_log_type_t v20 = v17;
          goto LABEL_30;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_parameters";
          os_log_type_t v14 = "%{public}s get_parameters requires a default input handler, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_31:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3) {
      *(void *)(v1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 112);
    if (v5)
    {
      uint64_t v6 = v5(v1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_9;
    }
  }
  __nwlog_obj();
  uint64_t v22 = *(const char **)(v1 + 16);
  *(_DWORD *)buf = 136446722;
  char v38 = "__nw_protocol_get_parameters";
  if (!v22) {
    uint64_t v22 = "invalid";
  }
  __int16 v39 = 2082;
  os_log_type_t v40 = (void *)v22;
  __int16 v41 = 2048;
  uint64_t v42 = v1;
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v23, &type, &v35)) {
    goto LABEL_72;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    os_log_type_t v26 = *(const char **)(v1 + 16);
    if (!v26) {
      os_log_type_t v26 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v26;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x20u);
    goto LABEL_72;
  }
  if (!v35)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    BOOL v33 = *(const char **)(v1 + 16);
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v33;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
    goto LABEL_71;
  }
  uint64_t v28 = (char *)__nw_create_backtrace_string();
  char v24 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v29 = os_log_type_enabled(v24, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_72;
    }
    uint64_t v34 = *(const char **)(v1 + 16);
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v34;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
    goto LABEL_71;
  }
  if (v29)
  {
    BOOL v30 = *(const char **)(v1 + 16);
    if (!v30) {
      BOOL v30 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    char v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v30;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    __int16 v43 = 2082;
    __int16 v44 = v28;
    _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v28);
LABEL_72:
  if (v23) {
    free(v23);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(v1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(v1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(v1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(v1 + 64);
          if (v9)
          {
            *(void *)(v1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(v1 + 72))
          {
            os_log_type_t v10 = *(const void **)(v1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)v1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_common_get_path(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_path";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v11, &type, &v35)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_path";
      os_log_type_t v14 = "%{public}s called with null protocol";
      goto LABEL_29;
    }
    if (!v35)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_path";
      os_log_type_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v32 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        char v38 = "nw_protocol_common_get_path";
        __int16 v39 = 2082;
        os_log_type_t v40 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_path";
      os_log_type_t v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_path";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_path";
          os_log_type_t v14 = "%{public}s get_path requires a default input handler";
LABEL_29:
          BOOL v19 = v12;
          os_log_type_t v20 = v13;
LABEL_30:
          _os_log_impl(&dword_1830D4000, v19, v20, v14, buf, 0xCu);
        }
      }
      else if (v35)
      {
        uint64_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v15)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            char v38 = "nw_protocol_common_get_path";
            __int16 v39 = 2082;
            os_log_type_t v40 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s get_path requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v15);
          goto LABEL_31;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_path";
          os_log_type_t v14 = "%{public}s get_path requires a default input handler, no backtrace";
          BOOL v19 = v16;
          os_log_type_t v20 = v17;
          goto LABEL_30;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_path";
          os_log_type_t v14 = "%{public}s get_path requires a default input handler, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_31:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3) {
      *(void *)(v1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 120);
    if (v5)
    {
      uint64_t v6 = v5(v1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_9;
    }
  }
  __nwlog_obj();
  uint64_t v22 = *(const char **)(v1 + 16);
  *(_DWORD *)buf = 136446722;
  char v38 = "__nw_protocol_get_path";
  if (!v22) {
    uint64_t v22 = "invalid";
  }
  __int16 v39 = 2082;
  os_log_type_t v40 = (void *)v22;
  __int16 v41 = 2048;
  uint64_t v42 = v1;
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v23, &type, &v35)) {
    goto LABEL_72;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    os_log_type_t v26 = *(const char **)(v1 + 16);
    if (!v26) {
      os_log_type_t v26 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_path";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v26;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x20u);
    goto LABEL_72;
  }
  if (!v35)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    BOOL v33 = *(const char **)(v1 + 16);
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_path";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v33;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
    goto LABEL_71;
  }
  uint64_t v28 = (char *)__nw_create_backtrace_string();
  char v24 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v29 = os_log_type_enabled(v24, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_72;
    }
    uint64_t v34 = *(const char **)(v1 + 16);
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_path";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v34;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
    goto LABEL_71;
  }
  if (v29)
  {
    BOOL v30 = *(const char **)(v1 + 16);
    if (!v30) {
      BOOL v30 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    char v38 = "__nw_protocol_get_path";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v30;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    __int16 v43 = 2082;
    __int16 v44 = v28;
    _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v28);
LABEL_72:
  if (v23) {
    free(v23);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(v1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(v1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(v1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(v1 + 64);
          if (v9)
          {
            *(void *)(v1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(v1 + 72))
          {
            os_log_type_t v10 = *(const void **)(v1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)v1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_common_get_remote_endpoint(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_remote_endpoint";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v11, &type, &v35)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_remote_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol";
      goto LABEL_29;
    }
    if (!v35)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_remote_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v32 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        char v38 = "nw_protocol_common_get_remote_endpoint";
        __int16 v39 = 2082;
        os_log_type_t v40 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_remote_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_remote_endpoint";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_remote_endpoint";
          os_log_type_t v14 = "%{public}s get_remote_endpoint requires a default input handler";
LABEL_29:
          BOOL v19 = v12;
          os_log_type_t v20 = v13;
LABEL_30:
          _os_log_impl(&dword_1830D4000, v19, v20, v14, buf, 0xCu);
        }
      }
      else if (v35)
      {
        uint64_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v15)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            char v38 = "nw_protocol_common_get_remote_endpoint";
            __int16 v39 = 2082;
            os_log_type_t v40 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s get_remote_endpoint requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v15);
          goto LABEL_31;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_remote_endpoint";
          os_log_type_t v14 = "%{public}s get_remote_endpoint requires a default input handler, no backtrace";
          BOOL v19 = v16;
          os_log_type_t v20 = v17;
          goto LABEL_30;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_remote_endpoint";
          os_log_type_t v14 = "%{public}s get_remote_endpoint requires a default input handler, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_31:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3) {
      *(void *)(v1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 136);
    if (v5)
    {
      uint64_t v6 = v5(v1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_9;
    }
  }
  __nwlog_obj();
  uint64_t v22 = *(const char **)(v1 + 16);
  *(_DWORD *)buf = 136446722;
  char v38 = "__nw_protocol_get_remote_endpoint";
  if (!v22) {
    uint64_t v22 = "invalid";
  }
  __int16 v39 = 2082;
  os_log_type_t v40 = (void *)v22;
  __int16 v41 = 2048;
  uint64_t v42 = v1;
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v23, &type, &v35)) {
    goto LABEL_72;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    os_log_type_t v26 = *(const char **)(v1 + 16);
    if (!v26) {
      os_log_type_t v26 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v26;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x20u);
    goto LABEL_72;
  }
  if (!v35)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    BOOL v33 = *(const char **)(v1 + 16);
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v33;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_71;
  }
  uint64_t v28 = (char *)__nw_create_backtrace_string();
  char v24 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v29 = os_log_type_enabled(v24, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_72;
    }
    uint64_t v34 = *(const char **)(v1 + 16);
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v34;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    goto LABEL_71;
  }
  if (v29)
  {
    BOOL v30 = *(const char **)(v1 + 16);
    if (!v30) {
      BOOL v30 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    char v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v30;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    __int16 v43 = 2082;
    __int16 v44 = v28;
    _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v28);
LABEL_72:
  if (v23) {
    free(v23);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(v1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(v1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(v1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(v1 + 64);
          if (v9)
          {
            *(void *)(v1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(v1 + 72))
          {
            os_log_type_t v10 = *(const void **)(v1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)v1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_common_get_local_endpoint(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_local_endpoint";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v11, &type, &v35)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_local_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol";
      goto LABEL_29;
    }
    if (!v35)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_local_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v32 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        char v38 = "nw_protocol_common_get_local_endpoint";
        __int16 v39 = 2082;
        os_log_type_t v40 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_local_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_local_endpoint";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_local_endpoint";
          os_log_type_t v14 = "%{public}s get_local_endpoint requires a default input handler";
LABEL_29:
          BOOL v19 = v12;
          os_log_type_t v20 = v13;
LABEL_30:
          _os_log_impl(&dword_1830D4000, v19, v20, v14, buf, 0xCu);
        }
      }
      else if (v35)
      {
        uint64_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v15)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            char v38 = "nw_protocol_common_get_local_endpoint";
            __int16 v39 = 2082;
            os_log_type_t v40 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s get_local_endpoint requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v15);
          goto LABEL_31;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_local_endpoint";
          os_log_type_t v14 = "%{public}s get_local_endpoint requires a default input handler, no backtrace";
          BOOL v19 = v16;
          os_log_type_t v20 = v17;
          goto LABEL_30;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_local_endpoint";
          os_log_type_t v14 = "%{public}s get_local_endpoint requires a default input handler, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_31:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3) {
      *(void *)(v1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 128);
    if (v5)
    {
      uint64_t v6 = v5(v1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_9;
    }
  }
  __nwlog_obj();
  uint64_t v22 = *(const char **)(v1 + 16);
  *(_DWORD *)buf = 136446722;
  char v38 = "__nw_protocol_get_local_endpoint";
  if (!v22) {
    uint64_t v22 = "invalid";
  }
  __int16 v39 = 2082;
  os_log_type_t v40 = (void *)v22;
  __int16 v41 = 2048;
  uint64_t v42 = v1;
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v23, &type, &v35)) {
    goto LABEL_72;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    os_log_type_t v26 = *(const char **)(v1 + 16);
    if (!v26) {
      os_log_type_t v26 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v26;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x20u);
    goto LABEL_72;
  }
  if (!v35)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    BOOL v33 = *(const char **)(v1 + 16);
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v33;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
    goto LABEL_71;
  }
  uint64_t v28 = (char *)__nw_create_backtrace_string();
  char v24 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v29 = os_log_type_enabled(v24, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_72;
    }
    uint64_t v34 = *(const char **)(v1 + 16);
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v34;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
    goto LABEL_71;
  }
  if (v29)
  {
    BOOL v30 = *(const char **)(v1 + 16);
    if (!v30) {
      BOOL v30 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    char v38 = "__nw_protocol_get_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v30;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    __int16 v43 = 2082;
    __int16 v44 = v28;
    _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v28);
LABEL_72:
  if (v23) {
    free(v23);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(v1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(v1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(v1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(v1 + 64);
          if (v9)
          {
            *(void *)(v1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(v1 + 72))
          {
            os_log_type_t v10 = *(const void **)(v1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)v1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_common_get_output_local_endpoint(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_output_local_endpoint";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v11, &type, &v35)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_output_local_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol";
      goto LABEL_29;
    }
    if (!v35)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_output_local_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v32 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        char v38 = "nw_protocol_common_get_output_local_endpoint";
        __int16 v39 = 2082;
        os_log_type_t v40 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_output_local_endpoint";
      os_log_type_t v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_output_local_endpoint";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_output_local_endpoint";
          os_log_type_t v14 = "%{public}s get_output_local_endpoint requires an output handler";
LABEL_29:
          BOOL v19 = v12;
          os_log_type_t v20 = v13;
LABEL_30:
          _os_log_impl(&dword_1830D4000, v19, v20, v14, buf, 0xCu);
        }
      }
      else if (v35)
      {
        uint64_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v15)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            char v38 = "nw_protocol_common_get_output_local_endpoint";
            __int16 v39 = 2082;
            os_log_type_t v40 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s get_output_local_endpoint requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v15);
          goto LABEL_31;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_output_local_endpoint";
          os_log_type_t v14 = "%{public}s get_output_local_endpoint requires an output handler, no backtrace";
          BOOL v19 = v16;
          os_log_type_t v20 = v17;
          goto LABEL_30;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_output_local_endpoint";
          os_log_type_t v14 = "%{public}s get_output_local_endpoint requires an output handler, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_31:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3) {
      *(void *)(v1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 200);
    if (v5)
    {
      uint64_t v6 = v5(v1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_9;
    }
  }
  __nwlog_obj();
  uint64_t v22 = *(const char **)(v1 + 16);
  *(_DWORD *)buf = 136446722;
  char v38 = "__nw_protocol_get_output_local_endpoint";
  if (!v22) {
    uint64_t v22 = "invalid";
  }
  __int16 v39 = 2082;
  os_log_type_t v40 = (void *)v22;
  __int16 v41 = 2048;
  uint64_t v42 = v1;
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v23, &type, &v35)) {
    goto LABEL_72;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    os_log_type_t v26 = *(const char **)(v1 + 16);
    if (!v26) {
      os_log_type_t v26 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_output_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v26;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x20u);
    goto LABEL_72;
  }
  if (!v35)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    BOOL v33 = *(const char **)(v1 + 16);
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_output_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v33;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, backtrace limit exceeded";
    goto LABEL_71;
  }
  uint64_t v28 = (char *)__nw_create_backtrace_string();
  char v24 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v29 = os_log_type_enabled(v24, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_72;
    }
    uint64_t v34 = *(const char **)(v1 + 16);
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_output_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v34;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, no backtrace";
    goto LABEL_71;
  }
  if (v29)
  {
    BOOL v30 = *(const char **)(v1 + 16);
    if (!v30) {
      BOOL v30 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    char v38 = "__nw_protocol_get_output_local_endpoint";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v30;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    __int16 v43 = 2082;
    __int16 v44 = v28;
    _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v28);
LABEL_72:
  if (v23) {
    free(v23);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(v1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(v1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(v1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(v1 + 64);
          if (v9)
          {
            *(void *)(v1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(v1 + 72))
          {
            os_log_type_t v10 = *(const void **)(v1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)v1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_common_get_output_interface(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_output_interface";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v11, &type, &v35)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_output_interface";
      os_log_type_t v14 = "%{public}s called with null protocol";
      goto LABEL_29;
    }
    if (!v35)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_output_interface";
      os_log_type_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v32 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        char v38 = "nw_protocol_common_get_output_interface";
        __int16 v39 = 2082;
        os_log_type_t v40 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      char v38 = "nw_protocol_common_get_output_interface";
      os_log_type_t v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_protocol_common_get_output_interface";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_output_interface";
          os_log_type_t v14 = "%{public}s get_output_interface requires an output handler";
LABEL_29:
          BOOL v19 = v12;
          os_log_type_t v20 = v13;
LABEL_30:
          _os_log_impl(&dword_1830D4000, v19, v20, v14, buf, 0xCu);
        }
      }
      else if (v35)
      {
        uint64_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v15)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            char v38 = "nw_protocol_common_get_output_interface";
            __int16 v39 = 2082;
            os_log_type_t v40 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s get_output_interface requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v15);
          goto LABEL_31;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_output_interface";
          os_log_type_t v14 = "%{public}s get_output_interface requires an output handler, no backtrace";
          BOOL v19 = v16;
          os_log_type_t v20 = v17;
          goto LABEL_30;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          char v38 = "nw_protocol_common_get_output_interface";
          os_log_type_t v14 = "%{public}s get_output_interface requires an output handler, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_31:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3) {
      *(void *)(v1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 208);
    if (v5)
    {
      uint64_t v6 = v5(v1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_9;
    }
  }
  __nwlog_obj();
  uint64_t v22 = *(const char **)(v1 + 16);
  *(_DWORD *)buf = 136446722;
  char v38 = "__nw_protocol_get_output_interface";
  if (!v22) {
    uint64_t v22 = "invalid";
  }
  __int16 v39 = 2082;
  os_log_type_t v40 = (void *)v22;
  __int16 v41 = 2048;
  uint64_t v42 = v1;
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v23, &type, &v35)) {
    goto LABEL_72;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    os_log_type_t v26 = *(const char **)(v1 + 16);
    if (!v26) {
      os_log_type_t v26 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_output_interface";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v26;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x20u);
    goto LABEL_72;
  }
  if (!v35)
  {
    char v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    BOOL v33 = *(const char **)(v1 + 16);
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_output_interface";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v33;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, backtrace limit exceeded";
    goto LABEL_71;
  }
  uint64_t v28 = (char *)__nw_create_backtrace_string();
  char v24 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v29 = os_log_type_enabled(v24, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_72;
    }
    uint64_t v34 = *(const char **)(v1 + 16);
    if (!v34) {
      uint64_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    char v38 = "__nw_protocol_get_output_interface";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v34;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    uint64_t v27 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, no backtrace";
    goto LABEL_71;
  }
  if (v29)
  {
    BOOL v30 = *(const char **)(v1 + 16);
    if (!v30) {
      BOOL v30 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    char v38 = "__nw_protocol_get_output_interface";
    __int16 v39 = 2082;
    os_log_type_t v40 = (void *)v30;
    __int16 v41 = 2048;
    uint64_t v42 = v1;
    __int16 v43 = 2082;
    __int16 v44 = v28;
    _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v28);
LABEL_72:
  if (v23) {
    free(v23);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(v1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(v1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(v1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(v1 + 64);
          if (v9)
          {
            *(void *)(v1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(v1 + 72))
          {
            os_log_type_t v10 = *(const void **)(v1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)v1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_common_connect(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v48 = "nw_protocol_common_connect";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v15, &type, &v45)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_connect";
      BOOL v18 = "%{public}s called with null protocol";
      goto LABEL_43;
    }
    if (!v45)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_connect";
      BOOL v18 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v40 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v40) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_connect";
      BOOL v18 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_43;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v48 = "nw_protocol_common_connect";
      __int16 v49 = 2082;
      char v50 = backtrace_string;
      __int16 v41 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_82:
      _os_log_impl(&dword_1830D4000, v16, v17, v41, buf, 0x16u);
    }
LABEL_83:
    free(backtrace_string);
    goto LABEL_45;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v48 = "nw_protocol_common_connect";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v15, &type, &v45)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_connect";
      BOOL v18 = "%{public}s called with null other_protocol";
      goto LABEL_43;
    }
    if (!v45)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_connect";
      BOOL v18 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v42 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v42) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_connect";
      BOOL v18 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_43;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v48 = "nw_protocol_common_connect";
      __int16 v49 = 2082;
      char v50 = backtrace_string;
      __int16 v41 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(v3 + 88);
      if (v5) {
        *(void *)(v3 + 88) = v5 + 1;
      }
    }
    uint64_t v6 = *(void **)(a1 + 40);
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7) {
        *(void *)(a1 + 88) = v7 + 1;
      }
    }
    uint64_t v8 = *(void *)(v3 + 24);
    if (v8)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
      if (v9)
      {
        uint64_t v10 = v9(v3, a1);
        if (v6 != &nw_protocol_ref_counted_handle)
        {
LABEL_14:
          if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v11 = *(void *)(v3 + 88);
            if (v11)
            {
              uint64_t v12 = v11 - 1;
              *(void *)(v3 + 88) = v12;
              if (!v12)
              {
                os_log_type_t v13 = *(void (***)(void))(v3 + 64);
                if (v13)
                {
                  *(void *)(v3 + 64) = 0;
                  v13[2](v13);
                  _Block_release(v13);
                }
                if (*(unsigned char *)(v3 + 72))
                {
                  os_log_type_t v14 = *(const void **)(v3 + 64);
                  if (v14) {
                    _Block_release(v14);
                  }
                }
                free((void *)v3);
              }
            }
          }
          return v10;
        }
LABEL_13:
        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v23 = *(void *)(a1 + 88);
          if (v23)
          {
            uint64_t v24 = v23 - 1;
            *(void *)(a1 + 88) = v24;
            if (!v24)
            {
              os_log_type_t v25 = *(void (***)(void))(a1 + 64);
              if (v25)
              {
                *(void *)(a1 + 64) = 0;
                v25[2](v25);
                _Block_release(v25);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                os_log_type_t v26 = *(const void **)(a1 + 64);
                if (v26) {
                  _Block_release(v26);
                }
              }
              free((void *)a1);
            }
          }
        }
        goto LABEL_14;
      }
    }
    __nwlog_obj();
    BOOL v30 = *(const char **)(v3 + 16);
    *(_DWORD *)buf = 136446722;
    uint64_t v48 = "__nw_protocol_connect";
    if (!v30) {
      BOOL v30 = "invalid";
    }
    __int16 v49 = 2082;
    char v50 = (void *)v30;
    __int16 v51 = 2048;
    uint64_t v52 = v3;
    BOOL v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v31, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (!os_log_type_enabled(v32, type)) {
          goto LABEL_97;
        }
        uint64_t v34 = *(const char **)(v3 + 16);
        if (!v34) {
          uint64_t v34 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v48 = "__nw_protocol_connect";
        __int16 v49 = 2082;
        char v50 = (void *)v34;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        char v35 = "%{public}s protocol %{public}s (%p) has invalid connect callback";
LABEL_96:
        _os_log_impl(&dword_1830D4000, v32, v33, v35, buf, 0x20u);
        goto LABEL_97;
      }
      if (!v45)
      {
        BOOL v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (!os_log_type_enabled(v32, type)) {
          goto LABEL_97;
        }
        __int16 v43 = *(const char **)(v3 + 16);
        if (!v43) {
          __int16 v43 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v48 = "__nw_protocol_connect";
        __int16 v49 = 2082;
        char v50 = (void *)v43;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        char v35 = "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded";
        goto LABEL_96;
      }
      BOOL v36 = (char *)__nw_create_backtrace_string();
      BOOL v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v37 = os_log_type_enabled(v32, type);
      if (!v36)
      {
        if (!v37) {
          goto LABEL_97;
        }
        __int16 v44 = *(const char **)(v3 + 16);
        if (!v44) {
          __int16 v44 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v48 = "__nw_protocol_connect";
        __int16 v49 = 2082;
        char v50 = (void *)v44;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        char v35 = "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace";
        goto LABEL_96;
      }
      if (v37)
      {
        char v38 = *(const char **)(v3 + 16);
        if (!v38) {
          char v38 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        uint64_t v48 = "__nw_protocol_connect";
        __int16 v49 = 2082;
        char v50 = (void *)v38;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        __int16 v53 = 2082;
        __int16 v54 = v36;
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v36);
    }
LABEL_97:
    if (v31) {
      free(v31);
    }
    uint64_t v10 = 0;
    if (v6 != &nw_protocol_ref_counted_handle) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v48 = "nw_protocol_common_connect";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (__nwlog_fault(v15, &type, &v45))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_common_connect";
        BOOL v18 = "%{public}s connect requires an output handler";
LABEL_43:
        uint64_t v27 = v16;
        os_log_type_t v28 = v17;
LABEL_44:
        _os_log_impl(&dword_1830D4000, v27, v28, v18, buf, 0xCu);
      }
    }
    else if (v45)
    {
      BOOL v19 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v20 = gLogObj;
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v19)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v48 = "nw_protocol_common_connect";
          __int16 v49 = 2082;
          char v50 = v19;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s connect requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v19);
        goto LABEL_45;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_common_connect";
        BOOL v18 = "%{public}s connect requires an output handler, no backtrace";
        uint64_t v27 = v20;
        os_log_type_t v28 = v21;
        goto LABEL_44;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_common_connect";
        BOOL v18 = "%{public}s connect requires an output handler, backtrace limit exceeded";
        goto LABEL_43;
      }
    }
  }
LABEL_45:
  if (v15) {
    free(v15);
  }
  return 0;
}

uint64_t nw_protocol_common_reset(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v48 = "nw_protocol_common_reset";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v15, &type, &v45)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_reset";
      BOOL v18 = "%{public}s called with null protocol";
      goto LABEL_43;
    }
    if (!v45)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_reset";
      BOOL v18 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v40 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v40) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_reset";
      BOOL v18 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_43;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v48 = "nw_protocol_common_reset";
      __int16 v49 = 2082;
      char v50 = backtrace_string;
      __int16 v41 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_82:
      _os_log_impl(&dword_1830D4000, v16, v17, v41, buf, 0x16u);
    }
LABEL_83:
    free(backtrace_string);
    goto LABEL_45;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v48 = "nw_protocol_common_reset";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v15, &type, &v45)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_reset";
      BOOL v18 = "%{public}s called with null other_protocol";
      goto LABEL_43;
    }
    if (!v45)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_reset";
      BOOL v18 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v42 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v42) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_protocol_common_reset";
      BOOL v18 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_43;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v48 = "nw_protocol_common_reset";
      __int16 v49 = 2082;
      char v50 = backtrace_string;
      __int16 v41 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(v3 + 88);
      if (v5) {
        *(void *)(v3 + 88) = v5 + 1;
      }
    }
    uint64_t v6 = *(void **)(a1 + 40);
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7) {
        *(void *)(a1 + 88) = v7 + 1;
      }
    }
    uint64_t v8 = *(void *)(v3 + 24);
    if (v8)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 256);
      if (v9)
      {
        uint64_t v10 = v9(v3, a1);
        if (v6 != &nw_protocol_ref_counted_handle)
        {
LABEL_14:
          if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v11 = *(void *)(v3 + 88);
            if (v11)
            {
              uint64_t v12 = v11 - 1;
              *(void *)(v3 + 88) = v12;
              if (!v12)
              {
                os_log_type_t v13 = *(void (***)(void))(v3 + 64);
                if (v13)
                {
                  *(void *)(v3 + 64) = 0;
                  v13[2](v13);
                  _Block_release(v13);
                }
                if (*(unsigned char *)(v3 + 72))
                {
                  os_log_type_t v14 = *(const void **)(v3 + 64);
                  if (v14) {
                    _Block_release(v14);
                  }
                }
                free((void *)v3);
              }
            }
          }
          return v10;
        }
LABEL_13:
        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v23 = *(void *)(a1 + 88);
          if (v23)
          {
            uint64_t v24 = v23 - 1;
            *(void *)(a1 + 88) = v24;
            if (!v24)
            {
              os_log_type_t v25 = *(void (***)(void))(a1 + 64);
              if (v25)
              {
                *(void *)(a1 + 64) = 0;
                v25[2](v25);
                _Block_release(v25);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                os_log_type_t v26 = *(const void **)(a1 + 64);
                if (v26) {
                  _Block_release(v26);
                }
              }
              free((void *)a1);
            }
          }
        }
        goto LABEL_14;
      }
    }
    __nwlog_obj();
    BOOL v30 = *(const char **)(v3 + 16);
    *(_DWORD *)buf = 136446722;
    uint64_t v48 = "__nw_protocol_reset";
    if (!v30) {
      BOOL v30 = "invalid";
    }
    __int16 v49 = 2082;
    char v50 = (void *)v30;
    __int16 v51 = 2048;
    uint64_t v52 = v3;
    BOOL v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v31, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (!os_log_type_enabled(v32, type)) {
          goto LABEL_97;
        }
        uint64_t v34 = *(const char **)(v3 + 16);
        if (!v34) {
          uint64_t v34 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v48 = "__nw_protocol_reset";
        __int16 v49 = 2082;
        char v50 = (void *)v34;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        char v35 = "%{public}s protocol %{public}s (%p) has invalid reset callback";
LABEL_96:
        _os_log_impl(&dword_1830D4000, v32, v33, v35, buf, 0x20u);
        goto LABEL_97;
      }
      if (!v45)
      {
        BOOL v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (!os_log_type_enabled(v32, type)) {
          goto LABEL_97;
        }
        __int16 v43 = *(const char **)(v3 + 16);
        if (!v43) {
          __int16 v43 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v48 = "__nw_protocol_reset";
        __int16 v49 = 2082;
        char v50 = (void *)v43;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        char v35 = "%{public}s protocol %{public}s (%p) has invalid reset callback, backtrace limit exceeded";
        goto LABEL_96;
      }
      BOOL v36 = (char *)__nw_create_backtrace_string();
      BOOL v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v37 = os_log_type_enabled(v32, type);
      if (!v36)
      {
        if (!v37) {
          goto LABEL_97;
        }
        __int16 v44 = *(const char **)(v3 + 16);
        if (!v44) {
          __int16 v44 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v48 = "__nw_protocol_reset";
        __int16 v49 = 2082;
        char v50 = (void *)v44;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        char v35 = "%{public}s protocol %{public}s (%p) has invalid reset callback, no backtrace";
        goto LABEL_96;
      }
      if (v37)
      {
        char v38 = *(const char **)(v3 + 16);
        if (!v38) {
          char v38 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        uint64_t v48 = "__nw_protocol_reset";
        __int16 v49 = 2082;
        char v50 = (void *)v38;
        __int16 v51 = 2048;
        uint64_t v52 = v3;
        __int16 v53 = 2082;
        __int16 v54 = v36;
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s protocol %{public}s (%p) has invalid reset callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v36);
    }
LABEL_97:
    if (v31) {
      free(v31);
    }
    uint64_t v10 = 0;
    if (v6 != &nw_protocol_ref_counted_handle) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v48 = "nw_protocol_common_reset";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (__nwlog_fault(v15, &type, &v45))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_common_reset";
        BOOL v18 = "%{public}s reset requires an output handler";
LABEL_43:
        uint64_t v27 = v16;
        os_log_type_t v28 = v17;
LABEL_44:
        _os_log_impl(&dword_1830D4000, v27, v28, v18, buf, 0xCu);
      }
    }
    else if (v45)
    {
      BOOL v19 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v20 = gLogObj;
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v19)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v48 = "nw_protocol_common_reset";
          __int16 v49 = 2082;
          char v50 = v19;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s reset requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v19);
        goto LABEL_45;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_common_reset";
        BOOL v18 = "%{public}s reset requires an output handler, no backtrace";
        uint64_t v27 = v20;
        os_log_type_t v28 = v21;
        goto LABEL_44;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_common_reset";
        BOOL v18 = "%{public}s reset requires an output handler, backtrace limit exceeded";
        goto LABEL_43;
      }
    }
  }
LABEL_45:
  if (v15) {
    free(v15);
  }
  return 0;
}

void nw_protocol_common_disconnect(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnect";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v3, &type, &v42)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_disconnect";
      uint64_t v16 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (v42)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446466;
        char v45 = "nw_protocol_common_disconnect";
        __int16 v46 = 2082;
        BOOL v47 = backtrace_string;
        char v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_82;
      }
      if (!v37) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_disconnect";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_disconnect";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_44:
    os_log_type_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_45:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_46;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void **)(v3 + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(v3 + 88);
        if (v5) {
          *(void *)(v3 + 88) = v5 + 1;
        }
      }
      uint64_t v6 = *(void **)(a1 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a1 + 88);
        if (v7) {
          *(void *)(a1 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
        if (v9)
        {
          v9(v3, a1);
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      uint64_t v27 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      char v45 = "__nw_protocol_disconnect";
      if (!v27) {
        uint64_t v27 = "invalid";
      }
      __int16 v46 = 2082;
      BOOL v47 = (void *)v27;
      __int16 v48 = 2048;
      uint64_t v49 = v3;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (__nwlog_fault(v28, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v31 = *(const char **)(v3 + 16);
          if (!v31) {
            BOOL v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_disconnect";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v31;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback";
          goto LABEL_97;
        }
        if (!v42)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v40 = *(const char **)(v3 + 16);
          if (!v40) {
            BOOL v40 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_disconnect";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v40;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, backtrace limit exceeded";
          goto LABEL_97;
        }
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            char v35 = *(const char **)(v3 + 16);
            if (!v35) {
              char v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            char v45 = "__nw_protocol_disconnect";
            __int16 v46 = 2082;
            BOOL v47 = (void *)v35;
            __int16 v48 = 2048;
            uint64_t v49 = v3;
            __int16 v50 = 2082;
            __int16 v51 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_98;
        }
        if (v34)
        {
          __int16 v41 = *(const char **)(v3 + 16);
          if (!v41) {
            __int16 v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_disconnect";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v41;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, no backtrace";
LABEL_97:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_98:
      if (v28) {
        free(v28);
      }
LABEL_13:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = *(void *)(a1 + 88);
        if (v21)
        {
          uint64_t v22 = v21 - 1;
          *(void *)(a1 + 88) = v22;
          if (!v22)
          {
            uint64_t v23 = *(void (***)(void))(a1 + 64);
            if (v23)
            {
              *(void *)(a1 + 64) = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              uint64_t v24 = *(const void **)(a1 + 64);
              if (v24) {
                _Block_release(v24);
              }
            }
            free((void *)a1);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              os_log_type_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_47;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnect";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_disconnect";
        uint64_t v16 = "%{public}s disconnect requires an output handler";
        goto LABEL_44;
      }
      if (!v42)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_disconnect";
        uint64_t v16 = "%{public}s disconnect requires an output handler, backtrace limit exceeded";
        goto LABEL_44;
      }
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v45 = "nw_protocol_common_disconnect";
          __int16 v46 = 2082;
          BOOL v47 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s disconnect requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (v3) {
          goto LABEL_47;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_disconnect";
        uint64_t v16 = "%{public}s disconnect requires an output handler, no backtrace";
        os_log_type_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_45;
      }
    }
LABEL_46:
    if (!v3) {
      return;
    }
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v45 = "nw_protocol_common_disconnect";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault((const char *)v3, &type, &v42)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnect";
    uint64_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
  if (!v42)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnect";
    uint64_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v39 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v39) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnect";
    uint64_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_44;
  }
  if (!v39) {
    goto LABEL_83;
  }
  *(_DWORD *)buf = 136446466;
  char v45 = "nw_protocol_common_disconnect";
  __int16 v46 = 2082;
  BOOL v47 = backtrace_string;
  char v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_82:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_83:
  free(backtrace_string);
  if (v3) {
LABEL_47:
  }
    free((void *)v3);
}

void nw_protocol_common_disconnected(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnected";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v3, &type, &v42)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_disconnected";
      uint64_t v16 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (v42)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446466;
        char v45 = "nw_protocol_common_disconnected";
        __int16 v46 = 2082;
        BOOL v47 = backtrace_string;
        char v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_82;
      }
      if (!v37) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_disconnected";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_disconnected";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_44:
    os_log_type_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_45:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_46;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v4 = *(void **)(v3 + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(v3 + 88);
        if (v5) {
          *(void *)(v3 + 88) = v5 + 1;
        }
      }
      uint64_t v6 = *(void **)(a1 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a1 + 88);
        if (v7) {
          *(void *)(a1 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 48);
        if (v9)
        {
          v9(v3, a1);
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      uint64_t v27 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      char v45 = "__nw_protocol_disconnected";
      if (!v27) {
        uint64_t v27 = "invalid";
      }
      __int16 v46 = 2082;
      BOOL v47 = (void *)v27;
      __int16 v48 = 2048;
      uint64_t v49 = v3;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (__nwlog_fault(v28, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v31 = *(const char **)(v3 + 16);
          if (!v31) {
            BOOL v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_disconnected";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v31;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
          goto LABEL_97;
        }
        if (!v42)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v40 = *(const char **)(v3 + 16);
          if (!v40) {
            BOOL v40 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_disconnected";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v40;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
          goto LABEL_97;
        }
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            char v35 = *(const char **)(v3 + 16);
            if (!v35) {
              char v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            char v45 = "__nw_protocol_disconnected";
            __int16 v46 = 2082;
            BOOL v47 = (void *)v35;
            __int16 v48 = 2048;
            uint64_t v49 = v3;
            __int16 v50 = 2082;
            __int16 v51 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_98;
        }
        if (v34)
        {
          __int16 v41 = *(const char **)(v3 + 16);
          if (!v41) {
            __int16 v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_disconnected";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v41;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_97:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_98:
      if (v28) {
        free(v28);
      }
LABEL_13:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = *(void *)(a1 + 88);
        if (v21)
        {
          uint64_t v22 = v21 - 1;
          *(void *)(a1 + 88) = v22;
          if (!v22)
          {
            uint64_t v23 = *(void (***)(void))(a1 + 64);
            if (v23)
            {
              *(void *)(a1 + 64) = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              uint64_t v24 = *(const void **)(a1 + 64);
              if (v24) {
                _Block_release(v24);
              }
            }
            free((void *)a1);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              os_log_type_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_47;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnected";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_disconnected";
        uint64_t v16 = "%{public}s disconnected requires a default input handler";
        goto LABEL_44;
      }
      if (!v42)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_disconnected";
        uint64_t v16 = "%{public}s disconnected requires a default input handler, backtrace limit exceeded";
        goto LABEL_44;
      }
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v45 = "nw_protocol_common_disconnected";
          __int16 v46 = 2082;
          BOOL v47 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s disconnected requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (v3) {
          goto LABEL_47;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_disconnected";
        uint64_t v16 = "%{public}s disconnected requires a default input handler, no backtrace";
        os_log_type_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_45;
      }
    }
LABEL_46:
    if (!v3) {
      return;
    }
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v45 = "nw_protocol_common_disconnected";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault((const char *)v3, &type, &v42)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnected";
    uint64_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
  if (!v42)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnected";
    uint64_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v39 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v39) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_disconnected";
    uint64_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_44;
  }
  if (!v39) {
    goto LABEL_83;
  }
  *(_DWORD *)buf = 136446466;
  char v45 = "nw_protocol_common_disconnected";
  __int16 v46 = 2082;
  BOOL v47 = backtrace_string;
  char v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_82:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_83:
  free(backtrace_string);
  if (v3) {
LABEL_47:
  }
    free((void *)v3);
}

void nw_protocol_common_input_available(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_available";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v3, &type, &v42)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_input_available";
      uint64_t v16 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (v42)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446466;
        char v45 = "nw_protocol_common_input_available";
        __int16 v46 = 2082;
        BOOL v47 = backtrace_string;
        char v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_82;
      }
      if (!v37) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_input_available";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_input_available";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_44:
    os_log_type_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_45:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_46;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v4 = *(void **)(v3 + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(v3 + 88);
        if (v5) {
          *(void *)(v3 + 88) = v5 + 1;
        }
      }
      uint64_t v6 = *(void **)(a1 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a1 + 88);
        if (v7) {
          *(void *)(a1 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
        if (v9)
        {
          v9(v3, a1);
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      uint64_t v27 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      char v45 = "__nw_protocol_input_available";
      if (!v27) {
        uint64_t v27 = "invalid";
      }
      __int16 v46 = 2082;
      BOOL v47 = (void *)v27;
      __int16 v48 = 2048;
      uint64_t v49 = v3;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (__nwlog_fault(v28, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v31 = *(const char **)(v3 + 16);
          if (!v31) {
            BOOL v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_input_available";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v31;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid input_available callback";
          goto LABEL_97;
        }
        if (!v42)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v40 = *(const char **)(v3 + 16);
          if (!v40) {
            BOOL v40 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_input_available";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v40;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_97;
        }
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            char v35 = *(const char **)(v3 + 16);
            if (!v35) {
              char v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            char v45 = "__nw_protocol_input_available";
            __int16 v46 = 2082;
            BOOL v47 = (void *)v35;
            __int16 v48 = 2048;
            uint64_t v49 = v3;
            __int16 v50 = 2082;
            __int16 v51 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_98;
        }
        if (v34)
        {
          __int16 v41 = *(const char **)(v3 + 16);
          if (!v41) {
            __int16 v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_input_available";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v41;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, no backtrace";
LABEL_97:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_98:
      if (v28) {
        free(v28);
      }
LABEL_13:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = *(void *)(a1 + 88);
        if (v21)
        {
          uint64_t v22 = v21 - 1;
          *(void *)(a1 + 88) = v22;
          if (!v22)
          {
            uint64_t v23 = *(void (***)(void))(a1 + 64);
            if (v23)
            {
              *(void *)(a1 + 64) = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              uint64_t v24 = *(const void **)(a1 + 64);
              if (v24) {
                _Block_release(v24);
              }
            }
            free((void *)a1);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              os_log_type_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_47;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_available";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_input_available";
        uint64_t v16 = "%{public}s input_available requires a default input handler";
        goto LABEL_44;
      }
      if (!v42)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_input_available";
        uint64_t v16 = "%{public}s input_available requires a default input handler, backtrace limit exceeded";
        goto LABEL_44;
      }
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v45 = "nw_protocol_common_input_available";
          __int16 v46 = 2082;
          BOOL v47 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s input_available requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (v3) {
          goto LABEL_47;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_input_available";
        uint64_t v16 = "%{public}s input_available requires a default input handler, no backtrace";
        os_log_type_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_45;
      }
    }
LABEL_46:
    if (!v3) {
      return;
    }
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v45 = "nw_protocol_common_input_available";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault((const char *)v3, &type, &v42)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_available";
    uint64_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
  if (!v42)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_available";
    uint64_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v39 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v39) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_available";
    uint64_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_44;
  }
  if (!v39) {
    goto LABEL_83;
  }
  *(_DWORD *)buf = 136446466;
  char v45 = "nw_protocol_common_input_available";
  __int16 v46 = 2082;
  BOOL v47 = backtrace_string;
  char v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_82:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_83:
  free(backtrace_string);
  if (v3) {
LABEL_47:
  }
    free((void *)v3);
}

void nw_protocol_common_output_available(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_output_available";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v3, &type, &v42)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_output_available";
      uint64_t v16 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (v42)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446466;
        char v45 = "nw_protocol_common_output_available";
        __int16 v46 = 2082;
        BOOL v47 = backtrace_string;
        char v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_82;
      }
      if (!v37) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_output_available";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_output_available";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_44:
    os_log_type_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_45:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_46;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v4 = *(void **)(v3 + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(v3 + 88);
        if (v5) {
          *(void *)(v3 + 88) = v5 + 1;
        }
      }
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 72);
        if (v9)
        {
          v9(v3, a2);
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      uint64_t v27 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      char v45 = "__nw_protocol_output_available";
      if (!v27) {
        uint64_t v27 = "invalid";
      }
      __int16 v46 = 2082;
      BOOL v47 = (void *)v27;
      __int16 v48 = 2048;
      uint64_t v49 = v3;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (__nwlog_fault(v28, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v31 = *(const char **)(v3 + 16);
          if (!v31) {
            BOOL v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_output_available";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v31;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid output_available callback";
          goto LABEL_97;
        }
        if (!v42)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v40 = *(const char **)(v3 + 16);
          if (!v40) {
            BOOL v40 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_output_available";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v40;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded";
          goto LABEL_97;
        }
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            char v35 = *(const char **)(v3 + 16);
            if (!v35) {
              char v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            char v45 = "__nw_protocol_output_available";
            __int16 v46 = 2082;
            BOOL v47 = (void *)v35;
            __int16 v48 = 2048;
            uint64_t v49 = v3;
            __int16 v50 = 2082;
            __int16 v51 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_98;
        }
        if (v34)
        {
          __int16 v41 = *(const char **)(v3 + 16);
          if (!v41) {
            __int16 v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_output_available";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v41;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace";
LABEL_97:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_98:
      if (v28) {
        free(v28);
      }
LABEL_13:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = *(void *)(a2 + 88);
        if (v21)
        {
          uint64_t v22 = v21 - 1;
          *(void *)(a2 + 88) = v22;
          if (!v22)
          {
            uint64_t v23 = *(void (***)(void))(a2 + 64);
            if (v23)
            {
              *(void *)(a2 + 64) = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (*(unsigned char *)(a2 + 72))
            {
              uint64_t v24 = *(const void **)(a2 + 64);
              if (v24) {
                _Block_release(v24);
              }
            }
            free((void *)a2);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              os_log_type_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_47;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_output_available";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_output_available";
        uint64_t v16 = "%{public}s output_available requires a default input handler";
        goto LABEL_44;
      }
      if (!v42)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_output_available";
        uint64_t v16 = "%{public}s output_available requires a default input handler, backtrace limit exceeded";
        goto LABEL_44;
      }
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v45 = "nw_protocol_common_output_available";
          __int16 v46 = 2082;
          BOOL v47 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s output_available requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (v3) {
          goto LABEL_47;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_output_available";
        uint64_t v16 = "%{public}s output_available requires a default input handler, no backtrace";
        os_log_type_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_45;
      }
    }
LABEL_46:
    if (!v3) {
      return;
    }
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v45 = "nw_protocol_common_output_available";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault((const char *)v3, &type, &v42)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_output_available";
    uint64_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
  if (!v42)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_output_available";
    uint64_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v39 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v39) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_output_available";
    uint64_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_44;
  }
  if (!v39) {
    goto LABEL_83;
  }
  *(_DWORD *)buf = 136446466;
  char v45 = "nw_protocol_common_output_available";
  __int16 v46 = 2082;
  BOOL v47 = backtrace_string;
  char v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_82:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_83:
  free(backtrace_string);
  if (v3) {
LABEL_47:
  }
    free((void *)v3);
}

void nw_protocol_common_input_flush(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_flush";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v3, &type, &v42)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_input_flush";
      uint64_t v16 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (v42)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446466;
        char v45 = "nw_protocol_common_input_flush";
        __int16 v46 = 2082;
        BOOL v47 = backtrace_string;
        char v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_82;
      }
      if (!v37) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_input_flush";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v45 = "nw_protocol_common_input_flush";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_44:
    os_log_type_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_45:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_46;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v4 = *(void **)(v3 + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(v3 + 88);
        if (v5) {
          *(void *)(v3 + 88) = v5 + 1;
        }
      }
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 264);
        if (v9)
        {
          v9(v3, a2);
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      uint64_t v27 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      char v45 = "__nw_protocol_input_flush";
      if (!v27) {
        uint64_t v27 = "invalid";
      }
      __int16 v46 = 2082;
      BOOL v47 = (void *)v27;
      __int16 v48 = 2048;
      uint64_t v49 = v3;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (__nwlog_fault(v28, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v31 = *(const char **)(v3 + 16);
          if (!v31) {
            BOOL v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_input_flush";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v31;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback";
          goto LABEL_97;
        }
        if (!v42)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v40 = *(const char **)(v3 + 16);
          if (!v40) {
            BOOL v40 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_input_flush";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v40;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback, backtrace limit exceeded";
          goto LABEL_97;
        }
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            char v35 = *(const char **)(v3 + 16);
            if (!v35) {
              char v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            char v45 = "__nw_protocol_input_flush";
            __int16 v46 = 2082;
            BOOL v47 = (void *)v35;
            __int16 v48 = 2048;
            uint64_t v49 = v3;
            __int16 v50 = 2082;
            __int16 v51 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid input_flush callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_98;
        }
        if (v34)
        {
          __int16 v41 = *(const char **)(v3 + 16);
          if (!v41) {
            __int16 v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          char v45 = "__nw_protocol_input_flush";
          __int16 v46 = 2082;
          BOOL v47 = (void *)v41;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback, no backtrace";
LABEL_97:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_98:
      if (v28) {
        free(v28);
      }
LABEL_13:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = *(void *)(a2 + 88);
        if (v21)
        {
          uint64_t v22 = v21 - 1;
          *(void *)(a2 + 88) = v22;
          if (!v22)
          {
            uint64_t v23 = *(void (***)(void))(a2 + 64);
            if (v23)
            {
              *(void *)(a2 + 64) = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (*(unsigned char *)(a2 + 72))
            {
              uint64_t v24 = *(const void **)(a2 + 64);
              if (v24) {
                _Block_release(v24);
              }
            }
            free((void *)a2);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              os_log_type_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_47;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_flush";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_input_flush";
        uint64_t v16 = "%{public}s input_flush requires a default input handler";
        goto LABEL_44;
      }
      if (!v42)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_input_flush";
        uint64_t v16 = "%{public}s input_flush requires a default input handler, backtrace limit exceeded";
        goto LABEL_44;
      }
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v45 = "nw_protocol_common_input_flush";
          __int16 v46 = 2082;
          BOOL v47 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s input_flush requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (v3) {
          goto LABEL_47;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v45 = "nw_protocol_common_input_flush";
        uint64_t v16 = "%{public}s input_flush requires a default input handler, no backtrace";
        os_log_type_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_45;
      }
    }
LABEL_46:
    if (!v3) {
      return;
    }
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v45 = "nw_protocol_common_input_flush";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault((const char *)v3, &type, &v42)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_flush";
    uint64_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
  if (!v42)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_flush";
    uint64_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v39 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v39) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v45 = "nw_protocol_common_input_flush";
    uint64_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_44;
  }
  if (!v39) {
    goto LABEL_83;
  }
  *(_DWORD *)buf = 136446466;
  char v45 = "nw_protocol_common_input_flush";
  __int16 v46 = 2082;
  BOOL v47 = backtrace_string;
  char v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_82:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_83:
  free(backtrace_string);
  if (v3) {
LABEL_47:
  }
    free((void *)v3);
}

void nw_protocol_common_get_message_properties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v42 = "nw_protocol_common_get_message_properties";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v39)) {
      goto LABEL_104;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null protocol";
      goto LABEL_103;
    }
    if (!v39)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v32 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (!v32) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_103;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      char v42 = "nw_protocol_common_get_message_properties";
      __int16 v43 = 2082;
      __int16 v44 = backtrace_string;
      os_log_type_t v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_75:
      _os_log_impl(&dword_1830D4000, v25, v26, v33, buf, 0x16u);
    }
LABEL_76:
    free(backtrace_string);
    if (!v4) {
      return;
    }
LABEL_25:
    free((void *)v4);
    return;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v42 = "nw_protocol_common_get_message_properties";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v39)) {
      goto LABEL_104;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null other_protocol";
      goto LABEL_103;
    }
    if (!v39)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v34 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_103;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      char v42 = "nw_protocol_common_get_message_properties";
      __int16 v43 = 2082;
      __int16 v44 = backtrace_string;
      os_log_type_t v33 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    goto LABEL_76;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v42 = "nw_protocol_common_get_message_properties";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v39)) {
      goto LABEL_104;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null message_properties";
      goto LABEL_103;
    }
    if (!v39)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_get_message_properties";
      uint64_t v27 = "%{public}s called with null message_properties, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v35 = os_log_type_enabled(v25, type);
    if (backtrace_string)
    {
      if (!v35) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446466;
      char v42 = "nw_protocol_common_get_message_properties";
      __int16 v43 = 2082;
      __int16 v44 = backtrace_string;
      os_log_type_t v33 = "%{public}s called with null message_properties, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    if (!v35) {
      goto LABEL_104;
    }
    *(_DWORD *)buf = 136446210;
    char v42 = "nw_protocol_common_get_message_properties";
    uint64_t v27 = "%{public}s called with null message_properties, no backtrace";
LABEL_103:
    _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
LABEL_104:
    if (!v4) {
      return;
    }
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    if (gLogDatapath)
    {
      BOOL v36 = __nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        char v42 = "nw_protocol_common_get_message_properties";
        _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s get_message_properties requires an output handler", buf, 0xCu);
      }
    }
    return;
  }
  uint64_t v5 = *(void **)(v4 + 40);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v6 = *(void *)(v4 + 88);
    if (v6) {
      *(void *)(v4 + 88) = v6 + 1;
    }
  }
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      *(void *)(a1 + 88) = v8 + 1;
    }
  }
  uint64_t v9 = *(void *)(v4 + 24);
  if (v9)
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 248);
    if (v10)
    {
      v10(v4, a1);
      goto LABEL_14;
    }
  }
  __nwlog_obj();
  os_log_type_t v19 = *(const char **)(v4 + 16);
  *(_DWORD *)buf = 136446722;
  char v42 = "__nw_protocol_get_message_properties";
  if (!v19) {
    os_log_type_t v19 = "invalid";
  }
  __int16 v43 = 2082;
  __int16 v44 = (void *)v19;
  __int16 v45 = 2048;
  uint64_t v46 = v4;
  BOOL v20 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault(v20, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_95;
      }
      uint64_t v23 = *(const char **)(v4 + 16);
      if (!v23) {
        uint64_t v23 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v42 = "__nw_protocol_get_message_properties";
      __int16 v43 = 2082;
      __int16 v44 = (void *)v23;
      __int16 v45 = 2048;
      uint64_t v46 = v4;
      uint64_t v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback";
      goto LABEL_94;
    }
    if (!v39)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_95;
      }
      BOOL v37 = *(const char **)(v4 + 16);
      if (!v37) {
        BOOL v37 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v42 = "__nw_protocol_get_message_properties";
      __int16 v43 = 2082;
      __int16 v44 = (void *)v37;
      __int16 v45 = 2048;
      uint64_t v46 = v4;
      uint64_t v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded";
      goto LABEL_94;
    }
    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    uint64_t v21 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v29 = os_log_type_enabled(v21, type);
    if (v28)
    {
      if (v29)
      {
        os_log_type_t v30 = *(const char **)(v4 + 16);
        if (!v30) {
          os_log_type_t v30 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        char v42 = "__nw_protocol_get_message_properties";
        __int16 v43 = 2082;
        __int16 v44 = (void *)v30;
        __int16 v45 = 2048;
        uint64_t v46 = v4;
        __int16 v47 = 2082;
        __int16 v48 = v28;
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v28);
      goto LABEL_95;
    }
    if (v29)
    {
      char v38 = *(const char **)(v4 + 16);
      if (!v38) {
        char v38 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v42 = "__nw_protocol_get_message_properties";
      __int16 v43 = 2082;
      __int16 v44 = (void *)v38;
      __int16 v45 = 2048;
      uint64_t v46 = v4;
      uint64_t v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace";
LABEL_94:
      _os_log_impl(&dword_1830D4000, v21, v22, v24, buf, 0x20u);
    }
  }
LABEL_95:
  if (v20) {
    free(v20);
  }
LABEL_14:
  if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v15 = *(void *)(a1 + 88);
    if (v15)
    {
      uint64_t v16 = v15 - 1;
      *(void *)(a1 + 88) = v16;
      if (!v16)
      {
        os_log_type_t v17 = *(void (***)(void))(a1 + 64);
        if (v17)
        {
          *(void *)(a1 + 64) = 0;
          v17[2](v17);
          _Block_release(v17);
        }
        if (*(unsigned char *)(a1 + 72))
        {
          BOOL v18 = *(const void **)(a1 + 64);
          if (v18) {
            _Block_release(v18);
          }
        }
        free((void *)a1);
      }
    }
  }
  if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v11 = *(void *)(v4 + 88);
    if (v11)
    {
      uint64_t v12 = v11 - 1;
      *(void *)(v4 + 88) = v12;
      if (!v12)
      {
        os_log_type_t v13 = *(void (***)(void))(v4 + 64);
        if (v13)
        {
          *(void *)(v4 + 64) = 0;
          v13[2](v13);
          _Block_release(v13);
        }
        if (*(unsigned char *)(v4 + 72))
        {
          os_log_type_t v14 = *(const void **)(v4 + 64);
          if (v14) {
            _Block_release(v14);
          }
        }
        goto LABEL_25;
      }
    }
  }
}

uint64_t nw_protocol_common_copy_info(uint64_t a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_protocol_common_copy_info";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v18, &type, &v32)) {
      goto LABEL_74;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (!os_log_type_enabled(v19, type)) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_protocol_common_copy_info";
        uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_73;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v26 = os_log_type_enabled(v19, type);
      if (!backtrace_string)
      {
        if (!v26) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_protocol_common_copy_info";
        uint64_t v21 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_73;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v35 = "nw_protocol_common_copy_info";
        __int16 v36 = 2082;
        BOOL v37 = backtrace_string;
        uint64_t v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_50:
        _os_log_impl(&dword_1830D4000, v19, v20, v27, buf, 0x16u);
      }
LABEL_51:
      free(backtrace_string);
      goto LABEL_74;
    }
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (!os_log_type_enabled(v19, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_protocol_common_copy_info";
    uint64_t v21 = "%{public}s called with null protocol";
LABEL_73:
    _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
LABEL_74:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_protocol_common_copy_info";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v18, &type, &v32)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_protocol_common_copy_info";
      uint64_t v21 = "%{public}s called with null type";
      goto LABEL_73;
    }
    if (!v32)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_protocol_common_copy_info";
      uint64_t v21 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_73;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v35 = "nw_protocol_common_copy_info";
        __int16 v36 = 2082;
        BOOL v37 = backtrace_string;
        uint64_t v27 = "%{public}s called with null type, dumping backtrace:%{public}s";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    if (!v28) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_protocol_common_copy_info";
    uint64_t v21 = "%{public}s called with null type, no backtrace";
    goto LABEL_73;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void **)(v2 + 40);
  if (v3 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v4 = *(void *)(v2 + 88);
    if (v4) {
      *(void *)(v2 + 88) = v4 + 1;
    }
  }
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 224);
    if (v6)
    {
      uint64_t v7 = v6(v2);
      if (v3 != &nw_protocol_ref_counted_handle) {
        return v7;
      }
      goto LABEL_10;
    }
  }
  __nwlog_obj();
  uint64_t v12 = *(const char **)(v2 + 16);
  *(_DWORD *)buf = 136446722;
  BOOL v35 = "__nw_protocol_copy_info";
  if (!v12) {
    uint64_t v12 = "invalid";
  }
  __int16 v36 = 2082;
  BOOL v37 = (void *)v12;
  __int16 v38 = 2048;
  uint64_t v39 = v2;
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v32 = 0;
  if (__nwlog_fault(v13, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      uint64_t v16 = *(const char **)(v2 + 16);
      if (!v16) {
        uint64_t v16 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v35 = "__nw_protocol_copy_info";
      __int16 v36 = 2082;
      BOOL v37 = (void *)v16;
      __int16 v38 = 2048;
      uint64_t v39 = v2;
      os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback";
LABEL_64:
      _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x20u);
      goto LABEL_65;
    }
    if (!v32)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      BOOL v29 = *(const char **)(v2 + 16);
      if (!v29) {
        BOOL v29 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v35 = "__nw_protocol_copy_info";
      __int16 v36 = 2082;
      BOOL v37 = (void *)v29;
      __int16 v38 = 2048;
      uint64_t v39 = v2;
      os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback, backtrace limit exceeded";
      goto LABEL_64;
    }
    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v23 = os_log_type_enabled(v14, type);
    if (!v22)
    {
      if (!v23) {
        goto LABEL_65;
      }
      os_log_type_t v30 = *(const char **)(v2 + 16);
      if (!v30) {
        os_log_type_t v30 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v35 = "__nw_protocol_copy_info";
      __int16 v36 = 2082;
      BOOL v37 = (void *)v30;
      __int16 v38 = 2048;
      uint64_t v39 = v2;
      os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback, no backtrace";
      goto LABEL_64;
    }
    if (v23)
    {
      uint64_t v24 = *(const char **)(v2 + 16);
      if (!v24) {
        uint64_t v24 = "invalid";
      }
      *(_DWORD *)buf = 136446978;
      BOOL v35 = "__nw_protocol_copy_info";
      __int16 v36 = 2082;
      BOOL v37 = (void *)v24;
      __int16 v38 = 2048;
      uint64_t v39 = v2;
      __int16 v40 = 2082;
      __int16 v41 = v22;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid copy_info callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v22);
  }
LABEL_65:
  if (v13) {
    free(v13);
  }
  uint64_t v7 = 0;
  if (v3 == &nw_protocol_ref_counted_handle)
  {
LABEL_10:
    if (*(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(v2 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(v2 + 88) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(v2 + 64);
          if (v10)
          {
            *(void *)(v2 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(v2 + 72))
          {
            uint64_t v11 = *(const void **)(v2 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)v2);
        }
      }
    }
  }
  return v7;
}

uint64_t (**nw_protocol_set_common_callbacks(uint64_t (**result)(uint64_t a1, uint64_t a2)))(uint64_t a1, uint64_t a2)
{
  *BOOL result = nw_protocol_common_add_input_handler;
  result[2] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_replace_input_handler;
  result[1] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_remove_input_handler;
  result[10] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_input_frames;
  result[11] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_output_frames;
  result[12] = nw_protocol_common_finalize_output_frames;
  result[14] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_parameters;
  result[15] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_path;
  result[17] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_remote_endpoint;
  result[16] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_local_endpoint;
  result[25] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_output_local_endpoint;
  result[26] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_output_interface;
  result[3] = nw_protocol_common_connect;
  result[5] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_connected;
  result[4] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_disconnect;
  result[6] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_disconnected;
  result[8] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_input_available;
  result[9] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_output_available;
  result[23] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_input_finished;
  result[24] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_output_finished;
  result[33] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_input_flush;
  result[7] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_error;
  result[32] = nw_protocol_common_reset;
  result[31] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_get_message_properties;
  result[28] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_copy_info;
  result[22] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_supports_external_data;
  result[27] = nw_protocol_common_waiting_for_output;
  result[18] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_register_notification;
  result[19] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_unregister_notification;
  result[20] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_notify;
  result[21] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_updated_path;
  result[13] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_common_link_state;
  return result;
}

void sub_183AC6AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13)
{
  a13.super_class = (Class)NWConcrete_nw_nat64_prefixes_resolver;
  [(_Unwind_Exception *)&a13 dealloc];
  _Unwind_Resume(a1);
}

BOOL nw_nat64_can_v4_address_be_synthesized(unsigned int *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v1 = bswap32(*a1);
    unsigned int v2 = v1 & 0xFF000000;
    BOOL v4 = *a1 != -1 && v1 >> 28 != 14;
    if (v1 >> 8 == 12605539 || (v1 & 0xFFFF0000) == -1442971648 || (v1 & 0xFFFFFFF8) == -1073741824) {
      BOOL v4 = 0;
    }
    if (v2) {
      BOOL v7 = v2 == 2130706432;
    }
    else {
      BOOL v7 = 1;
    }
    return !v7 && v4;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_nat64_can_v4_address_be_synthesized";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_nat64_can_v4_address_be_synthesized";
        os_log_type_t v13 = "%{public}s called with null ipv4_addr";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "nw_nat64_can_v4_address_be_synthesized";
            __int16 v20 = 2082;
            uint64_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null ipv4_addr, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v15) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_nat64_can_v4_address_be_synthesized";
        os_log_type_t v13 = "%{public}s called with null ipv4_addr, no backtrace";
        goto LABEL_36;
      }
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_nat64_can_v4_address_be_synthesized";
        os_log_type_t v13 = "%{public}s called with null ipv4_addr, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:
  }
LABEL_38:
  if (v10) {
    free(v10);
  }
  return 0;
}

id nw_nat64_v4_address_requires_synthesis(unsigned int *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)address = 136446210;
    *(void *)&address[4] = "nw_nat64_v4_address_requires_synthesis";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v18, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_nat64_v4_address_requires_synthesis";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null ipv4_addr", address, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)address = 136446466;
            *(void *)&address[4] = "nw_nat64_v4_address_requires_synthesis";
            *(_WORD *)&address[12] = 2082;
            *(void *)&address[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null ipv4_addr, dumping backtrace:%{public}s", address, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v23)
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_nat64_v4_address_requires_synthesis";
          _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null ipv4_addr, no backtrace", address, 0xCu);
        }
      }
      else
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_nat64_v4_address_requires_synthesis";
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null ipv4_addr, backtrace limit exceeded", address, 0xCu);
        }
      }
    }
LABEL_44:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  unsigned int v1 = *a1;
  unsigned int v2 = bswap32(*a1);
  if ((v2 & 0xFF000000) == 0 || (v2 & 0xFF000000) == 2130706432) {
    return 0;
  }
  BOOL v6 = v2 >> 8 == 12605539 || (v2 & 0xFFFF0000) == -1442971648;
  id is_eligible_for_CrazyIvan46 = 0;
  BOOL v7 = v6 || (v2 & 0xFFFFFFF8) == -1073741824;
  if (!v7 && v1 != -1 && (v2 & 0xF0000000) != 0xE0000000)
  {
    *(_DWORD *)address = 528;
    *(_DWORD *)&address[4] = v1;
    *(void *)&address[8] = 0;
    nw_endpoint_t v8 = nw_endpoint_create_address((const sockaddr *)address);
    nw_endpoint_t v9 = v8;
    if (v8 && (uint64_t v10 = nw_path_create_evaluator_for_endpoint(v8, 0)) != 0)
    {
      uint64_t v11 = (os_unfair_lock_s *)((char *)v10 + 96);
      os_log_type_t v12 = v10;
      os_unfair_lock_lock(v11);
      id is_eligible_for_CrazyIvan46 = v12[6];
      os_unfair_lock_unlock(v11);

      if (is_eligible_for_CrazyIvan46)
      {
        os_log_type_t v13 = (os_unfair_lock_s *)is_eligible_for_CrazyIvan46;
        uint32_t os_unfair_lock_opaque = v13[94]._os_unfair_lock_opaque;

        if (os_unfair_lock_opaque == 2)
        {
          evaluator_for_endpoint = (os_unfair_lock_s *)nw_path_create_evaluator_for_endpoint(0, 0);

          char v16 = nw_path_evaluator_copy_path(evaluator_for_endpoint);
          id is_eligible_for_CrazyIvan46 = (id)nw_path_is_eligible_for_CrazyIvan46(v16);
          os_log_type_t v12 = (id *)evaluator_for_endpoint;
          os_log_type_t v13 = v16;
        }
        else
        {
          id is_eligible_for_CrazyIvan46 = 0;
        }
      }
      else
      {
        os_log_type_t v13 = 0;
      }
    }
    else
    {
      id is_eligible_for_CrazyIvan46 = 0;
    }
  }
  return is_eligible_for_CrazyIvan46;
}

void sub_183AC7158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_nat64_synthesize_v6(void *__src, __int16 *a2, char *__dst)
{
  *(void *)&v42[13] = *MEMORY[0x1E4F143B8];
  if (!__src)
  {
    char v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v40 = "nw_nat64_synthesize_v6";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v26, &type, &v37)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v40 = "nw_nat64_synthesize_v6";
      BOOL v29 = "%{public}s called with null prefix";
LABEL_88:
      _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      goto LABEL_89;
    }
    if (!v37)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_nat64_synthesize_v6";
        BOOL v29 = "%{public}s called with null prefix, backtrace limit exceeded";
        goto LABEL_88;
      }
      goto LABEL_89;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v33 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_nat64_synthesize_v6";
        BOOL v29 = "%{public}s called with null prefix, no backtrace";
        goto LABEL_88;
      }
      goto LABEL_89;
    }
    if (!v33) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v40 = "nw_nat64_synthesize_v6";
    __int16 v41 = 2082;
    *(void *)uint64_t v42 = backtrace_string;
    BOOL v34 = "%{public}s called with null prefix, dumping backtrace:%{public}s";
LABEL_74:
    _os_log_impl(&dword_1830D4000, v27, v28, v34, buf, 0x16u);
    goto LABEL_75;
  }
  if (!a2)
  {
    os_log_type_t v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v40 = "nw_nat64_synthesize_v6";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v26, &type, &v37)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v40 = "nw_nat64_synthesize_v6";
      BOOL v29 = "%{public}s called with null ipv4_addr";
      goto LABEL_88;
    }
    if (!v37)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_nat64_synthesize_v6";
        BOOL v29 = "%{public}s called with null ipv4_addr, backtrace limit exceeded";
        goto LABEL_88;
      }
      goto LABEL_89;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v35 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_nat64_synthesize_v6";
        BOOL v29 = "%{public}s called with null ipv4_addr, no backtrace";
        goto LABEL_88;
      }
      goto LABEL_89;
    }
    if (!v35) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v40 = "nw_nat64_synthesize_v6";
    __int16 v41 = 2082;
    *(void *)uint64_t v42 = backtrace_string;
    BOOL v34 = "%{public}s called with null ipv4_addr, dumping backtrace:%{public}s";
    goto LABEL_74;
  }
  if (!__dst)
  {
    BOOL v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v40 = "nw_nat64_synthesize_v6";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v26, &type, &v37)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_nat64_synthesize_v6";
        BOOL v29 = "%{public}s called with null out_ipv6_addr";
        goto LABEL_88;
      }
LABEL_89:

LABEL_90:
      if (v26) {
        free(v26);
      }
      return 0;
    }
    if (!v37)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_nat64_synthesize_v6";
        BOOL v29 = "%{public}s called with null out_ipv6_addr, backtrace limit exceeded";
        goto LABEL_88;
      }
      goto LABEL_89;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v36 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_nat64_synthesize_v6";
        BOOL v29 = "%{public}s called with null out_ipv6_addr, no backtrace";
        goto LABEL_88;
      }
      goto LABEL_89;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v40 = "nw_nat64_synthesize_v6";
      __int16 v41 = 2082;
      *(void *)uint64_t v42 = backtrace_string;
      BOOL v34 = "%{public}s called with null out_ipv6_addr, dumping backtrace:%{public}s";
      goto LABEL_74;
    }
LABEL_75:

    free(backtrace_string);
    goto LABEL_90;
  }
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  unsigned int v4 = v3 & 0xFF000000;
  if ((v3 & 0xFF000000) == 0 || v4 == 2130706432) {
    return 0;
  }
  unsigned int v6 = v3 & 0xFFFF0000;
  BOOL v7 = v3 >> 8 == 12605539 || v6 == -1442971648;
  if (v7 || (v3 & 0xFFFFFFF8) == -1073741824) {
    return 0;
  }
  uint64_t result = 0;
  if (*(_DWORD *)a2 != -1 && (v3 & 0xF0000000) != 0xE0000000)
  {
    if (*__src ^ 0x9BFF64000000000CLL | __src[1]
      || (uint64_t result = 0, v3 >> 22 != 401) && v6 != -1062731776 && v4 != 167772160 && (v3 & 0xFFF00000) != 0xAC100000)
    {
      *(void *)__dst = 0;
      *((void *)__dst + 1) = 0;
      switch(*(_DWORD *)__src)
      {
        case 4:
          *((_DWORD *)__dst + 1) = *(_DWORD *)a2;
          goto LABEL_36;
        case 5:
          __int16 v11 = *a2;
          __dst[7] = *((unsigned char *)a2 + 2);
          *(_WORD *)(__dst + 5) = v11;
          __dst[9] = *((unsigned char *)a2 + 3);
          goto LABEL_36;
        case 6:
          *((_WORD *)__dst + 3) = *a2;
          *(_WORD *)(__dst + 9) = a2[1];
          goto LABEL_36;
        case 7:
          __dst[7] = *(unsigned char *)a2;
          __int16 v12 = *(__int16 *)((char *)a2 + 1);
          __dst[11] = *((unsigned char *)a2 + 3);
          *(_WORD *)(__dst + 9) = v12;
          goto LABEL_36;
        case 8:
          *(_DWORD *)(__dst + 9) = *(_DWORD *)a2;
          goto LABEL_36;
        case 0xC:
          *((_DWORD *)__dst + 3) = *(_DWORD *)a2;
LABEL_36:
          memcpy(__dst, (char *)__src + 4, *(unsigned int *)__src);
          return 1;
        default:
          os_log_type_t v13 = __nwlog_obj();
          int v14 = *(_DWORD *)__src;
          *(_DWORD *)buf = 136446466;
          __int16 v40 = "nw_nat64_synthesize_v6";
          __int16 v41 = 1024;
          *(_DWORD *)uint64_t v42 = v14;
          BOOL v15 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v37 = 0;
          if (!__nwlog_fault(v15, &type, &v37)) {
            goto LABEL_48;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            char v16 = __nwlog_obj();
            os_log_type_t v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              int v18 = *(_DWORD *)__src;
              *(_DWORD *)buf = 136446466;
              __int16 v40 = "nw_nat64_synthesize_v6";
              __int16 v41 = 1024;
              *(_DWORD *)uint64_t v42 = v18;
              os_log_type_t v19 = "%{public}s invalid prefix length %d";
LABEL_46:
              _os_log_impl(&dword_1830D4000, v16, v17, v19, buf, 0x12u);
              goto LABEL_47;
            }
            goto LABEL_47;
          }
          if (!v37)
          {
            char v16 = __nwlog_obj();
            os_log_type_t v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              int v23 = *(_DWORD *)__src;
              *(_DWORD *)buf = 136446466;
              __int16 v40 = "nw_nat64_synthesize_v6";
              __int16 v41 = 1024;
              *(_DWORD *)uint64_t v42 = v23;
              os_log_type_t v19 = "%{public}s invalid prefix length %d, backtrace limit exceeded";
              goto LABEL_46;
            }
LABEL_47:

            goto LABEL_48;
          }
          os_log_type_t v20 = (char *)__nw_create_backtrace_string();
          char v16 = __nwlog_obj();
          os_log_type_t v17 = type;
          BOOL v21 = os_log_type_enabled(v16, type);
          if (!v20)
          {
            if (v21)
            {
              int v24 = *(_DWORD *)__src;
              *(_DWORD *)buf = 136446466;
              __int16 v40 = "nw_nat64_synthesize_v6";
              __int16 v41 = 1024;
              *(_DWORD *)uint64_t v42 = v24;
              os_log_type_t v19 = "%{public}s invalid prefix length %d, no backtrace";
              goto LABEL_46;
            }
            goto LABEL_47;
          }
          if (v21)
          {
            int v22 = *(_DWORD *)__src;
            *(_DWORD *)buf = 136446722;
            __int16 v40 = "nw_nat64_synthesize_v6";
            __int16 v41 = 1024;
            *(_DWORD *)uint64_t v42 = v22;
            v42[2] = 2082;
            *(void *)&v42[3] = v20;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s invalid prefix length %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v20);
LABEL_48:
          if (v15) {
            free(v15);
          }
          break;
      }
      return 0;
    }
  }
  return result;
}

uint64_t nw_nat64_extract_v4(unsigned int *a1, char *__s1, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v36 = __nwlog_obj();
    *(_DWORD *)__int16 v53 = 136446210;
    *(void *)&v53[4] = "nw_nat64_extract_v4";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    v51[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (!__nwlog_fault(v11, v51, buf)) {
      goto LABEL_37;
    }
    if (v51[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      if (!os_log_type_enabled(v12, v51[0])) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null prefix";
      goto LABEL_93;
    }
    if (buf[0])
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      BOOL v41 = os_log_type_enabled(v12, v51[0]);
      if (backtrace_string)
      {
        if (!v41) {
          goto LABEL_79;
        }
        *(_DWORD *)__int16 v53 = 136446466;
        *(void *)&v53[4] = "nw_nat64_extract_v4";
        *(_WORD *)&v53[12] = 2082;
        *(void *)&v53[14] = backtrace_string;
        uint64_t v42 = "%{public}s called with null prefix, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
      if (!v41) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null prefix, no backtrace";
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      if (!os_log_type_enabled(v12, v51[0])) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null prefix, backtrace limit exceeded";
    }
LABEL_93:
    uint64_t v27 = v53;
    os_log_type_t v28 = v12;
    os_log_type_t v29 = v37;
    uint32_t v30 = 12;
    goto LABEL_35;
  }
  if (!__s1)
  {
    __int16 v38 = __nwlog_obj();
    *(_DWORD *)__int16 v53 = 136446210;
    *(void *)&v53[4] = "nw_nat64_extract_v4";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    v51[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (!__nwlog_fault(v11, v51, buf)) {
      goto LABEL_37;
    }
    if (v51[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      if (!os_log_type_enabled(v12, v51[0])) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null ipv6_addr";
      goto LABEL_93;
    }
    if (buf[0])
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      BOOL v43 = os_log_type_enabled(v12, v51[0]);
      if (backtrace_string)
      {
        if (!v43) {
          goto LABEL_79;
        }
        *(_DWORD *)__int16 v53 = 136446466;
        *(void *)&v53[4] = "nw_nat64_extract_v4";
        *(_WORD *)&v53[12] = 2082;
        *(void *)&v53[14] = backtrace_string;
        uint64_t v42 = "%{public}s called with null ipv6_addr, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
      if (!v43) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null ipv6_addr, no backtrace";
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      if (!os_log_type_enabled(v12, v51[0])) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null ipv6_addr, backtrace limit exceeded";
    }
    goto LABEL_93;
  }
  if (!a3)
  {
    uint64_t v39 = __nwlog_obj();
    *(_DWORD *)__int16 v53 = 136446210;
    *(void *)&v53[4] = "nw_nat64_extract_v4";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    v51[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (!__nwlog_fault(v11, v51, buf)) {
      goto LABEL_37;
    }
    if (v51[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      if (!os_log_type_enabled(v12, v51[0])) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null out_ipv4_addr";
      goto LABEL_93;
    }
    if (buf[0])
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      BOOL v44 = os_log_type_enabled(v12, v51[0]);
      if (backtrace_string)
      {
        if (!v44) {
          goto LABEL_79;
        }
        *(_DWORD *)__int16 v53 = 136446466;
        *(void *)&v53[4] = "nw_nat64_extract_v4";
        *(_WORD *)&v53[12] = 2082;
        *(void *)&v53[14] = backtrace_string;
        uint64_t v42 = "%{public}s called with null out_ipv4_addr, dumping backtrace:%{public}s";
LABEL_78:
        _os_log_impl(&dword_1830D4000, v12, v37, v42, v53, 0x16u);
LABEL_79:

        free(backtrace_string);
        if (!v11) {
          return 0;
        }
        goto LABEL_38;
      }
      if (!v44) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null out_ipv4_addr, no backtrace";
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v37 = v51[0];
      if (!os_log_type_enabled(v12, v51[0])) {
        goto LABEL_36;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = "nw_nat64_extract_v4";
      int v14 = "%{public}s called with null out_ipv4_addr, backtrace limit exceeded";
    }
    goto LABEL_93;
  }
  size_t v6 = *a1;
  if (!memcmp(__s1, a1 + 1, v6))
  {
    switch((int)v6)
    {
      case 4:
        int v8 = *((_DWORD *)__s1 + 1);
        goto LABEL_30;
      case 5:
        __int16 v18 = *(_WORD *)(__s1 + 5);
        *(unsigned char *)(a3 + 2) = __s1[7];
        *(_WORD *)a3 = v18;
        *(unsigned char *)(a3 + 3) = __s1[9];
        return 1;
      case 6:
        *(_WORD *)a3 = *((_WORD *)__s1 + 3);
        *(_WORD *)(a3 + 2) = *(_WORD *)(__s1 + 9);
        return 1;
      case 7:
        *(unsigned char *)a3 = __s1[7];
        __int16 v20 = *(_WORD *)(__s1 + 9);
        *(unsigned char *)(a3 + 3) = __s1[11];
        *(_WORD *)(a3 + 1) = v20;
        return 1;
      case 8:
        int v8 = *(_DWORD *)(__s1 + 9);
        goto LABEL_30;
      case 12:
        int v8 = *((_DWORD *)__s1 + 3);
LABEL_30:
        *(_DWORD *)a3 = v8;
        return 1;
      default:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v21 = (id)gLogObj;
        unsigned int v22 = *a1;
        *(_DWORD *)__int16 v53 = 136446466;
        *(void *)&v53[4] = "nw_nat64_extract_v4";
        *(_WORD *)&v53[12] = 1024;
        *(_DWORD *)&v53[14] = v22;
        __int16 v11 = (char *)_os_log_send_and_compose_impl();

        v51[0] = OS_LOG_TYPE_ERROR;
        buf[0] = 0;
        if (!__nwlog_fault(v11, v51, buf)) {
          goto LABEL_37;
        }
        if (v51[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v23 = (id)gLogObj;
          os_log_type_t v24 = v51[0];
          if (os_log_type_enabled(v23, v51[0]))
          {
            unsigned int v25 = *a1;
            *(_DWORD *)__int16 v53 = 136446466;
            *(void *)&v53[4] = "nw_nat64_extract_v4";
            *(_WORD *)&v53[12] = 1024;
            *(_DWORD *)&v53[14] = v25;
            BOOL v26 = "%{public}s invalid prefix length %d";
LABEL_52:
            _os_log_impl(&dword_1830D4000, v23, v24, v26, v53, 0x12u);
          }
        }
        else if (buf[0])
        {
          BOOL v31 = (char *)__nw_create_backtrace_string();
          int v23 = __nwlog_obj();
          os_log_type_t v24 = v51[0];
          BOOL v32 = os_log_type_enabled(v23, v51[0]);
          if (v31)
          {
            if (v32)
            {
              unsigned int v33 = *a1;
              *(_DWORD *)__int16 v53 = 136446722;
              *(void *)&v53[4] = "nw_nat64_extract_v4";
              *(_WORD *)&v53[12] = 1024;
              *(_DWORD *)&v53[14] = v33;
              *(_WORD *)&v53[18] = 2082;
              *(void *)&v53[20] = v31;
              _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s invalid prefix length %d, dumping backtrace:%{public}s", v53, 0x1Cu);
            }

            free(v31);
            goto LABEL_37;
          }
          if (v32)
          {
            unsigned int v35 = *a1;
            *(_DWORD *)__int16 v53 = 136446466;
            *(void *)&v53[4] = "nw_nat64_extract_v4";
            *(_WORD *)&v53[12] = 1024;
            *(_DWORD *)&v53[14] = v35;
            BOOL v26 = "%{public}s invalid prefix length %d, no backtrace";
            goto LABEL_52;
          }
        }
        else
        {
          int v23 = __nwlog_obj();
          os_log_type_t v24 = v51[0];
          if (os_log_type_enabled(v23, v51[0]))
          {
            unsigned int v34 = *a1;
            *(_DWORD *)__int16 v53 = 136446466;
            *(void *)&v53[4] = "nw_nat64_extract_v4";
            *(_WORD *)&v53[12] = 1024;
            *(_DWORD *)&v53[14] = v34;
            BOOL v26 = "%{public}s invalid prefix length %d, backtrace limit exceeded";
            goto LABEL_52;
          }
        }

        goto LABEL_37;
    }
  }
  __int16 v55 = 0;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  nw_nat64_write_prefix_to_string(a1, (char *)v53, 0x32u);
  *(_OWORD *)__int16 v51 = 0u;
  memset(v52, 0, sizeof(v52));
  if (inet_ntop(30, __s1, (char *)v51, 0x2Eu))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446723;
      __int16 v48 = "nw_nat64_extract_v4";
      __int16 v49 = 2085;
      *(void *)__int16 v50 = v53;
      *(_WORD *)&v50[8] = 2085;
      *(void *)&v50[10] = v51;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s prefix %{sensitive}s does not match address %{sensitive}s", buf, 0x20u);
    }

    return 0;
  }
  int v9 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  __int16 v48 = "nw_nat64_extract_v4";
  __int16 v49 = 1024;
  *(_DWORD *)__int16 v50 = v9;
  __int16 v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (__nwlog_fault(v11, &type, &v45))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v48 = "nw_nat64_extract_v4";
        __int16 v49 = 1024;
        *(_DWORD *)__int16 v50 = v9;
        int v14 = "%{public}s inet_ntop failed %{darwin.errno}d";
LABEL_33:
        uint64_t v27 = buf;
        os_log_type_t v28 = v12;
        os_log_type_t v29 = v13;
LABEL_34:
        uint32_t v30 = 18;
LABEL_35:
        _os_log_impl(&dword_1830D4000, v28, v29, v14, v27, v30);
      }
    }
    else
    {
      if (v45)
      {
        BOOL v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v12 = (id)gLogObj;
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v12, type);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446722;
            __int16 v48 = "nw_nat64_extract_v4";
            __int16 v49 = 1024;
            *(_DWORD *)__int16 v50 = v9;
            *(_WORD *)&v50[4] = 2082;
            *(void *)&v50[6] = v15;
            _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s inet_ntop failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v15);
          if (!v11) {
            return 0;
          }
          goto LABEL_38;
        }
        if (!v17) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446466;
        __int16 v48 = "nw_nat64_extract_v4";
        __int16 v49 = 1024;
        *(_DWORD *)__int16 v50 = v9;
        int v14 = "%{public}s inet_ntop failed %{darwin.errno}d, no backtrace";
        uint64_t v27 = buf;
        os_log_type_t v28 = v12;
        os_log_type_t v29 = v16;
        goto LABEL_34;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v48 = "nw_nat64_extract_v4";
        __int16 v49 = 1024;
        *(_DWORD *)__int16 v50 = v9;
        int v14 = "%{public}s inet_ntop failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_33;
      }
    }
LABEL_36:
  }
LABEL_37:
  if (v11) {
LABEL_38:
  }
    free(v11);
  return 0;
}

uint64_t nw_nat64_write_prefix_to_string(unsigned int *a1, char *a2, socklen_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    v61 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v70 = "nw_nat64_write_prefix_to_string";
    uint64_t v39 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v39, type, &v68)) {
      goto LABEL_84;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v21 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      v70 = "nw_nat64_write_prefix_to_string";
      int v23 = "%{public}s called with null prefix";
    }
    else if (v68)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v21 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      BOOL v65 = os_log_type_enabled(v21, type[0]);
      if (backtrace_string)
      {
        if (v65)
        {
          *(_DWORD *)buf = 136446466;
          v70 = "nw_nat64_write_prefix_to_string";
          __int16 v71 = 2082;
          *(void *)__int16 v72 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v62, "%{public}s called with null prefix, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_84;
      }
      if (!v65) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      v70 = "nw_nat64_write_prefix_to_string";
      int v23 = "%{public}s called with null prefix, no backtrace";
    }
    else
    {
      id v21 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      v70 = "nw_nat64_write_prefix_to_string";
      int v23 = "%{public}s called with null prefix, backtrace limit exceeded";
    }
LABEL_116:
    uint64_t v52 = v21;
    os_log_type_t v53 = v62;
    uint32_t v54 = 12;
    goto LABEL_67;
  }
  if (!a2)
  {
    v63 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v70 = "nw_nat64_write_prefix_to_string";
    uint64_t v39 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v39, type, &v68)) {
      goto LABEL_84;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v21 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      v70 = "nw_nat64_write_prefix_to_string";
      int v23 = "%{public}s called with null dst";
    }
    else if (v68)
    {
      __int16 v48 = (char *)__nw_create_backtrace_string();
      id v21 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      BOOL v66 = os_log_type_enabled(v21, type[0]);
      if (v48)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          v70 = "nw_nat64_write_prefix_to_string";
          __int16 v71 = 2082;
          *(void *)__int16 v72 = v48;
          _os_log_impl(&dword_1830D4000, v21, v62, "%{public}s called with null dst, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_61;
      }
      if (!v66) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      v70 = "nw_nat64_write_prefix_to_string";
      int v23 = "%{public}s called with null dst, no backtrace";
    }
    else
    {
      id v21 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      v70 = "nw_nat64_write_prefix_to_string";
      int v23 = "%{public}s called with null dst, backtrace limit exceeded";
    }
    goto LABEL_116;
  }
  if (a3 > 0x31)
  {
    size_t v11 = *a1;
    if ((v11 - 4) >= 5 && v11 != 12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v37 = (id)gLogObj;
      int v38 = *a1;
      *(_DWORD *)buf = 136446466;
      v70 = "nw_nat64_write_prefix_to_string";
      __int16 v71 = 1024;
      *(_DWORD *)__int16 v72 = v38;
      uint64_t v39 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v39, type, &v68))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v41 = (id)gLogObj;
          os_log_type_t v42 = type[0];
          if (os_log_type_enabled(v41, type[0]))
          {
            int v43 = *a1;
            *(_DWORD *)buf = 136446466;
            v70 = "nw_nat64_write_prefix_to_string";
            __int16 v71 = 1024;
            *(_DWORD *)__int16 v72 = v43;
            BOOL v44 = "%{public}s invalid prefix length %d";
LABEL_81:
            __int16 v58 = v41;
            os_log_type_t v59 = v42;
LABEL_82:
            _os_log_impl(&dword_1830D4000, v58, v59, v44, buf, 0x12u);
            goto LABEL_83;
          }
          goto LABEL_83;
        }
        if (v68 == OS_LOG_TYPE_DEFAULT)
        {
          BOOL v41 = __nwlog_obj();
          os_log_type_t v42 = type[0];
          if (os_log_type_enabled(v41, type[0]))
          {
            int v57 = *a1;
            *(_DWORD *)buf = 136446466;
            v70 = "nw_nat64_write_prefix_to_string";
            __int16 v71 = 1024;
            *(_DWORD *)__int16 v72 = v57;
            BOOL v44 = "%{public}s invalid prefix length %d, backtrace limit exceeded";
            goto LABEL_81;
          }
LABEL_83:

          goto LABEL_84;
        }
        __int16 v48 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v41 = (id)gLogObj;
        os_log_type_t v49 = type[0];
        BOOL v50 = os_log_type_enabled(v41, type[0]);
        if (!v48)
        {
          if (!v50) {
            goto LABEL_83;
          }
          int v60 = *a1;
          *(_DWORD *)buf = 136446466;
          v70 = "nw_nat64_write_prefix_to_string";
          __int16 v71 = 1024;
          *(_DWORD *)__int16 v72 = v60;
          BOOL v44 = "%{public}s invalid prefix length %d, no backtrace";
          __int16 v58 = v41;
          os_log_type_t v59 = v49;
          goto LABEL_82;
        }
        if (v50)
        {
          int v51 = *a1;
          *(_DWORD *)buf = 136446722;
          v70 = "nw_nat64_write_prefix_to_string";
          __int16 v71 = 1024;
          *(_DWORD *)__int16 v72 = v51;
          *(_WORD *)&v72[4] = 2082;
          *(void *)&v72[6] = v48;
          _os_log_impl(&dword_1830D4000, v41, v49, "%{public}s invalid prefix length %d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

LABEL_61:
        free(v48);
        if (!v39) {
          return 0;
        }
        goto LABEL_85;
      }
LABEL_84:
      if (!v39) {
        return 0;
      }
LABEL_85:
      unsigned int v33 = (char *)v39;
      goto LABEL_86;
    }
    if (v11 <= 0xF) {
      size_t v13 = 16 - v11;
    }
    else {
      size_t v13 = 0;
    }
    bzero(&type[v11], v13);
    memcpy(type, a1 + 1, v11);
    if (inet_ntop(30, type, a2, a3))
    {
      size_t v14 = strlen(a2);
      if (snprintf(&a2[v14], a3 - v14, "/%d", 8 * *a1) > 2) {
        return 1;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v24 = (id)gLogObj;
      int v25 = *a1;
      *(_DWORD *)buf = 136447234;
      v70 = "nw_nat64_write_prefix_to_string";
      __int16 v71 = 1024;
      *(_DWORD *)__int16 v72 = v25;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = a3;
      *(_WORD *)&v72[10] = 2048;
      *(void *)&v72[12] = v14;
      __int16 v73 = 2082;
      __int16 v74 = a2;
      BOOL v26 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t v68 = OS_LOG_TYPE_ERROR;
      char v67 = 0;
      if (__nwlog_fault(v26, &v68, &v67))
      {
        if (v68 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v27 = (id)gLogObj;
          os_log_type_t v28 = v68;
          if (os_log_type_enabled(v27, v68))
          {
            int v29 = *a1;
            *(_DWORD *)buf = 136447234;
            v70 = "nw_nat64_write_prefix_to_string";
            __int16 v71 = 1024;
            *(_DWORD *)__int16 v72 = v29;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = a3;
            *(_WORD *)&v72[10] = 2048;
            *(void *)&v72[12] = v14;
            __int16 v73 = 2082;
            __int16 v74 = a2;
            uint32_t v30 = "%{public}s snprintf failed: prefix->length=%d, dst_length=%u strlen_dst=%zu, dst=\"%{public}s\"";
LABEL_75:
            _os_log_impl(&dword_1830D4000, v27, v28, v30, buf, 0x2Cu);
            goto LABEL_76;
          }
          goto LABEL_76;
        }
        if (!v67)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v27 = (id)gLogObj;
          os_log_type_t v28 = v68;
          if (os_log_type_enabled(v27, v68))
          {
            int v55 = *a1;
            *(_DWORD *)buf = 136447234;
            v70 = "nw_nat64_write_prefix_to_string";
            __int16 v71 = 1024;
            *(_DWORD *)__int16 v72 = v55;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = a3;
            *(_WORD *)&v72[10] = 2048;
            *(void *)&v72[12] = v14;
            __int16 v73 = 2082;
            __int16 v74 = a2;
            uint32_t v30 = "%{public}s snprintf failed: prefix->length=%d, dst_length=%u strlen_dst=%zu, dst=\"%{public}s\", backt"
                  "race limit exceeded";
            goto LABEL_75;
          }
LABEL_76:

          goto LABEL_77;
        }
        char v45 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v27 = (id)gLogObj;
        os_log_type_t v28 = v68;
        BOOL v46 = os_log_type_enabled(v27, v68);
        if (!v45)
        {
          if (v46)
          {
            int v56 = *a1;
            *(_DWORD *)buf = 136447234;
            v70 = "nw_nat64_write_prefix_to_string";
            __int16 v71 = 1024;
            *(_DWORD *)__int16 v72 = v56;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = a3;
            *(_WORD *)&v72[10] = 2048;
            *(void *)&v72[12] = v14;
            __int16 v73 = 2082;
            __int16 v74 = a2;
            uint32_t v30 = "%{public}s snprintf failed: prefix->length=%d, dst_length=%u strlen_dst=%zu, dst=\"%{public}s\", no backtrace";
            goto LABEL_75;
          }
          goto LABEL_76;
        }
        if (v46)
        {
          int v47 = *a1;
          *(_DWORD *)buf = 136447490;
          v70 = "nw_nat64_write_prefix_to_string";
          __int16 v71 = 1024;
          *(_DWORD *)__int16 v72 = v47;
          *(_WORD *)&v72[4] = 1024;
          *(_DWORD *)&v72[6] = a3;
          *(_WORD *)&v72[10] = 2048;
          *(void *)&v72[12] = v14;
          __int16 v73 = 2082;
          __int16 v74 = a2;
          __int16 v75 = 2082;
          __int16 v76 = v45;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s snprintf failed: prefix->length=%d, dst_length=%u strlen_dst=%zu, dst=\"%{public}s\", dumping backtrace:%{public}s", buf, 0x36u);
        }

        free(v45);
      }
LABEL_77:
      if (v26)
      {
        unsigned int v33 = (char *)v26;
        goto LABEL_86;
      }
      return 0;
    }
    int v19 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v70 = "nw_nat64_write_prefix_to_string";
    __int16 v71 = 1024;
    *(_DWORD *)__int16 v72 = v19;
    uint64_t v39 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t v68 = OS_LOG_TYPE_ERROR;
    char v67 = 0;
    if (!__nwlog_fault(v39, &v68, &v67)) {
      goto LABEL_84;
    }
    if (v68 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v21 = (id)gLogObj;
      os_log_type_t v22 = v68;
      if (os_log_type_enabled(v21, v68))
      {
        *(_DWORD *)buf = 136446466;
        v70 = "nw_nat64_write_prefix_to_string";
        __int16 v71 = 1024;
        *(_DWORD *)__int16 v72 = v19;
        int v23 = "%{public}s inet_ntop failed %{darwin.errno}d";
LABEL_65:
        uint64_t v52 = v21;
        os_log_type_t v53 = v22;
LABEL_66:
        uint32_t v54 = 18;
LABEL_67:
        _os_log_impl(&dword_1830D4000, v52, v53, v23, buf, v54);
      }
    }
    else if (v67)
    {
      unsigned int v34 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v21 = (id)gLogObj;
      os_log_type_t v35 = v68;
      BOOL v36 = os_log_type_enabled(v21, v68);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446722;
          v70 = "nw_nat64_write_prefix_to_string";
          __int16 v71 = 1024;
          *(_DWORD *)__int16 v72 = v19;
          *(_WORD *)&v72[4] = 2082;
          *(void *)&v72[6] = v34;
          _os_log_impl(&dword_1830D4000, v21, v35, "%{public}s inet_ntop failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v34);
        goto LABEL_84;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v70 = "nw_nat64_write_prefix_to_string";
        __int16 v71 = 1024;
        *(_DWORD *)__int16 v72 = v19;
        int v23 = "%{public}s inet_ntop failed %{darwin.errno}d, no backtrace";
        uint64_t v52 = v21;
        os_log_type_t v53 = v35;
        goto LABEL_66;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v21 = (id)gLogObj;
      os_log_type_t v22 = v68;
      if (os_log_type_enabled(v21, v68))
      {
        *(_DWORD *)buf = 136446466;
        v70 = "nw_nat64_write_prefix_to_string";
        __int16 v71 = 1024;
        *(_DWORD *)__int16 v72 = v19;
        int v23 = "%{public}s inet_ntop failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_65;
      }
    }
LABEL_68:

    goto LABEL_84;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v70 = "nw_nat64_write_prefix_to_string";
  __int16 v71 = 1024;
  *(_DWORD *)__int16 v72 = a3;
  *(_WORD *)&v72[4] = 1024;
  *(_DWORD *)&v72[6] = 50;
  size_t v6 = (const char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v6, type, &v68)) {
    goto LABEL_24;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v7 = (id)gLogObj;
    os_log_type_t v8 = type[0];
    if (!os_log_type_enabled(v7, type[0])) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446722;
    v70 = "nw_nat64_write_prefix_to_string";
    __int16 v71 = 1024;
    *(_DWORD *)__int16 v72 = a3;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = 50;
    int v9 = "%{public}s dst_length=%u must be >= %d";
LABEL_36:
    BOOL v31 = v7;
    os_log_type_t v32 = v8;
LABEL_37:
    _os_log_impl(&dword_1830D4000, v31, v32, v9, buf, 0x18u);
    goto LABEL_38;
  }
  if (v68 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v7 = (id)gLogObj;
    os_log_type_t v8 = type[0];
    if (!os_log_type_enabled(v7, type[0])) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446722;
    v70 = "nw_nat64_write_prefix_to_string";
    __int16 v71 = 1024;
    *(_DWORD *)__int16 v72 = a3;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = 50;
    int v9 = "%{public}s dst_length=%u must be >= %d, backtrace limit exceeded";
    goto LABEL_36;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v7 = (id)gLogObj;
  os_log_type_t v17 = type[0];
  BOOL v18 = os_log_type_enabled(v7, type[0]);
  if (v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446978;
      v70 = "nw_nat64_write_prefix_to_string";
      __int16 v71 = 1024;
      *(_DWORD *)__int16 v72 = a3;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = 50;
      *(_WORD *)&v72[10] = 2082;
      *(void *)&v72[12] = v16;
      _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s dst_length=%u must be >= %d, dumping backtrace:%{public}s", buf, 0x22u);
    }

    free(v16);
LABEL_24:
    if (!v6) {
      return 0;
    }
    goto LABEL_39;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446722;
    v70 = "nw_nat64_write_prefix_to_string";
    __int16 v71 = 1024;
    *(_DWORD *)__int16 v72 = a3;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = 50;
    int v9 = "%{public}s dst_length=%u must be >= %d, no backtrace";
    BOOL v31 = v7;
    os_log_type_t v32 = v17;
    goto LABEL_37;
  }
LABEL_38:

  if (v6)
  {
LABEL_39:
    unsigned int v33 = (char *)v6;
LABEL_86:
    free(v33);
  }
  return 0;
}

uint64_t nw_nat64_copy_prefixes_from_ipv4only_records(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v36 = __nwlog_obj();
    *(_DWORD *)uint64_t v78 = 136446210;
    *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
    id v37 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v69) = 0;
    if (!__nwlog_fault(v37, buf, &v69)) {
      goto LABEL_124;
    }
    if (buf[0] == 17)
    {
      int v38 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      if (!os_log_type_enabled(v38, (os_log_type_t)buf[0])) {
        goto LABEL_123;
      }
      *(_DWORD *)uint64_t v78 = 136446210;
      *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
      __int16 v40 = "%{public}s called with null ipv6_addrs";
LABEL_122:
      _os_log_impl(&dword_1830D4000, v38, v39, v40, v78, 0xCu);
      goto LABEL_123;
    }
    if (!(_BYTE)v69)
    {
      int v38 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v78 = 136446210;
        *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
        __int16 v40 = "%{public}s called with null ipv6_addrs, backtrace limit exceeded";
        goto LABEL_122;
      }
      goto LABEL_123;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    int v38 = __nwlog_obj();
    os_log_type_t v39 = buf[0];
    BOOL v52 = os_log_type_enabled(v38, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)uint64_t v78 = 136446210;
        *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
        __int16 v40 = "%{public}s called with null ipv6_addrs, no backtrace";
        goto LABEL_122;
      }
      goto LABEL_123;
    }
    if (!v52) {
      goto LABEL_109;
    }
    *(_DWORD *)uint64_t v78 = 136446466;
    *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
    *(_WORD *)&v78[12] = 2082;
    *(void *)&v78[14] = backtrace_string;
    os_log_type_t v53 = "%{public}s called with null ipv6_addrs, dumping backtrace:%{public}s";
LABEL_108:
    _os_log_impl(&dword_1830D4000, v38, v39, v53, v78, 0x16u);
LABEL_109:

    free(backtrace_string);
    goto LABEL_124;
  }
  if (!a2)
  {
    BOOL v41 = __nwlog_obj();
    *(_DWORD *)uint64_t v78 = 136446210;
    *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
    id v37 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v69) = 0;
    if (!__nwlog_fault(v37, buf, &v69)) {
      goto LABEL_124;
    }
    if (buf[0] == 17)
    {
      int v38 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      if (!os_log_type_enabled(v38, (os_log_type_t)buf[0])) {
        goto LABEL_123;
      }
      *(_DWORD *)uint64_t v78 = 136446210;
      *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
      __int16 v40 = "%{public}s called with null num_ipv6_addrs";
      goto LABEL_122;
    }
    if (!(_BYTE)v69)
    {
      int v38 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v78 = 136446210;
        *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
        __int16 v40 = "%{public}s called with null num_ipv6_addrs, backtrace limit exceeded";
        goto LABEL_122;
      }
      goto LABEL_123;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    int v38 = __nwlog_obj();
    os_log_type_t v39 = buf[0];
    BOOL v54 = os_log_type_enabled(v38, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v54)
      {
        *(_DWORD *)uint64_t v78 = 136446210;
        *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
        __int16 v40 = "%{public}s called with null num_ipv6_addrs, no backtrace";
        goto LABEL_122;
      }
      goto LABEL_123;
    }
    if (!v54) {
      goto LABEL_109;
    }
    *(_DWORD *)uint64_t v78 = 136446466;
    *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
    *(_WORD *)&v78[12] = 2082;
    *(void *)&v78[14] = backtrace_string;
    os_log_type_t v53 = "%{public}s called with null num_ipv6_addrs, dumping backtrace:%{public}s";
    goto LABEL_108;
  }
  if (!a3)
  {
    os_log_type_t v42 = __nwlog_obj();
    *(_DWORD *)uint64_t v78 = 136446210;
    *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
    id v37 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v69) = 0;
    if (__nwlog_fault(v37, buf, &v69))
    {
      if (buf[0] == 17)
      {
        int v38 = __nwlog_obj();
        os_log_type_t v39 = buf[0];
        if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v78 = 136446210;
          *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
          __int16 v40 = "%{public}s called with null out_prefixes";
          goto LABEL_122;
        }
LABEL_123:

        goto LABEL_124;
      }
      if (!(_BYTE)v69)
      {
        int v38 = __nwlog_obj();
        os_log_type_t v39 = buf[0];
        if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v78 = 136446210;
          *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
          __int16 v40 = "%{public}s called with null out_prefixes, backtrace limit exceeded";
          goto LABEL_122;
        }
        goto LABEL_123;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v38 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      BOOL v59 = os_log_type_enabled(v38, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)uint64_t v78 = 136446210;
          *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
          __int16 v40 = "%{public}s called with null out_prefixes, no backtrace";
          goto LABEL_122;
        }
        goto LABEL_123;
      }
      if (!v59) {
        goto LABEL_109;
      }
      *(_DWORD *)uint64_t v78 = 136446466;
      *(void *)&v78[4] = "nw_nat64_copy_prefixes_from_ipv4only_records";
      *(_WORD *)&v78[12] = 2082;
      *(void *)&v78[14] = backtrace_string;
      os_log_type_t v53 = "%{public}s called with null out_prefixes, dumping backtrace:%{public}s";
      goto LABEL_108;
    }
LABEL_124:
    if (v37) {
      free(v37);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 2 * a2;
  if (!v5)
  {
    int v43 = __nwlog_obj();
    os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136446210;
    *(void *)&v78[4] = "strict_calloc";
    BOOL v44 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v44);
    if (result) {
      goto LABEL_127;
    }
    free(v44);
  }
  size_t v6 = (char *)malloc_type_calloc(2 * a2, 0x10uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
    if (v5) {
      goto LABEL_7;
    }
    goto LABEL_88;
  }
  char v45 = __nwlog_obj();
  os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t v78 = 136446722;
  *(void *)&v78[4] = "strict_calloc";
  *(_WORD *)&v78[12] = 2048;
  *(void *)&v78[14] = v5;
  __int16 v79 = 2048;
  uint64_t v80 = 16;
  BOOL v46 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v46);
  if (result) {
    goto LABEL_127;
  }
  free(v46);
  if (!v5)
  {
LABEL_88:
    int v47 = __nwlog_obj();
    os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136446210;
    *(void *)&v78[4] = "strict_calloc";
    __int16 v48 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v48);
    if (result) {
      goto LABEL_127;
    }
    free(v48);
  }
LABEL_7:
  BOOL v7 = malloc_type_calloc(2 * a2, 0x10uLL, 0xEAFB8F1AuLL);
  if (!v7)
  {
    os_log_type_t v49 = __nwlog_obj();
    os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136446722;
    *(void *)&v78[4] = "strict_calloc";
    *(_WORD *)&v78[12] = 2048;
    *(void *)&v78[14] = v5;
    __int16 v79 = 2048;
    uint64_t v80 = 16;
    BOOL v50 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v50);
    if (!result)
    {
      free(v50);
      goto LABEL_8;
    }
LABEL_127:
    __break(1u);
    return result;
  }
LABEL_8:
  unsigned int v8 = 2 * a2;
  BOOL v66 = v6;
  int v60 = a3;
  uint64_t v9 = 0;
  unsigned int v67 = 0;
  unsigned int v10 = 0;
  uint64_t v61 = a2;
  do
  {
    size_t v11 = (unsigned char *)(a1 + 16 * v9);
    if (!v11[8])
    {
      uint64_t v16 = 0;
      while (1)
      {
        size_t v17 = nw_nat64_copy_prefixes_from_ipv4only_records::prefix_lengths[v16];
        *(_DWORD *)&v78[12] = 0;
        *(void *)&v78[4] = 0;
        *(_DWORD *)uint64_t v78 = v17;
        if (v16 == 5) {
          size_t v18 = 0;
        }
        else {
          size_t v18 = 12 - v17;
        }
        bzero(&v78[v17 + 4], v18);
        memcpy(&v78[4], v11, v17);
        int v69 = 0;
        if (!nw_nat64_extract_v4((unsigned int *)v78, v11, (uint64_t)&v69)) {
          goto LABEL_18;
        }
        if (v69 == -1426063168)
        {
          if (v67 >= v8)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v19 = (id)gLogObj;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v71 = "nw_nat64_copy_prefixes_from_ipv4only_records";
              id v20 = v19;
              id v21 = "%{public}s too many valid prefixes for WKA2";
LABEL_32:
              _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
            }
LABEL_33:

            goto LABEL_18;
          }
          v7[v67++] = *(_OWORD *)v78;
        }
        else if (v69 == -1442840384)
        {
          if (v10 >= v8)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v19 = (id)gLogObj;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v71 = "nw_nat64_copy_prefixes_from_ipv4only_records";
              id v20 = v19;
              id v21 = "%{public}s too many valid prefixes for WKA1";
              goto LABEL_32;
            }
            goto LABEL_33;
          }
          *(_OWORD *)&v6[16 * v10++] = *(_OWORD *)v78;
        }
LABEL_18:
        if (++v16 == 6) {
          goto LABEL_10;
        }
      }
    }
    __int16 v12 = inet_ntop(30, (const void *)(a1 + 16 * v9), v78, 0x2Eu);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = v11[8];
      BOOL v15 = v78;
      if (!v12) {
        BOOL v15 = "?";
      }
      *(_DWORD *)buf = 136446979;
      __int16 v71 = "nw_nat64_copy_prefixes_from_ipv4only_records";
      __int16 v72 = 1024;
      int v73 = v9;
      __int16 v74 = 2085;
      __int16 v75 = v15;
      __int16 v76 = 1024;
      int v77 = v14;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s v6res[%u] %{sensitive}s has non zero bits 64-71: 0x%x", buf, 0x22u);
    }

LABEL_10:
    ++v9;
  }
  while (v9 != v61);
  if (!(v10 | v67))
  {
    if (v6) {
      free(v6);
    }
    if (v7)
    {
      os_log_type_t v22 = v7;
      goto LABEL_69;
    }
    return 0;
  }
  if (v10 <= v67) {
    size_t v23 = v67;
  }
  else {
    size_t v23 = v10;
  }
  if (!v23)
  {
    int v55 = __nwlog_obj();
    os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136446210;
    *(void *)&v78[4] = "strict_calloc";
    int v56 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v56);
    if (!result)
    {
      free(v56);
      goto LABEL_43;
    }
    goto LABEL_127;
  }
LABEL_43:
  id v24 = malloc_type_calloc(v23, 0x10uLL, 0xEAFB8F1AuLL);
  if (v24) {
    goto LABEL_44;
  }
  int v57 = __nwlog_obj();
  os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t v78 = 136446722;
  *(void *)&v78[4] = "strict_calloc";
  *(_WORD *)&v78[12] = 2048;
  *(void *)&v78[14] = v23;
  __int16 v79 = 2048;
  uint64_t v80 = 16;
  __int16 v58 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v58);
  if (result) {
    goto LABEL_127;
  }
  free(v58);
LABEL_44:
  uint64_t v25 = 0;
  if (v10 && v67)
  {
    uint64_t v26 = 0;
    uint64_t v25 = 0;
    __s2a = (_DWORD *)v24 + 1;
    uint64_t v62 = v10;
    uint64_t v27 = v67;
    do
    {
      uint64_t v28 = 0;
      uint64_t v63 = v26;
      int v29 = &v66[16 * v26];
      do
      {
        size_t v30 = *(unsigned int *)v29;
        if (v30 == LODWORD(v7[v28]) && !memcmp(v29 + 4, (char *)&v7[v28] + 4, *(unsigned int *)v29))
        {
          if (v25)
          {
            BOOL v31 = v7;
            os_log_type_t v32 = v24;
            unsigned int v68 = v25;
            uint64_t v33 = v25;
            unsigned int v34 = __s2a;
            uint64_t v25 = v25;
            while (v30 != *(v34 - 1) || memcmp(v29 + 4, v34, v30))
            {
              v34 += 4;
              if (!--v25)
              {
                id v24 = v32;
                BOOL v7 = v31;
                LODWORD(v25) = v68;
                goto LABEL_50;
              }
            }
            id v24 = v32;
            BOOL v7 = v31;
            uint64_t v25 = v68;
          }
          else
          {
            uint64_t v33 = 0;
LABEL_50:
            v24[v33] = *(_OWORD *)v29;
            uint64_t v25 = (v25 + 1);
          }
        }
        ++v28;
      }
      while (v28 != v27);
      uint64_t v26 = v63 + 1;
    }
    while (v63 + 1 != v62);
  }
  if (v66) {
    free(v66);
  }
  if (v7) {
    free(v7);
  }
  if (v25)
  {
    *int v60 = v24;
  }
  else
  {
    if (v24)
    {
      os_log_type_t v22 = v24;
LABEL_69:
      free(v22);
    }
    return 0;
  }
  return v25;
}

uint64_t nw_nat64_copy_prefixes(unsigned int *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (sNWIsBetweenForkAndExec == 1 && (sNWParentAllowedDispatch & 1) != 0) {
    return 0;
  }
  if (sNWDispatchAllowedNow) {
    goto LABEL_9;
  }
  if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0
    || (getpid(), sandbox_check() == 1))
  {
    sNWDispatchAllowedNow = 1;
    goto LABEL_9;
  }
  if (sNWDispatchAllowedNow != 1) {
    return 0;
  }
LABEL_9:
  if (a2)
  {
    if (gLogDatapath)
    {
      __int16 v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        if (a1) {
          unsigned int v13 = *a1;
        }
        else {
          unsigned int v13 = 0;
        }
        *(_DWORD *)buf = 136446466;
        int v19 = "nw_nat64_copy_prefixes";
        __int16 v20 = 1024;
        LODWORD(v21) = v13;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s Start nw_nat64_copy_prefixes(%u)", buf, 0x12u);
      }
    }
    *a2 = 0;
    BOOL v4 = nw_nat64_copy_prefixes_internal(a1, a2, 0, 0, 0, 0);
    if (gLogDatapath)
    {
      uint64_t v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        int v19 = "nw_nat64_copy_prefixes";
        __int16 v20 = 1024;
        LODWORD(v21) = v4;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s nw_nat64_copy_prefixes returning %d", buf, 0x12u);
      }
    }
    return v4;
  }
  BOOL v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v19 = "nw_nat64_copy_prefixes";
  unsigned int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_nat64_copy_prefixes";
        size_t v11 = "%{public}s called with null out_prefixes";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            int v19 = "nw_nat64_copy_prefixes";
            __int16 v20 = 2082;
            id v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null out_prefixes, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v15) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_nat64_copy_prefixes";
        size_t v11 = "%{public}s called with null out_prefixes, no backtrace";
        goto LABEL_36;
      }
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_nat64_copy_prefixes";
        size_t v11 = "%{public}s called with null out_prefixes, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:
  }
LABEL_38:
  if (v8) {
    free(v8);
  }
  return 0xFFFFFFFFLL;
}

BOOL nw_nat64_copy_prefixes_internal(unsigned int *a1, void *a2, void *a3, DNSServiceRef *a4, _DWORD *a5, void *a6)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  size_t v11 = a3;
  id v12 = a6;
  unsigned int v102 = 0;
  if (a1) {
    unsigned int v102 = *a1;
  }
  id v101 = 0;
  int interface_state_internal = nw_nat64_get_interface_state_internal(&v102, &v101);
  int v14 = interface_state_internal;
  if (a1) {
    *a1 = v102;
  }
  uint64_t v15 = 0;
  switch(interface_state_internal)
  {
    case 1:
      if (!v101)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v43 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v112 = "nw_nat64_copy_prefixes_internal";
        id v37 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(sdRef) = 16;
        LOBYTE(service) = 0;
        if (!__nwlog_fault(v37, &sdRef, &service)) {
          goto LABEL_108;
        }
        if (sdRef == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v44 = (id)gLogObj;
          os_log_type_t v45 = sdRef;
          if (os_log_type_enabled(v44, (os_log_type_t)sdRef))
          {
            *(_DWORD *)buf = 136446210;
            v112 = "nw_nat64_copy_prefixes_internal";
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s Received invalid path", buf, 0xCu);
          }
        }
        else if ((_BYTE)service)
        {
          backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
          BOOL v44 = __nwlog_obj();
          os_log_type_t v59 = sdRef;
          BOOL v60 = os_log_type_enabled(v44, (os_log_type_t)sdRef);
          if (backtrace_string)
          {
            if (v60)
            {
              *(_DWORD *)buf = 136446466;
              v112 = "nw_nat64_copy_prefixes_internal";
              __int16 v113 = 2082;
              *(void *)v114 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v44, v59, "%{public}s Received invalid path, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (v37) {
LABEL_109:
            }
              free(v37);
LABEL_110:
            uint64_t v15 = 0xFFFFFFFFLL;
            goto LABEL_111;
          }
          if (v60)
          {
            *(_DWORD *)buf = 136446210;
            v112 = "nw_nat64_copy_prefixes_internal";
            _os_log_impl(&dword_1830D4000, v44, v59, "%{public}s Received invalid path, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          BOOL v44 = __nwlog_obj();
          os_log_type_t v63 = sdRef;
          if (os_log_type_enabled(v44, (os_log_type_t)sdRef))
          {
            *(_DWORD *)buf = 136446210;
            v112 = "nw_nat64_copy_prefixes_internal";
            _os_log_impl(&dword_1830D4000, v44, v63, "%{public}s Received invalid path, backtrace limit exceeded", buf, 0xCu);
          }
        }

        goto LABEL_108;
      }
      char v16 = (unsigned int *)v101;

      DNSServiceRef sdRef = 0;
      p_DNSServiceRef sdRef = (uint64_t)&sdRef;
      uint64_t v105 = 0x2020000000;
      v106 = 0;
      size_t v17 = malloc_type_calloc(4uLL, 0x10uLL, 0xEAFB8F1AuLL);
      if (v17) {
        goto LABEL_8;
      }
      v90 = __nwlog_obj();
      os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v112 = "strict_calloc";
      __int16 v113 = 2048;
      *(void *)v114 = 4;
      *(_WORD *)&v114[8] = 2048;
      *(void *)&v114[10] = 16;
      v91 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v91);
      if (result) {
        goto LABEL_134;
      }
      free(v91);
LABEL_8:
      v106 = v17;
      size_t v18 = v16[102];
      if (v18)
      {
        **(_DWORD **)(p_sdRef + 24) = v18;
        memcpy((void *)(*(void *)(p_sdRef + 24) + 4), v16 + 98, v18);
        uint64_t v15 = 1;
        size_t v19 = v16[107];
        if (!v19)
        {
LABEL_11:
          size_t v21 = v16[112];
          if (v21)
          {
            uint64_t v22 = 16 * v15;
            *(_DWORD *)(*(void *)(p_sdRef + 24) + v22) = v21;
            memcpy((void *)(*(void *)(p_sdRef + 24) + v22 + 4), v16 + 98, v21);
            uint64_t v15 = (v15 + 1);
          }
          size_t v23 = v16[117];
          if (v23)
          {
            uint64_t v24 = 16 * v15;
            *(_DWORD *)(*(void *)(p_sdRef + 24) + v24) = v23;
            memcpy((void *)(*(void *)(p_sdRef + 24) + v24 + 4), v16 + 98, v23);
            uint64_t v15 = (v15 + 1);
          }
          if (a2)
          {
            uint64_t v25 = *(void **)(p_sdRef + 24);
            if (v15)
            {
              *a2 = v25;
            }
            else if (v25)
            {
              free(v25);
              uint64_t v15 = 0;
              *(void *)(p_sdRef + 24) = 0;
            }
            else
            {
              uint64_t v15 = 0;
            }
          }
          else
          {
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = ___ZL31nw_nat64_copy_prefixes_internalPjPP17nw_nat64_prefix_tPU28objcproto17OS_dispatch_queue8NSObjectPP16_DNSServiceRef_tPKjU13block_pointerFviS1_E_block_invoke;
            block[3] = &unk_1E5244168;
            int v100 = v15;
            id v98 = v12;
            v99 = &sdRef;
            dispatch_async(v11, block);

            uint64_t v15 = 0x80000000;
          }
          _Block_object_dispose(&sdRef, 8);
LABEL_111:

          return v15;
        }
      }
      else
      {
        uint64_t v15 = 0;
        size_t v19 = v16[107];
        if (!v19) {
          goto LABEL_11;
        }
      }
      uint64_t v20 = 16 * v15;
      *(_DWORD *)(*(void *)(p_sdRef + 24) + v20) = v19;
      memcpy((void *)(*(void *)(p_sdRef + 24) + v20 + 4), v16 + 98, v19);
      uint64_t v15 = (v15 + 1);
      goto LABEL_11;
    case 2:
      uint32_t v26 = v102;
      uint64_t v27 = v11;
      id v28 = v12;
      int v29 = v28;
      v96 = v27;
      if (!a2)
      {
        DNSServiceRef sdRef = (DNSServiceRef)MEMORY[0x1E4F143A8];
        p_DNSServiceRef sdRef = 3221225472;
        uint64_t v105 = (uint64_t)___ZL43nw_nat64_copy_prefixes_by_querying_ipv4onlyjPP17nw_nat64_prefix_tPU28objcproto17OS_dispatch_queue8NSObjectPP16_DNSServiceRef_tPKjU13block_pointerFviS0_E_block_invoke;
        v106 = &unk_1E5244190;
        id v107 = v28;
        dispatch_queue_t queue = v27;
        aBlock = &sdRef;
        BOOL v46 = (void **)malloc_type_calloc(0x18uLL, 1uLL, 0xEAFB8F1AuLL);
        if (!v46)
        {
          v92 = __nwlog_obj();
          os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          v112 = "strict_calloc";
          __int16 v113 = 2048;
          *(void *)v114 = 24;
          *(_WORD *)&v114[8] = 2048;
          *(void *)&v114[10] = 1;
          v93 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v93);
          if (result) {
            goto LABEL_134;
          }
          free(v93);
        }
        int v47 = _Block_copy(aBlock);
        __int16 v48 = v46[1];
        v46[1] = v47;

        DNSServiceFlags v49 = 1073844224;
        DNSServiceRef service = 0;
        if (a4) {
          p_DNSServiceRef service = a4;
        }
        else {
          p_DNSServiceRef service = &service;
        }
        if (a5) {
          DNSServiceFlags v49 = *a5 | 0x40019000;
        }
        DNSServiceErrorType AddrInfo = DNSServiceGetAddrInfo(p_service, v49, v26, 2u, "ipv4only.arpa", (DNSServiceGetAddrInfoReply)nw_nat64_getaddrinfo_callback_async, v46);
        if (AddrInfo)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v52 = (id)gLogObj;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            string_for_dns_service_error = nwlog_get_string_for_dns_service_error(AddrInfo);
            *(_DWORD *)buf = 136447490;
            v112 = "nw_nat64_query_ipv4only_records_async";
            __int16 v113 = 1024;
            *(_DWORD *)v114 = v49;
            *(_WORD *)&v114[4] = 1024;
            *(_DWORD *)&v114[6] = v26;
            *(_WORD *)&v114[10] = 2082;
            *(void *)&v114[12] = "ipv4only.arpa";
            *(_WORD *)&v114[20] = 2082;
            *(void *)&v114[22] = string_for_dns_service_error;
            *(_WORD *)v115 = 1024;
            *(_DWORD *)&v115[2] = AddrInfo;
            _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s starting DNS query with flags %#x on ifindex %u for %{public}s failed with error=%{public}s(%d)", buf, 0x32u);
          }

LABEL_49:
          if (service) {
            DNSServiceRefDeallocate(service);
          }
          BOOL v54 = v46[1];
          v46[1] = 0;

          if (*v46) {
            free(*v46);
          }
          free(v46);
          uint64_t v15 = 0xFFFFFFFFLL;
          goto LABEL_89;
        }
        if (a4)
        {
          uint64_t v62 = __nwlog_obj();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v112 = "nw_nat64_query_ipv4only_records_async";
            __int16 v113 = 1024;
            *(_DWORD *)v114 = v26;
            *(_WORD *)&v114[4] = 2082;
            *(void *)&v114[6] = "ipv4only.arpa";
            _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEBUG, "%{public}s started DNS query with custom sdRef on ifindex %u for %{public}s successfully", buf, 0x1Cu);
          }

LABEL_88:
          uint64_t v15 = 0x80000000;
LABEL_89:

          goto LABEL_90;
        }
        DNSServiceErrorType v64 = DNSServiceSetDispatchQueue(service, queue);
        BOOL v65 = __nwlog_obj();
        BOOL v66 = v65;
        if (!v64)
        {
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v112 = "nw_nat64_query_ipv4only_records_async";
            __int16 v113 = 1024;
            *(_DWORD *)v114 = v26;
            *(_WORD *)&v114[4] = 2082;
            *(void *)&v114[6] = "ipv4only.arpa";
            _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s started DNS query on ifindex %u for %{public}s successfully", buf, 0x1Cu);
          }

          goto LABEL_88;
        }
        DNSServiceRef v67 = service;
        unsigned int v68 = nwlog_get_string_for_dns_service_error(v64);
        *(_DWORD *)buf = 136447234;
        v112 = "nw_nat64_query_ipv4only_records_async";
        __int16 v113 = 2048;
        *(void *)v114 = v67;
        *(_WORD *)&v114[8] = 2048;
        *(void *)&v114[10] = queue;
        *(_WORD *)&v114[18] = 2082;
        *(void *)&v114[20] = v68;
        *(_WORD *)&v114[28] = 1024;
        *(_DWORD *)v115 = v64;
        int v69 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v108 = 0;
        if (__nwlog_fault(v69, &type, &v108))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            int v70 = v64;
            __int16 v71 = __nwlog_obj();
            os_log_type_t v72 = type;
            if (os_log_type_enabled(v71, type))
            {
              DNSServiceRef v73 = service;
              __int16 v74 = nwlog_get_string_for_dns_service_error(v70);
              *(_DWORD *)buf = 136447234;
              v112 = "nw_nat64_query_ipv4only_records_async";
              __int16 v113 = 2048;
              *(void *)v114 = v73;
              *(_WORD *)&v114[8] = 2048;
              *(void *)&v114[10] = queue;
              *(_WORD *)&v114[18] = 2082;
              *(void *)&v114[20] = v74;
              *(_WORD *)&v114[28] = 1024;
              *(_DWORD *)v115 = v70;
              _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s DNSServiceSetDispatchQueue(%p,%p) error=%{public}s(%d) failed", buf, 0x30u);
            }
          }
          else
          {
            if (v108)
            {
              __int16 v76 = (char *)__nw_create_backtrace_string();
              int v77 = __nwlog_obj();
              os_log_type_t v78 = type;
              BOOL v79 = os_log_type_enabled(v77, type);
              if (v76)
              {
                if (v79)
                {
                  DNSServiceRef v80 = service;
                  uint64_t v81 = nwlog_get_string_for_dns_service_error(v64);
                  *(_DWORD *)buf = 136447490;
                  v112 = "nw_nat64_query_ipv4only_records_async";
                  __int16 v113 = 2048;
                  *(void *)v114 = v80;
                  *(_WORD *)&v114[8] = 2048;
                  *(void *)&v114[10] = queue;
                  *(_WORD *)&v114[18] = 2082;
                  *(void *)&v114[20] = v81;
                  *(_WORD *)&v114[28] = 1024;
                  *(_DWORD *)v115 = v64;
                  *(_WORD *)&v115[4] = 2082;
                  v116 = v76;
                  _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s DNSServiceSetDispatchQueue(%p,%p) error=%{public}s(%d) failed, dumping backtrace:%{public}s", buf, 0x3Au);
                }

                free(v76);
              }
              else
              {
                if (v79)
                {
                  DNSServiceRef v86 = service;
                  v87 = nwlog_get_string_for_dns_service_error(v64);
                  *(_DWORD *)buf = 136447234;
                  v112 = "nw_nat64_query_ipv4only_records_async";
                  __int16 v113 = 2048;
                  *(void *)v114 = v86;
                  *(_WORD *)&v114[8] = 2048;
                  *(void *)&v114[10] = queue;
                  *(_WORD *)&v114[18] = 2082;
                  *(void *)&v114[20] = v87;
                  *(_WORD *)&v114[28] = 1024;
                  *(_DWORD *)v115 = v64;
                  _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s DNSServiceSetDispatchQueue(%p,%p) error=%{public}s(%d) failed, no backtrace", buf, 0x30u);
                }
              }
              goto LABEL_126;
            }
            int v82 = v64;
            __int16 v71 = __nwlog_obj();
            os_log_type_t v83 = type;
            if (os_log_type_enabled(v71, type))
            {
              DNSServiceRef v84 = service;
              v85 = nwlog_get_string_for_dns_service_error(v82);
              *(_DWORD *)buf = 136447234;
              v112 = "nw_nat64_query_ipv4only_records_async";
              __int16 v113 = 2048;
              *(void *)v114 = v84;
              *(_WORD *)&v114[8] = 2048;
              *(void *)&v114[10] = queue;
              *(_WORD *)&v114[18] = 2082;
              *(void *)&v114[20] = v85;
              *(_WORD *)&v114[28] = 1024;
              *(_DWORD *)v115 = v82;
              _os_log_impl(&dword_1830D4000, v71, v83, "%{public}s DNSServiceSetDispatchQueue(%p,%p) error=%{public}s(%d) failed, backtrace limit exceeded", buf, 0x30u);
            }
          }
        }
LABEL_126:
        if (v69) {
          free(v69);
        }
        goto LABEL_49;
      }
      size_t v30 = (void **)malloc_type_calloc(0x10uLL, 1uLL, 0xEAFB8F1AuLL);
      if (v30) {
        goto LABEL_20;
      }
      v88 = __nwlog_obj();
      os_log_type_enabled(v88, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v112 = "strict_calloc";
      __int16 v113 = 2048;
      *(void *)v114 = 16;
      *(_WORD *)&v114[8] = 2048;
      *(void *)&v114[10] = 1;
      v89 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v89);
      if (!result)
      {
        free(v89);
LABEL_20:
        DNSServiceRef sdRef = 0;
        DNSServiceErrorType v31 = DNSServiceGetAddrInfo(&sdRef, 0x40019000u, v26, 2u, "ipv4only.arpa", (DNSServiceGetAddrInfoReply)nw_nat64_getaddrinfo_callback_sync, v30);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        uint64_t v33 = v32;
        if (v31)
        {
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            goto LABEL_67;
          }
          unsigned int v34 = nwlog_get_string_for_dns_service_error(v31);
          *(_DWORD *)buf = 136447234;
          v112 = "nw_nat64_copy_ipv4only_records";
          __int16 v113 = 1024;
          *(_DWORD *)v114 = v26;
          *(_WORD *)&v114[4] = 2082;
          *(void *)&v114[6] = "ipv4only.arpa";
          *(_WORD *)&v114[14] = 2082;
          *(void *)&v114[16] = v34;
          *(_WORD *)&v114[24] = 1024;
          *(_DWORD *)&v114[26] = v31;
          os_log_type_t v35 = "%{public}s starting DNS query on ifindex %u for %{public}s failed with error=%{public}s(%d)";
        }
        else
        {
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v112 = "nw_nat64_copy_ipv4only_records";
            __int16 v113 = 1024;
            *(_DWORD *)v114 = v26;
            *(_WORD *)&v114[4] = 2082;
            *(void *)&v114[6] = "ipv4only.arpa";
            _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s started DNS query on ifindex %u for %{public}s successfully", buf, 0x1Cu);
          }

          do
          {
            if (*((unsigned char *)v30 + 12)) {
              goto LABEL_68;
            }
          }
          while (!DNSServiceProcessResult(sdRef));
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v33 = (id)gLogObj;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            goto LABEL_67;
          }
          uint64_t v55 = DNSServiceErrorCodeToString();
          *(_DWORD *)buf = 136447234;
          v112 = "nw_nat64_copy_ipv4only_records";
          int v56 = "NoError";
          if (v55) {
            int v56 = (const char *)v55;
          }
          __int16 v113 = 1024;
          *(_DWORD *)v114 = v26;
          *(_WORD *)&v114[4] = 2082;
          *(void *)&v114[6] = "ipv4only.arpa";
          *(_WORD *)&v114[14] = 2082;
          *(void *)&v114[16] = v56;
          *(_WORD *)&v114[24] = 1024;
          *(_DWORD *)&v114[26] = 0;
          os_log_type_t v35 = "%{public}s DNSServiceProcessResult on ifindex %u for %{public}s failed with error=%{public}s(%d)";
        }
        _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_ERROR, v35, buf, 0x2Cu);
LABEL_67:

LABEL_68:
        uint64_t v15 = *((unsigned int *)v30 + 2);
        int v57 = *v30;
        free(v30);
        if (sdRef) {
          DNSServiceRefDeallocate(sdRef);
        }
        if ((int)v15 >= 1)
        {
          uint64_t v15 = nw_nat64_copy_prefixes_from_ipv4only_records((uint64_t)v57, v15, a2);
          if (v57) {
            free(v57);
          }
        }
LABEL_90:

        goto LABEL_111;
      }
LABEL_134:
      __break(1u);
      return result;
    case 3:
      goto LABEL_111;
    case 4:
      goto LABEL_110;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v36 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v112 = "nw_nat64_copy_prefixes_internal";
      __int16 v113 = 1024;
      *(_DWORD *)v114 = v14;
      id v37 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(sdRef) = 16;
      LOBYTE(service) = 0;
      if (!__nwlog_fault(v37, &sdRef, &service)) {
        goto LABEL_108;
      }
      if (sdRef == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v38 = (id)gLogObj;
        os_log_type_t v39 = sdRef;
        if (os_log_type_enabled(v38, (os_log_type_t)sdRef))
        {
          *(_DWORD *)buf = 136446466;
          v112 = "nw_nat64_copy_prefixes_internal";
          __int16 v113 = 1024;
          *(_DWORD *)v114 = v14;
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s Received unknown state %d", buf, 0x12u);
        }
      }
      else if ((_BYTE)service)
      {
        __int16 v40 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v38 = (id)gLogObj;
        os_log_type_t v41 = sdRef;
        BOOL v42 = os_log_type_enabled(v38, (os_log_type_t)sdRef);
        if (v40)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446722;
            v112 = "nw_nat64_copy_prefixes_internal";
            __int16 v113 = 1024;
            *(_DWORD *)v114 = v14;
            *(_WORD *)&v114[4] = 2082;
            *(void *)&v114[6] = v40;
            _os_log_impl(&dword_1830D4000, v38, v41, "%{public}s Received unknown state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v40);
          if (v37) {
            goto LABEL_109;
          }
          goto LABEL_110;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v112 = "nw_nat64_copy_prefixes_internal";
          __int16 v113 = 1024;
          *(_DWORD *)v114 = v14;
          _os_log_impl(&dword_1830D4000, v38, v41, "%{public}s Received unknown state %d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v38 = (id)gLogObj;
        os_log_type_t v61 = sdRef;
        if (os_log_type_enabled(v38, (os_log_type_t)sdRef))
        {
          *(_DWORD *)buf = 136446466;
          v112 = "nw_nat64_copy_prefixes_internal";
          __int16 v113 = 1024;
          *(_DWORD *)v114 = v14;
          _os_log_impl(&dword_1830D4000, v38, v61, "%{public}s Received unknown state %d, backtrace limit exceeded", buf, 0x12u);
        }
      }

LABEL_108:
      if (!v37) {
        goto LABEL_110;
      }
      goto LABEL_109;
  }
}

void sub_183ACBBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void ___ZL31nw_nat64_copy_prefixes_internalPjPP17nw_nat64_prefix_tPU28objcproto17OS_dispatch_queue8NSObjectPP16_DNSServiceRef_tPKjU13block_pointerFviS1_E_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  unsigned int v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void ___ZL43nw_nat64_copy_prefixes_by_querying_ipv4onlyjPP17nw_nat64_prefix_tPU28objcproto17OS_dispatch_queue8NSObjectPP16_DNSServiceRef_tPKjU13block_pointerFviS0_E_block_invoke(uint64_t a1, signed int a2, uint64_t a3)
{
  if (a2 <= 0)
  {
    BOOL v4 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = 0;
    nw_nat64_copy_prefixes_from_ipv4only_records(a3, a2, &v5);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    if (v5) {
      free(v5);
    }
  }
}

void nw_nat64_getaddrinfo_callback_async(_DNSServiceRef_t *a1, int a2, int a3, int a4, const char *a5, const sockaddr *a6, int a7, int *a8)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v15 = (id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
  }
  else
  {
    int v16 = gLogFDOverride;

    if (v16 == -1) {
      goto LABEL_7;
    }
  }
  nw_endpoint_t address = nw_endpoint_create_address(a6);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v18 = (id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136448002;
    DNSServiceErrorType v31 = "nw_nat64_getaddrinfo_callback_async";
    __int16 v32 = 1024;
    *(_DWORD *)uint64_t v33 = a2;
    *(_WORD *)&void v33[4] = 1024;
    *(_DWORD *)&v33[6] = a3;
    __int16 v34 = 2082;
    string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a4);
    __int16 v36 = 1024;
    int v37 = a4;
    __int16 v38 = 2082;
    os_log_type_t v39 = a5;
    __int16 v40 = 2082;
    description = nw_endpoint_get_description(address);
    __int16 v42 = 1024;
    int v43 = a7;
    _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%{public}s addr=%{public}s ttl=%d", buf, 0x42u);
  }

LABEL_7:
  if (!a4 && (a2 & 2) != 0 && a6 && a6->sa_family == 30)
  {
    uint64_t v21 = a8[4];
    uint64_t v22 = v21 + 1;
    a8[4] = v21 + 1;
    if (v21 == -1)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      DNSServiceErrorType v31 = "_strict_reallocf";
      uint32_t v26 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v26)) {
        goto LABEL_25;
      }
      free(v26);
    }
    size_t v23 = 28 * v22;
    uint64_t v24 = (sockaddr *)reallocf(*(void **)a8, v23);
    if (v24)
    {
LABEL_20:
      *(void *)a8 = v24;
      v24[a8[4] - 1] = *(sockaddr *)&a6->sa_data[6];
      goto LABEL_8;
    }
    uint64_t v27 = __nwlog_obj();
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    DNSServiceErrorType v31 = "_strict_reallocf";
    __int16 v32 = 2048;
    *(void *)uint64_t v33 = v23;
    id v28 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v28))
    {
      free(v28);
      goto LABEL_20;
    }
LABEL_25:
    __break(1u);
    return;
  }
LABEL_8:
  if ((a2 & 1) == 0)
  {
    if (a1) {
      DNSServiceRefDeallocate(a1);
    }
    (*(void (**)(void, void))(*((void *)a8 + 1) + 16))(*((void *)a8 + 1), a8[4]);
    size_t v19 = (void *)*((void *)a8 + 1);
    *((void *)a8 + 1) = 0;

    uint64_t v20 = (void *)*((void *)a8 + 1);
    *((void *)a8 + 1) = 0;

    if (*(void *)a8) {
      free(*(void **)a8);
    }
    free(a8);
  }
}

void sub_183ACC11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_nat64_getaddrinfo_callback_sync(_DNSServiceRef_t *a1, int a2, int a3, int a4, const char *a5, const sockaddr *a6, int a7, int *a8)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v15 = (id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
  }
  else
  {
    int v16 = gLogFDOverride;

    if (v16 == -1) {
      goto LABEL_7;
    }
  }
  nw_endpoint_t address = nw_endpoint_create_address(a6);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v18 = (id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136448002;
    id v28 = "nw_nat64_getaddrinfo_callback_sync";
    __int16 v29 = 1024;
    *(_DWORD *)size_t v30 = a2;
    *(_WORD *)&v30[4] = 1024;
    *(_DWORD *)&v30[6] = a3;
    __int16 v31 = 2082;
    string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a4);
    __int16 v33 = 1024;
    int v34 = a4;
    __int16 v35 = 2082;
    __int16 v36 = a5;
    __int16 v37 = 2082;
    description = nw_endpoint_get_description(address);
    __int16 v39 = 1024;
    int v40 = a7;
    _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%{public}s addr=%{public}s ttl=%d", buf, 0x42u);
  }

LABEL_7:
  if (a4 || (a2 & 2) == 0 || !a6 || a6->sa_family != 30) {
    goto LABEL_8;
  }
  uint64_t v19 = a8[2];
  uint64_t v20 = v19 + 1;
  a8[2] = v19 + 1;
  if (v19 == -1)
  {
    size_t v23 = __nwlog_obj();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    id v28 = "_strict_reallocf";
    uint64_t v24 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v24)) {
      goto LABEL_21;
    }
    free(v24);
  }
  uint64_t v21 = 28 * v20;
  uint64_t v22 = (sockaddr *)reallocf(*(void **)a8, 28 * v20);
  if (!v22)
  {
    uint64_t v25 = __nwlog_obj();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    id v28 = "_strict_reallocf";
    __int16 v29 = 2048;
    *(void *)size_t v30 = v21;
    uint32_t v26 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v26))
    {
      free(v26);
      goto LABEL_16;
    }
LABEL_21:
    __break(1u);
    return;
  }
LABEL_16:
  *(void *)a8 = v22;
  v22[a8[2] - 1] = *(sockaddr *)&a6->sa_data[6];
LABEL_8:
  if ((a2 & 1) == 0) {
    *((unsigned char *)a8 + 12) = 1;
  }
}

void sub_183ACC48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_nat64_synthesize(unsigned int *a1, __int16 *a2, void **a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (sNWIsBetweenForkAndExec == 1 && (sNWParentAllowedDispatch & 1) != 0) {
    return 0;
  }
  if ((sNWDispatchAllowedNow & 1) == 0)
  {
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0
      || (getpid(), sandbox_check() == 1))
    {
      sNWDispatchAllowedNow = 1;
    }
    else if (sNWDispatchAllowedNow != 1)
    {
      return 0;
    }
  }
  if (!a2)
  {
    uint64_t v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v34 = "nw_nat64_synthesize";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst[0]) = 16;
    LOBYTE(v32) = 0;
    if (__nwlog_fault(v20, __dst, &v32))
    {
      if (LOBYTE(__dst[0]) == 17)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = __dst[0];
        if (os_log_type_enabled(v21, __dst[0]))
        {
          *(_DWORD *)buf = 136446210;
          int v34 = "nw_nat64_synthesize";
          size_t v23 = "%{public}s called with null ipv4";
LABEL_59:
          _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
        }
LABEL_60:

        goto LABEL_61;
      }
      if (!(_BYTE)v32)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = __dst[0];
        if (os_log_type_enabled(v21, __dst[0]))
        {
          *(_DWORD *)buf = 136446210;
          int v34 = "nw_nat64_synthesize";
          size_t v23 = "%{public}s called with null ipv4, backtrace limit exceeded";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = __dst[0];
      BOOL v28 = os_log_type_enabled(v21, __dst[0]);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          int v34 = "nw_nat64_synthesize";
          size_t v23 = "%{public}s called with null ipv4, no backtrace";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if (!v28) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446466;
      int v34 = "nw_nat64_synthesize";
      __int16 v35 = 2082;
      *(void *)__int16 v36 = backtrace_string;
      __int16 v29 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
LABEL_61:
    if (v20) {
      free(v20);
    }
    return 0xFFFFFFFFLL;
  }
  if (!a3)
  {
    uint64_t v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v34 = "nw_nat64_synthesize";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst[0]) = 16;
    LOBYTE(v32) = 0;
    if (__nwlog_fault(v20, __dst, &v32))
    {
      if (LOBYTE(__dst[0]) == 17)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = __dst[0];
        if (os_log_type_enabled(v21, __dst[0]))
        {
          *(_DWORD *)buf = 136446210;
          int v34 = "nw_nat64_synthesize";
          size_t v23 = "%{public}s called with null out_ipv6_addrs";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if (!(_BYTE)v32)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = __dst[0];
        if (os_log_type_enabled(v21, __dst[0]))
        {
          *(_DWORD *)buf = 136446210;
          int v34 = "nw_nat64_synthesize";
          size_t v23 = "%{public}s called with null out_ipv6_addrs, backtrace limit exceeded";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = __dst[0];
      BOOL v30 = os_log_type_enabled(v21, __dst[0]);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          int v34 = "nw_nat64_synthesize";
          size_t v23 = "%{public}s called with null out_ipv6_addrs, no backtrace";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if (!v30) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446466;
      int v34 = "nw_nat64_synthesize";
      __int16 v35 = 2082;
      *(void *)__int16 v36 = backtrace_string;
      __int16 v29 = "%{public}s called with null out_ipv6_addrs, dumping backtrace:%{public}s";
LABEL_49:
      _os_log_impl(&dword_1830D4000, v21, v22, v29, buf, 0x16u);
LABEL_50:

      free(backtrace_string);
      goto LABEL_61;
    }
    goto LABEL_61;
  }
  __int16 v32 = 0;
  uint64_t v6 = nw_nat64_copy_prefixes(a1, &v32);
  uint64_t v7 = v6;
  if ((int)v6 < 1) {
    return v7;
  }
  uint64_t v8 = v6;
  uint64_t v9 = malloc_type_calloc(v6, 0x10uLL, 0xEAFB8F1AuLL);
  if (!v9)
  {
    uint64_t v25 = __nwlog_obj();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    int v34 = "strict_calloc";
    __int16 v35 = 2048;
    *(void *)__int16 v36 = v8;
    *(_WORD *)&v36[8] = 2048;
    *(void *)__int16 v37 = 16;
    uint32_t v26 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v26);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v26);
  }
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  *a3 = v9;
  do
  {
    if (nw_nat64_synthesize_v6((char *)v32 + v10, a2, (char *)*a3 + 16 * (int)v7))
    {
      uint64_t v7 = (v7 + 1);
      goto LABEL_15;
    }
    if (*(_DWORD *)((char *)v32 + v10) > 0xCu)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v17 = *(_DWORD *)a2;
        *(_DWORD *)buf = 136446466;
        int v34 = "nw_nat64_synthesize";
        __int16 v35 = 1024;
        *(_DWORD *)__int16 v36 = v17;
        int v14 = v11;
        uint64_t v15 = "%{public}s nw_nat64_synthesize_v6 for %{network:in_addr}d";
        uint32_t v16 = 18;
        goto LABEL_22;
      }
    }
    else
    {
      __dst[0] = 0;
      __dst[1] = 0;
      memcpy(__dst, (char *)v32 + v10 + 4, *(unsigned int *)((char *)v32 + v10));
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = *(_DWORD *)a2;
        int v13 = 8 * *(_DWORD *)((char *)v32 + v10);
        *(_DWORD *)buf = 136447234;
        int v34 = "nw_nat64_synthesize";
        __int16 v35 = 1024;
        *(_DWORD *)__int16 v36 = v12;
        *(_WORD *)&v36[4] = 1040;
        *(_DWORD *)&v36[6] = 16;
        *(_WORD *)__int16 v37 = 2096;
        *(void *)&v37[2] = __dst;
        __int16 v38 = 1024;
        int v39 = v13;
        int v14 = v11;
        uint64_t v15 = "%{public}s nw_nat64_synthesize_v6 for %{network:in_addr}d from %{network:in6_addr}.16P/%d";
        uint32_t v16 = 40;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
      }
    }

LABEL_15:
    v10 += 16;
    --v8;
  }
  while (v8);
  if (v32)
  {
    free(v32);
    __int16 v32 = 0;
  }
  if (!v7)
  {
    if (*a3)
    {
      free(*a3);
      uint64_t v7 = 0;
      *a3 = 0;
      return v7;
    }
    return 0;
  }
  return v7;
}

uint64_t nw_nat64_copy_prefixes_async(unsigned int *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  id v6 = a3;
  nw_allow_use_of_dispatch_internal();
  if (v5)
  {
    if (v6)
    {
      if (gLogDatapath)
      {
        uint32_t v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          if (a1) {
            unsigned int v17 = *a1;
          }
          else {
            unsigned int v17 = 0;
          }
          *(_DWORD *)buf = 136446466;
          __int16 v31 = "nw_nat64_copy_prefixes_async";
          __int16 v32 = 1024;
          LODWORD(v33) = v17;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s Start nw_nat64_copy_prefixes_async(%u)", buf, 0x12u);
        }
      }
      BOOL v7 = nw_nat64_copy_prefixes_internal(a1, 0, v5, 0, 0, v6);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nw_nat64_copy_prefixes_async_block_invoke;
      block[3] = &unk_1E524B020;
      BOOL v27 = v7;
      id v26 = v6;
      dispatch_async(v5, block);

      uint64_t v8 = 1;
      goto LABEL_5;
    }
    int v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v31 = "nw_nat64_copy_prefixes_async";
    size_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null block", buf, 0xCu);
        }
LABEL_43:

        goto LABEL_44;
      }
      if (!v28)
      {
        int v12 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null block, no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v31 = "nw_nat64_copy_prefixes_async";
        __int16 v32 = 2082;
        __int16 v33 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v31 = "nw_nat64_copy_prefixes_async";
    size_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null queue", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (!v28)
      {
        int v12 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v31 = "nw_nat64_copy_prefixes_async";
        __int16 v32 = 2082;
        __int16 v33 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_28:

      free(backtrace_string);
    }
  }
LABEL_44:
  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0;
LABEL_5:

  return v8;
}

void sub_183ACD1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_nat64_copy_prefixes_async_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    unsigned int v3 = __nwlog_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(_DWORD *)(a1 + 40);
      int v5 = 136446466;
      id v6 = "nw_nat64_copy_prefixes_async_block_invoke";
      __int16 v7 = 1024;
      int v8 = v4;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s nw_nat64_copy_prefixes_async returning %d", (uint8_t *)&v5, 0x12u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t nw_nat64_copy_prefixes_async_override_dns(unsigned int *a1, void *a2, DNSServiceRef *a3, _DWORD *a4, void *a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  id v10 = a5;
  nw_allow_use_of_dispatch_internal();
  if (v9)
  {
    if (v10)
    {
      if (gLogDatapath)
      {
        BOOL v20 = __nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          if (a1) {
            unsigned int v21 = *a1;
          }
          else {
            unsigned int v21 = 0;
          }
          *(_DWORD *)buf = 136446466;
          __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
          __int16 v36 = 1024;
          LODWORD(v37) = v21;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Start nw_nat64_copy_prefixes_async_override_dns(%u)", buf, 0x12u);
        }
      }
      BOOL v11 = nw_nat64_copy_prefixes_internal(a1, 0, v9, a3, a4, v10);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nw_nat64_copy_prefixes_async_override_dns_block_invoke;
      block[3] = &unk_1E524B020;
      id v30 = v10;
      BOOL v31 = v11;
      dispatch_async(v9, block);

      uint64_t v12 = 1;
      goto LABEL_5;
    }
    size_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint32_t v16 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null block", buf, 0xCu);
        }
LABEL_43:

        goto LABEL_44;
      }
      if (!v32)
      {
        uint32_t v16 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint32_t v16 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null block, no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
        __int16 v36 = 2082;
        __int16 v37 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_28;
    }
  }
  else
  {
    int v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint32_t v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null queue", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (!v32)
      {
        uint32_t v16 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint32_t v16 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v35 = "nw_nat64_copy_prefixes_async_override_dns";
        __int16 v36 = 2082;
        __int16 v37 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_28:

      free(backtrace_string);
    }
  }
LABEL_44:
  if (v15) {
    free(v15);
  }
  uint64_t v12 = 0;
LABEL_5:

  return v12;
}

void sub_183ACD88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_nat64_copy_prefixes_async_override_dns_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
}

uint64_t nw_nat64_does_interface_index_support_nat64(unsigned int a1)
{
  unsigned int v2 = a1;
  return (3u >> ((nw_nat64_get_interface_state_internal(&v2, 0) - 1) & 0xF)) & 1;
}

NWConcrete_nw_nat64_prefixes_resolver *nw_nat64_prefixes_resolver_create(void *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v2 = a1;
  unsigned int v3 = [NWConcrete_nw_nat64_prefixes_resolver alloc];
  id v4 = v2;
  if (!v3) {
    goto LABEL_31;
  }
  v33.receiver = v3;
  v33.super_class = (Class)NWConcrete_nw_nat64_prefixes_resolver;
  int v5 = (id *)objc_msgSendSuper2(&v33, sel_init);
  id v6 = v5;
  if (!v5)
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v24, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
            __int16 v36 = 2082;
            __int16 v37 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (v24) {
      free(v24);
    }
    goto LABEL_30;
  }
  *((_DWORD *)v5 + 3) = 0;
  objc_storeStrong(v5 + 2, a1);
  v6[6] = 0;
  *((_DWORD *)v6 + 26) = 0;
  id v7 = v6[12];
  v6[11] = 0;
  v6[12] = 0;

  if (v4) {
    nw_parameters_t v8 = (nw_parameters_t)v4;
  }
  else {
    nw_parameters_t v8 = nw_parameters_create();
  }
  id v9 = v6[2];
  v6[2] = v8;

  id v10 = nw_parameters_copy_context(v6[2]);
  id v11 = v6[3];
  v6[3] = v10;

  if (nw_context_is_inline(v6[3]))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v13, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v14 = (id)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Cannot use nw_nat64_prefixes_resolver on inline contexts", buf, 0xCu);
        }
      }
      else if (v31)
      {
        size_t v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v14 = (id)gLogObj;
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v14, type);
        if (v18)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
            __int16 v36 = 2082;
            __int16 v37 = v18;
            _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s Cannot use nw_nat64_prefixes_resolver on inline contexts, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v18);
          if (!v13) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s Cannot use nw_nat64_prefixes_resolver on inline contexts, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v14 = (id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "-[NWConcrete_nw_nat64_prefixes_resolver initWithParameters:]";
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s Cannot use nw_nat64_prefixes_resolver on inline contexts, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v13)
    {
LABEL_29:

LABEL_30:
      unsigned int v3 = 0;
      goto LABEL_31;
    }
LABEL_28:
    free(v13);
    goto LABEL_29;
  }
  nw_interface_t v16 = nw_parameters_copy_required_interface((nw_parameters_t)v6[2]);
  nw_interface_t v17 = v16;
  if (v16) {
    *((_DWORD *)v6 + 3) = v16[1].isa;
  }
  unsigned int v3 = v6;

LABEL_31:
  return v3;
}

void sub_183ACDF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_nat64_prefixes_resolver_set_queue(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    objc_storeStrong((id *)v3 + 10, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  nw_interface_t v16 = "nw_nat64_prefixes_resolver_set_queue";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_interface_t v16 = "nw_nat64_prefixes_resolver_set_queue";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          nw_interface_t v16 = "nw_nat64_prefixes_resolver_set_queue";
          __int16 v17 = 2082;
          size_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        nw_interface_t v16 = "nw_nat64_prefixes_resolver_set_queue";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_interface_t v16 = "nw_nat64_prefixes_resolver_set_queue";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_nat64_prefixes_resolver_set_update_handler(void *a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_41:
        free(v12);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v7)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v5 + 2);
    id v9 = _Block_copy(v8);
    os_log_type_t v10 = (void *)*((void *)v5 + 8);
    *((void *)v5 + 8) = v9;

    if (v6) {
      objc_storeStrong((id *)v5 + 10, a2);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 2);
    goto LABEL_6;
  }
  os_log_type_t v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v12, &type, &v25)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null update_handler", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v25)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null update_handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v20 = (char *)__nw_create_backtrace_string();
  char v13 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null update_handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_nat64_prefixes_resolver_set_update_handler";
    __int16 v29 = 2082;
    os_log_type_t v30 = v20;
    _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null update_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

void nw_nat64_prefixes_resolver_set_cancel_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    os_unfair_lock_lock(v3 + 2);
    id v5 = _Block_copy(v4);
    id v6 = *(void **)&v3[18]._os_unfair_lock_opaque;
    *(void *)&v3[18]._uint32_t os_unfair_lock_opaque = v5;

    os_unfair_lock_unlock(v3 + 2);
    goto LABEL_3;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_nat64_prefixes_resolver_set_cancel_handler";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_nat64_prefixes_resolver_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_nat64_prefixes_resolver_set_cancel_handler";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_nat64_prefixes_resolver_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_nat64_prefixes_resolver_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void nw_nat64_prefixes_resolver_start(void *a1)
{
  *(void *)&v47[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_allow_use_of_dispatch_internal();
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
    if (!*((void *)v1 + 8))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v2 = (id)gLogObj;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s The nat64 prefixes resolver's handler is not set. You must set this resolver's handler using nw_nat64_prefixes_resolver_set_update_handler() in order to successfully start it.", buf, 0xCu);
      }
      goto LABEL_13;
    }
    if (!*((void *)v1 + 10))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v2 = (id)gLogObj;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s The nat64 prefixes resolver's client_queue is not set. You must set this resolver's client_queue using nw_nat64_prefixes_resolver_set_update_handler() in order to successfully start it.", buf, 0xCu);
      }
      goto LABEL_13;
    }
    if (*((void *)v1 + 6))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v2 = (id)gLogObj;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s The nat64 prefixes resolver has already been started.", buf, 0xCu);
      }
LABEL_13:

      goto LABEL_52;
    }
    id v3 = nw_parameters_create();
    if (v3)
    {
      unsigned int required_interface_index = nw_parameters_get_required_interface_index(*((void **)v1 + 2));
      unsigned int v5 = required_interface_index;
      if (required_interface_index)
      {
        id v6 = nw_interface_create_with_index(required_interface_index);
        if (!v6)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (id)gLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
            __int16 v46 = 1024;
            *(_DWORD *)int v47 = v5;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s nw_interface_create_with_index failed for index %u", buf, 0x12u);
          }

          goto LABEL_51;
        }
        nw_parameters_require_interface(v3, &v6->super);
      }
      if (nw_parameters_get_required_address_family(*((void **)v1 + 2)))
      {
        nw_nat64_prefixes_resolver_start_dns_query_locked((NWConcrete_nw_nat64_prefixes_resolver *)v1);
LABEL_33:
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
LABEL_51:

        goto LABEL_52;
      }
      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, v3);
      char v15 = (void *)*((void *)v1 + 12);
      *((void *)v1 + 12) = evaluator_for_endpoint;

      os_log_type_t v16 = (void *)*((void *)v1 + 12);
      if (v16)
      {
        nw_path_evaluator_set_logging(v16);
        __int16 v17 = (void *)*((void *)v1 + 12);
        os_log_type_t v18 = (void *)*((void *)v1 + 10);
        v40[0] = MEMORY[0x1E4F143A8];
        v40[1] = 3221225472;
        v40[2] = __nw_nat64_prefixes_resolver_start_block_invoke;
        v40[3] = &unk_1E524AEE0;
        id v19 = v1;
        id v41 = v19;
        nw_path_evaluator_set_update_handler(v17, v18, v40);
        BOOL v20 = nw_path_evaluator_copy_path(*((os_unfair_lock_s **)v1 + 12));
        nw_nat64_prefixes_resolver_path_update_callback_locked(v19, v20);

        goto LABEL_33;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
      os_log_type_t v23 = __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
      __int16 v46 = 1024;
      *(_DWORD *)int v47 = v5;
      os_log_type_t v24 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (!__nwlog_fault(v24, &type, &v42)) {
        goto LABEL_64;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          __int16 v46 = 1024;
          *(_DWORD *)int v47 = v5;
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed", buf, 0x12u);
        }
      }
      else if (v42)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        char v25 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
            __int16 v46 = 1024;
            *(_DWORD *)int v47 = v5;
            v47[2] = 2082;
            *(void *)&v47[3] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v29, "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          __int16 v46 = 1024;
          *(_DWORD *)int v47 = v5;
          _os_log_impl(&dword_1830D4000, v25, v29, "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        char v25 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          __int16 v46 = 1024;
          *(_DWORD *)int v47 = v5;
          _os_log_impl(&dword_1830D4000, v25, v31, "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, backtrace limit exceeded", buf, 0x12u);
        }
      }

LABEL_64:
      if (!v24) {
        goto LABEL_51;
      }
      os_log_type_t v27 = (char *)v24;
      goto LABEL_50;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
    os_log_type_t v8 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v8, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }
      else if (v42)
      {
        BOOL v11 = (char *)__nw_create_backtrace_string();
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
            __int16 v46 = 2082;
            *(void *)int v47 = v11;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          if (!v8) {
            goto LABEL_51;
          }
LABEL_49:
          os_log_type_t v27 = (char *)v8;
LABEL_50:
          free(v27);
          goto LABEL_51;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v9 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          _os_log_impl(&dword_1830D4000, v9, v22, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v8) {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  char v32 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
  objc_super v33 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (__nwlog_fault(v33, &type, &v42))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v42)
    {
      __int16 v36 = (char *)__nw_create_backtrace_string();
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v34, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          __int16 v46 = 2082;
          *(void *)int v47 = v36;
          _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
        goto LABEL_82;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_82:
  if (v33) {
    free(v33);
  }
LABEL_52:
}

void sub_183ACF42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_nat64_prefixes_resolver_start_block_invoke(uint64_t a1, void *a2)
{
  id v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  id v4 = a2;
  os_unfair_lock_lock(v3);
  nw_nat64_prefixes_resolver_path_update_callback_locked(*(void **)(a1 + 32), v4);

  unsigned int v5 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);

  os_unfair_lock_unlock(v5);
}

void sub_183ACF4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_nat64_prefixes_resolver_path_update_callback_locked(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unsigned int v5 = v4;
  if (!v3)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      char v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
          __int16 v31 = 2082;
          char v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v14) {
          goto LABEL_11;
        }
LABEL_50:
        free(v14);
        goto LABEL_11;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v15 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v4)
  {
    id v6 = v4;
    char v7 = v6[473];

    if ((v7 & 0x40) == 0 && (v8 = v6, int v9 = (char)v6[473], v8, v9 < 0))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
        __int16 v31 = 2114;
        char v32 = v8;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s enabling NAT64 prefix detection for path=%{public}@", buf, 0x16u);
      }

      if (!*((void *)v3 + 6)) {
        nw_nat64_prefixes_resolver_start_dns_query_locked(v3);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
        __int16 v31 = 2114;
        char v32 = v6;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s disabling NAT64 prefix detection for path=%{public}@", buf, 0x16u);
      }

      if (*((void *)v3 + 6)) {
        nw_nat64_prefixes_resolver_cancel_dns_query_locked(v3);
      }
      *((_DWORD *)v3 + 26) = 0;
      BOOL v11 = (void *)*((void *)v3 + 11);
      if (v11)
      {
        free(v11);
        *((void *)v3 + 11) = 0;
      }
    }
    goto LABEL_11;
  }
  __int16 v17 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v14, &type, &v27)) {
    goto LABEL_49;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v15 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
      _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null path", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v27)
  {
    char v15 = __nwlog_obj();
    os_log_type_t v26 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
      _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  os_log_type_t v22 = (char *)__nw_create_backtrace_string();
  char v15 = __nwlog_obj();
  os_log_type_t v23 = type;
  BOOL v24 = os_log_type_enabled(v15, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
      _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null path, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v30 = "nw_nat64_prefixes_resolver_path_update_callback_locked";
    __int16 v31 = 2082;
    char v32 = v22;
    _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v22);
  if (v14) {
    goto LABEL_50;
  }
LABEL_11:
}

void sub_183ACFB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_nat64_prefixes_resolver_start_dns_query_locked(NWConcrete_nw_nat64_prefixes_resolver *a1)
{
  id v1 = a1;
  id v2 = (void *)*((void *)v1 + 3);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZL49nw_nat64_prefixes_resolver_start_dns_query_lockedP37NWConcrete_nw_nat64_prefixes_resolver_block_invoke;
  v4[3] = &unk_1E524BAA8;
  id v3 = v1;
  unsigned int v5 = v3;
  nw_queue_context_async(v2, v4);
}

void sub_183ACFBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_nat64_prefixes_resolver_start_dns_query_lockedP37NWConcrete_nw_nat64_prefixes_resolver_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  long long v35 = xmmword_183E224C0;
  long long v36 = unk_183E224D0;
  strcpy((char *)v34, "DNSServiceGetAddrInfo");
  HIWORD(v34[2]) = 0;
  v34[3] = 0;
  *(void *)(*(void *)(a1 + 32) + 48) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (DNSServiceRef *)(v2 + 48);
  uint32_t required_interface_index = nw_parameters_get_required_interface_index(*(void **)(v2 + 16));
  DNSServiceErrorType AddrInfo = DNSServiceGetAddrInfo(v3, 0x9000u, required_interface_index, 2u, "ipv4only.arpa", (DNSServiceGetAddrInfoReply)nw_nat64_prefixes_resolver_dns_callback, *(void **)(a1 + 32));
  if (AddrInfo == -65569)
  {
    *(void *)(*(void *)(a1 + 32) + 48) = 0;
    uint64_t v7 = *(void *)(a1 + 32);
    os_log_type_t v8 = (DNSServiceRef *)(v7 + 48);
    uint32_t v9 = nw_parameters_get_required_interface_index(*(void **)(v7 + 16));
    DNSServiceErrorType v10 = DNSServiceGetAddrInfo(v8, 0x9000u, v9, 2u, "ipv4only.arpa", (DNSServiceGetAddrInfoReply)nw_nat64_prefixes_resolver_dns_callback, *(void **)(a1 + 32));
    DNSServiceErrorType v6 = v10;
    if (v10 == -65569) {
      goto LABEL_8;
    }
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    DNSServiceErrorType v6 = AddrInfo;
    if (AddrInfo)
    {
LABEL_3:
      if (!v6) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
  }
  strcpy((char *)v34, "DNSServiceSetDispatchQueue");
  uint64_t v11 = *(void *)(a1 + 32);
  os_log_type_t v12 = *(_DNSServiceRef_t **)(v11 + 48);
  BOOL v13 = nw_context_copy_workloop(*(void **)(v11 + 24));
  DNSServiceErrorType v6 = DNSServiceSetDispatchQueue(v12, (dispatch_queue_t)v13);

  if (!v6)
  {
LABEL_15:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_nat64_prefixes_resolver_start_dns_query_locked_block_invoke";
      __int16 v26 = 2082;
      char v27 = "ipv4only.arpa";
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s started DNS query for %{public}s successfully", buf, 0x16u);
    }

    os_log_type_t v20 = *(void **)(a1 + 32);
    BOOL v21 = v20;
    os_log_type_t v18 = (void *)v20[4];
    v20[4] = v21;
    goto LABEL_18;
  }
LABEL_8:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447234;
    os_log_type_t v25 = "nw_nat64_prefixes_resolver_start_dns_query_locked_block_invoke";
    __int16 v26 = 2080;
    char v27 = (const char *)v34;
    __int16 v28 = 2082;
    os_log_type_t v29 = "ipv4only.arpa";
    __int16 v30 = 2082;
    string_for_dns_service_error = nwlog_get_string_for_dns_service_error(v6);
    __int16 v32 = 1024;
    DNSServiceErrorType v33 = v6;
    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s %s for %{public}s failed with error=%{public}s(%d)", buf, 0x30u);
  }

  char v15 = *(void **)(a1 + 32);
  os_log_type_t v16 = (_DNSServiceRef_t *)v15[6];
  if (v16)
  {
    DNSServiceRefDeallocate(v16);
    *(void *)(*(void *)(a1 + 32) + 48) = 0;
    char v15 = *(void **)(a1 + 32);
  }
  __int16 v17 = v15[10];
  if (v17)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL49nw_nat64_prefixes_resolver_start_dns_query_lockedP37NWConcrete_nw_nat64_prefixes_resolver_block_invoke_92;
    block[3] = &unk_1E524BAA8;
    os_log_type_t v23 = v15;
    dispatch_async(v17, block);

    char v15 = *(void **)(a1 + 32);
  }
  os_log_type_t v18 = (void *)v15[4];
  v15[4] = 0;
LABEL_18:

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
}

void sub_183ACFF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_nat64_prefixes_resolver_start_dns_query_lockedP37NWConcrete_nw_nat64_prefixes_resolver_block_invoke_92(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(const void **)(v2 + 64);
  if (v3)
  {
    id v4 = _Block_copy(v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
    (*((void (**)(id, void, void))v4 + 2))(v4, 0, 0);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
  }
}

void sub_183AD0010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_nat64_prefixes_resolver_dns_callback(_DNSServiceRef_t *a1, int a2, int a3, int a4, const char *a5, const sockaddr *a6, int a7, void *a8)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v15 = (id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
  }
  else
  {
    int v16 = gLogFDOverride;

    if (v16 == -1) {
      goto LABEL_7;
    }
  }
  nw_endpoint_t address = nw_endpoint_create_address(a6);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v18 = (id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136448002;
    *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    *(_WORD *)int v47 = 2082;
    *(void *)&v47[2] = nwlog_get_string_for_dns_service_error(a4);
    __int16 v48 = 1024;
    int v49 = a4;
    __int16 v50 = 2082;
    int v51 = a5;
    __int16 v52 = 2082;
    description = nw_endpoint_get_description(address);
    __int16 v54 = 1024;
    int v55 = a7;
    _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%{public}s addr=%{public}s ttl=%d", buf, 0x42u);
  }

LABEL_7:
  if (a8)
  {
    id v19 = a8;
    os_unfair_lock_lock((os_unfair_lock_t)v19 + 2);
    if (!*((void *)v19 + 8))
    {
LABEL_22:
      os_unfair_lock_unlock((os_unfair_lock_t)v19 + 2);

      return;
    }
    if (a4 || (a2 & 2) == 0 || !a6 || a6->sa_family != 30)
    {
LABEL_10:
      if ((a2 & 1) == 0)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000;
        *(void *)int v47 = 0;
        signed int v20 = v19[26];
        if (v20 < 1)
        {
          int v21 = 0;
        }
        else
        {
          int v21 = nw_nat64_copy_prefixes_from_ipv4only_records(*((void *)v19 + 11), v20, v47);
          v19[26] = 0;
          os_log_type_t v22 = (void *)*((void *)v19 + 11);
          if (v22)
          {
            free(v22);
            *((void *)v19 + 11) = 0;
          }
        }
        char v27 = *((void *)v19 + 10);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___ZL39nw_nat64_prefixes_resolver_dns_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke;
        block[3] = &unk_1E524A1F8;
        int v43 = v21;
        id v41 = v19;
        char v42 = buf;
        dispatch_async(v27, block);

        _Block_object_dispose(buf, 8);
      }
      goto LABEL_22;
    }
    uint64_t v23 = v19[26];
    uint64_t v24 = v23 + 1;
    v19[26] = v23 + 1;
    if (v23 == -1)
    {
      long long v36 = __nwlog_obj();
      os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "_strict_reallocf";
      uint64_t v37 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v37)) {
        goto LABEL_46;
      }
      free(v37);
    }
    uint64_t v25 = 28 * v24;
    __int16 v26 = (sockaddr *)reallocf(*((void **)v19 + 11), 28 * v24);
    if (v26)
    {
LABEL_19:
      *((void *)v19 + 11) = v26;
      v26[v19[26] - 1] = *(sockaddr *)&a6->sa_data[6];
      goto LABEL_10;
    }
    BOOL v38 = __nwlog_obj();
    os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_strict_reallocf";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v25;
    os_log_type_t v39 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v39))
    {
      free(v39);
      goto LABEL_19;
    }
LABEL_46:
    __break(1u);
    return;
  }
  __int16 v28 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
  os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v29, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v44)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v30 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_40;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
        _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
        _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_40:
  if (v29) {
    free(v29);
  }
}

void sub_183AD0670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void ___ZL39nw_nat64_prefixes_resolver_dns_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke(uint64_t a1)
{
  v7[2] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(const void **)(v2 + 64);
  if (v3)
  {
    id v4 = (void (**)(void *, uint64_t, void))_Block_copy(v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
    uint64_t v5 = *(unsigned int *)(a1 + 48);
    if (v5)
    {
      v4[2](v4, v5, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    }
    else
    {
      v7[0] = 0;
      v7[1] = 0;
      ((void (**)(void *, uint64_t, void *))v4)[2](v4, v5, v7);
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
  }
  DNSServiceErrorType v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v6)
  {
    free(v6);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_183AD0798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_nat64_prefixes_resolver_cancel_dns_query_locked(NWConcrete_nw_nat64_prefixes_resolver *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  uint64_t v3 = *((void *)v1 + 6);
  if (!v3) {
    goto LABEL_4;
  }
  if (*((void *)v1 + 4))
  {
    *((void *)v1 + 6) = 0;
    id v4 = (void *)*((void *)v1 + 3);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___ZL50nw_nat64_prefixes_resolver_cancel_dns_query_lockedP37NWConcrete_nw_nat64_prefixes_resolver_block_invoke;
    v13[3] = &unk_1E52491B0;
    uint64_t v15 = v3;
    os_log_type_t v14 = v1;
    nw_queue_context_async_if_needed(v4, v13);

    goto LABEL_4;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v19 = "nw_nat64_prefixes_resolver_cancel_dns_query_locked";
  DNSServiceErrorType v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        id v19 = "nw_nat64_prefixes_resolver_cancel_dns_query_locked";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolver->internally_retained_object", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v19 = "nw_nat64_prefixes_resolver_cancel_dns_query_locked";
          __int16 v20 = 2082;
          int v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver->internally_retained_object, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v19 = "nw_nat64_prefixes_resolver_cancel_dns_query_locked";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver->internally_retained_object, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        id v19 = "nw_nat64_prefixes_resolver_cancel_dns_query_locked";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolver->internally_retained_object, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_4:
}

void sub_183AD0AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZL50nw_nat64_prefixes_resolver_cancel_dns_query_lockedP37NWConcrete_nw_nat64_prefixes_resolver_block_invoke(uint64_t a1)
{
  DNSServiceRefDeallocate(*(DNSServiceRef *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;
}

void nw_nat64_prefixes_resolver_cancel(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    nw_nat64_prefixes_resolver_cancel_dns_query_locked((NWConcrete_nw_nat64_prefixes_resolver *)v2);
    uint64_t v3 = *(void **)&v2[16]._os_unfair_lock_opaque;
    *(void *)&v2[16]._uint32_t os_unfair_lock_opaque = 0;

    id v4 = *(void **)&v2[24]._os_unfair_lock_opaque;
    if (v4)
    {
      nw_path_evaluator_cancel(v4);
      uint64_t v5 = *(void **)&v2[24]._os_unfair_lock_opaque;
      *(void *)&v2[24]._uint32_t os_unfair_lock_opaque = 0;
    }
    DNSServiceErrorType v6 = *(void **)&v2[22]._os_unfair_lock_opaque;
    if (v6)
    {
      free(v6);
      *(void *)&v2[22]._uint32_t os_unfair_lock_opaque = 0;
    }
    v2[26]._uint32_t os_unfair_lock_opaque = 0;
    uint64_t v7 = *(const void **)&v2[18]._os_unfair_lock_opaque;
    if (v7)
    {
      os_log_type_t v8 = _Block_copy(v7);
      uint32_t v9 = *(void **)&v2[18]._os_unfair_lock_opaque;
      *(void *)&v2[18]._uint32_t os_unfair_lock_opaque = 0;

      dispatch_async(*(dispatch_queue_t *)&v2[20]._os_unfair_lock_opaque, v8);
    }
    os_log_type_t v10 = *(void **)&v2[20]._os_unfair_lock_opaque;
    *(void *)&v2[20]._uint32_t os_unfair_lock_opaque = 0;

    os_unfair_lock_unlock(v2 + 2);
    goto LABEL_9;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_nat64_prefixes_resolver_cancel";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_nat64_prefixes_resolver_cancel";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_nat64_prefixes_resolver_cancel";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_nat64_prefixes_resolver_cancel";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_nat64_prefixes_resolver_cancel";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v12) {
    free(v12);
  }
LABEL_9:
}

void sub_183AD0E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_nat64_prefixes_resolver_copy_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    uint64_t v3 = nw_interface_create_with_index(v2[3]._os_unfair_lock_opaque);
    os_unfair_lock_unlock(v2 + 2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_nat64_prefixes_resolver_copy_interface";
  DNSServiceErrorType v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_nat64_prefixes_resolver_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_nat64_prefixes_resolver_copy_interface";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_nat64_prefixes_resolver_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_nat64_prefixes_resolver_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_183AD10FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t llhttp_finish(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24)) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 81);
  if (!*(unsigned char *)(a1 + 81)) {
    return 0;
  }
  if (v2 == 2)
  {
    *(void *)(a1 + 32) = "Invalid EOF state";
    return 14;
  }
  if (v2 != 1) {
    abort();
  }
  uint64_t v3 = *(void *)(a1 + 88);
  if (!v3) {
    return 0;
  }
  id v4 = *(uint64_t (**)(void))(v3 + 88);
  if (!v4) {
    return 0;
  }
  uint64_t result = v4();
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t llhttp__on_url(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_url";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_status(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_status";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_method(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_method";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_version(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 32);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_version";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_header_field(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 40);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_header_field";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_header_value(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 48);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_header_value";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_body(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 80);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_body";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_chunk_extension_name(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 56);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_chunk_extension_name";
    return 24;
  }
  return result;
}

uint64_t llhttp__on_chunk_extension_value(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 64);
  if (!v2) {
    return 0;
  }
  uint64_t result = v2();
  if (result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
    return 24;
  }
  return result;
}

uint64_t copyassocids(int a1, BOOL *a2, _DWORD *a3)
{
  if (a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    uint64_t v8 = 0;
    BOOL v9 = 0;
    if (!ioctl(a1, 0xC0107396uLL, &v8))
    {
      uint64_t result = v8;
      if (!v8) {
        return result;
      }
      BOOL v7 = nw_calloc_type<unsigned int>(v8);
      BOOL v9 = v7;
      uint64_t result = ioctl(a1, 0xC0107396uLL, &v8);
      if (!result)
      {
        *a2 = v7;
        *a3 = v8;
        return result;
      }
      if (v7) {
        free((void *)v7);
      }
    }
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  return 0xFFFFFFFFLL;
}

BOOL nw_calloc_type<unsigned int>(size_t a1)
{
  uint64_t v1 = malloc_type_calloc(a1, 4uLL, 0xEAFB8F1AuLL);
  if (v1) {
    return (BOOL)v1;
  }
  uint64_t v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  id v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

void freeassocids(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t copyconnids(int a1, int a2, BOOL *a3, unsigned int *a4)
{
  if (a3 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    int v9 = a2;
    unsigned int v10 = 0;
    BOOL v11 = 0;
    if (!ioctl(a1, 0xC0107397uLL, &v9))
    {
      uint64_t result = v10;
      if (!v10) {
        return result;
      }
      BOOL v8 = nw_calloc_type<unsigned int>(v10);
      BOOL v11 = v8;
      uint64_t result = ioctl(a1, 0xC0107397uLL, &v9);
      if (!result)
      {
        *a3 = v8;
        *a4 = v10;
        return result;
      }
      if (v8) {
        free((void *)v8);
      }
    }
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  return 0xFFFFFFFFLL;
}

void freeconnids(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void freeconninfo(void *a1)
{
  if (a1)
  {
    int v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0;
    }
    uint64_t v3 = (void *)a1[2];
    if (v3)
    {
      free(v3);
      a1[2] = 0;
    }
    id v4 = (void *)a1[4];
    if (v4) {
      free(v4);
    }
    free(a1);
  }
}

void freemptcpinfo(void *a1)
{
  if (a1)
  {
    int v2 = (void *)*a1;
    if (*a1)
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        free(v3);
        v2[1] = 0;
      }
      id v4 = (void *)v2[2];
      if (v4)
      {
        free(v4);
        v2[2] = 0;
      }
      uint64_t v5 = (void *)v2[4];
      if (v5) {
        free(v5);
      }
      free(v2);
    }
    DNSServiceErrorType v6 = (void *)a1[1];
    if (v6)
    {
      unint64_t v7 = *((unsigned int *)a1 + 4);
      if (!v7) {
        goto LABEL_24;
      }
      for (unint64_t i = 0; i < v7; ++i)
      {
        int v9 = *(void **)(a1[1] + 8 * i);
        if (v9)
        {
          unsigned int v10 = (void *)v9[1];
          if (v10)
          {
            free(v10);
            v9[1] = 0;
          }
          BOOL v11 = (void *)v9[2];
          if (v11)
          {
            free(v11);
            v9[2] = 0;
          }
          os_log_type_t v12 = (void *)v9[4];
          if (v12) {
            free(v12);
          }
          free(v9);
          unint64_t v7 = *((unsigned int *)a1 + 4);
        }
      }
      DNSServiceErrorType v6 = (void *)a1[1];
      if (v6) {
LABEL_24:
      }
        free(v6);
    }
    free(a1);
  }
}

void nw_quic_metadata_set_original(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!nw_protocol_metadata_is_quic_connection(v3))
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_quic_metadata_set_original";
    DNSServiceErrorType v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v6, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = "nw_quic_metadata_set_original";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (nw_protocol_metadata_is_quic_connection(v4))
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_quic_metadata_set_original_block_invoke;
    v19[3] = &unk_1E5248F68;
    id v20 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v19);

    goto LABEL_4;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v24 = "nw_quic_metadata_set_original";
  DNSServiceErrorType v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v6, &type, &v21)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    unint64_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_quic_metadata_set_original";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    unint64_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_quic_metadata_set_original";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  unint64_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_quic_metadata_set_original";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v24 = "nw_quic_metadata_set_original";
    __int16 v25 = 2082;
    __int16 v26 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183AD2454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_metadata_set_original_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

size_t nw_quic_should_flush_cache_entry(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  id v7 = a4;
  id v8 = a5;
  int v9 = v8;
  if (a3) {
    size_t v10 = 1;
  }
  else {
    size_t v10 = nw_path_signature_changed_from_previous(v8, v7);
  }

  return v10;
}

void sub_183AD250C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_deallocate_cache_entry(uint64_t a1, void **a2)
{
  id v3 = *a2;
  *a2 = 0;

  id v4 = a2[1];
  a2[1] = 0;

  uint64_t v5 = a2[2];
  a2[2] = 0;

  free(a2);
}

uint64_t __Block_byref_object_copy__55989(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__55990(uint64_t a1)
{
}

void *nw_quic_metadata_copy_original(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a2 + 24);
  if (v2) {
    id v3 = v2;
  }
  return v2;
}

void *nw_protocol_set_quic_overrides(void *result, void *a2, void *a3, void *a4, void *a5)
{
  quic_fillout_definition_callbacks_override = result;
  qpod_conn_create_override = a2;
  qpod_conn_free_override = a3;
  qpod_conn_encode_datagram_override = a4;
  qpod_conn_decode_datagram_override = a5;
  return result;
}

void nw_quic_access_application_result_on_queue(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
    }
    id v5 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    if (v5)
    {
      uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v3, v5);
      if (cached_content_for_protocol)
      {
        uint64_t v7 = *(unsigned int *)(cached_content_for_protocol + 36);
        uint64_t v8 = *(unsigned int *)(cached_content_for_protocol + 40);
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
      v4[2](v4, v7, v8);
LABEL_9:

      goto LABEL_10;
    }
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_quic_access_application_result_on_queue";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v14, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_application_result_on_queue";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null definition", buf, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v28 = "nw_quic_access_application_result_on_queue";
            __int16 v29 = 2082;
            __int16 v30 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_application_result_on_queue";
          _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_application_result_on_queue";
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_45:
    if (v14) {
      free(v14);
    }
    goto LABEL_9;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v28 = "nw_quic_access_application_result_on_queue";
  size_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v10, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_quic_access_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v25)
    {
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v28 = "nw_quic_access_application_result_on_queue";
          __int16 v29 = 2082;
          __int16 v30 = v17;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v17);
        goto LABEL_40;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_quic_access_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_quic_access_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_40:
  if (v10) {
    free(v10);
  }
LABEL_10:
}

void sub_183AD2B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_stream_should_serialize_options(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v2 = *(void **)(a2 + 16);
    return nw_protocol_options_access_handle(v2, &__block_literal_global_66_56161);
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_quic_stream_should_serialize_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      DNSServiceErrorType v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_quic_stream_should_serialize_options";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      DNSServiceErrorType v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_quic_stream_should_serialize_options";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_quic_stream_should_serialize_options";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      DNSServiceErrorType v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_quic_stream_should_serialize_options";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v5) {
    free(v5);
  }
  return 0;
}

BOOL ___ZL39nw_quic_stream_should_serialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPv_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 128) != 0;
}

BOOL nw_quic_stream_deserialize_options(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v30 = "nw_quic_stream_deserialize_options";
    char v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v27)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null serialized_bytes, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null serialized_bytes, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v30 = "nw_quic_stream_deserialize_options";
        __int16 v31 = 2082;
        uint64_t v32 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
LABEL_42:
    if (v12) {
      free(v12);
    }
    DNSServiceErrorType v6 = 0;
    goto LABEL_7;
  }
  if (a3 <= 0x13)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v30 = "nw_quic_stream_deserialize_options";
    char v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_quic_serialized_options))", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v27)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_quic_serialized_options)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_quic_serialized_options)), no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v30 = "nw_quic_stream_deserialize_options";
        __int16 v31 = 2082;
        uint64_t v32 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_quic_serialized_options)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
    goto LABEL_42;
  }
  DNSServiceErrorType v6 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_4:
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
    }
    options = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
    uint64_t v8 = (void *)v6[2];
    v6[2] = options;

    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = ___ZL34nw_quic_stream_deserialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke;
    v26[3] = &__block_descriptor_56_e9_B16__0_v8l;
    v26[4] = a2;
    v26[5] = a2;
    v26[6] = a3;
    nw_protocol_options_access_handle(options, v26);
    char v9 = v6[3] & 0xFE | *(unsigned char *)(a2 + 17) & 1;
    *((unsigned char *)v6 + 24) = v9;
    *((unsigned char *)v6 + 24) = *(unsigned char *)(a2 + 17) & 2 | v9 & 0xFD;
LABEL_7:

    return (BOOL)v6;
  }
  os_log_type_t v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  __int16 v30 = "strict_calloc";
  __int16 v31 = 2048;
  uint64_t v32 = 1;
  __int16 v33 = 2048;
  uint64_t v34 = 32;
  uint64_t v18 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void sub_183AD33F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_quic_stream_deserialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  int v5 = *(unsigned __int16 *)(a2 + 215);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)v4;
  double v6 = *(double *)(v4 + 4);
  *(double *)(a2 + 204) = v6;
  int v7 = v5 | (*(unsigned __int8 *)(a2 + 217) << 16);
  LODWORD(v4) = v7 & 0xFFFFFFFB | (4 * (*(_WORD *)(v4 + 16) & 1));
  unsigned int v8 = (v7 & 0xFFFFFFFB) >> 16;
  *(unsigned char *)(a2 + 217) = v8;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFF7FFF | (((*(unsigned __int16 *)(a1[4] + 16) >> 7) & 1) << 15);
  *(unsigned char *)(a2 + 217) = v8;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a1[4] + 16) >> 1) & 1));
  *(unsigned char *)(a2 + 217) = v8;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a1[4] + 16) >> 2) & 1) << 6);
  *(unsigned char *)(a2 + 217) = v8;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a1[4] + 16) >> 3) & 1) << 7);
  *(unsigned char *)(a2 + 217) = v8;
  *(_WORD *)(a2 + 215) = v4;
  int v9 = *(unsigned __int16 *)(a1[4] + 16) >> 10;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFEFFFFF | ((v9 & 1) << 20);
  unsigned int v10 = WORD1(v4);
  *(unsigned char *)(a2 + 217) = BYTE2(v4);
  int v11 = v4 & 0xFFFFDFFF | (((*(unsigned __int16 *)(a1[4] + 16) >> 13) & 1) << 13);
  *(unsigned char *)(a2 + 217) = v10;
  *(_WORD *)(a2 + 215) = v11;
  uint64_t v12 = a1[4];
  *(_DWORD *)(a2 + 200) = *(unsigned __int8 *)(v12 + 14);
  __int16 v13 = *(_WORD *)(v12 + 16);
  if (((((v7 & 0x1000) == 0) ^ ((v13 & 0x40) >> 6)) & 1) == 0)
  {
    *(unsigned char *)(a2 + 217) = BYTE2(v11);
    *(_WORD *)(a2 + 215) = v11 & 0xEFFF | ((v13 & 0x40) << 6);
    if ((v13 & 0x40) != 0)
    {
      options = nw_swift_tls_create_options(v6);
    }
    else
    {
      os_log_type_t v15 = (void *)nw_protocol_boringssl_copy_definition();
      options = nw_protocol_create_options(v15);
    }
    objc_storeStrong((id *)(a2 + 96), options);

    __int16 v13 = *(_WORD *)(a1[4] + 16);
    int v11 = *(unsigned __int16 *)(a2 + 215) | (*(unsigned __int8 *)(a2 + 217) << 16);
  }
  unsigned int v16 = v13 & 0x1000;
  if (((((v11 & 0x4000) == 0) ^ (v16 >> 12)) & 1) == 0)
  {
    *(unsigned char *)(a2 + 217) = BYTE2(v11);
    *(_WORD *)(a2 + 215) = v11 & 0xBFFF | (4 * v16);
    if (v16) {
      MEMORY[0x185318530](*(void *)(a2 + 96), 29);
    }
  }
  nw_quic_connection_set_trust_certs_internal(a2, (*(unsigned __int16 *)(a1[4] + 16) >> 4) & 1);
  if ((*(_WORD *)(a1[4] + 16) & 0x20) != 0)
  {
    sec_protocol_options_add_transport_specific_application_protocol();
    int v17 = *(unsigned __int16 *)(a2 + 215) | (*(unsigned __int8 *)(a2 + 217) << 16) | 0x800;
  }
  else
  {
    int v17 = *(_WORD *)(a2 + 215) & 0xF7FF | (*(unsigned __int8 *)(a2 + 217) << 16);
  }
  *(_WORD *)(a2 + 215) = v17;
  *(unsigned char *)(a2 + 217) = BYTE2(v17);
  uint64_t v18 = a1[4];
  unsigned int v19 = *(unsigned __int8 *)(v18 + 12);
  if (*(unsigned char *)(v18 + 12))
  {
    memset(buffer, 0, 20);
    if (v19 >= 0x14) {
      size_t v20 = 20;
    }
    else {
      size_t v20 = v19;
    }
    dispatch_data_t v21 = dispatch_data_create(buffer, v20, 0, 0);
    os_log_type_t v22 = *(void **)(a2 + 152);
    *(void *)(a2 + 152) = v21;

    uint64_t v18 = a1[4];
  }
  BOOL v23 = (const UInt8 *)(v18 + 18);
  if (*(unsigned char *)(v18 + 13))
  {
    os_log_type_t v24 = (const UInt8 *)(v18 + 20);
    unint64_t v25 = a1[5] + a1[6];
    if ((unint64_t)v24 < v25)
    {
      CFIndex v26 = *(unsigned __int16 *)v23;
      BOOL v23 = &v24[v26];
      if ((unint64_t)&v24[v26] <= v25)
      {
        CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFDataRef v28 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v24, v26);
        __int16 v29 = v23 + 2;
        unint64_t v30 = a1[5] + a1[6];
        if ((unint64_t)(v23 + 2) >= v30)
        {
          Mutable = 0;
        }
        else
        {
          Mutable = 0;
          unsigned int v32 = 1;
          __int16 v33 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          while (v32 < *(unsigned __int8 *)(a1[4] + 13))
          {
            CFIndex v34 = *(unsigned __int16 *)v23;
            BOOL v23 = &v29[v34];
            if ((unint64_t)&v29[v34] > v30)
            {
              BOOL v23 = v29;
              if (v28) {
                goto LABEL_32;
              }
              goto LABEL_33;
            }
            CFDataRef v35 = CFDataCreate(v27, v29, v34);
            if (!Mutable) {
              Mutable = CFArrayCreateMutable(v27, 0, v33);
            }
            CFArrayAppendValue(Mutable, v35);
            if (v35) {
              CFRelease(v35);
            }
            ++v32;
            __int16 v29 = v23 + 2;
            unint64_t v30 = a1[5] + a1[6];
            if ((unint64_t)(v23 + 2) >= v30) {
              break;
            }
          }
        }
        if (v28)
        {
LABEL_32:
          nw_quic_connection_set_client_identity_reference_internal(a2, v28, Mutable, 0);
          CFRelease(v28);
        }
LABEL_33:
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
        BOOL v23 = v24;
      }
    }
  }
  if ((*(_WORD *)(a1[4] + 16) & 0x800) != 0)
  {
    long long v36 = v23 + 2;
    unint64_t v37 = a1[5] + a1[6];
    if ((unint64_t)(v23 + 2) < v37)
    {
      CFIndex v38 = *(unsigned __int16 *)v23;
      BOOL v23 = &v36[v38];
      if ((unint64_t)&v36[v38] > v37)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v39 = (id)gLogObj;
        *(_DWORD *)buffer = 136446210;
        *(void *)&buffer[4] = "nw_quic_stream_deserialize_options_block_invoke";
        uint64_t v40 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v56 = 0;
        if (__nwlog_fault(v40, &type, &v56))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v41 = (id)gLogObj;
            os_log_type_t v42 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)buffer = 136446210;
              *(void *)&buffer[4] = "nw_quic_stream_deserialize_options_block_invoke";
              _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s expected more bytes", buffer, 0xCu);
            }
          }
          else if (v56)
          {
            backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v41 = (id)gLogObj;
            os_log_type_t v53 = type;
            BOOL v54 = os_log_type_enabled(v41, type);
            if (backtrace_string)
            {
              if (v54)
              {
                *(_DWORD *)buffer = 136446466;
                *(void *)&buffer[4] = "nw_quic_stream_deserialize_options_block_invoke";
                *(_WORD *)&buffer[12] = 2082;
                *(void *)&buffer[14] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v41, v53, "%{public}s expected more bytes, dumping backtrace:%{public}s", buffer, 0x16u);
              }

              free(backtrace_string);
              if (!v40) {
                goto LABEL_45;
              }
              goto LABEL_44;
            }
            if (v54)
            {
              *(_DWORD *)buffer = 136446210;
              *(void *)&buffer[4] = "nw_quic_stream_deserialize_options_block_invoke";
              _os_log_impl(&dword_1830D4000, v41, v53, "%{public}s expected more bytes, no backtrace", buffer, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v41 = (id)gLogObj;
            os_log_type_t v55 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)buffer = 136446210;
              *(void *)&buffer[4] = "nw_quic_stream_deserialize_options_block_invoke";
              _os_log_impl(&dword_1830D4000, v41, v55, "%{public}s expected more bytes, backtrace limit exceeded", buffer, 0xCu);
            }
          }
        }
        if (!v40)
        {
LABEL_45:
          BOOL v23 = (const UInt8 *)(a1[5] + a1[6]);
          goto LABEL_47;
        }
LABEL_44:
        free(v40);
        goto LABEL_45;
      }
      *(void *)(a2 + 128) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v36, v38);
    }
  }
LABEL_47:
  int v43 = v23 + 2;
  unint64_t v44 = a1[5] + a1[6];
  if ((unint64_t)(v23 + 2) < v44)
  {
    os_log_type_t v45 = 0;
    CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v47 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFIndex v48 = *(unsigned __int16 *)v23;
      BOOL v23 = &v43[v48];
      if ((unint64_t)&v43[v48] > v44) {
        break;
      }
      if (!v45) {
        os_log_type_t v45 = CFArrayCreateMutable(v46, 0, v47);
      }
      CFDataRef v49 = CFDataCreate(v46, v43, v48);
      CFArrayAppendValue(v45, v49);
      if (v49) {
        CFRelease(v49);
      }
      int v43 = v23 + 2;
      unint64_t v44 = a1[5] + a1[6];
    }
    while ((unint64_t)(v23 + 2) < v44);
    if (v45)
    {
      __int16 v50 = *(const void **)(a2 + 104);
      if (v50)
      {
        CFRelease(v50);
        *(void *)(a2 + 104) = 0;
      }
      if (CFArrayGetCount(v45) >= 1)
      {
        *(void *)(a2 + 104) = CFRetain(v45);
        sec_protocol_options_set_server_raw_public_key_certificates();
      }
      CFRelease(v45);
    }
  }
  return 1;
}

void sub_183AD3BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_trust_certs_internal(uint64_t a1, int a2)
{
  if (a2)
  {
    if (os_variant_allows_internal_security_policies())
    {
      id v3 = *(NSObject **)(a1 + 96);
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v4 = (id)nw_context_copy_implicit_context::implicit_context;
      BOOL v5 = nw_context_copy_workloop(v4);
      sec_protocol_options_set_verify_block(v3, &__block_literal_global_68_56187, (dispatch_queue_t)v5);

      *(_WORD *)(a1 + 215) |= 0x400u;
    }
  }
  else
  {
    int v6 = *(unsigned __int16 *)(a1 + 215);
    int v7 = *(unsigned __int8 *)(a1 + 217);
    *(_WORD *)(a1 + 215) = v6 & 0xFBFF;
    *(unsigned char *)(a1 + 217) = (v6 & 0xFFFFFBFF | (v7 << 16)) >> 16;
  }
}

void sub_183AD3C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_client_identity_reference_internal(uint64_t a1, const void *a2, CFTypeRef cf, int a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(const void **)(a1 + 112);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 112) = 0;
  }
  int v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v32 = a1;
  if (!cf)
  {
    int v30 = a4;
    CFTypeRef cfa = a2;
    uint64_t v12 = 0;
    goto LABEL_26;
  }
  *(void *)(a1 + 120) = CFRetain(cf);
  if (a4)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
    if (Count < 1)
    {
      if (!a2) {
        return;
      }
      BOOL v23 = a2;
      uint64_t v12 = 0;
      *(void *)(a1 + 112) = CFRetain(a2);
      goto LABEL_28;
    }
    CFIndex v11 = Count;
    int v30 = a4;
    CFTypeRef cfa = a2;
    uint64_t v12 = 0;
    CFIndex v13 = 0;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v34 = (const void *)*MEMORY[0x1E4F3BC80];
    __int16 v33 = (const void *)*MEMORY[0x1E4F1CFD0];
    os_log_type_t v15 = (const void *)*MEMORY[0x1E4F3B978];
    unsigned int v16 = (const void *)*MEMORY[0x1E4F3B980];
    int v17 = (const void *)*MEMORY[0x1E4F3BD40];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v13);
      Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(Mutable, v34, v33);
      CFDictionaryAddValue(Mutable, v15, v16);
      CFDictionaryAddValue(Mutable, v17, ValueAtIndex);
      CFTypeRef result = 0;
      OSStatus v20 = SecItemCopyMatching(Mutable, &result);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v20) {
        break;
      }
      CFTypeRef v21 = result;
      if (result)
      {
        os_log_type_t v22 = v12;
        if (!v12)
        {
          os_log_type_t v22 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
          CFTypeRef v21 = result;
        }
        uint64_t v12 = v22;
        CFArrayAppendValue(v22, v21);
        if (result) {
          CFRelease(result);
        }
      }
      if (v11 == ++v13) {
        goto LABEL_26;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v24 = (id)gLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v37 = "nw_quic_connection_set_client_identity_reference_internal";
      __int16 v38 = 1024;
      OSStatus v39 = v20;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s Failed to retrieve certificate (%d)", buf, 0x12u);
    }

LABEL_26:
    if (!cfa || (BOOL v23 = cfa, *(void *)(v32 + 112) = CFRetain(cfa), !v30))
    {
LABEL_40:
      if (v12) {
        CFRelease(v12);
      }
      return;
    }
LABEL_28:
    unint64_t v25 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E4F3BC80], (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E4F3B978], (const void *)*MEMORY[0x1E4F3B990]);
    CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E4F3BD40], v23);
    CFTypeRef result = 0;
    OSStatus v26 = SecItemCopyMatching(v25, &result);
    if (v25) {
      CFRelease(v25);
    }
    if (v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      CFAllocatorRef v27 = (id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v37 = "nw_quic_connection_set_client_identity_reference_internal";
        __int16 v38 = 1024;
        OSStatus v39 = v26;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s Failed to retrieve identity (%d)", buf, 0x12u);
      }
    }
    if (result)
    {
      if (v12) {
        CFDataRef v28 = sec_identity_create_with_certificates((SecIdentityRef)result, v12);
      }
      else {
        CFDataRef v28 = sec_identity_create((SecIdentityRef)result);
      }
      __int16 v29 = v28;
      sec_protocol_options_set_local_identity(*(sec_protocol_options_t *)(v32 + 96), v28);

      if (result) {
        CFRelease(result);
      }
    }
    goto LABEL_40;
  }
  if (a2) {
    *(void *)(a1 + 112) = CFRetain(a2);
  }
}

void sub_183AD4114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_quic_connection_set_trust_certs_internalP35nw_protocol_quic_connection_optionsb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1);
}

uint64_t nw_quic_stream_serialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (a2)
  {
    if (a3)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v26 = 0;
      int v6 = *(void **)(a2 + 16);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = ___ZL32nw_quic_stream_serialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPvPm_block_invoke;
      v22[3] = &unk_1E5249200;
      void v22[4] = buf;
      v22[5] = a3;
      v22[6] = a2;
      nw_protocol_options_access_handle(v6, v22);
      uint64_t v7 = *(void *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    CFIndex v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        CFIndex v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null out_length", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v23)
      {
        CFIndex v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null out_length, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      CFIndex v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null out_length, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null out_length, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    int v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        CFIndex v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null existing_handle", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v23)
      {
        CFIndex v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      CFIndex v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_4:

  return v7;
}

void sub_183AD4664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL32nw_quic_stream_serialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPvPm_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a2 + 104);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  CFIndex Count = CFArrayGetCount(v4);
  if (Count)
  {
    CFIndex v6 = Count;
    uint64_t v7 = 0;
    for (CFIndex i = 0; i != v6; ++i)
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 104), i);
      if (ValueAtIndex) {
        v7 += CFDataGetLength(ValueAtIndex) + 2;
      }
    }
LABEL_8:
    unsigned int v10 = *(NSObject **)(a2 + 152);
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  uint64_t v7 = 0;
  unsigned int v10 = *(NSObject **)(a2 + 152);
  if (v10)
  {
LABEL_9:
    size_t size = dispatch_data_get_size(v10);
    if (size <= 0xFF) {
      char v12 = size;
    }
    else {
      char v12 = 0;
    }
    CFDataRef v13 = *(const __CFData **)(a2 + 112);
    if (v13) {
      goto LABEL_13;
    }
LABEL_21:
    unsigned __int8 v16 = 0;
    CFIndex v14 = 0;
    goto LABEL_22;
  }
LABEL_20:
  char v12 = 0;
  CFDataRef v13 = *(const __CFData **)(a2 + 112);
  if (!v13) {
    goto LABEL_21;
  }
LABEL_13:
  CFIndex v14 = CFDataGetLength(v13) + 2;
  CFArrayRef v15 = *(const __CFArray **)(a2 + 120);
  if (!v15)
  {
    unsigned __int8 v16 = 1;
    CFDataRef v19 = *(const __CFData **)(a2 + 128);
    if (v19) {
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  unsigned __int8 v16 = CFArrayGetCount(v15) + 1;
  if (v16 >= 2u)
  {
    CFIndex v17 = 0;
    do
    {
      CFDataRef v18 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), v17);
      if (v18) {
        v14 += CFDataGetLength(v18) + 2;
      }
      ++v17;
    }
    while (v16 - 1 != v17);
  }
LABEL_22:
  CFDataRef v19 = *(const __CFData **)(a2 + 128);
  if (v19)
  {
LABEL_23:
    CFIndex v20 = CFDataGetLength(v19) + 2;
    goto LABEL_26;
  }
LABEL_25:
  CFIndex v20 = 0;
LABEL_26:
  CFIndex v21 = v7 + v14 + v20;
  size_t v22 = v21 + 20;
  **(void **)(a1 + 40) = v21 + 20;
  if (v21 == -20)
  {
    os_log_type_t v63 = __nwlog_obj();
    os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
    DNSServiceErrorType v64 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v64);
    if (result) {
      goto LABEL_49;
    }
    free(v64);
  }
  char v23 = malloc_type_calloc(1uLL, v22, 0xEAFB8F1AuLL);
  if (!v23)
  {
    BOOL v65 = __nwlog_obj();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    BOOL v66 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v66);
    if (!result)
    {
      free(v66);
      goto LABEL_28;
    }
LABEL_49:
    __break(1u);
    return result;
  }
LABEL_28:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v23;
  *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4) = *(_WORD *)(a2 + 204);
  **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 192);
  *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 6) = *(_WORD *)(a2 + 206);
  *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = *(_WORD *)(a2 + 208);
  *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 10) = *(_WORD *)(a2 + 210);
  uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v24 + 16) = *(_WORD *)(v24 + 16) & 0xFFFE | (*(_WORD *)(a2 + 215) >> 2) & 1;
  uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v25 + 16) = *(_WORD *)(v25 + 16) & 0xFF7F | *(unsigned char *)(a2 + 216) & 0x80;
  uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v26 + 16) = *(_WORD *)(v26 + 16) & 0xFFFD | (*(_WORD *)(a2 + 215) >> 4) & 2;
  uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v27 + 16) = *(_WORD *)(v27 + 16) & 0xFFFB | (*(_WORD *)(a2 + 215) >> 4) & 4;
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v28 + 16) = *(_WORD *)(v28 + 16) & 0xFFF7 | (*(_WORD *)(a2 + 215) >> 4) & 8;
  uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v29 + 16) = *(_WORD *)(v29 + 16) & 0xFFEF | (*(_WORD *)(a2 + 215) >> 6) & 0x10;
  uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v30 + 16) = *(_WORD *)(v30 + 16) & 0xFFDF | (*(_WORD *)(a2 + 215) >> 6) & 0x20;
  uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v31 + 16) = *(_WORD *)(v31 + 16) & 0xFFBF | (*(_WORD *)(a2 + 215) >> 6) & 0x40;
  uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v32 + 16) = *(_WORD *)(v32 + 16) & 0xEFFF | (*(_WORD *)(a2 + 215) >> 2) & 0x1000;
  uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v33 + 16) = *(_WORD *)(v33 + 16) & 0xDFFF | *(_WORD *)(a2 + 215) & 0x2000;
  uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v34 + 16) = *(_WORD *)(v34 + 16) & 0xFBFF | (*(unsigned __int8 *)(a2 + 217) << 6) & 0x400;
  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 14) = *(_DWORD *)(a2 + 200);
  uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v35 + 16) = *(_WORD *)(v35 + 16) & 0xFEFF | ((*(unsigned char *)(*(void *)(a1 + 48) + 24) & 1) << 8);
  uint64_t v36 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_WORD *)(v36 + 16) = *(_WORD *)(v36 + 16) & 0xFDFF | (((*(unsigned char *)(*(void *)(a1 + 48) + 24) & 2) != 0) << 9);
  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 12) = v12;
  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 13) = v16;
  uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  __int16 v38 = (char *)(v37 + 18);
  if (v16)
  {
    CFDataRef v39 = *(const __CFData **)(a2 + 112);
    if (v39)
    {
      unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 112));
      BytePtr = CFDataGetBytePtr(v39);
      *(_WORD *)(v37 + 18) = Length;
      memcpy((void *)(v37 + 20), BytePtr, Length);
      __int16 v38 = (char *)(v37 + 20 + Length);
    }
    if (v16 != 1)
    {
      uint64_t v56 = v16 - 1;
      unsigned int v57 = 0;
      do
      {
        CFDataRef v58 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), v57);
        if (v58)
        {
          CFDataRef v59 = v58;
          unsigned __int16 v60 = CFDataGetLength(v58);
          os_log_type_t v61 = CFDataGetBytePtr(v59);
          *(_WORD *)__int16 v38 = v60;
          uint64_t v62 = v38 + 2;
          memcpy(v62, v61, v60);
          __int16 v38 = &v62[v60];
        }
        ++v57;
        --v56;
      }
      while (v56);
    }
  }
  if (v20)
  {
    uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    *(_WORD *)(v42 + 16) |= 0x800u;
    unsigned __int16 v43 = CFDataGetLength(*(CFDataRef *)(a2 + 128));
    *(_WORD *)__int16 v38 = v43;
    unint64_t v44 = v38 + 2;
    os_log_type_t v45 = CFDataGetBytePtr(*(CFDataRef *)(a2 + 128));
    memcpy(v44, v45, v43);
    __int16 v38 = &v44[v43];
  }
  CFArrayRef v46 = *(const __CFArray **)(a2 + 104);
  if (v46)
  {
    CFIndex v47 = CFArrayGetCount(v46);
    if (v47)
    {
      CFIndex v48 = v47;
      for (CFIndex j = 0; j != v48; ++j)
      {
        CFDataRef v50 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 104), j);
        if (v50)
        {
          CFDataRef v51 = v50;
          unsigned __int16 v52 = CFDataGetLength(v50);
          os_log_type_t v53 = CFDataGetBytePtr(v51);
          *(_WORD *)__int16 v38 = v52;
          BOOL v54 = v38 + 2;
          memcpy(v54, v53, v52);
          __int16 v38 = &v54[v52];
        }
      }
    }
  }
  return 1;
}

uint64_t nw_quic_stream_option_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nw_protocol_option_is_equal(*(void **)(a2 + 16), *(void **)(a3 + 16));
}

nw_protocol_definition_t nw_protocol_copy_quic_definition(void)
{
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_quic_stream_definition::quic_definition;

  return (nw_protocol_definition_t)v0;
}

NWConcrete_nw_protocol_options *nw_quic_create_connection_options()
{
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_quic_connection_definition::quic_definition;

  return nw_protocol_create_options(v0);
}

nw_protocol_options_t nw_quic_create_options(void)
{
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_quic_stream_definition::quic_definition;

  return (nw_protocol_options_t)nw_protocol_create_options(v0);
}

void nw_quic_add_tls_application_protocol(nw_protocol_options_t options, const char *application_protocol)
{
  id v3 = nw_quic_copy_sec_protocol_options(options);
  sec_protocol_options_add_tls_application_protocol(v3, application_protocol);
}

void sub_183AD4EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

sec_protocol_options_t nw_quic_copy_sec_protocol_options(nw_protocol_options_t options)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = options;
  if (nw_protocol_options_is_quic(v1))
  {
    if (nw_protocol_options_is_quic_stream(v1))
    {
      int v2 = nw_quic_stream_copy_shared_connection_options(v1);

      uint64_t v1 = v2;
    }
    id v3 = nw_quic_connection_copy_sec_protocol_options(v1);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
  CFIndex v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_quic(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
          __int16 v17 = 2082;
          CFDataRef v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_5:

  return v3;
}

void sub_183AD51B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_quic_stream_copy_shared_connection_options(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    unsigned __int8 v16 = __Block_byref_object_copy__55989;
    __int16 v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_copy_shared_connection_options_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  CFArrayRef v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AD5510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_copy_shared_connection_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_quic_connection_set_override_trust_certs_for_tests(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_override_trust_certs_for_tests_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  CFArrayRef v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AD5854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_override_trust_certs_for_tests_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_quic_connection_add_h3_alpn(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_add_h3_alpn_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  CFArrayRef v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_add_h3_alpn";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_add_h3_alpn";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_add_h3_alpn";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_add_h3_alpn";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_add_h3_alpn";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AD5B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_add_h3_alpn_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    sec_protocol_options_add_transport_specific_application_protocol();
    *(_WORD *)(a2 + 215) |= 0x800u;
  }
  else
  {
    int v3 = *(unsigned __int16 *)(a2 + 215);
    int v4 = *(unsigned __int8 *)(a2 + 217);
    *(_WORD *)(a2 + 215) = v3 & 0xF7FF;
    *(unsigned char *)(a2 + 217) = (v3 & 0xFFFFF7FF | (v4 << 16)) >> 16;
  }
  return 1;
}

void nw_quic_connection_set_server_raw_public_keys(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_server_raw_public_keys_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      CFIndex v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AD5EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_server_raw_public_keys_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(const void **)(a1 + 32);
  int v4 = *(const void **)(a2 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 104) = 0;
  }
  if (v3 && CFArrayGetCount((CFArrayRef)v3) >= 1)
  {
    *(void *)(a2 + 104) = CFRetain(v3);
    sec_protocol_options_set_server_raw_public_key_certificates();
  }
  return 1;
}

void nw_quic_connection_set_client_identity_reference(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_quic_connection_set_client_identity_reference_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    void v14[4] = a2;
    void v14[5] = a3;
    nw_protocol_options_access_handle(v5, v14);
    goto LABEL_3;
  }
  CFIndex v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_client_identity_reference";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_client_identity_reference";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_client_identity_reference";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_client_identity_reference";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_client_identity_reference";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AD6244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_client_identity_reference_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL nw_quic_connection_fetch_client_identity_reference(void *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    if (!uuid_is_null(a2))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v25 = 1;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_quic_connection_fetch_client_identity_reference_block_invoke;
      v21[3] = &unk_1E5249200;
      v21[4] = buf;
      v21[5] = a2;
      v21[6] = a3;
      nw_protocol_options_access_handle(v5, v21);
      BOOL v6 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null !uuid_is_null(proxy_uuid)", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v22)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null !uuid_is_null(proxy_uuid), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null !uuid_is_null(proxy_uuid), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null !uuid_is_null(proxy_uuid), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v22)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  BOOL v6 = 0;
LABEL_4:

  return v6;
}

void sub_183AD67C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_fetch_client_identity_reference_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 112))
  {
    uint64_t v31 = 0;
    uint64_t v32 = &v31;
    uint64_t v33 = 0x2020000000;
    char v34 = 0;
    v30[1] = (id)MEMORY[0x1E4F143A8];
    v30[2] = (id)3221225472;
    v30[3] = __nw_quic_connection_fetch_client_identity_reference_block_invoke_2;
    v30[4] = &unk_1E5248E90;
    v30[5] = &v31;
    sec_protocol_options_access_handle();
    if (!*((unsigned char *)v32 + 24))
    {
      CFArrayRef v4 = *(const __CFArray **)(a2 + 120);
      if (v4 && (CFIndex Count = CFArrayGetCount(v4), Count >= 1))
      {
        Mutable = 0;
        CFIndex v7 = 0;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        while (1)
        {
          CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), v7);
          CFDataGetBytePtr(ValueAtIndex);
          CFDataGetLength(ValueAtIndex);
          BOOL v10 = (void *)NEHelperCopyDataForCertificate();
          os_log_type_t v11 = v10;
          if (!v10) {
            break;
          }
          xpc_data_get_bytes_ptr(v10);
          xpc_data_get_length(v11);
          BOOL v12 = (__SecIdentity *)SecCertificateCreateWithBytes();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v13 = (id)gLogObj;
          char v14 = v13;
          if (!v12)
          {
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
              _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Failed to create certificate from data", buf, 0xCu);
            }
            goto LABEL_20;
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
            __int16 v36 = 2112;
            uint64_t v37 = v12;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Fetched certificate %@ from NEHelper", buf, 0x16u);
          }

          if (!Mutable) {
            Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
          }
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);

          if (Count == ++v7) {
            goto LABEL_21;
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch certificate from NEHelper", buf, 0xCu);
        }
        os_log_type_t v11 = 0;
LABEL_20:

        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      }
      else
      {
        Mutable = 0;
      }
LABEL_21:
      CFDataGetBytePtr(*(CFDataRef *)(a2 + 112));
      CFDataGetLength(*(CFDataRef *)(a2 + 112));
      if (*(void *)(a1 + 48)) {
        uint64_t v15 = NEHelperCopyXPCEndpointForIdentityProxyExtended();
      }
      else {
        uint64_t v15 = NEHelperCopyXPCEndpointForIdentityProxy();
      }
      BOOL v16 = (void *)v15;
      if (v15)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F292A0]);
        [v17 _setEndpoint:v16];
        v30[0] = 0;
        BOOL v18 = (__SecIdentity *)[MEMORY[0x1E4F3B450] createIdentityFromEndpoint:v17 error:v30];
        os_log_type_t v19 = (__SecIdentity *)v30[0];
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        uint64_t v21 = v20;
        if (v19)
        {
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
            __int16 v36 = 2112;
            uint64_t v37 = v19;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch identity from NEHelper: %@", buf, 0x16u);
          }

          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
        }
        else
        {
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
            __int16 v36 = 2112;
            uint64_t v37 = v18;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s Fetched identity %@ from NEHelper", buf, 0x16u);
          }
        }
        if (v18)
        {
          if (Mutable) {
            sec_identity_t v24 = sec_identity_create_with_certificates(v18, Mutable);
          }
          else {
            sec_identity_t v24 = sec_identity_create(v18);
          }
          char v25 = v24;
          if ((*(_WORD *)(a2 + 215) & 0x2000) != 0)
          {
            *(void *)buf = 0;
            if (!SecIdentityCopyCertificate(v18, (SecCertificateRef *)buf))
            {
              SecKeyRef v26 = SecCertificateCopyKey(*(SecCertificateRef *)buf);
              if (v26)
              {
                uint64_t v27 = (const void *)SecKeyCopySubjectPublicKeyInfo();
                if (v27)
                {
                  uint64_t v28 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
                  CFArrayAppendValue(v28, v27);
                  sec_protocol_options_set_client_raw_public_key_certificates();
                  if (v28) {
                    CFRelease(v28);
                  }
                  CFRelease(v27);
                  Mutable = 0;
                }
                CFRelease(v26);
              }
              if (*(void *)buf) {
                CFRelease(*(CFTypeRef *)buf);
              }
            }
          }
          sec_protocol_options_set_local_identity(*(sec_protocol_options_t *)(a2 + 96), v25);

          CFRelease(v18);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v22 = (id)gLogObj;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          char v23 = *(__SecIdentity **)(a2 + 112);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
          __int16 v36 = 2112;
          uint64_t v37 = v23;
          _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s Unable to copy xpc endpoint for client identity %@", buf, 0x16u);
        }

        if (Mutable) {
          CFRelease(Mutable);
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      }
    }
    _Block_object_dispose(&v31, 8);
  }
  return 1;
}

void sub_183AD6E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_fetch_client_identity_reference_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 56)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return 1;
}

uint64_t nw_quic_connection_get_selected_key_index(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic(v1))
  {
    if (nw_protocol_options_is_quic_stream(v1))
    {
      id v2 = nw_quic_stream_copy_shared_connection_options(v1);

      id v1 = v2;
    }
    *(void *)uint64_t v21 = 0;
    *(void *)&v21[8] = v21;
    *(void *)&v21[16] = 0x2020000000;
    char v22 = -1;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_quic_connection_get_selected_key_index_block_invoke;
    v15[3] = &unk_1E5248E90;
    v15[4] = v21;
    nw_protocol_options_access_handle(v1, v15);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(unsigned __int8 *)(*(void *)&v21[8] + 24);
      *(_DWORD *)buf = 136446466;
      BOOL v18 = "nw_quic_connection_get_selected_key_index";
      __int16 v19 = 1024;
      int v20 = v4;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Getting key index=%d", buf, 0x12u);
    }

    uint64_t v5 = *(unsigned __int8 *)(*(void *)&v21[8] + 24);
    _Block_object_dispose(v21, 8);
    goto LABEL_7;
  }
  CFIndex v7 = __nwlog_obj();
  *(_DWORD *)uint64_t v21 = 136446210;
  *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
  CFAllocatorRef v8 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v16 = 0;
  if (__nwlog_fault(v8, buf, &v16))
  {
    if (buf[0] == 17)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = buf[0];
      if (os_log_type_enabled(v9, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v21 = 136446210;
        *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null nw_protocol_options_is_quic(options)", v21, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = buf[0];
      BOOL v13 = os_log_type_enabled(v9, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)uint64_t v21 = 136446466;
          *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
          *(_WORD *)&v21[12] = 2082;
          *(void *)&v21[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s", v21, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)uint64_t v21 = 136446210;
        *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace", v21, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = buf[0];
      if (os_log_type_enabled(v9, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v21 = 136446210;
        *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded", v21, 0xCu);
      }
    }
  }
LABEL_24:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 255;
LABEL_7:

  return v5;
}

void sub_183AD72D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_selected_key_index_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 214);
  return 1;
}

void nw_quic_connection_set_local_identity(void *a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = a2;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    uint64_t v5 = nw_utilities_public_key_info_for_sec_identity(v4);
    if (v5)
    {
      BOOL v6 = nw_quic_copy_sec_protocol_options(v3);
      CFIndex v7 = v6;
      if (v6)
      {
        sec_protocol_options_set_local_identity(v6, v4);
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 3221225472;
        v32[2] = __nw_quic_connection_set_local_identity_block_invoke;
        v32[3] = &unk_1E5248F68;
        id v33 = v5;
        nw_protocol_options_access_handle(v3, v32);

LABEL_5:
LABEL_6:

        goto LABEL_7;
      }
      char v16 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v37 = "nw_quic_connection_set_local_identity";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null sec_options", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
          BOOL v18 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v37 = "nw_quic_connection_set_local_identity";
              __int16 v38 = 2082;
              CFDataRef v39 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null sec_options, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_60;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null sec_options, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          BOOL v18 = __nwlog_obj();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s called with null sec_options, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_60:
      if (v17) {
        free(v17);
      }
      goto LABEL_5;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v37 = "nw_quic_connection_set_local_identity";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v13, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_quic_connection_set_local_identity";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null publicKeyInfo", buf, 0xCu);
        }
      }
      else if (v34)
      {
        uint64_t v23 = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v14, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            __int16 v38 = 2082;
            CFDataRef v39 = v23;
            _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null publicKeyInfo, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          goto LABEL_55;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_quic_connection_set_local_identity";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null publicKeyInfo, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_quic_connection_set_local_identity";
          _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null publicKeyInfo, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_55:
    if (v13) {
      free(v13);
    }
    goto LABEL_6;
  }
  CFAllocatorRef v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v37 = "nw_quic_connection_set_local_identity";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_quic_connection_set_local_identity";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v34)
    {
      int v20 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v37 = "nw_quic_connection_set_local_identity";
          __int16 v38 = 2082;
          CFDataRef v39 = v20;
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_50;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_quic_connection_set_local_identity";
        _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_quic_connection_set_local_identity";
        _os_log_impl(&dword_1830D4000, v10, v29, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_50:
  if (v9) {
    free(v9);
  }
LABEL_7:
}

void sub_183AD7A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_identity_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = *(const void **)(a2 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 128) = 0;
  }
  *(void *)(a2 + 128) = *(id *)(a1 + 32);
  return 1;
}

id nw_quic_connection_copy_local_public_key(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    char v16 = __Block_byref_object_copy__55989;
    id v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_copy_local_public_key_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AD7E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_copy_local_public_key_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_quic_connection_set_trusted_peer_keys(void *a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  os_log_type_t v7 = a3;
  if (nw_protocol_options_is_quic(v5))
  {
    if (nw_protocol_options_is_quic_stream(v5))
    {
      CFAllocatorRef v8 = nw_quic_stream_copy_shared_connection_options(v5);

      uint64_t v5 = v8;
    }
    if (nw_protocol_options_access_handle(v5, &__block_literal_global_21_56336))
    {
      os_log_type_t v9 = nw_quic_copy_sec_protocol_options(v5);
      objc_initWeak((id *)location, v5);
      verify_block[0] = MEMORY[0x1E4F143A8];
      verify_block[1] = 3221225472;
      verify_block[2] = __nw_quic_connection_set_trusted_peer_keys_block_invoke_22;
      verify_block[3] = &unk_1E5244320;
      id v19 = v6;
      objc_copyWeak(&v20, (id *)location);
      sec_protocol_options_set_verify_block(v9, verify_block, v7);
      objc_destroyWeak(&v20);

      objc_destroyWeak((id *)location);
    }
    goto LABEL_6;
  }
  BOOL v10 = __nwlog_obj();
  *(_DWORD *)location = 136446210;
  *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v11, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null nw_protocol_options_is_quic(options)", location, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
          __int16 v24 = 2082;
          BOOL v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s", location, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v16)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace", location, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded", location, 0xCu);
      }
    }
  }
LABEL_23:
  if (v11) {
    free(v11);
  }
LABEL_6:
}

void sub_183AD8228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v25);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __nw_quic_connection_set_trusted_peer_keys_block_invoke_22(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  os_log_type_t v7 = a4;
  unsigned __int8 v25 = -1;
  uint64_t v8 = nw_utilities_trust_ref_matches_public_key(v6, *(void **)(a1 + 32), &v25);
  v7[2](v7, v8);
  if (v25 != 255)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    BOOL v10 = WeakRetained;
    if (!WeakRetained)
    {
LABEL_12:

      goto LABEL_13;
    }
    int v11 = v25;
    id v12 = WeakRetained;
    if (nw_protocol_options_is_quic_connection(v12))
    {

LABEL_6:
      os_log_type_t v14 = v12;
      if (nw_protocol_options_is_quic_stream(v12))
      {
        id v15 = nw_quic_stream_copy_shared_connection_options(v12);

        os_log_type_t v14 = v15;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s Setting key index=%d", buf, 0x12u);
      }

      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL41nw_quic_connection_set_selected_key_indexPU33objcproto22OS_nw_protocol_options8NSObjecth_block_invoke;
      os_log_type_t v29 = &__block_descriptor_33_e9_B16__0_v8l;
      char v30 = v11;
      nw_protocol_options_access_handle(v14, buf);
LABEL_11:

      goto LABEL_12;
    }
    BOOL is_quic_stream = nw_protocol_options_is_quic_stream(v12);

    if (is_quic_stream) {
      goto LABEL_6;
    }
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
    id v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v18, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null nw_protocol_options_is_quic(options)", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        id v19 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
          _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v19 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_30:
    if (v18) {
      free(v18);
    }
    os_log_type_t v14 = v12;
    goto LABEL_11;
  }
LABEL_13:
}

void sub_183AD86A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_quic_connection_set_selected_key_indexPU33objcproto22OS_nw_protocol_options8NSObjecth_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 214) = *(unsigned char *)(a1 + 32);
  return 1;
}

BOOL __nw_quic_connection_set_trusted_peer_keys_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 128);
  if (v2)
  {
    CFRelease(*(CFTypeRef *)(a2 + 128));
    *(void *)(a2 + 128) = 0;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136446210;
      os_log_type_t v7 = "nw_quic_connection_set_trusted_peer_keys_block_invoke";
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s Not setting verify block, local_public_key is NULL", (uint8_t *)&v6, 0xCu);
    }
  }
  return v2 != 0;
}

void nw_quic_connection_set_use_swift_tls(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_use_swift_tls_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AD8AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_use_swift_tls_block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a2 + 215);
  if ((*(unsigned char *)(a1 + 32) != 0) == ((v4 & 0x1000) == 0))
  {
    unsigned int v6 = v4 & 0xFFFFEFFF | (*(unsigned __int8 *)(a2 + 217) << 16);
    *(unsigned char *)(a2 + 217) = BYTE2(v6);
    *(_WORD *)(a2 + 215) = v6 | ((v3 != 0) << 12);
    if (v3)
    {
      options = nw_swift_tls_create_options(a3);
    }
    else
    {
      uint64_t v8 = (void *)nw_protocol_boringssl_copy_definition();
      options = nw_protocol_create_options(v8);
    }
    objc_storeStrong((id *)(a2 + 96), options);
  }
  return 1;
}

void sub_183AD8B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_use_x25519(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_use_x25519_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_quic_connection_set_use_x25519";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_x25519";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_quic_connection_set_use_x25519";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_x25519";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_x25519";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AD8E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_use_x25519_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  int v3 = *(unsigned __int16 *)(a2 + 215);
  if ((*(unsigned char *)(a1 + 32) != 0) == ((v3 & 0x4000) == 0))
  {
    unsigned int v4 = v3 & 0xFFFFBFFF | (*(unsigned __int8 *)(a2 + 217) << 16);
    *(unsigned char *)(a2 + 217) = BYTE2(v4);
    *(_WORD *)(a2 + 215) = v4 | ((v2 != 0) << 14);
    if (v2) {
      MEMORY[0x185318530](*(void *)(a2 + 96), 29);
    }
  }
  return 1;
}

void nw_quic_connection_set_client_identity_is_raw_public_Key(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_client_identity_is_raw_public_Key_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AD91E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_clear_tls_application_protocols(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic(v1))
  {
    if (nw_protocol_options_is_quic_stream(v1))
    {
      int v2 = nw_quic_stream_copy_shared_connection_options(v1);

      id v1 = v2;
    }
    nw_protocol_options_access_handle(v1, &__block_literal_global_25);
    goto LABEL_5;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_quic_clear_tls_application_protocols";
  unsigned int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_quic_clear_tls_application_protocols";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null nw_protocol_options_is_quic(options)", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v14 = "nw_quic_clear_tls_application_protocols";
          __int16 v15 = 2082;
          BOOL v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_quic_clear_tls_application_protocols";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_quic_clear_tls_application_protocols";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v4) {
    free(v4);
  }
LABEL_5:
}

void sub_183AD94E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_clear_tls_application_protocols_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 96)) {
    sec_protocol_options_clear_tls_application_protocols();
  }
  return 1;
}

void nw_quic_iterate_tls_application_protocols(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_quic(v3))
  {
    sec_protocol_options_t v5 = nw_quic_copy_sec_protocol_options(v3);
    os_log_type_t v6 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
    os_log_type_t v7 = v6;
    if (v6 && object_getClass(v6) == (Class)MEMORY[0x1E4F14568])
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_quic_iterate_tls_application_protocols_block_invoke;
      applier[3] = &unk_1E5244348;
      id v17 = v4;
      xpc_array_apply(v7, applier);
    }
    goto LABEL_6;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v21 = "nw_quic_iterate_tls_application_protocols";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_quic_iterate_tls_application_protocols";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null nw_protocol_options_is_quic(options)", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          char v21 = "nw_quic_iterate_tls_application_protocols";
          __int16 v22 = 2082;
          BOOL v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_quic_iterate_tls_application_protocols";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_quic_iterate_tls_application_protocols";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v9) {
    free(v9);
  }
LABEL_6:
}

void sub_183AD9854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_iterate_tls_application_protocols_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    xpc_string_get_string_ptr(v4);
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183AD9908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZL44nw_protocol_dummy_quic_connection_identifierv_block_invoke()
{
  strcpy((char *)&nw_protocol_dummy_quic_connection_identifier(void)::dummy_quic_connection_identifier, "quic-connection");
  *(void *)&double result = 0x200000003;
  qword_1E8F7A098 = 0x200000003;
  return result;
}

double ___ZL40nw_protocol_dummy_quic_stream_identifierv_block_invoke()
{
  strcpy((char *)&nw_protocol_dummy_quic_stream_identifier(void)::dummy_quic_stream_identifier, "quic");
  *(void *)&double result = 0x200000003;
  qword_1E8F7A0C8 = 0x200000003;
  return result;
}

void nw_quic_connection_set_initial_max_data(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_initial_max_data_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_quic_connection_set_initial_max_data";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_data";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_quic_connection_set_initial_max_data";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_data";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_data";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AD9C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_data_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_set_initial_max_data(nw_protocol_options_t options, uint64_t initial_max_data)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_data(v3, initial_max_data);
}

void sub_183AD9CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_initial_max_data(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_data = nw_quic_connection_get_initial_max_data(v1);

  return initial_max_data;
}

void sub_183AD9D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_set_initial_max_streams_bidirectional(nw_protocol_options_t options, uint64_t initial_max_streams_bidirectional)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_streams_bidirectional(v3, initial_max_streams_bidirectional);
}

void sub_183AD9D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_initial_max_streams_bidirectional(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_streams_bidirectional = nw_quic_connection_get_initial_max_streams_bidirectional(v1);

  return initial_max_streams_bidirectional;
}

void sub_183AD9DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_set_initial_max_streams_unidirectional(nw_protocol_options_t options, uint64_t initial_max_streams_unidirectional)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_streams_unidirectional(v3, initial_max_streams_unidirectional);
}

void sub_183AD9E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_initial_max_streams_unidirectional(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_streams_unidirectional = nw_quic_connection_get_initial_max_streams_unidirectional(v1);

  return initial_max_streams_unidirectional;
}

void sub_183AD9E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_stream_data_bidirectional_local_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_set_initial_max_stream_data_bidirectional_local(nw_protocol_options_t options, uint64_t initial_max_stream_data_bidirectional_local)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_stream_data_bidirectional_local(v3, initial_max_stream_data_bidirectional_local);
}

void sub_183AD9EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_initial_max_stream_data_bidirectional_local(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_stream_data_bidirectional_local = nw_quic_connection_get_initial_max_stream_data_bidirectional_local(v1);

  return initial_max_stream_data_bidirectional_local;
}

void sub_183AD9F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_initial_max_stream_data_bidirectional_remote_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADA1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_stream_data_bidirectional_remote_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_set_initial_max_stream_data_bidirectional_remote(nw_protocol_options_t options, uint64_t initial_max_stream_data_bidirectional_remote)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(v3, initial_max_stream_data_bidirectional_remote);
}

void sub_183ADA270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_initial_max_stream_data_bidirectional_remote(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_stream_data_bidirectional_remote = nw_quic_connection_get_initial_max_stream_data_bidirectional_remote(v1);

  return initial_max_stream_data_bidirectional_remote;
}

void sub_183ADA2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_max_stream_data_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_initial_max_stream_data_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADA5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_stream_data_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_set_initial_max_stream_data_unidirectional(nw_protocol_options_t options, uint64_t initial_max_stream_data_unidirectional)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_stream_data_unidirectional(v3, initial_max_stream_data_unidirectional);
}

void sub_183ADA620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_initial_max_stream_data_unidirectional(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_stream_data_unidirectional = nw_quic_connection_get_initial_max_stream_data_unidirectional(v1);

  return initial_max_stream_data_unidirectional;
}

void sub_183ADA668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_set_idle_timeout(nw_protocol_options_t options, uint32_t idle_timeout)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_idle_timeout(v3, idle_timeout);
}

void sub_183ADA6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint32_t nw_quic_get_idle_timeout(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  idle_timeuuid_t out = nw_quic_connection_get_idle_timeout(v1);

  return idle_timeout;
}

void sub_183ADA70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_stream_path_affinity(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_stream_path_affinity_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_stream_path_affinity";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_stream_path_affinity";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_stream_path_affinity";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_stream_path_affinity";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_stream_path_affinity";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADAA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_stream_path_affinity_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 196) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_quic_set_stream_path_affinity(void *a1, int a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_stream_path_affinity(v3, a2);
}

void sub_183ADAA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_stream_path_affinity(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t stream_path_affinity = nw_quic_connection_get_stream_path_affinity(v1);

  return stream_path_affinity;
}

void sub_183ADAABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_udp_payload_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_max_udp_payload_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_max_udp_payload_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_udp_payload_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_max_udp_payload_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_udp_payload_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_udp_payload_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADADB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_udp_payload_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 204) = *(_WORD *)(a1 + 32);
  return 1;
}

void nw_quic_set_max_udp_payload_size(nw_protocol_options_t options, uint16_t max_udp_payload_size)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_max_udp_payload_size(v3, max_udp_payload_size);
}

void sub_183ADAE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint16_t nw_quic_get_max_udp_payload_size(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  max_udp_payload_size_t size = nw_quic_connection_get_max_udp_payload_size(v1);

  return max_udp_payload_size;
}

void sub_183ADAE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_datagram_frame_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_max_datagram_frame_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_max_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_max_datagram_frame_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADB160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_datagram_frame_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 206) = *(_WORD *)(a1 + 32);
  return 1;
}

void nw_quic_set_max_datagram_frame_size(nw_protocol_options_t options, uint16_t max_datagram_frame_size)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_max_datagram_frame_size(v3, max_datagram_frame_size);
}

void sub_183ADB1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint16_t nw_quic_get_max_datagram_frame_size(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  max_datagram_frame_size_t size = nw_quic_connection_get_max_datagram_frame_size(v1);

  return max_datagram_frame_size;
}

void sub_183ADB21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_packet_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_initial_packet_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_initial_packet_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_initial_packet_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_initial_packet_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_initial_packet_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_initial_packet_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADB510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_packet_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 208) = *(_WORD *)(a1 + 32);
  return 1;
}

void nw_quic_set_initial_packet_size(void *a1, __int16 a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_initial_packet_size(v3, a2);
}

void sub_183ADB584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_initial_packet_size(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  initial_packet_size_t size = nw_quic_connection_get_initial_packet_size(v1);

  return initial_packet_size;
}

void sub_183ADB5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_set_keepalive_count(void *a1, __int16 a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_keepalive_count(v3, a2);
}

void sub_183ADB628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_keepalive_count(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t keepalive_count = nw_quic_connection_get_keepalive_count(v1);

  return keepalive_count;
}

void sub_183ADB670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_ack_delay_size(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_ack_delay_size_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_ack_delay_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_ack_delay_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_ack_delay_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_ack_delay_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_ack_delay_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADB964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_ack_delay_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 212) = *(unsigned char *)(a1 + 32);
  return 1;
}

void nw_quic_set_ack_delay_size(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_ack_delay_size(v3, a2);
}

void sub_183ADB9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_ack_delay_size(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  ack_delay_size_t size = nw_quic_connection_get_ack_delay_size(v1);

  return ack_delay_size;
}

void sub_183ADBA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_source_connection_id(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_set_source_connection_id_block_invoke;
    v13[3] = &unk_1E5248F68;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_source_connection_id";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_source_connection_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_source_connection_id";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_source_connection_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_source_connection_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183ADBD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_source_connection_id_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_quic_set_source_connection_id(void *a1, void *a2)
{
  id v4 = a2;
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_source_connection_id(v3, v4);
}

void sub_183ADBDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id nw_quic_get_source_connection_id(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  id source_connection_id = nw_quic_connection_get_source_connection_id(v1);

  return source_connection_id;
}

void sub_183ADBE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_paths_per_interface(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_max_paths_per_interface_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_max_paths_per_interface";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_paths_per_interface";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_max_paths_per_interface";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_paths_per_interface";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_max_paths_per_interface";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADC128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_paths_per_interface_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 213) = *(unsigned char *)(a1 + 32);
  return 1;
}

void nw_quic_set_max_paths_per_interface(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_max_paths_per_interface(v3, a2);
}

void sub_183ADC19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_max_paths_per_interface(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t max_paths_per_interface = nw_quic_connection_get_max_paths_per_interface(v1);

  return max_paths_per_interface;
}

void sub_183ADC1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_pmtud(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_pmtud_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_pmtud";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_pmtud";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADC4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_pmtud_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 215) = *(_WORD *)(a2 + 215) & 0xFFFE | *(unsigned __int8 *)(a1 + 32);
  return 1;
}

void nw_quic_set_pmtud(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_pmtud(v3, a2);
}

void sub_183ADC558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_pmtud(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL pmtud = nw_quic_connection_get_pmtud(v1);

  return pmtud;
}

void sub_183ADC5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_pmtud_ignore_cost(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_pmtud_ignore_cost_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_pmtud_ignore_cost";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud_ignore_cost";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_pmtud_ignore_cost";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud_ignore_cost";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud_ignore_cost";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADC894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_pmtud_ignore_cost_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFFD | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFFD | (2 * (*(unsigned char *)(a1 + 32) & 0x7F));
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_pmtud_ignore_cost(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_pmtud_ignore_cost(v3, a2);
}

void sub_183ADC928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_pmtud_ignore_cost(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL pmtud_ignore_cost = nw_quic_connection_get_pmtud_ignore_cost(v1);

  return pmtud_ignore_cost;
}

void sub_183ADC970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_pmtud_for_non_transport(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_pmtud_for_non_transport_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_pmtud_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_pmtud_for_non_transport";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_pmtud_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADCC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_pmtud_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFFB | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFFB | (4 * (*(unsigned char *)(a1 + 32) & 0x3F));
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

BOOL nw_quic_connection_get_pmtud_for_non_transport(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_pmtud_for_non_transport_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183ADCFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_pmtud_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 215) & 4) != 0;
  return 1;
}

void nw_quic_set_pmtud_for_non_transport(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_pmtud_for_non_transport(v3, a2);
}

void sub_183ADD05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_pmtud_for_non_transport(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL pmtud_for_non_transport = nw_quic_connection_get_pmtud_for_non_transport(v1);

  return pmtud_for_non_transport;
}

void sub_183ADD0A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_migration_for_non_transport(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_migration_for_non_transport_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADD398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_migration_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFF7FFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(_WORD *)uint64_t v2 = v3 & 0x7FFF | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

BOOL nw_quic_connection_get_migration_for_non_transport(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_migration_for_non_transport_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183ADD6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_migration_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned __int16 *)(a2 + 215) >> 15;
  return 1;
}

void nw_quic_set_migration_for_non_transport(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_migration_for_non_transport(v3, a2);
}

void sub_183ADD78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_migration_for_non_transport(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL migration_for_non_transport = nw_quic_connection_get_migration_for_non_transport(v1);

  return migration_for_non_transport;
}

void sub_183ADD7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_retry(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_retry_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_retry";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_retry";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_retry";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_retry";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_retry";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADDAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_retry_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFF7 | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFF7 | (8 * (*(unsigned char *)(a1 + 32) & 0x1F));
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

BOOL nw_quic_connection_get_retry(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_retry_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183ADDE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_retry_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 215) & 8) != 0;
  return 1;
}

void nw_quic_set_retry(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_retry(v3, a2);
}

void sub_183ADDEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_retry(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL retry = nw_quic_connection_get_retry(v1);

  return retry;
}

void sub_183ADDF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_force_version_negotiation(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_force_version_negotiation_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADE1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_force_version_negotiation_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFEF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFEF | (16 * (*(unsigned char *)(a1 + 32) & 0xF));
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_force_version_negotiation(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_force_version_negotiation(v3, a2);
}

void sub_183ADE290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_force_version_negotiation(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL force_version_negotiation = nw_quic_connection_get_force_version_negotiation(v1);

  return force_version_negotiation;
}

void sub_183ADE2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_datagram_variant_flow_id_enabled(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_datagram_variant_flow_id_enabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADE5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_datagram_variant_flow_id_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFDF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFDF | (32 * (*(unsigned char *)(a1 + 32) & 7));
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_datagram_variant_flow_id_enabled(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_datagram_variant_flow_id_enabled(v3, a2);
}

void sub_183ADE660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_datagram_variant_flow_id_enabled(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL datagram_variant_flow_id_enabled = nw_quic_connection_get_datagram_variant_flow_id_enabled(v1);

  return datagram_variant_flow_id_enabled;
}

void sub_183ADE6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_datagram_quarter_stream_id(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_datagram_quarter_stream_id_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADE99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_datagram_quarter_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFBF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFBF | ((*(unsigned char *)(a1 + 32) & 3) << 6);
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_datagram_quarter_stream_id(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_datagram_quarter_stream_id(v3, a2);
}

void sub_183ADEA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_datagram_quarter_stream_id(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL datagram_quarter_stream_id = nw_quic_connection_get_datagram_quarter_stream_id(v1);

  return datagram_quarter_stream_id;
}

void sub_183ADEA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_datagram_context_id(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_datagram_context_id_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADED6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFF7F | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFF7F | ((*(unsigned char *)(a1 + 32) & 1) << 7);
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_datagram_context_id(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_datagram_context_id(v3, a2);
}

void sub_183ADEE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_datagram_context_id(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL datagram_context_id = nw_quic_connection_get_datagram_context_id(v1);

  return datagram_context_id;
}

void sub_183ADEE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_disable_ecn_echo(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_disable_ecn_echo_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADF13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_disable_ecn_echo_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFEFF | (*(unsigned __int8 *)(a1 + 32) << 8);
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_disable_ecn_echo(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_disable_ecn_echo(v3, a2);
}

void sub_183ADF1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_disable_ecn_echo(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL disable_ecn_echo = nw_quic_connection_get_disable_ecn_echo(v1);

  return disable_ecn_echo;
}

void sub_183ADF214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_disable_ecn(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_disable_ecn_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_disable_ecn";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_disable_ecn";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADF508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_disable_ecn_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFDFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(_WORD *)uint64_t v2 = v3 & 0xFDFF | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_disable_ecn(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_disable_ecn(v3, a2);
}

void sub_183ADF598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_disable_ecn(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL disable_ecn = nw_quic_connection_get_disable_ecn(v1);

  return disable_ecn;
}

void sub_183ADF5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_enable_l4s(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_enable_l4s_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_enable_l4s";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_l4s";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_enable_l4s";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_l4s";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_l4s";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADF8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_enable_l4s_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 200) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_quic_set_enable_l4s(void *a1, int a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_enable_l4s(v3, a2);
}

void sub_183ADF948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_enable_l4s(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t enable_l4s = nw_quic_connection_get_enable_l4s(v1);

  return enable_l4s;
}

void sub_183ADF990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_is_speculative_attempt(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_is_speculative_attempt_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_is_speculative_attempt";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_is_speculative_attempt";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_is_speculative_attempt";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_is_speculative_attempt";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_is_speculative_attempt";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183ADFC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_is_speculative_attempt_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFEFFFF | (*(unsigned __int8 *)(a1 + 32) << 16);
  *(_WORD *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_is_speculative_attempt(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_is_speculative_attempt(v3, a2);
}

void sub_183ADFD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_is_speculative_attempt(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL is_speculative_attempt = nw_quic_connection_get_is_speculative_attempt(v1);

  return is_speculative_attempt;
}

void sub_183ADFD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_disable_spin_bit(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_disable_spin_bit_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE0050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_disable_spin_bit_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFDFFFF | (*(unsigned __int8 *)(a1 + 32) << 17);
  *(_WORD *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_disable_spin_bit(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_disable_spin_bit(v3, a2);
}

void sub_183AE00E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_disable_spin_bit(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL disable_spin_bit = nw_quic_connection_get_disable_spin_bit(v1);

  return disable_spin_bit;
}

void sub_183AE0128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_spin_bit_value(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_spin_bit_value_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE041C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_spin_bit_value_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFBFFFF | (*(unsigned __int8 *)(a1 + 32) << 18);
  *(_WORD *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

BOOL nw_quic_connection_get_spin_bit_value(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_spin_bit_value_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_spin_bit_value_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 217) & 4) != 0;
  return 1;
}

void nw_quic_set_spin_bit_value(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_spin_bit_value(v3, a2);
}

void sub_183AE0810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_spin_bit_value(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL spin_bit_value = nw_quic_connection_get_spin_bit_value(v1);

  return spin_bit_value;
}

void sub_183AE0858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_enable_multipath(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_enable_multipath_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_enable_multipath";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_multipath";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_enable_multipath";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_multipath";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_multipath";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE0B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_enable_multipath_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFEFFFFF | (*(unsigned __int8 *)(a1 + 32) << 20);
  *(_WORD *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_enable_multipath(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_enable_multipath(v3, a2);
}

void sub_183AE0BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_enable_multipath(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL enable_multipath = nw_quic_connection_get_enable_multipath(v1);

  return enable_multipath;
}

void sub_183AE0C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_probe_simultaneously(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_probe_simultaneously_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE0F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_probe_simultaneously_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFDFFFFF | (*(unsigned __int8 *)(a1 + 32) << 21);
  *(_WORD *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_quic_set_probe_simultaneously(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_probe_simultaneously(v3, a2);
}

void sub_183AE0FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_get_probe_simultaneously(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL probe_simultaneously = nw_quic_connection_get_probe_simultaneously(v1);

  return probe_simultaneously;
}

void sub_183AE0FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_source_connection_id_length(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_source_connection_id_length_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE12E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_source_connection_id_length_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
    if (*(unsigned char *)(a1 + 32))
    {
      memset(buffer, 0, 20);
      if (v3 >= 0x14) {
        size_t v4 = 20;
      }
      else {
        size_t v4 = v3;
      }
      dispatch_data_t v5 = dispatch_data_create(buffer, v4, 0, 0);
      os_log_type_t v6 = *(void **)(a2 + 152);
      *(void *)(a2 + 152) = v5;
    }
    else
    {
      os_log_type_t v6 = *(void **)(a2 + 152);
      *(void *)(a2 + 152) = 0;
    }

    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v8 = (id)gLogObj;
  *(_DWORD *)buffer = 136446210;
  *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buffer = 136446210;
        *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
        os_log_type_t v12 = "%{public}s called with null quic_options";
LABEL_21:
        char v16 = v10;
        os_log_type_t v17 = v11;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v16, v17, v12, buffer, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buffer = 136446466;
            *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
            *(_WORD *)&buffer[12] = 2082;
            *(void *)&buffer[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null quic_options, dumping backtrace:%{public}s", buffer, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v15) {
          goto LABEL_23;
        }
        *(_DWORD *)buffer = 136446210;
        *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
        os_log_type_t v12 = "%{public}s called with null quic_options, no backtrace";
        char v16 = v10;
        os_log_type_t v17 = v14;
        goto LABEL_22;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buffer = 136446210;
        *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
        os_log_type_t v12 = "%{public}s called with null quic_options, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_23:
  }
LABEL_24:
  if (v9) {
    free(v9);
  }
  return 1;
}

uint64_t nw_quic_connection_get_source_connection_id_length(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 8;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_source_connection_id_length_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  size_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
  dispatch_data_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE193C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_source_connection_id_length_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(NSObject **)(a2 + 152);
  if (v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = dispatch_data_get_size(v3);
  }
  return 1;
}

void nw_quic_set_source_connection_id_length(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_source_connection_id_length(v3, a2);
}

void sub_183AE19F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_source_connection_id_length(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  source_connection_id_size_t length = nw_quic_connection_get_source_connection_id_length(v1);

  return source_connection_id_length;
}

void sub_183AE1A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_session_state(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_quic_connection_set_session_state_block_invoke;
    v16[3] = &unk_1E5249138;
    id v17 = v6;
    id v18 = v7;
    nw_protocol_options_access_handle(v5, v16);

    goto LABEL_3;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v22 = "nw_quic_connection_set_session_state";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v22 = "nw_quic_connection_set_session_state";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_183AE1D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_session_state_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_quic_connection_set_session_state_update_block(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_quic_connection_set_session_state_update_block_block_invoke;
    v16[3] = &unk_1E52491D8;
    id v18 = v6;
    id v17 = v7;
    nw_protocol_options_access_handle(v5, v16);

    goto LABEL_3;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v22 = "nw_quic_connection_set_session_state_update_block";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state_update_block";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v22 = "nw_quic_connection_set_session_state_update_block";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state_update_block";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state_update_block";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_183AE2110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_session_state_update_block_block_invoke(uint64_t a1, uint64_t a2)
{
  size_t v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 160);
  *(void *)(a2 + 160) = v4;

  objc_storeStrong((id *)(a2 + 168), *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_quic_connection_execute_session_state_update_block_block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t __nw_quic_connection_execute_max_streams_update_block_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(const void **)(a2 + 176);
  if (v3)
  {
    id v5 = _Block_copy(v3);
    id v6 = *(NSObject **)(a2 + 184);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_quic_connection_execute_max_streams_update_block_block_invoke_2;
    block[3] = &unk_1E5244390;
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    id v11 = v5;
    uint64_t v12 = v7;
    id v8 = v5;
    dispatch_async(v6, block);
  }
  return 1;
}

uint64_t __nw_quic_connection_execute_max_streams_update_block_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
}

void nw_quic_stream_set_is_datagram(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_is_datagram_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  size_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_quic_stream_set_is_datagram";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_stream_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          id v17 = "nw_quic_stream_set_is_datagram";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_stream_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_stream_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE2560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a2 + 24) & 0xFD | (2 * *(unsigned char *)(a1 + 32));
  return 1;
}

void nw_quic_stream_set_associated_stream_id(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_associated_stream_id_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  size_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_quic_stream_set_associated_stream_id";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_associated_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_quic_stream_set_associated_stream_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_associated_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_associated_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE2880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_associated_stream_id_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_stream_set_datagram_context_id(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_datagram_context_id_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  size_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_quic_stream_set_datagram_context_id";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_quic_stream_set_datagram_context_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE2B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 32);
  return 1;
}

id nw_quic_options_copy_local_public_key(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_quic_options_copy_local_public_key";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v8, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_quic_options_copy_local_public_key";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            char v26 = "nw_quic_options_copy_local_public_key";
            __int16 v27 = 2082;
            BOOL v28 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_quic_options_copy_local_public_key";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_quic_options_copy_local_public_key";
          _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_38:
    if (v8) {
      free(v8);
    }
    id v2 = 0;
    goto LABEL_46;
  }
  id v2 = v1;
  if (!nw_protocol_options_is_quic_connection(v2))
  {
    BOOL is_quic_stream = nw_protocol_options_is_quic_stream(v2);

    if (is_quic_stream) {
      goto LABEL_5;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_quic_options_copy_local_public_key";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v12, &type, &v23)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_options_copy_local_public_key";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null nw_protocol_options_is_quic(options)", buf, 0xCu);
      }
    }
    else if (v23)
    {
      __int16 v18 = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v13, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_quic_options_copy_local_public_key";
          __int16 v27 = 2082;
          BOOL v28 = v18;
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        goto LABEL_44;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_options_copy_local_public_key";
        _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_options_copy_local_public_key";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_44:
    if (v12) {
      free(v12);
    }
LABEL_46:
    id v5 = 0;
    goto LABEL_8;
  }

LABEL_5:
  if (nw_protocol_options_is_quic_stream(v2))
  {
    id v4 = nw_quic_stream_copy_shared_connection_options(v2);

    id v2 = v4;
  }
  id v5 = nw_quic_connection_copy_local_public_key(v2);
LABEL_8:

  return v5;
}

void sub_183AE30B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_is_quic(nw_protocol_metadata_t metadata)
{
  id v1 = metadata;
  BOOL v2 = nw_protocol_metadata_is_quic_connection(v1) || nw_protocol_metadata_is_quic_stream(v1);

  return v2;
}

void sub_183AE311C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

sec_protocol_metadata_t nw_quic_copy_sec_protocol_metadata(nw_protocol_metadata_t metadata)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = metadata;
  if (v1)
  {
    BOOL v2 = v1;
    if (nw_protocol_metadata_is_quic_stream(v1))
    {
      id v3 = nw_quic_stream_copy_connection_metadata(v2);

      BOOL v2 = v3;
    }
    id v4 = nw_quic_connection_copy_sec_protocol_metadata(v2);
    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
  BOOL v2 = 0;
  id v4 = 0;
LABEL_5:

  return v4;
}

void sub_183AE33E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_quic_stream_copy_connection_metadata(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v16 = __Block_byref_object_copy__55989;
    BOOL v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_copy_connection_metadata_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_copy_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(id *)(a2 + 32));
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_remote_transport_parameters(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  if (nw_protocol_options_is_quic_connection(v13))
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_quic_set_remote_transport_parameters_block_invoke;
    v22[3] = &__block_descriptor_80_e9_B16__0_v8l;
    void v22[4] = a2;
    v22[5] = a3;
    v22[6] = a4;
    void v22[7] = a5;
    v22[8] = a6;
    v22[9] = a7;
    nw_protocol_options_access_handle(v13, v22);
    goto LABEL_3;
  }
  char v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v26 = "nw_quic_set_remote_transport_parameters";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v15, &v24, &v23))
  {
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = v24;
      if (os_log_type_enabled(v16, v24))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_set_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v19 = v24;
      BOOL v20 = os_log_type_enabled(v16, v24);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_quic_set_remote_transport_parameters";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_set_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = v24;
      if (os_log_type_enabled(v16, v24))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_set_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v15) {
    free(v15);
  }
LABEL_3:
}

void sub_183AE3AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_set_remote_transport_parameters_block_invoke(void *a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  *(void *)(v2 - 167) = a1[4];
  *(void *)(v2 - 159) = a1[5];
  *(void *)(v2 - 151) = a1[6];
  *(void *)(v2 - 143) = a1[7];
  *(void *)(v2 - 135) = a1[8];
  *(void *)(v2 - 127) = a1[9];
  *(unsigned char *)(v2 + 2) |= 8u;
  *(_WORD *)uint64_t v2 = v3;
  return 1;
}

void nw_quic_connection_set_max_data(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_max_data_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_data";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_data";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_data";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_data";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_data";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE3E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_data_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_max_data(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_data(v3, a2);
}

void sub_183AE3EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_stream_data_bidirectional_local(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_max_stream_data_bidirectional_local_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE41C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_bidirectional_local_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_max_stream_data_bidirectional_local(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_stream_data_bidirectional_local(v3, a2);
}

void sub_183AE4280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_stream_data_bidirectional_remote(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_max_stream_data_bidirectional_remote_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE4578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_bidirectional_remote_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 64);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_max_stream_data_bidirectional_remote(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_stream_data_bidirectional_remote(v3, a2);
}

void sub_183AE4638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_stream_data_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_max_stream_data_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE4930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 72);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_max_stream_data_unidirectional(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_stream_data_unidirectional(v3, a2);
}

void sub_183AE49F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_local_max_streams_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_local_max_streams_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE4CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 88);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_local_max_streams_unidirectional(nw_protocol_metadata_t metadata, uint64_t max_streams_unidirectional)
{
  id v3 = nw_quic_stream_copy_connection_metadata(metadata);
  nw_quic_connection_set_local_max_streams_unidirectional(v3, max_streams_unidirectional);
}

void sub_183AE4DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_local_max_streams_bidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_local_max_streams_bidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE50A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_local_max_streams_bidirectional(nw_protocol_metadata_t metadata, uint64_t max_streams_bidirectional)
{
  id v3 = nw_quic_stream_copy_connection_metadata(metadata);
  nw_quic_connection_set_local_max_streams_bidirectional(v3, max_streams_bidirectional);
}

void sub_183AE5160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_remote_max_streams_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_remote_max_streams_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE5458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_remote_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 120);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_set_remote_max_streams_bidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_remote_max_streams_bidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE57B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_remote_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_keepalive(void *a1, __int16 a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_keepalive(v3, a2);
}

void sub_183AE5874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_link_flow_controlled(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_link_flow_controlled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE5B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_link_flow_controlled_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 200);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(unsigned __int8 *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_link_flow_controlled(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_link_flow_controlled(v3, a2);
}

void sub_183AE5C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_inject_packet(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (nw_protocol_metadata_is_quic_connection(v5))
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_quic_connection_inject_packet_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    void v14[4] = a2;
    void v14[5] = a3;
    nw_protocol_metadata_access_handle((uint64_t)v5, (uint64_t)v14);
    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_inject_packet";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_inject_packet";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183AE5F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_inject_packet_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 176);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_get_application_result(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_get_application_result_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_application_result";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_application_result";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183AE629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_application_result_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 192);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_set_keepalive_interval(nw_protocol_metadata_t metadata, uint16_t keepalive_interval)
{
  id v3 = nw_quic_stream_copy_connection_metadata(metadata);
  nw_quic_connection_set_keepalive(v3, keepalive_interval);
}

void sub_183AE6370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_stream_set_usable_datagram_frame_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_usable_datagram_frame_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE666C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_usable_datagram_frame_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 44) = *(_WORD *)(a1 + 32);
  return 1;
}

void nw_quic_stream_set_datagram_variant_flow_id(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_datagram_variant_flow_id_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE697C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_stream_set_has_datagram_variant_flow_id(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_has_datagram_variant_flow_id_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE6C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_has_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 47) = *(unsigned char *)(a2 + 47) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

void nw_quic_stream_set_application_error_internal(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_application_error_internal_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE6FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_application_error_internal_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_connection_set_application_error_internal(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_application_error_internal_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183AE72B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_application_error_internal_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1;
}

void nw_quic_set_application_error_internal(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_application_error_internal(v3, a2);
}

void sub_183AE732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_quic_set_is_early_data_accepted(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_is_early_data_accepted(v3, a2);
}

void sub_183AE738C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_local_max_streams_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_local_max_streams_unidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE76B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_local_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 104);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_quic_get_local_max_streams_unidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t local_max_streams_unidirectional = nw_quic_connection_get_local_max_streams_unidirectional(v1);

  return local_max_streams_unidirectional;
}

void sub_183AE7778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_local_max_streams_bidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_local_max_streams_bidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE7A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_local_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 96);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_quic_get_local_max_streams_bidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t local_max_streams_bidirectional = nw_quic_connection_get_local_max_streams_bidirectional(v1);

  return local_max_streams_bidirectional;
}

void sub_183AE7B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_remote_max_streams_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_remote_max_streams_unidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE7E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 136);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_quic_get_remote_max_streams_unidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t remote_max_streams_unidirectional = nw_quic_connection_get_remote_max_streams_unidirectional(v1);

  return remote_max_streams_unidirectional;
}

void sub_183AE7F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_remote_max_streams_bidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_remote_max_streams_bidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 128);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_quic_get_remote_max_streams_bidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t remote_max_streams_bidirectional = nw_quic_connection_get_remote_max_streams_bidirectional(v1);

  return remote_max_streams_bidirectional;
}

void sub_183AE8330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_peer_idle_timeout(void *a1)
{
  id v1 = nw_quic_stream_copy_connection_metadata(a1);
  peer_idle_timeuuid_t out = nw_quic_connection_get_peer_idle_timeout(v1);

  return peer_idle_timeout;
}

void sub_183AE8374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_keepalive(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_keepalive_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE8698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_keepalive_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 168);
  if (v5) {
    *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_quic_get_keepalive(void *a1)
{
  id v1 = nw_quic_stream_copy_connection_metadata(a1);
  uint64_t keepalive = nw_quic_connection_get_keepalive(v1);

  return keepalive;
}

void sub_183AE875C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint16_t nw_quic_get_keepalive_interval(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint16_t keepalive = nw_quic_connection_get_keepalive(v1);

  return keepalive;
}

void sub_183AE87A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_remote_idle_timeout(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  peer_idle_timeuuid_t out = nw_quic_connection_get_peer_idle_timeout(v1);

  return peer_idle_timeout;
}

void sub_183AE87E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_stream_get_usable_datagram_frame_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_usable_datagram_frame_size_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE8B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_usable_datagram_frame_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_WORD *)(a2 + 44);
  return 1;
}

uint64_t nw_quic_stream_get_datagram_variant_flow_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_datagram_variant_flow_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE8E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 8);
  return 1;
}

BOOL nw_quic_stream_get_has_datagram_variant_flow_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_has_datagram_variant_flow_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE91CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_has_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 47) & 1;
  return 1;
}

uint64_t nw_quic_get_application_error(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t application_error = nw_quic_connection_get_application_error(v1);

  return application_error;
}

void sub_183AE924C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_stream_get_type(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_type_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE9574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 46);
  return 1;
}

BOOL nw_quic_connection_get_is_early_data_accepted(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_is_early_data_accepted_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183AE98D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_is_early_data_accepted_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 216) & 1;
  return 1;
}

BOOL nw_quic_get_is_early_data_accepted(void *a1)
{
  id v1 = nw_quic_stream_copy_connection_metadata(a1);
  BOOL is_early_data_accepted = nw_quic_connection_get_is_early_data_accepted(v1);

  return is_early_data_accepted;
}

void sub_183AE9954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_stream_execute_locked(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_stream_execute_locked_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_stream_execute_locked";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_execute_locked";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_stream_execute_locked";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_execute_locked";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_execute_locked";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183AE9C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_execute_locked_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  id v3 = a2 + 10;
  os_unfair_lock_lock(a2 + 10);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  os_unfair_lock_unlock(v3);
  return 1;
}

void nw_quic_set_application_error(nw_protocol_metadata_t metadata, uint64_t application_error, const char *reason)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = nw_quic_stream_copy_connection_metadata(metadata);
  id v6 = v5;
  if (v5)
  {
    nw_quic_connection_set_application_error_internal(v5, application_error);
    nw_quic_connection_set_application_error_reason(v6, (uint64_t)reason);
    goto LABEL_3;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_set_application_error";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_set_application_error";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection_metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_set_application_error";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection_metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_set_application_error";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection_metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_set_application_error";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection_metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void sub_183AE9F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_application_error_reason(void *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    id v4 = v3;
    if (nw_protocol_metadata_is_quic_stream(v3))
    {
      id v5 = nw_quic_stream_copy_connection_metadata(v4);

      id v4 = v5;
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_quic_connection_set_application_error_reason_block_invoke;
    v14[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v14[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v4, (uint64_t)v14);
    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_application_error_reason";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_error_reason";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_application_error_reason";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_error_reason";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_error_reason";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_5:
}

void sub_183AEA29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_application_error_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(const char **)(a1 + 32);
  if (v3)
  {
    xpc_object_t v4 = xpc_string_create(v3);
    id v5 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v4;
  }
  else
  {
    id v5 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }

  return 1;
}

const char *__cdecl nw_quic_get_application_error_reason(nw_protocol_metadata_t metadata)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = (uint64_t *)nw_quic_stream_copy_connection_metadata(metadata);
  BOOL v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_quic_get_application_error_reason_block_invoke;
    v14[3] = &unk_1E5248E90;
    void v14[4] = buf;
    uint64_t v3 = v1[4];
    if (v3)
    {
      __nw_quic_get_application_error_reason_block_invoke((uint64_t)v14, v3);
      xpc_object_t v4 = *(const char **)(*(void *)&buf[8] + 24);
    }
    else
    {
      xpc_object_t v4 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection_metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null connection_metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null connection_metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection_metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
  xpc_object_t v4 = 0;
LABEL_6:

  return v4;
}

void sub_183AEA618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_get_application_error_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xpc_string_get_string_ptr(v3);
  }
  return 1;
}

uint64_t nw_qpod_set_secrets(void *a1, uint64_t a2, void *a3, void *a4, char a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  id v9 = a3;
  id v10 = a4;
  if (nw_protocol_options_is_qpod(v8))
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_qpod_set_secrets_block_invoke;
    v21[3] = &unk_1E52443F8;
    id v22 = v9;
    id v23 = v10;
    char v24 = a5;
    uint64_t v11 = nw_protocol_options_access_handle(v8, v21);

    goto LABEL_3;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v28 = "nw_qpod_set_secrets";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v14, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_qpod_set_secrets";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null nw_protocol_options_is_qpod(options)", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      char v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v28 = "nw_qpod_set_secrets";
          __int16 v29 = 2082;
          char v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_qpod_set_secrets";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_qpod_set_secrets";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v14) {
    free(v14);
  }
  uint64_t v11 = 0;
LABEL_3:

  return v11;
}

void sub_183AEA9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_qpod(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_qpod_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_34_57241);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_qpod_definition::definition);

    goto LABEL_5;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_options_is_qpod";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_qpod";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_options_is_qpod";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_qpod";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_qpod";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  BOOL is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_183AEACD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_set_secrets_block_invoke(uint64_t a1, id *location)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    os_log_type_t v7 = __nwlog_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136446466;
      id v9 = "nw_qpod_set_secrets_block_invoke";
      __int16 v10 = 2048;
      uint64_t v11 = location;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s setting secrets for options %p", (uint8_t *)&v8, 0x16u);
    }
  }
  objc_storeStrong(location, *(id *)(a1 + 32));
  if (*location)
  {
    objc_storeStrong(location + 1, *(id *)(a1 + 40));
    if (location[1])
    {
      *((unsigned char *)location + 32) = *(unsigned char *)(a1 + 48);
      return 1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136446210;
      id v9 = "nw_qpod_set_secrets_block_invoke";
      id v6 = "%{public}s failed to create server secret";
      goto LABEL_9;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136446210;
      id v9 = "nw_qpod_set_secrets_block_invoke";
      id v6 = "%{public}s failed to create client secret";
LABEL_9:
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 0xCu);
    }
  }

  return 0;
}

BOOL __nw_protocol_copy_qpod_definition_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v3 = __nwlog_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136446210;
      id v5 = "nw_protocol_copy_qpod_definition_block_invoke";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s creating definition", (uint8_t *)&v4, 0xCu);
    }
  }
  nw_protocol_definition_t definition = nw_framer_create_definition("qpod", 0, &__block_literal_global_39_57245);
  id v1 = (void *)nw_protocol_copy_qpod_definition::definition;
  nw_protocol_copy_qpod_definition::nw_protocol_definition_t definition = (uint64_t)definition;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_qpod_definition::definition, (uint64_t)qpod_options_allocate, (uint64_t)qpod_options_copy, (uint64_t)qpod_options_deallocate);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_qpod_definition::definition, (uint64_t)qpod_options_is_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_qpod_definition::definition, 1, (uint64_t)qpod_options_serialize, (uint64_t)qpod_options_deserialize);
  return nw_protocol_definition_register((void *)nw_protocol_copy_qpod_definition::definition);
}

BOOL qpod_options_deserialize(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = "qpod_options_deserialize";
    id v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v22, type, &v33))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v23 = __nwlog_obj();
        os_log_type_t v24 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v35 = "qpod_options_deserialize";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null serialized_buffer", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        id v23 = __nwlog_obj();
        os_log_type_t v28 = type[0];
        BOOL v29 = os_log_type_enabled(v23, type[0]);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v35 = "qpod_options_deserialize";
            __int16 v36 = 2082;
            uint64_t v37 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null serialized_buffer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_43;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v35 = "qpod_options_deserialize";
          _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null serialized_buffer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v23 = __nwlog_obj();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v35 = "qpod_options_deserialize";
          _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s called with null serialized_buffer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_43:
    if (v22) {
      free(v22);
    }
    uint64_t v6 = 0;
    goto LABEL_24;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v6) {
    goto LABEL_3;
  }
  char v25 = __nwlog_obj();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v35 = "strict_calloc";
  __int16 v36 = 2048;
  uint64_t v37 = 1;
  __int16 v38 = 2048;
  uint64_t v39 = 40;
  char v26 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
LABEL_3:
    aBlock[4] = a2 + a3;
    *(void *)os_log_type_t type = a2;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL24qpod_options_deserializePU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke;
    aBlock[3] = &__block_descriptor_40_e37___NSObject_OS_dispatch_data__16__0__8l;
    os_log_type_t v7 = (void (**)(void *, os_log_type_t *))_Block_copy(aBlock);
    uint64_t v8 = v7[2](v7, type);
    id v9 = (void *)*v6;
    *uint64_t v6 = v8;

    uint64_t v10 = MEMORY[0x1E4F14410];
    if (v8 == MEMORY[0x1E4F14410])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "qpod_options_deserialize";
        __int16 v19 = "%{public}s failed to deserialize client_secret in qpod options";
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v11 = v7[2](v7, type);
      uint64_t v12 = (void *)v6[1];
      v6[1] = v11;

      if (v11 == v10)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v35 = "qpod_options_deserialize";
          __int16 v19 = "%{public}s failed to deserialize server_secret in qpod options";
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v13 = v7[2](v7, type);
        os_log_type_t v14 = (void *)v6[2];
        v6[2] = v13;

        if (v13 == v10)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v35 = "qpod_options_deserialize";
            __int16 v19 = "%{public}s failed to deserialize scid in qpod options";
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v15 = v7[2](v7, type);
          os_log_type_t v16 = (void *)v6[3];
          v6[3] = v15;

          if (v15 == v10)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v18 = (id)gLogObj;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v35 = "qpod_options_deserialize";
              __int16 v19 = "%{public}s failed to deserialize dcid in qpod options";
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v17 = *(void *)type + 1;
            if (*(void *)type + 1 <= (unint64_t)(a2 + a3))
            {
              *((unsigned char *)v6 + 32) = **(unsigned char **)type;
              *(void *)os_log_type_t type = v17;
              if (v17 - a2 == a3)
              {
LABEL_23:

LABEL_24:
                return (BOOL)v6;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v18 = (id)gLogObj;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v35 = "qpod_options_deserialize";
                __int16 v19 = "%{public}s failed to deserialize qpod options";
                goto LABEL_21;
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v18 = (id)gLogObj;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v35 = "qpod_options_deserialize";
                __int16 v19 = "%{public}s failed to deserialize is_server in qpod options";
LABEL_21:
                _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0xCu);
              }
            }
          }
        }
      }
    }

    free(v6);
    uint64_t v6 = 0;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void sub_183AEB774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

dispatch_data_t ___ZL24qpod_options_deserializePU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (const void *)(*a2 + 1);
  if ((unint64_t)v3 <= *(void *)(a1 + 32)
    && (size_t v5 = *(unsigned __int8 *)*a2, *a2 = v3, (unint64_t)v3 + v5 <= *(void *)(a1 + 32)))
  {
    dispatch_data_t v6 = dispatch_data_create(v3, v5, 0, 0);
    *a2 += v5;
  }
  else
  {
    dispatch_data_t v6 = (dispatch_data_t)MEMORY[0x1E4F14410];
    id v7 = MEMORY[0x1E4F14410];
  }

  return v6;
}

BOOL qpod_options_serialize(void *a1, uint64_t a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    uint64_t v35 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "qpod_options_serialize";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v51) = 0;
    if (!__nwlog_fault(v15, type, &v51)) {
      goto LABEL_84;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v36 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null existing_handle", applier, 0xCu);
      }
      goto LABEL_83;
    }
    if (!(_BYTE)v51)
    {
      __int16 v36 = __nwlog_obj();
      os_log_type_t v49 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_1830D4000, v36, v49, "%{public}s called with null existing_handle, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_83;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    __int16 v36 = __nwlog_obj();
    os_log_type_t v45 = type[0];
    BOOL v46 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_1830D4000, v36, v45, "%{public}s called with null existing_handle, no backtrace", applier, 0xCu);
      }
      goto LABEL_83;
    }
    if (v46)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&void applier[4] = "qpod_options_serialize";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v36, v45, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", applier, 0x16u);
    }
    goto LABEL_71;
  }
  if (!a3)
  {
    __int16 v38 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "qpod_options_serialize";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v51) = 0;
    if (!__nwlog_fault(v15, type, &v51)) {
      goto LABEL_84;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v36 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s called with null out_length", applier, 0xCu);
      }
LABEL_83:

LABEL_84:
      if (!v15) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    if (!(_BYTE)v51)
    {
      __int16 v36 = __nwlog_obj();
      os_log_type_t v50 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_1830D4000, v36, v50, "%{public}s called with null out_length, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_83;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    __int16 v36 = __nwlog_obj();
    os_log_type_t v47 = type[0];
    BOOL v48 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_1830D4000, v36, v47, "%{public}s called with null out_length, no backtrace", applier, 0xCu);
      }
      goto LABEL_83;
    }
    if (v48)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&void applier[4] = "qpod_options_serialize";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v36, v47, "%{public}s called with null out_length, dumping backtrace:%{public}s", applier, 0x16u);
    }
LABEL_71:

    free(backtrace_string);
    goto LABEL_84;
  }
  if (*(void *)a2)
  {
    size_t size = dispatch_data_get_size(*(dispatch_data_t *)a2);
    id v7 = *(NSObject **)(a2 + 8);
    if (v7) {
      goto LABEL_5;
    }
  }
  else
  {
    size_t size = 0;
    id v7 = *(NSObject **)(a2 + 8);
    if (v7)
    {
LABEL_5:
      size_t v8 = dispatch_data_get_size(v7);
      id v9 = *(NSObject **)(a2 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_10:
      size_t v10 = 0;
      uint64_t v11 = *(NSObject **)(a2 + 24);
      if (v11) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  size_t v8 = 0;
  id v9 = *(NSObject **)(a2 + 16);
  if (!v9) {
    goto LABEL_10;
  }
LABEL_6:
  size_t v10 = dispatch_data_get_size(v9);
  uint64_t v11 = *(NSObject **)(a2 + 24);
  if (v11)
  {
LABEL_7:
    size_t v12 = dispatch_data_get_size(v11);
    goto LABEL_12;
  }
LABEL_11:
  size_t v12 = 0;
LABEL_12:
  size_t v13 = size + v8 + v10 + v12;
  size_t v14 = v13 + 5;
  *a3 = v13 + 5;
  if (v13 == -5)
  {
    uint64_t v40 = __nwlog_obj();
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "strict_calloc";
    id v41 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v41);
    if (result) {
      goto LABEL_86;
    }
    free(v41);
  }
  uint64_t v15 = (char *)malloc_type_calloc(1uLL, v14, 0xEAFB8F1AuLL);
  if (v15)
  {
LABEL_14:
    os_log_type_t v16 = *(id *)a2;
    uint64_t v17 = v16;
    if (size > 0xFF) {
      goto LABEL_22;
    }
    *uint64_t v15 = size;
    *(void *)os_log_type_t type = 0;
    uint64_t v56 = type;
    uint64_t v57 = 0x2000000000;
    uint64_t v58 = 0;
    uint64_t v51 = 0;
    unsigned __int16 v52 = &v51;
    uint64_t v53 = 0x2000000000;
    BOOL v54 = v15 + 1;
    if (v16)
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      unsigned __int16 v60 = &unk_1E5242B60;
      uint64_t v62 = &v51;
      size_t v63 = size;
      os_log_type_t v61 = type;
      dispatch_data_apply(v16, applier);
      uint64_t v18 = *((void *)v56 + 3);
    }
    else
    {
      uint64_t v18 = 0;
    }
    _Block_object_dispose(&v51, 8);
    _Block_object_dispose(type, 8);
    if (v18 == size)
    {

      __int16 v19 = *(id *)(a2 + 8);
      os_log_type_t v20 = v19;
      if (v8 > 0xFF) {
        goto LABEL_31;
      }
      uint64_t v21 = &v15[size + 1];
      *uint64_t v21 = v8;
      id v22 = v21 + 1;
      *(void *)os_log_type_t type = 0;
      uint64_t v56 = type;
      uint64_t v57 = 0x2000000000;
      uint64_t v58 = 0;
      uint64_t v51 = 0;
      unsigned __int16 v52 = &v51;
      uint64_t v53 = 0x2000000000;
      BOOL v54 = v22;
      if (v19)
      {
        *(void *)applier = MEMORY[0x1E4F143A8];
        *(void *)&applier[8] = 0x40000000;
        *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
        unsigned __int16 v60 = &unk_1E5242B60;
        uint64_t v62 = &v51;
        size_t v63 = v8;
        os_log_type_t v61 = type;
        dispatch_data_apply(v19, applier);
        uint64_t v23 = *((void *)v56 + 3);
      }
      else
      {
        uint64_t v23 = 0;
      }
      _Block_object_dispose(&v51, 8);
      _Block_object_dispose(type, 8);
      if (v23 == v8)
      {

        char v25 = *(id *)(a2 + 16);
        char v26 = v25;
        if (v10 > 0xFF) {
          goto LABEL_42;
        }
        v22[v8] = v10;
        uint64_t v27 = (uint64_t)&v22[v8 + 1];
        *(void *)os_log_type_t type = 0;
        uint64_t v56 = type;
        uint64_t v57 = 0x2000000000;
        uint64_t v58 = 0;
        uint64_t v51 = 0;
        unsigned __int16 v52 = &v51;
        uint64_t v53 = 0x2000000000;
        BOOL v54 = (char *)v27;
        if (v25)
        {
          *(void *)applier = MEMORY[0x1E4F143A8];
          *(void *)&applier[8] = 0x40000000;
          *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
          unsigned __int16 v60 = &unk_1E5242B60;
          uint64_t v62 = &v51;
          size_t v63 = v10;
          os_log_type_t v61 = type;
          dispatch_data_apply(v25, applier);
          uint64_t v28 = *((void *)v56 + 3);
        }
        else
        {
          uint64_t v28 = 0;
        }
        _Block_object_dispose(&v51, 8);
        _Block_object_dispose(type, 8);
        if (v28 == v10)
        {

          uint64_t v31 = *(id *)(a2 + 24);
          uint64_t v32 = v31;
          if (v12 <= 0xFF)
          {
            char v33 = (unsigned char *)(v27 + v10);
            *char v33 = v12;
            uint64_t v34 = (uint64_t)(v33 + 1);
            if (nw_dispatch_data_copyout(v31, v34, v12) == v12)
            {

              *(unsigned char *)(v34 + v12) = *(unsigned char *)(a2 + 32);
              goto LABEL_36;
            }
          }

          BOOL v29 = __nwlog_obj();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)applier = 136446210;
            *(void *)&void applier[4] = "qpod_options_serialize";
            _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s failed to serialize dcid in qpod options", applier, 0xCu);
          }
        }
        else
        {
LABEL_42:

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v29 = (id)gLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)applier = 136446210;
            *(void *)&void applier[4] = "qpod_options_serialize";
            _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s failed to serialize scid in qpod options", applier, 0xCu);
          }
        }
      }
      else
      {
LABEL_31:

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v29 = (id)gLogObj;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "qpod_options_serialize";
          _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s failed to serialize server_secret in qpod options", applier, 0xCu);
        }
      }
    }
    else
    {
LABEL_22:

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v24 = (id)gLogObj;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s failed to serialize client_secret in qpod options", applier, 0xCu);
      }

      if (!v15) {
        goto LABEL_35;
      }
    }
LABEL_34:
    free(v15);
LABEL_35:
    uint64_t v15 = 0;
LABEL_36:

    return (BOOL)v15;
  }
  uint64_t v42 = __nwlog_obj();
  os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  unsigned __int16 v60 = (void *)v14;
  unsigned __int16 v43 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v43);
  if (!result)
  {
    free(v43);
    goto LABEL_14;
  }
LABEL_86:
  __break(1u);
  return result;
}

void sub_183AEC350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL qpod_options_is_equal(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (a2 && a3)
  {
    BOOL v6 = nw_dispatch_data_is_equal(*(dispatch_data_t *)a2, *(NSObject **)a3)
      && nw_dispatch_data_is_equal(*(dispatch_data_t *)(a2 + 8), *(NSObject **)(a3 + 8))
      && nw_dispatch_data_is_equal(*(dispatch_data_t *)(a2 + 16), *(NSObject **)(a3 + 16))
      && nw_dispatch_data_is_equal(*(dispatch_data_t *)(a2 + 24), *(NSObject **)(a3 + 24))
      && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a3 + 32);
    if (gLogDatapath)
    {
      size_t v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136446978;
        size_t v10 = "qpod_options_is_equal";
        __int16 v11 = 2048;
        uint64_t v12 = a2;
        __int16 v13 = 2048;
        uint64_t v14 = a3;
        __int16 v15 = 1024;
        BOOL v16 = v6;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s comparing options %p and %p -> %i", (uint8_t *)&v9, 0x26u);
      }
    }
  }
  else
  {
    BOOL v6 = a2 == a3;
  }

  return v6;
}

void qpod_options_deallocate(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    id v7 = __nwlog_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136446466;
      int v9 = "qpod_options_deallocate";
      __int16 v10 = 2048;
      __int16 v11 = a2;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s deallocating options %p", (uint8_t *)&v8, 0x16u);
    }
  }
  uint64_t v3 = (void *)*a2;
  *a2 = 0;

  int v4 = (void *)a2[1];
  a2[1] = 0;

  id v5 = (void *)a2[2];
  a2[2] = 0;

  BOOL v6 = (void *)a2[3];
  a2[3] = 0;

  free(a2);
}

BOOL qpod_options_copy(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "qpod_options_copy";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v7, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "qpod_options_copy";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        int v8 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v20 = "qpod_options_copy";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "qpod_options_copy";
          _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v8 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "qpod_options_copy";
          _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_26:
    if (v7) {
      free(v7);
    }
    int v4 = 0;
    goto LABEL_4;
  }
  int v4 = (id *)malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v4) {
    goto LABEL_3;
  }
  __int16 v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v20 = "strict_calloc";
  __int16 v21 = 2048;
  uint64_t v22 = 1;
  __int16 v23 = 2048;
  uint64_t v24 = 40;
  __int16 v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
LABEL_3:
    objc_storeStrong(v4, *(id *)a2);
    objc_storeStrong(v4 + 1, *(id *)(a2 + 8));
    objc_storeStrong(v4 + 2, *(id *)(a2 + 16));
    objc_storeStrong(v4 + 3, *(id *)(a2 + 24));
    *((unsigned char *)v4 + 32) = *(unsigned char *)(a2 + 32);
    if (gLogDatapath)
    {
      uint64_t v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v20 = "qpod_options_copy";
        __int16 v21 = 2048;
        uint64_t v22 = a2;
        __int16 v23 = 2048;
        uint64_t v24 = (uint64_t)v4;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s copying options %p -> %p", buf, 0x20u);
      }
    }
LABEL_4:

    return (BOOL)v4;
  }
  __break(1u);
  return result;
}

void sub_183AEC9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL qpod_options_allocate(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    int v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    int v8 = "strict_calloc";
    __int16 v9 = 2048;
    uint64_t v10 = 1;
    __int16 v11 = 2048;
    uint64_t v12 = 40;
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  if (gLogDatapath)
  {
    BOOL v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      int v8 = "qpod_options_allocate";
      __int16 v9 = 2048;
      uint64_t v10 = (uint64_t)v2;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s allocating options %p", buf, 0x16u);
    }
  }
  return (BOOL)v2;
}

void sub_183AECBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_36(uint64_t a1, void *a2)
{
  BOOL v2 = a2;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2020000000;
  v18[3] = 0;
  nw_protocol_options_t v3 = nw_framer_copy_options(v2);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __nw_protocol_copy_qpod_definition_block_invoke_2;
  v15[3] = &unk_1E5244468;
  int v4 = v2;
  os_log_type_t v16 = v4;
  char v17 = v18;
  nw_protocol_options_access_handle(v3, v15);
  input_handler[0] = MEMORY[0x1E4F143A8];
  input_handler[1] = 3221225472;
  input_handler[2] = __nw_protocol_copy_qpod_definition_block_invoke_42;
  input_handler[3] = &unk_1E52444E0;
  id v5 = v4;
  uint64_t v13 = v5;
  os_log_type_t v14 = v18;
  nw_framer_set_input_handler(v5, input_handler);
  output_handler[0] = MEMORY[0x1E4F143A8];
  output_handler[1] = 3221225472;
  output_handler[2] = __nw_protocol_copy_qpod_definition_block_invoke_4;
  output_handler[3] = &unk_1E5244530;
  BOOL v6 = v5;
  uint64_t v10 = v6;
  __int16 v11 = v18;
  nw_framer_set_output_handler(v6, output_handler);
  cleanup_handler[0] = MEMORY[0x1E4F143A8];
  cleanup_handler[1] = 3221225472;
  cleanup_handler[2] = __nw_protocol_copy_qpod_definition_block_invoke_3_51;
  cleanup_handler[3] = &unk_1E5244558;
  cleanup_void handler[4] = v18;
  nw_framer_set_cleanup_handler(v6, cleanup_handler);
  nw_framer_set_stop_handler(v6, &__block_literal_global_56_57282);

  _Block_object_dispose(v18, 8);
  return 1;
}

void sub_183AECDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Block_object_dispose((const void *)(v33 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    BOOL v15 = __nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      if (*(unsigned char *)(a2 + 32)) {
        char v17 = "server";
      }
      else {
        char v17 = "client";
      }
      int v18 = 136446978;
      __int16 v19 = "nw_protocol_copy_qpod_definition_block_invoke_2";
      __int16 v20 = 2048;
      uint64_t v21 = v16;
      __int16 v22 = 2080;
      __int16 v23 = v17;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s created framer %p for %s with options %p", (uint8_t *)&v18, 0x2Au);
    }
  }
  int v4 = *(void **)(a2 + 24);
  id v5 = *(void **)a2;
  BOOL v6 = *(void **)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  id v8 = *(id *)(a2 + 16);
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  if (qpod_conn_create_override)
  {
    uint64_t override = qpod_conn_create_override(v8, v9, v10, v11, v7 != 0);
  }
  else
  {
    if (!MEMORY[0x1E4FBA940])
    {
      uint64_t v13 = 0;
      goto LABEL_7;
    }
    uint64_t override = qpod_conn_create();
  }
  uint64_t v13 = override;
LABEL_7:

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v13;
  return 1;
}

void sub_183AECF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_42(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  nw_protocol_options_t v3 = a2;
  if (gLogDatapath)
  {
    BOOL v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      uint64_t v12 = "nw_protocol_copy_qpod_definition_block_invoke";
      __int16 v13 = 2048;
      uint64_t v14 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s handling input for framer %p", buf, 0x16u);
    }
  }
  parse[0] = MEMORY[0x1E4F143A8];
  parse[1] = 3221225472;
  parse[2] = __nw_protocol_copy_qpod_definition_block_invoke_43;
  parse[3] = &unk_1E52444B8;
  long long v8 = *(_OWORD *)(a1 + 32);
  id v4 = (id)v8;
  long long v10 = v8;
  nw_framer_parse_input(v3, 0, 0x7D0uLL, 0, parse);

  return 0;
}

void sub_183AED120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  nw_protocol_options_t v3 = a2;
  if (gLogDatapath)
  {
    id v5 = __nwlog_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      id v11 = "nw_protocol_copy_qpod_definition_block_invoke_4";
      __int16 v12 = 2048;
      uint64_t v13 = v6;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s handling output for framer %p", buf, 0x16u);
    }
  }
  parse[0] = MEMORY[0x1E4F143A8];
  parse[1] = 3221225472;
  parse[2] = __nw_protocol_copy_qpod_definition_block_invoke_48;
  parse[3] = &unk_1E52444B8;
  long long v7 = *(_OWORD *)(a1 + 32);
  id v4 = (id)v7;
  long long v9 = v7;
  nw_framer_parse_output(v3, 0, 0x7D0uLL, 0, parse);
}

void sub_183AED29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_3_51(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (gLogDatapath)
  {
    id v4 = __nwlog_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136446466;
      uint64_t v6 = "nw_protocol_copy_qpod_definition_block_invoke_3";
      __int16 v7 = 2048;
      id v8 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s cleaning up framer %p", (uint8_t *)&v5, 0x16u);
    }
  }
  if (qpod_conn_free_override)
  {
    qpod_conn_free_override(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
  else if (MEMORY[0x1E4FBA958])
  {
    qpod_conn_free();
  }
}

void sub_183AED3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_53(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (gLogDatapath)
  {
    id v4 = __nwlog_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136446466;
      uint64_t v6 = "nw_protocol_copy_qpod_definition_block_invoke";
      __int16 v7 = 2048;
      id v8 = v2;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s stopping framer %p", (uint8_t *)&v5, 0x16u);
    }
  }
  return 1;
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __nw_protocol_copy_qpod_definition_block_invoke_2_49;
  v8[3] = &unk_1E5244508;
  id v9 = *(id *)(a1 + 32);
  uint64_t v6 = v8;
  if (qpod_conn_encode_datagram_override)
  {
    qpod_conn_encode_datagram_override(v5, a2, (unsigned __int16)a3, v6);
  }
  else if (MEMORY[0x1E4FBA950])
  {
    qpod_conn_encode_datagram();
  }

  return a3;
}

void sub_183AED5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_2_49(uint64_t a1, const uint8_t *a2, size_t output_length)
{
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_43(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = 0;
  char v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __nw_protocol_copy_qpod_definition_block_invoke_2_44;
  v12[3] = &unk_1E5244490;
  uint64_t v15 = a2;
  id v13 = *(id *)(a1 + 32);
  uint64_t v14 = &v16;
  __int16 v7 = v12;
  if (qpod_conn_decode_datagram_override)
  {
    qpod_conn_decode_datagram_override(v6, a2, (unsigned __int16)a3, v7);
  }
  else if (MEMORY[0x1E4FBA948])
  {
    qpod_conn_decode_datagram();
  }

  if (!*((unsigned char *)v17 + 24))
  {
    id v8 = *(void **)(a1 + 32);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __nw_protocol_copy_qpod_definition_block_invoke_3;
    v10[3] = &unk_1E524BAA8;
    id v11 = v8;
    nw_framer_async(v11, v10);
  }
  _Block_object_dispose(&v16, 8);
  return a3;
}

void sub_183AED754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_2_44(uint64_t a1, const uint8_t *a2, unsigned int a3)
{
  id v3 = *(NSObject **)(a1 + 32);
  if (a3 == 0xFFFF && *(void *)(a1 + 48) == (void)a2)
  {
    id v9 = *(NSObject **)(a1 + 32);
    nw_framer_mark_failed_with_error(v9, 54);
  }
  else
  {
    size_t v7 = a3;
    id v8 = nw_framer_message_create(*(nw_framer_t *)(a1 + 32));
    nw_framer_deliver_input(v3, a2, v7, v8, 1);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_183AED838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_3(uint64_t a1)
{
}

uint64_t nw_qpod_setup_secrets(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  if (!nw_protocol_options_is_qpod(v7))
  {
    id v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_qpod_setup_secrets";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v14, &v32, &v31)) {
      goto LABEL_40;
    }
    if (v32 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = v32;
      if (os_log_type_enabled(v15, v32))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_qpod_setup_secrets";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null nw_protocol_options_is_qpod(options)", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v20 = v32;
      BOOL v21 = os_log_type_enabled(v15, v32);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v34 = "nw_qpod_setup_secrets";
          __int16 v35 = 2082;
          __int16 v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_40;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_qpod_setup_secrets";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v25 = v32;
      if (os_log_type_enabled(v15, v32))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_qpod_setup_secrets";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  id v9 = v8;
  if (!nw_protocol_metadata_is_quic_connection(v9))
  {
    BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(v9);

    if (is_quic_stream) {
      goto LABEL_5;
    }
    char v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_qpod_setup_secrets";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v14, &v32, &v31))
    {
      if (v32 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v18 = v32;
        if (os_log_type_enabled(v15, v32))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_qpod_setup_secrets";
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata)", buf, 0xCu);
        }
      }
      else if (v31)
      {
        __int16 v22 = (char *)__nw_create_backtrace_string();
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v23 = v32;
        BOOL v24 = os_log_type_enabled(v15, v32);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v34 = "nw_qpod_setup_secrets";
            __int16 v35 = 2082;
            __int16 v36 = v22;
            _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v22);
          if (!v14) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_qpod_setup_secrets";
          _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata), no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v26 = v32;
        if (os_log_type_enabled(v15, v32))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_qpod_setup_secrets";
          _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata), backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_39;
    }
LABEL_40:
    if (!v14)
    {
LABEL_42:
      uint64_t v11 = 0;
      goto LABEL_6;
    }
LABEL_41:
    free(v14);
    goto LABEL_42;
  }

LABEL_5:
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = __nw_qpod_setup_secrets_block_invoke;
  v27[3] = &unk_1E5244420;
  uint64_t v29 = a3;
  id v28 = v9;
  char v30 = a4;
  uint64_t v11 = nw_protocol_options_access_handle(v7, v27);

LABEL_6:
  return v11;
}

void sub_183AEDDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_setup_secrets_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    char v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
      __int16 v22 = 2048;
      uint64_t v23 = a2;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s setting up secrets for options %p", buf, 0x16u);
    }
  }
  if (*(void *)(a1 + 40))
  {
    unsigned int v4 = snprintf(__str, 0x10uLL, "%s client", *(const char **)(a1 + 40));
    int v5 = snprintf(label, 0x10uLL, "%s server", *(const char **)(a1 + 40));
    if ((v5 | v4) >= 0x10)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
        __int16 v22 = 2080;
        uint64_t v23 = v14;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s identifier %s is too long", buf, 0x16u);
      }
    }
    else
    {
      unsigned int v6 = v5;
      id v7 = nw_quic_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(a1 + 32));
      dispatch_data_t secret = sec_protocol_metadata_create_secret(v7, v4, __str, 0x20uLL);
      id v9 = *(void **)a2;
      *(void *)a2 = secret;

      if (*(void *)a2)
      {
        dispatch_data_t v10 = sec_protocol_metadata_create_secret(v7, v6, label, 0x20uLL);
        uint64_t v11 = *(void **)(a2 + 8);
        *(void *)(a2 + 8) = v10;

        if (*(void *)(a2 + 8))
        {
          *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 48);
          uint64_t v12 = 1;
LABEL_19:

          return v12;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
          _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s failed to create server secret", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
          _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s failed to create client secret", buf, 0xCu);
        }
      }
    }
    uint64_t v12 = 0;
    goto LABEL_19;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v13 = (id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
    _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s missing identifier", buf, 0xCu);
  }

  return 0;
}

void sub_183AEE190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_qpod_set_scid(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_qpod(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_qpod_set_scid_block_invoke;
    v13[3] = &unk_1E5248F68;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_qpod_set_scid";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_scid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_qpod(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_qpod_set_scid";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_scid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_scid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183AEE4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_set_scid_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_qpod_set_dcid(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_qpod(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_qpod_set_dcid_block_invoke;
    v13[3] = &unk_1E5248F68;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_qpod_set_dcid";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_dcid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_qpod(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_qpod_set_dcid";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_dcid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_dcid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183AEE7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_set_dcid_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_protocol_copy_qpod_definition()
{
  if (nw_protocol_copy_qpod_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_34_57241);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_qpod_definition::definition;

  return v0;
}

nw_protocol_options_t nw_qpod_create_options()
{
  if (nw_protocol_copy_qpod_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_34_57241);
  }
  xpc_object_t v0 = nw_protocol_copy_qpod_definition::definition;

  return nw_framer_create_options(v0);
}

id *nw_parameters_create_qpod(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    nw_parameters_t v2 = nw_parameters_create();
    nw_parameters_t v3 = v2;
    if (v2)
    {
      nw_parameters_set_data_mode(v2, 1u);
      if (nw_protocol_copy_qpod_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_34_57241);
      }
      nw_protocol_options_t options = nw_framer_create_options((nw_protocol_definition_t)nw_protocol_copy_qpod_definition::definition);
      if (options)
      {
        int v5 = v3;
        id v6 = v5[19];

        nw_protocol_stack_append_application_protocol(v6, options);
        if (v1 != (void (**)(id, nw_protocol_options_t))&__block_literal_global_98) {
          v1[2](v1, options);
        }
        id v7 = v5;

        goto LABEL_49;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      __int16 v36 = "nw_parameters_create_qpod";
      id v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v33 = 0;
      if (__nwlog_fault(v13, &type, &v33))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (id)gLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v36 = "nw_parameters_create_qpod";
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s nw_framer_create_options failed", buf, 0xCu);
          }
        }
        else if (v33)
        {
          backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (id)gLogObj;
          os_log_type_t v20 = type;
          BOOL v21 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v21)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v36 = "nw_parameters_create_qpod";
              __int16 v37 = 2082;
              __int16 v38 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s nw_framer_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v13) {
              goto LABEL_48;
            }
            goto LABEL_47;
          }
          if (v21)
          {
            *(_DWORD *)buf = 136446210;
            __int16 v36 = "nw_parameters_create_qpod";
            _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s nw_framer_create_options failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (id)gLogObj;
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v36 = "nw_parameters_create_qpod";
            _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s nw_framer_create_options failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v13)
      {
LABEL_48:
        id v7 = 0;
LABEL_49:

        goto LABEL_50;
      }
LABEL_47:
      free(v13);
      goto LABEL_48;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v36 = "nw_parameters_create_qpod";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v36 = "nw_parameters_create_qpod";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }
      else if (v33)
      {
        os_log_type_t v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v10, type);
        if (v16)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v36 = "nw_parameters_create_qpod";
            __int16 v37 = 2082;
            __int16 v38 = v16;
            _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v16);
          if (!v9) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v36 = "nw_parameters_create_qpod";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v36 = "nw_parameters_create_qpod";
          _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9)
    {
LABEL_39:
      id v7 = 0;
LABEL_50:

      goto LABEL_51;
    }
LABEL_38:
    free(v9);
    goto LABEL_39;
  }
  os_log_type_t v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v36 = "nw_parameters_create_qpod";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v26, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_parameters_create_qpod";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null configure_qpod", buf, 0xCu);
      }
    }
    else if (v33)
    {
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v27, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v36 = "nw_parameters_create_qpod";
          __int16 v37 = 2082;
          __int16 v38 = v29;
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null configure_qpod, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        goto LABEL_68;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_parameters_create_qpod";
        _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null configure_qpod, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_parameters_create_qpod";
        _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s called with null configure_qpod, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_68:
  if (v26) {
    free(v26);
  }
  id v7 = 0;
LABEL_51:

  return v7;
}

void sub_183AEF158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_get_description(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    int v3 = BYTE2(v1[49]._os_unfair_lock_opaque);
    os_unfair_lock_lock(v1 + 2);
    if (v3)
    {
      id v4 = v2 + 44;
      if (!*(void *)&v2[44]._os_unfair_lock_opaque)
      {
        int v5 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)&v2[10]._os_unfair_lock_opaque, 0);
        uint32_t os_unfair_lock_opaque = v2[48]._os_unfair_lock_opaque;
        description = nw_browse_descriptor_get_description(*(void **)&v2[8]._os_unfair_lock_opaque, 1);
        asprintf((char **)&v2[44], "[B%u %s, %s]", os_unfair_lock_opaque, description, v5);
        goto LABEL_7;
      }
    }
    else
    {
      id v4 = v2 + 46;
      if (!*(void *)&v2[46]._os_unfair_lock_opaque)
      {
        int v5 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)&v2[10]._os_unfair_lock_opaque, 0);
        uint32_t v8 = v2[48]._os_unfair_lock_opaque;
        id v9 = nw_browse_descriptor_get_description(*(void **)&v2[8]._os_unfair_lock_opaque, 0);
        asprintf((char **)&v2[46], "[B%u %s, %s]", v8, v9, v5);
LABEL_7:
        if (v5) {
          free(v5);
        }
      }
    }
    os_unfair_lock_unlock(v2 + 2);
    uint64_t v10 = *(void *)&v4->_os_unfair_lock_opaque;
    goto LABEL_10;
  }
  id v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_browser_get_description";
  id v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_get_description";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_browser_get_description";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_get_description";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_get_description";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v13) {
    free(v13);
  }
  uint64_t v10 = 0;
LABEL_10:

  return v10;
}

void sub_183AEF618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_get_next_log_id(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int add = atomic_fetch_add(nw_browser_get_next_log_id(void)::s_last_top_level_id, 1u);
  uint64_t result = add + 1;
  if (add == -2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446466;
      id v4 = "nw_browser_get_next_log_id";
      __int16 v5 = 1024;
      int v6 = -1;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u browser logging ids, wrapping", (uint8_t *)&v3, 0x12u);
    }

    return nw_browser_get_next_log_id();
  }
  return result;
}

void nw_browser_set_browse_results_changed_handler(nw_browser_t browser, nw_browser_browse_results_changed_handler_t handler)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_browser_t v3 = browser;
  nw_browser_browse_results_changed_handler_t v4 = handler;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    __int16 v5 = (objc_class *)_Block_copy(v4);
    Class isa = v3[7].isa;
    v3[7].Class isa = v5;

    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_browser_set_browse_results_changed_handler";
  uint32_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_browser_set_browse_results_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_browser_set_browse_results_changed_handler";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_browser_set_browse_results_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_browser_set_browse_results_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void nw_browser_set_state_changed_handler(nw_browser_t browser, nw_browser_state_changed_handler_t state_changed_handler)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_browser_t v3 = browser;
  nw_browser_state_changed_handler_t v4 = state_changed_handler;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    __int16 v5 = (objc_class *)_Block_copy(v4);
    Class isa = v3[8].isa;
    v3[8].Class isa = v5;

    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_browser_set_state_changed_handler";
  uint32_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_browser_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_browser_set_state_changed_handler";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_browser_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_browser_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void nw_browser_set_queue(nw_browser_t browser, dispatch_queue_t queue)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  nw_browser_t v3 = browser;
  nw_browser_state_changed_handler_t v4 = queue;
  __int16 v5 = v4;
  if (!v3)
  {
    int v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_browser_set_queue";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_set_queue";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint32_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_browser_set_queue";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_set_queue";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_set_queue";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    objc_storeStrong((id *)&v3[2].isa, queue);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_browser_set_queue";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint32_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_browser_set_queue";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null queue", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    uint32_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_browser_set_queue";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v15 = (char *)__nw_create_backtrace_string();
  uint32_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_browser_set_queue";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_browser_set_queue";
    __int16 v24 = 2082;
    os_log_type_t v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_browser_start(nw_browser_t browser)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  nw_browser_t v2 = browser;
  nw_browser_t v3 = v2;
  if (!v2)
  {
    v120 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_start";
    v121 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    v144[0] = 0;
    if (__nwlog_fault(v121, type, v144))
    {
      if (type[0] == 17)
      {
        v122 = __nwlog_obj();
        os_log_type_t v123 = type[0];
        if (os_log_type_enabled(v122, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          _os_log_impl(&dword_1830D4000, v122, v123, "%{public}s called with null browser", buf, 0xCu);
        }
      }
      else if (v144[0])
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        v122 = __nwlog_obj();
        os_log_type_t v126 = type[0];
        BOOL v127 = os_log_type_enabled(v122, (os_log_type_t)type[0]);
        if (backtrace_string)
        {
          if (v127)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_start";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v122, v126, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_227;
        }
        if (v127)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          _os_log_impl(&dword_1830D4000, v122, v126, "%{public}s called with null browser, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v122 = __nwlog_obj();
        os_log_type_t v128 = type[0];
        if (os_log_type_enabled(v122, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          _os_log_impl(&dword_1830D4000, v122, v128, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_227:
    if (v121) {
      free(v121);
    }
    goto LABEL_186;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&v2[1]);
  int isa = (int)v3[9].isa;
  if (!isa)
  {
    if (!v3[2].isa)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
      if (!nw_parameters_get_logging_disabled((uint64_t)v3[5].isa))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        int v6 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          int v27 = (int)v3[24].isa;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s [B%u] The browser's client_queue is not set. You must set this browser's client_queue using nw_browser_set_queue() in order to successfully start it.", buf, 0x12u);
        }
        goto LABEL_41;
      }
      goto LABEL_186;
    }
    if (!v3[7].isa && !v3[8].isa && !nw_parameters_get_logging_disabled((uint64_t)v3[5].isa))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      uint32_t v8 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = (int)v3[24].isa;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [B%u] The browser does not have any callback handlers set. You must set callback handlers if you wish to receive updates from the browser.", buf, 0x12u);
      }
    }
    objc_storeStrong((id *)&v3[6].isa, browser);
    os_log_type_t v10 = (objc_class *)xpc_dictionary_create(0, 0, 0);
    Class v11 = v3[19].isa;
    v3[19].int isa = v10;

    os_log_type_t v12 = (objc_class *)xpc_dictionary_create(0, 0, 0);
    Class v13 = v3[20].isa;
    v3[20].int isa = v12;

    BOOL v14 = nw_array_create();
    Class v15 = v3[17].isa;
    v3[17].int isa = (Class)v14;

    BOOL v16 = nw_array_create();
    Class v17 = v3[18].isa;
    v3[18].int isa = (Class)v16;

    os_log_type_t v18 = (objc_class *)nw_dictionary_create();
    Class v19 = v3[21].isa;
    v3[21].int isa = v18;

    switch(LODWORD(v3[3].isa))
    {
      case 0:
        if (nw_parameters_get_logging_disabled((uint64_t)v3[5].isa)) {
          goto LABEL_152;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        id v20 = (id)gbrowserLogObj;
        int v21 = (int)v3[24].isa;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v21;
        os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v144[0] = 0;
        if (!__nwlog_fault(v22, type, v144)) {
          goto LABEL_109;
        }
        if (type[0] == 17)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          os_log_type_t v23 = (id)gbrowserLogObj;
          os_log_type_t v24 = type[0];
          if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
          {
            int v25 = (int)v3[24].isa;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_start";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [B%u] nw_browser_start called on an invalid browser", buf, 0x12u);
          }
LABEL_108:

          goto LABEL_109;
        }
        if (!v144[0])
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          os_log_type_t v23 = (id)gbrowserLogObj;
          os_log_type_t v66 = type[0];
          if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
          {
            int v67 = (int)v3[24].isa;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_start";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v67;
            _os_log_impl(&dword_1830D4000, v23, v66, "%{public}s [B%u] nw_browser_start called on an invalid browser, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_108;
        }
        BOOL v48 = __nw_create_backtrace_string();
        if (!v48)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          os_log_type_t v23 = (id)gbrowserLogObj;
          os_log_type_t v68 = type[0];
          if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
          {
            int v69 = (int)v3[24].isa;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_start";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v69;
            _os_log_impl(&dword_1830D4000, v23, v68, "%{public}s [B%u] nw_browser_start called on an invalid browser, no backtrace", buf, 0x12u);
          }
          goto LABEL_108;
        }
        os_log_type_t v49 = (char *)v48;
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        os_log_type_t v50 = (id)gbrowserLogObj;
        os_log_type_t v51 = type[0];
        if (os_log_type_enabled(v50, (os_log_type_t)type[0]))
        {
          int v52 = (int)v3[24].isa;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v52;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v49;
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s [B%u] nw_browser_start called on an invalid browser, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v49);
LABEL_109:
        if (!v22) {
          goto LABEL_152;
        }
        free(v22);
        signed int v70 = 2;
        goto LABEL_185;
      case 1:
        nw_browser_t v28 = v3;
        uint64_t v29 = nw_browse_descriptor_copy_custom_browse_block(v28[4].isa);
        if (v29)
        {
          os_log_type_t v30 = v29;
          if (!nw_parameters_get_logging_disabled((uint64_t)v28[5].isa))
          {
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
            }
            BOOL v31 = (id)gbrowserLogObj;
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              int v32 = (int)v28[24].isa;
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&type[4] = "nw_browser_start_custom_browser_locked";
              *(_WORD *)&type[12] = 1024;
              *(_DWORD *)&type[14] = v32;
              _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s [B%u] start: custom browser", type, 0x12u);
            }
          }
          id v33 = nw_parameters_copy_context(v28[5].isa);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL38nw_browser_start_custom_browser_lockedP21NWConcrete_nw_browser_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_1E524B950;
          id v34 = v30;
          id v140 = v34;
          __int16 v35 = v28;
          *(void *)&unsigned char buf[32] = v35;
          nw_queue_context_async(v33, buf);

          goto LABEL_184;
        }
        v129 = __nwlog_obj();
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_browser_start_custom_browser_locked";
        v130 = (char *)_os_log_send_and_compose_impl();

        v144[0] = 16;
        os_log_type_t v138 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v130, v144, &v138)) {
          goto LABEL_245;
        }
        if (v144[0] == 17)
        {
          v131 = __nwlog_obj();
          os_log_type_t v132 = v144[0];
          if (os_log_type_enabled(v131, (os_log_type_t)v144[0]))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&type[4] = "nw_browser_start_custom_browser_locked";
            _os_log_impl(&dword_1830D4000, v131, v132, "%{public}s called with null browser_block", type, 0xCu);
          }
        }
        else if (v138)
        {
          v133 = (char *)__nw_create_backtrace_string();
          v131 = __nwlog_obj();
          os_log_type_t v134 = v144[0];
          BOOL v135 = os_log_type_enabled(v131, (os_log_type_t)v144[0]);
          if (v133)
          {
            if (v135)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&type[4] = "nw_browser_start_custom_browser_locked";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v133;
              _os_log_impl(&dword_1830D4000, v131, v134, "%{public}s called with null browser_block, dumping backtrace:%{public}s", type, 0x16u);
            }

            free(v133);
            goto LABEL_245;
          }
          if (v135)
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&type[4] = "nw_browser_start_custom_browser_locked";
            _os_log_impl(&dword_1830D4000, v131, v134, "%{public}s called with null browser_block, no backtrace", type, 0xCu);
          }
        }
        else
        {
          v131 = __nwlog_obj();
          os_log_type_t v136 = v144[0];
          if (os_log_type_enabled(v131, (os_log_type_t)v144[0]))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&type[4] = "nw_browser_start_custom_browser_locked";
            _os_log_impl(&dword_1830D4000, v131, v136, "%{public}s called with null browser_block, backtrace limit exceeded", type, 0xCu);
          }
        }

LABEL_245:
        if (v130) {
          free(v130);
        }

        goto LABEL_152;
      case 2:
        goto LABEL_175;
      case 3:
        __int16 v36 = v3;
        if (!nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          __int16 v37 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = *((_DWORD *)v36 + 48);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v38;
            _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s [B%u] start: dns browser", buf, 0x12u);
          }
        }
        if (nw_browse_descriptor_get_type(*((void **)v36 + 4)) == 1)
        {
          if (nw_browse_descriptor_is_meta_query(*((void **)v36 + 4)))
          {
            uint64_t v39 = "Invalid meta query type specified. nw_browser_start_dns_browser_locked";
LABEL_150:
            nw_browser_fail_on_dns_error_locked((NWConcrete_nw_browser *)v36, -65540, v39);
LABEL_151:

LABEL_152:
            signed int v70 = 2;
            goto LABEL_185;
          }
          pid_t v53 = getpid();
          if (!nw_parameters_has_delegated_proc_pid(*((void **)v36 + 5), v53)
            && !nw_parameters_has_delegated_proc_uuid(*((void **)v36 + 5)))
          {
            int Connection = DNSServiceCreateConnection((DNSServiceRef *)v36 + 15);
            goto LABEL_139;
          }
          if (nw_parameters_has_delegated_proc_pid(*((void **)v36 + 5), v53))
          {
            int pid = nw_parameters_get_pid(*((void **)v36 + 5));
            if (!nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              os_log_type_t v55 = (id)gbrowserLogObj;
              if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
              {
                int v56 = *((_DWORD *)v36 + 48);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v56;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = pid;
                _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] Delegating DNS service to PID %d", buf, 0x18u);
              }
            }
            int Connection = DNSServiceCreateDelegateConnection();
            if (!Connection)
            {
LABEL_139:
              if (nw_browser_fail_on_dns_error_locked((NWConcrete_nw_browser *)v36, Connection, "DNSServiceCreateConnection"))
              {
                goto LABEL_151;
              }
              uint64_t v81 = (_DNSServiceRef_t *)*((void *)v36 + 15);
              id v82 = nw_parameters_copy_context(*((void **)v36 + 5));
              BOOL v83 = nw_context_copy_workloop(v82);
              LODWORD(v81) = DNSServiceSetDispatchQueue(v81, (dispatch_queue_t)v83);

              if (nw_browser_fail_on_dns_error_locked((NWConcrete_nw_browser *)v36, (int)v81, "DNSServiceSetDispatchQueue"))
              {
                goto LABEL_151;
              }
              *((void *)v36 + 16) = *((void *)v36 + 15);
              nw_interface_t v84 = nw_parameters_copy_required_interface(*((nw_parameters_t *)v36 + 5));
              v85 = (char *)v84;
              if (v84) {
                uint64_t isa_low = LODWORD(v84[1].isa);
              }
              else {
                uint64_t isa_low = 0;
              }
              uint64_t v90 = nw_browser_derive_endpoint_flags((NWConcrete_nw_browser *)v36);
              bonjour_service_os_log_type_t type = nw_browse_descriptor_get_bonjour_service_type(*((nw_browse_descriptor_t *)v36 + 4));
              bonjour_service_domain = nw_browse_descriptor_get_bonjour_service_domain(*((nw_browse_descriptor_t *)v36
                                                                                       + 4));
              if (v36[197]) {
                uint64_t v93 = MEMORY[0x1E4F14908];
              }
              else {
                uint64_t v93 = 0;
              }
              int v94 = MEMORY[0x185315860](v36 + 128, v90, isa_low, bonjour_service_type, bonjour_service_domain, v93, nw_browser_dns_service_browse_callback, v36);
              if (nw_browser_fail_on_dns_error_locked((NWConcrete_nw_browser *)v36, v94, "DNSServiceBrowse"))
              {

                goto LABEL_152;
              }
              if (isa_low && !nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                v95 = (id)gbrowserLogObj;
                if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
                {
                  v96 = "any";
                  int v97 = *((_DWORD *)v36 + 48);
                  *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                  *(_DWORD *)buf = 136446978;
                  if (v85) {
                    v96 = v85 + 104;
                  }
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v97;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v96;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = isa_low;
                  _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] Scoping browse to %{public}s [%d]", buf, 0x22u);
                }
              }
              if (!nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                id v98 = (id)gbrowserLogObj;
                if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
                {
                  int v99 = *((_DWORD *)v36 + 48);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v99;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v90;
                  _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] dns: start browse with flags %#x", buf, 0x18u);
                }
              }
LABEL_175:
              int v100 = v3;
              if (!nw_parameters_get_logging_disabled(*((void *)v100 + 5)))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                id v101 = (id)gbrowserLogObj;
                if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
                {
                  int v102 = *((_DWORD *)v100 + 48);
                  *(_DWORD *)v144 = 136446466;
                  v145 = "nw_browser_start_path_browser_locked";
                  __int16 v146 = 1024;
                  LODWORD(v147) = v102;
                  _os_log_impl(&dword_1830D4000, v101, OS_LOG_TYPE_DEFAULT, "%{public}s [B%u] path: start browser", v144, 0x12u);
                }
              }
              v103 = (void **)(v100 + 88);
              if (*((void *)v100 + 11) || *((void *)v100 + 12))
              {

LABEL_184:
                signed int v70 = 1;
LABEL_185:
                nw_browser_set_state_locked(v3, v70, 0);
                os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
                goto LABEL_186;
              }
              evaluator_for_browse = nw_path_create_evaluator_for_browse(*((void **)v100 + 4), *((void **)v100 + 5));
              if (evaluator_for_browse)
              {
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = ___ZL36nw_browser_start_path_browser_lockedP21NWConcrete_nw_browser_block_invoke;
                *(void *)&unsigned char buf[24] = &unk_1E524AEE0;
                uint64_t v105 = v100;
                *(void *)&unsigned char buf[32] = v105;
                nw_path_evaluator_set_update_handler(evaluator_for_browse, 0, buf);
                objc_storeStrong((id *)v100 + 11, evaluator_for_browse);
                v106 = (os_unfair_lock_s *)*v103;
                if (*v103)
                {
                  id v107 = v106 + 24;
                  char v108 = v106;
                  os_unfair_lock_lock(v107);
                  id v109 = v108[6];
                  os_unfair_lock_unlock(v107);
                }
                else
                {
                  id v109 = 0;
                }
                v114 = (void *)*((void *)v100 + 12);
                *((void *)v100 + 12) = v109;

                id v115 = nw_parameters_copy_context(*((void **)v100 + 5));
                *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                *(void *)&os_log_type_t type[8] = 3221225472;
                *(void *)&os_log_type_t type[16] = ___ZL36nw_browser_start_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2;
                v142 = &unk_1E524BAA8;
                v116 = v105;
                v143 = v116;
                nw_queue_context_async(v115, type);

                goto LABEL_184;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v110 = (id)gLogObj;
              *(_DWORD *)v144 = 136446210;
              v145 = "nw_browser_start_path_browser_locked";
              v111 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v138 = OS_LOG_TYPE_ERROR;
              char v137 = 0;
              if (__nwlog_fault(v111, &v138, &v137))
              {
                if (v138 == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v112 = (id)gLogObj;
                  os_log_type_t v113 = v138;
                  if (os_log_type_enabled(v112, v138))
                  {
                    *(_DWORD *)v144 = 136446210;
                    v145 = "nw_browser_start_path_browser_locked";
                    _os_log_impl(&dword_1830D4000, v112, v113, "%{public}s nw_path_create_evaluator_for_browse failed", v144, 0xCu);
                  }
                }
                else if (v137)
                {
                  uint64_t v117 = (char *)__nw_create_backtrace_string();
                  v112 = __nwlog_obj();
                  os_log_type_t v118 = v138;
                  BOOL v119 = os_log_type_enabled(v112, v138);
                  if (v117)
                  {
                    if (v119)
                    {
                      *(_DWORD *)v144 = 136446466;
                      v145 = "nw_browser_start_path_browser_locked";
                      __int16 v146 = 2082;
                      v147 = v117;
                      _os_log_impl(&dword_1830D4000, v112, v118, "%{public}s nw_path_create_evaluator_for_browse failed, dumping backtrace:%{public}s", v144, 0x16u);
                    }

                    free(v117);
                    goto LABEL_213;
                  }
                  if (v119)
                  {
                    *(_DWORD *)v144 = 136446210;
                    v145 = "nw_browser_start_path_browser_locked";
                    _os_log_impl(&dword_1830D4000, v112, v118, "%{public}s nw_path_create_evaluator_for_browse failed, no backtrace", v144, 0xCu);
                  }
                }
                else
                {
                  v112 = __nwlog_obj();
                  os_log_type_t v124 = v138;
                  if (os_log_type_enabled(v112, v138))
                  {
                    *(_DWORD *)v144 = 136446210;
                    v145 = "nw_browser_start_path_browser_locked";
                    _os_log_impl(&dword_1830D4000, v112, v124, "%{public}s nw_path_create_evaluator_for_browse failed, backtrace limit exceeded", v144, 0xCu);
                  }
                }
              }
LABEL_213:
              if (v111) {
                free(v111);
              }

              goto LABEL_152;
            }
            if (!nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              uint64_t v58 = (id)gbrowserLogObj;
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
              {
                int v59 = *((_DWORD *)v36 + 48);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v59;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = pid;
                *(_WORD *)&unsigned char buf[24] = 1024;
                *(_DWORD *)&buf[26] = Connection;
                _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_ERROR, "%{public}s [B%u] DNSServiceCreateDelegateConnection(..., epid=%u, NULL) failed: %d", buf, 0x1Eu);
              }
            }
          }
          else
          {
            int Connection = 0;
            int pid = 0;
          }
          if (nw_parameters_has_delegated_proc_uuid(*((void **)v36 + 5)))
          {
            if (Connection && !nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              __int16 v71 = (id)gbrowserLogObj;
              if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
              {
                int v72 = *((_DWORD *)v36 + 48);
                string_for_dns_service_error = nwlog_get_string_for_dns_service_error(Connection);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v72;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = pid;
                *(_WORD *)&unsigned char buf[24] = 2082;
                *(void *)&buf[26] = string_for_dns_service_error;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = Connection;
                _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_ERROR, "%{public}s [B%u] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID", buf, 0x28u);
              }
            }
            *(void *)os_log_type_t type = 0;
            *(void *)&os_log_type_t type[8] = 0;
            nw_parameters_get_e_proc_uuid(*((void **)v36 + 5), type);
            if (!nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              __int16 v74 = (id)gbrowserLogObj;
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
              {
                int v75 = *((_DWORD *)v36 + 48);
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v75;
                _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] Delegating DNS service to eUUID", buf, 0x12u);
              }
            }
            int Connection = DNSServiceCreateDelegateConnection();
            if (Connection && !nw_parameters_get_logging_disabled(*((void *)v36 + 5)))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              __int16 v76 = (id)gbrowserLogObj;
              if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
              {
                int v77 = *((_DWORD *)v36 + 48);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v77;
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&buf[20] = 16;
                *(_WORD *)&unsigned char buf[24] = 2096;
                *(void *)&buf[26] = type;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = Connection;
                _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_ERROR, "%{public}s [B%u] DNSServiceCreateDelegateConnection(..., 0, %{uuid_t}.16P) failed: %d", buf, 0x28u);
              }
            }
          }
          goto LABEL_139;
        }
        uint64_t v39 = "nw_browser_start_dns_browser_locked";
        if (nw_parameters_get_logging_disabled(*((void *)v36 + 5))) {
          goto LABEL_150;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        id v40 = (id)gbrowserLogObj;
        int v41 = *((_DWORD *)v36 + 48);
        int v42 = nw_browse_descriptor_get_type(*((void **)v36 + 4));
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v41;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v42;
        unsigned __int16 v43 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v144[0] = 0;
        if (!__nwlog_fault(v43, type, v144)) {
          goto LABEL_148;
        }
        if (type[0] == 17)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          unint64_t v44 = (id)gbrowserLogObj;
          os_log_type_t v45 = type[0];
          if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
          {
            int v46 = *((_DWORD *)v36 + 48);
            int v47 = nw_browse_descriptor_get_type(*((void **)v36 + 4));
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v46;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v47;
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s [B%u] unknown browser.cppode of operation for type %d", buf, 0x18u);
          }
        }
        else if (v144[0])
        {
          unsigned __int16 v60 = __nw_create_backtrace_string();
          if (v60)
          {
            os_log_type_t v61 = (char *)v60;
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
            }
            uint64_t v62 = (id)gbrowserLogObj;
            os_log_type_t v63 = type[0];
            if (os_log_type_enabled(v62, (os_log_type_t)type[0]))
            {
              int v64 = *((_DWORD *)v36 + 48);
              int v65 = nw_browse_descriptor_get_type(*((void **)v36 + 4));
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v64;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v65;
              *(_WORD *)&unsigned char buf[24] = 2082;
              *(void *)&buf[26] = v61;
              _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s [B%u] unknown browser.cppode of operation for type %d, dumping backtrace:%{public}s", buf, 0x22u);
            }

            free(v61);
            goto LABEL_148;
          }
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          unint64_t v44 = (id)gbrowserLogObj;
          os_log_type_t v87 = type[0];
          if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
          {
            int v88 = *((_DWORD *)v36 + 48);
            int v89 = nw_browse_descriptor_get_type(*((void **)v36 + 4));
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v88;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v89;
            _os_log_impl(&dword_1830D4000, v44, v87, "%{public}s [B%u] unknown browser.cppode of operation for type %d, no backtrace", buf, 0x18u);
          }
        }
        else
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          unint64_t v44 = (id)gbrowserLogObj;
          os_log_type_t v78 = type[0];
          if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
          {
            int v79 = *((_DWORD *)v36 + 48);
            int v80 = nw_browse_descriptor_get_type(*((void **)v36 + 4));
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v79;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v80;
            _os_log_impl(&dword_1830D4000, v44, v78, "%{public}s [B%u] unknown browser.cppode of operation for type %d, backtrace limit exceeded", buf, 0x18u);
          }
        }

LABEL_148:
        if (v43) {
          free(v43);
        }
        goto LABEL_150;
      default:
        goto LABEL_152;
    }
  }
  __int16 v5 = (os_unfair_lock_s *)&v3[1];
  if (isa == 3)
  {
    os_unfair_lock_unlock(v5);
    if (!nw_parameters_get_logging_disabled((uint64_t)v3[5].isa))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      int v6 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v7 = (int)v3[24].isa;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s [B%u] The browser has already been cancelled and cannot be started again. You must create a new browser object and start it.", buf, 0x12u);
      }
LABEL_41:
    }
  }
  else
  {
    os_unfair_lock_unlock(v5);
    if (!nw_parameters_get_logging_disabled((uint64_t)v3[5].isa))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      int v6 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v26 = (int)v3[24].isa;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s [B%u] The browser has already been started, ignoring nw_browser_start().", buf, 0x12u);
      }
      goto LABEL_41;
    }
  }
LABEL_186:
}

void sub_183AF2518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_browser_start_custom_browser_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v1[4];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZL38nw_browser_start_custom_browser_lockedP21NWConcrete_nw_browser_block_invoke_2;
  v4[3] = &unk_1E52445C0;
  __int16 v5 = v1;
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v4);
}

void sub_183AF2670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL nw_browser_fail_on_dns_error_locked(NWConcrete_nw_browser *a1, int a2, const char *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  __int16 v5 = a1;
  int v6 = v5;
  if (a2)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 5)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      int v7 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = *((_DWORD *)v6 + 48);
        int v12 = 136447234;
        Class v13 = "nw_browser_fail_on_dns_error_locked";
        __int16 v14 = 1024;
        int v15 = v8;
        __int16 v16 = 2082;
        Class v17 = a3;
        __int16 v18 = 2082;
        string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a2);
        __int16 v20 = 1024;
        int v21 = a2;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s [B%u] %{public}s failed: %{public}s(%d)", (uint8_t *)&v12, 0x2Cu);
      }
    }
    dns_error = nw_error_create_dns_error(a2);
    if (a2 == -65570)
    {
      signed int v10 = 4;
    }
    else
    {
      nw_browser_cancel_dns_browser_locked(v6);
      signed int v10 = 2;
    }
    nw_browser_set_state_locked(v6, v10, dns_error);
  }
  return a2 != 0;
}

void sub_183AF280C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_derive_endpoint_flags(NWConcrete_nw_browser *a1)
{
  id v1 = a1;
  int traffic_class = nw_parameters_get_traffic_class(*((void **)v1 + 5));
  BOOL prohibit_cellular = nw_parameters_get_prohibit_cellular(*((void **)v1 + 5));
  BOOL prohibit_expensive = nw_parameters_get_prohibit_expensive(*((nw_parameters_t *)v1 + 5));
  BOOL prohibit_constrained = nw_parameters_get_prohibit_constrained(*((nw_parameters_t *)v1 + 5));
  int use_awdl = nw_parameters_get_use_awdl(*((void **)v1 + 5));
  int use_p2p = nw_parameters_get_use_p2p(*((void **)v1 + 5));
  if (traffic_class == 100) {
    unsigned int v8 = 1074282496;
  }
  else {
    unsigned int v8 = 1073758208;
  }
  if (prohibit_cellular) {
    v8 |= 0x8000000u;
  }
  if (prohibit_expensive) {
    v8 |= 0x20000000u;
  }
  if (prohibit_constrained) {
    v8 |= 0x2000u;
  }
  if (use_awdl) {
    v8 |= 0x100000u;
  }
  if (use_p2p) {
    uint64_t v9 = v8 | 0x20000;
  }
  else {
    uint64_t v9 = v8;
  }

  return v9;
}

void sub_183AF28FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_set_state_locked(void *a1, signed int a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  __int16 v5 = a1;
  id v6 = a3;
  unsigned int v7 = v5[18];
  if (v7 == a2) {
    goto LABEL_53;
  }
  if ((a2 - 1) <= 2 && v7 == 4
    || (a2 == 4 ? (v8 = v7 >= 2) : (v8 = 1), v8 ? (char v9 = 0) : (char v9 = 1), (int)v7 < a2 || (v9 & 1) != 0))
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 5)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      __int16 v14 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v15 = v5[48];
        uint64_t v16 = v5[18];
        if (v16 > 4) {
          Class v17 = "<unknown>";
        }
        else {
          Class v17 = off_1E52447E8[v16];
        }
        __int16 v18 = off_1E52447E8[a2];
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v15;
        __int16 v56 = 2082;
        uint64_t v57 = v17;
        __int16 v58 = 2082;
        int v59 = v18;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s [B%u] state changed: %{public}s -> %{public}s", buf, 0x26u);
      }
    }
    v5[18] = a2;
    objc_storeStrong((id *)v5 + 10, a3);
    Class v19 = (const void *)*((void *)v5 + 8);
    if (v19)
    {
      __int16 v20 = _Block_copy(v19);
      int v21 = *((void *)v5 + 2);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZL27nw_browser_set_state_lockedP21NWConcrete_nw_browser18nw_browser_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
      block[3] = &unk_1E52449A0;
      id v48 = v20;
      signed int v49 = a2;
      id v46 = v6;
      int v47 = v5;
      id v22 = v20;
      dispatch_async(v21, block);
    }
    goto LABEL_53;
  }
  if (nw_parameters_get_logging_disabled(*((void *)v5 + 5))) {
    goto LABEL_53;
  }
  if (__nwlog_browser_log::onceToken[0] != -1) {
    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
  }
  id v10 = (id)gbrowserLogObj;
  unsigned int v11 = v5[48];
  uint64_t v12 = v5[18];
  if (v12 > 4) {
    Class v13 = "<unknown>";
  }
  else {
    Class v13 = off_1E52447E8[v12];
  }
  os_log_type_t v23 = off_1E52447E8[a2];
  *(_DWORD *)buf = 136446978;
  pid_t v53 = "nw_browser_set_state_locked";
  __int16 v54 = 1024;
  unsigned int v55 = v11;
  __int16 v56 = 2082;
  uint64_t v57 = v13;
  __int16 v58 = 2082;
  int v59 = v23;
  os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (__nwlog_fault(v24, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      int v25 = (id)gbrowserLogObj;
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        unsigned int v27 = v5[48];
        uint64_t v28 = v5[18];
        if (v28 > 4) {
          uint64_t v29 = "<unknown>";
        }
        else {
          uint64_t v29 = off_1E52447E8[v28];
        }
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v27;
        __int16 v56 = 2082;
        uint64_t v57 = v29;
        __int16 v58 = 2082;
        int v59 = v23;
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s", buf, 0x26u);
      }
    }
    else if (v50)
    {
      backtrace_uuid_string_t string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        BOOL v31 = (char *)backtrace_string;
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        int v32 = (id)gbrowserLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          unsigned int v34 = v5[48];
          uint64_t v35 = v5[18];
          if (v35 > 4) {
            __int16 v36 = "<unknown>";
          }
          else {
            __int16 v36 = off_1E52447E8[v35];
          }
          *(_DWORD *)buf = 136447234;
          pid_t v53 = "nw_browser_set_state_locked";
          __int16 v54 = 1024;
          unsigned int v55 = v34;
          __int16 v56 = 2082;
          uint64_t v57 = v36;
          __int16 v58 = 2082;
          int v59 = v23;
          __int16 v60 = 2082;
          os_log_type_t v61 = v31;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s, dumping backtrace:%{public}s", buf, 0x30u);
        }

        free(v31);
        if (v24) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      int v25 = (id)gbrowserLogObj;
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v25, type))
      {
        unsigned int v42 = v5[48];
        uint64_t v43 = v5[18];
        if (v43 > 4) {
          unint64_t v44 = "<unknown>";
        }
        else {
          unint64_t v44 = off_1E52447E8[v43];
        }
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v42;
        __int16 v56 = 2082;
        uint64_t v57 = v44;
        __int16 v58 = 2082;
        int v59 = v23;
        _os_log_impl(&dword_1830D4000, v25, v41, "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s, no backtrace", buf, 0x26u);
      }
    }
    else
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      int v25 = (id)gbrowserLogObj;
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v25, type))
      {
        unsigned int v38 = v5[48];
        uint64_t v39 = v5[18];
        if (v39 > 4) {
          id v40 = "<unknown>";
        }
        else {
          id v40 = off_1E52447E8[v39];
        }
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v38;
        __int16 v56 = 2082;
        uint64_t v57 = v40;
        __int16 v58 = 2082;
        int v59 = v23;
        _os_log_impl(&dword_1830D4000, v25, v37, "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s, backtrace limit exceeded", buf, 0x26u);
      }
    }
  }
  if (v24) {
LABEL_52:
  }
    free(v24);
LABEL_53:
}

uint64_t ___ZL27nw_browser_set_state_lockedP21NWConcrete_nw_browser18nw_browser_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 56), *(void *)(a1 + 32));
}

void ___ZL36nw_browser_start_path_browser_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v4 + 72) == 1)
  {
    objc_storeStrong((id *)(v4 + 96), a2);
    nw_browser_update_path_browser_locked(*(NWConcrete_nw_browser **)(a1 + 32));
    uint64_t v4 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 8));
}

void sub_183AF3044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_browser_start_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 72) == 1)
  {
    nw_browser_update_path_browser_locked((NWConcrete_nw_browser *)v2);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v3 = (os_unfair_lock_s *)(v2 + 8);

  os_unfair_lock_unlock(v3);
}

void nw_browser_update_path_browser_locked(NWConcrete_nw_browser *a1)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = nw_dictionary_create();
    uint64_t v3 = nw_dictionary_create();
    uint64_t v4 = *((void *)v1 + 13);
    if (v4)
    {
      v61[0] = MEMORY[0x1E4F143A8];
      v61[1] = 3221225472;
      v61[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke;
      v61[3] = &unk_1E52445E8;
      uint64_t v62 = v1;
      os_log_type_t v63 = v3;
      nw_dictionary_apply(v4, (uint64_t)v61);
    }
    v59[0] = MEMORY[0x1E4F143A8];
    v59[1] = 3221225472;
    v59[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2;
    v59[3] = &unk_1E5247FE0;
    id v5 = v1;
    __int16 v60 = v5;
    char v50 = v3;
    nw_dictionary_apply((uint64_t)v3, (uint64_t)v59);
    id v6 = v5[12];
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 3221225472;
    v56[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_108;
    v56[3] = &unk_1E5244610;
    unsigned int v7 = v5;
    uint64_t v57 = v7;
    BOOL v8 = v2;
    id v58 = v8;
    nw_path_enumerate_browse_options(v6, v56);
    objc_storeStrong((id *)v1 + 13, v2);
    id v9 = nw_path_copy_discovered_endpoints(v5[12]);
    if (nw_browse_descriptor_get_type(v7[4]) == 2)
    {
      id v10 = v7;
      object = (atomic_uchar *)v9;
      signed int v49 = _Block_copy(v10[7]);
      if (v49)
      {
        BOOL v11 = nw_array_create();
        v75[0] = MEMORY[0x1E4F143A8];
        v75[1] = 3221225472;
        v75[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke;
        v75[3] = &unk_1E524AE18;
        uint64_t v12 = (id)v11;
        id v76 = v12;
        nw_array_apply(object, (uint64_t)v75);
        if (!nw_parameters_get_logging_disabled((uint64_t)v10[5]))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          Class v13 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            if (v12) {
              uint64_t v14 = (uint64_t)(v12[3] - v12[2]) >> 3;
            }
            else {
              uint64_t v14 = 0;
            }
            int v18 = *((_DWORD *)v10 + 48);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_browser_app_svc_update_browse_result_locked";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v18;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v14;
            *(_WORD *)&buf[28] = 2112;
            *(void *)&buf[30] = v12;
            _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] discovered %zu endpoints: %@", buf, 0x26u);
          }
        }
        BOOL v19 = nw_array_create();
        BOOL v20 = nw_parallel_array_create();
        int v21 = (atomic_uchar *)v10[17];
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_115;
        *(void *)&unsigned char buf[24] = &unk_1E52446D8;
        id v22 = v8;
        os_log_type_t v23 = v12;
        *(void *)&unsigned char buf[32] = v23;
        id v24 = (id)v19;
        id v86 = v24;
        id v25 = (id)v20;
        id v87 = v25;
        os_log_type_t v26 = v10;
        int v88 = v26;
        nw_array_apply(v21, (uint64_t)buf);
        *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
        uint64_t v69 = 3221225472;
        signed int v70 = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_118;
        __int16 v71 = &unk_1E52497B8;
        id v27 = v25;
        id v72 = v27;
        uint64_t v28 = v24;
        id v73 = v28;
        uint64_t v29 = v26;
        __int16 v74 = v29;
        int v47 = v23;
        os_log_type_t v30 = (atomic_uchar *)v23;
        BOOL v8 = v22;
        nw_array_apply(v30, (uint64_t)type);
        BOOL v31 = v29[2];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_119;
        block[3] = &unk_1E5248030;
        id v32 = v27;
        id v65 = v32;
        os_log_type_t v33 = v29;
        os_log_type_t v66 = v33;
        id v67 = v49;
        dispatch_async(v31, block);
        if (!nw_parameters_get_logging_disabled((uint64_t)v10[5]))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          unsigned int v34 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            if (v28) {
              uint64_t v35 = (uint64_t)(v28[3] - v28[2]) >> 3;
            }
            else {
              uint64_t v35 = 0;
            }
            int v36 = *((_DWORD *)v33 + 48);
            *(_DWORD *)int v77 = 136446978;
            os_log_type_t v78 = "nw_browser_app_svc_update_browse_result_locked";
            __int16 v79 = 1024;
            int v80 = v36;
            __int16 v81 = 2048;
            uint64_t v82 = v35;
            __int16 v83 = 2112;
            nw_interface_t v84 = v28;
            _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] new_results %zu endpoints: %@", v77, 0x26u);
          }
        }
        os_log_type_t v37 = v10[17];
        v10[17] = v28;
        unsigned int v38 = v28;
      }
    }
    else
    {
      v54[0] = MEMORY[0x1E4F143A8];
      v54[1] = 3221225472;
      v54[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_110;
      v54[3] = &unk_1E524AE18;
      unsigned int v15 = v7;
      unsigned int v55 = v15;
      nw_array_apply((atomic_uchar *)v9, (uint64_t)v54);
      uint64_t v16 = (atomic_uchar *)v15[17];
      v51[0] = MEMORY[0x1E4F143A8];
      v51[1] = 3221225472;
      v51[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_113;
      v51[3] = &unk_1E5247FB8;
      Class v17 = v15;
      int v52 = v17;
      id v53 = v9;
      nw_array_apply(v16, (uint64_t)v51);
      nw_browser_notify_browse_result_changes_locked(v17);
    }
    goto LABEL_28;
  }
  uint64_t v39 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
  id v40 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(block[0]) = 0;
  if (__nwlog_fault(v40, type, block))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v41 = __nwlog_obj();
      os_log_type_t v42 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (LOBYTE(block[0]))
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v41 = __nwlog_obj();
      os_log_type_t v44 = type[0];
      BOOL v45 = os_log_type_enabled(v41, type[0]);
      if (backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_45;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
        _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v41 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
        _os_log_impl(&dword_1830D4000, v41, v46, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_45:
  if (v40) {
    free(v40);
  }
LABEL_28:
}

void sub_183AF39F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  id v5 = a3;
  id v6 = nw_path_copy_flow_for_registration(*(NWConcrete_nw_path **)(*(void *)(a1 + 32) + 96), v5);
  if (v6)
  {
    char v7 = v6[186];

    if ((v7 & 4) != 0) {
      nw_dictionary_set_value(*(void *)(a1 + 40), a2, v5);
    }
  }

  return 1;
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40)))
  {
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
    }
    id v6 = (id)gbrowserLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 192);
      int v9 = 136446722;
      id v10 = "nw_browser_update_path_browser_locked_block_invoke_2";
      __int16 v11 = 1024;
      int v12 = v7;
      __int16 v13 = 2114;
      id v14 = v5;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] Removing defunct flow registration %{public}@", (uint8_t *)&v9, 0x1Cu);
    }
  }
  nw_path_flow_registration_close(v5);
  nw_dictionary_set_value(*(void *)(*(void *)(a1 + 32) + 104), a2, 0);

  return 1;
}

void sub_183AF3C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_108(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 104);
  if (!v5) {
    goto LABEL_4;
  }
  flow_inner = nw_dictionary_copy_value(v5, (uint64_t)out);
  if (!flow_inner)
  {
    uint64_t v4 = *(void *)(a1 + 32);
LABEL_4:
    flow_inner = nw_path_evaluator_create_flow_inner(*(void **)(v4 + 88), 0, 0, 1, 0, uu, 0, 0, 0);
  }
  int v7 = flow_inner;
  nw_dictionary_set_value(*(void *)(a1 + 40), out, flow_inner);
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(atomic_uchar **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2;
  v8[3] = &unk_1E524AE18;
  id v6 = v4;
  id v9 = v6;
  if (nw_array_apply(v5, (uint64_t)v8)) {
    nw_array_append(*(void *)(a1 + 32), v6);
  }

  return 1;
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_115(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id endpoint = nw_browse_result_get_endpoint(v4);
  long long v38 = 0uLL;
  nw_endpoint_get_service_identifier(endpoint, &v38);
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:&v38];
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000;
  uint64_t v29 = 0;
  int v7 = *(atomic_uchar **)(a1 + 32);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_117;
  v18[3] = &unk_1E52446B0;
  id v8 = v6;
  id v19 = v8;
  id v25 = &v26;
  id v20 = *(id *)(a1 + 40);
  id v9 = endpoint;
  int v21 = v9;
  id v22 = *(id *)(a1 + 48);
  id v10 = v4;
  os_log_type_t v23 = v10;
  id v24 = *(id *)(a1 + 56);
  if (nw_array_apply(v7, (uint64_t)v18))
  {
    nw_parallel_array_append(*(void *)(a1 + 48), v10, 0);
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 56) + 40)))
    {
      nw_browse_result_change_t changes = nw_browse_result_get_changes(v10, 0);
      BOOL v12 = nw_browse_result_get_change_description(changes);
      if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 56) + 40)))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        __int16 v13 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v14 = *(_DWORD *)(*(void *)(a1 + 56) + 192);
          *(_DWORD *)buf = 136446978;
          BOOL v31 = "nw_browser_app_svc_update_browse_result_locked_block_invoke";
          __int16 v32 = 1024;
          int v33 = v14;
          __int16 v34 = 2112;
          uint64_t v35 = v10;
          __int16 v36 = 2082;
          BOOL v37 = v12;
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s [B%u] browse_result_removed: (%@), %{public}s", buf, 0x26u);
        }
      }
      if (v12) {
        free((void *)v12);
      }
    }
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 56) + 40)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      uint64_t v15 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v16 = *(_DWORD *)(*(void *)(a1 + 56) + 192);
        *(_DWORD *)buf = 136446722;
        BOOL v31 = "nw_browser_app_svc_update_browse_result_locked_block_invoke";
        __int16 v32 = 1024;
        int v33 = v16;
        __int16 v34 = 2112;
        uint64_t v35 = v9;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] browse_result_matched existing endpoint: %@", buf, 0x1Cu);
      }
    }
  }

  _Block_object_dispose(&v26, 8);
  return 1;
}

void sub_183AF4138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_118(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = nw_browse_result_create(v4);
  nw_parallel_array_append(a1[4], 0, v5);
  nw_array_append(a1[5], v5);
  if (!nw_parameters_get_logging_disabled(*(void *)(a1[6] + 40)))
  {
    nw_browse_result_change_t changes = nw_browse_result_get_changes(0, v5);
    BOOL v7 = nw_browse_result_get_change_description(changes);
    if (!nw_parameters_get_logging_disabled(*(void *)(a1[6] + 40)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      id v8 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = *(_DWORD *)(a1[6] + 192);
        int v11 = 136446978;
        BOOL v12 = "nw_browser_app_svc_update_browse_result_locked_block_invoke";
        __int16 v13 = 1024;
        int v14 = v9;
        __int16 v15 = 2112;
        int v16 = v5;
        __int16 v17 = 2082;
        BOOL v18 = v7;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [B%u] browse_result_added: (%@), %{public}s", (uint8_t *)&v11, 0x26u);
      }
    }
    if (v7) {
      free((void *)v7);
    }
  }

  return 1;
}

void sub_183AF4338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_119(uint64_t a1)
{
  uint64_t count = nw_parallel_array_get_count(*(void **)(a1 + 32));
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_120;
  v4[3] = &unk_1E5244728;
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = count;
  nw_parallel_array_apply(v3, (uint64_t)v4);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_110(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = nw_endpoint_copy_interface(v4);
  uint64_t v20 = 0;
  int v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 1;
  id v6 = *(atomic_uchar **)(*(void *)(a1 + 32) + 136);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_3;
  v16[3] = &unk_1E5244660;
  id v7 = v4;
  id v17 = v7;
  id v8 = v5;
  id v18 = v8;
  uint64_t v19 = &v20;
  nw_array_apply(v6, (uint64_t)v16);
  if (*((unsigned char *)v21 + 24))
  {
    int v9 = nw_endpoint_copy(v7);
    nw_endpoint_set_interface(v9, 0);
    bzero(__s, 0x3F1uLL);
    uint64_t domain_for_policy = nw_endpoint_get_domain_for_policy(v9);
    if (domain_for_policy)
    {
      uint64_t v11 = 0;
      while (1)
      {
        int v12 = *(unsigned __int8 *)(domain_for_policy + v11);
        __s[v11] = v12;
        if (!v12) {
          break;
        }
        if (++v11 == 1008)
        {
          __s[1008] = 0;
          break;
        }
      }
      for (size_t i = 0; i < strlen(__s); ++i)
        __s[i] = __tolower(__s[i]);
    }
    else
    {
      nw_browser_copy_key_for_application_service_endpoint(v9, __s);
    }
    if ((nw_browser_add_result_locked(*(void **)(a1 + 32), __s, v9, v8, 1) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        id v25 = "nw_browser_update_path_browser_locked_block_invoke_2";
        __int16 v26 = 2080;
        id v27 = __s;
        __int16 v28 = 2112;
        uint64_t v29 = v9;
        __int16 v30 = 2112;
        id v31 = v8;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Failed to add result for %s/%@ (%@)", buf, 0x2Au);
      }
    }
  }

  _Block_object_dispose(&v20, 8);
  return 1;
}

void sub_183AF469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_113(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_browse_result_get_discovered_from_path(v4))
  {
    id endpoint = nw_browse_result_get_endpoint(v4);
    if (nw_browse_result_get_interfaces_count(v4))
    {
      enumerator[0] = MEMORY[0x1E4F143A8];
      enumerator[1] = 3221225472;
      enumerator[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_114;
      enumerator[3] = &unk_1E5244688;
      id v8 = *(id *)(a1 + 32);
      id v9 = *(id *)(a1 + 40);
      id v10 = endpoint;
      nw_browse_result_enumerate_interfaces(v4, enumerator);
    }
    else
    {
      nw_browser_check_and_remove_endpoints_locked(*(void **)(a1 + 32), *(void **)(a1 + 40), endpoint, 0);
    }
  }
  return 1;
}

void sub_183AF47F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_notify_browse_result_changes_locked(NWConcrete_nw_browser *a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!*((void *)v1 + 2))
  {
    id v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
    id v25 = (char *)_os_log_send_and_compose_impl();

    v59[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v25, v59, type))
    {
      if (v59[0] == 17)
      {
        __int16 v26 = __nwlog_obj();
        os_log_type_t v27 = v59[0];
        if (os_log_type_enabled(v26, (os_log_type_t)v59[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null browser->client_queue", buf, 0xCu);
        }
      }
      else if (type[0])
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        __int16 v26 = __nwlog_obj();
        os_log_type_t v29 = v59[0];
        BOOL v30 = os_log_type_enabled(v26, (os_log_type_t)v59[0]);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s called with null browser->client_queue, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
          _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s called with null browser->client_queue, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v26 = __nwlog_obj();
        os_log_type_t v35 = v59[0];
        if (os_log_type_enabled(v26, (os_log_type_t)v59[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
          _os_log_impl(&dword_1830D4000, v26, v35, "%{public}s called with null browser->client_queue, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_45:
    if (v25) {
      free(v25);
    }
    goto LABEL_18;
  }
  if (*((_DWORD *)v1 + 18) == 1)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    __int16 v56 = __Block_byref_object_copy__57606;
    uint64_t v57 = __Block_byref_object_dispose__57607;
    BOOL v58 = nw_parallel_array_create();
    id v4 = (void *)*((void *)v2 + 20);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke;
    applier[3] = &unk_1E5244750;
    id v5 = v3;
    id v46 = v5;
    id v6 = v2;
    int v47 = v6;
    id v48 = buf;
    xpc_dictionary_apply(v4, applier);
    id v7 = *(id *)(*(void *)&buf[8] + 40);
    if (nw_browse_descriptor_get_type(*((void **)v6 + 4)) != 2)
    {
      __int16 v15 = v7;
LABEL_14:
      id v18 = _Block_copy(*((const void **)v6 + 7));
      uint64_t count = nw_parallel_array_get_count(v15);
      if (v18)
      {
        uint64_t v20 = count;
        if (count)
        {
          int v21 = *((void *)v2 + 2);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_124;
          block[3] = &unk_1E5244778;
          os_log_type_t v41 = v15;
          os_log_type_t v42 = v6;
          uint64_t v44 = v20;
          id v43 = v18;
          dispatch_async(v21, block);
        }
      }
      uint64_t v22 = (void *)*((void *)v2 + 20);
      *((void *)v2 + 20) = v5;
      id v23 = v5;

      _Block_object_dispose(buf, 8);
      goto LABEL_18;
    }
    id v8 = *(void **)(*(void *)&buf[8] + 40);
    id v9 = v6;
    id v10 = v8;
    if (v10)
    {
      BOOL v11 = nw_parallel_array_create();
      *(void *)int v59 = MEMORY[0x1E4F143A8];
      *(void *)&v59[8] = 3221225472;
      *(void *)&v59[16] = ___ZL31nw_browser_create_ordered_arrayP21NWConcrete_nw_browserPU31objcproto20OS_nw_parallel_array8NSObject_block_invoke;
      __int16 v60 = &unk_1E52447A0;
      id v12 = (id)v11;
      id v61 = v12;
      nw_parallel_array_apply(v10, (uint64_t)v59);
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v50 = 3221225472;
      os_log_type_t v51 = ___ZL31nw_browser_create_ordered_arrayP21NWConcrete_nw_browserPU31objcproto20OS_nw_parallel_array8NSObject_block_invoke_2;
      int v52 = &unk_1E52447A0;
      id v13 = v12;
      id v53 = v13;
      nw_parallel_array_apply(v10, (uint64_t)type);
      int v14 = v53;
      __int16 v15 = v13;

LABEL_6:
      goto LABEL_14;
    }
    id v31 = __nwlog_obj();
    *(_DWORD *)int v59 = 136446210;
    *(void *)&void v59[4] = "nw_browser_create_ordered_array";
    __int16 v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v32, type, &v54))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)int v59 = 136446210;
          *(void *)&void v59[4] = "nw_browser_create_ordered_array";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null results", v59, 0xCu);
        }
      }
      else if (v54)
      {
        __int16 v36 = (char *)__nw_create_backtrace_string();
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        BOOL v37 = os_log_type_enabled(v33, type[0]);
        if (v36)
        {
          if (v37)
          {
            *(_DWORD *)int v59 = 136446466;
            *(void *)&void v59[4] = "nw_browser_create_ordered_array";
            *(_WORD *)&v59[12] = 2082;
            *(void *)&v59[14] = v36;
            _os_log_impl(&dword_1830D4000, v33, v39, "%{public}s called with null results, dumping backtrace:%{public}s", v59, 0x16u);
          }

          free(v36);
          goto LABEL_53;
        }
        if (v37)
        {
          *(_DWORD *)int v59 = 136446210;
          *(void *)&void v59[4] = "nw_browser_create_ordered_array";
          _os_log_impl(&dword_1830D4000, v33, v39, "%{public}s called with null results, no backtrace", v59, 0xCu);
        }
      }
      else
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v38 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)int v59 = 136446210;
          *(void *)&void v59[4] = "nw_browser_create_ordered_array";
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null results, backtrace limit exceeded", v59, 0xCu);
        }
      }
    }
LABEL_53:
    if (v32) {
      free(v32);
    }
    __int16 v15 = 0;
    goto LABEL_6;
  }
  if (!nw_parameters_get_logging_disabled(*((void *)v1 + 5)))
  {
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
    }
    int v16 = (id)gbrowserLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *((_DWORD *)v2 + 48);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] not in ready state", buf, 0x12u);
    }
  }
LABEL_18:
}

void sub_183AF5040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__57606(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__57607(uint64_t a1)
{
}

uint64_t ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t value = xpc_uint64_get_value(v5);
  uint64_t v7 = value;
  if (value)
  {
    if ((value & 4) == 0)
    {
      xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), a2, 1uLL);
      if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40)))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        id v8 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v9 = *(_DWORD *)(*(void *)(a1 + 40) + 192);
          *(_DWORD *)buf = 136446978;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          __int16 v94 = 1024;
          *(_DWORD *)v95 = v9;
          *(_WORD *)&v95[4] = 2080;
          *(void *)&v95[6] = a2;
          __int16 v96 = 1024;
          LODWORD(v97) = 1;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] changes_map: %s = identical(%d)", buf, 0x22u);
        }
      }
      if (v7 == 1)
      {
        uint64_t v10 = 1;
        goto LABEL_82;
      }
    }
    BOOL v11 = nw_browser_copy_old_result_locked(*(NWConcrete_nw_browser **)(a1 + 40), a2);
    id v12 = nw_browser_copy_new_result_locked(*(NWConcrete_nw_browser **)(a1 + 40), a2);
    id v13 = v12;
    uint64_t v14 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v14 + 196)) {
      BOOL v15 = (v7 & 2) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15 && (v7 & 0x20) == 0)
    {
      xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), a2, v7);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v18 = (id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        __int16 v94 = 2080;
        *(void *)v95 = a2;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s changes_map: %s was added but delaying notify until TXT record is found", buf, 0x16u);
      }

      goto LABEL_80;
    }
    if ((~(_BYTE)v7 & 6) == 0)
    {
      id v53 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
      char v54 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v90 = 0;
      if (!__nwlog_fault(v54, &type, &v90)) {
        goto LABEL_163;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v55 = __nwlog_obj();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s Cannot have both add and remove at the same time", buf, 0xCu);
        }
        goto LABEL_197;
      }
      if (!v90)
      {
        unsigned int v55 = __nwlog_obj();
        os_log_type_t v79 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v55, v79, "%{public}s Cannot have both add and remove at the same time, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_197;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unsigned int v55 = __nwlog_obj();
      os_log_type_t v63 = type;
      BOOL v64 = os_log_type_enabled(v55, type);
      if (!backtrace_string)
      {
        if (v64)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v55, v63, "%{public}s Cannot have both add and remove at the same time, no backtrace", buf, 0xCu);
        }
        goto LABEL_197;
      }
      if (v64)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        __int16 v94 = 2082;
        *(void *)v95 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v55, v63, "%{public}s Cannot have both add and remove at the same time, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_162;
    }
    if ((v7 & 2) != 0)
    {
      if (!v11 && v12)
      {
        uint64_t v17 = *(void *)(v14 + 136);
        goto LABEL_51;
      }
      __int16 v60 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
      char v54 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v90 = 0;
      if (!__nwlog_fault(v54, &type, &v90)) {
        goto LABEL_163;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v55 = __nwlog_obj();
        os_log_type_t v61 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v55, v61, "%{public}s Unexpected result pair for add", buf, 0xCu);
        }
        goto LABEL_197;
      }
      if (!v90)
      {
        unsigned int v55 = __nwlog_obj();
        os_log_type_t v86 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v55, v86, "%{public}s Unexpected result pair for add, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_197;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unsigned int v55 = __nwlog_obj();
      os_log_type_t v75 = type;
      BOOL v76 = os_log_type_enabled(v55, type);
      if (!backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v55, v75, "%{public}s Unexpected result pair for add, no backtrace", buf, 0xCu);
        }
        goto LABEL_197;
      }
      if (v76)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        __int16 v94 = 2082;
        *(void *)v95 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v55, v75, "%{public}s Unexpected result pair for add, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_162;
    }
    if ((v7 & 4) == 0)
    {
      if (!v11 || !v12)
      {
        uint64_t v69 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        char v54 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v90 = 0;
        if (!__nwlog_fault(v54, &type, &v90)) {
          goto LABEL_163;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          unsigned int v55 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v55, v70, "%{public}s Unexpected result pair for change", buf, 0xCu);
          }
          goto LABEL_197;
        }
        if (!v90)
        {
          unsigned int v55 = __nwlog_obj();
          os_log_type_t v88 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v55, v88, "%{public}s Unexpected result pair for change, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_197;
        }
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        unsigned int v55 = __nwlog_obj();
        os_log_type_t v81 = type;
        BOOL v82 = os_log_type_enabled(v55, type);
        if (!backtrace_string)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v55, v81, "%{public}s Unexpected result pair for change, no backtrace", buf, 0xCu);
          }
          goto LABEL_197;
        }
        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          __int16 v94 = 2082;
          *(void *)v95 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v55, v81, "%{public}s Unexpected result pair for change, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_162;
      }
      uint64_t v19 = *(void *)(v14 + 136);
      if (v19)
      {
LABEL_30:
        uint64_t v20 = *(void *)(v19 + 24) - *(void *)(v19 + 16);
        uint64_t v21 = v20 >> 3;
        if (v20)
        {
          BOOL v22 = nw_array_create();
          std::vector<nw_object_wrapper_t>::reserve(v22 + 16, ((uint64_t)(*(void *)(v19 + 24) - *(void *)(v19 + 16)) >> 3) - 1);
          id v24 = *(void ***)(v19 + 16);
          id v23 = *(void ***)(v19 + 24);
          while (v24 != v23)
          {
            if (*v24 != v11) {
              nw_array_append(v22, *v24);
            }
            ++v24;
          }
          goto LABEL_40;
        }
LABEL_39:
        BOOL v22 = nw_array_create();
LABEL_40:
        uint64_t v25 = *(void *)(a1 + 40);
        __int16 v26 = *(void **)(v25 + 136);
        *(void *)(v25 + 136) = v22;

        if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          os_log_type_t v27 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            int v28 = *(_DWORD *)(*(void *)(a1 + 40) + 192);
            *(_DWORD *)buf = 136446722;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            __int16 v94 = 1024;
            *(_DWORD *)v95 = v28;
            *(_WORD *)&v95[4] = 2112;
            *(void *)&v95[6] = v11;
            _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] old: removed %@ from old_results", buf, 0x1Cu);
          }
        }
        uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 136);
        if (v17) {
          uint64_t v29 = (uint64_t)(*(void *)(v17 + 24) - *(void *)(v17 + 16)) >> 3;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v21 - 1 == v29)
        {
          if (!v13)
          {
LABEL_69:
            if (nw_browse_result_get_changes(v11, v13) == 1)
            {
              if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40)))
              {
                nw_browse_result_change_t changes = nw_browse_result_get_changes(v11, v13);
                BOOL v42 = nw_browse_result_get_change_description(changes);
                if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40)))
                {
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                  }
                  id v43 = (id)gbrowserLogObj;
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                  {
                    int v44 = *(_DWORD *)(*(void *)(a1 + 40) + 192);
                    *(_DWORD *)buf = 136447234;
                    uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    __int16 v94 = 1024;
                    *(_DWORD *)v95 = v44;
                    *(_WORD *)&v95[4] = 2112;
                    *(void *)&v95[6] = v11;
                    __int16 v96 = 2112;
                    int v97 = v13;
                    __int16 v98 = 2082;
                    BOOL v99 = v42;
                    _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] Suppressing identical results: (%@ -> %@), %{public}s", buf, 0x30u);
                  }
                }
                if (v42) {
                  free((void *)v42);
                }
              }
            }
            else
            {
              nw_parallel_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v11, v13);
            }
LABEL_80:
            uint64_t v10 = 1;
LABEL_81:

            goto LABEL_82;
          }
LABEL_51:
          nw_array_append(v17, v13);
          uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 144);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 24) - *(void *)(v30 + 16);
            uint64_t v32 = v31 >> 3;
            if (v31)
            {
              BOOL v33 = nw_array_create();
              std::vector<nw_object_wrapper_t>::reserve(v33 + 16, ((uint64_t)(*(void *)(v30 + 24) - *(void *)(v30 + 16)) >> 3) - 1);
              os_log_type_t v35 = *(void ***)(v30 + 16);
              os_log_type_t v34 = *(void ***)(v30 + 24);
              while (v35 != v34)
              {
                if (*v35 != v13) {
                  nw_array_append(v33, *v35);
                }
                ++v35;
              }
LABEL_60:
              uint64_t v36 = *(void *)(a1 + 40);
              BOOL v37 = *(void **)(v36 + 144);
              *(void *)(v36 + 144) = v33;

              uint64_t v38 = *(void *)(*(void *)(a1 + 40) + 144);
              if (v38) {
                uint64_t v38 = (uint64_t)(*(void *)(v38 + 24) - *(void *)(v38 + 16)) >> 3;
              }
              if (v32 - 1 == v38)
              {
                if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40)))
                {
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                  }
                  os_log_type_t v39 = (id)gbrowserLogObj;
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                  {
                    int v40 = *(_DWORD *)(*(void *)(a1 + 40) + 192);
                    *(_DWORD *)buf = 136446722;
                    uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    __int16 v94 = 1024;
                    *(_DWORD *)v95 = v40;
                    *(_WORD *)&v95[4] = 2112;
                    *(void *)&v95[6] = v13;
                    _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] new: moved %@ from new_results to old_results", buf, 0x1Cu);
                  }
                }
                goto LABEL_69;
              }
              uint64_t v57 = __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
              char v54 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v90 = 0;
              if (__nwlog_fault(v54, &type, &v90))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  unsigned int v55 = __nwlog_obj();
                  os_log_type_t v58 = type;
                  if (os_log_type_enabled(v55, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    _os_log_impl(&dword_1830D4000, v55, v58, "%{public}s Should have removed from new results", buf, 0xCu);
                  }
LABEL_197:

                  goto LABEL_163;
                }
                if (!v90)
                {
                  unsigned int v55 = __nwlog_obj();
                  os_log_type_t v80 = type;
                  if (os_log_type_enabled(v55, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    _os_log_impl(&dword_1830D4000, v55, v80, "%{public}s Should have removed from new results, backtrace limit exceeded", buf, 0xCu);
                  }
                  goto LABEL_197;
                }
                backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
                unsigned int v55 = __nwlog_obj();
                os_log_type_t v67 = type;
                BOOL v68 = os_log_type_enabled(v55, type);
                if (!backtrace_string)
                {
                  if (v68)
                  {
                    *(_DWORD *)buf = 136446210;
                    uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    _os_log_impl(&dword_1830D4000, v55, v67, "%{public}s Should have removed from new results, no backtrace", buf, 0xCu);
                  }
                  goto LABEL_197;
                }
                if (v68)
                {
                  *(_DWORD *)buf = 136446466;
                  uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                  __int16 v94 = 2082;
                  *(void *)v95 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v55, v67, "%{public}s Should have removed from new results, dumping backtrace:%{public}s", buf, 0x16u);
                }
                goto LABEL_162;
              }
LABEL_163:
              if (v54) {
                free(v54);
              }
              uint64_t v10 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            uint64_t v32 = 0;
          }
          BOOL v33 = nw_array_create();
          goto LABEL_60;
        }
        id v65 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        char v54 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v90 = 0;
        if (!__nwlog_fault(v54, &type, &v90)) {
          goto LABEL_163;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          unsigned int v55 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v55, v66, "%{public}s Should have removed old result", buf, 0xCu);
          }
          goto LABEL_197;
        }
        if (!v90)
        {
          unsigned int v55 = __nwlog_obj();
          os_log_type_t v87 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v55, v87, "%{public}s Should have removed old result, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_197;
        }
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        unsigned int v55 = __nwlog_obj();
        os_log_type_t v77 = type;
        BOOL v78 = os_log_type_enabled(v55, type);
        if (!backtrace_string)
        {
          if (v78)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v55, v77, "%{public}s Should have removed old result, no backtrace", buf, 0xCu);
          }
          goto LABEL_197;
        }
        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          __int16 v94 = 2082;
          *(void *)v95 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v55, v77, "%{public}s Should have removed old result, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_162:

        free(backtrace_string);
        goto LABEL_163;
      }
LABEL_38:
      uint64_t v21 = 0;
      goto LABEL_39;
    }

    if (v11)
    {
      id v13 = 0;
      uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 136);
      if (v19) {
        goto LABEL_30;
      }
      goto LABEL_38;
    }
    __int16 v71 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
    id v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (__nwlog_fault(v72, &type, &v90))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v73 = __nwlog_obj();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v73, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s Unexpected result pair for remove", buf, 0xCu);
        }
      }
      else if (v90)
      {
        __int16 v83 = (char *)__nw_create_backtrace_string();
        id v73 = __nwlog_obj();
        os_log_type_t v84 = type;
        BOOL v85 = os_log_type_enabled(v73, type);
        if (v83)
        {
          if (v85)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            __int16 v94 = 2082;
            *(void *)v95 = v83;
            _os_log_impl(&dword_1830D4000, v73, v84, "%{public}s Unexpected result pair for remove, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v83);
          goto LABEL_201;
        }
        if (v85)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v73, v84, "%{public}s Unexpected result pair for remove, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v73 = __nwlog_obj();
        os_log_type_t v89 = type;
        if (os_log_type_enabled(v73, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v73, v89, "%{public}s Unexpected result pair for remove, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_201:
    if (v72) {
      free(v72);
    }
    id v13 = 0;
    uint64_t v10 = 0;
    goto LABEL_81;
  }
  id v46 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
  int v47 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v90 = 0;
  if (__nwlog_fault(v47, &type, &v90))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v48 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s new_results should not have invalid changes", buf, 0xCu);
      }
    }
    else if (v90)
    {
      uint64_t v50 = (char *)__nw_create_backtrace_string();
      id v48 = __nwlog_obj();
      os_log_type_t v51 = type;
      BOOL v52 = os_log_type_enabled(v48, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          __int16 v94 = 2082;
          *(void *)v95 = v50;
          _os_log_impl(&dword_1830D4000, v48, v51, "%{public}s new_results should not have invalid changes, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v50);
        goto LABEL_129;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        _os_log_impl(&dword_1830D4000, v48, v51, "%{public}s new_results should not have invalid changes, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v48 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        _os_log_impl(&dword_1830D4000, v48, v59, "%{public}s new_results should not have invalid changes, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_129:
  if (v47) {
    free(v47);
  }
  uint64_t v10 = 0;
LABEL_82:

  return v10;
}

void sub_183AF6520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_browser_create_ordered_arrayP21NWConcrete_nw_browserPU31objcproto20OS_nw_parallel_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  int v9 = v7;
  if ((nw_browse_result_get_changes(v8, v9) & 4) != 0) {
    nw_parallel_array_append(*(void *)(a1 + 32), v8, v9);
  }

  return 1;
}

void sub_183AF65CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_browser_create_ordered_arrayP21NWConcrete_nw_browserPU31objcproto20OS_nw_parallel_array8NSObject_block_invoke_2(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  int v9 = v7;
  if ((nw_browse_result_get_changes(v8, v9) & 4) == 0) {
    nw_parallel_array_append(*(void *)(a1 + 32), v8, v9);
  }

  return 1;
}

void sub_183AF6668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_124(uint64_t a1)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_2;
  v6[3] = &unk_1E5244728;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v7 = v3;
  uint64_t v9 = v4;
  id v8 = v5;
  nw_parallel_array_apply(v2, (uint64_t)v6);
}

uint64_t ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_2(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = (NWConcrete_nw_browse_result *)v8;
  BOOL v11 = v10;
  id v12 = v9;
  if (nw_browse_descriptor_get_type(*(void **)(*(void *)(a1 + 32) + 32)) == 2)
  {
    if (v9 && (mutable_copy = nw_browse_result_create_mutable_copy(v9), v9, mutable_copy))
    {
      *((unsigned char *)mutable_copy + 52) |= 1u;
      id v12 = mutable_copy;
      if (!v10)
      {
LABEL_5:
        BOOL v11 = 0;
        uint64_t v14 = *(void *)(a1 + 48);
        goto LABEL_10;
      }
    }
    else
    {
      id v12 = 0;
      if (!v10) {
        goto LABEL_5;
      }
    }
    BOOL v11 = nw_browse_result_create_mutable_copy(v10);
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (v11) {
    *((unsigned char *)v11 + 52) |= 1u;
  }
LABEL_10:
  BOOL v15 = v14 - 1 == a2;
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40)))
  {
    nw_browse_result_change_t changes = nw_browse_result_get_changes(v12, (nw_browse_result_t)v11);
    BOOL v17 = nw_browse_result_get_change_description(changes);
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      id v18 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v19 = *(_DWORD *)(*(void *)(a1 + 32) + 192);
        *(_DWORD *)buf = 136447234;
        uint64_t v30 = "nw_browser_notify_browse_result_changes_locked_block_invoke_2";
        __int16 v31 = 1024;
        int v32 = v19;
        __int16 v33 = 2112;
        os_log_type_t v34 = v12;
        __int16 v35 = 2112;
        uint64_t v36 = v11;
        __int16 v37 = 2082;
        BOOL v38 = v17;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s [B%u] browse_result_changed: (%@ -> %@), %{public}s", buf, 0x30u);
      }
    }
    if (v17) {
      free((void *)v17);
    }
  }
  uint64_t v20 = *(void **)(*(void *)(a1 + 32) + 40);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_125;
  v24[3] = &unk_1E52484D8;
  id v27 = *(id *)(a1 + 40);
  uint64_t v21 = v12;
  uint64_t v25 = v21;
  BOOL v22 = v11;
  __int16 v26 = v22;
  BOOL v28 = v15;
  nw_utilities_execute_block_as_persona_from_parameters(v20, v24);

  return 1;
}

void sub_183AF69F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_125(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

id nw_browser_copy_old_result_locked(NWConcrete_nw_browser *a1, const char *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      BOOL v28 = __Block_byref_object_copy__57606;
      uint64_t v29 = __Block_byref_object_dispose__57607;
      id v30 = 0;
      id v5 = (atomic_uchar *)*((void *)v3 + 17);
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = ___ZL33nw_browser_copy_old_result_lockedP21NWConcrete_nw_browserPKc_block_invoke;
      v21[3] = &unk_1E5249D20;
      id v23 = buf;
      id v24 = a2;
      BOOL v22 = v3;
      nw_array_apply(v5, (uint64_t)v21);
      id v6 = *(id *)(*(void *)&buf[8] + 40);

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null key_name", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null key_name, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null key_name, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null key_name, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null browser", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null browser, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  id v6 = 0;
LABEL_4:

  return v6;
}

uint64_t ___ZL33nw_browser_copy_new_result_lockedP21NWConcrete_nw_browserPKc_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id endpoint = nw_browse_result_get_endpoint(v5);
  id v7 = endpoint;
  if (endpoint)
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 24);
    if (v8 == 2)
    {
      bzero(v12, 0x3F1uLL);
      if (nw_browser_copy_key_for_application_service_endpoint(v7, v12)
        && !strcasecmp(v12, *(const char **)(a1 + 48)))
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
        goto LABEL_12;
      }
    }
    else if (v8 == 3)
    {
      bonjour_fullname = (const char *)nw_endpoint_get_bonjour_fullname(endpoint);
      if (bonjour_fullname)
      {
        if (!strcasecmp(bonjour_fullname, *(const char **)(a1 + 48)))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
LABEL_12:
          uint64_t v10 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  uint64_t v10 = 1;
LABEL_10:

  return v10;
}

void sub_183AF70E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_browser_copy_old_result_lockedP21NWConcrete_nw_browserPKc_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id endpoint = nw_browse_result_get_endpoint(v5);
  id v7 = endpoint;
  if (endpoint)
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 24);
    if (v8 == 2)
    {
      bzero(v12, 0x3F1uLL);
      if (nw_browser_copy_key_for_application_service_endpoint(v7, v12)
        && !strcasecmp(v12, *(const char **)(a1 + 48)))
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
        goto LABEL_12;
      }
    }
    else if (v8 == 3)
    {
      bonjour_fullname = (const char *)nw_endpoint_get_bonjour_fullname(endpoint);
      if (bonjour_fullname)
      {
        if (!strcasecmp(bonjour_fullname, *(const char **)(a1 + 48)))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
LABEL_12:
          uint64_t v10 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  uint64_t v10 = 1;
LABEL_10:

  return v10;
}

void sub_183AF7220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_114(void **a1, void *a2)
{
  return nw_browser_check_and_remove_endpoints_locked(a1[4], a1[5], a1[6], a2);
}

BOOL ___ZL44nw_browser_check_and_remove_endpoints_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS1_PU26objcproto15OS_nw_interfaceS1__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nw_endpoint_copy_interface(v4);
  BOOL v7 = 1;
  if (nw_endpoint_is_equal(*(void **)(a1 + 32), v4, 0))
  {
    if (!v5 || (id v6 = *(void **)(a1 + 40)) == 0 || nw_interface_shallow_compare(v5, v6)) {
      BOOL v7 = 0;
    }
  }

  return v7;
}

void sub_183AF72D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL50nw_browser_cancel_query_record_for_endpoint_lockedP21NWConcrete_nw_browserPKcPU26objcproto15OS_nw_interface8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  DNSServiceRefDeallocate(*(DNSServiceRef *)(a1 + 40));
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40)))
  {
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
    }
    uint64_t v2 = (id)gbrowserLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 192);
      int v5 = 136446722;
      id v6 = "nw_browser_cancel_query_record_for_endpoint_locked_block_invoke";
      __int16 v7 = 1024;
      int v8 = v4;
      __int16 v9 = 2048;
      uint64_t v10 = v3;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] deallocate dns_ref %p", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = a3;
  id endpoint = nw_browse_result_get_endpoint(v4);
  int is_equal = nw_endpoint_is_equal(endpoint, *(void **)(a1 + 32), 0);
  if (is_equal)
  {
    __int16 v7 = *(void **)(a1 + 40);
    if (v7)
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_4;
      v11[3] = &unk_1E5244638;
      id v8 = v7;
      uint64_t v9 = *(void *)(a1 + 48);
      id v12 = v8;
      uint64_t v13 = v9;
      nw_browse_result_enumerate_interfaces(v4, v11);
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    }
  }

  return is_equal ^ 1u;
}

void sub_183AF74E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_4(uint64_t a1, void *a2)
{
  BOOL v3 = nw_interface_shallow_compare(*(void **)(a1 + 32), a2);
  if (v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  return !v3;
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_3(void *a1)
{
  return (*(uint64_t (**)(void, void, void, BOOL))(a1[6] + 16))(a1[6], a1[4], a1[5], a1[7] >= (unint64_t)(a1[8] - 1));
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_117(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  long long v25 = 0uLL;
  nw_endpoint_get_service_identifier(v5, &v25);
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:&v25];
  int v7 = [*(id *)(a1 + 32) isEqual:v6];
  if (v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = a2;
    id v8 = nw_browse_result_create(v5);
    nw_array_append(*(void *)(a1 + 40), v8);
    if ((nw_endpoint_is_equal(*(void **)(a1 + 48), v5, 30) & 1) == 0)
    {
      nw_parallel_array_append(*(void *)(a1 + 56), *(void **)(a1 + 64), v8);
      if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 72) + 40)))
      {
        nw_browse_result_change_t changes = nw_browse_result_get_changes(*(nw_browse_result_t *)(a1 + 64), v8);
        BOOL v10 = nw_browse_result_get_change_description(changes);
        if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 72) + 40)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          uint64_t v11 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = *(void *)(a1 + 64);
            int v13 = *(_DWORD *)(*(void *)(a1 + 72) + 192);
            int v15 = 136447234;
            BOOL v16 = "nw_browser_app_svc_update_browse_result_locked_block_invoke_2";
            __int16 v17 = 1024;
            int v18 = v13;
            __int16 v19 = 2112;
            uint64_t v20 = v12;
            __int16 v21 = 2112;
            BOOL v22 = v8;
            __int16 v23 = 2082;
            BOOL v24 = v10;
            _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [B%u] browse_result_changed: (%@ -> %@), %{public}s", (uint8_t *)&v15, 0x30u);
          }
        }
        if (v10) {
          free((void *)v10);
        }
      }
    }
  }
  return v7 ^ 1u;
}

void sub_183AF7768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long uu1 = 0uLL;
  long long uu2 = 0uLL;
  nw_endpoint_get_service_identifier(v4, &uu1);
  nw_endpoint_get_service_identifier(*(void **)(a1 + 32), &uu2);
  BOOL v5 = uuid_compare((const unsigned __int8 *)&uu1, (const unsigned __int8 *)&uu2) != 0;

  return v5;
}

void sub_183AF7844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_dns_service_browse_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, const char *a6, const char *a7, void *a8)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  int v13 = a8;
  uint64_t v14 = v13;
  if (v13)
  {
    lock = v13 + 2;
    os_unfair_lock_lock(v13 + 2);
    uint32_t os_unfair_lock_opaque = v14[18]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque != 1 && os_unfair_lock_opaque != 4)
    {
      if (!nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        __int16 v21 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint32_t v22 = v14[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          uint64_t v93 = "nw_browser_dns_service_browse_callback";
          __int16 v94 = 1024;
          *(_DWORD *)v95 = v22;
          _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s [B%u] not in ready or waiting state", buf, 0x12u);
        }
      }
      goto LABEL_48;
    }
    if (!BYTE2(v14[49]._os_unfair_lock_opaque))
    {
      if (!nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        __int16 v23 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint32_t v24 = v14[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136448002;
          uint64_t v93 = "nw_browser_dns_service_browse_callback";
          __int16 v94 = 1024;
          *(_DWORD *)v95 = v24;
          *(_WORD *)&v95[4] = 2082;
          *(void *)&v95[6] = a5;
          *(_WORD *)&unsigned char v95[14] = 2082;
          *(void *)&v95[16] = a6;
          __int16 v96 = 2082;
          int v97 = a7;
          __int16 v98 = 1024;
          int v99 = a2;
          __int16 v100 = 1024;
          unsigned int v101 = a3;
          __int16 v102 = 1024;
          int v103 = a4;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] dns: (%{public}s %{public}s %{public}s), flags: %d, if_index: %d, error: %d", buf, 0x42u);
        }
      }
LABEL_31:
      if (nw_browser_fail_on_dns_error_locked((NWConcrete_nw_browser *)v14, a4, "nw_browser_dns_service_browse_callback"))
      {
        goto LABEL_48;
      }
      uint32_t v27 = v14[18]._os_unfair_lock_opaque;
      if (v27 == 4)
      {
        nw_browser_set_state_locked(v14, 1, 0);
        uint32_t v27 = v14[18]._os_unfair_lock_opaque;
      }
      if (v27 != 1) {
        goto LABEL_48;
      }
      if (!a5 || !*a5)
      {
        if (!nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          id v30 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            uint32_t v31 = v14[48]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446466;
            uint64_t v93 = "nw_browser_dns_service_browse_callback";
            __int16 v94 = 1024;
            *(_DWORD *)v95 = v31;
            _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_INFO, "%{public}s [B%u] Received empty result, ignoring", buf, 0x12u);
          }
        }
        goto LABEL_48;
      }
      if (a3 - 1 > 0xFFFFFFFD)
      {
        if (a3 == -1)
        {
          uint64_t v29 = nw_interface_create_with_name("lo0");
          if (!v29) {
            goto LABEL_121;
          }
        }
        else
        {
          uint64_t v29 = 0;
        }
      }
      else
      {
        if (nw_context_copy_implicit_context::onceToken != -1) {
          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
        }
        id v28 = (id)nw_context_copy_implicit_context::implicit_context;
        uint64_t v29 = nw_path_copy_interface_with_generation(v28, a3, 0);

        if (!v29)
        {
LABEL_121:
          if (nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
          {
LABEL_48:
            os_unfair_lock_unlock(lock);
            goto LABEL_49;
          }
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          id v60 = (id)gbrowserLogObj;
          uint32_t v61 = v14[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446722;
          uint64_t v93 = "nw_browser_dns_service_browse_callback";
          __int16 v94 = 1024;
          *(_DWORD *)v95 = v61;
          *(_WORD *)&v95[4] = 1024;
          *(_DWORD *)&v95[6] = a3;
          uint64_t v62 = (char *)_os_log_send_and_compose_impl();

          v79[0] = 16;
          LOBYTE(v104) = 0;
          if (__nwlog_fault(v62, v79, &v104))
          {
            if (v79[0] == 17)
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              os_log_type_t v63 = (id)gbrowserLogObj;
              os_log_type_t v64 = v79[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v79[0]))
              {
                uint32_t v65 = v14[48]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446722;
                uint64_t v93 = "nw_browser_dns_service_browse_callback";
                __int16 v94 = 1024;
                *(_DWORD *)v95 = v65;
                *(_WORD *)&v95[4] = 1024;
                *(_DWORD *)&v95[6] = a3;
                _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s [B%u] dns: no interface found for if_index %u", buf, 0x18u);
              }
            }
            else if ((_BYTE)v104)
            {
              backtrace_uuid_string_t string = __nw_create_backtrace_string();
              if (backtrace_string)
              {
                os_log_type_t v67 = (char *)backtrace_string;
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                BOOL v68 = (id)gbrowserLogObj;
                os_log_type_t v69 = v79[0];
                if (os_log_type_enabled(v68, (os_log_type_t)v79[0]))
                {
                  uint32_t v70 = v14[48]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136446978;
                  uint64_t v93 = "nw_browser_dns_service_browse_callback";
                  __int16 v94 = 1024;
                  *(_DWORD *)v95 = v70;
                  *(_WORD *)&v95[4] = 1024;
                  *(_DWORD *)&v95[6] = a3;
                  *(_WORD *)&v95[10] = 2082;
                  *(void *)&v95[12] = v67;
                  _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s [B%u] dns: no interface found for if_index %u, dumping backtrace:%{public}s", buf, 0x22u);
                }

                free(v67);
                goto LABEL_148;
              }
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              os_log_type_t v63 = (id)gbrowserLogObj;
              os_log_type_t v73 = v79[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v79[0]))
              {
                uint32_t v74 = v14[48]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446722;
                uint64_t v93 = "nw_browser_dns_service_browse_callback";
                __int16 v94 = 1024;
                *(_DWORD *)v95 = v74;
                *(_WORD *)&v95[4] = 1024;
                *(_DWORD *)&v95[6] = a3;
                _os_log_impl(&dword_1830D4000, v63, v73, "%{public}s [B%u] dns: no interface found for if_index %u, no backtrace", buf, 0x18u);
              }
            }
            else
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              os_log_type_t v63 = (id)gbrowserLogObj;
              os_log_type_t v71 = v79[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v79[0]))
              {
                uint32_t v72 = v14[48]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446722;
                uint64_t v93 = "nw_browser_dns_service_browse_callback";
                __int16 v94 = 1024;
                *(_DWORD *)v95 = v72;
                *(_WORD *)&v95[4] = 1024;
                *(_DWORD *)&v95[6] = a3;
                _os_log_impl(&dword_1830D4000, v63, v71, "%{public}s [B%u] dns: no interface found for if_index %u, backtrace limit exceeded", buf, 0x18u);
              }
            }
          }
LABEL_148:
          if (v62) {
            free(v62);
          }
          goto LABEL_48;
        }
      }
      bzero(buf, 0x3F1uLL);
      DNSServiceErrorType v32 = DNSServiceConstructFullName((char *const)buf, a5, a6, a7);
      if (v32)
      {
        dns_error = nw_error_create_dns_error(v32);
        if (nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
        {
LABEL_101:
          os_unfair_lock_unlock(lock);

          goto LABEL_102;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        id v34 = (id)gbrowserLogObj;
        uint32_t v35 = v14[48]._os_unfair_lock_opaque;
        *(_DWORD *)os_log_type_t v79 = 136447491;
        *(void *)&v79[4] = "nw_browser_dns_service_browse_callback";
        __int16 v80 = 1024;
        uint32_t v81 = v35;
        __int16 v82 = 2085;
        __int16 v83 = a5;
        __int16 v84 = 2082;
        BOOL v85 = a6;
        __int16 v86 = 2085;
        os_log_type_t v87 = a7;
        __int16 v88 = 2114;
        os_log_type_t v75 = dns_error;
        os_log_type_t v89 = dns_error;
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(v104) = 16;
        char v78 = 0;
        if (__nwlog_fault(v36, &v104, &v78))
        {
          if (v104 == 17)
          {
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
            }
            __int16 v37 = (id)gbrowserLogObj;
            os_log_type_t v38 = v104;
            if (os_log_type_enabled(v37, (os_log_type_t)v104))
            {
              uint32_t v39 = v14[48]._os_unfair_lock_opaque;
              *(_DWORD *)os_log_type_t v79 = 136447491;
              *(void *)&v79[4] = "nw_browser_dns_service_browse_callback";
              __int16 v80 = 1024;
              uint32_t v81 = v39;
              __int16 v82 = 2085;
              __int16 v83 = a5;
              __int16 v84 = 2082;
              BOOL v85 = a6;
              __int16 v86 = 2085;
              os_log_type_t v87 = a7;
              __int16 v88 = 2114;
              os_log_type_t v89 = dns_error;
              _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s [B%u] DNSServiceConstructFullName(..., %{sensitive}s, %{public}s, %{sensitive}s) failed: %{public}@", v79, 0x3Au);
            }
          }
          else if (v78)
          {
            id v43 = __nw_create_backtrace_string();
            if (v43)
            {
              int v44 = (char *)v43;
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              BOOL v45 = (id)gbrowserLogObj;
              os_log_type_t v46 = v104;
              if (os_log_type_enabled(v45, (os_log_type_t)v104))
              {
                uint32_t v47 = v14[48]._os_unfair_lock_opaque;
                *(_DWORD *)os_log_type_t v79 = 136447747;
                *(void *)&v79[4] = "nw_browser_dns_service_browse_callback";
                __int16 v80 = 1024;
                uint32_t v81 = v47;
                __int16 v82 = 2085;
                __int16 v83 = a5;
                __int16 v84 = 2082;
                BOOL v85 = a6;
                __int16 v86 = 2085;
                os_log_type_t v87 = a7;
                __int16 v88 = 2114;
                os_log_type_t v89 = v75;
                __int16 v90 = 2082;
                v91 = v44;
                _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s [B%u] DNSServiceConstructFullName(..., %{sensitive}s, %{public}s, %{sensitive}s) failed: %{public}@, dumping backtrace:%{public}s", v79, 0x44u);
              }

              free(v44);
              goto LABEL_98;
            }
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
            }
            __int16 v37 = (id)gbrowserLogObj;
            os_log_type_t v50 = v104;
            if (os_log_type_enabled(v37, (os_log_type_t)v104))
            {
              uint32_t v51 = v14[48]._os_unfair_lock_opaque;
              *(_DWORD *)os_log_type_t v79 = 136447491;
              *(void *)&v79[4] = "nw_browser_dns_service_browse_callback";
              __int16 v80 = 1024;
              uint32_t v81 = v51;
              __int16 v82 = 2085;
              __int16 v83 = a5;
              __int16 v84 = 2082;
              BOOL v85 = a6;
              __int16 v86 = 2085;
              os_log_type_t v87 = a7;
              __int16 v88 = 2114;
              os_log_type_t v89 = dns_error;
              _os_log_impl(&dword_1830D4000, v37, v50, "%{public}s [B%u] DNSServiceConstructFullName(..., %{sensitive}s, %{public}s, %{sensitive}s) failed: %{public}@, no backtrace", v79, 0x3Au);
            }
          }
          else
          {
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
            }
            __int16 v37 = (id)gbrowserLogObj;
            os_log_type_t v48 = v104;
            if (os_log_type_enabled(v37, (os_log_type_t)v104))
            {
              uint32_t v49 = v14[48]._os_unfair_lock_opaque;
              *(_DWORD *)os_log_type_t v79 = 136447491;
              *(void *)&v79[4] = "nw_browser_dns_service_browse_callback";
              __int16 v80 = 1024;
              uint32_t v81 = v49;
              __int16 v82 = 2085;
              __int16 v83 = a5;
              __int16 v84 = 2082;
              BOOL v85 = a6;
              __int16 v86 = 2085;
              os_log_type_t v87 = a7;
              __int16 v88 = 2114;
              os_log_type_t v89 = dns_error;
              _os_log_impl(&dword_1830D4000, v37, v48, "%{public}s [B%u] DNSServiceConstructFullName(..., %{sensitive}s, %{public}s, %{sensitive}s) failed: %{public}@, backtrace limit exceeded", v79, 0x3Au);
            }
          }
        }
LABEL_98:
        if (v36) {
          free(v36);
        }
        dns_error = v75;
        goto LABEL_101;
      }
      for (size_t i = 0; i < strlen((const char *)buf); ++i)
        buf[i] = __tolower((char)buf[i]);
      if ((a2 & 2) != 0 && a7)
      {
        bonjour_DNSServiceRef service = nw_endpoint_create_bonjour_service(a5, a6, a7);
        *(void *)os_log_type_t v79 = 0;
        ValidationCFDataRef Data = (const void *)DNSServiceGetValidationData();
        if (ValidationData && *(void *)v79) {
          nw_endpoint_set_signature(bonjour_service, ValidationData, *(size_t *)v79);
        }
        if (!nw_browser_add_result_locked(v14, (const char *)buf, bonjour_service, v29, 0))
        {
          os_unfair_lock_unlock(lock);

          goto LABEL_102;
        }
        if (LOBYTE(v14[49]._os_unfair_lock_opaque)) {
          nw_browser_start_query_record_for_endpoint_locked(v14, bonjour_service, (const char *)buf, v29);
        }
      }
      else if ((nw_browser_remove_result_locked(v14, (const char *)buf, v29) & 1) == 0)
      {
LABEL_86:
        os_unfair_lock_unlock(lock);
LABEL_102:

        goto LABEL_49;
      }
      if ((a2 & 1) == 0) {
        nw_browser_notify_browse_result_changes_locked((NWConcrete_nw_browser *)v14);
      }
      goto LABEL_86;
    }
    v79[8] = 0;
    *(void *)os_log_type_t v79 = 0;
    char v105 = 0;
    uint64_t v104 = 0;
    if (a5)
    {
      size_t v17 = strlen(a5);
      int v18 = v79;
      __nwlog_salted_hash(a5, v17, v79);
      if (a7)
      {
LABEL_10:
        size_t v19 = strlen(a7);
        uint64_t v20 = (const char *)&v104;
        __nwlog_salted_hash(a7, v19, (char *)&v104);
        goto LABEL_25;
      }
    }
    else
    {
      int v18 = "<NULL>";
      if (a7) {
        goto LABEL_10;
      }
    }
    uint64_t v20 = "<NULL>";
LABEL_25:
    if (!nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      long long v25 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint32_t v26 = v14[48]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136448002;
        uint64_t v93 = "nw_browser_dns_service_browse_callback";
        __int16 v94 = 1024;
        *(_DWORD *)v95 = v26;
        *(_WORD *)&v95[4] = 2082;
        *(void *)&v95[6] = v18;
        *(_WORD *)&unsigned char v95[14] = 2082;
        *(void *)&v95[16] = a6;
        __int16 v96 = 2082;
        int v97 = v20;
        __int16 v98 = 1024;
        int v99 = a2;
        __int16 v100 = 1024;
        unsigned int v101 = a3;
        __int16 v102 = 1024;
        int v103 = a4;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] dns: (#%{public}s %{public}s #%{public}s), flags: %d, if_index: %d, error: %d", buf, 0x42u);
      }
    }
    goto LABEL_31;
  }
  BOOL v52 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v93 = "nw_browser_dns_service_browse_callback";
  id v53 = (char *)_os_log_send_and_compose_impl();

  v79[0] = 16;
  LOBYTE(v104) = 0;
  if (__nwlog_fault(v53, v79, &v104))
  {
    if (v79[0] == 17)
    {
      char v54 = __nwlog_obj();
      os_log_type_t v55 = v79[0];
      if (os_log_type_enabled(v54, (os_log_type_t)v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_dns_service_browse_callback";
        _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if ((_BYTE)v104)
    {
      os_log_type_t v56 = (char *)__nw_create_backtrace_string();
      char v54 = __nwlog_obj();
      os_log_type_t v57 = v79[0];
      BOOL v58 = os_log_type_enabled(v54, (os_log_type_t)v79[0]);
      if (v56)
      {
        if (v58)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v93 = "nw_browser_dns_service_browse_callback";
          __int16 v94 = 2082;
          *(void *)v95 = v56;
          _os_log_impl(&dword_1830D4000, v54, v57, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v56);
        goto LABEL_119;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_dns_service_browse_callback";
        _os_log_impl(&dword_1830D4000, v54, v57, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v54 = __nwlog_obj();
      os_log_type_t v59 = v79[0];
      if (os_log_type_enabled(v54, (os_log_type_t)v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_dns_service_browse_callback";
        _os_log_impl(&dword_1830D4000, v54, v59, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_119:
  if (v53) {
    free(v53);
  }
LABEL_49:
}

void sub_183AF8814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_start_query_record_for_endpoint_locked(void *a1, void *a2, const char *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id context = a1;
  id v8 = a2;
  uint64_t v9 = a4;
  if (v8)
  {
    if (a3)
    {
      int v10 = *((_DWORD *)context + 18);
      BOOL logging_disabled = nw_parameters_get_logging_disabled(*((void *)context + 5));
      if (v10 == 1)
      {
        if (!logging_disabled)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          uint64_t v12 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v13;
            *(_WORD *)&v50[4] = 2080;
            *(void *)&v50[6] = a3;
            __int16 v51 = 2112;
            BOOL v52 = v9;
            _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s [B%u] start query record for %s on %@", buf, 0x26u);
          }
        }
        *(void *)os_log_type_t type = *((void *)context + 15);
        DNSServiceFlags v14 = nw_browser_derive_endpoint_flags((NWConcrete_nw_browser *)context);
        out_signature_size_t length = 0;
        int v15 = 0;
        if (nw_endpoint_get_signature(v8, &out_signature_length) && out_signature_length)
        {
          int v15 = DNSServiceAttributeCreate();
          DNSServiceAttrSetValidationData();
        }
        if (v9) {
          uint32_t v16 = v9[2];
        }
        else {
          uint32_t v16 = 0;
        }
        DNSServiceErrorType RecordWithAttribute = DNSServiceQueryRecordWithAttribute((DNSServiceRef *)type, v14, v16, a3, 0x10u, 1u, v15, (DNSServiceQueryRecordReply)nw_browser_dns_service_query_record_callback, context);
        if (v15) {
          DNSServiceAttributeDeallocate(v15);
        }
        if (nw_browser_fail_on_dns_error_locked((NWConcrete_nw_browser *)context, RecordWithAttribute, "DNSServiceQueryRecord"))
        {
          goto LABEL_55;
        }
        uint64_t browser_key_for = nw_create_browser_key_for (a3, v9);
        xpc_dictionary_set_pointer();
        if (nw_parameters_get_logging_disabled(*((void *)context + 5))) {
          goto LABEL_53;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        uint64_t v20 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          int v29 = *((_DWORD *)context + 48);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          __int16 v49 = 1024;
          *(_DWORD *)os_log_type_t v50 = v29;
          *(_WORD *)&v50[4] = 2080;
          *(void *)&v50[6] = browser_key_for;
          __int16 v51 = 2048;
          BOOL v52 = *(_DWORD **)type;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] dns_ref_map: set %s -> %p", buf, 0x26u);
        }
      }
      else
      {
        if (logging_disabled) {
          goto LABEL_55;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        id v17 = (id)gbrowserLogObj;
        int v18 = *((_DWORD *)context + 48);
        *(_DWORD *)buf = 136446466;
        os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
        __int16 v49 = 1024;
        *(_DWORD *)os_log_type_t v50 = v18;
        uint64_t browser_key_for = _os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(out_signature_length) = 0;
        if (!__nwlog_fault((const char *)browser_key_for, type, &out_signature_length)) {
          goto LABEL_53;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          uint64_t v20 = (id)gbrowserLogObj;
          os_log_type_t v21 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            int v22 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v22;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s [B%u] not in ready state", buf, 0x12u);
          }
        }
        else if ((_BYTE)out_signature_length)
        {
          backtrace_uuid_string_t string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            uint32_t v24 = (char *)backtrace_string;
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
            }
            long long v25 = (id)gbrowserLogObj;
            os_log_type_t v26 = type[0];
            if (os_log_type_enabled(v25, type[0]))
            {
              int v27 = *((_DWORD *)context + 48);
              *(_DWORD *)buf = 136446722;
              os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
              __int16 v49 = 1024;
              *(_DWORD *)os_log_type_t v50 = v27;
              *(_WORD *)&v50[4] = 2082;
              *(void *)&v50[6] = v24;
              _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s [B%u] not in ready state, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v24);
            if (browser_key_for) {
              goto LABEL_54;
            }
            goto LABEL_55;
          }
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          uint64_t v20 = (id)gbrowserLogObj;
          os_log_type_t v32 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            int v33 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v33;
            _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s [B%u] not in ready state, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          uint64_t v20 = (id)gbrowserLogObj;
          os_log_type_t v30 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            int v31 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v31;
            _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s [B%u] not in ready state, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
      goto LABEL_52;
    }
    uint64_t v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
    uint64_t browser_key_for = _os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(out_signature_length) = 0;
    if (__nwlog_fault((const char *)browser_key_for, type, &out_signature_length))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v37 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v20, v37, "%{public}s called with null fullname", buf, 0xCu);
        }
LABEL_52:

        goto LABEL_53;
      }
      if (!(_BYTE)out_signature_length)
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v44 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v20, v44, "%{public}s called with null fullname, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      os_log_type_t v38 = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v41 = type[0];
      BOOL v42 = os_log_type_enabled(v20, type[0]);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v20, v41, "%{public}s called with null fullname, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
        __int16 v49 = 2082;
        *(void *)os_log_type_t v50 = v38;
        _os_log_impl(&dword_1830D4000, v20, v41, "%{public}s called with null fullname, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_75:

      free(v38);
      if (!browser_key_for) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else
  {
    id v34 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
    uint64_t browser_key_for = _os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(out_signature_length) = 0;
    if (__nwlog_fault((const char *)browser_key_for, type, &out_signature_length))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v20, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (!(_BYTE)out_signature_length)
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v43 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v20, v43, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      os_log_type_t v38 = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v40 = os_log_type_enabled(v20, type[0]);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v20, v39, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
        __int16 v49 = 2082;
        *(void *)os_log_type_t v50 = v38;
        _os_log_impl(&dword_1830D4000, v20, v39, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_75;
    }
  }
LABEL_53:
  if (browser_key_for) {
LABEL_54:
  }
    free((void *)browser_key_for);
LABEL_55:
}

void sub_183AF9288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke(uint64_t a1, int a2, nw_txt_record_t right)
{
  return !nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 32), right);
}

uint64_t ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke_134(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    || !nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 32), v4))
  {
    nw_array_append(*(void *)(a1 + 40), v4);
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 48) + 40)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
      }
      BOOL v5 = (id)gbrowserLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(_DWORD *)(*(void *)(a1 + 48) + 192);
        int v7 = *(unsigned __int16 *)(a1 + 80);
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v9 = *(void *)(a1 + 72);
        int v11 = 136447234;
        uint64_t v12 = "nw_browser_copy_txt_array_locked_block_invoke";
        __int16 v13 = 1024;
        int v14 = v6;
        __int16 v15 = 1040;
        int v16 = v7;
        __int16 v17 = 2080;
        uint64_t v18 = v8;
        __int16 v19 = 2080;
        uint64_t v20 = v9;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] txt: remove %.*s from %s", (uint8_t *)&v11, 0x2Cu);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }

  return 1;
}

void sub_183AF9458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_cancel_dns_browser_locked(NWConcrete_nw_browser *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)*((void *)v1 + 19);
  *((void *)v1 + 19) = 0;

  BOOL v3 = (void *)*((void *)v1 + 21);
  *((void *)v1 + 21) = 0;

  id v4 = (void *)*((void *)v1 + 20);
  *((void *)v1 + 20) = 0;

  uint64_t v5 = *((void *)v1 + 15);
  if (v5)
  {
    *((void *)v1 + 15) = 0;
    *((void *)v1 + 16) = 0;
    id v6 = nw_parameters_copy_context(*((void **)v1 + 5));
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZL36nw_browser_cancel_dns_browser_lockedP21NWConcrete_nw_browser_block_invoke;
    void v7[3] = &unk_1E52491B0;
    uint64_t v9 = v5;
    uint64_t v8 = v1;
    nw_queue_context_async(v6, v7);
  }
}

void sub_183AF9554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_browser_cancel_dns_browser_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  DNSServiceRefDeallocate(*(DNSServiceRef *)(a1 + 40));
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40)))
  {
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
    }
    uint64_t v2 = (id)gbrowserLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 192);
      int v4 = 136446466;
      uint64_t v5 = "nw_browser_cancel_dns_browser_locked_block_invoke";
      __int16 v6 = 1024;
      int v7 = v3;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] deallocate primary DNS ref", (uint8_t *)&v4, 0x12u);
    }
  }
}

void ___ZL38nw_browser_start_custom_browser_lockedP21NWConcrete_nw_browser_block_invoke_2(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);

  os_unfair_lock_unlock(v2);
}

void nw_browser_cancel(nw_browser_t browser)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_browser_t v1 = browser;
  nw_browser_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v1[1]);
    if (LODWORD(v2[9].isa) == 3)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&v2[1]);
      if (!nw_parameters_get_logging_disabled((uint64_t)v2[5].isa))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        int v3 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          int isa = (int)v2[24].isa;
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_browser_cancel";
          __int16 v31 = 1024;
          LODWORD(v32) = isa;
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s [B%u] The browser has already been cancelled, ignoring nw_browser_cancel().", buf, 0x12u);
        }
      }
    }
    else
    {
      uint64_t v5 = v2;
      if (!nw_parameters_get_logging_disabled((uint64_t)v2[5].isa))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
        }
        __int16 v6 = (id)gbrowserLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = (int)v5[24].isa;
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_browser_cancel_path_browser_locked";
          __int16 v31 = 1024;
          LODWORD(v32) = v7;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [B%u] path: cancel browse", buf, 0x12u);
        }
      }
      Class v8 = v5[12].isa;
      v5[12].int isa = 0;

      Class v9 = v5[13].isa;
      v5[13].int isa = 0;

      Class v10 = v5[11].isa;
      if (v10)
      {
        nw_path_evaluator_cancel(v10);
        Class v11 = v5[11].isa;
        v5[11].int isa = 0;
      }
      nw_browser_cancel_dns_browser_locked((NWConcrete_nw_browser *)v5);
      Class v12 = v5[17].isa;
      v5[17].int isa = 0;

      Class v13 = v5[18].isa;
      v5[18].int isa = 0;

      Class v14 = v5[14].isa;
      v5[14].int isa = 0;

      nw_browser_set_state_locked(v5, 3, 0);
      Class v15 = v5[7].isa;
      v5[7].int isa = 0;

      Class v16 = v5[8].isa;
      v5[8].int isa = 0;

      Class v17 = v5[2].isa;
      v5[2].int isa = 0;

      Class v18 = v5[6].isa;
      v5[6].int isa = 0;

      os_unfair_lock_unlock((os_unfair_lock_t)&v2[1]);
    }
    goto LABEL_18;
  }
  __int16 v19 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v30 = "nw_browser_cancel";
  uint64_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_browser_cancel";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_browser_cancel";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_browser_cancel";
        _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_browser_cancel";
        _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v20) {
    free(v20);
  }
LABEL_18:
}

void sub_183AF9B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_browser_copy_parameters(nw_browser_t browser)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browser_t v1 = browser;
  nw_browser_t v2 = v1;
  if (v1)
  {
    int v3 = v1[5].isa;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  Class v16 = "nw_browser_copy_parameters";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          Class v16 = "nw_browser_copy_parameters";
          __int16 v17 = 2082;
          Class v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  int v3 = 0;
LABEL_3:

  return v3;
}

nw_browse_descriptor_t nw_browser_copy_browse_descriptor(nw_browser_t browser)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browser_t v1 = browser;
  nw_browser_t v2 = v1;
  if (v1)
  {
    int v3 = v1[4].isa;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  Class v16 = "nw_browser_copy_browse_descriptor";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_browse_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          Class v16 = "nw_browser_copy_browse_descriptor";
          __int16 v17 = 2082;
          Class v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_browse_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_browse_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  int v3 = 0;
LABEL_3:

  return v3;
}

id nw_browser_copy_browse_results(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browser_t v1 = a1;
  nw_browser_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    id v3 = *(id *)&v2[34]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2 + 2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  Class v16 = "nw_browser_copy_browse_results";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_browse_results";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          Class v16 = "nw_browser_copy_browse_results";
          __int16 v17 = 2082;
          Class v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_browse_results";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_browser_copy_browse_results";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_browser_get_state(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v23 = 0;
    *(void *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_browser_get_state_block_invoke;
    aBlock[3] = &unk_1E524BAF8;
    Class v18 = buf;
    __int16 v17 = v3;
    uint64_t v19 = a2;
    uint64_t v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 2);

    uint64_t v6 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_browser_get_state";
  Class v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_get_state";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null browser", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_browser_get_state";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_get_state";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_get_state";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_3:

  return v6;
}

void sub_183AFA6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_browser_get_state_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 72);
  if (*(void *)(a1 + 48)) {
    objc_storeStrong(*(id **)(a1 + 48), *(id *)(*(void *)(a1 + 32) + 80));
  }
}

BOOL nw_txt_record_conforms_to_rfc_1464(unsigned char *a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && (unint64_t)(a2 - 8901) >= 0xFFFFFFFFFFFFDD3CLL)
  {
    size_t v4 = *a1;
    if (a2 == 1 && !*a1 || v4 + 1 == a2)
    {
      return 1;
    }
    else
    {
      uint64_t v5 = &a1[a2];
      unint64_t v6 = (unint64_t)&a1[v4 + 1];
      do
      {
        BOOL result = v6 <= (unint64_t)v5;
        if (v6 > (unint64_t)v5) {
          break;
        }
        unint64_t v7 = (unint64_t)a1;
        a1 = (unsigned char *)v6;
        os_log_type_t v8 = (unsigned __int8 *)(v7 + 1);
        Class v9 = (unsigned __int8 *)memchr((void *)(v7 + 1), 61, v4);
        os_log_type_t v10 = (unsigned __int8 *)(v7 + v4);
        if (v9) {
          os_log_type_t v10 = v9;
        }
        if (v8 < v10)
        {
          os_log_type_t v11 = (char *)&v10[~v7];
          while (*v8 - 127 > 0xFFFFFFA0)
          {
            ++v8;
            if (!--v11) {
              goto LABEL_8;
            }
          }
          return 0;
        }
LABEL_8:
        size_t v4 = *a1;
        unint64_t v6 = (unint64_t)&a1[v4 + 1];
        BOOL result = 1;
      }
      while ((unsigned char *)v6 != v5);
    }
  }
  return result;
}

BOOL nw_txt_record_is_dictionary(nw_txt_record_t txt_record)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v1 = txt_record;
  nw_txt_record_t v2 = v1;
  if (v1)
  {
    BOOL v3 = BYTE4(v1[4].isa) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  Class v16 = "nw_txt_record_is_dictionary";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_txt_record_is_dictionary";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null txt_record", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          Class v16 = "nw_txt_record_is_dictionary";
          __int16 v17 = 2082;
          Class v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_txt_record_is_dictionary";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        Class v16 = "nw_txt_record_is_dictionary";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

nw_txt_record_t nw_txt_record_create_dictionary(void)
{
  return (nw_txt_record_t)nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
}

BOOL nw_txt_record_create_dictionary_with_initial_length(size_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v15, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        Class v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s txt_record cannot have length 0", buf, 0xCu);
        }
        goto LABEL_60;
      }
      if (!v29)
      {
        Class v16 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s txt_record cannot have length 0, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_60;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      Class v16 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s txt_record cannot have length 0, no backtrace", buf, 0xCu);
        }
        goto LABEL_60;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
        __int16 v33 = 2082;
        size_t v34 = (size_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s txt_record cannot have length 0, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_48:

      free(backtrace_string);
    }
LABEL_61:
    if (v15) {
      free(v15);
    }
    return 0;
  }
  if (a1 >= 0x22C5)
  {
    Class v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v15, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        Class v16 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s txt_record can't have length > 8900", buf, 0xCu);
        }
LABEL_60:

        goto LABEL_61;
      }
      if (!v29)
      {
        Class v16 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s txt_record can't have length > 8900, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_60;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      Class v16 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s txt_record can't have length > 8900, no backtrace", buf, 0xCu);
        }
        goto LABEL_60;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
        __int16 v33 = 2082;
        size_t v34 = (size_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s txt_record can't have length > 8900, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_48;
    }
    goto LABEL_61;
  }
  nw_txt_record_t v2 = objc_alloc_init(NWConcrete_nw_txt_record);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v6, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s [nw_txt_record init] failed", buf, 0xCu);
        }
      }
      else if (v29)
      {
        Class v9 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v7 = (id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
            __int16 v33 = 2082;
            size_t v34 = (size_t)v9;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s [nw_txt_record init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v9);
          if (!v6) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s [nw_txt_record init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v7 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s [nw_txt_record init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v6) {
      goto LABEL_25;
    }
LABEL_24:
    free(v6);
    goto LABEL_25;
  }
  BOOL v3 = malloc_type_malloc(a1, 0xF2B69DE5uLL);
  if (v3)
  {
LABEL_5:
    *((void *)v2 + 1) = v3;
    *BOOL v3 = 0;
    *((unsigned char *)v2 + 36) |= 1u;
    *((void *)v2 + 2) = 1;
    *((void *)v2 + 3) = a1;
    size_t v4 = v2;
LABEL_25:

    return (BOOL)v2;
  }
  char v20 = __nwlog_obj();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  os_log_type_t v32 = "strict_malloc";
  __int16 v33 = 2048;
  size_t v34 = a1;
  uint64_t v21 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v21);
  if (!result)
  {
    free(v21);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_183AFBB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_txt_record_find_key_t nw_txt_record_find_key(nw_txt_record_t txt_record, const char *key)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v3 = txt_record;
  size_t v4 = (os_unfair_lock_s *)v3;
  if (!v3)
  {
    unint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "nw_txt_record_find_key";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        Class v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_txt_record_find_key";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null txt_record", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        Class v9 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "nw_txt_record_find_key";
            __int16 v20 = 2082;
            uint64_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_txt_record_find_key";
          _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        Class v9 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_txt_record_find_key";
          _os_log_impl(&dword_1830D4000, v9, v15, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_28:
    if (v8) {
      free(v8);
    }
    goto LABEL_30;
  }
  if ((BYTE4(v3[4].isa) & 1) == 0)
  {
    BOOL v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v19 = "nw_txt_record_find_key";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", buf, 0xCu);
    }
    goto LABEL_13;
  }
  if ((nw_txt_record_key_is_valid((uint64_t)key) & 1) == 0)
  {
    BOOL v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v19 = "nw_txt_record_find_key";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s invalid key", buf, 0xCu);
    }
LABEL_13:

LABEL_30:
    nw_txt_record_find_key_t start_of_key_locked = nw_txt_record_find_key_invalid;
    goto LABEL_5;
  }
  os_unfair_lock_lock(v4 + 8);
  nw_txt_record_find_key_t start_of_key_locked = nw_txt_record_find_start_of_key_locked(v4, key, 0, 0, 0, 0);
  os_unfair_lock_unlock(v4 + 8);
LABEL_5:

  return start_of_key_locked;
}

void sub_183AFBF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_txt_record_key_is_valid(uint64_t result)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    nw_txt_record_t v1 = (unsigned char *)result;
    if (strnlen((const char *)result, 0x100uLL) - 256 >= 0xFFFFFFFFFFFFFF01)
    {
      int v4 = *v1;
      if (!*v1) {
        return 1;
      }
      id v5 = v1 + 1;
      while (v4 != 61 && (v4 - 32) < 0x5F)
      {
        int v6 = *v5++;
        int v4 = v6;
        if (!v6) {
          return 1;
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_txt_record_t v2 = (id)gLogObj;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
      int v7 = 136446210;
      os_log_type_t v8 = "nw_txt_record_key_is_valid";
      nw_txt_record_t v3 = "%{public}s An invalid key was provided. The characters of \t\t\t\t\t  a key MUST be printable US-ASCII values"
           " (0x20-0x7E)\t\t\t\t\t  [RFC20], excluding '=' (0x3D).";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_txt_record_t v2 = (id)gLogObj;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
LABEL_14:

        return 0;
      }
      int v7 = 136446210;
      os_log_type_t v8 = "nw_txt_record_key_is_valid";
      nw_txt_record_t v3 = "%{public}s An invalid key was provided. An invalid key was provided. \t\t\t\t  The key must be a non-empty st"
           "ring of length less than or equal\t\t\t\t  to UINT8_MAX.";
    }
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v7, 0xCu);
    goto LABEL_14;
  }
  return result;
}

uint64_t nw_txt_record_find_start_of_key_locked(void *a1, const char *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a6) {
    *a6 = 0;
  }
  size_t v12 = strnlen(a2, 0xFFuLL);
  uint64_t v17 = 0;
  Class v18 = &v17;
  int v20 = 1;
  uint64_t v19 = 0x2020000000;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_txt_record_find_start_of_key_locked_block_invoke;
  aBlock[3] = &unk_1E5244888;
  void aBlock[4] = &v17;
  void aBlock[5] = v12;
  aBlock[6] = a2;
  aBlock[7] = a3;
  aBlock[8] = a4;
  aBlock[9] = a5;
  aBlock[10] = a6;
  os_log_type_t v13 = _Block_copy(aBlock);
  nw_txt_record_apply_internal_locked(v11, v13, 0);
  uint64_t v14 = *((unsigned int *)v18 + 6);

  _Block_object_dispose(&v17, 8);
  return v14;
}

void sub_183AFC1FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_txt_record_find_start_of_key_locked_block_invoke(uint64_t a1, const char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (*(void *)(a1 + 40) != a3 || strncasecmp(*(const char **)(a1 + 48), a2, a3)) {
    return 1;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a7;
  uint64_t v14 = *(void **)(a1 + 56);
  if (v14) {
    *uint64_t v14 = a6;
  }
  os_log_type_t v15 = *(const char ***)(a1 + 64);
  if (v15) {
    *os_log_type_t v15 = a2;
  }
  char v16 = *(void **)(a1 + 72);
  if (v16) {
    *char v16 = a4;
  }
  uint64_t v17 = *(void **)(a1 + 80);
  uint64_t result = 0;
  if (v17) {
    *uint64_t v17 = a5;
  }
  return result;
}

uint64_t nw_txt_record_apply_internal_locked(void *a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  int v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    uint64_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v34 = "nw_txt_record_apply_internal_locked";
    Class v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null txt_record", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v31)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      size_t v34 = "nw_txt_record_apply_internal_locked";
      __int16 v35 = 2082;
      uint64_t v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  if (!v6)
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v34 = "nw_txt_record_apply_internal_locked";
    Class v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null applier_internal", buf, 0xCu);
      }
LABEL_53:

LABEL_54:
      if (v18) {
        free(v18);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null applier_internal, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null applier_internal, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      size_t v34 = "nw_txt_record_apply_internal_locked";
      __int16 v35 = 2082;
      uint64_t v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null applier_internal, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_41:

    free(backtrace_string);
    goto LABEL_54;
  }
  if ((*((unsigned char *)v5 + 36) & 1) == 0)
  {
    os_log_type_t v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      size_t v34 = "nw_txt_record_apply_internal_locked";
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", buf, 0xCu);
    }

LABEL_56:
    uint64_t v15 = 0;
    goto LABEL_17;
  }
  uint64_t v8 = *((void *)v5 + 2);
  if (v8 < 2)
  {
    uint64_t v15 = 1;
  }
  else
  {
    unint64_t v9 = *((void *)v5 + 1);
    os_log_type_t v10 = (unsigned __int8 *)(v9 + v8);
    do
    {
      unint64_t v11 = *(unsigned __int8 *)v9;
      if (v9 + v11 > (unint64_t)v10) {
        __assert_rtn("nw_txt_record_apply_internal_locked", "txt_record.cpp", 613, "pair_end <= end");
      }
      size_t v12 = memchr((void *)(v9 + 1), 61, *(unsigned __int8 *)v9);
      if (v12) {
        uint64_t v13 = (uint64_t)v12;
      }
      else {
        uint64_t v13 = v9 + v11 + 1;
      }
      if (v13 + ~v9 != v11)
      {
        unint64_t v14 = v13 - v9;
        if (v14 != v11 && v14 >= v11) {
          __assert_rtn("nw_txt_record_get_key_value_result", "txt_record.cpp", 758, "false");
        }
      }
      uint64_t v15 = v6[2](v6, v9 + 1);
      if (!v15) {
        break;
      }
      v9 += *(unsigned __int8 *)v9 + 1;
    }
    while (v9 < (unint64_t)v10);
  }
LABEL_17:

  return v15;
}

void sub_183AFC8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_access_key(nw_txt_record_t txt_record, const char *key, nw_txt_record_access_key_t access_value)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v5 = txt_record;
  nw_txt_record_access_key_t v6 = access_value;
  id v7 = (uint64_t (**)(void, void, void, void, void))v6;
  if (!v5)
  {
    unint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
    size_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, type, &v26)) {
      goto LABEL_45;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null txt_record", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (!v26)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v13 = __nwlog_obj();
    os_log_type_t v19 = type[0];
    BOOL v20 = os_log_type_enabled(v13, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
      __int16 v28 = 2082;
      os_log_type_t v29 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_32;
  }
  if (!v6)
  {
    uint64_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
    size_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, type, &v26)) {
      goto LABEL_45;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null access_value", buf, 0xCu);
      }
LABEL_44:

LABEL_45:
      if (v12) {
        free(v12);
      }
      goto LABEL_47;
    }
    if (!v26)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null access_value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v13 = __nwlog_obj();
    os_log_type_t v21 = type[0];
    BOOL v22 = os_log_type_enabled(v13, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null access_value, no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
      __int16 v28 = 2082;
      os_log_type_t v29 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null access_value, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_32:

    free(backtrace_string);
    goto LABEL_45;
  }
  if ((BYTE4(v5[4].isa) & 1) == 0)
  {
    uint64_t v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", buf, 0xCu);
    }
    goto LABEL_19;
  }
  if ((nw_txt_record_key_is_valid((uint64_t)key) & 1) == 0)
  {
    uint64_t v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s invalid key", buf, 0xCu);
    }
LABEL_19:

LABEL_47:
    char v9 = 0;
    goto LABEL_6;
  }
  *(void *)buf = 0;
  *(void *)os_log_type_t type = 0;
  os_unfair_lock_lock((os_unfair_lock_t)&v5[4]);
  uint64_t start_of_key_locked = nw_txt_record_find_start_of_key_locked(v5, key, 0, 0, buf, type);
  char v9 = ((uint64_t (**)(void, const char *, uint64_t, void, void))v7)[2](v7, key, start_of_key_locked, *(void *)buf, *(void *)type);
  os_unfair_lock_unlock((os_unfair_lock_t)&v5[4]);
LABEL_6:

  return v9;
}

void sub_183AFCEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_set_key(nw_txt_record_t txt_record, const char *key, const uint8_t *value, size_t value_len)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v7 = txt_record;
  nw_txt_record_t v8 = v7;
  if (v7)
  {
    if ((BYTE4(v7[4].isa) & 1) == 0)
    {
      os_log_type_t v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if ((nw_txt_record_key_is_valid((uint64_t)key) & 1) == 0)
    {
      os_log_type_t v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s invalid key", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!value && value_len)
    {
      os_log_type_t v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s value_len must be 0 if value is NULL", buf, 0xCu);
      }
      goto LABEL_58;
    }
    size_t v9 = strlen(key);
    size_t v10 = value_len + 2;
    if (!value) {
      size_t v10 = 1;
    }
    size_t v11 = v10 + v9;
    if (v10 + v9 >= 0x100)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v48 = "nw_txt_record_set_key";
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (!__nwlog_fault(v13, &type, &v45)) {
        goto LABEL_41;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_txt_record_set_key";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_MAX.", buf, 0xCu);
        }
      }
      else if (v45)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_txt_record_set_key";
            __int16 v49 = 2082;
            size_t v50 = (size_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_MAX., dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v13) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_txt_record_set_key";
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_MAX., no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_txt_record_set_key";
          _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_MAX., backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_40;
    }
    size_t v16 = v9;
    os_unfair_lock_lock((os_unfair_lock_t)&v8[4]);
    nw_txt_record_remove_key_locked(v8, key);
    Class isa = v8[2].isa;
    if ((Class)((unint64_t)isa + v11) <= v8[3].isa)
    {
LABEL_30:
      if (isa == (Class)1)
      {
        Class isa = 0;
        v8[2].Class isa = 0;
      }
      char v26 = (char *)v8[1].isa + (unint64_t)isa;
      memcpy(v26 + 1, key, v16);
      os_log_type_t v27 = &v26[v16 + 1];
      if (value)
      {
        *os_log_type_t v27 = 61;
        __int16 v28 = v27 + 1;
        memcpy(v28, value, value_len);
        os_log_type_t v27 = &v28[value_len];
      }
      *char v26 = (_BYTE)v27 - (_BYTE)v26 - 1;
      v8[2].Class isa = (Class)((char *)v8[2].isa + v27 - v26);
      os_unfair_lock_unlock((os_unfair_lock_t)&v8[4]);
      char v29 = 1;
      goto LABEL_44;
    }
    size_t v18 = (size_t)isa + 256;
    if ((unint64_t)isa + 256 >= 0x22C5)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&v8[4]);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s nw_txt_record reallocate failed: max buffer length reached", buf, 0xCu);
      }
LABEL_58:

      goto LABEL_43;
    }
    if (isa == (Class)-256)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      os_log_type_t v48 = "strict_malloc";
      os_log_type_t v39 = (void *)_os_log_send_and_compose_impl();

      BOOL v31 = __nwlog_abort((uint64_t)v39);
      if (v31) {
        goto LABEL_75;
      }
      free(v39);
    }
    os_log_type_t v23 = (objc_class *)malloc_type_malloc(v18, 0xF2B69DE5uLL);
    os_log_type_t v24 = v23;
    if (v23)
    {
      Class v25 = v8[1].isa;
      memcpy(v23, v25, (size_t)v8[2].isa);
      if (v25)
      {
        free(v25);
        v8[1].Class isa = 0;
      }
      v8[1].Class isa = v24;
      v8[3].Class isa = (Class)v18;
      Class isa = v8[2].isa;
      goto LABEL_30;
    }
    BOOL v40 = __nwlog_obj();
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    os_log_type_t v48 = "strict_malloc";
    __int16 v49 = 2048;
    size_t v50 = v18;
    os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();

    BOOL v31 = __nwlog_abort((uint64_t)v41);
    if (!v31)
    {
      free(v41);
      os_unfair_lock_unlock((os_unfair_lock_t)&v8[4]);
      BOOL v42 = __nwlog_obj();
      os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      os_log_type_t v48 = "nw_txt_record_set_key";
      os_log_type_t v43 = (void *)_os_log_send_and_compose_impl();

      BOOL v31 = __nwlog_abort((uint64_t)v43);
      if (!v31)
      {
        free(v43);
        char v29 = 0;
        goto LABEL_44;
      }
    }
LABEL_75:
    __break(1u);
    return v31;
  }
  os_log_type_t v32 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v48 = "nw_txt_record_set_key";
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (__nwlog_fault(v13, &type, &v45))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_1830D4000, v14, v33, "%{public}s called with null txt_record", buf, 0xCu);
      }
LABEL_40:

      goto LABEL_41;
    }
    if (!v45)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_1830D4000, v14, v37, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    size_t v34 = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v36 = os_log_type_enabled(v14, type);
    if (!v34)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_1830D4000, v14, v35, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v48 = "nw_txt_record_set_key";
      __int16 v49 = 2082;
      size_t v50 = (size_t)v34;
      _os_log_impl(&dword_1830D4000, v14, v35, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v34);
  }
LABEL_41:
  if (v13) {
LABEL_42:
  }
    free(v13);
LABEL_43:
  char v29 = 0;
LABEL_44:

  LOBYTE(v31) = v29;
  return v31;
}

void sub_183AFD8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_remove_key_locked(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    size_t v9 = __nwlog_obj();
    *(_DWORD *)__dst = 136446210;
    *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
    size_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        size_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null txt_record", __dst, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        size_t v11 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)__dst = 136446466;
            *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s called with null txt_record, dumping backtrace:%{public}s", __dst, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v16)
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
          _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s called with null txt_record, no backtrace", __dst, 0xCu);
        }
      }
      else
      {
        size_t v11 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
          _os_log_impl(&dword_1830D4000, v11, v17, "%{public}s called with null txt_record, backtrace limit exceeded", __dst, 0xCu);
        }
      }
    }
LABEL_29:
    if (v10) {
      free(v10);
    }
    goto LABEL_31;
  }
  if ((*((unsigned char *)v3 + 36) & 1) == 0)
  {
    uint64_t v13 = __nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", __dst, 0xCu);
    }
    goto LABEL_14;
  }
  if ((nw_txt_record_key_is_valid((uint64_t)a2) & 1) == 0)
  {
    uint64_t v13 = __nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s invalid key", __dst, 0xCu);
    }
LABEL_14:

LABEL_31:
    BOOL v6 = 0;
    goto LABEL_6;
  }
  *(void *)__dst = 0;
  int start_of_key_locked = nw_txt_record_find_start_of_key_locked(v4, a2, __dst, 0, 0, 0);
  BOOL v6 = start_of_key_locked != 1;
  if (start_of_key_locked != 1)
  {
    uint64_t v7 = **(unsigned char **)__dst + 1;
    memmove(*(void **)__dst, (const void *)(*(void *)__dst + v7), v4[1] + v4[2] - (*(void *)__dst + v7));
    v4[2] -= v7;
  }
LABEL_6:

  return v6;
}

void sub_183AFDC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_remove_key(nw_txt_record_t txt_record, const char *key)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v3 = txt_record;
  nw_txt_record_t v4 = v3;
  if (!v3)
  {
    size_t v10 = __nwlog_obj();
    *(_DWORD *)__dst = 136446210;
    *(void *)&__dst[4] = "nw_txt_record_remove_key";
    size_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v11, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null txt_record", __dst, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)__dst = 136446466;
            *(void *)&__dst[4] = "nw_txt_record_remove_key";
            __int16 v22 = 2082;
            uint64_t v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s called with null txt_record, dumping backtrace:%{public}s", __dst, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }
        if (v17)
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key";
          _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s called with null txt_record, no backtrace", __dst, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key";
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s called with null txt_record, backtrace limit exceeded", __dst, 0xCu);
        }
      }
    }
LABEL_33:
    if (v11) {
      free(v11);
    }
    goto LABEL_35;
  }
  if ((BYTE4(v3[4].isa) & 1) == 0)
  {
    os_log_type_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = "nw_txt_record_remove_key";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", __dst, 0xCu);
    }
    goto LABEL_18;
  }
  if ((nw_txt_record_key_is_valid((uint64_t)key) & 1) == 0)
  {
    os_log_type_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = "nw_txt_record_remove_key";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s invalid key", __dst, 0xCu);
    }
LABEL_18:

LABEL_35:
    BOOL v5 = 0;
    goto LABEL_10;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&v4[4]);
  if (v4[2].isa == (Class)1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&v4[4]);
    BOOL v5 = 0;
  }
  else
  {
    *(void *)__dst = 0;
    int start_of_key_locked = nw_txt_record_find_start_of_key_locked(v4, key, __dst, 0, 0, 0);
    BOOL v5 = start_of_key_locked != 1;
    if (start_of_key_locked != 1)
    {
      uint64_t v7 = **(unsigned char **)__dst + 1;
      memmove(*(void **)__dst, (const void *)(*(void *)__dst + v7), (size_t)v4[1].isa + (unint64_t)v4[2].isa - *(void *)__dst - v7);
      uint64_t v8 = (uint64_t)v4[2].isa - v7;
      v4[2].Class isa = (Class)v8;
      if (!v8)
      {
        *(unsigned char *)v4[1].Class isa = 0;
        v4[2].Class isa = (Class)1;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&v4[4]);
  }
LABEL_10:

  return v5;
}

void sub_183AFE0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_txt_record_get_key_count(nw_txt_record_t txt_record)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v1 = txt_record;
  nw_txt_record_t v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_txt_record_get_key_count";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        size_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v20 = "nw_txt_record_get_key_count";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null txt_record", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        size_t v10 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_txt_record_get_key_count";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v20 = "nw_txt_record_get_key_count";
          _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        size_t v10 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v20 = "nw_txt_record_get_key_count";
          _os_log_impl(&dword_1830D4000, v10, v16, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_33:
    if (v9) {
      free(v9);
    }
    goto LABEL_5;
  }
  if ((BYTE4(v1[4].isa) & 1) == 0)
  {
    os_log_type_t v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v20 = "nw_txt_record_get_key_count";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", buf, 0xCu);
    }

    goto LABEL_5;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&v1[4]);
  uint64_t isa = (uint64_t)v2[2].isa;
  if (isa == 1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&v2[4]);
LABEL_5:
    size_t v4 = 0;
    goto LABEL_13;
  }
  if (isa >= 1)
  {
    size_t v4 = 0;
    BOOL v5 = (unsigned __int8 *)v2[1].isa;
    BOOL v6 = &v5[isa];
    while (1)
    {
      v5 += *v5 + 1;
      if (v5 > v6) {
        goto LABEL_5;
      }
      ++v4;
      if (v5 >= v6) {
        goto LABEL_12;
      }
    }
  }
  size_t v4 = 0;
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)&v2[4]);
LABEL_13:

  return v4;
}

BOOL nw_txt_record_access_bytes(nw_txt_record_t txt_record, nw_txt_record_access_bytes_t access_bytes)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v3 = txt_record;
  nw_txt_record_access_bytes_t v4 = access_bytes;
  BOOL v5 = (uint64_t (**)(void, void, void))v4;
  if (v3)
  {
    if (v4)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&v3[4]);
      char v6 = ((uint64_t (**)(void, Class, Class))v5)[2](v5, v3[1].isa, v3[2].isa);
      os_unfair_lock_unlock((os_unfair_lock_t)&v3[4]);
      goto LABEL_4;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_txt_record_access_bytes";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        size_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null access_bytes", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        size_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null access_bytes, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      size_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null access_bytes, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v24 = "nw_txt_record_access_bytes";
        __int16 v25 = 2082;
        char v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null access_bytes, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_txt_record_access_bytes";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        size_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null txt_record", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        size_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      size_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v24 = "nw_txt_record_access_bytes";
        __int16 v25 = 2082;
        char v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  char v6 = 0;
LABEL_4:

  return v6;
}

void sub_183AFE8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_apply(nw_txt_record_t txt_record, nw_txt_record_applier_t applier)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v3 = txt_record;
  nw_txt_record_applier_t v4 = applier;
  BOOL v5 = v4;
  if (!v3)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_txt_record_apply";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null txt_record", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    size_t v10 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_1830D4000, v10, v16, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v25 = "nw_txt_record_apply";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v16, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_28;
  }
  if (!v4)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_txt_record_apply";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null applier", buf, 0xCu);
      }
LABEL_40:

LABEL_41:
      if (v9) {
        free(v9);
      }
      goto LABEL_43;
    }
    if (!v22)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null applier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    size_t v10 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null applier, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v25 = "nw_txt_record_apply";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null applier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_28:

    free(backtrace_string);
    goto LABEL_41;
  }
  if ((BYTE4(v3[4].isa) & 1) == 0)
  {
    os_log_type_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_txt_record_apply";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s txt_record is not of type dictionary", buf, 0xCu);
    }

LABEL_43:
    char v6 = 0;
    goto LABEL_5;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&v3[4]);
  char v6 = nw_txt_record_apply_internal_locked(v3, &__block_literal_global_58139, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)&v3[4]);
LABEL_5:

  return v6;
}

void sub_183AFEE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_txt_record_apply_block_invoke(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v13 = a8;
  if (a3 <= 0xFF) {
    size_t v14 = 256 - a3;
  }
  else {
    size_t v14 = 0;
  }
  bzero(&__dst[a3], v14);
  memcpy(__dst, a2, a3);
  __dst[a3] = 0;
  memset(v17, 0, 255);
  if (a5 && a7 != 2) {
    memcpy(v17, a4, a5);
  }
  uint64_t v15 = (*((uint64_t (**)(id, unsigned char *, uint64_t, _OWORD *, size_t))v13 + 2))(v13, __dst, a7, v17, a5);

  return v15;
}

void sub_183AFEF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_txt_record_is_equal_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __nw_txt_record_is_equal_block_invoke_2;
  v12[3] = &unk_1E5244838;
  int v13 = a7;
  v12[6] = a2;
  v12[7] = a5;
  v12[8] = a4;
  void v12[4] = &v14;
  void v12[5] = a3;
  uint64_t v8 = _Block_copy(v12);
  nw_txt_record_apply_internal_locked(*(void **)(a1 + 32), v8, 0);
  int v9 = *((unsigned __int8 *)v15 + 24);
  if (!*((unsigned char *)v15 + 24)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  BOOL v10 = v9 != 0;

  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_183AFF080(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_txt_record_is_equal_block_invoke_2(uint64_t a1, const char *a2, size_t a3, const void *a4, size_t a5, uint64_t a6, int a7)
{
  if (*(_DWORD *)(a1 + 72) != a7
    || *(void *)(a1 + 40) != a3
    || strncasecmp(*(const char **)(a1 + 48), a2, a3)
    || a7 == 4 && (*(void *)(a1 + 56) != a5 || memcmp(*(const void **)(a1 + 64), a4, a5)))
  {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t nw_txt_record_get_key(void *a1, const char *a2, void *a3, int *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  uint64_t v8 = v7;
  if (!v7)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
    int v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v13, &type, &v35)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null txt_record", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v35)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v31, "%{public}s called with null txt_record, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      __int16 v38 = 2082;
      os_log_type_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null txt_record, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_49:

    free(backtrace_string);
    goto LABEL_50;
  }
  if ((v7[9]._os_unfair_lock_opaque & 1) == 0)
  {
    uint64_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
    int v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v13, &type, &v35)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null (txt_record->is_dictionary == true)", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v35)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v32, "%{public}s called with null (txt_record->is_dictionary == true), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null (txt_record->is_dictionary == true), no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      __int16 v38 = 2082;
      os_log_type_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null (txt_record->is_dictionary == true), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if ((nw_txt_record_key_is_valid((uint64_t)a2) & 1) == 0)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
    int v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v13, &type, &v35)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null nw_txt_record_key_is_valid(key)", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v35)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v33, "%{public}s called with null nw_txt_record_key_is_valid(key), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v27, "%{public}s called with null nw_txt_record_key_is_valid(key), no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      __int16 v38 = 2082;
      os_log_type_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v27, "%{public}s called with null nw_txt_record_key_is_valid(key), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (a3)
  {
    os_unfair_lock_lock(v8 + 8);
    *(void *)buf = 0;
    if (*(void *)&v8[4]._os_unfair_lock_opaque == 1)
    {
      *a3 = 0;
      int start_of_key_locked = 1;
    }
    else
    {
      int start_of_key_locked = nw_txt_record_find_start_of_key_locked(v8, a2, 0, 0, buf, a3);
    }
    *a4 = start_of_key_locked;
    os_unfair_lock_unlock(v8 + 8);
    uint64_t v10 = *(void *)buf;
    goto LABEL_9;
  }
  os_log_type_t v20 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
  int v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (__nwlog_fault(v13, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null value_len", buf, 0xCu);
      }
LABEL_76:

      goto LABEL_50;
    }
    if (!v35)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v34, "%{public}s called with null value_len, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v30 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null value_len, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      __int16 v38 = 2082;
      os_log_type_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null value_len, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
LABEL_50:
  if (v13) {
    free(v13);
  }
  uint64_t v10 = 0;
LABEL_9:

  return v10;
}

void sub_183AFFA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_txt_record_get_key_value_result(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1) {
    return 1;
  }
  unint64_t v2 = *a1;
  if (v2 == a2) {
    return 2;
  }
  if (a2 + 1 == v2) {
    return 3;
  }
  if (a2 + 1 >= v2) {
    __assert_rtn("nw_txt_record_get_key_value_result", "txt_record.cpp", 758, "false");
  }
  return 4;
}

nw_txt_record_t nw_txt_record_copy(nw_txt_record_t txt_record)
{
  if (txt_record) {
    return nw_txt_record_create_with_bytes((const uint8_t *)txt_record[1].isa, (size_t)txt_record[2].isa);
  }
  return txt_record;
}

uint64_t nw_txt_record_get_bytes(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t nw_txt_record_get_length(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t __nw_activity_is_global_parent_block_invoke(uint64_t a1)
{
  uint64_t result = nw_activity_is_equal(*(void **)(a1 + 32), (void *)global_parent);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

const char *nw_activity_reporting_strategy_to_string(unsigned int a1)
{
  if (a1 > 3) {
    return "invalid";
  }
  else {
    return off_1E52449E8[a1];
  }
}

const char *nw_activity_completion_reason_to_string(int a1)
{
  if ((a1 - 1) > 3) {
    return "invalid";
  }
  else {
    return off_1E5246030[a1 - 1];
  }
}

const char *nw_activity_domain_and_label_to_string(int a1, int a2)
{
  switch(a1)
  {
    case 11:
      if ((a2 - 1) >= 9) {
        return "libnetcore:invalid";
      }
      else {
        return off_1E5244ED0[a2 - 1];
      }
    case 12:
      if ((a2 - 1) >= 4) {
        return "cfnetwork:invalid";
      }
      else {
        return off_1E5244F18[a2 - 1];
      }
    case 13:
      if ((a2 - 1) >= 3) {
        return "coremedia:invalid";
      }
      else {
        return off_1E5244F38[a2 - 1];
      }
    case 14:
      if ((a2 - 1) >= 0xD) {
        return "parsec:invalid";
      }
      else {
        return off_1E5244F50[a2 - 1];
      }
    case 15:
      if ((a2 - 1) >= 0xA) {
        return "siri:invalid";
      }
      else {
        return off_1E5244FB8[a2 - 1];
      }
    case 16:
      if ((a2 - 1) >= 3) {
        return "webkit:invalid";
      }
      else {
        return off_1E5245008[a2 - 1];
      }
    case 17:
      if ((a2 - 1) >= 5) {
        return "coremedia_crabs:invalid";
      }
      else {
        return off_1E5245020[a2 - 1];
      }
    case 18:
      if ((a2 - 1) >= 0x12) {
        return "coremedia_hls:invalid";
      }
      else {
        return off_1E5245048[a2 - 1];
      }
    case 19:
      nw_txt_record_t v3 = "cloudkit:invalid";
      nw_txt_record_applier_t v4 = "cloudkit:invalid_max";
      goto LABEL_97;
    case 20:
      nw_txt_record_t v3 = "mmcs:invalid";
      nw_txt_record_applier_t v4 = "mmcs:invalid_max";
      goto LABEL_97;
    case 21:
      if ((a2 - 1) >= 0x18) {
        return "mail:invalid";
      }
      else {
        return off_1E52450D8[a2 - 1];
      }
    case 22:
      if ((a2 - 1) >= 7) {
        return "facetime:invalid";
      }
      else {
        return off_1E5245198[a2 - 1];
      }
    case 23:
      if ((a2 - 1) >= 0x19) {
        return "adplatforms:invalid";
      }
      else {
        return off_1E52451D0[a2 - 1];
      }
    case 24:
      if ((a2 - 1) >= 3) {
        return "corelocation:invalid";
      }
      else {
        return off_1E5245298[a2 - 1];
      }
    case 25:
      if ((a2 - 1) >= 3) {
        return "airplay_sender:invalid";
      }
      else {
        return off_1E52452B0[a2 - 1];
      }
    case 26:
      if ((a2 - 1) >= 3) {
        return "airplay_receiver:invalid";
      }
      else {
        return off_1E52452C8[a2 - 1];
      }
    case 27:
      if ((a2 - 1) >= 0x43) {
        return "maps:invalid";
      }
      else {
        return off_1E52452E0[a2 - 1];
      }
    case 28:
      if ((a2 - 1) >= 0x43) {
        return "maps_internal:invalid";
      }
      else {
        return off_1E52454F8[a2 - 1];
      }
    case 29:
      if ((a2 - 1) >= 0x43) {
        return "maps_external:invalid";
      }
      else {
        return off_1E5245710[a2 - 1];
      }
    case 30:
      if ((a2 - 1) >= 5) {
        return "network_speed_test:invalid";
      }
      else {
        return off_1E5245928[a2 - 1];
      }
    case 31:
      BOOL v5 = "captive:invalid";
      if (a2 == 1) {
        BOOL v5 = "captive:captive_probe";
      }
      char v6 = "captive:invalid_max";
      goto LABEL_75;
    case 32:
      if ((a2 - 1) >= 0xD) {
        return "safe_browsing:invalid";
      }
      else {
        return off_1E5245950[a2 - 1];
      }
    case 33:
      if ((a2 - 1) >= 4) {
        return "dns:invalid";
      }
      else {
        return off_1E52459B8[a2 - 1];
      }
    case 34:
      if ((a2 - 1) >= 0xC) {
        return "music:invalid";
      }
      else {
        return off_1E52459D8[a2 - 1];
      }
    case 35:
      if ((a2 - 1) >= 3) {
        return "battery:invalid";
      }
      else {
        return off_1E5245A38[a2 - 1];
      }
    case 36:
      if ((a2 - 1) >= 0xB) {
        return "cloud_media_services:invalid";
      }
      else {
        return off_1E5245A50[a2 - 1];
      }
    case 37:
      if ((a2 - 1) >= 0xE) {
        return "avconference:invalid";
      }
      else {
        return off_1E5245AA8[a2 - 1];
      }
    case 38:
      if ((a2 - 1) >= 4) {
        return "appstore:invalid";
      }
      else {
        return off_1E5245B18[a2 - 1];
      }
    case 39:
      BOOL v5 = "telephony_service:invalid";
      if (a2 == 1) {
        BOOL v5 = "telephony_service:session";
      }
      char v6 = "telephony_service:invalid_max";
      goto LABEL_75;
    case 40:
      if ((a2 - 1) >= 8) {
        return "network_experiments:invalid";
      }
      else {
        return off_1E5245B38[a2 - 1];
      }
    case 41:
      if ((a2 - 1) >= 7) {
        return "network_perf:invalid";
      }
      else {
        return off_1E5245B78[a2 - 1];
      }
    case 42:
      if ((a2 - 1) >= 4) {
        return "hotspot:invalid";
      }
      else {
        return off_1E5245BB0[a2 - 1];
      }
    case 43:
      if ((a2 - 1) >= 0x11) {
        return "weather:invalid";
      }
      else {
        return off_1E5245BD0[a2 - 1];
      }
    case 44:
      if ((a2 - 1) >= 8) {
        return "coordination:invalid";
      }
      else {
        return off_1E5245C58[a2 - 1];
      }
    case 45:
      if ((a2 - 1) >= 0xA) {
        return "appstore_jet:invalid";
      }
      else {
        return off_1E5245C98[a2 - 1];
      }
    case 46:
      BOOL v5 = "soundboard:invalid";
      if (a2 == 1) {
        BOOL v5 = "soundboard:stereo_pair_volume_sync";
      }
      char v6 = "soundboard:invalid_max";
LABEL_75:
      if (a2 == 2) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v5;
      }
      break;
    case 47:
      if ((a2 - 1) >= 0xE) {
        uint64_t result = "aea:invalid";
      }
      else {
        uint64_t result = off_1E5245CE8[a2 - 1];
      }
      break;
    case 48:
      if ((a2 - 1) >= 4) {
        uint64_t result = "homekit:invalid";
      }
      else {
        uint64_t result = off_1E5245D58[a2 - 1];
      }
      break;
    case 49:
      if ((a2 - 1) >= 0xB) {
        uint64_t result = "wifi:invalid";
      }
      else {
        uint64_t result = off_1E5245D78[a2 - 1];
      }
      break;
    case 50:
      if ((a2 - 1) >= 3) {
        uint64_t result = "app_launch:invalid";
      }
      else {
        uint64_t result = off_1E5245DD0[a2 - 1];
      }
      break;
    case 51:
      if ((a2 - 1) >= 3) {
        uint64_t result = "ams:invalid";
      }
      else {
        uint64_t result = off_1E5245DE8[a2 - 1];
      }
      break;
    case 52:
      if ((a2 - 1) >= 8) {
        uint64_t result = "reve:invalid";
      }
      else {
        uint64_t result = off_1E5245E00[a2 - 1];
      }
      break;
    case 53:
      if ((a2 - 1) >= 6) {
        uint64_t result = "network_quality:invalid";
      }
      else {
        uint64_t result = off_1E5245E40[a2 - 1];
      }
      break;
    case 54:
      if ((a2 - 1) >= 5) {
        uint64_t result = "news:invalid";
      }
      else {
        uint64_t result = off_1E5245E70[a2 - 1];
      }
      break;
    case 55:
      if ((a2 - 1) >= 5) {
        uint64_t result = "cloud_compute:invalid";
      }
      else {
        uint64_t result = off_1E5245E98[a2 - 1];
      }
      break;
    case 56:
      nw_txt_record_t v3 = "push:invalid";
      nw_txt_record_applier_t v4 = "push:invalid_max";
LABEL_97:
      if (a2 == 1) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = v3;
      }
      break;
    case 57:
      if ((a2 - 1) >= 3) {
        uint64_t result = "nw_actor_system:invalid";
      }
      else {
        uint64_t result = off_1E5245EC0[a2 - 1];
      }
      break;
    case 58:
      if ((a2 - 1) >= 0x16) {
        uint64_t result = "app_intents_services:invalid";
      }
      else {
        uint64_t result = off_1E5245ED8[a2 - 1];
      }
      break;
    case 59:
      if ((a2 - 1) >= 5) {
        uint64_t result = "stocks:invalid";
      }
      else {
        uint64_t result = off_1E5245F88[a2 - 1];
      }
      break;
    case 60:
      if ((a2 - 1) >= 0xC) {
        uint64_t result = "tv_app:invalid";
      }
      else {
        uint64_t result = off_1E5245FB0[a2 - 1];
      }
      break;
    case 61:
      if ((a2 - 1) >= 4) {
        uint64_t result = "rapport:invalid";
      }
      else {
        uint64_t result = off_1E5246010[a2 - 1];
      }
      break;
    default:
      if ((a1 - 1) >= 0xA) {
        uint64_t v7 = "invalid:invalid";
      }
      else {
        uint64_t v7 = "reserved:reserved";
      }
      if ((a1 - 900) >= 0x64) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = "experimental:experimental";
      }
      break;
  }
  return result;
}

char *nw_activity_create_from_xpc_token(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if (object_getClass(v1) == (Class)MEMORY[0x1E4F14600])
    {
      *(_OWORD *)buf = *(_OWORD *)xpc_uuid_get_bytes(v2);
      nw_txt_record_t v3 = -[NWConcrete_nw_activity initWithToken:]([NWConcrete_nw_activity alloc], buf);
      goto LABEL_4;
    }
    int v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid))", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid)), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null token", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null token, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null token, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null token, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  nw_txt_record_t v3 = 0;
LABEL_4:

  return v3;
}

void sub_183B00E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_activity_create_retry(void *a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    unint64_t v2 = [NWConcrete_nw_activity alloc];
    id v3 = v1;
    if (!v2)
    {
LABEL_89:
      os_log_type_t v29 = 0;
LABEL_44:

      goto LABEL_45;
    }
    v52.os_log_type_t receiver = v2;
    v52.super_class = (Class)NWConcrete_nw_activity;
    nw_txt_record_applier_t v4 = objc_msgSendSuper2(&v52, sel_init);
    BOOL v5 = v4;
    if (v4)
    {
      v4[29] = *((_DWORD *)v3 + 29);
      v4[28] = *((_DWORD *)v3 + 28);
      v4[33] = *((_DWORD *)v3 + 33);
      char v6 = *((unsigned char *)v4 + 140) | 1;
      *((unsigned char *)v4 + 140) = v6;
      *((unsigned char *)v4 + 140) = *((unsigned char *)v3 + 140) & 2 | v6 & 0xFD;
      id v7 = v3;
      os_log_type_t v8 = (void *)v5[7];
      if ((v5[8] & 1) != 0 && v8)
      {
        v5[7] = 0;

        os_log_type_t v8 = (void *)v5[7];
      }
      v5[7] = 0;

      int v9 = (void *)v5[7];
      v5[7] = v7;

      *((unsigned char *)v5 + 64) |= 1u;
      id v10 = v7;
      BOOL v11 = (*((unsigned char *)v3 + 140) & 4) == 0;

      if (v11)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
        BOOL v13 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v50 = 0;
        if (!__nwlog_fault(v13, &type, &v50)) {
          goto LABEL_13;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v14 = (id)gLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity", buf, 0xCu);
          }
LABEL_12:

LABEL_13:
          if (!v13) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        if (!v50)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v14 = (id)gLogObj;
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
            _os_log_impl(&dword_1830D4000, v14, v33, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_12;
        }
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v14, type);
        if (!backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446210;
            char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
            _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity, no backtrace", buf, 0xCu);
          }
          goto LABEL_12;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
          __int16 v55 = 2082;
          *(void *)os_log_type_t v56 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v13) {
LABEL_14:
        }
          free(v13);
      }
LABEL_15:
      if ((*((unsigned char *)v3 + 140) & 8) == 0) {
        goto LABEL_35;
      }
      if (*((void *)v10 + 9))
      {
        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
        }
        os_log_type_t v16 = (id)gactivityLogObj;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_34;
        }
        uint64_t v17 = *((void *)v10 + 9);
        int v18 = *((_DWORD *)v10 + 32);
        *(_DWORD *)buf = 138412802;
        char v54 = (const char *)v10;
        __int16 v55 = 2080;
        *(void *)os_log_type_t v56 = v17;
        *(_WORD *)&v56[8] = 1024;
        int v57 = v18;
        os_log_type_t v19 = "Original activity %@ was completed, ignoring underlying error domain: %s, code: %d";
        os_log_type_t v20 = v16;
        uint32_t v21 = 28;
      }
      else
      {
        if (!*((_DWORD *)v10 + 31) && !*((_DWORD *)v10 + 32)) {
          goto LABEL_35;
        }
        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
        }
        os_log_type_t v16 = (id)gactivityLogObj;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_34;
        }
        int v25 = *((_DWORD *)v10 + 31);
        int v26 = *((_DWORD *)v10 + 32);
        *(_DWORD *)buf = 138412802;
        char v54 = (const char *)v10;
        __int16 v55 = 1024;
        *(_DWORD *)os_log_type_t v56 = v25;
        *(_WORD *)&void v56[4] = 1024;
        *(_DWORD *)&v56[6] = v26;
        os_log_type_t v19 = "Original activity %@ was completed, ignoring underlying error domain: %d, code: %d";
        os_log_type_t v20 = v16;
        uint32_t v21 = 24;
      }
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, v19, buf, v21);
LABEL_34:

LABEL_35:
      os_log_type_t v27 = v10;
      char v28 = v27[17];

      os_log_type_t v29 = v5;
      uuid_generate_random((unsigned __int8 *)v29 + 8);
      *((unsigned char *)v29 + 17) = *((unsigned char *)v29 + 17) & 0xFE | v28 & 1;
      os_unfair_lock_lock((os_unfair_lock_t)v29 + 26);
      BOOL v30 = (void *)v29[11];
      if ((v29[12] & 1) != 0 && v30)
      {
        v29[11] = 0;

        BOOL v30 = (void *)v29[11];
      }
      v29[11] = 0;

      os_unfair_lock_unlock((os_unfair_lock_t)v29 + 26);
      if (nw_activity_should_log(v29))
      {
        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
        }
        os_log_type_t v31 = (id)gactivityLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          char v54 = (const char *)v29;
          _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEFAULT, "Create activity %{public}@", buf, 0xCu);
        }
      }
      goto LABEL_44;
    }
    __int16 v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v39, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v40 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v50)
      {
        char v45 = (char *)__nw_create_backtrace_string();
        uint64_t v40 = __nwlog_obj();
        os_log_type_t v46 = type;
        BOOL v47 = os_log_type_enabled(v40, type);
        if (v45)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
            __int16 v55 = 2082;
            *(void *)os_log_type_t v56 = v45;
            _os_log_impl(&dword_1830D4000, v40, v46, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v45);
          goto LABEL_87;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
          _os_log_impl(&dword_1830D4000, v40, v46, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v40 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          char v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
          _os_log_impl(&dword_1830D4000, v40, v49, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_87:
    if (v39) {
      free(v39);
    }
    goto LABEL_89;
  }
  os_log_type_t v34 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v54 = "nw_activity_create_retry";
  char v35 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v52.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v35, &v52, &type))
  {
    if (LOBYTE(v52.receiver) == 17)
    {
      BOOL v36 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v52.receiver;
      if (os_log_type_enabled(v36, (os_log_type_t)v52.receiver))
      {
        *(_DWORD *)buf = 136446210;
        char v54 = "nw_activity_create_retry";
        _os_log_impl(&dword_1830D4000, v36, receiver, "%{public}s called with null original", buf, 0xCu);
      }
    }
    else if (type)
    {
      BOOL v42 = (char *)__nw_create_backtrace_string();
      BOOL v36 = __nwlog_obj();
      os_log_type_t v43 = (os_log_type_t)v52.receiver;
      BOOL v44 = os_log_type_enabled(v36, (os_log_type_t)v52.receiver);
      if (v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          char v54 = "nw_activity_create_retry";
          __int16 v55 = 2082;
          *(void *)os_log_type_t v56 = v42;
          _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s called with null original, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v42);
        goto LABEL_81;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        char v54 = "nw_activity_create_retry";
        _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s called with null original, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v36 = __nwlog_obj();
      os_log_type_t v48 = (os_log_type_t)v52.receiver;
      if (os_log_type_enabled(v36, (os_log_type_t)v52.receiver))
      {
        *(_DWORD *)buf = 136446210;
        char v54 = "nw_activity_create_retry";
        _os_log_impl(&dword_1830D4000, v36, v48, "%{public}s called with null original, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_81:
  if (v35) {
    free(v35);
  }
  os_log_type_t v29 = 0;
LABEL_45:

  return v29;
}

void sub_183B018CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_deep_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 && v4 && !uuid_is_null((const unsigned __int8 *)v3 + 8) && !uuid_is_null((const unsigned __int8 *)v5 + 8))
  {
    if (*((_DWORD *)v3 + 29) != *((_DWORD *)v5 + 29)
      || *((_DWORD *)v3 + 28) != *((_DWORD *)v5 + 28)
      || *((void *)v3 + 3) != *((void *)v5 + 3)
      || *((_DWORD *)v3 + 33) != *((_DWORD *)v5 + 33)
      || *((_DWORD *)v3 + 34) != *((_DWORD *)v5 + 34)
      || ((*((unsigned char *)v5 + 140) ^ *((unsigned char *)v3 + 140)) & 0xD) != 0
      || (int v9 = (void *)*((void *)v5 + 7),
          id v10 = *((id *)v3 + 7),
          LOBYTE(v9) = nw_activity_is_equal(v10, v9),
          v10,
          (v9 & 1) == 0)
      || *((void *)v3 + 1) != *((void *)v5 + 1)
      || *((void *)v3 + 2) != *((void *)v5 + 2))
    {
      uint64_t v7 = 0;
      goto LABEL_9;
    }
    BOOL v6 = *((void *)v3 + 4) == *((void *)v5 + 4);
  }
  else
  {
    BOOL v6 = v3 == v5;
  }
  uint64_t v7 = v6;
LABEL_9:

  return v7;
}

void sub_183B01A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_activity_has_global_investigation_identifier()
{
  return nw_activity_get_investigation_id_from_defaults() != 0;
}

BOOL nw_activity_should_write_metric_stream_to_log()
{
  return networkd_settings_get_BOOL((const char *)nw_setting_activity_write_metric_stream_to_log);
}

uint64_t nw_activity_should_report_to_destination(int a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "nw_activity_should_report_to_destination";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v7, &type, &v16)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_activity_should_report_to_destination";
        id v10 = "%{public}s called with null destination";
LABEL_37:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "nw_activity_should_report_to_destination";
            __int16 v20 = 2082;
            uint32_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (!v14) {
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_activity_should_report_to_destination";
        id v10 = "%{public}s called with null destination, no backtrace";
        goto LABEL_37;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_activity_should_report_to_destination";
        id v10 = "%{public}s called with null destination, backtrace limit exceeded";
        goto LABEL_37;
      }
    }
LABEL_38:

LABEL_39:
    if (v7) {
      free(v7);
    }
    goto LABEL_41;
  }
  int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_report_destination, 12);
  int64_t v3 = int64_with_default;
  if (!gLogDatapath)
  {
    if ((int64_with_default & a1) != 0) {
      char v4 = -1;
    }
    else {
      char v4 = 0;
    }
    return v4 & 1;
  }
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
  }
  BOOL v11 = (id)gactivityLogObj;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v19 = "nw_activity_should_report_to_destination";
    __int16 v20 = 2048;
    uint32_t v21 = (char *)v3;
    _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Activity destination: %llu", buf, 0x16u);
  }

  char v4 = gLogDatapath;
  if ((v3 & a1) == 0)
  {
    if (!gLogDatapath) {
      return v4 & 1;
    }
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
    }
    os_log_type_t v15 = (id)gactivityLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v19 = "nw_activity_should_report_to_destination";
      __int16 v20 = 1024;
      LODWORD(v21) = a1;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Destination %u is not configured", buf, 0x12u);
    }

LABEL_41:
    char v4 = 0;
    return v4 & 1;
  }
  if (gLogDatapath)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
    }
    id v12 = (id)gactivityLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v19 = "nw_activity_should_report_to_destination";
      __int16 v20 = 1024;
      LODWORD(v21) = a1;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s Destination %u is configured", buf, 0x12u);
    }

    char v4 = 1;
  }
  else
  {
    char v4 = 1;
  }
  return v4 & 1;
}

const char *nw_activity_domain_to_string(int a1)
{
  if ((a1 - 11) < 0x33) {
    return off_1E5244D38[a1 - 11];
  }
  if ((a1 - 1) >= 0xA) {
    unint64_t v2 = "invalid";
  }
  else {
    unint64_t v2 = "reserved";
  }
  if ((a1 - 900) >= 0x64) {
    return v2;
  }
  else {
    return "experimental";
  }
}

BOOL nw_activity_domain_is_valid(int a1)
{
  return (a1 - 900) < 0x64 || (a1 - 11) < 0x33;
}

os_signpost_id_t nw_activity_signpost_id_fallback(void)
{
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
  }
  xpc_object_t v0 = (id)gactivityLogObj;
  os_signpost_id_t v1 = os_signpost_id_generate(v0);

  return v1;
}

void *nw_activity_create_activity_dictionary(NWConcrete_nw_activity *a1, nw_activity_report_s *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int64_t v3 = a1;
  if (a2)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    id v5 = v4;
    *(void *)os_log_type_t type = v4;
    char v25 = -1;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, "activityDomain", a2->domain);
      xpc_dictionary_set_uint64(v5, "activityLabel", a2->label);
      if (!uuid_is_null(a2->activity_uuid))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse(a2->activity_uuid, out);
        xpc_dictionary_set_string(v5, "activityUUID", out);
      }
      if (!uuid_is_null(a2->parent_activity_uuid))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse(a2->parent_activity_uuid, out);
        xpc_dictionary_set_string(v5, "parentActivityUUID", out);
      }
      xpc_dictionary_set_BOOL(v5, "isRetry", *((unsigned char *)a2 + 304) & 1);
      if (a2->bundle_id[0]) {
        xpc_dictionary_set_string(v5, "bundleID", a2->bundle_id);
      }
      xpc_dictionary_set_uint64(v5, "investigationID", a2->investigation_identifier);
      goto LABEL_10;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_activity_create_activity_dictionary";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v12, &v26, &v23)) {
      goto LABEL_46;
    }
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = v26;
      if (os_log_type_enabled(v13, v26))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s failed to allocate dictionary", (uint8_t *)out, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v19 = v26;
      BOOL v20 = os_log_type_enabled(v13, v26);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_activity_create_activity_dictionary";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s failed to allocate dictionary, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_46;
      }
      if (v20)
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s failed to allocate dictionary, no backtrace", (uint8_t *)out, 0xCu);
      }
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v22 = v26;
      if (os_log_type_enabled(v13, v26))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s failed to allocate dictionary, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
    }

LABEL_46:
    if (v12) {
      free(v12);
    }
    goto LABEL_10;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)uuid_string_t out = 136446210;
  *(void *)&out[4] = "nw_activity_create_activity_dictionary";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, type, &v26))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null activity_report", (uint8_t *)out, 0xCu);
      }
    }
    else if (v26)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      BOOL v17 = os_log_type_enabled(v9, type[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_activity_create_activity_dictionary";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null activity_report, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
        }

        free(v15);
        goto LABEL_40;
      }
      if (v17)
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null activity_report, no backtrace", (uint8_t *)out, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null activity_report, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
    }
  }
LABEL_40:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_10:

  return v5;
}

void sub_183B02548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);

  _Unwind_Resume(a1);
}

BOOL nw_activity_metric_object_is_valid(void *a1, unsigned int a2, const char **a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (v5)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
    }
    BOOL v6 = (id)gactivityLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      Class Class = object_getClass(v5);
      os_log_type_t v8 = "";
      *(_DWORD *)buf = 136315906;
      if (!a2) {
        os_log_type_t v8 = "top level ";
      }
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = Class;
      *(_WORD *)&unsigned char buf[22] = 1024;
      unsigned int v35 = a2;
      __int16 v36 = 2112;
      id v37 = v5;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "Inspecting %s%@ at depth %u: %@", buf, 0x26u);
    }

    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    LOBYTE(v35) = 1;
    if (a2 < 0xB)
    {
      BOOL v11 = (objc_class *)MEMORY[0x1E4F14590];
      if (a2 || object_getClass(v5) == v11)
      {
        if (object_getClass(v5) == v11)
        {
          nw_append_format(a3, "{");
          *(void *)os_log_type_t v32 = 0;
          *(void *)&_OWORD v32[8] = v32;
          *(void *)&v32[16] = 0x2020000000;
          char v33 = 1;
          applier[0] = MEMORY[0x1E4F143A8];
          applier[1] = 3221225472;
          applier[2] = __nw_activity_metric_object_is_valid_block_invoke;
          applier[3] = &unk_1E5244900;
          unsigned int v30 = a2;
          void applier[4] = v32;
          applier[5] = buf;
          applier[6] = a3;
          xpc_dictionary_apply(v5, applier);
          nw_append_format(a3, "}");
          _Block_object_dispose(v32, 8);
        }
        else if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
        {
          nw_append_format(a3, "[");
          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 3221225472;
          v27[2] = __nw_activity_metric_object_is_valid_block_invoke_74;
          v27[3] = &unk_1E5244928;
          unsigned int v28 = a2;
          void v27[4] = buf;
          v27[5] = a3;
          xpc_array_apply(v5, v27);
          nw_append_format(a3, "]");
        }
        else if (object_getClass(v5) == (Class)MEMORY[0x1E4F145F0])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
            }
            os_log_type_t v22 = (id)gactivityLogObj;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }
          xpc_string_get_string_ptr(v5);
          nw_append_format(a3, "\"%s\"");
        }
        else if (object_getClass(v5) == (Class)MEMORY[0x1E4F145C0])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
            }
            char v23 = (id)gactivityLogObj;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }
          xpc_int64_get_value(v5);
          nw_append_format(a3, "%lld");
        }
        else if (object_getClass(v5) == (Class)MEMORY[0x1E4F145F8])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
            }
            BOOL v24 = (id)gactivityLogObj;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }
          xpc_uint64_get_value(v5);
          nw_append_format(a3, "%llu");
        }
        else if (object_getClass(v5) == (Class)MEMORY[0x1E4F14598])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
            }
            char v25 = (id)gactivityLogObj;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }
          xpc_double_get_value(v5);
          nw_append_format(a3, "%f");
        }
        else if (object_getClass(v5) == (Class)MEMORY[0x1E4F14570])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
            }
            os_log_type_t v26 = (id)gactivityLogObj;
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }
          xpc_BOOL_get_value(v5);
          nw_append_format(a3, "%s");
        }
        else
        {
          if (__nwlog_activity_log::onceToken != -1) {
            dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
          }
          id v12 = (id)gactivityLogObj;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)os_log_type_t v32 = 138412546;
            *(void *)&void v32[4] = v5;
            *(_WORD *)&v32[12] = 2112;
            *(void *)&v32[14] = object_getClass(v5);
            _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "Invalid type in metric object: %@ (%@)", v32, 0x16u);
          }

          *(unsigned char *)(*(void *)&buf[8] + 24) = 0;
        }
        BOOL v10 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
        goto LABEL_46;
      }
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
      }
      os_log_type_t v9 = (id)gactivityLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)os_log_type_t v32 = 138412290;
        *(void *)&void v32[4] = v5;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "Top level metrics object is not a dictionary: %@", v32, 0xCu);
      }
    }
    else
    {
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
      }
      os_log_type_t v9 = (id)gactivityLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)os_log_type_t v32 = 138412290;
        *(void *)&void v32[4] = v5;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "Exceeded max depth with object: %@", v32, 0xCu);
      }
    }

    BOOL v10 = 0;
LABEL_46:
    _Block_object_dispose(buf, 8);
    goto LABEL_47;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  v32[0] = 16;
  char v31 = 0;
  if (__nwlog_fault(v15, v32, &v31))
  {
    if (v32[0] == 17)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = v32[0];
      if (os_log_type_enabled(v16, (os_log_type_t)v32[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null metrics", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v19 = v32[0];
      BOOL v20 = os_log_type_enabled(v16, (os_log_type_t)v32[0]);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null metrics, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_64;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null metrics, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = v32[0];
      if (os_log_type_enabled(v16, (os_log_type_t)v32[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null metrics, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_64:
  if (v15) {
    free(v15);
  }
  BOOL v10 = 0;
LABEL_47:

  return v10;
}

void sub_183B03040(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_activity_metric_object_is_valid_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (!*(unsigned char *)(v6 + 24))
  {
    nw_append_format(*(const char ***)(a1 + 48), ",");
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v6 + 24) = 0;
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
  }
  uint64_t v7 = (id)gactivityLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    BOOL v11 = a2;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "Inspecting dictionary key: %s", buf, 0xCu);
  }

  nw_append_format(*(const char ***)(a1 + 48), "\"%s\":", a2);
  uint64_t is_valid = nw_activity_metric_object_is_valid(v5, (*(_DWORD *)(a1 + 56) + 1), *(void *)(a1 + 48));
  if ((is_valid & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }

  return is_valid;
}

void sub_183B03220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_activity_metric_object_is_valid_block_invoke_74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2) {
    nw_append_format(*(const char ***)(a1 + 40), ",");
  }
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
  }
  uint64_t v6 = (id)gactivityLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 134217984;
    uint64_t v10 = a2;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "Inspecting array index: %zu", (uint8_t *)&v9, 0xCu);
  }

  uint64_t is_valid = nw_activity_metric_object_is_valid(v5, (*(_DWORD *)(a1 + 48) + 1), *(void *)(a1 + 40));
  if ((is_valid & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }

  return is_valid;
}

void sub_183B03360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL51nw_activity_inherit_from_global_parent_if_necessaryP22NWConcrete_nw_activity_block_invoke(uint64_t a1)
{
  if (global_parent && (nw_activity_is_equal(*(void **)(a1 + 32), (void *)global_parent) & 1) == 0)
  {
    unint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = (void *)global_parent;
    nw_activity_set_parent_activity(v2, v3);
  }
}

uint64_t nw_activity_uuid_is_selected_for_reporting(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned char *)(a1 + 9) & 1;
  }
  unint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v12 = "nw_activity_uuid_is_selected_for_reporting";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v12 = "nw_activity_uuid_is_selected_for_reporting";
        uint64_t v6 = "%{public}s called with null uuid";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        xpc_object_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v12 = "nw_activity_uuid_is_selected_for_reporting";
            __int16 v13 = 2082;
            os_log_type_t v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null uuid, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v12 = "nw_activity_uuid_is_selected_for_reporting";
        uint64_t v6 = "%{public}s called with null uuid, no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v12 = "nw_activity_uuid_is_selected_for_reporting";
        uint64_t v6 = "%{public}s called with null uuid, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_activity_get_domain(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if ((v1[35] & 2) == 0)
    {
      uint64_t v3 = v1[29];
      goto LABEL_4;
    }
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_activity_get_domain";
    __int16 v23 = 2082;
    BOOL v24 = "Cannot get domain from lightweight representation of an activity";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_get_domain";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }
      else if (v19)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v22 = "nw_activity_get_domain";
            __int16 v23 = 2082;
            BOOL v24 = "Cannot get domain from lightweight representation of an activity";
            __int16 v25 = 2082;
            os_log_type_t v26 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_get_domain";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_get_domain";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
    os_log_type_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_activity_get_domain";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v19)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v22 = "nw_activity_get_domain";
            __int16 v23 = 2082;
            BOOL v24 = v11;
            _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          goto LABEL_37;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_36:
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_4:

  return v3;
}

uint64_t nw_activity_get_label(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if ((v1[35] & 2) == 0)
    {
      uint64_t v3 = v1[28];
      goto LABEL_4;
    }
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_activity_get_label";
    __int16 v23 = 2082;
    BOOL v24 = "Cannot get label from lightweight representation of an activity";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_get_label";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }
      else if (v19)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v22 = "nw_activity_get_label";
            __int16 v23 = 2082;
            BOOL v24 = "Cannot get label from lightweight representation of an activity";
            __int16 v25 = 2082;
            os_log_type_t v26 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_get_label";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_get_label";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
    os_log_type_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_activity_get_label";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_get_label";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v19)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v22 = "nw_activity_get_label";
            __int16 v23 = 2082;
            BOOL v24 = v11;
            _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          goto LABEL_37;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_get_label";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_get_label";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_36:
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_4:

  return v3;
}

void nw_activity_set_reporting_strategy(void *a1, int a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_activity_set_reporting_strategy";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v6, &type, &v30)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          char v33 = "nw_activity_set_reporting_strategy";
          __int16 v34 = 2082;
          unsigned int v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_73:
        if (!v6) {
          goto LABEL_6;
        }
LABEL_74:
        free(v6);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v26, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  if ((*((unsigned char *)v3 + 140) & 4) != 0)
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_activity_set_reporting_strategy";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v6, &type, &v30)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!v30)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v27, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_72;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v7, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, no backtrace", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_activity_set_reporting_strategy";
      __int16 v34 = 2082;
      unsigned int v35 = v18;
      _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  if ((*((unsigned char *)v3 + 140) & 8) != 0)
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_activity_set_reporting_strategy";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v6, &type, &v30)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!v30)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v28, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_72;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v7, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v21, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_activity_set_reporting_strategy";
      __int16 v34 = 2082;
      unsigned int v35 = v18;
      _os_log_impl(&dword_1830D4000, v7, v21, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_41:

    free(v18);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_74;
  }
  if ((a2 & 0xFC) == 0)
  {
    *((_DWORD *)v3 + 33) = a2;
    goto LABEL_6;
  }
  BOOL v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446466;
  char v33 = "nw_activity_set_reporting_strategy";
  __int16 v34 = 2082;
  unsigned int v35 = "Invalid reporting strategy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (!__nwlog_fault(v6, &type, &v30)) {
    goto LABEL_73;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_activity_set_reporting_strategy";
      __int16 v34 = 2082;
      unsigned int v35 = "Invalid reporting strategy";
      _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
    }
    goto LABEL_72;
  }
  if (!v30)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v29 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_activity_set_reporting_strategy";
      __int16 v34 = 2082;
      unsigned int v35 = "Invalid reporting strategy";
      _os_log_impl(&dword_1830D4000, v7, v29, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_72;
  }
  __int16 v23 = (char *)__nw_create_backtrace_string();
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v24 = type;
  BOOL v25 = os_log_type_enabled(v7, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_activity_set_reporting_strategy";
      __int16 v34 = 2082;
      unsigned int v35 = "Invalid reporting strategy";
      _os_log_impl(&dword_1830D4000, v7, v24, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_72;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446722;
    char v33 = "nw_activity_set_reporting_strategy";
    __int16 v34 = 2082;
    unsigned int v35 = "Invalid reporting strategy";
    __int16 v36 = 2082;
    id v37 = v23;
    _os_log_impl(&dword_1830D4000, v7, v24, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v23);
  if (v6) {
    goto LABEL_74;
  }
LABEL_6:
}

uint64_t nw_activity_get_reporting_strategy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[33];
    goto LABEL_3;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_activity_get_reporting_strategy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_activity_get_reporting_strategy";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_reporting_strategy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_activity_get_is_retry(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 140) & 1;
    goto LABEL_3;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_activity_get_is_retry";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_is_retry";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_activity_get_is_retry";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_is_retry";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_is_retry";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void __nw_activity_set_global_parent_block_invoke_61(uint64_t a1)
{
  if (global_parent && nw_activity_is_equal(*(void **)(a1 + 32), (void *)global_parent))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    unint64_t v2 = *(void **)(a1 + 32);
    objc_storeStrong((id *)&global_parent, v2);
  }
}

uint64_t nw_activity_has_global_parent()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __nw_activity_has_global_parent_block_invoke;
  v3[3] = &unk_1E52448D8;
  void v3[4] = &v5;
  xpc_object_t v0 = _Block_copy(v3);
  xpc_object_t v4 = v0;
  nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)&global_parent_lock, (uint64_t)&v4);

  uint64_t v1 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_183B04F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_activity_has_global_parent_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = global_parent != 0;
  return result;
}

void nw_activity_set_investigation_identifier(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_activity_set_investigation_identifier";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v6, &type, &v24)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_activity_set_investigation_identifier";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v6) {
          goto LABEL_5;
        }
LABEL_56:
        free(v6);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v21, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if ((*((unsigned char *)v3 + 140) & 4) != 0)
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_activity_set_investigation_identifier";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v6, &type, &v24)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v24)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v22, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v16 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v7, type);
    if (!v16)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v27 = "nw_activity_set_investigation_identifier";
      __int16 v28 = 2082;
      os_log_type_t v29 = v16;
      _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((*((unsigned char *)v3 + 140) & 8) != 0)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_activity_set_investigation_identifier";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v6, &type, &v24)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v24)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v23, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v16 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v7, type);
    if (!v16)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v27 = "nw_activity_set_investigation_identifier";
      __int16 v28 = 2082;
      os_log_type_t v29 = v16;
      _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v16);
    if (!v6) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  *((void *)v3 + 3) = a2;
LABEL_5:
}

uint64_t nw_activity_get_investigation_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 3);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_activity_get_investigation_identifier";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_activity_get_investigation_identifier";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_activity_has_investigation_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 3) != 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_activity_has_investigation_identifier";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_has_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_activity_has_investigation_identifier";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_has_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_has_investigation_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

xpc_object_t nw_activity_copy_xpc_token(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = (unsigned __int8 *)v1;
  if (v1)
  {
    if ((v1[140] & 4) != 0)
    {
      xpc_object_t v3 = xpc_uuid_create(v1 + 8);
      goto LABEL_4;
    }
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_activity_copy_xpc_token";
    __int16 v23 = 2082;
    char v24 = "Cannot copy xpc token before activation";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          __int16 v23 = 2082;
          char v24 = "Cannot copy xpc token before activation";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }
      else if (v19)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v22 = "nw_activity_copy_xpc_token";
            __int16 v23 = 2082;
            char v24 = "Cannot copy xpc token before activation";
            __int16 v25 = 2082;
            os_log_type_t v26 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          __int16 v23 = 2082;
          char v24 = "Cannot copy xpc token before activation";
          _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          __int16 v23 = 2082;
          char v24 = "Cannot copy xpc token before activation";
          _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_activity_copy_xpc_token";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v19)
      {
        BOOL v11 = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v22 = "nw_activity_copy_xpc_token";
            __int16 v23 = 2082;
            char v24 = v11;
            _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          goto LABEL_37;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_36:
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  xpc_object_t v3 = 0;
LABEL_4:

  return v3;
}

void sub_183B06040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_get_activation_time(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if ((*((unsigned char *)v1 + 140) & 4) != 0)
    {
      if ((*((unsigned char *)v1 + 140) & 2) == 0)
      {
        uint64_t v3 = *((void *)v1 + 4);
        goto LABEL_5;
      }
      BOOL v11 = __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_activity_get_activation_time";
      __int16 v28 = 2082;
      os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (__nwlog_fault(v6, &type, &v24))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v7 = __nwlog_obj();
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
            _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
          }
LABEL_53:

          goto LABEL_54;
        }
        if (!v24)
        {
          uint64_t v7 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
            _os_log_impl(&dword_1830D4000, v7, v23, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_53;
        }
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
            _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_53;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v27 = "nw_activity_get_activation_time";
          __int16 v28 = 2082;
          os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }
        goto LABEL_35;
      }
    }
    else
    {
      char v9 = __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_activity_get_activation_time";
      __int16 v28 = 2082;
      os_log_type_t v29 = "Cannot get activation time before activation";
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (__nwlog_fault(v6, &type, &v24))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v7 = __nwlog_obj();
          os_log_type_t v10 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time before activation";
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
          }
          goto LABEL_53;
        }
        if (!v24)
        {
          uint64_t v7 = __nwlog_obj();
          os_log_type_t v22 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time before activation";
            _os_log_impl(&dword_1830D4000, v7, v22, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_53;
        }
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time before activation";
            _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_53;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v27 = "nw_activity_get_activation_time";
          __int16 v28 = 2082;
          os_log_type_t v29 = "Cannot get activation time before activation";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }
LABEL_35:

        free(backtrace_string);
      }
    }
  }
  else
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_activity_get_activation_time";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v6, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_activity_get_activation_time";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v24)
      {
        BOOL v13 = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v7, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = v13;
            _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v13);
          goto LABEL_54;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_activity_get_activation_time";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_activity_get_activation_time";
          _os_log_impl(&dword_1830D4000, v7, v21, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_53;
    }
  }
LABEL_54:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_5:

  return v3;
}

void nw_activity_complete_with_reason_and_underlying_error(void *a1, uint32_t a2, int a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (v7)
  {
    nw_activity_complete_with_reason_and_underlying_error_string_internal(v7, a2, 0, a3, a4);
    goto LABEL_3;
  }
  char v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_activity_complete_with_reason_and_underlying_error";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_activity_complete_with_reason_and_underlying_error";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
LABEL_3:
}

void sub_183B06A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_activity_complete_with_reason_and_underlying_error_string(void *a1, uint32_t a2, uint64_t a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v10) {
          goto LABEL_4;
        }
LABEL_39:
        free(v10);
        goto LABEL_4;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a3)
  {
    nw_activity_complete_with_reason_and_underlying_error_string_internal(v7, a2, a3, 0, a4);
    goto LABEL_4;
  }
  BOOL v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446466;
  os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
  __int16 v27 = 2082;
  __int16 v28 = "underlying_error_domain_string must not be null";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
      __int16 v27 = 2082;
      __int16 v28 = "underlying_error_domain_string must not be null";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
      __int16 v27 = 2082;
      __int16 v28 = "underlying_error_domain_string must not be null";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_37;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
      __int16 v27 = 2082;
      __int16 v28 = "underlying_error_domain_string must not be null";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
    __int16 v27 = 2082;
    __int16 v28 = "underlying_error_domain_string must not be null";
    __int16 v29 = 2082;
    __int16 v30 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v18);
  if (v10) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183B06F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_activity_submit_metrics(uint64_t a1)
{
  id v1 = (void *)MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v1;
  id v7 = v3;
  os_log_type_t v8 = v7;
  if (!v6)
  {
    __int16 v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (!__nwlog_fault(v26, type, &v71)) {
      goto LABEL_105;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if ((_BYTE)v71)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v27 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      BOOL v35 = os_log_type_enabled(v27, type[0]);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v27, v34, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_105:
        if (!v26) {
          goto LABEL_40;
        }
LABEL_106:
        free(v26);
        goto LABEL_40;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v34, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v45, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_104:

    goto LABEL_105;
  }
  if (!v5)
  {
    __int16 v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (!__nwlog_fault(v26, type, &v71)) {
      goto LABEL_105;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v30 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null metric_name", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!(_BYTE)v71)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v46, "%{public}s called with null metric_name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    __int16 v36 = (char *)__nw_create_backtrace_string();
    __int16 v27 = __nwlog_obj();
    os_log_type_t v37 = type[0];
    BOOL v38 = os_log_type_enabled(v27, type[0]);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null metric_name, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v36;
      _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null metric_name, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_70;
  }
  if (!v7)
  {
    uint64_t v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (!__nwlog_fault(v26, type, &v71)) {
      goto LABEL_105;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s called with null metrics", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!(_BYTE)v71)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v47 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v47, "%{public}s called with null metrics, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    __int16 v36 = (char *)__nw_create_backtrace_string();
    __int16 v27 = __nwlog_obj();
    os_log_type_t v39 = type[0];
    BOOL v40 = os_log_type_enabled(v27, type[0]);
    if (!v36)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_1830D4000, v27, v39, "%{public}s called with null metrics, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v36;
      _os_log_impl(&dword_1830D4000, v27, v39, "%{public}s called with null metrics, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_70:

    free(v36);
    if (!v26) {
      goto LABEL_40;
    }
    goto LABEL_106;
  }
  *(void *)os_log_type_t type = 0;
  BOOL v76 = type;
  uint64_t v77 = 0x2020000000;
  char v78 = 1;
  uint64_t v71 = 0;
  uint32_t v72 = &v71;
  int v74 = 0;
  uint64_t v73 = 0x2020000000;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_activity_submit_metrics_block_invoke;
  aBlock[3] = &unk_1E5244950;
  char v9 = v6;
  os_log_type_t v67 = v9;
  BOOL v68 = type;
  os_log_type_t v69 = &v71;
  os_log_type_t v10 = _Block_copy(aBlock);
  uint32_t v70 = v10;
  nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(v6 + 20, (uint64_t)&v70);

  if (*((unsigned char *)v76 + 24))
  {
    if (*((_DWORD *)v72 + 6) >= 0xBu)
    {
      *(void *)__int16 v88 = 0;
      *(void *)&v88[8] = v88;
      int v89 = 0;
      *(void *)&v88[16] = 0x2020000000;
      v62[0] = MEMORY[0x1E4F143A8];
      v62[1] = 3221225472;
      v62[2] = __nw_activity_submit_metrics_block_invoke_86;
      v62[3] = &unk_1E524B978;
      BOOL v11 = v9;
      os_log_type_t v63 = v11;
      os_log_type_t v64 = v88;
      os_log_type_t v12 = _Block_copy(v62);
      uint32_t v65 = v12;
      nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(v6 + 20, (uint64_t)&v65);

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v13 = (id)gLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v14 = *(_DWORD *)(*(void *)&v88[8] + 24);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v11;
        __int16 v82 = 2080;
        __int16 v83 = v5;
        __int16 v84 = 1024;
        int v85 = v14;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s Activity %{public}@ exceeded max client metric count, dropping metric named %s (%u total quenched)", buf, 0x26u);
      }

      _Block_object_dispose(v88, 8);
      goto LABEL_39;
    }
    uint32_t v61 = 0;
    if (nw_activity_metric_object_is_valid(v8, 0, (const char **)&v61))
    {
      if (__nwlog_metrics_log::onceToken != -1) {
        dispatch_once(&__nwlog_metrics_log::onceToken, &__block_literal_global_44);
      }
      BOOL v15 = (id)gmetricsLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v5;
        __int16 v82 = 2082;
        __int16 v83 = v61;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}@ submitting metrics \"%{public}s\": %{public}s", buf, 0x20u);
      }

      if ((v9[4]._os_unfair_lock_opaque & 0x100) == 0 || !v61)
      {
        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
        }
        char v24 = (id)gactivityLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}@ not selected for reporting, metrics complete", buf, 0xCu);
        }

        goto LABEL_37;
      }
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
      }
      os_log_type_t v16 = (id)gactivityLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}@ selected for reporting, sending metric report to symptoms", buf, 0xCu);
      }

      bzero(buf, 0x1498uLL);
      BOOL v17 = (unsigned __int8 *)v61;
      BOOL v18 = v9;
      if (v17)
      {
        uint64_t v19 = 0;
        *(_OWORD *)buf = *(_OWORD *)&v18[2]._os_unfair_lock_opaque;
        while (1)
        {
          int v20 = v5[v19];
          buf[v19 + 16] = v20;
          if (!v20) {
            break;
          }
          if (++v19 == 255)
          {
            char v86 = 0;
            break;
          }
        }
        os_log_type_t v21 = &v87;
        uint64_t v22 = 4999;
        while (1)
        {
          int v23 = *v17;
          *(unsigned char *)os_log_type_t v21 = v23;
          if (!v23) {
            goto LABEL_29;
          }
          os_log_type_t v21 = (uint64_t *)((char *)v21 + 1);
          ++v17;
          if (!--v22)
          {
            *(unsigned char *)os_log_type_t v21 = 0;
            goto LABEL_29;
          }
        }
      }
      os_log_type_t v48 = v18;
      os_log_type_t v49 = __nwlog_obj();
      *(_DWORD *)__int16 v88 = 136446210;
      *(void *)&v88[4] = "nw_activity_fill_out_client_metric_report";
      char v50 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v80 = OS_LOG_TYPE_ERROR;
      char v79 = 0;
      if (__nwlog_fault(v50, &v80, &v79))
      {
        if (v80 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v51 = __nwlog_obj();
          os_log_type_t v52 = v80;
          if (os_log_type_enabled(v51, v80))
          {
            *(_DWORD *)__int16 v88 = 136446210;
            *(void *)&v88[4] = "nw_activity_fill_out_client_metric_report";
            _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s called with null client_metric", v88, 0xCu);
          }
        }
        else if (v79)
        {
          os_log_type_t v56 = (char *)__nw_create_backtrace_string();
          uint64_t v51 = __nwlog_obj();
          os_log_type_t v57 = v80;
          BOOL v58 = os_log_type_enabled(v51, v80);
          if (v56)
          {
            if (v58)
            {
              *(_DWORD *)__int16 v88 = 136446466;
              *(void *)&v88[4] = "nw_activity_fill_out_client_metric_report";
              *(_WORD *)&v88[12] = 2082;
              *(void *)&v88[14] = v56;
              _os_log_impl(&dword_1830D4000, v51, v57, "%{public}s called with null client_metric, dumping backtrace:%{public}s", v88, 0x16u);
            }

            free(v56);
            goto LABEL_126;
          }
          if (v58)
          {
            *(_DWORD *)__int16 v88 = 136446210;
            *(void *)&v88[4] = "nw_activity_fill_out_client_metric_report";
            _os_log_impl(&dword_1830D4000, v51, v57, "%{public}s called with null client_metric, no backtrace", v88, 0xCu);
          }
        }
        else
        {
          uint64_t v51 = __nwlog_obj();
          os_log_type_t v60 = v80;
          if (os_log_type_enabled(v51, v80))
          {
            *(_DWORD *)__int16 v88 = 136446210;
            *(void *)&v88[4] = "nw_activity_fill_out_client_metric_report";
            _os_log_impl(&dword_1830D4000, v51, v60, "%{public}s called with null client_metric, backtrace limit exceeded", v88, 0xCu);
          }
        }
      }
LABEL_126:
      if (v50) {
        free(v50);
      }
      BOOL v18 = v48;
LABEL_29:

      if (nw_connection_get_symptom_reporter_handle::once[0] != -1) {
        dispatch_once(nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_79705);
      }
      symptom_new();
      symptom_set_qualifier();
      symptom_set_additional_qualifier();
      symptom_send();
LABEL_37:
      if (v61) {
        free(v61);
      }
      goto LABEL_39;
    }
    os_log_type_t v41 = __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = "Invalid metric object submitted";
    BOOL v42 = (char *)_os_log_send_and_compose_impl();

    v88[0] = 16;
    os_log_type_t v80 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v42, v88, &v80))
    {
      if (v88[0] == 17)
      {
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v44 = v88[0];
        if (os_log_type_enabled(v43, (os_log_type_t)v88[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "Invalid metric object submitted";
          _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }
      else if (v80)
      {
        uint64_t v53 = (char *)__nw_create_backtrace_string();
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v54 = v88[0];
        BOOL v55 = os_log_type_enabled(v43, (os_log_type_t)v88[0]);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "Invalid metric object submitted";
            __int16 v82 = 2082;
            __int16 v83 = v53;
            _os_log_impl(&dword_1830D4000, v43, v54, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v53);
          goto LABEL_118;
        }
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "Invalid metric object submitted";
          _os_log_impl(&dword_1830D4000, v43, v54, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v59 = v88[0];
        if (os_log_type_enabled(v43, (os_log_type_t)v88[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "Invalid metric object submitted";
          _os_log_impl(&dword_1830D4000, v43, v59, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
      }
    }
LABEL_118:
    if (v42) {
      free(v42);
    }
    goto LABEL_37;
  }
LABEL_39:

  _Block_object_dispose(&v71, 8);
  _Block_object_dispose(type, 8);
LABEL_40:
}

void sub_183B07F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose((const void *)(v37 - 144), 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);

  _Unwind_Resume(a1);
}

void __nw_activity_submit_metrics_block_invoke_86(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(v2 + 48) + 1;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(v2 + 48) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      uint64_t v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 32) + 48);
        int v7 = 136446978;
        os_log_type_t v8 = "nw_activity_submit_metrics_block_invoke";
        __int16 v9 = 2082;
        os_log_type_t v10 = "activity->fragments_quenched";
        __int16 v11 = 2048;
        uint64_t v12 = 1;
        __int16 v13 = 2048;
        uint64_t v14 = v6;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v7, 0x2Au);
      }
    }
    *(_DWORD *)(*(void *)(a1 + 32) + 48) = -1;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 48);
}

void nw_activity_retrieve_metrics(void *a1, void *a2, void *a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v65 = "nw_activity_retrieve_metrics";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v63 = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v19, &v63, &v62)) {
      goto LABEL_87;
    }
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v21 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v62)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v20 = __nwlog_obj();
      os_log_type_t v27 = v63;
      BOOL v28 = os_log_type_enabled(v20, v63);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v65 = "nw_activity_retrieve_metrics";
          __int16 v66 = 2082;
          os_log_type_t v67 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_87:
        if (!v19) {
          goto LABEL_22;
        }
LABEL_88:
        free(v19);
        goto LABEL_22;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v20 = __nwlog_obj();
      os_log_type_t v44 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v44, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_86:

    goto LABEL_87;
  }
  if (!v6)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v65 = "nw_activity_retrieve_metrics";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v63 = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v19, &v63, &v62)) {
      goto LABEL_87;
    }
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v23 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null callback_queue", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v62)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v45 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v45, "%{public}s called with null callback_queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    __int16 v29 = (char *)__nw_create_backtrace_string();
    int v20 = __nwlog_obj();
    os_log_type_t v30 = v63;
    BOOL v31 = os_log_type_enabled(v20, v63);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null callback_queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      uint32_t v65 = "nw_activity_retrieve_metrics";
      __int16 v66 = 2082;
      os_log_type_t v67 = v29;
      _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null callback_queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  if (!v7)
  {
    char v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v65 = "nw_activity_retrieve_metrics";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v63 = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v19, &v63, &v62)) {
      goto LABEL_87;
    }
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v25 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null completion", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v62)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v46 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v46, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    __int16 v29 = (char *)__nw_create_backtrace_string();
    int v20 = __nwlog_obj();
    os_log_type_t v36 = v63;
    BOOL v37 = os_log_type_enabled(v20, v63);
    if (!v29)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_1830D4000, v20, v36, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      uint32_t v65 = "nw_activity_retrieve_metrics";
      __int16 v66 = 2082;
      os_log_type_t v67 = v29;
      _os_log_impl(&dword_1830D4000, v20, v36, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_57:

    free(v29);
    if (!v19) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
  }
  __int16 v9 = (id)gactivityLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint32_t v65 = v5;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}@ retrieving metrics", buf, 0xCu);
  }

  qos_class_t v10 = qos_class_self();
  if ((v5[140] & 2) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
    }
    uint64_t v15 = (id)gactivityLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      uint32_t v65 = v5;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}@ speculatively retrieving metrics", buf, 0xCu);
    }

    goto LABEL_21;
  }
  if ((v5[140] & 4) != 0)
  {
    if ((v5[140] & 8) == 0)
    {
      __int16 v11 = __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      uint32_t v65 = "nw_activity_retrieve_metrics";
      __int16 v66 = 2082;
      os_log_type_t v67 = "Cannot retrieve metrics before completion";
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v63 = OS_LOG_TYPE_ERROR;
      char v62 = 0;
      if (__nwlog_fault(v12, &v63, &v62))
      {
        if (v63 == OS_LOG_TYPE_FAULT)
        {
          __int16 v13 = __nwlog_obj();
          os_log_type_t v14 = v63;
          if (os_log_type_enabled(v13, v63))
          {
            *(_DWORD *)buf = 136446466;
            uint32_t v65 = "nw_activity_retrieve_metrics";
            __int16 v66 = 2082;
            os_log_type_t v67 = "Cannot retrieve metrics before completion";
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
          }
        }
        else if (v62)
        {
          os_log_type_t v41 = (char *)__nw_create_backtrace_string();
          __int16 v13 = __nwlog_obj();
          os_log_type_t v42 = v63;
          BOOL v43 = os_log_type_enabled(v13, v63);
          if (v41)
          {
            if (v43)
            {
              *(_DWORD *)buf = 136446722;
              uint32_t v65 = "nw_activity_retrieve_metrics";
              __int16 v66 = 2082;
              os_log_type_t v67 = "Cannot retrieve metrics before completion";
              __int16 v68 = 2082;
              os_log_type_t v69 = v41;
              _os_log_impl(&dword_1830D4000, v13, v42, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v41);
            goto LABEL_104;
          }
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            uint32_t v65 = "nw_activity_retrieve_metrics";
            __int16 v66 = 2082;
            os_log_type_t v67 = "Cannot retrieve metrics before completion";
            _os_log_impl(&dword_1830D4000, v13, v42, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          __int16 v13 = __nwlog_obj();
          os_log_type_t v48 = v63;
          if (os_log_type_enabled(v13, v63))
          {
            *(_DWORD *)buf = 136446466;
            uint32_t v65 = "nw_activity_retrieve_metrics";
            __int16 v66 = 2082;
            os_log_type_t v67 = "Cannot retrieve metrics before completion";
            _os_log_impl(&dword_1830D4000, v13, v48, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
        }
      }
LABEL_104:
      if (v12) {
        free(v12);
      }
      v58[0] = MEMORY[0x1E4F143A8];
      v58[1] = 3221225472;
      v58[2] = __nw_activity_retrieve_metrics_block_invoke_91;
      v58[3] = &unk_1E524AFA8;
      id v59 = v8;
      uint64_t v51 = v6;
      dispatch_block_t v52 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v10, 0, v58);
      dispatch_async(v51, v52);

      goto LABEL_22;
    }
LABEL_21:
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_activity_retrieve_metrics_block_invoke_2;
    block[3] = &unk_1E52449A0;
    os_log_type_t v16 = v6;
    os_log_type_t v54 = v16;
    qos_class_t v57 = v10;
    id v56 = v8;
    BOOL v55 = v5;
    dispatch_block_t v17 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v10, 0, block);
    dispatch_async(v16, v17);

    goto LABEL_22;
  }
  os_log_type_t v32 = __nwlog_obj();
  *(_DWORD *)buf = 136446466;
  uint32_t v65 = "nw_activity_retrieve_metrics";
  __int16 v66 = 2082;
  os_log_type_t v67 = "Cannot retrieve metrics before activation";
  char v33 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v63 = OS_LOG_TYPE_ERROR;
  char v62 = 0;
  if (__nwlog_fault(v33, &v63, &v62))
  {
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v34 = __nwlog_obj();
      os_log_type_t v35 = v63;
      if (os_log_type_enabled(v34, v63))
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        __int16 v66 = 2082;
        os_log_type_t v67 = "Cannot retrieve metrics before activation";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
      }
    }
    else if (v62)
    {
      BOOL v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v34 = __nwlog_obj();
      os_log_type_t v39 = v63;
      BOOL v40 = os_log_type_enabled(v34, v63);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446722;
          uint32_t v65 = "nw_activity_retrieve_metrics";
          __int16 v66 = 2082;
          os_log_type_t v67 = "Cannot retrieve metrics before activation";
          __int16 v68 = 2082;
          os_log_type_t v69 = v38;
          _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v38);
        goto LABEL_98;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        __int16 v66 = 2082;
        os_log_type_t v67 = "Cannot retrieve metrics before activation";
        _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      os_log_type_t v34 = __nwlog_obj();
      os_log_type_t v47 = v63;
      if (os_log_type_enabled(v34, v63))
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v65 = "nw_activity_retrieve_metrics";
        __int16 v66 = 2082;
        os_log_type_t v67 = "Cannot retrieve metrics before activation";
        _os_log_impl(&dword_1830D4000, v34, v47, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
    }
  }
LABEL_98:
  if (v33) {
    free(v33);
  }
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 3221225472;
  v60[2] = __nw_activity_retrieve_metrics_block_invoke;
  v60[3] = &unk_1E524AFA8;
  id v61 = v8;
  os_log_type_t v49 = v6;
  dispatch_block_t v50 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v10, 0, v60);
  dispatch_async(v49, v50);

LABEL_22:
}

void sub_183B08F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_activity_retrieve_metrics_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
}

void sub_183B08FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_activity_retrieve_metrics_block_invoke_91(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
}

void sub_183B09074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_activity_retrieve_metrics_block_invoke_2(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  __int16 v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = __Block_byref_object_copy__59033;
  os_log_type_t v16 = __Block_byref_object_dispose__59034;
  id v17 = 0;
  gotLoadHelper_x20__OBJC_CLASS___NWActivityXPC(COERCE_DOUBLE(0x3032000000));
  if (objc_opt_class())
  {
    uint64_t v3 = [objc_alloc(*(Class *)(v1 + 3656)) initWithQueue:*(void *)(a1 + 32) qosClass:*(unsigned int *)(a1 + 56)];
    uint64_t v4 = (void *)v13[5];
    v13[5] = v3;
  }
  if (v13[5])
  {
    long long v18 = 0uLL;
    nw_activity_get_token(*(void **)(a1 + 40), &v18);
    uint64_t v5 = (void *)v13[5];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __nw_activity_retrieve_metrics_block_invoke_93;
    v8[3] = &unk_1E5244978;
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    __int16 v11 = &v12;
    [v5 retrieveMetricsForActivity:&v18 completion:v8];
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 20);
    (*(void (**)(uint64_t, void, _DWORD *, uint64_t))(v6 + 16))(v6, 0, v7, 1);
  }
  _Block_object_dispose(&v12, 8);
}

void sub_183B09248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__59033(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__59034(uint64_t a1)
{
}

void __nw_activity_retrieve_metrics_block_invoke_93(void *a1, void *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = v5;
  if (v5 && !a3 && [v5 count])
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
    }
    id v7 = (id)gactivityLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = a1[4];
      int v21 = 138412546;
      uint64_t v22 = v8;
      __int16 v23 = 2112;
      char v24 = v6;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%@ got results: %@", (uint8_t *)&v21, 0x16u);
    }

    for (unint64_t i = 0; i < [v6 count]; ++i)
    {
      [v6 count];
      id v10 = [v6 objectAtIndex:i];
      __int16 v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      (*(void (**)(void))(a1[5] + 16))();
    }
    uint64_t v18 = a1[6];
    os_log_type_t v16 = a1 + 6;
    [*(id *)(*(void *)(v18 + 8) + 40) cancel];
  }
  else
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
    }
    uint64_t v12 = (id)gactivityLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = a1[4];
      int v21 = 138412802;
      uint64_t v22 = v13;
      __int16 v23 = 2112;
      char v24 = v6;
      __int16 v25 = 1024;
      int v26 = a3;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%@ failed lookup, results: %@, error: %{errno}d", (uint8_t *)&v21, 0x1Cu);
    }

    uint64_t v14 = a1[5];
    posix_error = nw_error_create_posix_error(a3);
    (*(void (**)(uint64_t, void, _DWORD *, uint64_t))(v14 + 16))(v14, 0, posix_error, 1);

    uint64_t v17 = a1[6];
    os_log_type_t v16 = a1 + 6;
    [*(id *)(*(void *)(v17 + 8) + 40) cancel];
  }
  uint64_t v19 = *(void *)(*v16 + 8);
  int v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_183B09530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_activity_label_to_string(int a1, int a2)
{
  switch(a1)
  {
    case 11:
      if ((a2 - 1) >= 9) {
        goto LABEL_103;
      }
      return off_1E5246050[a2 - 1];
    case 12:
      if ((a2 - 1) >= 4) {
        goto LABEL_103;
      }
      return off_1E5246098[a2 - 1];
    case 13:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      return off_1E52460B8[a2 - 1];
    case 14:
      if ((a2 - 1) >= 0xD) {
        goto LABEL_103;
      }
      return off_1E52460D0[a2 - 1];
    case 15:
      if ((a2 - 1) >= 0xA) {
        goto LABEL_103;
      }
      return off_1E5246138[a2 - 1];
    case 16:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      return off_1E5246188[a2 - 1];
    case 17:
      if ((a2 - 1) >= 5) {
        goto LABEL_103;
      }
      return off_1E52461A0[a2 - 1];
    case 18:
      if ((a2 - 1) >= 0x12) {
        goto LABEL_103;
      }
      return off_1E52461C8[a2 - 1];
    case 19:
    case 20:
    case 56:
      if (a2 == 1) {
        return "invalid_max";
      }
      else {
        return "invalid";
      }
    case 21:
      if ((a2 - 1) >= 0x18) {
        goto LABEL_103;
      }
      return off_1E5246258[a2 - 1];
    case 22:
      if ((a2 - 1) >= 7) {
        goto LABEL_103;
      }
      return off_1E5246318[a2 - 1];
    case 23:
      if ((a2 - 1) >= 0x19) {
        goto LABEL_103;
      }
      return off_1E5246350[a2 - 1];
    case 24:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      return off_1E5246418[a2 - 1];
    case 25:
    case 26:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      return off_1E5246430[a2 - 1];
    case 27:
    case 28:
    case 29:
      if ((a2 - 1) >= 0x43) {
        goto LABEL_103;
      }
      return off_1E5246448[a2 - 1];
    case 30:
      if ((a2 - 1) >= 5) {
        goto LABEL_103;
      }
      return off_1E5246660[a2 - 1];
    case 31:
      uint64_t v3 = "invalid";
      uint64_t v4 = "captive_probe";
      goto LABEL_64;
    case 32:
      if ((a2 - 1) >= 0xD) {
        goto LABEL_103;
      }
      return off_1E5246688[a2 - 1];
    case 33:
      if ((a2 - 1) >= 4) {
        goto LABEL_103;
      }
      return off_1E52466F0[a2 - 1];
    case 34:
      if ((a2 - 1) >= 0xC) {
        goto LABEL_103;
      }
      return off_1E5246710[a2 - 1];
    case 35:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      return off_1E5246770[a2 - 1];
    case 36:
      if ((a2 - 1) >= 0xB) {
        goto LABEL_103;
      }
      return off_1E5246788[a2 - 1];
    case 37:
      if ((a2 - 1) >= 0xE) {
        goto LABEL_103;
      }
      return off_1E52467E0[a2 - 1];
    case 38:
      if ((a2 - 1) >= 4) {
        goto LABEL_103;
      }
      return off_1E5246850[a2 - 1];
    case 39:
      uint64_t v3 = "invalid";
      uint64_t v4 = "session";
      goto LABEL_64;
    case 40:
      if ((a2 - 1) >= 8) {
        goto LABEL_103;
      }
      return off_1E5246870[a2 - 1];
    case 41:
      if ((a2 - 1) >= 7) {
        goto LABEL_103;
      }
      return off_1E52468B0[a2 - 1];
    case 42:
      if ((a2 - 1) >= 4) {
        goto LABEL_103;
      }
      return off_1E52468E8[a2 - 1];
    case 43:
      if ((a2 - 1) >= 0x11) {
        goto LABEL_103;
      }
      return off_1E5246908[a2 - 1];
    case 44:
      if ((a2 - 1) >= 8) {
        goto LABEL_103;
      }
      return off_1E5246990[a2 - 1];
    case 45:
      if ((a2 - 1) >= 0xA) {
        goto LABEL_103;
      }
      return off_1E52469D0[a2 - 1];
    case 46:
      uint64_t v3 = "invalid";
      uint64_t v4 = "stereo_pair_volume_sync";
LABEL_64:
      if (a2 == 1) {
        uint64_t v3 = v4;
      }
      if (a2 == 2) {
        return "invalid_max";
      }
      else {
        return v3;
      }
    case 47:
      if ((a2 - 1) >= 0xE) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246A20[a2 - 1];
      break;
    case 48:
      if ((a2 - 1) >= 4) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246A90[a2 - 1];
      break;
    case 49:
      if ((a2 - 1) >= 0xB) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246AB0[a2 - 1];
      break;
    case 50:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246B08[a2 - 1];
      break;
    case 51:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246B20[a2 - 1];
      break;
    case 52:
      if ((a2 - 1) >= 8) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246B38[a2 - 1];
      break;
    case 53:
      if ((a2 - 1) >= 6) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246B78[a2 - 1];
      break;
    case 54:
      if ((a2 - 1) >= 5) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246BA8[a2 - 1];
      break;
    case 55:
      if ((a2 - 1) >= 5) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246BD0[a2 - 1];
      break;
    case 57:
      if ((a2 - 1) >= 3) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246BF8[a2 - 1];
      break;
    case 58:
      if ((a2 - 1) >= 0x16) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246C10[a2 - 1];
      break;
    case 59:
      if ((a2 - 1) >= 5) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246CC0[a2 - 1];
      break;
    case 60:
      if ((a2 - 1) >= 0xC) {
        goto LABEL_103;
      }
      uint64_t result = off_1E5246CE8[a2 - 1];
      break;
    case 61:
      if ((a2 - 1) >= 4) {
LABEL_103:
      }
        uint64_t result = "invalid";
      else {
        uint64_t result = off_1E5246D48[a2 - 1];
      }
      break;
    default:
      if ((a1 - 1) >= 0xA) {
        id v5 = "invalid";
      }
      else {
        id v5 = "reserved";
      }
      if ((a1 - 900) >= 0x64) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = "experimental";
      }
      break;
  }
  return result;
}

BOOL nw_activity_copy_redacted_description(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_activity_copy_redacted_description";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_activity_copy_redacted_description";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        id v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_activity_copy_redacted_description";
            __int16 v28 = 2082;
            uint64_t v29 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_activity_copy_redacted_description";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v10 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_activity_copy_redacted_description";
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_29:
    if (v9) {
      free(v9);
    }
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v3 = [v1 redactedDescription];
  size_t v4 = [v3 length];
  if (!v4)
  {
    uint64_t v12 = __nwlog_obj();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_activity_copy_redacted_description";
    LODWORD(v23) = 12;
    uint64_t v22 = buf;
    uint64_t v13 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v13);
    if (result) {
      goto LABEL_32;
    }
    free(v13);
  }
  id v5 = (const void *)objc_msgSend(v3, "UTF8String", v22, v23);
  if (v4 == -1)
  {
    uint64_t v14 = __nwlog_obj();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "strict_calloc";
    uint64_t v15 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v15);
    if (result) {
      goto LABEL_32;
    }
    free(v15);
  }
  uint64_t v6 = malloc_type_calloc(1uLL, v4 + 1, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_5:
    memcpy(v6, v5, v4);

LABEL_6:
    return (BOOL)v6;
  }
  os_log_type_t v16 = __nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v27 = "strict_calloc";
  __int16 v28 = 2048;
  uint64_t v29 = 1;
  __int16 v30 = 2048;
  size_t v31 = v4 + 1;
  uint64_t v17 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    goto LABEL_5;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_183B0A06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

long long *nw_path_ipv6_default_address()
{
  return &xmmword_183D5CF50;
}

long long *nw_path_ipv4_default_address()
{
  return &xmmword_183E23448;
}

uint64_t nw_path_is_endpoint_localhost(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1) {
    goto LABEL_20;
  }
  uint64_t v3 = v1;
  int v4 = [v3 type];

  if (v4 == 1)
  {
    nw_endpoint_t address = nw_endpoint_get_address(v3);
    int sa_family = address->sa_family;
    if (sa_family == 2)
    {
      if (address->sa_len < 0x10u) {
        goto LABEL_20;
      }
      int v10 = *(_DWORD *)&address->sa_data[2];
      int v11 = 16777343;
    }
    else
    {
      if (sa_family != 30
        || address->sa_len < 0x1Cu
        || *(_DWORD *)&address->sa_data[6]
        || *(_DWORD *)&address->sa_data[10]
        || *(_DWORD *)&address[1].sa_len)
      {
        goto LABEL_20;
      }
      int v10 = *(_DWORD *)&address[1].sa_data[2];
      int v11 = 0x1000000;
    }
    BOOL v7 = v10 == v11;
    goto LABEL_17;
  }
  if (v4 != 2)
  {
LABEL_20:
    uint64_t v12 = 0;
    goto LABEL_21;
  }
  id v5 = v3;
  uint64_t v6 = (const char *)[v5 hostname];

  if (!strcasecmp("localhost", v6))
  {
    uint64_t v12 = 1;
    goto LABEL_21;
  }
  BOOL v7 = strcasecmp("localhost.", v6) == 0;
LABEL_17:
  uint64_t v12 = v7;
LABEL_21:

  return v12;
}

void sub_183B0A1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_evaluator_add_endpoint_to_necp_message_block_invoke(uint64_t a1, int a2, uint64_t a3, void *__src, size_t a5)
{
  size_t v5 = *(unsigned __int8 *)(a1 + 40) - a3 - 8;
  BOOL v6 = v5 > a5;
  if (v5 >= a5) {
    size_t v5 = a5;
  }
  BOOL v7 = (void *)(*(void *)(a1 + 32) + a3 + 8);
  uint64_t v8 = !v6;
  memcpy(v7, __src, v5);
  return v8;
}

uint64_t __Block_byref_object_copy__59460(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__59461(uint64_t a1)
{
}

uint64_t nw_path_struct_size_for_browse_descriptor(void *a1, unint64_t *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = nw_browse_descriptor_get_type(v3);
  if (v4 == 2)
  {
    application_service_name = nw_browse_descriptor_get_application_service_name(v3);
    uint64_t bundle_id = nw_browse_descriptor_get_bundle_id(v3);
    uint64_t v13 = (const char *)bundle_id;
    if (application_service_name)
    {
      size_t v14 = strlen(application_service_name) + 23;
      if (v13)
      {
LABEL_12:
        size_t v15 = strlen(v13) + 1;
LABEL_26:
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000;
        *(void *)&unsigned char buf[24] = 0;
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = ___ZL41nw_path_struct_size_for_browse_descriptorPU34objcproto23OS_nw_browse_descriptor8NSObjectPm_block_invoke;
        v33[3] = &unk_1E5246E30;
        void v33[4] = buf;
        nw_browse_descriptor_enumerate_device_filters(v3, v33);
        unint64_t v23 = v14 + v15 + *(void *)(*(void *)&buf[8] + 24);
        if (a2) {
          *a2 = v23;
        }
        if (v23 <= 0x1C) {
          uint64_t v10 = 28;
        }
        else {
          uint64_t v10 = v23;
        }
        _Block_object_dispose(buf, 8);
        goto LABEL_55;
      }
    }
    else
    {
      size_t v14 = 23;
      if (bundle_id) {
        goto LABEL_12;
      }
    }
    size_t v15 = 1;
    goto LABEL_26;
  }
  if (v4 == 1)
  {
    bonjour_service_os_log_type_t type = nw_browse_descriptor_get_bonjour_service_type(v3);
    bonjour_service_domain = nw_browse_descriptor_get_bonjour_service_domain(v3);
    BOOL v7 = bonjour_service_domain;
    if (bonjour_service_type)
    {
      size_t v8 = strlen(bonjour_service_type) + 9;
      if (v7) {
        goto LABEL_5;
      }
    }
    else
    {
      size_t v8 = 9;
      if (bonjour_service_domain)
      {
LABEL_5:
        unint64_t v9 = strlen(v7) + 1 + v8;
        if (!a2) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    unint64_t v9 = v8 + 1;
    if (!a2)
    {
LABEL_7:
      if (v9 <= 0x1C) {
        uint64_t v10 = 28;
      }
      else {
        uint64_t v10 = v9;
      }
      goto LABEL_55;
    }
LABEL_6:
    *a2 = v9;
    goto LABEL_7;
  }
  if (!nw_browse_descriptor_is_custom_type(v3))
  {
LABEL_54:
    uint64_t v10 = 28;
    goto LABEL_55;
  }
  os_log_type_t v16 = nw_browse_descriptor_copy_custom_data(v3);
  uint64_t v17 = v16;
  if (!v16)
  {
LABEL_53:

    goto LABEL_54;
  }
  size_t size = dispatch_data_get_size(v16);
  if (size >= 0x401)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_struct_size_for_browse_descriptor";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1024;
    BOOL v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v20, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v21 = (id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_struct_size_for_browse_descriptor";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1024;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s Custom data size must be no larger than %d", buf, 0x12u);
        }
      }
      else if (v31)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_struct_size_for_browse_descriptor";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1024;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s Custom data size must be no larger than %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_51;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_struct_size_for_browse_descriptor";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1024;
          _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s Custom data size must be no larger than %d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_struct_size_for_browse_descriptor";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1024;
          _os_log_impl(&dword_1830D4000, v21, v29, "%{public}s Custom data size must be no larger than %d, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
LABEL_51:
    if (v20) {
      free(v20);
    }
    goto LABEL_53;
  }
  char v24 = -9;
  if (size < 0xF7) {
    char v24 = size;
  }
  unsigned __int8 v25 = v24 + 8;
  if (a2) {
    *a2 = v25;
  }
  if (v25 <= 0x1Cu) {
    uint64_t v10 = 28;
  }
  else {
    uint64_t v10 = v25;
  }

LABEL_55:
  return v10;
}

uint64_t nw_path_struct_size_for_advertise_descriptor(void *a1, unint64_t *a2)
{
  uint64_t v3 = a1;
  int type = nw_advertise_descriptor_get_type(v3);
  if (type != 2)
  {
    if (type != 1)
    {
      uint64_t v16 = 28;
      goto LABEL_22;
    }
    bonjour_name = (const char *)nw_advertise_descriptor_get_bonjour_name(v3);
    bonjour_int type = (const char *)nw_advertise_descriptor_get_bonjour_type(v3);
    bonjour_domain = (const char *)nw_advertise_descriptor_get_bonjour_domain(v3);
    if (bonjour_name)
    {
      size_t v8 = strlen(bonjour_name) + 9;
      if (bonjour_type) {
        goto LABEL_5;
      }
    }
    else
    {
      size_t v8 = 9;
      if (bonjour_type)
      {
LABEL_5:
        size_t v9 = strlen(bonjour_type) + 1;
        if (bonjour_domain)
        {
LABEL_6:
          size_t v10 = strlen(bonjour_domain) + 1;
          goto LABEL_15;
        }
LABEL_14:
        size_t v10 = 1;
LABEL_15:
        uint64_t v20 = 0;
        uint64_t txt_record = nw_advertise_descriptor_get_txt_record(v3, &v20);
        uint64_t v18 = v20;
        if (!txt_record) {
          uint64_t v18 = 0;
        }
        unint64_t v15 = v9 + v8 + v10 + v18;
        if (!a2) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    size_t v9 = 1;
    if (bonjour_domain) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  application_service_name = nw_advertise_descriptor_get_application_service_name(v3);
  uint64_t bundle_id = nw_advertise_descriptor_get_bundle_id(v3);
  uint64_t v13 = (const char *)bundle_id;
  if (application_service_name)
  {
    size_t v14 = strlen(application_service_name) + 17;
    if (v13) {
      goto LABEL_9;
    }
  }
  else
  {
    size_t v14 = 17;
    if (bundle_id)
    {
LABEL_9:
      unint64_t v15 = v14 + strlen(v13) + 1;
      if (!a2) {
        goto LABEL_19;
      }
LABEL_18:
      *a2 = v15;
      goto LABEL_19;
    }
  }
  unint64_t v15 = v14 + 1;
  if (a2) {
    goto LABEL_18;
  }
LABEL_19:
  if (v15 <= 0x1C) {
    uint64_t v16 = 28;
  }
  else {
    uint64_t v16 = v15;
  }
LABEL_22:

  return v16;
}

uint64_t __nw_path_create_necp_parameters_block_invoke_2(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 73;
  return 1;
}

uint64_t __nw_path_create_necp_parameters_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  unsigned int length = xpc_data_get_length(v4);
  bytes_ptr = xpc_data_get_bytes_ptr(v4);
  unint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v7)
  {
    id v20 = v4;
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_necp_append_tlv";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v22, &type, &v51)) {
      goto LABEL_86;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }
    else if (v51)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v54 = "nw_necp_append_tlv";
          __int16 v55 = 2082;
          *(void *)id v56 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_86:
        if (!v22)
        {
LABEL_88:
          unint64_t v14 = 0;
          id v4 = v20;
          goto LABEL_29;
        }
LABEL_87:
        free(v22);
        goto LABEL_88;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v23, v44, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_85:

    goto LABEL_86;
  }
  unint64_t v8 = *(void *)(a1 + 40);
  if (!v8)
  {
    id v20 = v4;
    unsigned __int8 v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_necp_append_tlv";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v22, &type, &v51)) {
      goto LABEL_86;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null beyond", buf, 0xCu);
      }
    }
    else if (v51)
    {
      os_log_type_t v34 = (char *)__nw_create_backtrace_string();
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v23, type);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v54 = "nw_necp_append_tlv";
          __int16 v55 = 2082;
          *(void *)id v56 = v34;
          _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        if (!v22) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v23, v45, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_85;
  }
  if (v7 < v8)
  {
    unint64_t v9 = length + 5;
    if (v8 - v7 < v9)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      *(_DWORD *)buf = 136447490;
      os_log_type_t v54 = "nw_necp_append_tlv";
      __int16 v55 = 2048;
      *(void *)id v56 = v7;
      *(_WORD *)&v56[8] = 2048;
      *(void *)qos_class_t v57 = length + 5;
      *(_WORD *)&v57[8] = 2048;
      *(void *)BOOL v58 = v8;
      *(_WORD *)&v58[8] = 1024;
      *(_DWORD *)id v59 = 222;
      *(_WORD *)&void v59[4] = 1024;
      *(_DWORD *)&v59[6] = length;
      int v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (__nwlog_fault(v11, &type, &v51))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v12 = (id)gLogObj;
          os_log_type_t v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447490;
            os_log_type_t v54 = "nw_necp_append_tlv";
            __int16 v55 = 2048;
            *(void *)id v56 = v7;
            *(_WORD *)&v56[8] = 2048;
            *(void *)qos_class_t v57 = length + 5;
            *(_WORD *)&v57[8] = 2048;
            *(void *)BOOL v58 = v8;
            *(_WORD *)&v58[8] = 1024;
            *(_DWORD *)id v59 = 222;
            *(_WORD *)&void v59[4] = 1024;
            *(_DWORD *)&v59[6] = length;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
          }
        }
        else if (v51)
        {
          unint64_t v15 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v12 = (id)gLogObj;
          os_log_type_t v16 = type;
          BOOL v17 = os_log_type_enabled(v12, type);
          if (v15)
          {
            if (v17)
            {
              *(_DWORD *)buf = 136447746;
              os_log_type_t v54 = "nw_necp_append_tlv";
              __int16 v55 = 2048;
              *(void *)id v56 = v7;
              *(_WORD *)&v56[8] = 2048;
              *(void *)qos_class_t v57 = length + 5;
              *(_WORD *)&v57[8] = 2048;
              *(void *)BOOL v58 = v8;
              *(_WORD *)&v58[8] = 1024;
              *(_DWORD *)id v59 = 222;
              *(_WORD *)&void v59[4] = 1024;
              *(_DWORD *)&v59[6] = length;
              __int16 v60 = 2082;
              id v61 = v15;
              _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
            }

            free(v15);
            if (!v11) {
              goto LABEL_28;
            }
            goto LABEL_27;
          }
          if (v17)
          {
            *(_DWORD *)buf = 136447490;
            os_log_type_t v54 = "nw_necp_append_tlv";
            __int16 v55 = 2048;
            *(void *)id v56 = v7;
            *(_WORD *)&v56[8] = 2048;
            *(void *)qos_class_t v57 = length + 5;
            *(_WORD *)&v57[8] = 2048;
            *(void *)BOOL v58 = v8;
            *(_WORD *)&v58[8] = 1024;
            *(_DWORD *)id v59 = 222;
            *(_WORD *)&void v59[4] = 1024;
            *(_DWORD *)&v59[6] = length;
            _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v12 = (id)gLogObj;
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447490;
            os_log_type_t v54 = "nw_necp_append_tlv";
            __int16 v55 = 2048;
            *(void *)id v56 = v7;
            *(_WORD *)&v56[8] = 2048;
            *(void *)qos_class_t v57 = length + 5;
            *(_WORD *)&v57[8] = 2048;
            *(void *)BOOL v58 = v8;
            *(_WORD *)&v58[8] = 1024;
            *(_DWORD *)id v59 = 222;
            *(_WORD *)&void v59[4] = 1024;
            *(_DWORD *)&v59[6] = length;
            _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
          }
        }
      }
      if (!v11)
      {
LABEL_28:
        unint64_t v14 = 0;
        goto LABEL_29;
      }
LABEL_27:
      free(v11);
      goto LABEL_28;
    }
    *(unsigned char *)unint64_t v7 = -34;
    *(_DWORD *)(v7 + 1) = length;
    if (!length) {
      goto LABEL_13;
    }
    if (bytes_ptr)
    {
      memcpy((void *)(v7 + 5), bytes_ptr, length);
LABEL_13:
      unint64_t v14 = v7 + v9;
      goto LABEL_29;
    }
    BOOL v40 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    os_log_type_t v54 = "nw_necp_append_tlv";
    __int16 v55 = 1024;
    *(_DWORD *)id v56 = 222;
    *(_WORD *)&void v56[4] = 1024;
    *(_DWORD *)&v56[6] = length;
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v41, &type, &v51)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v54 = "nw_necp_append_tlv";
        __int16 v55 = 1024;
        *(_DWORD *)id v56 = 222;
        *(_WORD *)&void v56[4] = 1024;
        *(_DWORD *)&v56[6] = length;
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
      }
    }
    else if (v51)
    {
      os_log_type_t v47 = (char *)__nw_create_backtrace_string();
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v42, type);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v54 = "nw_necp_append_tlv";
          __int16 v55 = 1024;
          *(_DWORD *)id v56 = 222;
          *(_WORD *)&void v56[4] = 1024;
          *(_DWORD *)&v56[6] = length;
          *(_WORD *)qos_class_t v57 = 2082;
          *(void *)&v57[2] = v47;
          _os_log_impl(&dword_1830D4000, v42, v48, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v47);
        goto LABEL_101;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v54 = "nw_necp_append_tlv";
        __int16 v55 = 1024;
        *(_DWORD *)id v56 = 222;
        *(_WORD *)&void v56[4] = 1024;
        *(_DWORD *)&v56[6] = length;
        _os_log_impl(&dword_1830D4000, v42, v48, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
      }
    }
    else
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v54 = "nw_necp_append_tlv";
        __int16 v55 = 1024;
        *(_DWORD *)id v56 = 222;
        *(_WORD *)&void v56[4] = 1024;
        *(_DWORD *)&v56[6] = length;
        _os_log_impl(&dword_1830D4000, v42, v50, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
      }
    }

LABEL_101:
    if (v41) {
      free(v41);
    }
    unint64_t v14 = 0;
    goto LABEL_29;
  }
  os_log_type_t v27 = __nwlog_obj();
  *(_DWORD *)buf = 136447234;
  os_log_type_t v54 = "nw_necp_append_tlv";
  __int16 v55 = 2048;
  *(void *)id v56 = v7;
  *(_WORD *)&v56[8] = 2048;
  *(void *)qos_class_t v57 = v8;
  *(_WORD *)&v57[8] = 1024;
  *(_DWORD *)BOOL v58 = 222;
  *(_WORD *)&void v58[4] = 1024;
  *(_DWORD *)&v58[6] = length;
  BOOL v28 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (__nwlog_fault(v28, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v54 = "nw_necp_append_tlv";
        __int16 v55 = 2048;
        *(void *)id v56 = v7;
        *(_WORD *)&v56[8] = 2048;
        *(void *)qos_class_t v57 = v8;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)BOOL v58 = 222;
        *(_WORD *)&void v58[4] = 1024;
        *(_DWORD *)&v58[6] = length;
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
    }
    else if (v51)
    {
      BOOL v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v29, type);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136447490;
          os_log_type_t v54 = "nw_necp_append_tlv";
          __int16 v55 = 2048;
          *(void *)id v56 = v7;
          *(_WORD *)&v56[8] = 2048;
          *(void *)qos_class_t v57 = v8;
          *(_WORD *)&v57[8] = 1024;
          *(_DWORD *)BOOL v58 = 222;
          *(_WORD *)&void v58[4] = 1024;
          *(_DWORD *)&v58[6] = length;
          *(_WORD *)id v59 = 2082;
          *(void *)&v59[2] = v37;
          _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
        }

        free(v37);
        goto LABEL_92;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v54 = "nw_necp_append_tlv";
        __int16 v55 = 2048;
        *(void *)id v56 = v7;
        *(_WORD *)&v56[8] = 2048;
        *(void *)qos_class_t v57 = v8;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)BOOL v58 = 222;
        *(_WORD *)&void v58[4] = 1024;
        *(_DWORD *)&v58[6] = length;
        _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
    }
    else
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v54 = "nw_necp_append_tlv";
        __int16 v55 = 2048;
        *(void *)id v56 = v7;
        *(_WORD *)&v56[8] = 2048;
        *(void *)qos_class_t v57 = v8;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)BOOL v58 = 222;
        *(_WORD *)&void v58[4] = 1024;
        *(_DWORD *)&v58[6] = length;
        _os_log_impl(&dword_1830D4000, v29, v46, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
    }
  }
LABEL_92:
  if (v28) {
    free(v28);
  }
  unint64_t v14 = 0;
LABEL_29:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14;

  return 1;
}

void sub_183B0B724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL55nw_path_evaluator_add_browse_descriptor_to_necp_messagePU34objcproto23OS_nw_browse_descriptor8NSObjecthPhPKh_block_invoke(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s) + 1;
  memcpy((void *)(*(void *)(a1 + 40) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8), __s, v4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v4;
  return 1;
}

uint64_t ___ZL55nw_path_evaluator_add_browse_descriptor_to_necp_messagePU34objcproto23OS_nw_browse_descriptor8NSObjecthPhPKh_block_invoke_28(uint64_t a1, int a2, uint64_t a3, void *__src, size_t a5)
{
  size_t v5 = *(unsigned __int8 *)(a1 + 40) - a3 - 8;
  BOOL v6 = v5 > a5;
  if (v5 >= a5) {
    size_t v5 = a5;
  }
  unint64_t v7 = (void *)(*(void *)(a1 + 32) + a3 + 8);
  uint64_t v8 = !v6;
  memcpy(v7, __src, v5);
  return v8;
}

BOOL __nw_path_create_necp_parameters_block_invoke_5(uint64_t a1, size_t __n, __int16 a3, void *__src, const void *a5)
{
  __int16 v7 = __n;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  long long v43 = 0u;
  long long v44 = 0u;
  long long __dst = 0u;
  long long v42 = 0u;
  size_t v9 = __n;
  memcpy(&v43, __src, __n);
  memcpy(&__dst, a5, v9);
  unint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v10)
  {
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_necp_append_tlv";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v13, &type, &v39)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null tlv_start";
LABEL_62:
      BOOL v36 = v14;
      os_log_type_t v37 = v28;
      uint32_t v38 = 12;
LABEL_66:
      _os_log_impl(&dword_1830D4000, v36, v37, v29, buf, v38);
      goto LABEL_67;
    }
    if (!v39)
    {
      unint64_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null tlv_start, backtrace limit exceeded";
      goto LABEL_62;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    unint64_t v14 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v33 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v33) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null tlv_start, no backtrace";
      goto LABEL_62;
    }
    if (!v33) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2082;
    os_log_type_t v48 = backtrace_string;
    os_log_type_t v22 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
LABEL_47:
    unint64_t v23 = v14;
    os_log_type_t v24 = v28;
    uint32_t v25 = 22;
LABEL_14:
    _os_log_impl(&dword_1830D4000, v23, v24, v22, buf, v25);
LABEL_15:

    free(backtrace_string);
    goto LABEL_16;
  }
  unint64_t v11 = *(void *)(a1 + 40);
  if (!v11)
  {
    os_log_type_t v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_necp_append_tlv";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v13, &type, &v39)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null beyond";
      goto LABEL_62;
    }
    if (!v39)
    {
      unint64_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null beyond, backtrace limit exceeded";
      goto LABEL_62;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    unint64_t v14 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v34 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null beyond, no backtrace";
      goto LABEL_62;
    }
    if (!v34) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2082;
    os_log_type_t v48 = backtrace_string;
    os_log_type_t v22 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
    goto LABEL_47;
  }
  if (v10 >= v11)
  {
    char v31 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2048;
    os_log_type_t v48 = (char *)v10;
    __int16 v49 = 2048;
    uint64_t v50 = v11;
    __int16 v51 = 1024;
    *(_DWORD *)dispatch_block_t v52 = 251;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = 68;
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v13, &type, &v39)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v14 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v46 = "nw_necp_append_tlv";
        __int16 v47 = 2048;
        os_log_type_t v48 = (char *)v10;
        __int16 v49 = 2048;
        uint64_t v50 = v11;
        __int16 v51 = 1024;
        *(_DWORD *)dispatch_block_t v52 = 251;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = 68;
        os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
LABEL_65:
        BOOL v36 = v14;
        os_log_type_t v37 = v32;
        uint32_t v38 = 44;
        goto LABEL_66;
      }
    }
    else
    {
      if (v39)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        unint64_t v14 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v35 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (!v35) {
            goto LABEL_15;
          }
          *(_DWORD *)buf = 136447490;
          os_log_type_t v46 = "nw_necp_append_tlv";
          __int16 v47 = 2048;
          os_log_type_t v48 = (char *)v10;
          __int16 v49 = 2048;
          uint64_t v50 = v11;
          __int16 v51 = 1024;
          *(_DWORD *)dispatch_block_t v52 = 251;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = 68;
          *(_WORD *)uint64_t v53 = 2082;
          *(void *)&v53[2] = backtrace_string;
          os_log_type_t v22 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
          unint64_t v23 = v14;
          os_log_type_t v24 = v32;
          uint32_t v25 = 54;
          goto LABEL_14;
        }
        if (!v35) {
          goto LABEL_67;
        }
        *(_DWORD *)buf = 136447234;
        os_log_type_t v46 = "nw_necp_append_tlv";
        __int16 v47 = 2048;
        os_log_type_t v48 = (char *)v10;
        __int16 v49 = 2048;
        uint64_t v50 = v11;
        __int16 v51 = 1024;
        *(_DWORD *)dispatch_block_t v52 = 251;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = 68;
        os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
        goto LABEL_65;
      }
      unint64_t v14 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v46 = "nw_necp_append_tlv";
        __int16 v47 = 2048;
        os_log_type_t v48 = (char *)v10;
        __int16 v49 = 2048;
        uint64_t v50 = v11;
        __int16 v51 = 1024;
        *(_DWORD *)dispatch_block_t v52 = 251;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = 68;
        os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
        goto LABEL_65;
      }
    }
LABEL_67:

LABEL_16:
    if (!v13)
    {
LABEL_18:
      unint64_t v19 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v13);
    goto LABEL_18;
  }
  if (v11 - v10 <= 0x48)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2048;
    os_log_type_t v48 = (char *)v10;
    __int16 v49 = 2048;
    uint64_t v50 = 73;
    __int16 v51 = 2048;
    *(void *)dispatch_block_t v52 = v11;
    *(_WORD *)&v52[8] = 1024;
    *(_DWORD *)uint64_t v53 = 251;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = 68;
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v13, &type, &v39)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v14 = (id)gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136447490;
      os_log_type_t v46 = "nw_necp_append_tlv";
      __int16 v47 = 2048;
      os_log_type_t v48 = (char *)v10;
      __int16 v49 = 2048;
      uint64_t v50 = 73;
      __int16 v51 = 2048;
      *(void *)dispatch_block_t v52 = v11;
      *(_WORD *)&v52[8] = 1024;
      *(_DWORD *)uint64_t v53 = 251;
      *(_WORD *)&v53[4] = 1024;
      *(_DWORD *)&v53[6] = 68;
      os_log_type_t v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_24;
    }
    if (!v39)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v14 = (id)gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136447490;
      os_log_type_t v46 = "nw_necp_append_tlv";
      __int16 v47 = 2048;
      os_log_type_t v48 = (char *)v10;
      __int16 v49 = 2048;
      uint64_t v50 = 73;
      __int16 v51 = 2048;
      *(void *)dispatch_block_t v52 = v11;
      *(_WORD *)&v52[8] = 1024;
      *(_DWORD *)uint64_t v53 = 251;
      *(_WORD *)&v53[4] = 1024;
      *(_DWORD *)&v53[6] = 68;
      os_log_type_t v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v14 = (id)gLogObj;
    os_log_type_t v15 = type;
    BOOL v21 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v21) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136447490;
      os_log_type_t v46 = "nw_necp_append_tlv";
      __int16 v47 = 2048;
      os_log_type_t v48 = (char *)v10;
      __int16 v49 = 2048;
      uint64_t v50 = 73;
      __int16 v51 = 2048;
      *(void *)dispatch_block_t v52 = v11;
      *(_WORD *)&v52[8] = 1024;
      *(_DWORD *)uint64_t v53 = 251;
      *(_WORD *)&v53[4] = 1024;
      *(_DWORD *)&v53[6] = 68;
      os_log_type_t v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0x36u);
LABEL_25:

      if (!v13) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    if (!v21) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136447746;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2048;
    os_log_type_t v48 = (char *)v10;
    __int16 v49 = 2048;
    uint64_t v50 = 73;
    __int16 v51 = 2048;
    *(void *)dispatch_block_t v52 = v11;
    *(_WORD *)&v52[8] = 1024;
    *(_DWORD *)uint64_t v53 = 251;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = 68;
    __int16 v54 = 2082;
    __int16 v55 = backtrace_string;
    os_log_type_t v22 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    unint64_t v23 = v14;
    os_log_type_t v24 = v15;
    uint32_t v25 = 64;
    goto LABEL_14;
  }
  long long v17 = v42;
  *(_OWORD *)(v10 + 9) = __dst;
  *(_OWORD *)(v10 + 25) = v17;
  long long v18 = v44;
  *(_OWORD *)(v10 + 41) = v43;
  *(unsigned char *)unint64_t v10 = -5;
  *(_DWORD *)(v10 + 1) = 68;
  *(_WORD *)(v10 + 5) = a3;
  *(_WORD *)(v10 + 7) = v7;
  unint64_t v19 = v10 + 73;
  *(_OWORD *)(v10 + 57) = v18;
LABEL_19:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v19;
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t ___ZL41nw_path_struct_size_for_browse_descriptorPU34objcproto23OS_nw_browse_descriptor8NSObjectPm_block_invoke(uint64_t a1, char *__s)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += strlen(__s) + 1;
  return 1;
}

void ___ZL27nw_path_flow_load_protocolsv_block_invoke(double a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  Helper_x8__nwrapport_copy_protocol_nw_protocol_definition_t definition = gotLoadHelper_x8__nwrapport_copy_protocol_definition(a1);
  if (*(void *)(v2 + 2008))
  {
    inited = (void *)nwrapport_copy_protocol_definition_delayInitStub(Helper_x8__nwrapport_copy_protocol_definition);
    if (inited)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v4 = (id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136446210;
        __int16 v7 = "nw_path_flow_load_protocols_block_invoke";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s registering rapport protocol", (uint8_t *)&v6, 0xCu);
      }

      id v5 = inited;
      nw_protocol_register_handle((uint64_t)v5 + 8, v5, (uint64_t)nw_protocol_implementation_create, (uint64_t)nw_protocol_implementation_accept);
    }
  }
}

uint64_t *nw_path_copy_group_descriptor_from_tlv(unsigned int a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1 >= 0x14)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_DWORD *)&buf[16] = *(_DWORD *)(a2 + 16);
    return nw_group_descriptor_create_with_type(*(int *)buf, &buf[4]);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)buf = 136447234;
  *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
  *(_WORD *)&unsigned char buf[12] = 1024;
  *(_DWORD *)&buf[14] = 205;
  *(_WORD *)&buf[18] = 1024;
  unsigned int v16 = a1;
  __int16 v17 = 2080;
  long long v18 = "nw_path_copy_group_descriptor_from_tlv";
  __int16 v19 = 1024;
  int v20 = 2094;
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 205;
        *(_WORD *)&buf[18] = 1024;
        unsigned int v16 = a1;
        __int16 v17 = 2080;
        long long v18 = "nw_path_copy_group_descriptor_from_tlv";
        __int16 v19 = 1024;
        int v20 = 2094;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 205;
          *(_WORD *)&buf[18] = 1024;
          unsigned int v16 = a1;
          __int16 v17 = 2080;
          long long v18 = "nw_path_copy_group_descriptor_from_tlv";
          __int16 v19 = 1024;
          int v20 = 2094;
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
        }

        free(backtrace_string);
        if (!v6) {
          return 0;
        }
        goto LABEL_9;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 205;
        *(_WORD *)&buf[18] = 1024;
        unsigned int v16 = a1;
        __int16 v17 = 2080;
        long long v18 = "nw_path_copy_group_descriptor_from_tlv";
        __int16 v19 = 1024;
        int v20 = 2094;
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 205;
        *(_WORD *)&buf[18] = 1024;
        unsigned int v16 = a1;
        __int16 v17 = 2080;
        long long v18 = "nw_path_copy_group_descriptor_from_tlv";
        __int16 v19 = 1024;
        int v20 = 2094;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
      }
    }
  }
  if (v6) {
LABEL_9:
  }
    free(v6);
  return 0;
}

nw_browse_descriptor_t nw_path_copy_browse_descriptor_from_tlv(unsigned int a1, unsigned __int8 *a2, const unsigned __int8 *a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (a1 < 0x1C)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136447234;
    uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v82 = 1024;
    int v83 = 202;
    __int16 v84 = 1024;
    unsigned int v85 = a1;
    __int16 v86 = 2080;
    uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v88 = 1024;
    int v89 = 1997;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (!__nwlog_fault(v11, &type, &v78)) {
      goto LABEL_28;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136447234;
        uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1997;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
    }
    else if (v78)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136447490;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1997;
          __int16 v90 = 2082;
          v91 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
        }

        free(backtrace_string);
        if (!v11) {
          return 0;
        }
        goto LABEL_29;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136447234;
        uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1997;
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136447234;
        uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1997;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
      }
    }
    goto LABEL_27;
  }
  if (a2[1]) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)a2 + 1);
  if (!v4) {
    return 0;
  }
  id v5 = (const char *)(a2 + 8);
  size_t v6 = a1 - 8;
  if (v4 == 2)
  {
    int v20 = *((_DWORD *)a2 + 2);
    int v19 = *((_DWORD *)a2 + 3);
    __int16 v21 = (const char *)(a2 + 16);
    size_t v22 = strnlen((const char *)a2 + 16, v6 - 8);
    if (v22 + 8 >= v6)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v33 = (id)gLogObj;
      *(_DWORD *)buf = 136447234;
      uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1926;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v11, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v12 = __nwlog_obj();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1926;
            _os_log_impl(&dword_1830D4000, v12, v34, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
          }
          goto LABEL_27;
        }
        if (!v78)
        {
          os_log_type_t v12 = __nwlog_obj();
          os_log_type_t v56 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1926;
            _os_log_impl(&dword_1830D4000, v12, v56, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
          }
          goto LABEL_27;
        }
        char v39 = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v42 = type;
        BOOL v43 = os_log_type_enabled(v12, type);
        if (!v39)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1926;
            _os_log_impl(&dword_1830D4000, v12, v42, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
          }
          goto LABEL_27;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136447490;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1926;
          __int16 v90 = 2082;
          v91 = v39;
          _os_log_impl(&dword_1830D4000, v12, v42, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
        }
        goto LABEL_112;
      }
      goto LABEL_28;
    }
    uint64_t v23 = &v5[v22 + 9];
    size_t v24 = strnlen(v23, v6 - (v22 + 9)) + v22 + 9;
    if (v24 >= v6)
    {
      os_log_type_t v37 = __nwlog_obj();
      *(_DWORD *)buf = 136447234;
      uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1933;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v11, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v12 = __nwlog_obj();
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1933;
            _os_log_impl(&dword_1830D4000, v12, v38, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
          }
          goto LABEL_27;
        }
        if (!v78)
        {
          os_log_type_t v12 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1933;
            _os_log_impl(&dword_1830D4000, v12, v66, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
          }
          goto LABEL_27;
        }
        char v39 = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v53 = type;
        BOOL v54 = os_log_type_enabled(v12, type);
        if (!v39)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1933;
            _os_log_impl(&dword_1830D4000, v12, v53, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
          }
          goto LABEL_27;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136447490;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1933;
          __int16 v90 = 2082;
          v91 = v39;
          _os_log_impl(&dword_1830D4000, v12, v53, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
        }
        goto LABEL_112;
      }
      goto LABEL_28;
    }
    size_t v25 = v24 + 2;
    if (v24 + 2 > v6)
    {
      os_log_type_t v26 = __nwlog_obj();
      *(_DWORD *)buf = 136447234;
      uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1941;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v11, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v12 = __nwlog_obj();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1941;
            _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
          }
          goto LABEL_27;
        }
        if (!v78)
        {
          os_log_type_t v12 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1941;
            _os_log_impl(&dword_1830D4000, v12, v70, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
          }
          goto LABEL_27;
        }
        char v39 = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v63 = type;
        BOOL v64 = os_log_type_enabled(v12, type);
        if (!v39)
        {
          if (v64)
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1941;
            _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
          }
          goto LABEL_27;
        }
        if (v64)
        {
          *(_DWORD *)buf = 136447490;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1941;
          __int16 v90 = 2082;
          v91 = v39;
          _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
        }
        goto LABEL_112;
      }
      goto LABEL_28;
    }
    int v44 = v5[v24 + 1];
    application_service_with_uint64_t bundle_id = nw_browse_descriptor_create_application_service_with_bundle_id(v21, v23);
    custom = (NWConcrete_nw_browse_descriptor *)application_service_with_bundle_id;
    size_t v46 = v24 + 3;
    if (v46 > v6)
    {
      __int16 v47 = __nwlog_obj();
      *(_DWORD *)buf = 136447234;
      uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1951;
      os_log_type_t v48 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v48, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v49 = __nwlog_obj();
          os_log_type_t v50 = type;
          if (os_log_type_enabled(v49, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1951;
            _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
          }
        }
        else if (v78)
        {
          os_log_type_t v67 = (char *)__nw_create_backtrace_string();
          __int16 v49 = __nwlog_obj();
          os_log_type_t v68 = type;
          BOOL v69 = os_log_type_enabled(v49, type);
          if (v67)
          {
            if (v69)
            {
              *(_DWORD *)buf = 136447490;
              uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
              __int16 v82 = 1024;
              int v83 = 202;
              __int16 v84 = 1024;
              unsigned int v85 = a1;
              __int16 v86 = 2080;
              uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
              __int16 v88 = 1024;
              int v89 = 1951;
              __int16 v90 = 2082;
              v91 = v67;
              _os_log_impl(&dword_1830D4000, v49, v68, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
            }

            free(v67);
            goto LABEL_154;
          }
          if (v69)
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1951;
            _os_log_impl(&dword_1830D4000, v49, v68, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
          }
        }
        else
        {
          __int16 v49 = __nwlog_obj();
          os_log_type_t v71 = type;
          if (os_log_type_enabled(v49, type))
          {
            *(_DWORD *)buf = 136447234;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1951;
            _os_log_impl(&dword_1830D4000, v49, v71, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
          }
        }
      }
LABEL_154:
      if (v48) {
        free(v48);
      }
      return (nw_browse_descriptor_t)custom;
    }
    uint64_t v57 = v5[v25];
    if (!v57)
    {
LABEL_164:
      if (custom)
      {
        int v75 = *(_DWORD *)&v5[v46];
        nw_browse_descriptor_set_device_types(custom, v20);
        nw_browse_descriptor_set_browse_scope(custom, v19);
        nw_browse_descriptor_set_discover_application_service_endpoints_only(custom, v44 != 0);
        nw_browse_descriptor_set_invitation_scope(custom, v75);
      }
      return (nw_browse_descriptor_t)custom;
    }
    if (application_service_with_bundle_id)
    {
      while (1)
      {
        uint64_t v58 = (uint64_t)&v5[v46];
        v46 += strnlen(&v5[v46], v6 - v46);
        if (v46 >= v6) {
          break;
        }
        nw_browse_descriptor_add_device_filter(custom, v58);
        ++v46;
        if (!--v57) {
          goto LABEL_164;
        }
      }
    }
    else
    {
      while (1)
      {
        v46 += strnlen(&v5[v46], v6 - v46);
        if (v46 >= v6) {
          break;
        }
        ++v46;
        if (!--v57) {
          goto LABEL_164;
        }
      }
    }
    id v59 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v82 = 1024;
    int v83 = 202;
    __int16 v84 = 1024;
    unsigned int v85 = a1;
    __int16 v86 = 2080;
    uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v88 = 1024;
    int v89 = 1958;
    __int16 v60 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (__nwlog_fault(v60, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v61 = __nwlog_obj();
        os_log_type_t v62 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1958;
          _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
        }
      }
      else if (v78)
      {
        uint32_t v72 = (char *)__nw_create_backtrace_string();
        id v61 = __nwlog_obj();
        os_log_type_t v77 = type;
        BOOL v73 = os_log_type_enabled(v61, type);
        if (v72)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136447490;
            uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1958;
            __int16 v90 = 2082;
            v91 = v72;
            _os_log_impl(&dword_1830D4000, v61, v77, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
          }

          free(v72);
          goto LABEL_162;
        }
        if (v73)
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1958;
          _os_log_impl(&dword_1830D4000, v61, v77, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
        }
      }
      else
      {
        id v61 = __nwlog_obj();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1958;
          _os_log_impl(&dword_1830D4000, v61, v74, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
        }
      }
    }
LABEL_162:
    if (v60) {
      free(v60);
    }
    goto LABEL_164;
  }
  if (v4 != 1)
  {
    unsigned int v28 = *a2;
    if (v28 != a1)
    {
      if (v28 >= a1) {
        return 0;
      }
      BOOL v76 = __nwlog_obj();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        uint32_t v81 = "nw_path_verify_tlv_length";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 1024;
        LODWORD(v87) = v28;
        _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
      }
    }
    if (v28 > 8)
    {
      dispatch_data_t v29 = dispatch_data_create(v5, v28 - 8, 0, 0);
      if (v29)
      {
        dispatch_data_t v30 = v29;
        custom = nw_browse_descriptor_create_custom(v4, v29, 0);

        return (nw_browse_descriptor_t)custom;
      }
    }
    return 0;
  }
  size_t v7 = strnlen((const char *)a2 + 8, a1 - 8);
  if (v7 >= v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v31 = (id)gLogObj;
    *(_DWORD *)buf = 136447234;
    uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v82 = 1024;
    int v83 = 202;
    __int16 v84 = 1024;
    unsigned int v85 = a1;
    __int16 v86 = 2080;
    uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v88 = 1024;
    int v89 = 1900;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (__nwlog_fault(v11, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1900;
          _os_log_impl(&dword_1830D4000, v12, v32, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
        }
        goto LABEL_27;
      }
      if (!v78)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1900;
          _os_log_impl(&dword_1830D4000, v12, v55, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
        }
        goto LABEL_27;
      }
      char v39 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v12, type);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1900;
          _os_log_impl(&dword_1830D4000, v12, v40, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
        }
        goto LABEL_27;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136447490;
        uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1900;
        __int16 v90 = 2082;
        v91 = v39;
        _os_log_impl(&dword_1830D4000, v12, v40, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
      }
      goto LABEL_112;
    }
LABEL_28:
    if (v11) {
LABEL_29:
    }
      free(v11);
    return 0;
  }
  os_log_type_t v8 = &v5[v7 + 1];
  if (strnlen(v8, v6 - (v7 + 1)) + v7 + 1 >= v6)
  {
    BOOL v35 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v82 = 1024;
    int v83 = 202;
    __int16 v84 = 1024;
    unsigned int v85 = a1;
    __int16 v86 = 2080;
    uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v88 = 1024;
    int v89 = 1907;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (__nwlog_fault(v11, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1907;
          _os_log_impl(&dword_1830D4000, v12, v36, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
        }
LABEL_27:

        goto LABEL_28;
      }
      if (!v78)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v65 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1907;
          _os_log_impl(&dword_1830D4000, v12, v65, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
        }
        goto LABEL_27;
      }
      char v39 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v51 = type;
      BOOL v52 = os_log_type_enabled(v12, type);
      if (!v39)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136447234;
          uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1907;
          _os_log_impl(&dword_1830D4000, v12, v51, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
        }
        goto LABEL_27;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136447490;
        uint32_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1907;
        __int16 v90 = 2082;
        v91 = v39;
        _os_log_impl(&dword_1830D4000, v12, v51, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
      }
LABEL_112:

      free(v39);
      if (!v11) {
        return 0;
      }
      goto LABEL_29;
    }
    goto LABEL_28;
  }

  return nw_browse_descriptor_create_bonjour_service(v5, v8);
}

void sub_183B0EE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_path_copy_advertise_descriptor_from_tlv(unsigned int a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a1 < 0x1C)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2080;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v15, &type, &v55)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2080;
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
    }
    else if (v55)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (id)gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136447490;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2080;
          __int16 v67 = 2082;
          os_log_type_t v68 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
        }

        free(backtrace_string);
        if (!v15) {
          return 0;
        }
        goto LABEL_112;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2080;
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (id)gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2080;
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
      }
    }
    goto LABEL_110;
  }
  if (*(unsigned char *)(a2 + 1)) {
    return 0;
  }
  unsigned int v4 = (const char *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 4);
  unint64_t v6 = a1 - 8;
  if (v5 == 2)
  {
    size_t v22 = strnlen((const char *)(a2 + 8), a1 - 8);
    if (v22 >= v6)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v30 = (id)gLogObj;
      *(_DWORD *)buf = 136447234;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2049;
      os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (!__nwlog_fault(v15, &type, &v55)) {
        goto LABEL_111;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2049;
          _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
        }
        goto LABEL_110;
      }
      if (!v55)
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2049;
          _os_log_impl(&dword_1830D4000, v16, v48, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
        }
        goto LABEL_110;
      }
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v16, type);
      if (!v36)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2049;
          _os_log_impl(&dword_1830D4000, v16, v39, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
        }
        goto LABEL_110;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136447490;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2049;
        __int16 v67 = 2082;
        os_log_type_t v68 = v36;
        _os_log_impl(&dword_1830D4000, v16, v39, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
      }
    }
    else
    {
      uint64_t v23 = &v4[v22 + 1];
      size_t v24 = strnlen(v23, v6 - (v22 + 1)) + v22 + 1;
      if (v24 < v6)
      {
        size_t v25 = &v4[v24];
        int v26 = *(_DWORD *)(v25 + 1);
        int v27 = *(_DWORD *)(v25 + 5);
        os_log_type_t v13 = nw_advertise_descriptor_create_application_service_with_bundle_id(v4, v23);
        nw_advertise_descriptor_set_invitation(v13, v26, v27);
        return v13;
      }
      os_log_type_t v34 = __nwlog_obj();
      *(_DWORD *)buf = 136447234;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2056;
      os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (!__nwlog_fault(v15, &type, &v55))
      {
LABEL_111:
        if (v15) {
LABEL_112:
        }
          free(v15);
        return 0;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2056;
          _os_log_impl(&dword_1830D4000, v16, v35, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
        }
        goto LABEL_110;
      }
      if (!v55)
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2056;
          _os_log_impl(&dword_1830D4000, v16, v52, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
        }
        goto LABEL_110;
      }
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v16, type);
      if (!v36)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2056;
          _os_log_impl(&dword_1830D4000, v16, v45, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
        }
        goto LABEL_110;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136447490;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2056;
        __int16 v67 = 2082;
        os_log_type_t v68 = v36;
        _os_log_impl(&dword_1830D4000, v16, v45, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
      }
    }
    goto LABEL_85;
  }
  if (v5 != 1) {
    return 0;
  }
  size_t v7 = strnlen((const char *)(a2 + 8), a1 - 8);
  if (v7 >= v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v28 = (id)gLogObj;
    *(_DWORD *)buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2017;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v15, &type, &v55)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2017;
        _os_log_impl(&dword_1830D4000, v16, v29, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
      goto LABEL_110;
    }
    if (!v55)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2017;
        _os_log_impl(&dword_1830D4000, v16, v47, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
      }
      goto LABEL_110;
    }
    os_log_type_t v36 = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v37 = type;
    BOOL v38 = os_log_type_enabled(v16, type);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2017;
        _os_log_impl(&dword_1830D4000, v16, v37, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
      }
      goto LABEL_110;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136447490;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2017;
      __int16 v67 = 2082;
      os_log_type_t v68 = v36;
      _os_log_impl(&dword_1830D4000, v16, v37, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
    }
    goto LABEL_85;
  }
  os_log_type_t v8 = &v4[v7 + 1];
  size_t v9 = strnlen(v8, v6 - (v7 + 1)) + v7 + 1;
  if (v9 >= v6)
  {
    os_log_type_t v32 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2024;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v15, &type, &v55)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2024;
        _os_log_impl(&dword_1830D4000, v16, v33, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
      goto LABEL_110;
    }
    if (!v55)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2024;
        _os_log_impl(&dword_1830D4000, v16, v51, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
      }
      goto LABEL_110;
    }
    os_log_type_t v36 = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v44 = os_log_type_enabled(v16, type);
    if (!v36)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2024;
        _os_log_impl(&dword_1830D4000, v16, v43, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
      }
      goto LABEL_110;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136447490;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2024;
      __int16 v67 = 2082;
      os_log_type_t v68 = v36;
      _os_log_impl(&dword_1830D4000, v16, v43, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
    }
    goto LABEL_85;
  }
  id v10 = &v4[v9 + 1];
  size_t v11 = strnlen(v10, v6 - (v9 + 1)) + v9 + 1;
  if (v11 >= v6)
  {
    BOOL v41 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2031;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v15, &type, &v55)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2031;
        _os_log_impl(&dword_1830D4000, v16, v42, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
LABEL_110:

      goto LABEL_111;
    }
    if (!v55)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2031;
        _os_log_impl(&dword_1830D4000, v16, v53, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
      }
      goto LABEL_110;
    }
    os_log_type_t v36 = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v50 = os_log_type_enabled(v16, type);
    if (!v36)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2031;
        _os_log_impl(&dword_1830D4000, v16, v49, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
      }
      goto LABEL_110;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136447490;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2031;
      __int16 v67 = 2082;
      os_log_type_t v68 = v36;
      _os_log_impl(&dword_1830D4000, v16, v49, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
    }
LABEL_85:

    free(v36);
    if (!v15) {
      return 0;
    }
    goto LABEL_112;
  }
  bonjour_DNSServiceRef service = nw_advertise_descriptor_create_bonjour_service(v4, v8, v10);
  os_log_type_t v13 = bonjour_service;
  if (v6 > v11 + 1) {
    nw_advertise_descriptor_set_txt_record(bonjour_service, &v4[v11 + 1], v6 - (v11 + 1));
  }
  return v13;
}

void sub_183B10240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_create_assign_message_internal(size_t *a1, _OWORD *a2, unsigned int a3, const void *a4, unsigned int a5, void *a6, void *a7, void *a8)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  id v164 = a6;
  id v15 = a7;
  id v16 = a8;
  id v163 = v16;
  if (a3 >= 0x10000)
  {
    char v78 = __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v171 = "nw_path_create_assign_message_internal";
    __int16 v172 = 1024;
    *(_DWORD *)v173 = a3;
    char v79 = (char *)_os_log_send_and_compose_impl();

    v167[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v79, v167, &type))
    {
      if (v167[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v80 = __nwlog_obj();
        os_log_type_t v81 = v167[0];
        if (os_log_type_enabled(v80, v167[0]))
        {
          *(_DWORD *)buf = 136446466;
          v171 = "nw_path_create_assign_message_internal";
          __int16 v172 = 1024;
          *(_DWORD *)v173 = a3;
          _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s nexus_port %u > NEXUS_PORT_MAX", buf, 0x12u);
        }
      }
      else if (type)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        os_log_type_t v80 = __nwlog_obj();
        os_log_type_t v101 = v167[0];
        BOOL v102 = os_log_type_enabled(v80, v167[0]);
        if (backtrace_string)
        {
          if (v102)
          {
            *(_DWORD *)buf = 136446722;
            v171 = "nw_path_create_assign_message_internal";
            __int16 v172 = 1024;
            *(_DWORD *)v173 = a3;
            *(_WORD *)&v173[4] = 2082;
            *(void *)&v173[6] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v80, v101, "%{public}s nexus_port %u > NEXUS_PORT_MAX, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_270;
        }
        if (v102)
        {
          *(_DWORD *)buf = 136446466;
          v171 = "nw_path_create_assign_message_internal";
          __int16 v172 = 1024;
          *(_DWORD *)v173 = a3;
          _os_log_impl(&dword_1830D4000, v80, v101, "%{public}s nexus_port %u > NEXUS_PORT_MAX, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        os_log_type_t v80 = __nwlog_obj();
        os_log_type_t v148 = v167[0];
        if (os_log_type_enabled(v80, v167[0]))
        {
          *(_DWORD *)buf = 136446466;
          v171 = "nw_path_create_assign_message_internal";
          __int16 v172 = 1024;
          *(_DWORD *)v173 = a3;
          _os_log_impl(&dword_1830D4000, v80, v148, "%{public}s nexus_port %u > NEXUS_PORT_MAX, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
LABEL_270:
    os_log_type_t v51 = v163;
    if (v79) {
      free(v79);
    }
    os_log_type_t v21 = 0;
    goto LABEL_142;
  }
  id v17 = v16;
  uint64_t v169 = 0;
  *(_OWORD *)v167 = 0u;
  long long v168 = 0u;
  if (a1) {
    *a1 = 0;
  }
  size_t __n = a5;
  if (a4 != 0 && a5 != 0) {
    uint64_t v18 = a5 + 33;
  }
  else {
    uint64_t v18 = 28;
  }
  if (v164) {
    v18 += nw_path_struct_size_for_endpoint_and_metadata(v164, 0, 7);
  }
  if (v15) {
    v18 += nw_path_struct_size_for_endpoint_and_metadata(v15, 0, 7);
  }
  if (v17) {
    size_t v19 = v18 + 47;
  }
  else {
    size_t v19 = v18;
  }
  unsigned int v161 = a5;
  if (!v19)
  {
    __int16 v82 = __nwlog_obj();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v171 = "strict_calloc";
    int v83 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v83);
    if (result) {
      goto LABEL_339;
    }
    free(v83);
  }
  BOOL v20 = (char *)malloc_type_calloc(1uLL, v19, 0xEAFB8F1AuLL);
  os_log_type_t v21 = v20;
  v162 = a1;
  if (v20)
  {
    unint64_t v22 = (unint64_t)&v20[v19];
    if ((uint64_t)v19 <= 0)
    {
      __int16 v90 = __nwlog_obj();
      *(_DWORD *)buf = 136447234;
      v171 = "nw_necp_append_tlv";
      __int16 v172 = 2048;
      *(void *)v173 = v21;
      *(_WORD *)&v173[8] = 2048;
      *(void *)&v173[10] = &v21[v19];
      *(_WORD *)&v173[18] = 1024;
      *(_DWORD *)v174 = 100;
      *(_WORD *)&v174[4] = 1024;
      *(_DWORD *)&v174[6] = 16;
      size_t v24 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v165 = 0;
      if (!__nwlog_fault(v24, &type, &v165)) {
        goto LABEL_49;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        size_t v25 = __nwlog_obj();
        os_log_type_t v91 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136447234;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 100;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 16;
          _os_log_impl(&dword_1830D4000, v25, v91, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
        }
        goto LABEL_299;
      }
      if (!v165)
      {
        size_t v25 = __nwlog_obj();
        os_log_type_t v150 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136447234;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 100;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 16;
          _os_log_impl(&dword_1830D4000, v25, v150, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
        }
        goto LABEL_299;
      }
      v114 = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v115 = type;
      BOOL v116 = os_log_type_enabled(v32, type);
      if (v114)
      {
        if (v116)
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 100;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 16;
          *(_WORD *)v175 = 2082;
          *(void *)&v175[2] = v114;
          _os_log_impl(&dword_1830D4000, v32, v115, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
        }

        free(v114);
        if (!v24) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
      if (v116)
      {
        *(_DWORD *)buf = 136447234;
        v171 = "nw_necp_append_tlv";
        __int16 v172 = 2048;
        *(void *)v173 = v21;
        *(_WORD *)&v173[8] = 2048;
        *(void *)&v173[10] = &v21[v19];
        *(_WORD *)&v173[18] = 1024;
        *(_DWORD *)v174 = 100;
        *(_WORD *)&v174[4] = 1024;
        *(_DWORD *)&v174[6] = 16;
        _os_log_impl(&dword_1830D4000, v32, v115, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
      goto LABEL_48;
    }
    if (v19 <= 0x14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = (id)gLogObj;
      *(_DWORD *)buf = 136447490;
      v171 = "nw_necp_append_tlv";
      __int16 v172 = 2048;
      *(void *)v173 = v21;
      *(_WORD *)&v173[8] = 2048;
      *(void *)&v173[10] = 21;
      *(_WORD *)&v173[18] = 2048;
      *(void *)v174 = &v21[v19];
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)v175 = 100;
      *(_WORD *)&v175[4] = 1024;
      *(_DWORD *)&v175[6] = 16;
      size_t v24 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v165 = 0;
      if (!__nwlog_fault(v24, &type, &v165)) {
        goto LABEL_49;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v25 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 21;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 100;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 16;
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
        }
LABEL_299:

        goto LABEL_49;
      }
      if (!v165)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v25 = (id)gLogObj;
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 21;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 100;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 16;
          _os_log_impl(&dword_1830D4000, v25, v40, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
        }
        goto LABEL_299;
      }
      os_log_type_t v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v32 = (id)gLogObj;
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v32, type);
      if (v31)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136447746;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 21;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 100;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 16;
          __int16 v176 = 2082;
          v177 = v31;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v31);
        if (!v24) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136447490;
        v171 = "nw_necp_append_tlv";
        __int16 v172 = 2048;
        *(void *)v173 = v21;
        *(_WORD *)&v173[8] = 2048;
        *(void *)&v173[10] = 21;
        *(_WORD *)&v173[18] = 2048;
        *(void *)v174 = &v21[v19];
        *(_WORD *)&v174[8] = 1024;
        *(_DWORD *)v175 = 100;
        *(_WORD *)&v175[4] = 1024;
        *(_DWORD *)&v175[6] = 16;
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
      }
LABEL_48:

      goto LABEL_49;
    }
    *BOOL v20 = 100;
    *(_DWORD *)(v20 + 1) = 16;
    if (!a2)
    {
      v112 = __nwlog_obj();
      *(_DWORD *)buf = 136446722;
      v171 = "nw_necp_append_tlv";
      __int16 v172 = 1024;
      *(_DWORD *)v173 = 100;
      *(_WORD *)&v173[4] = 1024;
      *(_DWORD *)&v173[6] = 16;
      size_t v24 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v165 = 0;
      if (!__nwlog_fault(v24, &type, &v165)) {
        goto LABEL_49;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        size_t v25 = __nwlog_obj();
        os_log_type_t v113 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446722;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 1024;
          *(_DWORD *)v173 = 100;
          *(_WORD *)&v173[4] = 1024;
          *(_DWORD *)&v173[6] = 16;
          _os_log_impl(&dword_1830D4000, v25, v113, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
        }
        goto LABEL_299;
      }
      if (!v165)
      {
        size_t v25 = __nwlog_obj();
        os_log_type_t v156 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446722;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 1024;
          *(_DWORD *)v173 = 100;
          *(_WORD *)&v173[4] = 1024;
          *(_DWORD *)&v173[6] = 16;
          _os_log_impl(&dword_1830D4000, v25, v156, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
        }
        goto LABEL_299;
      }
      char v137 = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v138 = type;
      BOOL v139 = os_log_type_enabled(v32, type);
      if (v137)
      {
        if (v139)
        {
          *(_DWORD *)buf = 136446978;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 1024;
          *(_DWORD *)v173 = 100;
          *(_WORD *)&v173[4] = 1024;
          *(_DWORD *)&v173[6] = 16;
          *(_WORD *)&v173[10] = 2082;
          *(void *)&v173[12] = v137;
          _os_log_impl(&dword_1830D4000, v32, v138, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v137);
LABEL_49:
        if (!v24)
        {
LABEL_51:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v41 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v171 = "nw_necp_append_tlv";
          os_log_type_t v42 = (void *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v165 = 0;
          if (!__nwlog_fault((const char *)v42, &type, &v165))
          {
LABEL_67:
            if (v42) {
              free(v42);
            }
            unint64_t v35 = 0;
LABEL_70:
            BOOL v50 = v15;
            os_log_type_t v49 = v164;
            os_log_type_t v51 = v163;
            if (a4 == 0 || a5 == 0) {
              goto LABEL_71;
            }
            goto LABEL_112;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v43 = (id)gLogObj;
            os_log_type_t v44 = type;
            if (os_log_type_enabled(v43, type))
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null tlv_start", buf, 0xCu);
            }
          }
          else if (v165)
          {
            os_log_type_t v45 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v43 = (id)gLogObj;
            os_log_type_t v46 = type;
            BOOL v47 = os_log_type_enabled(v43, type);
            if (v45)
            {
              if (v47)
              {
                *(_DWORD *)buf = 136446466;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2082;
                *(void *)v173 = v45;
                _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v45);
              goto LABEL_67;
            }
            if (v47)
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v43 = (id)gLogObj;
            os_log_type_t v48 = type;
            if (os_log_type_enabled(v43, type))
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v43, v48, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
            }
          }
LABEL_66:

          goto LABEL_67;
        }
LABEL_50:
        free(v24);
        goto LABEL_51;
      }
      if (v139)
      {
        *(_DWORD *)buf = 136446722;
        v171 = "nw_necp_append_tlv";
        __int16 v172 = 1024;
        *(_DWORD *)v173 = 100;
        *(_WORD *)&v173[4] = 1024;
        *(_DWORD *)&v173[6] = 16;
        _os_log_impl(&dword_1830D4000, v32, v138, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
      }
      goto LABEL_48;
    }
    *(_OWORD *)(v20 + 5) = *a2;
    if (v19 <= 0x15)
    {
      v121 = __nwlog_obj();
      *(_DWORD *)buf = 136447234;
      v171 = "nw_necp_append_tlv";
      __int16 v172 = 2048;
      *(void *)v173 = v21 + 21;
      *(_WORD *)&v173[8] = 2048;
      *(void *)&v173[10] = &v21[v19];
      *(_WORD *)&v173[18] = 1024;
      *(_DWORD *)v174 = 101;
      *(_WORD *)&v174[4] = 1024;
      *(_DWORD *)&v174[6] = 2;
      os_log_type_t v42 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v165 = 0;
      if (!__nwlog_fault((const char *)v42, &type, &v165)) {
        goto LABEL_67;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v122 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136447234;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21 + 21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 101;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 2;
          _os_log_impl(&dword_1830D4000, v43, v122, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
        }
      }
      else
      {
        if (v165)
        {
          v144 = (char *)__nw_create_backtrace_string();
          v145 = __nwlog_obj();
          os_log_type_t v146 = type;
          BOOL v147 = os_log_type_enabled(v145, type);
          if (v144)
          {
            if (v147)
            {
              *(_DWORD *)buf = 136447490;
              v171 = "nw_necp_append_tlv";
              __int16 v172 = 2048;
              *(void *)v173 = v21 + 21;
              *(_WORD *)&v173[8] = 2048;
              *(void *)&v173[10] = &v21[v19];
              *(_WORD *)&v173[18] = 1024;
              *(_DWORD *)v174 = 101;
              *(_WORD *)&v174[4] = 1024;
              *(_DWORD *)&v174[6] = 2;
              *(_WORD *)v175 = 2082;
              *(void *)&v175[2] = v144;
              _os_log_impl(&dword_1830D4000, v145, v146, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
            }

            free(v144);
          }
          else
          {
            if (v147)
            {
              *(_DWORD *)buf = 136447234;
              v171 = "nw_necp_append_tlv";
              __int16 v172 = 2048;
              *(void *)v173 = v21 + 21;
              *(_WORD *)&v173[8] = 2048;
              *(void *)&v173[10] = &v21[v19];
              *(_WORD *)&v173[18] = 1024;
              *(_DWORD *)v174 = 101;
              *(_WORD *)&v174[4] = 1024;
              *(_DWORD *)&v174[6] = 2;
              _os_log_impl(&dword_1830D4000, v145, v146, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
            }
          }
          goto LABEL_67;
        }
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v158 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136447234;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21 + 21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 101;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 2;
          _os_log_impl(&dword_1830D4000, v43, v158, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
        }
      }
      goto LABEL_66;
    }
    if (v19 - 21 > 6)
    {
      v20[21] = 101;
      *(_DWORD *)(v20 + 22) = 2;
      *((_WORD *)v20 + 13) = a3;
      unint64_t v35 = (unint64_t)(v20 + 28);
      goto LABEL_70;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v27 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    v171 = "nw_necp_append_tlv";
    __int16 v172 = 2048;
    *(void *)v173 = v21 + 21;
    *(_WORD *)&v173[8] = 2048;
    *(void *)&v173[10] = 7;
    *(_WORD *)&v173[18] = 2048;
    *(void *)v174 = &v21[v19];
    *(_WORD *)&v174[8] = 1024;
    *(_DWORD *)v175 = 101;
    *(_WORD *)&v175[4] = 1024;
    *(_DWORD *)&v175[6] = 2;
    id v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (__nwlog_fault(v28, &type, &v165))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v29 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21 + 21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 7;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 101;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 2;
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
        }
LABEL_30:

        goto LABEL_109;
      }
      if (!v165)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v29 = (id)gLogObj;
        os_log_type_t v64 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21 + 21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 7;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 101;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 2;
          _os_log_impl(&dword_1830D4000, v29, v64, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
        }
        goto LABEL_30;
      }
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v37 = (id)gLogObj;
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v37, type);
      if (v36)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136447746;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21 + 21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 7;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 101;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 2;
          __int16 v176 = 2082;
          v177 = v36;
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v36);
      }
      else
      {
        if (v39)
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2048;
          *(void *)v173 = v21 + 21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 7;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 101;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 2;
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
        }
      }
    }
LABEL_109:
    os_log_type_t v51 = v163;
    if (v28) {
      free(v28);
    }
    unint64_t v35 = 0;
    BOOL v50 = v15;
    os_log_type_t v49 = v164;
    if (a4 == 0 || a5 == 0)
    {
LABEL_71:
      if (v49) {
        goto LABEL_72;
      }
LABEL_138:
      if (!v50)
      {
LABEL_73:
        if (v51) {
          goto LABEL_74;
        }
        goto LABEL_140;
      }
LABEL_139:
      unint64_t v35 = nw_path_evaluator_add_endpoint_to_necp_message(v50, 201, v35, v22, 7);
      if (v51)
      {
LABEL_74:
        os_log_type_t v52 = v51;

        *(_OWORD *)v167 = *(_OWORD *)(v52 + 8);
        long long v168 = *(_OWORD *)(v52 + 24);
        uint64_t v169 = *((void *)v52 + 5);
        if (v35)
        {
          if (v22)
          {
            if (v35 >= v22)
            {
              __int16 v98 = __nwlog_obj();
              *(_DWORD *)buf = 136447234;
              v171 = "nw_necp_append_tlv";
              __int16 v172 = 2048;
              *(void *)v173 = v35;
              *(_WORD *)&v173[8] = 2048;
              *(void *)&v173[10] = v22;
              *(_WORD *)&v173[18] = 1024;
              *(_DWORD *)v174 = 222;
              *(_WORD *)&v174[4] = 1024;
              *(_DWORD *)&v174[6] = 42;
              BOOL v54 = (const char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v165 = 0;
              if (!__nwlog_fault(v54, &type, &v165)) {
                goto LABEL_99;
              }
              if (type == OS_LOG_TYPE_FAULT)
              {
                char v55 = __nwlog_obj();
                os_log_type_t v99 = type;
                if (os_log_type_enabled(v55, type))
                {
                  *(_DWORD *)buf = 136447234;
                  v171 = "nw_necp_append_tlv";
                  __int16 v172 = 2048;
                  *(void *)v173 = v35;
                  *(_WORD *)&v173[8] = 2048;
                  *(void *)&v173[10] = v22;
                  *(_WORD *)&v173[18] = 1024;
                  *(_DWORD *)v174 = 222;
                  *(_WORD *)&v174[4] = 1024;
                  *(_DWORD *)&v174[6] = 42;
                  _os_log_impl(&dword_1830D4000, v55, v99, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
                }
                goto LABEL_290;
              }
              if (!v165)
              {
                char v55 = __nwlog_obj();
                os_log_type_t v153 = type;
                if (os_log_type_enabled(v55, type))
                {
                  *(_DWORD *)buf = 136447234;
                  v171 = "nw_necp_append_tlv";
                  __int16 v172 = 2048;
                  *(void *)v173 = v35;
                  *(_WORD *)&v173[8] = 2048;
                  *(void *)&v173[10] = v22;
                  *(_WORD *)&v173[18] = 1024;
                  *(_DWORD *)v174 = 222;
                  *(_WORD *)&v174[4] = 1024;
                  *(_DWORD *)&v174[6] = 42;
                  _os_log_impl(&dword_1830D4000, v55, v153, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
                }
                goto LABEL_290;
              }
              v129 = (char *)__nw_create_backtrace_string();
              int v60 = __nwlog_obj();
              os_log_type_t v130 = type;
              BOOL v131 = os_log_type_enabled(v60, type);
              if (!v129)
              {
                if (v131)
                {
                  *(_DWORD *)buf = 136447234;
                  v171 = "nw_necp_append_tlv";
                  __int16 v172 = 2048;
                  *(void *)v173 = v35;
                  *(_WORD *)&v173[8] = 2048;
                  *(void *)&v173[10] = v22;
                  *(_WORD *)&v173[18] = 1024;
                  *(_DWORD *)v174 = 222;
                  *(_WORD *)&v174[4] = 1024;
                  *(_DWORD *)&v174[6] = 42;
                  _os_log_impl(&dword_1830D4000, v60, v130, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
                }
                goto LABEL_98;
              }
              if (v131)
              {
                *(_DWORD *)buf = 136447490;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2048;
                *(void *)v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = v22;
                *(_WORD *)&v173[18] = 1024;
                *(_DWORD *)v174 = 222;
                *(_WORD *)&v174[4] = 1024;
                *(_DWORD *)&v174[6] = 42;
                *(_WORD *)v175 = 2082;
                *(void *)&v175[2] = v129;
                _os_log_impl(&dword_1830D4000, v60, v130, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
              }

              free(v129);
            }
            else
            {
              if (v22 - v35 > 0x2E)
              {
                *(unsigned char *)unint64_t v35 = -34;
                *(_DWORD *)(v35 + 1) = 42;
                long long v57 = *(_OWORD *)v167;
                long long v58 = v168;
                *(void *)(v35 + 37) = v169;
                *(_OWORD *)(v35 + 21) = v58;
                *(_OWORD *)(v35 + 5) = v57;
                *(_WORD *)(v35 + 45) = 0;
                goto LABEL_102;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v53 = (id)gLogObj;
              *(_DWORD *)buf = 136447490;
              v171 = "nw_necp_append_tlv";
              __int16 v172 = 2048;
              *(void *)v173 = v35;
              *(_WORD *)&v173[8] = 2048;
              *(void *)&v173[10] = 47;
              *(_WORD *)&v173[18] = 2048;
              *(void *)v174 = v22;
              *(_WORD *)&v174[8] = 1024;
              *(_DWORD *)v175 = 222;
              *(_WORD *)&v175[4] = 1024;
              *(_DWORD *)&v175[6] = 42;
              BOOL v54 = (const char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v165 = 0;
              if (__nwlog_fault(v54, &type, &v165))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  char v55 = (id)gLogObj;
                  os_log_type_t v56 = type;
                  if (os_log_type_enabled(v55, type))
                  {
                    *(_DWORD *)buf = 136447490;
                    v171 = "nw_necp_append_tlv";
                    __int16 v172 = 2048;
                    *(void *)v173 = v35;
                    *(_WORD *)&v173[8] = 2048;
                    *(void *)&v173[10] = 47;
                    *(_WORD *)&v173[18] = 2048;
                    *(void *)v174 = v22;
                    *(_WORD *)&v174[8] = 1024;
                    *(_DWORD *)v175 = 222;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = 42;
                    _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
                  }
LABEL_290:

                  goto LABEL_99;
                }
                if (!v165)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  char v55 = (id)gLogObj;
                  os_log_type_t v63 = type;
                  if (os_log_type_enabled(v55, type))
                  {
                    *(_DWORD *)buf = 136447490;
                    v171 = "nw_necp_append_tlv";
                    __int16 v172 = 2048;
                    *(void *)v173 = v35;
                    *(_WORD *)&v173[8] = 2048;
                    *(void *)&v173[10] = 47;
                    *(_WORD *)&v173[18] = 2048;
                    *(void *)v174 = v22;
                    *(_WORD *)&v174[8] = 1024;
                    *(_DWORD *)v175 = 222;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = 42;
                    _os_log_impl(&dword_1830D4000, v55, v63, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
                  }
                  goto LABEL_290;
                }
                __int16 v59 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                int v60 = (id)gLogObj;
                os_log_type_t v61 = type;
                BOOL v62 = os_log_type_enabled(v60, type);
                if (v59)
                {
                  if (v62)
                  {
                    *(_DWORD *)buf = 136447746;
                    v171 = "nw_necp_append_tlv";
                    __int16 v172 = 2048;
                    *(void *)v173 = v35;
                    *(_WORD *)&v173[8] = 2048;
                    *(void *)&v173[10] = 47;
                    *(_WORD *)&v173[18] = 2048;
                    *(void *)v174 = v22;
                    *(_WORD *)&v174[8] = 1024;
                    *(_DWORD *)v175 = 222;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = 42;
                    __int16 v176 = 2082;
                    v177 = v59;
                    _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
                  }

                  free(v59);
                  if (v54)
                  {
LABEL_100:
                    __int16 v65 = (char *)v54;
LABEL_101:
                    free(v65);
                  }
LABEL_102:
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  int v66 = (id)gLogObj;
                  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446466;
                    v171 = "nw_path_create_assign_message_internal";
                    __int16 v172 = 2112;
                    *(void *)v173 = v52;
                    _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s Serialized peer protocol %@", buf, 0x16u);
                  }

                  os_log_type_t v51 = v163;
                  __int16 v67 = v162;
                  if (!v162) {
                    goto LABEL_142;
                  }
                  goto LABEL_141;
                }
                if (v62)
                {
                  *(_DWORD *)buf = 136447490;
                  v171 = "nw_necp_append_tlv";
                  __int16 v172 = 2048;
                  *(void *)v173 = v35;
                  *(_WORD *)&v173[8] = 2048;
                  *(void *)&v173[10] = 47;
                  *(_WORD *)&v173[18] = 2048;
                  *(void *)v174 = v22;
                  *(_WORD *)&v174[8] = 1024;
                  *(_DWORD *)v175 = 222;
                  *(_WORD *)&v175[4] = 1024;
                  *(_DWORD *)&v175[6] = 42;
                  _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
                }
LABEL_98:
              }
            }
LABEL_99:
            if (!v54) {
              goto LABEL_102;
            }
            goto LABEL_100;
          }
          __int16 v96 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v171 = "nw_necp_append_tlv";
          uint64_t v93 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v165 = 0;
          if (!__nwlog_fault(v93, &type, &v165)) {
            goto LABEL_312;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v94 = __nwlog_obj();
            os_log_type_t v97 = type;
            if (os_log_type_enabled(v94, type))
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v94, v97, "%{public}s called with null beyond", buf, 0xCu);
            }
          }
          else if (v165)
          {
            os_log_type_t v126 = (char *)__nw_create_backtrace_string();
            __int16 v94 = __nwlog_obj();
            os_log_type_t v127 = type;
            BOOL v128 = os_log_type_enabled(v94, type);
            if (v126)
            {
              if (v128)
              {
                *(_DWORD *)buf = 136446466;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2082;
                *(void *)v173 = v126;
                _os_log_impl(&dword_1830D4000, v94, v127, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v126);
              if (!v93) {
                goto LABEL_102;
              }
LABEL_313:
              __int16 v65 = (char *)v93;
              goto LABEL_101;
            }
            if (v128)
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v94, v127, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __int16 v94 = __nwlog_obj();
            os_log_type_t v152 = type;
            if (os_log_type_enabled(v94, type))
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v94, v152, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        else
        {
          uint64_t v92 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v171 = "nw_necp_append_tlv";
          uint64_t v93 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v165 = 0;
          if (!__nwlog_fault(v93, &type, &v165)) {
            goto LABEL_312;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v94 = __nwlog_obj();
            os_log_type_t v95 = type;
            if (os_log_type_enabled(v94, type))
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v94, v95, "%{public}s called with null tlv_start", buf, 0xCu);
            }
          }
          else if (v165)
          {
            os_log_type_t v123 = (char *)__nw_create_backtrace_string();
            __int16 v94 = __nwlog_obj();
            os_log_type_t v124 = type;
            BOOL v125 = os_log_type_enabled(v94, type);
            if (v123)
            {
              if (v125)
              {
                *(_DWORD *)buf = 136446466;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2082;
                *(void *)v173 = v123;
                _os_log_impl(&dword_1830D4000, v94, v124, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v123);
LABEL_312:
              if (!v93) {
                goto LABEL_102;
              }
              goto LABEL_313;
            }
            if (v125)
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v94, v124, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __int16 v94 = __nwlog_obj();
            os_log_type_t v151 = type;
            if (os_log_type_enabled(v94, type))
            {
              *(_DWORD *)buf = 136446210;
              v171 = "nw_necp_append_tlv";
              _os_log_impl(&dword_1830D4000, v94, v151, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }

        goto LABEL_312;
      }
LABEL_140:
      __int16 v67 = v162;
      if (!v162)
      {
LABEL_142:

        return (BOOL)v21;
      }
LABEL_141:
      size_t *v67 = v19;
      goto LABEL_142;
    }
LABEL_112:
    if (v35)
    {
      if (v22)
      {
        if (v35 < v22)
        {
          if (v22 - v35 < (unint64_t)a5 + 5)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v68 = (id)gLogObj;
            *(_DWORD *)buf = 136447490;
            v171 = "nw_necp_append_tlv";
            __int16 v172 = 2048;
            *(void *)v173 = v35;
            *(_WORD *)&v173[8] = 2048;
            *(void *)&v173[10] = a5 + 5;
            *(_WORD *)&v173[18] = 2048;
            *(void *)v174 = v22;
            *(_WORD *)&v174[8] = 1024;
            *(_DWORD *)v175 = 102;
            *(_WORD *)&v175[4] = 1024;
            *(_DWORD *)&v175[6] = a5;
            uint64_t v69 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v165 = 0;
            if (!__nwlog_fault(v69, &type, &v165)) {
              goto LABEL_135;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v70 = (id)gLogObj;
              os_log_type_t v71 = type;
              if (os_log_type_enabled(v70, type))
              {
                *(_DWORD *)buf = 136447490;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2048;
                *(void *)v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = a5 + 5;
                *(_WORD *)&v173[18] = 2048;
                *(void *)v174 = v22;
                *(_WORD *)&v174[8] = 1024;
                *(_DWORD *)v175 = 102;
                *(_WORD *)&v175[4] = 1024;
                *(_DWORD *)&v175[6] = a5;
                _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
              }
            }
            else
            {
              if (v165)
              {
                uint32_t v72 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v73 = (id)gLogObj;
                os_log_type_t v74 = type;
                BOOL v75 = os_log_type_enabled(v73, type);
                if (v72)
                {
                  if (v75)
                  {
                    *(_DWORD *)buf = 136447746;
                    v171 = "nw_necp_append_tlv";
                    __int16 v172 = 2048;
                    *(void *)v173 = v35;
                    *(_WORD *)&v173[8] = 2048;
                    *(void *)&v173[10] = __n + 5;
                    *(_WORD *)&v173[18] = 2048;
                    *(void *)v174 = v22;
                    *(_WORD *)&v174[8] = 1024;
                    *(_DWORD *)v175 = 102;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = v161;
                    __int16 v176 = 2082;
                    v177 = v72;
                    _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
                  }

                  free(v72);
                  if (!v69)
                  {
LABEL_137:
                    unint64_t v35 = 0;
                    BOOL v50 = v15;
                    os_log_type_t v49 = v164;
                    os_log_type_t v51 = v163;
                    if (!v164) {
                      goto LABEL_138;
                    }
                    goto LABEL_72;
                  }
LABEL_136:
                  free(v69);
                  goto LABEL_137;
                }
                if (v75)
                {
                  *(_DWORD *)buf = 136447490;
                  v171 = "nw_necp_append_tlv";
                  __int16 v172 = 2048;
                  *(void *)v173 = v35;
                  *(_WORD *)&v173[8] = 2048;
                  *(void *)&v173[10] = __n + 5;
                  *(_WORD *)&v173[18] = 2048;
                  *(void *)v174 = v22;
                  *(_WORD *)&v174[8] = 1024;
                  *(_DWORD *)v175 = 102;
                  *(_WORD *)&v175[4] = 1024;
                  *(_DWORD *)&v175[6] = v161;
                  _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
                }

LABEL_135:
                if (!v69) {
                  goto LABEL_137;
                }
                goto LABEL_136;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v70 = (id)gLogObj;
              os_log_type_t v76 = type;
              if (os_log_type_enabled(v70, type))
              {
                *(_DWORD *)buf = 136447490;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2048;
                *(void *)v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = a5 + 5;
                *(_WORD *)&v173[18] = 2048;
                *(void *)v174 = v22;
                *(_WORD *)&v174[8] = 1024;
                *(_DWORD *)v175 = 102;
                *(_WORD *)&v175[4] = 1024;
                *(_DWORD *)&v175[6] = a5;
                _os_log_impl(&dword_1830D4000, v70, v76, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
              }
            }

            goto LABEL_135;
          }
          *(unsigned char *)unint64_t v35 = 102;
          *(_DWORD *)(v35 + 1) = a5;
          memcpy((void *)(v35 + 5), a4, a5);
          v35 += a5 + 5;
          BOOL v50 = v15;
          os_log_type_t v49 = v164;
          if (!v164) {
            goto LABEL_138;
          }
LABEL_72:
          unint64_t v35 = nw_path_evaluator_add_endpoint_to_necp_message(v49, 200, v35, v22, 7);
          if (!v50) {
            goto LABEL_73;
          }
          goto LABEL_139;
        }
        uint64_t v117 = __nwlog_obj();
        *(_DWORD *)buf = 136447234;
        v171 = "nw_necp_append_tlv";
        __int16 v172 = 2048;
        *(void *)v173 = v35;
        *(_WORD *)&v173[8] = 2048;
        *(void *)&v173[10] = v22;
        *(_WORD *)&v173[18] = 1024;
        *(_DWORD *)v174 = 102;
        *(_WORD *)&v174[4] = 1024;
        *(_DWORD *)&v174[6] = a5;
        os_log_type_t v118 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v165 = 0;
        if (!__nwlog_fault(v118, &type, &v165)) {
          goto LABEL_331;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v119 = __nwlog_obj();
          os_log_type_t v120 = type;
          if (os_log_type_enabled(v119, type))
          {
            *(_DWORD *)buf = 136447234;
            v171 = "nw_necp_append_tlv";
            __int16 v172 = 2048;
            *(void *)v173 = v35;
            *(_WORD *)&v173[8] = 2048;
            *(void *)&v173[10] = v22;
            *(_WORD *)&v173[18] = 1024;
            *(_DWORD *)v174 = 102;
            *(_WORD *)&v174[4] = 1024;
            *(_DWORD *)&v174[6] = a5;
            _os_log_impl(&dword_1830D4000, v119, v120, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
          }
        }
        else
        {
          if (v165)
          {
            id v140 = (char *)__nw_create_backtrace_string();
            v141 = __nwlog_obj();
            os_log_type_t v142 = type;
            BOOL v143 = os_log_type_enabled(v141, type);
            if (v140)
            {
              if (v143)
              {
                *(_DWORD *)buf = 136447490;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2048;
                *(void *)v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = v22;
                *(_WORD *)&v173[18] = 1024;
                *(_DWORD *)v174 = 102;
                *(_WORD *)&v174[4] = 1024;
                *(_DWORD *)&v174[6] = v161;
                *(_WORD *)v175 = 2082;
                *(void *)&v175[2] = v140;
                _os_log_impl(&dword_1830D4000, v141, v142, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
              }

              free(v140);
            }
            else
            {
              if (v143)
              {
                *(_DWORD *)buf = 136447234;
                v171 = "nw_necp_append_tlv";
                __int16 v172 = 2048;
                *(void *)v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = v22;
                *(_WORD *)&v173[18] = 1024;
                *(_DWORD *)v174 = 102;
                *(_WORD *)&v174[4] = 1024;
                *(_DWORD *)&v174[6] = v161;
                _os_log_impl(&dword_1830D4000, v141, v142, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
              }
            }
            goto LABEL_331;
          }
          BOOL v119 = __nwlog_obj();
          os_log_type_t v157 = type;
          if (os_log_type_enabled(v119, type))
          {
            *(_DWORD *)buf = 136447234;
            v171 = "nw_necp_append_tlv";
            __int16 v172 = 2048;
            *(void *)v173 = v35;
            *(_WORD *)&v173[8] = 2048;
            *(void *)&v173[10] = v22;
            *(_WORD *)&v173[18] = 1024;
            *(_DWORD *)v174 = 102;
            *(_WORD *)&v174[4] = 1024;
            *(_DWORD *)&v174[6] = a5;
            _os_log_impl(&dword_1830D4000, v119, v157, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
          }
        }

LABEL_331:
        os_log_type_t v51 = v163;
        if (!v118) {
          goto LABEL_334;
        }
        v159 = (char *)v118;
LABEL_333:
        free(v159);
LABEL_334:
        unint64_t v35 = 0;
        BOOL v50 = v15;
        os_log_type_t v49 = v164;
        if (!v164) {
          goto LABEL_138;
        }
        goto LABEL_72;
      }
      id v107 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v171 = "nw_necp_append_tlv";
      uint64_t v104 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v165 = 0;
      if (__nwlog_fault(v104, &type, &v165))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v105 = __nwlog_obj();
          os_log_type_t v108 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)buf = 136446210;
            v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v105, v108, "%{public}s called with null beyond", buf, 0xCu);
          }
LABEL_322:

          goto LABEL_323;
        }
        if (!v165)
        {
          char v105 = __nwlog_obj();
          os_log_type_t v155 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)buf = 136446210;
            v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v105, v155, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_322;
        }
        os_log_type_t v132 = (char *)__nw_create_backtrace_string();
        char v105 = __nwlog_obj();
        os_log_type_t v135 = type;
        BOOL v136 = os_log_type_enabled(v105, type);
        if (!v132)
        {
          if (v136)
          {
            *(_DWORD *)buf = 136446210;
            v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v105, v135, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
          }
          goto LABEL_322;
        }
        if (v136)
        {
          *(_DWORD *)buf = 136446466;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2082;
          *(void *)v173 = v132;
          _os_log_impl(&dword_1830D4000, v105, v135, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_242;
      }
    }
    else
    {
      int v103 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v171 = "nw_necp_append_tlv";
      uint64_t v104 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v165 = 0;
      if (__nwlog_fault(v104, &type, &v165))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v105 = __nwlog_obj();
          os_log_type_t v106 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)buf = 136446210;
            v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v105, v106, "%{public}s called with null tlv_start", buf, 0xCu);
          }
          goto LABEL_322;
        }
        if (!v165)
        {
          char v105 = __nwlog_obj();
          os_log_type_t v154 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)buf = 136446210;
            v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v105, v154, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_322;
        }
        os_log_type_t v132 = (char *)__nw_create_backtrace_string();
        char v105 = __nwlog_obj();
        os_log_type_t v133 = type;
        BOOL v134 = os_log_type_enabled(v105, type);
        if (!v132)
        {
          if (v134)
          {
            *(_DWORD *)buf = 136446210;
            v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v105, v133, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
          }
          goto LABEL_322;
        }
        if (v134)
        {
          *(_DWORD *)buf = 136446466;
          v171 = "nw_necp_append_tlv";
          __int16 v172 = 2082;
          *(void *)v173 = v132;
          _os_log_impl(&dword_1830D4000, v105, v133, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_242:

        free(v132);
      }
    }
LABEL_323:
    os_log_type_t v51 = v163;
    if (!v104) {
      goto LABEL_334;
    }
    v159 = (char *)v104;
    goto LABEL_333;
  }
  __int16 v84 = __nwlog_obj();
  os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v171 = "strict_calloc";
  __int16 v172 = 2048;
  *(void *)v173 = 1;
  *(_WORD *)&v173[8] = 2048;
  *(void *)&v173[10] = v19;
  unsigned int v85 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v85);
  if (!result)
  {
    free(v85);
    __int16 v86 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v171 = "nw_necp_append_tlv";
    uint64_t v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (__nwlog_fault(v87, &type, &v165))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v88 = __nwlog_obj();
        os_log_type_t v89 = type;
        if (os_log_type_enabled(v88, type))
        {
          *(_DWORD *)buf = 136446210;
          v171 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }
      else if (v165)
      {
        id v109 = (char *)__nw_create_backtrace_string();
        __int16 v88 = __nwlog_obj();
        os_log_type_t v110 = type;
        BOOL v111 = os_log_type_enabled(v88, type);
        if (v109)
        {
          if (v111)
          {
            *(_DWORD *)buf = 136446466;
            v171 = "nw_necp_append_tlv";
            __int16 v172 = 2082;
            *(void *)v173 = v109;
            _os_log_impl(&dword_1830D4000, v88, v110, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v109);
          goto LABEL_276;
        }
        if (v111)
        {
          *(_DWORD *)buf = 136446210;
          v171 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v88, v110, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v88 = __nwlog_obj();
        os_log_type_t v149 = type;
        if (os_log_type_enabled(v88, type))
        {
          *(_DWORD *)buf = 136446210;
          v171 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v88, v149, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_276:
    if (v87) {
      free(v87);
    }
    unint64_t v22 = v19;
    goto LABEL_51;
  }
LABEL_339:
  __break(1u);
  return result;
}

void sub_183B13338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_create_assign_message(size_t *a1, _OWORD *a2, unsigned int a3, const void *a4, unsigned int a5, void *a6, void *a7)
{
  return nw_path_create_assign_message_internal(a1, a2, a3, a4, a5, a6, a7, 0);
}

BOOL nw_path_create_browse_result(void *a1, void *a2)
{
  return nw_path_create_endpoint_array_result(a1, a2, 202);
}

BOOL nw_path_create_endpoint_array_result(void *a1, void *a2, char a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v5 = a2;
  unint64_t v6 = v5;
  uint64_t v23 = 0;
  size_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  BOOL v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  if (a1) {
    *a1 = 0;
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke;
  v18[3] = &unk_1E5248058;
  void v18[4] = &v19;
  nw_array_apply(v5, (uint64_t)v18);
  unint64_t v7 = v20[3];
  if (!v7) {
    goto LABEL_14;
  }
  if (v7 >= 0x6000)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      if (v6) {
        uint64_t v9 = (uint64_t)(*((void *)v6 + 3) - *((void *)v6 + 2)) >> 3;
      }
      else {
        uint64_t v9 = 0;
      }
      unint64_t v12 = v20[3];
      *(_DWORD *)buf = 136446722;
      id v28 = "nw_path_create_endpoint_array_result";
      __int16 v29 = 2048;
      uint64_t v30 = v9;
      __int16 v31 = 2048;
      unint64_t v32 = v12;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s Endpoint array too large; number of endpoints: %zu, total size: %zu",
        buf,
        0x20u);
    }

LABEL_14:
    id v10 = 0;
LABEL_15:
    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v23, 8);

    return (BOOL)v10;
  }
  id v10 = (char *)malloc_type_calloc(1uLL, v20[3], 0xEAFB8F1AuLL);
  if (v10)
  {
LABEL_9:
    size_t v11 = &v10[v20[3]];
    v24[3] = (uint64_t)v10;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke_31;
    v16[3] = &unk_1E5246E58;
    char v17 = a3;
    void v16[4] = &v23;
    void v16[5] = v11;
    nw_array_apply(v6, (uint64_t)v16);
    if (a1) {
      *a1 = v20[3];
    }
    goto LABEL_15;
  }
  id v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  id v28 = "strict_calloc";
  __int16 v29 = 2048;
  uint64_t v30 = 1;
  __int16 v31 = 2048;
  unint64_t v32 = v7;
  id v15 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_183B136AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += nw_path_struct_size_for_endpoint_and_metadata(v4, 0, 7);

  return 1;
}

void sub_183B1372C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke_31(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_path_evaluator_add_endpoint_to_necp_message(v4, *(unsigned __int8 *)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 32) + 8)+ 24), *(void *)(a1 + 40), 7);

  return 1;
}

void sub_183B13790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_create_resolve_result(void *a1, void *a2)
{
  return nw_path_create_endpoint_array_result(a1, a2, 203);
}

BOOL nw_path_create_group_members_result(void *a1, void *a2)
{
  return nw_path_create_endpoint_array_result(a1, a2, 213);
}

uint64_t __nw_path_create_necp_agent_group_action_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += nw_path_struct_size_for_endpoint_and_metadata(v4, 0, 7);
  ++*(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return 1;
}

void sub_183B13814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_create_necp_agent_group_action_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(a1[4] + 8) + 24) = nw_path_evaluator_add_endpoint_to_necp_message(v4, 213, *(void *)(*(void *)(a1[4] + 8) + 24), a1[6] + *(void *)(*(void *)(a1[5] + 8) + 24) + 18, 7);

  return 1;
}

void sub_183B1388C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sa_dst_compare(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v15 = "sa_dst_compare";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare";
      unint64_t v7 = "%{public}s called with null dst1";
      goto LABEL_33;
    }
    if (!v12)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare";
      unint64_t v7 = "%{public}s called with null dst1, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare";
      unint64_t v7 = "%{public}s called with null dst1, no backtrace";
      goto LABEL_33;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      id v15 = "sa_dst_compare";
      __int16 v16 = 2082;
      char v17 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null dst1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v4) {
      return 0;
    }
LABEL_35:
    free(v4);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v15 = "sa_dst_compare";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare";
      unint64_t v7 = "%{public}s called with null dst2";
      goto LABEL_33;
    }
    if (!v12)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare";
      unint64_t v7 = "%{public}s called with null dst2, backtrace limit exceeded";
      goto LABEL_33;
    }
    id v10 = (char *)__nw_create_backtrace_string();
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        id v15 = "sa_dst_compare";
        __int16 v16 = 2082;
        char v17 = v10;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null dst2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v10);
      if (!v4) {
        return 0;
      }
      goto LABEL_35;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare";
      unint64_t v7 = "%{public}s called with null dst2, no backtrace";
LABEL_33:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }

  return sa_dst_compare_internal(a1, a3, a2, a3, 1);
}

uint64_t sa_dst_compare_no_stats(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v15 = "sa_dst_compare_no_stats";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      unint64_t v7 = "%{public}s called with null dst1";
      goto LABEL_33;
    }
    if (!v12)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      unint64_t v7 = "%{public}s called with null dst1, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      unint64_t v7 = "%{public}s called with null dst1, no backtrace";
      goto LABEL_33;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      id v15 = "sa_dst_compare_no_stats";
      __int16 v16 = 2082;
      char v17 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null dst1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v4) {
      return 0;
    }
LABEL_35:
    free(v4);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v15 = "sa_dst_compare_no_stats";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      unint64_t v7 = "%{public}s called with null dst2";
      goto LABEL_33;
    }
    if (!v12)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      unint64_t v7 = "%{public}s called with null dst2, backtrace limit exceeded";
      goto LABEL_33;
    }
    id v10 = (char *)__nw_create_backtrace_string();
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        id v15 = "sa_dst_compare_no_stats";
        __int16 v16 = 2082;
        char v17 = v10;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null dst2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v10);
      if (!v4) {
        return 0;
      }
      goto LABEL_35;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      unint64_t v7 = "%{public}s called with null dst2, no backtrace";
LABEL_33:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }

  return sa_dst_compare_internal(a1, a3, a2, a3, 0);
}

uint64_t sa_dst_compare_no_dependencies(uint64_t a1, uint64_t a2)
{
  *(void *)&v49[5] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "sa_dst_compare_no_dependencies";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v36, &type, &v44)) {
      goto LABEL_143;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v44)
      {
        os_log_type_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_143;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        BOOL v39 = "%{public}s called with null dst1, backtrace limit exceeded";
        goto LABEL_142;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v37 = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v41 = os_log_type_enabled(v37, type);
      if (!backtrace_string)
      {
        if (!v41) {
          goto LABEL_143;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        BOOL v39 = "%{public}s called with null dst1, no backtrace";
        goto LABEL_142;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        __int16 v48 = 2082;
        *(void *)os_log_type_t v49 = backtrace_string;
        os_log_type_t v42 = "%{public}s called with null dst1, dumping backtrace:%{public}s";
LABEL_132:
        _os_log_impl(&dword_1830D4000, v37, v38, v42, buf, 0x16u);
      }
LABEL_133:
      free(backtrace_string);
      goto LABEL_143;
    }
    os_log_type_t v37 = __nwlog_obj();
    os_log_type_t v38 = type;
    if (!os_log_type_enabled(v37, type)) {
      goto LABEL_143;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "sa_dst_compare_no_dependencies";
    BOOL v39 = "%{public}s called with null dst1";
LABEL_142:
    _os_log_impl(&dword_1830D4000, v37, v38, v39, buf, 0xCu);
LABEL_143:
    if (v36) {
      free(v36);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "sa_dst_compare_no_dependencies";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v36, &type, &v44)) {
      goto LABEL_143;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v37 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (!os_log_type_enabled(v37, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v47 = "sa_dst_compare_no_dependencies";
      BOOL v39 = "%{public}s called with null dst2";
      goto LABEL_142;
    }
    if (!v44)
    {
      os_log_type_t v37 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (!os_log_type_enabled(v37, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v47 = "sa_dst_compare_no_dependencies";
      BOOL v39 = "%{public}s called with null dst2, backtrace limit exceeded";
      goto LABEL_142;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v37 = __nwlog_obj();
    os_log_type_t v38 = type;
    BOOL v43 = os_log_type_enabled(v37, type);
    if (backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        __int16 v48 = 2082;
        *(void *)os_log_type_t v49 = backtrace_string;
        os_log_type_t v42 = "%{public}s called with null dst2, dumping backtrace:%{public}s";
        goto LABEL_132;
      }
      goto LABEL_133;
    }
    if (!v43) {
      goto LABEL_143;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "sa_dst_compare_no_dependencies";
    BOOL v39 = "%{public}s called with null dst2, no backtrace";
    goto LABEL_142;
  }
  int v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == 2) {
    goto LABEL_17;
  }
  if (v2 != 30)
  {
    unsigned int v5 = 0;
    goto LABEL_26;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  int v4 = (unsigned __int16)v3;
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 12)) {
      goto LABEL_23;
    }
    int v6 = *(_DWORD *)(a1 + 16);
    if (v6 != -65536)
    {
      if (!v6)
      {
        int v7 = *(_DWORD *)(a1 + 20);
        if (v7)
        {
          if (v7 == 0x1000000)
          {
            unsigned int v5 = 50;
            goto LABEL_26;
          }
LABEL_22:
          unsigned int v5 = 1;
          goto LABEL_26;
        }
      }
LABEL_23:
      if (v4 == 65087) {
        unsigned int v5 = 1;
      }
      else {
        unsigned int v5 = 40;
      }
      goto LABEL_26;
    }
LABEL_17:
    unsigned int v5 = 35;
    goto LABEL_26;
  }
  if ((unsigned __int16)v3 == 544)
  {
    unsigned int v5 = 30;
    goto LABEL_26;
  }
  if ((unsigned __int16)v3 != 288 || v3 >= 0x10000)
  {
    if ((v3 & 0xFE) == 0xFC)
    {
      unsigned int v5 = 3;
      goto LABEL_26;
    }
    if ((v3 & 0xC0FF) == 0xC0FE) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  unsigned int v5 = 5;
LABEL_26:
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 2) {
    goto LABEL_52;
  }
  if (v8 != 30)
  {
    unsigned int v11 = 0;
    if (!v5) {
      goto LABEL_35;
    }
    goto LABEL_53;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  int v10 = (unsigned __int16)v9;
  if (v9)
  {
    if ((unsigned __int16)v9 == 544)
    {
      unsigned int v11 = 30;
      if (v5 > 0x1E) {
        goto LABEL_53;
      }
      goto LABEL_35;
    }
    if ((unsigned __int16)v9 == 288 && v9 < 0x10000)
    {
      unsigned int v11 = 5;
      if (v5 <= 5) {
        goto LABEL_35;
      }
LABEL_53:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        __int16 v48 = 1024;
        *(_DWORD *)os_log_type_t v49 = v5;
        v49[2] = 1024;
        *(_DWORD *)&v49[3] = v11;
        uint64_t v22 = "%{public}s ND Rule 6, prefer d1, d1 precedence %d > d2 precedence %d";
LABEL_85:
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, v22, buf, 0x18u);
        return 1;
      }
      return 1;
    }
    if ((v9 & 0xFE) == 0xFC)
    {
      unsigned int v11 = 3;
      if (v5 > 3) {
        goto LABEL_53;
      }
      goto LABEL_35;
    }
    if ((v9 & 0xC0FF) == 0xC0FE) {
      goto LABEL_95;
    }
    goto LABEL_97;
  }
  if (*(_DWORD *)(a2 + 12)) {
    goto LABEL_97;
  }
  int v19 = *(_DWORD *)(a2 + 16);
  if (v19 == -65536)
  {
LABEL_52:
    unsigned int v11 = 35;
    if (v5 <= 0x23) {
      goto LABEL_35;
    }
    goto LABEL_53;
  }
  if (!v19)
  {
    int v20 = *(_DWORD *)(a2 + 20);
    if (v20)
    {
      if (v20 == 0x1000000)
      {
        unsigned int v11 = 50;
        goto LABEL_35;
      }
LABEL_95:
      unsigned int v11 = 1;
      if (v5 > 1) {
        goto LABEL_53;
      }
      goto LABEL_35;
    }
  }
LABEL_97:
  if (v10 == 65087) {
    unsigned int v11 = 1;
  }
  else {
    unsigned int v11 = 40;
  }
  if (v5 > v11) {
    goto LABEL_53;
  }
LABEL_35:
  if (v11 > v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v47 = "sa_dst_compare_no_dependencies";
      __int16 v48 = 1024;
      *(_DWORD *)os_log_type_t v49 = v11;
      v49[2] = 1024;
      *(_DWORD *)&v49[3] = v5;
      os_log_type_t v13 = "%{public}s ND Rule 6, prefer d2, d2 precedence %d > d1 precedence %d";
LABEL_90:
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, v13, buf, 0x18u);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  if (v2 == 2)
  {
    unsigned int v23 = bswap32(*(_DWORD *)(a1 + 4));
    BOOL v18 = HIWORD(v23) == 43518 || HIBYTE(v23) == 127;
    int v17 = 14;
    goto LABEL_62;
  }
  if (v2 != 30)
  {
    unsigned int v24 = 0;
    goto LABEL_66;
  }
  int v14 = *(unsigned __int8 *)(a1 + 8);
  if (v14 == 255)
  {
    unsigned int v34 = (*(unsigned char *)(a1 + 9) & 0xF) - 1;
    if (v34 >= 5) {
      unsigned int v24 = 14;
    }
    else {
      unsigned int v24 = dword_183E22628[v34];
    }
  }
  else
  {
    if (v14 == 254)
    {
      unsigned int v15 = *(unsigned __int8 *)(a1 + 9);
      int v16 = v15 & 0xC0;
      if (v15 <= 0xBF) {
        int v17 = 14;
      }
      else {
        int v17 = 5;
      }
      BOOL v18 = v16 == 128;
LABEL_62:
      if (v18) {
        unsigned int v24 = 2;
      }
      else {
        unsigned int v24 = v17;
      }
      goto LABEL_66;
    }
    unsigned int v24 = 14;
    if (!(*(void *)(a1 + 8) | *(void *)(a1 + 15)))
    {
      if (*(unsigned char *)(a1 + 23) == 1) {
        unsigned int v24 = 2;
      }
      else {
        unsigned int v24 = 14;
      }
    }
  }
LABEL_66:
  int v25 = *(unsigned __int8 *)(a2 + 1);
  if (v25 == 2)
  {
    unsigned int v31 = bswap32(*(_DWORD *)(a2 + 4));
    BOOL v30 = HIWORD(v31) == 43518 || HIBYTE(v31) == 127;
    int v29 = 14;
LABEL_78:
    if (v30) {
      unsigned int v32 = 2;
    }
    else {
      unsigned int v32 = v29;
    }
    goto LABEL_82;
  }
  if (v25 == 30)
  {
    int v26 = *(unsigned __int8 *)(a2 + 8);
    if (v26 == 255)
    {
      unsigned int v35 = (*(unsigned char *)(a2 + 9) & 0xF) - 1;
      if (v35 >= 5) {
        unsigned int v32 = 14;
      }
      else {
        unsigned int v32 = dword_183E22628[v35];
      }
      goto LABEL_82;
    }
    if (v26 != 254)
    {
      unsigned int v32 = 14;
      if (!(*(void *)(a2 + 8) | *(void *)(a2 + 15)))
      {
        if (*(unsigned char *)(a2 + 23) == 1) {
          unsigned int v32 = 2;
        }
        else {
          unsigned int v32 = 14;
        }
      }
      goto LABEL_82;
    }
    unsigned int v27 = *(unsigned __int8 *)(a2 + 9);
    int v28 = v27 & 0xC0;
    if (v27 <= 0xBF) {
      int v29 = 14;
    }
    else {
      int v29 = 5;
    }
    BOOL v30 = v28 == 128;
    goto LABEL_78;
  }
  unsigned int v32 = 0;
LABEL_82:
  if (v24 < v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v21 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v47 = "sa_dst_compare_no_dependencies";
      __int16 v48 = 1024;
      *(_DWORD *)os_log_type_t v49 = v24;
      v49[2] = 1024;
      *(_DWORD *)&v49[3] = v32;
      uint64_t v22 = "%{public}s ND Rule 8, prefer d1, d1 scope %d < d2 scope %d";
      goto LABEL_85;
    }
    return 1;
  }
  if (v32 < v24)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v47 = "sa_dst_compare_no_dependencies";
      __int16 v48 = 1024;
      *(_DWORD *)os_log_type_t v49 = v32;
      v49[2] = 1024;
      *(_DWORD *)&v49[3] = v24;
      os_log_type_t v13 = "%{public}s ND Rule 8, prefer d2, d2 scope %d < d1 scope %d";
      goto LABEL_90;
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

NWConcrete_nw_hsts_storage *nw_hsts_storage_create_ns(void *a1)
{
  id v1 = a1;
  int v2 = objc_alloc_init(NWConcrete_nw_hsts_storage);
  HSTSStorage = v2->HSTSStorage;
  v2->HSTSStorage = v1;

  return v2;
}

NWConcrete_nw_protocol_transform *nw_protocol_transform_create()
{
  return objc_alloc_init(NWConcrete_nw_protocol_transform);
}

void nw_protocol_transform_replace_endpoint(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 4, a2);
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_protocol_transform_replace_endpoint";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_protocol_transform_replace_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_protocol_transform_replace_endpoint";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_protocol_transform_replace_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_protocol_transform_replace_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t __nw_protocol_transform_modify_parameters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  bytes_ptr = xpc_data_get_bytes_ptr(v4);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 5, bytes_ptr);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 4, bytes_ptr);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 3, bytes_ptr);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 2, bytes_ptr);

  return 1;
}

void sub_183B18DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_transform_disable_protocol(void *a1, const void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_transform_disable_protocol";
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        int v25 = "nw_protocol_transform_disable_protocol";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          int v25 = "nw_protocol_transform_disable_protocol";
          __int16 v26 = 2082;
          unsigned int v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        int v25 = "nw_protocol_transform_disable_protocol";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        int v25 = "nw_protocol_transform_disable_protocol";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    unsigned int v5 = (void *)v3[5];
    if (!v5)
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      int v7 = (void *)v4[5];
      v4[5] = v6;

      unsigned int v5 = (void *)v4[5];
    }
    xpc_array_set_data(v5, 0xFFFFFFFFFFFFFFFFLL, a2, 0x28uLL);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v25 = "nw_protocol_transform_disable_protocol";
  unsigned int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_transform_disable_protocol";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null protocol_identifier", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_transform_disable_protocol";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null protocol_identifier, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_transform_disable_protocol";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null protocol_identifier, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    int v25 = "nw_protocol_transform_disable_protocol";
    __int16 v26 = 2082;
    unsigned int v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_183B192B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_transform_clear_protocols_at_level(void *a1, int a2)
{
  *(void *)&v35[13] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    switch(a2)
    {
      case 0:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
        xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v30 = 0;
        if (!__nwlog_fault(v6, &type, &v30)) {
          goto LABEL_47;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v7 = (id)gLogObj;
          os_log_type_t v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s Undefined protocol level", buf, 0xCu);
          }
          goto LABEL_65;
        }
        if (!v30)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v7 = (id)gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            _os_log_impl(&dword_1830D4000, v7, v21, "%{public}s Undefined protocol level, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_65;
        }
        backtrace_uuid_string_t string = __nw_create_backtrace_string();
        if (!backtrace_string)
        {
          int v7 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            _os_log_impl(&dword_1830D4000, v7, v23, "%{public}s Undefined protocol level, no backtrace", buf, 0xCu);
          }
          goto LABEL_65;
        }
        int v14 = (char *)backtrace_string;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          __int16 v34 = 2082;
          *(void *)unsigned int v35 = v14;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s Undefined protocol level, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v14);
        if (v6) {
          goto LABEL_48;
        }
        goto LABEL_49;
      case 1:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Link level protocols are currently unsupported", buf, 0xCu);
        }
        goto LABEL_15;
      case 2:
        *((unsigned char *)v3 + 8) |= 4u;
        goto LABEL_49;
      case 3:
        *((unsigned char *)v3 + 8) |= 2u;
        goto LABEL_49;
      case 4:
        *((unsigned char *)v3 + 8) |= 1u;
        goto LABEL_49;
      case 5:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Persistent protocols are currently unsupported", buf, 0xCu);
        }
LABEL_15:

        goto LABEL_49;
      default:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
        __int16 v34 = 1024;
        *(_DWORD *)unsigned int v35 = a2;
        xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v30 = 0;
        if (!__nwlog_fault(v6, &type, &v30)) {
          goto LABEL_47;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v10 = (id)gLogObj;
          os_log_type_t v11 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            __int16 v34 = 1024;
            *(_DWORD *)unsigned int v35 = a2;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Invalid protocol level %u", buf, 0x12u);
          }
LABEL_46:

          goto LABEL_47;
        }
        if (!v30)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v10 = (id)gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            __int16 v34 = 1024;
            *(_DWORD *)unsigned int v35 = a2;
            _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s Invalid protocol level %u, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_46;
        }
        __int16 v17 = __nw_create_backtrace_string();
        if (!v17)
        {
          os_log_type_t v10 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            __int16 v34 = 1024;
            *(_DWORD *)unsigned int v35 = a2;
            _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s Invalid protocol level %u, no backtrace", buf, 0x12u);
          }
          goto LABEL_46;
        }
        os_log_type_t v18 = (char *)v17;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          __int16 v34 = 1024;
          *(_DWORD *)unsigned int v35 = a2;
          v35[2] = 2082;
          *(void *)&v35[3] = v18;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Invalid protocol level %u, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        break;
    }
LABEL_33:
    free(v18);
    if (!v6) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  int v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (__nwlog_fault(v6, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
        _os_log_impl(&dword_1830D4000, v7, v26, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v30)
    {
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v7, type);
      if (v18)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          __int16 v34 = 2082;
          *(void *)unsigned int v35 = v18;
          _os_log_impl(&dword_1830D4000, v7, v27, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_33;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
        _os_log_impl(&dword_1830D4000, v7, v27, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
        _os_log_impl(&dword_1830D4000, v7, v29, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_65:
  }
LABEL_47:
  if (v6) {
LABEL_48:
  }
    free(v6);
LABEL_49:
}

void nw_protocol_transform_set_multipath_service(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((unsigned char *)v3 + 9) |= 2u;
    *((_DWORD *)v3 + 5) = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_protocol_transform_get_multipath_service(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[5];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_no_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 8) = *((unsigned char *)v3 + 8) & 0xF7 | v5;
    goto LABEL_6;
  }
  xpc_object_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_no_proxy";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_proxy";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_no_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_proxy";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_proxy";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_protocol_transform_get_no_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 3) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_no_path_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 0x80;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 8) = v5 & 0x80 | *((unsigned char *)v3 + 8) & 0x7F;
    goto LABEL_6;
  }
  xpc_object_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

BOOL nw_protocol_transform_get_no_path_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[8] < 0;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_tfo(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 32;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 8) = *((unsigned char *)v3 + 8) & 0xDF | v5;
    goto LABEL_6;
  }
  xpc_object_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_tfo";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_tfo";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_protocol_transform_get_tfo(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 5) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_tfo";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_tfo_no_cookie(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 64;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 8) = *((unsigned char *)v3 + 8) & 0xBF | v5;
    goto LABEL_6;
  }
  xpc_object_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_protocol_transform_get_tfo_no_cookie(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 6) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_use_tfo_heuristics(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v2 = (id)gLogObj;
  uint64_t v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s nw_protocol_transform_set_use_tfo_heuristics is deprecated", buf, 0xCu);
    }

    return;
  }
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      char v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v4) {
    free(v4);
  }
}

uint64_t nw_protocol_transform_get_use_tfo_heuristics(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v2 = (id)gLogObj;
  uint64_t v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s nw_protocol_transform_set_use_tfo_heuristics is deprecated", buf, 0xCu);
    }

    return 0;
  }
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v5) {
    free(v5);
  }
  return 0;
}

void nw_protocol_transform_set_fast_open_force_enable(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((unsigned char *)v3 + 9) = *((unsigned char *)v3 + 9) & 0xFE | a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_protocol_transform_get_fast_open_force_enable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 9) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_traffic_class(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((unsigned char *)v3 + 9) |= 4u;
    *((_DWORD *)v3 + 3) = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_traffic_class";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_traffic_class";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_protocol_transform_get_traffic_class(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[3];
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_get_traffic_class";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_get_traffic_class";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_data_mode(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 6) = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_data_mode";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_data_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_data_mode";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_data_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_data_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_protocol_transform_get_data_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[6];
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_get_data_mode";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_data_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_get_data_mode";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_data_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_data_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_set_fallback_mode(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 4) = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_fallback_mode";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_fallback_mode";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_protocol_transform_set_prohibit_direct(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 16;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 8) = *((unsigned char *)v3 + 8) & 0xEF | v5;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_protocol_transform_clear_match_url_schemes(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = (void *)v1[6];
    if (v3)
    {
      xpc_release(v3);
      id v4 = (void *)v2[6];
      v2[6] = 0;
    }
    goto LABEL_4;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_transform_clear_match_url_schemes";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_clear_match_url_schemes";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_transform_clear_match_url_schemes";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_clear_match_url_schemes";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_transform_clear_match_url_schemes";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_4:
}

void sub_183B1D3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_transform_supports_endpoint_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    string_ptr = xpc_string_get_string_ptr(v4);
    uint64_t v5 = 1;
    if (!strcasecmp(string_ptr, *(const char **)(a1 + 40)))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183B1D474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_transform_compare(void *a1, void *a2, int a3)
{
  unint64_t v5 = a1;
  id v6 = a2;
  os_log_type_t v7 = (void **)v6;
  if (!(v5 | (unint64_t)v6))
  {
    uint64_t is_equal = 1;
    goto LABEL_9;
  }
  uint64_t is_equal = 0;
  if (v5 && v6)
  {
    if (*(_DWORD *)(v5 + 16) != *((_DWORD *)v6 + 4)
      || *((unsigned __int8 *)v6 + 8) != *(unsigned __int8 *)(v5 + 8)
      || ((*((unsigned char *)v6 + 9) ^ *(unsigned char *)(v5 + 9)) & 3) != 0)
    {
LABEL_8:
      uint64_t is_equal = 0;
      goto LABEL_9;
    }
    uint64_t is_equal = 0;
    if (((*((unsigned char *)v6 + 9) ^ *(unsigned char *)(v5 + 9)) & 4) == 0 && *(_DWORD *)(v5 + 20) == *((_DWORD *)v6 + 5))
    {
      if (*(_DWORD *)(v5 + 12) == *((_DWORD *)v6 + 3)
        && *(_DWORD *)(v5 + 24) == *((_DWORD *)v6 + 6)
        && (nw_endpoint_is_equal(*(void **)(v5 + 32), *((void **)v6 + 4), 0) & 1) != 0
        && nw_xpc_objects_equal(*(void **)(v5 + 40), v7[5])
        && nw_xpc_objects_equal(*(void **)(v5 + 48), v7[6]))
      {
        uint64_t is_equal = nw_protocol_stack_is_equal(*(void **)(v5 + 56), v7[7], a3);
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
LABEL_9:

  return is_equal;
}

void sub_183B1D5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183B1D624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_transform_is_equal(void *a1, void *a2)
{
  return nw_protocol_transform_compare(a1, a2, 0);
}

uint64_t nw_protocol_transform_get_hash(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA256_Init(&c);
    long long v6 = *(_OWORD *)(v1 + 12);
    __int16 v7 = ((((v1[9] & 2) != 0) << 9) | ((v1[9] & 1) << 8)) & 0xFBFF | (((v1[9] & 4) != 0) << 10) | v1[8];
    __int16 v8 = 0;
    CC_SHA256_Update(&c, &v6, 0x14u);
    CC_SHA256_Final(md, &c);
    uint64_t v2 = [*((id *)v1 + 4) getHash];
    id v3 = (void *)*((void *)v1 + 6);
    if (v3) {
      v2 ^= xpc_hash(v3);
    }
    uint64_t v4 = nw_protocol_stack_get_hash(*((void **)v1 + 7)) ^ v2;
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_183B1D73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_multipath_get_subflow_count(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v19 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_multipath_get_subflow_count_block_invoke;
    v13[3] = &unk_1E524B978;
    char v14 = v1;
    __int16 v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_multipath_get_subflow_count_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    uint64_t v3 = *(unsigned int *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
  long long v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_multipath_get_subflow_count_block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    long long v6 = (os_unfair_lock_s *)*(id *)(v2 + 144);
    __int16 v7 = v6;
    if (v6)
    {
      os_unfair_lock_lock(v6 + 28);
      if (v7[29]._os_unfair_lock_opaque != 2)
      {
        int v19 = 0;
LABEL_34:
        os_unfair_lock_unlock(v7 + 28);
LABEL_35:

        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v19;
        return;
      }
      os_log_type_t v8 = *(id *)&v7[62]._os_unfair_lock_opaque;
      os_log_type_t v9 = v8;
      if (v8)
      {
        *(void *)os_log_type_t type = 0;
        BOOL v39 = type;
        int v41 = 0;
        uint64_t v40 = 0x2020000000;
        if (!nw_endpoint_flow_is_multipath(v8))
        {
LABEL_32:
          int v19 = *((_DWORD *)v39 + 6);
          _Block_object_dispose(type, 8);
LABEL_33:

          goto LABEL_34;
        }
        id v10 = nw_endpoint_flow_copy_connected_socket_wrapper(v9);
        BOOL v11 = (void *)v9[117];
        if (v11)
        {
          os_log_type_t v12 = v11;
          id v13 = v12[4];

          if (v13 && nw_parameters_get_upper_transport_protocol(v13) == 253)
          {
            if (gLogDatapath)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v37 = (id)gLogObj;
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
                _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Querying QUIC for subflow count", buf, 0xCu);
              }
            }
            uint64_t v14 = v9[51];
            if (v14)
            {
              uint64_t v15 = *(void *)(v14 + 24);
              if (v15)
              {
                char v16 = *(uint64_t (**)(void))(v15 + 224);
                if (v16)
                {
                  uint64_t v17 = v16();
                  __int16 v18 = (void **)v17;
                  if (v17)
                  {
                    *((_DWORD *)v39 + 6) = *(_DWORD *)(v17 + 8);
                    nw_array_remove_all_objects(*(void *)v17);
                    if (*v18) {
                      os_release(*v18);
                    }
                    free(v18);
                  }
                }
              }
            }
LABEL_31:

            goto LABEL_32;
          }
        }
        else
        {
          id v13 = 0;
        }
        if (v10)
        {
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___Z44nw_endpoint_flow_get_multipath_subflow_countP27NWConcrete_nw_endpoint_flow_block_invoke;
          char v44 = &unk_1E524A270;
          os_log_type_t v45 = type;
          nw_fd_wrapper_get_fd(v10, buf);
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v20 = (id)gLogObj;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Protocol not supported", buf, 0xCu);
          }
        }
        goto LABEL_31;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v25 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
      os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (__nwlog_fault(v26, type, &v42))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v27 = (id)gLogObj;
          os_log_type_t v28 = type[0];
          if (os_log_type_enabled(v27, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
            _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null endpoint_flow", buf, 0xCu);
          }
        }
        else if (v42)
        {
          backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v27 = (id)gLogObj;
          os_log_type_t v33 = type[0];
          BOOL v34 = os_log_type_enabled(v27, type[0]);
          if (backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v27, v33, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_72;
          }
          if (v34)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
            _os_log_impl(&dword_1830D4000, v27, v33, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v27 = (id)gLogObj;
          os_log_type_t v36 = type[0];
          if (os_log_type_enabled(v27, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
            _os_log_impl(&dword_1830D4000, v27, v36, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_72:
      if (v26) {
        free(v26);
      }
      int v19 = 0;
      goto LABEL_33;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v22, type, &v42))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (id)gLogObj;
        os_log_type_t v24 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v42)
      {
        os_log_type_t v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (id)gLogObj;
        os_log_type_t v30 = type[0];
        BOOL v31 = os_log_type_enabled(v23, type[0]);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v29;
            _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v29);
          goto LABEL_63;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
          _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (id)gLogObj;
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
          _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_63:
    if (v22) {
      free(v22);
    }
    int v19 = 0;
    goto LABEL_35;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u]  has no connected handler", buf, 0x12u);
    }
  }
}

void sub_183B1E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_connection_multipath_get_primary_subflow_interface_index(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_connection_copy_connected_path(v1);
    uint64_t v4 = v3;
    if (v3)
    {
      int v5 = (NWConcrete_nw_path *)v3;
      if (nw_path_network_is_satisfied_update_reason(v5, 0)) {
        uint64_t routed_interface_index = v5->policy_result.routed_interface_index;
      }
      else {
        uint64_t routed_interface_index = 0;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s No connected path", buf, 0xCu);
      }

      uint64_t routed_interface_index = 0;
    }

    goto LABEL_11;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_28:
  if (v10) {
    free(v10);
  }
  uint64_t routed_interface_index = 0;
LABEL_11:

  return routed_interface_index;
}

void sub_183B1E720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_connection_multipath_copy_subflow_counts(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    int v19 = __Block_byref_object_copy__61074;
    uint64_t v20 = __Block_byref_object_dispose__61075;
    id v21 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_multipath_copy_subflow_counts_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v14 = v1;
    BOOL v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_multipath_copy_subflow_counts_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    id v3 = *(id *)(*(void *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
  long long v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __Block_byref_object_copy__61074(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__61075(uint64_t a1)
{
}

void __nw_connection_multipath_copy_subflow_counts_block_invoke(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u]  has no connected handler", buf, 0x12u);
      }
    }
    return;
  }
  long long v6 = (os_unfair_lock_s *)*(id *)(v2 + 144);
  __int16 v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v46 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
    BOOL v47 = (char *)_os_log_send_and_compose_impl();

    v67[0] = OS_LOG_TYPE_ERROR;
    v71[0] = 0;
    if (__nwlog_fault(v47, v67, v71))
    {
      if (v67[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v48 = (id)gLogObj;
        os_log_type_t v49 = v67[0];
        if (os_log_type_enabled(v48, v67[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v71[0])
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v48 = (id)gLogObj;
        os_log_type_t v55 = v67[0];
        BOOL v56 = os_log_type_enabled(v48, v67[0]);
        if (backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v48, v55, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_113;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v48, v55, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v48 = (id)gLogObj;
        os_log_type_t v60 = v67[0];
        if (os_log_type_enabled(v48, v67[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v48, v60, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_113:
    if (v47) {
      free(v47);
    }
    xpc_object_t v13 = 0;
    goto LABEL_65;
  }
  os_log_type_t v8 = v6 + 28;
  os_unfair_lock_lock(v6 + 28);
  if (v7[29]._os_unfair_lock_opaque != 2)
  {
    xpc_object_t v13 = 0;
    goto LABEL_64;
  }
  id v9 = *(id *)&v7[62]._os_unfair_lock_opaque;
  os_log_type_t v10 = v9;
  if (!v9)
  {
    unsigned int v32 = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v50 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
    os_log_type_t v51 = (char *)_os_log_send_and_compose_impl();

    v67[0] = OS_LOG_TYPE_ERROR;
    v71[0] = 0;
    if (__nwlog_fault(v51, v67, v71))
    {
      if (v67[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v52 = (id)gLogObj;
        os_log_type_t v53 = v67[0];
        if (os_log_type_enabled(v52, v67[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v71[0])
      {
        long long v57 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v52 = (id)gLogObj;
        os_log_type_t v58 = v67[0];
        BOOL v59 = os_log_type_enabled(v52, v67[0]);
        if (v57)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v57;
            _os_log_impl(&dword_1830D4000, v52, v58, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v57);
          goto LABEL_122;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v52, v58, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v52 = (id)gLogObj;
        os_log_type_t v61 = v67[0];
        if (os_log_type_enabled(v52, v67[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v52, v61, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_122:
    if (v51) {
      free(v51);
    }
    xpc_object_t v13 = 0;
    goto LABEL_63;
  }
  *(void *)__int16 v67 = 0;
  id v68 = v67;
  uint64_t v69 = 0x2020000000;
  uint64_t v70 = 0;
  id v64 = v9;
  if ((nw_endpoint_flow_is_multipath(v9) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Called on non-Multipath connection", buf, 0xCu);
    }
    goto LABEL_53;
  }
  BOOL v11 = nw_endpoint_flow_copy_connected_socket_wrapper(v10);
  os_log_type_t v12 = v11;
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v30 = (id)gLogObj;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s connected_fd is not yet set", buf, 0xCu);
    }

    os_log_type_t v12 = 0;
    goto LABEL_53;
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = ___Z46nw_endpoint_flow_copy_multipath_subflow_countsP27NWConcrete_nw_endpoint_flow_block_invoke;
  char v79 = &unk_1E524A270;
  os_log_type_t v80 = v67;
  if ((nw_fd_wrapper_get_fd(v11, buf) & 1) == 0)
  {
LABEL_53:
    xpc_object_t v13 = 0;
    goto LABEL_54;
  }
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  BOOL v62 = v12;
  if (!v13)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v38 = (id)gLogObj;
    *(_DWORD *)os_log_type_t v71 = 136446210;
    uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
    BOOL v39 = (char *)_os_log_send_and_compose_impl();

    key[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, key, &type))
    {
      if (key[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v40 = (id)gLogObj;
        os_log_type_t v41 = key[0];
        if (os_log_type_enabled(v40, (os_log_type_t)key[0]))
        {
          *(_DWORD *)os_log_type_t v71 = 136446210;
          uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s xpc_dictionary_create failed", v71, 0xCu);
        }
      }
      else if (type)
      {
        char v42 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v40 = (id)gLogObj;
        os_log_type_t v43 = key[0];
        BOOL v44 = os_log_type_enabled(v40, (os_log_type_t)key[0]);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)os_log_type_t v71 = 136446466;
            uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
            __int16 v73 = 2082;
            v74[0] = v42;
            _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", v71, 0x16u);
          }

          free(v42);
          goto LABEL_85;
        }
        if (v44)
        {
          *(_DWORD *)os_log_type_t v71 = 136446210;
          uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s xpc_dictionary_create failed, no backtrace", v71, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v40 = (id)gLogObj;
        os_log_type_t v45 = key[0];
        if (os_log_type_enabled(v40, (os_log_type_t)key[0]))
        {
          *(_DWORD *)os_log_type_t v71 = 136446210;
          uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_1830D4000, v40, v45, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", v71, 0xCu);
        }
      }
    }
LABEL_85:
    if (v39) {
      free(v39);
    }
    goto LABEL_53;
  }
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(*((void *)v68 + 3) + 32);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    uint64_t v16 = v15 + v14;
    if (!*(_WORD *)(v15 + v14 + 40)) {
      goto LABEL_19;
    }
    *(void *)key = 0;
    uint64_t v76 = 0;
    char v77 = 0;
    if (if_indextoname(*(unsigned __int16 *)(v16 + 40), key))
    {
      xpc_dictionary_set_uint64(v13, key, *(unsigned __int16 *)(v15 + v14 + 42));
      goto LABEL_19;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(unsigned __int16 *)(v16 + 40);
      *(_DWORD *)os_log_type_t v71 = 136446466;
      uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
      __int16 v73 = 1024;
      LODWORD(v74[0]) = v18;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname failed for outif: %d", v71, 0x12u);
    }

    int v19 = **(_DWORD **)(StatusReg + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = (id)gLogObj;
    id v21 = v20;
    if (v19 == 6)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_log_type_t v71 = 136446466;
        uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
        __int16 v73 = 1024;
        LODWORD(v74[0]) = 6;
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname %{darwin.errno}d", v71, 0x12u);
      }
    }
    else
    {
      *(_DWORD *)os_log_type_t v71 = 136446466;
      uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
      __int16 v73 = 1024;
      LODWORD(v74[0]) = v19;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v65 = 0;
      if (!__nwlog_fault(v22, &type, &v65)) {
        goto LABEL_45;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)os_log_type_t v71 = 136446466;
          uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          __int16 v73 = 1024;
          LODWORD(v74[0]) = v19;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s if_indextoname %{darwin.errno}d", v71, 0x12u);
        }
        goto LABEL_32;
      }
      if (!v65)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)os_log_type_t v71 = 136446466;
          uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          __int16 v73 = 1024;
          LODWORD(v74[0]) = v19;
          _os_log_impl(&dword_1830D4000, v23, v29, "%{public}s if_indextoname %{darwin.errno}d, backtrace limit exceeded", v71, 0x12u);
        }
LABEL_32:

LABEL_45:
        if (!v22) {
          goto LABEL_19;
        }
LABEL_46:
        free(v22);
        goto LABEL_19;
      }
      id v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v26 = (id)gLogObj;
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v26, type);
      if (!v25)
      {
        if (v28)
        {
          *(_DWORD *)os_log_type_t v71 = 136446466;
          uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          __int16 v73 = 1024;
          LODWORD(v74[0]) = v19;
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s if_indextoname %{darwin.errno}d, no backtrace", v71, 0x12u);
        }

        goto LABEL_45;
      }
      if (v28)
      {
        *(_DWORD *)os_log_type_t v71 = 136446722;
        uint32_t v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
        __int16 v73 = 1024;
        LODWORD(v74[0]) = v19;
        WORD2(v74[0]) = 2082;
        *(void *)((char *)v74 + 6) = v25;
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s if_indextoname %{darwin.errno}d, dumping backtrace:%{public}s", v71, 0x1Cu);
      }

      free(v25);
      if (v22) {
        goto LABEL_46;
      }
    }
LABEL_19:
    v14 += 72;
  }
  while (v14 != 288);
  os_log_type_t v12 = v62;
LABEL_54:

  BOOL v31 = (void *)*((void *)v68 + 3);
  unsigned int v32 = v64;
  if (v31)
  {
    os_log_type_t v33 = (void *)v31[1];
    if (v33)
    {
      free(v33);
      v31[1] = 0;
    }
    BOOL v34 = (void *)v31[2];
    if (v34)
    {
      free(v34);
      v31[2] = 0;
    }
    os_log_type_t v35 = (void *)v31[4];
    if (v35) {
      free(v35);
    }
    free(v31);
  }
  _Block_object_dispose(v67, 8);
LABEL_63:

  os_log_type_t v8 = v7 + 28;
LABEL_64:
  os_unfair_lock_unlock(v8);
LABEL_65:

  uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8);
  os_log_type_t v37 = *(void **)(v36 + 40);
  *(void *)(v36 + 40) = v13;
}

void sub_183B1FAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_webtransport_create_options()
{
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_webtransport_definition::definition;

  return nw_protocol_create_options(v0);
}

BOOL __nw_protocol_copy_webtransport_definition_block_invoke()
{
  if (nw_protocol_webtransport_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_webtransport_identifier::onceToken, &__block_literal_global_33801);
  }
  xpc_object_t v0 = nw_protocol_definition_create_with_identifier((long long *)nw_protocol_webtransport_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_webtransport_definition::definition;
  nw_protocol_copy_webtransport_definition::nw_protocol_definition_t definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_webtransport_definition::definition, (uint64_t)nw_webtransport_allocate_options, (uint64_t)nw_webtransport_copy_options, (uint64_t)nw_webtransport_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_webtransport_definition::definition, (uint64_t)nw_webtransport_compare_options);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_copy_webtransport_definition::definition, (uint64_t)nw_webtransport_allocate_stream_metadata, (uint64_t)nw_webtransport_deallocate_stream_metadata);
  nw_protocol_definition_set_metadata_comparator((void *)nw_protocol_copy_webtransport_definition::definition, (uint64_t)nw_webtransport_compare_stream_metadata);
  uint64_t v2 = (void *)nw_protocol_copy_webtransport_definition::definition;

  return nw_protocol_register_handle((uint64_t)nw_protocol_webtransport_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_webtransport_create, (uint64_t)nw_protocol_webtransport_accept);
}

uint64_t nw_webtransport_compare_stream_metadata(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (!a2)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v11, &type, &v23)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null handle1", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v23)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null handle1, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null handle1, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
      __int16 v27 = 2082;
      BOOL v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null handle1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_29;
  }
  if (!a3)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v11, &type, &v23)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null handle2", buf, 0xCu);
      }
LABEL_41:

LABEL_42:
      if (v11) {
        free(v11);
      }
      goto LABEL_5;
    }
    if (!v23)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null handle2, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null handle2, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_webtransport_compare_stream_metadata";
      __int16 v27 = 2082;
      BOOL v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null handle2, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_29:

    free(backtrace_string);
    goto LABEL_42;
  }
  if (*(void *)a2 == *(void *)a3
    && ((*(unsigned char *)(a3 + 16) ^ *(unsigned char *)(a2 + 16)) & 7) == 0
    && (a4 || *(void *)(a2 + 8) == *(void *)(a3 + 8)))
  {
    uint64_t v8 = 1;
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v8 = 0;
LABEL_6:

  return v8;
}

void nw_webtransport_deallocate_stream_metadata(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_webtransport_allocate_stream_metadata(void *a1)
{
  id v1 = a1;
  uint64_t v2 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  int v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_183B202C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_webtransport_compare_options(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (!a2)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_webtransport_compare_options";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v11, &type, &v23)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null handle1", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (!v23)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null handle1, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_43;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null handle1, no backtrace", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_webtransport_compare_options";
      __int16 v27 = 2082;
      BOOL v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null handle1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_31;
  }
  if (!a3)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_webtransport_compare_options";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v11, &type, &v23)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null handle2", buf, 0xCu);
      }
LABEL_43:

LABEL_44:
      if (v11) {
        free(v11);
      }
      goto LABEL_10;
    }
    if (!v23)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null handle2, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_43;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null handle2, no backtrace", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_webtransport_compare_options";
      __int16 v27 = 2082;
      BOOL v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null handle2, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_31:

    free(backtrace_string);
    goto LABEL_44;
  }
  if (*(_DWORD *)a2 != *(_DWORD *)a3
    || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a3 + 4)
    || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a3 + 8)
    || *(_DWORD *)(a2 + 12) != *(_DWORD *)(a3 + 12)
    || !a4 && ((*(unsigned char *)(a3 + 16) ^ *(unsigned char *)(a2 + 16)) & 3) != 0)
  {
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = 1;
LABEL_11:

  return v8;
}

void nw_webtransport_deallocate_options(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

uint64_t nw_webtransport_copy_options(void *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t options = nw_webtransport_allocate_options(v3);
    *(_OWORD *)uint64_t options = *(_OWORD *)a2;
    char v6 = *(unsigned char *)(options + 16) & 0xFE | *(unsigned char *)(a2 + 16) & 1;
    *(unsigned char *)(options + 16) = v6;
    *(unsigned char *)(options + 16) = v6 & 0xFD | *(unsigned char *)(a2 + 16) & 2;
    goto LABEL_3;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_webtransport_copy_options";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_webtransport_copy_options";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_webtransport_copy_options";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_webtransport_copy_options";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_webtransport_copy_options";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  uint64_t options = 0;
LABEL_3:

  return options;
}

void sub_183B20AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_webtransport_allocate_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = malloc_type_calloc(1uLL, 0x14uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  int v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *uint64_t v2 = 0;
    v2[1] = 0;
    *((_DWORD *)v2 + 4) = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_183B20C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_copy_webtransport_definition()
{
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_webtransport_definition::definition;

  return v0;
}

BOOL nw_protocol_options_is_webtransport(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_webtransport_definition::definition);

    goto LABEL_5;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_protocol_options_is_webtransport";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_webtransport";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_protocol_options_is_webtransport";
          __int16 v19 = 2082;
          __int16 v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_webtransport";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_webtransport";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  BOOL is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_183B20F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_webtransport_options_get_is_unidirectional(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_options_is_webtransport(v1))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v22 = 0;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = __nw_webtransport_options_get_is_unidirectional_block_invoke;
      v18[3] = &unk_1E5248E90;
      void v18[4] = buf;
      nw_protocol_options_access_handle(v2, v18);
      BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v19)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s protocol options are not webtransport, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s protocol options are not webtransport, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    int v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v19)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_4:

  return v3;
}

void sub_183B214A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_get_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 16) & 1;
  return 1;
}

void nw_webtransport_options_set_is_unidirectional(void *a1, char a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    int v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v6, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (nw_protocol_options_is_webtransport(v3))
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_webtransport_options_set_is_unidirectional_block_invoke;
    v19[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v20 = a2;
    nw_protocol_options_access_handle(v4, v19);
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v6, &type, &v21)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s protocol options are not webtransport, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  id v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s protocol options are not webtransport, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
    __int16 v25 = 2082;
    os_log_type_t v26 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183B219E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_set_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a2 + 16) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

BOOL nw_webtransport_options_get_is_datagram(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_options_is_webtransport(v1))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v22 = 0;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = __nw_webtransport_options_get_is_datagram_block_invoke;
      v18[3] = &unk_1E5248E90;
      void v18[4] = buf;
      nw_protocol_options_access_handle(v2, v18);
      BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v19)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s protocol options are not webtransport, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s protocol options are not webtransport, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    int v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v19)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_4:

  return v3;
}

void sub_183B21F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_get_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 16) & 2) != 0;
  return 1;
}

void nw_webtransport_options_set_is_datagram(void *a1, char a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    int v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v6, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (nw_protocol_options_is_webtransport(v3))
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_webtransport_options_set_is_datagram_block_invoke;
    v19[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v20 = a2;
    nw_protocol_options_access_handle(v4, v19);
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v6, &type, &v21)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s protocol options are not webtransport, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  id v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s protocol options are not webtransport, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
    __int16 v25 = 2082;
    os_log_type_t v26 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183B22484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_set_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a2 + 16) & 0xFD | (2 * *(unsigned char *)(a1 + 32));
  return 1;
}

id *nw_webtransport_create_metadata()
{
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_webtransport_definition::definition;

  return nw_protocol_metadata_create_singleton(v0);
}

BOOL nw_protocol_metadata_is_webtransport(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_webtransport_definition::definition);

    goto LABEL_5;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  BOOL is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_183B227F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_webtransport_metadata_get_stream_id(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v23 = 0;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __nw_webtransport_metadata_get_stream_id_block_invoke;
      v19[3] = &unk_1E5248E90;
      void v19[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_stream_id_block_invoke((uint64_t)v19, v3);
        uint64_t v4 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v4 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = -1;
LABEL_7:

  return v4;
}

void sub_183B22D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 8);
  return 1;
}

void nw_webtransport_metadata_set_stream_id(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (nw_protocol_metadata_is_webtransport(v3))
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_webtransport_metadata_set_stream_id_block_invoke;
    v20[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v20[4] = a2;
    uint64_t v5 = v4[4];
    if (v5) {
      __nw_webtransport_metadata_set_stream_id_block_invoke((uint64_t)v20, v5);
    }
    goto LABEL_5;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v7, &type, &v21)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v21)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v24 = "nw_webtransport_metadata_set_stream_id";
    __int16 v25 = 2082;
    os_log_type_t v26 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_183B23268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 32);
  return 1;
}

BOOL nw_webtransport_metadata_get_is_unidirectional(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v23 = 0;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __nw_webtransport_metadata_get_is_unidirectional_block_invoke;
      v19[3] = &unk_1E5248E90;
      void v19[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_is_unidirectional_block_invoke((uint64_t)v19, v3);
        BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      }
      else
      {
        BOOL v4 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v7) {
    free(v7);
  }
  BOOL v4 = 0;
LABEL_7:

  return v4;
}

void sub_183B237C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 16) & 1;
  return 1;
}

void nw_webtransport_metadata_set_is_unidirectional(void *a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v7, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (nw_protocol_metadata_is_webtransport(v3))
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_webtransport_metadata_set_is_unidirectional_block_invoke;
    v20[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v21 = a2;
    uint64_t v5 = v4[4];
    if (v5) {
      __nw_webtransport_metadata_set_is_unidirectional_block_invoke((uint64_t)v20, v5);
    }
    goto LABEL_5;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v7, &type, &v22)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v22)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
    __int16 v26 = 2082;
    uint64_t v27 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_183B23CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a2 + 16) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

BOOL nw_webtransport_metadata_get_is_datagram(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v23 = 0;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __nw_webtransport_metadata_get_is_datagram_block_invoke;
      v19[3] = &unk_1E5248E90;
      void v19[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_is_datagram_block_invoke((uint64_t)v19, v3);
        BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      }
      else
      {
        BOOL v4 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v7) {
    free(v7);
  }
  BOOL v4 = 0;
LABEL_7:

  return v4;
}

void sub_183B24260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 16) & 2) != 0;
  return 1;
}

void nw_webtransport_metadata_set_is_datagram(void *a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v7, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (nw_protocol_metadata_is_webtransport(v3))
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_webtransport_metadata_set_is_datagram_block_invoke;
    v20[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v21 = a2;
    uint64_t v5 = v4[4];
    if (v5) {
      __nw_webtransport_metadata_set_is_datagram_block_invoke((uint64_t)v20, v5);
    }
    goto LABEL_5;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v7, &type, &v22)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v22)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
    __int16 v26 = 2082;
    uint64_t v27 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_183B24794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a2 + 16) & 0xFD | (2 * *(unsigned char *)(a1 + 32));
  return 1;
}

BOOL nw_webtransport_metadata_get_is_peer_initiated(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v23 = 0;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __nw_webtransport_metadata_get_is_peer_initiated_block_invoke;
      v19[3] = &unk_1E5248E90;
      void v19[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_is_peer_initiated_block_invoke((uint64_t)v19, v3);
        BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      }
      else
      {
        BOOL v4 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v7) {
    free(v7);
  }
  BOOL v4 = 0;
LABEL_7:

  return v4;
}

void sub_183B24CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_is_peer_initiated_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 16) & 4) != 0;
  return 1;
}

void nw_webtransport_metadata_set_is_peer_initiated(void *a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    char v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v7, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (nw_protocol_metadata_is_webtransport(v3))
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_webtransport_metadata_set_is_peer_initiated_block_invoke;
    v20[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v21 = a2;
    uint64_t v5 = v4[4];
    if (v5) {
      __nw_webtransport_metadata_set_is_peer_initiated_block_invoke((uint64_t)v20, v5);
    }
    goto LABEL_5;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v7, &type, &v22)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v22)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s protocol metadata is not webtransport, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
    __int16 v26 = 2082;
    uint64_t v27 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_183B25230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_is_peer_initiated_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a2 + 16) & 0xFB | (4 * *(unsigned char *)(a1 + 32));
  return 1;
}

BOOL nw_protocol_http3_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v26, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
          uint64_t v29 = "%{public}s called with null identifier";
LABEL_73:
          _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
        }
      }
      else if (v50)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v39 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_74;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
          uint64_t v29 = "%{public}s called with null identifier, no backtrace";
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
          uint64_t v29 = "%{public}s called with null identifier, backtrace limit exceeded";
          goto LABEL_73;
        }
      }
    }
LABEL_74:
    if (v26) {
      free(v26);
    }
    return 0;
  }
  id v7 = (char *)malloc_type_calloc(1uLL, 0x560uLL, 0xEAFB8F1AuLL);
  if (v7) {
    goto LABEL_3;
  }
  os_log_type_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = 1;
  *(_WORD *)&uint8_t buf[22] = 2048;
  uint64_t v53 = 1376;
  BOOL v31 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v31);
  if (!result)
  {
    free(v31);
LABEL_3:
    bzero(v7, 0x560uLL);
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v53 = (uint64_t)v7;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __nw_protocol_http3_create_block_invoke;
    aBlock[3] = &unk_1E5246ED8;
    void aBlock[4] = buf;
    *((void *)v7 + 130) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    if (nw_protocol_http3_get_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http3_get_callbacks(void)::onceToken, &__block_literal_global_63);
    }
    *((void *)v7 + 2) = a1;
    *((void *)v7 + 3) = &nw_protocol_http3_get_callbacks(void)::protocol_callbacks;
    *((void *)v7 + 5) = v7;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = v7;
    v7[130] = 0;
    if (nw_protocol_http3_get_listen_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http3_get_listen_callbacks(void)::onceToken, &__block_literal_global_182);
    }
    *((void *)v7 + 17) = &nw_protocol_http3_get_listen_callbacks(void)::listen_protocol_callbacks;
    *((void *)v7 + 20) = v7;
    *((void *)v7 + 21) = -1;
    *((_OWORD *)v7 + 11) = 0u;
    *((_OWORD *)v7 + 13) = 0u;
    *((void *)v7 + 28) = v7 + 216;
    *(_OWORD *)(v7 + 232) = 0u;
    *(void *)(v7 + 246) = 0;
    *((void *)v7 + 24) = v7;
    *((void *)v7 + 25) = v7;
    *((void *)v7 + 141) = 0;
    os_log_type_t v8 = v7 + 1373;
    *(_WORD *)(v7 + 1373) = *(_WORD *)(v7 + 1373) & 0xFFFE | nw_parameters_get_server_mode(a4);
    *((void *)v7 + 157) = nw_parameters_copy_context(a4);
    *((_OWORD *)v7 + 20) = 0u;
    *((_OWORD *)v7 + 21) = 0u;
    *((_OWORD *)v7 + 22) = 0u;
    *((_OWORD *)v7 + 23) = 0u;
    *((_OWORD *)v7 + 16) = 0u;
    *((_OWORD *)v7 + 17) = 0u;
    *((_OWORD *)v7 + 18) = 0u;
    *((_OWORD *)v7 + 19) = 0u;
    *((_OWORD *)v7 + 24) = 0u;
    *((_OWORD *)v7 + 25) = 0u;
    *((_OWORD *)v7 + 26) = 0u;
    *((_OWORD *)v7 + 27) = 0u;
    *((_OWORD *)v7 + 28) = 0u;
    *((_OWORD *)v7 + 29) = 0u;
    *((void *)v7 + 40) = v7 + 312;
    *((void *)v7 + 43) = v7 + 336;
    *((void *)v7 + 45) = v7 + 352;
    *((void *)v7 + 47) = v7 + 368;
    *((_OWORD *)v7 + 51) = 0u;
    *((_OWORD *)v7 + 52) = 0u;
    *((_OWORD *)v7 + 49) = 0u;
    *((_OWORD *)v7 + 50) = 0u;
    *((_OWORD *)v7 + 47) = 0u;
    *((_OWORD *)v7 + 48) = 0u;
    *((_OWORD *)v7 + 45) = 0u;
    *((_OWORD *)v7 + 46) = 0u;
    *((_OWORD *)v7 + 43) = 0u;
    *((_OWORD *)v7 + 44) = 0u;
    *((_OWORD *)v7 + 41) = 0u;
    *((_OWORD *)v7 + 42) = 0u;
    *((_OWORD *)v7 + 39) = 0u;
    *((_OWORD *)v7 + 40) = 0u;
    *((_OWORD *)v7 + 37) = 0u;
    *((_OWORD *)v7 + 38) = 0u;
    *((_OWORD *)v7 + 35) = 0u;
    *((_OWORD *)v7 + 36) = 0u;
    *((_OWORD *)v7 + 33) = 0u;
    *((_OWORD *)v7 + 34) = 0u;
    *((_OWORD *)v7 + 31) = 0u;
    *((_OWORD *)v7 + 32) = 0u;
    *((_OWORD *)v7 + 30) = 0u;
    *(void *)(v7 + 500) = 0x3FFF00003FFFLL;
    *((int32x2_t *)v7 + 66) = vdup_n_s32(0x3FDu);
    *((void *)v7 + 64) = 0x1FF00000064;
    *((void *)v7 + 67) = &nw_qpack_dec_callbacks;
    *((void *)v7 + 73) = v7 + 576;
    *((void *)v7 + 75) = v7 + 592;
    *((void *)v7 + 77) = v7 + 608;
    *((void *)v7 + 79) = v7 + 624;
    *((void *)v7 + 81) = v7 + 640;
    *((void *)v7 + 83) = v7 + 656;
    *((void *)v7 + 85) = v7 + 672;
    *((void *)v7 + 87) = v7 + 688;
    *((void *)v7 + 89) = v7 + 704;
    *((void *)v7 + 110) = 0;
    *((void *)v7 + 111) = v7 + 880;
    *((void *)v7 + 112) = 0;
    *((void *)v7 + 113) = v7 + 896;
    *((void *)v7 + 114) = 0;
    *((void *)v7 + 115) = v7 + 912;
    *((void *)v7 + 116) = 0;
    *((void *)v7 + 117) = v7 + 928;
    *((void *)v7 + 118) = 0;
    *((void *)v7 + 119) = v7 + 944;
    *((void *)v7 + 120) = 0;
    *((void *)v7 + 121) = v7 + 960;
    *((_OWORD *)v7 + 62) = 0u;
    *((void *)v7 + 126) = -1;
    *((_DWORD *)v7 + 318) = 0;
    if (nw_parameters_get_logging_disabled((uint64_t)a4)) {
      int v9 = 0x400000;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = (*(unsigned __int16 *)(v7 + 1373) | (v7[1375] << 16)) & 0xFFBFFFFF;
    _WORD *v8 = *(_WORD *)(v7 + 1373);
    v7[1375] = (v10 | v9) >> 16;
    *((void *)v7 + 127) = 240000;
    if (a3)
    {
      *((void *)v7 + 137) = os_retain(a3);
      if (a4)
      {
LABEL_12:
        os_log_type_t v11 = os_retain(a4);
        goto LABEL_15;
      }
    }
    else
    {
      *((void *)v7 + 137) = 0;
      if (a4) {
        goto LABEL_12;
      }
    }
    os_log_type_t v11 = 0;
LABEL_15:
    *((void *)v7 + 140) = v11;
    os_log_type_t v12 = (void *)*((void *)v7 + 157);
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 0x40000000;
    v48[2] = __nw_protocol_http3_create_block_invoke_2;
    v48[3] = &__block_descriptor_tmp_6_61283;
    v48[4] = v7;
    metadata = nw_http_connection_create_metadata(v12, v48, 0);
    *((void *)v7 + 156) = metadata;
    nw_http_connection_metadata_set_version(metadata, 5);
    id v14 = *((id *)v7 + 156);
    os_log_type_t v15 = &__block_literal_global_61284;
    id v16 = &__block_literal_global_61284;
    if (v14)
    {
      BOOL v17 = (id *)v14;
      id v18 = v17[1];

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v18, nw_protocol_copy_http_connection_definition_definition);

      if (is_equal_unsafe)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_http_connection_metadata_set_send_certificate_block_invoke;
        uint64_t v53 = (uint64_t)&unk_1E5249228;
        os_log_type_t v55 = v7;
        id v20 = &__block_literal_global_61284;
        BOOL v54 = &__block_literal_global_61284;
        if (v17[4])
        {
          (*(void (**)(unsigned char *))&buf[16])(buf);
          os_log_type_t v15 = v54;
        }

        goto LABEL_22;
      }
      uint64_t v36 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
      os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (__nwlog_fault(v33, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v34 = __nwlog_obj();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v34, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
            _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s metadata must be http_connection", buf, 0xCu);
          }
        }
        else if (v50)
        {
          os_log_type_t v43 = (char *)__nw_create_backtrace_string();
          BOOL v34 = __nwlog_obj();
          os_log_type_t v44 = type;
          BOOL v45 = os_log_type_enabled(v34, type);
          if (v43)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v43;
              _os_log_impl(&dword_1830D4000, v34, v44, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v43);
            if (!v33) {
              goto LABEL_22;
            }
            goto LABEL_84;
          }
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
            _os_log_impl(&dword_1830D4000, v34, v44, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          BOOL v34 = __nwlog_obj();
          os_log_type_t v47 = type;
          if (os_log_type_enabled(v34, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
            _os_log_impl(&dword_1830D4000, v34, v47, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_82;
      }
LABEL_83:
      if (!v33)
      {
LABEL_22:

        if ((((unsigned __int16)*v8 | (v7[1375] << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v21 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            char v22 = v7 + 1289;
            int v23 = *((_DWORD *)v7 + 320);
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(_DWORD *)buf = 136447234;
            if (!v7) {
              char v22 = "";
            }
            *(void *)&buf[14] = v22;
            if (v7) {
              uint64_t v24 = " ";
            }
            else {
              uint64_t v24 = "";
            }
            *(_WORD *)&uint8_t buf[22] = 2080;
            uint64_t v53 = (uint64_t)v24;
            LOWORD(v54) = 1024;
            *(_DWORD *)((char *)&v54 + 2) = v23;
            HIWORD(v54) = 2048;
            os_log_type_t v55 = v7;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> created %p", buf, 0x30u);
          }
        }
        return (BOOL)v7;
      }
LABEL_84:
      free(v33);
      goto LABEL_22;
    }
    unsigned int v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v33, &type, &v50)) {
      goto LABEL_83;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v34 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v50)
    {
      uint64_t v40 = (char *)__nw_create_backtrace_string();
      BOOL v34 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v34, type);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v40;
          _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v40);
        goto LABEL_83;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
        _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v34 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
        _os_log_impl(&dword_1830D4000, v34, v46, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_82:

    goto LABEL_83;
  }
  __break(1u);
  return result;
}

uint64_t __nw_protocol_http3_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void __nw_protocol_http3_create_block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (((*(unsigned __int16 *)(v1 + 1373) | (*(unsigned __int8 *)(v1 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v2 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = *(_DWORD *)(v1 + 1280);
        *(_DWORD *)buf = 136446978;
        id v16 = "nw_http3_cancel";
        __int16 v17 = 2082;
        id v18 = (char *)(v1 + 1289);
        __int16 v19 = 2080;
        id v20 = " ";
        __int16 v21 = 1024;
        int v22 = v3;
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u> cancelling", buf, 0x26u);
      }
    }
    BOOL v4 = *(nw_protocol **)(v1 + 880);
    if (v4)
    {
      do
      {
        output_handler = v4[8].output_handler;
        nw_protocol_http3_stream_error(v4, (nw_protocol *)v1, 89);
        BOOL v4 = output_handler;
      }
      while (output_handler);
    }
    char v6 = *(void **)(v1 + 1240);
    if (v6) {
      nw_quic_connection_close_with_error(v6, 256);
    }
    nw_http3_async_close_connection_if_no_stream(v1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_http3_cancel";
  id v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_http3_cancel";
      unsigned int v10 = "%{public}s called with null http3";
      goto LABEL_24;
    }
    if (!v13)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_http3_cancel";
      unsigned int v10 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        id v16 = "nw_http3_cancel";
        __int16 v17 = 2082;
        id v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_http3_cancel";
      unsigned int v10 = "%{public}s called with null http3, no backtrace";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_25:
  if (v7) {
    free(v7);
  }
}

void __nw_protocol_http3_create_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v5 = nw_quic_connection_copy_sec_protocol_metadata(*(void **)(a2 + 1240));
    if (v5)
    {
      char v6 = v5;
      if (!*(void *)(a2 + 1192))
      {
        uint64_t v11 = sec_protocol_metadata_copy_authenticator();
        *(void *)(a2 + 1192) = v11;
        if (v11)
        {
          uint64_t v12 = *(void *)(a2 + 1040);
          char v13 = *(void **)(a2 + 1256);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL34nw_protocol_http3_send_certificatePvP12sec_identity_block_invoke;
          os_log_type_t v33 = (const char *)&unk_1E5246FF0;
          uint64_t v34 = v12;
          nw_queue_context_async(v13, buf);
        }
        else if (((*(unsigned __int16 *)(a2 + 1373) | (*(unsigned __int8 *)(a2 + 1375) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v18 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v19 = *(_DWORD *)(a2 + 1280);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = a2 + 1289;
            *(_WORD *)&uint8_t buf[22] = 2080;
            os_log_type_t v33 = " ";
            LOWORD(v34) = 1024;
            *(_DWORD *)((char *)&v34 + 2) = v19;
            HIWORD(v34) = 2112;
            uint64_t v35 = a3;
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Failed to generate authenticator for identity %@", buf, 0x30u);
          }
        }
        goto LABEL_24;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
      id v7 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v30 = 0;
      if (__nwlog_fault(v7, &type, &v30))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v8 = gLogObj;
          os_log_type_t v9 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_22;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
          unsigned int v10 = "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring";
LABEL_20:
          id v20 = v8;
          os_log_type_t v21 = v9;
LABEL_21:
          _os_log_impl(&dword_1830D4000, v20, v21, v10, buf, 0xCu);
          goto LABEL_22;
        }
        if (!v30)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v8 = gLogObj;
          os_log_type_t v9 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_22;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
          unsigned int v10 = "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring, backtrace limit exceeded";
          goto LABEL_20;
        }
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = gLogObj;
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_22;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
          unsigned int v10 = "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring, no backtrace";
          id v20 = v15;
          os_log_type_t v21 = v16;
          goto LABEL_21;
        }
      }
LABEL_22:
      if (v7) {
        free(v7);
      }
LABEL_24:
      os_release(v6);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
    int v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v22, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
        __int16 v25 = "%{public}s called with null sec_metadata";
        goto LABEL_55;
      }
      if (!v30)
      {
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
        __int16 v25 = "%{public}s called with null sec_metadata, backtrace limit exceeded";
        goto LABEL_55;
      }
      os_log_type_t v28 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v29 = os_log_type_enabled(v23, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v28;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null sec_metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        if (v22) {
          goto LABEL_57;
        }
        return;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
        __int16 v25 = "%{public}s called with null sec_metadata, no backtrace";
LABEL_55:
        _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
    int v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v22, &type, &v30)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
      __int16 v25 = "%{public}s called with null handle";
      goto LABEL_55;
    }
    if (!v30)
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
      __int16 v25 = "%{public}s called with null handle, backtrace limit exceeded";
      goto LABEL_55;
    }
    __int16 v26 = (char *)__nw_create_backtrace_string();
    uint64_t v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v27 = os_log_type_enabled(v23, type);
    if (!v26)
    {
      if (!v27) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
      __int16 v25 = "%{public}s called with null handle, no backtrace";
      goto LABEL_55;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v26;
      _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v26);
  }
LABEL_56:
  if (v22) {
LABEL_57:
  }
    free(v22);
}

void ___ZL34nw_protocol_http3_send_certificatePvP12sec_identity_block_invoke(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v1)
  {
    if (*(_DWORD *)(v1 + 1272) == 3 && !*(void *)(v1 + 912))
    {
      *(_DWORD *)(v1 + 1272) = 2;
      nw_http3_control_stream_process_output(v1);
    }
    else
    {
      *(unsigned char *)(v1 + 1375) = (*(unsigned __int16 *)(v1 + 1373) | (*(unsigned __int8 *)(v1 + 1375) << 16) | 0x40000u) >> 16;
    }
  }
}

void nw_http3_control_stream_process_output(uint64_t a1)
{
  buf[9] = *MEMORY[0x1E4F143B8];
  uint64_t v68 = a1 + 168;
  uint64_t v2 = (unsigned __int16 *)(a1 + 1373);
  while (2)
  {
    uint64_t v98 = 0;
    os_log_type_t v99 = &v98;
    uint64_t v100 = 0x3802000000;
    os_log_type_t v101 = __Block_byref_object_copy__61309;
    BOOL v102 = __Block_byref_object_dispose__61310;
    v103[0] = 0;
    v103[1] = v103;
    switch(*(_DWORD *)(a1 + 1272))
    {
      case 0:
        if (nw_http3_framer_get_output_frames_for_single_http3_frame(v68, 4uLL, 0x3Fu, v103))
        {
          memset((char *)&buf[4] + 6, 0, 25);
          memset((char *)buf + 6, 0, 32);
          LOBYTE(buf[0]) = 1;
          *(_WORD *)((char *)buf + 1) = -129;
          BYTE3(buf[0]) = 7;
          WORD2(buf[0]) = 25664;
          if ((*v2 & 2) != 0)
          {
            uint64_t v19 = 30274;
            if ((*v2 & 4) != 0)
            {
              size_t v20 = 2;
            }
            else
            {
              uint64_t v19 = 51;
              size_t v20 = 1;
            }
            __srCC_SHA256_CTX c = v19;
            memcpy((char *)buf + 6, &__src, v20);
            *((unsigned char *)buf + v20 + 6) = 1;
            uint64_t v3 = v20 + 7;
          }
          else
          {
            uint64_t v3 = 6;
          }
          uint32_t v21 = arc4random();
          if (v21)
          {
            if (v21 > 0x20F)
            {
              if (v21 > 0x210841F)
              {
                __srCC_SHA256_CTX c = bswap64((31 * v21 + 33) | 0xC000000000000000);
                size_t v22 = 8;
              }
              else
              {
                __srCC_SHA256_CTX c = bswap32((31 * v21 + 33) | 0x80000000);
                size_t v22 = 4;
              }
            }
            else
            {
              __srCC_SHA256_CTX c = bswap32((31 * v21 + 33) | 0x4000) >> 16;
              size_t v22 = 2;
            }
          }
          else
          {
            __srCC_SHA256_CTX c = 33;
            size_t v22 = 1;
          }
          memcpy((char *)buf + v3, &__src, v22);
          uint32_t v23 = arc4random();
          if (v23 > 0x3F)
          {
            if (v23 >> 14)
            {
              if (v23 >> 30)
              {
                __srCC_SHA256_CTX c = bswap64(v23 | 0xC000000000000000);
                size_t v24 = 8;
              }
              else
              {
                __srCC_SHA256_CTX c = bswap32(v23 | 0x80000000);
                size_t v24 = 4;
              }
            }
            else
            {
              __srCC_SHA256_CTX c = bswap32(v23 | 0x4000) >> 16;
              size_t v24 = 2;
            }
          }
          else
          {
            __srCC_SHA256_CTX c = v23;
            size_t v24 = 1;
          }
          size_t v25 = v22 + v3;
          memcpy((char *)buf + v25, &__src, v24);
          size_t v26 = v24 + v25;
          *(void *)os_log_type_t type = 0;
          __int16 v94 = type;
          uint64_t v95 = 0x2000000000;
          uint64_t v96 = 0;
          v86[0] = MEMORY[0x1E4F143A8];
          v86[1] = 0x40000000;
          uint64_t v87 = (uint64_t (*)(void *))___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_35;
          __int16 v88 = &unk_1E5247038;
          size_t v90 = v26;
          os_log_type_t v89 = type;
          os_log_type_t v91 = buf;
          uint64_t v92 = a1;
          uint64_t v27 = v99[5];
          do
          {
            if (!v27) {
              break;
            }
            uint64_t v28 = *(void *)(v27 + 32);
            char v29 = v87(v86);
            uint64_t v27 = v28;
          }
          while ((v29 & 1) != 0);
          uint64_t v12 = v85;
          v85[0] = MEMORY[0x1E4F143A8];
          v85[1] = 0x40000000;
          v85[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2;
          v85[3] = &unk_1E5247108;
          v85[5] = a1;
          v85[6] = v26;
          v85[4] = &v98;
          char v30 = type;
          goto LABEL_64;
        }
        goto LABEL_127;
      case 1:
        unint64_t v4 = *(void *)(a1 + 984);
        if (v4 >= 0x40)
        {
          if (v4 >= 0x4000)
          {
            if (v4 >> 30)
            {
              if (v4 >> 62)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
                LODWORD(buf[0]) = 136446466;
                *(void *)((char *)buf + 4) = "_http_vle_encode";
                WORD2(buf[1]) = 2048;
                *(void *)((char *)&buf[1] + 6) = v4;
                BOOL v31 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v31))
                {
                  __break(1u);
                  JUMPOUT(0x183B2767CLL);
                }
                free(v31);
                unsigned int v5 = 0;
                char v6 = (_DWORD **)(v99 + 5);
              }
              else
              {
                unsigned int v5 = 8;
                char v6 = v103;
              }
            }
            else
            {
              unsigned int v5 = 4;
              char v6 = v103;
            }
          }
          else
          {
            unsigned int v5 = 2;
            char v6 = v103;
          }
        }
        else
        {
          unsigned int v5 = 1;
          char v6 = v103;
        }
        if (nw_http3_framer_get_output_frames_for_single_http3_frame(v68, 7uLL, v5, v6))
        {
          buf[0] = 0;
          buf[1] = buf;
          buf[2] = 0x2000000000;
          buf[3] = 0;
          v79[0] = MEMORY[0x1E4F143A8];
          v79[1] = 0x40000000;
          os_log_type_t v80 = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_51;
          uint64_t v81 = &unk_1E5247130;
          char v84 = v5;
          __int16 v82 = buf;
          uint64_t v83 = a1;
          uint64_t v32 = v99[5];
          do
          {
            if (!v32) {
              break;
            }
            uint64_t v33 = *(void *)(v32 + 32);
            char v34 = ((uint64_t (*)(void *))v80)(v79);
            uint64_t v32 = v33;
          }
          while ((v34 & 1) != 0);
          uint64_t v12 = v77;
          v77[0] = MEMORY[0x1E4F143A8];
          v77[1] = 0x40000000;
          v77[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_53;
          v77[3] = &unk_1E5247158;
          char v78 = v5;
          uint8_t v77[4] = &v98;
          v77[5] = a1;
          goto LABEL_63;
        }
        goto LABEL_127;
      case 2:
        id v7 = *(NSObject **)(a1 + 1192);
        if (v7)
        {
          unsigned int size = dispatch_data_get_size(v7);
          if (nw_http3_framer_get_output_frames_for_single_http3_frame(v68, 0xFF8E1EB5uLL, size, v103))
          {
            buf[0] = 0;
            buf[1] = buf;
            buf[2] = 0x2000000000;
            buf[3] = 0;
            v71[0] = MEMORY[0x1E4F143A8];
            v71[1] = 0x40000000;
            uint32_t v72 = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_55;
            __int16 v73 = &unk_1E5247180;
            unsigned int v76 = size;
            os_log_type_t v74 = buf;
            uint64_t v75 = a1;
            uint64_t v9 = v99[5];
            do
            {
              if (!v9) {
                break;
              }
              uint64_t v10 = *(void *)(v9 + 32);
              char v11 = ((uint64_t (*)(void *))v72)(v71);
              uint64_t v9 = v10;
            }
            while ((v11 & 1) != 0);
            uint64_t v12 = v69;
            v69[0] = MEMORY[0x1E4F143A8];
            v69[1] = 0x40000000;
            v69[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_57;
            v69[3] = &unk_1E52471A8;
            unsigned int v70 = size;
            v69[4] = &v98;
            v69[5] = a1;
LABEL_63:
            char v30 = (os_log_type_t *)buf;
LABEL_64:
            _Block_object_dispose(v30, 8);
            goto LABEL_65;
          }
          goto LABEL_127;
        }
        __nwlog_obj();
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
        long long v57 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(__src) = 0;
        if (!__nwlog_fault(v57, type, &__src)) {
          goto LABEL_125;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v58 = __nwlog_obj();
          os_log_type_t v59 = type[0];
          if (!os_log_type_enabled(v58, type[0])) {
            goto LABEL_125;
          }
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
          os_log_type_t v60 = "%{public}s called with null http3->authenticator_data";
        }
        else if ((_BYTE)__src)
        {
          backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
          os_log_type_t v58 = __nwlog_obj();
          os_log_type_t v59 = type[0];
          BOOL v62 = os_log_type_enabled(v58, type[0]);
          if (backtrace_string)
          {
            if (v62)
            {
              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = backtrace_string;
              _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null http3->authenticator_data, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_125;
          }
          if (!v62)
          {
LABEL_125:
            if (v57) {
              free(v57);
            }
            goto LABEL_127;
          }
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
          os_log_type_t v60 = "%{public}s called with null http3->authenticator_data, no backtrace";
        }
        else
        {
          os_log_type_t v58 = __nwlog_obj();
          os_log_type_t v59 = type[0];
          if (!os_log_type_enabled(v58, type[0])) {
            goto LABEL_125;
          }
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
          os_log_type_t v60 = "%{public}s called with null http3->authenticator_data, backtrace limit exceeded";
        }
        _os_log_impl(&dword_1830D4000, v58, v59, v60, (uint8_t *)buf, 0xCu);
        goto LABEL_125;
      case 3:
        uint64_t v13 = *(void *)(a1 + 912);
        if (!v13) {
          goto LABEL_127;
        }
        int v14 = *(unsigned __int16 *)(v13 + 736);
        if ((v14 & 0x400) == 0 || *(void *)(v13 + 528) || *(unsigned char *)(v13 + 634) || *(unsigned char *)(v13 + 635)) {
          goto LABEL_25;
        }
        unsigned int v15 = v14 & 0xFFFFFBFF | (*(unsigned __int8 *)(v13 + 738) << 16);
        *(_WORD *)(v13 + 736) = v14 & 0xFBFF;
        *(unsigned char *)(v13 + 738) = BYTE2(v15);
        uint64_t v16 = *(void *)(v13 + 32);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 24);
          if (v17)
          {
            id v18 = *(void (**)(uint64_t, uint64_t))(v17 + 32);
            if (v18)
            {
              v18(v16, v13);
              goto LABEL_25;
            }
          }
        }
        __nwlog_obj();
        uint64_t v37 = *(void *)(v13 + 32);
        if (v37)
        {
          id v38 = *(const char **)(v37 + 16);
          if (!v38) {
            id v38 = "invalid";
          }
        }
        else
        {
          id v38 = "invalid";
        }
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v38;
        BOOL v39 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(__src) = 0;
        __int16 v67 = (char *)v39;
        if (!__nwlog_fault(v39, type, &__src)) {
          goto LABEL_109;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v40 = __nwlog_obj();
          os_log_type_t v41 = type[0];
          os_log_t v65 = v40;
          if (!os_log_type_enabled(v40, type[0])) {
            goto LABEL_109;
          }
          uint64_t v42 = *(void *)(v13 + 32);
          if (v42)
          {
            os_log_type_t v43 = *(const char **)(v42 + 16);
            if (!v43) {
              os_log_type_t v43 = "invalid";
            }
          }
          else
          {
            os_log_type_t v43 = "invalid";
          }
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v43;
          BOOL v54 = v65;
          os_log_type_t v55 = v41;
          uint64_t v56 = "%{public}s protocol %{public}s has invalid disconnect callback";
LABEL_106:
          _os_log_impl(&dword_1830D4000, v54, v55, v56, (uint8_t *)buf, 0x16u);
          goto LABEL_109;
        }
        if (!(_BYTE)__src)
        {
          __int16 v48 = __nwlog_obj();
          os_log_type_t v49 = type[0];
          os_log_t v66 = v48;
          if (!os_log_type_enabled(v48, type[0])) {
            goto LABEL_109;
          }
          uint64_t v50 = *(void *)(v13 + 32);
          if (v50)
          {
            os_log_type_t v51 = *(const char **)(v50 + 16);
            if (!v51) {
              os_log_type_t v51 = "invalid";
            }
          }
          else
          {
            os_log_type_t v51 = "invalid";
          }
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v51;
          BOOL v54 = v66;
          os_log_type_t v55 = v49;
          uint64_t v56 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
          goto LABEL_106;
        }
        os_log_type_t v44 = (char *)__nw_create_backtrace_string();
        log = __nwlog_obj();
        os_log_type_t v63 = type[0];
        BOOL v45 = os_log_type_enabled(log, type[0]);
        if (v44)
        {
          if (v45)
          {
            uint64_t v46 = *(void *)(v13 + 32);
            if (v46)
            {
              os_log_type_t v47 = *(const char **)(v46 + 16);
              if (!v47) {
                os_log_type_t v47 = "invalid";
              }
            }
            else
            {
              os_log_type_t v47 = "invalid";
            }
            LODWORD(buf[0]) = 136446722;
            *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v47;
            HIWORD(buf[2]) = 2082;
            buf[3] = v44;
            _os_log_impl(&dword_1830D4000, log, v63, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x20u);
          }
          free(v44);
        }
        else if (v45)
        {
          uint64_t v52 = *(void *)(v13 + 32);
          if (v52)
          {
            uint64_t v53 = *(const char **)(v52 + 16);
            if (!v53) {
              uint64_t v53 = "invalid";
            }
          }
          else
          {
            uint64_t v53 = "invalid";
          }
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v53;
          _os_log_impl(&dword_1830D4000, log, v63, "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace", (uint8_t *)buf, 0x16u);
        }
LABEL_109:
        if (v67) {
          free(v67);
        }
LABEL_25:
        uint64_t v12 = &__block_literal_global_34_61316;
        if (v13 != *(void *)(a1 + 912)) {
          goto LABEL_65;
        }
LABEL_127:
        _Block_object_dispose(&v98, 8);
        return;
      default:
        uint64_t v12 = &__block_literal_global_34_61316;
LABEL_65:
        int v35 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
        if ((v35 & 0x40000) != 0)
        {
          *(_DWORD *)(a1 + 1272) = 2;
          unsigned int v36 = v35 & 0xFFFBFFFF;
        }
        else
        {
          if ((v35 & 0x20000) == 0)
          {
            *(_DWORD *)(a1 + 1272) = 3;
LABEL_3:
            ((void (*)(void *))v12[2])(v12);
            _Block_object_dispose(&v98, 8);
            continue;
          }
          *(_DWORD *)(a1 + 1272) = 1;
          unsigned int v36 = v35 & 0xFFFDFFFF;
        }
        *uint64_t v2 = v36;
        *((unsigned char *)v2 + 2) = BYTE2(v36);
        goto LABEL_3;
    }
  }
}

__n128 __Block_byref_object_copy__61309(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t nw_http3_framer_get_output_frames_for_single_http3_frame(uint64_t a1, unint64_t a2, unsigned int a3, _DWORD **a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
    size_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v25, &type, &v31)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      uint64_t v28 = "%{public}s called with null http3_framer";
    }
    else if (v31)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      size_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v30 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
          __int16 v35 = 2082;
          unsigned int v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null http3_framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_60;
      }
      if (!v30)
      {
LABEL_60:
        if (v25) {
          free(v25);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      uint64_t v28 = "%{public}s called with null http3_framer, no backtrace";
    }
    else
    {
      size_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      uint64_t v28 = "%{public}s called with null http3_framer, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0xCu);
    goto LABEL_60;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5
    || (uint64_t v6 = *(void *)(v5 + 24)) == 0
    || (id v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, _DWORD **))(v6 + 88)) == 0)
  {
    size_t v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      __int16 v35 = 2048;
      unsigned int v36 = (const char *)v5;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s Output handler (%p)'s get_output_frames callback is not properly set", buf, 0x16u);
    }
    return 0;
  }
  if (a2 >> 30) {
    int v9 = 8;
  }
  else {
    int v9 = 4;
  }
  if (a2 >= 0x4000) {
    int v10 = v9;
  }
  else {
    int v10 = 2;
  }
  if (a2 >= 0x40) {
    int v11 = v10;
  }
  else {
    int v11 = 1;
  }
  if (a3 >> 30) {
    int v12 = 8;
  }
  else {
    int v12 = 4;
  }
  if (a3 < 0x4000) {
    int v12 = 2;
  }
  if (a3 >= 0x40) {
    int v13 = v12;
  }
  else {
    int v13 = 1;
  }
  uint64_t v14 = (v13 + v11);
  uint64_t v15 = a3 + v14;
  if (!__CFADD__(a3, v14)) {
    goto LABEL_41;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446978;
  char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
  __int16 v35 = 2082;
  unsigned int v36 = "bytes";
  __int16 v37 = 2048;
  uint64_t v38 = v14;
  __int16 v39 = 2048;
  uint64_t v40 = v15;
  uint64_t v16 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v16, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446978;
        char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
        __int16 v35 = 2082;
        unsigned int v36 = "bytes";
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        __int16 v39 = 2048;
        uint64_t v40 = v15;
        uint64_t v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_37:
        _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0x2Au);
      }
    }
    else if (v31)
    {
      size_t v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = gLogObj;
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v20)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136447234;
          char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
          __int16 v35 = 2082;
          unsigned int v36 = "bytes";
          __int16 v37 = 2048;
          uint64_t v38 = v14;
          __int16 v39 = 2048;
          uint64_t v40 = v15;
          __int16 v41 = 2082;
          uint64_t v42 = v20;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v20);
        goto LABEL_38;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446978;
        char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
        __int16 v35 = 2082;
        unsigned int v36 = "bytes";
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        __int16 v39 = 2048;
        uint64_t v40 = v15;
        uint64_t v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_37;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446978;
        char v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
        __int16 v35 = 2082;
        unsigned int v36 = "bytes";
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        __int16 v39 = 2048;
        uint64_t v40 = v15;
        uint64_t v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v16) {
    free(v16);
  }
  id v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, _DWORD **))(*(void *)(v5 + 24) + 88);
  uint64_t v15 = 0xFFFFFFFFLL;
LABEL_41:
  uint64_t v22 = v7(v5, *(void *)(a1 + 24), v15, v15, 0xFFFFFFFFLL, a4);
  if (v22) {
    nw_http3_framer_claim_http3_frame_header(v14, *a4);
  }
  return v22;
}

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_35(void *a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  unint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  uint64_t v5 = *(void *)(*(void *)(a1[4] + 8) + 24);
  unint64_t v6 = a1[5] - v5;
  id v7 = (const void *)(a1[6] + v5);
  if (v6 >= __n)
  {
    memcpy(v4, v7, __n);
  }
  else
  {
    memcpy(v4, v7, a1[5] - v5);
    nw_frame_claim(a2, v8, 0, __n - v6);
  }
  *(void *)(*(void *)(a1[4] + 8) + 24) += __n;
  return 1;
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      if (*(void *)(v4 + 96))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 48);
        unint64_t v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        if (v5 >> 30) {
          int v7 = 9;
        }
        else {
          int v7 = 5;
        }
        if (v5 >= 0x4000) {
          int v8 = v7;
        }
        else {
          int v8 = 3;
        }
        if (v5 >= 0x40) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = 2;
        }
        nw_http3_framer_write_http3_frame_header(v2 + 168, 4uLL, v5, v9, *v6);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)(v3 + 24) + 96))(v3, v6);
        uint64_t v2 = *(void *)(a1 + 40);
      }
    }
  }
  uint64_t v10 = *(void *)(v2 + 880);
  if (v10)
  {
    char v11 = 0;
    while (1)
    {
      uint64_t v12 = v10;
      uint64_t v10 = *(void *)(v10 + 544);
      if ((*(_WORD *)(v12 + 736) & 0x80) == 0) {
        goto LABEL_18;
      }
      if ((*(_WORD *)(v12 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          os_log_type_t v27 = __nwlog_obj();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            int v28 = *(_DWORD *)(*(void *)(v12 + 336) + 1280);
            uint64_t v29 = *(void *)(v12 + 240);
            *(_DWORD *)buf = 136447490;
            os_log_type_t v49 = "nw_http3_control_stream_process_output_block_invoke_2";
            __int16 v50 = 2082;
            os_log_type_t v51 = (const char *)(v12 + 636);
            __int16 v52 = 2080;
            uint64_t v53 = " ";
            __int16 v54 = 1024;
            int v55 = v28;
            __int16 v56 = 2048;
            uint64_t v57 = v29;
            __int16 v58 = 2048;
            uint64_t v59 = v29;
            _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Marking stream %llu connected after sending SETTINGS", buf, 0x3Au);
          }
        }
      }
      *(unsigned char *)(v12 + 738) |= 8u;
      int v13 = *(void **)(v12 + 392);
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 0x40000000;
      v47[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_37;
      v47[3] = &__block_descriptor_tmp_49_61357;
      v47[4] = v12;
      nw_http_transaction_metadata_set_event_handler(v13, v47);
      *(_WORD *)(v12 + 736) |= 0x40u;
      nw_http3_signal_output_pending(*(void *)(a1 + 40), 1);
      uint64_t v14 = *(void *)(v12 + 48);
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)(v14 + 24);
      if (!v15) {
        break;
      }
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 40);
      if (!v16) {
        break;
      }
      v16(v14, v12);
LABEL_17:
      char v11 = 1;
LABEL_18:
      if (!v10)
      {
        if (v11) {
          nw_http3_signal_output_pending(*(void *)(a1 + 40), 0);
        }
        return;
      }
    }
    __nwlog_obj();
    uint64_t v17 = *(void *)(v12 + 48);
    if (v17)
    {
      os_log_type_t v18 = *(const char **)(v17 + 16);
      if (!v18) {
        os_log_type_t v18 = "invalid";
      }
    }
    else
    {
      os_log_type_t v18 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v49 = "nw_http3_control_stream_process_output_block_invoke_2";
    __int16 v50 = 2082;
    os_log_type_t v51 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v19, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t log = type;
        if (!os_log_type_enabled(v42, type)) {
          goto LABEL_66;
        }
        uint64_t v20 = *(void *)(v12 + 48);
        if (v20)
        {
          BOOL v21 = *(const char **)(v20 + 16);
          if (!v21) {
            BOOL v21 = "invalid";
          }
        }
        else
        {
          BOOL v21 = "invalid";
        }
        char v34 = v42;
        os_log_type_t v35 = log;
        *(_DWORD *)buf = 136446466;
        os_log_type_t v49 = "nw_http3_control_stream_process_output_block_invoke";
        __int16 v50 = 2082;
        os_log_type_t v51 = v21;
        unsigned int v36 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_65;
      }
      if (!v45)
      {
        os_log_type_t v44 = __nwlog_obj();
        os_log_type_t logb = type;
        if (!os_log_type_enabled(v44, type)) {
          goto LABEL_66;
        }
        uint64_t v30 = *(void *)(v12 + 48);
        if (v30)
        {
          char v31 = *(const char **)(v30 + 16);
          if (!v31) {
            char v31 = "invalid";
          }
        }
        else
        {
          char v31 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v49 = "nw_http3_control_stream_process_output_block_invoke";
        __int16 v50 = 2082;
        os_log_type_t v51 = v31;
        char v34 = v44;
        os_log_type_t v35 = logb;
        unsigned int v36 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_65;
      }
      uint64_t v43 = v19;
      backtrace_uuid_string_t string = __nw_create_backtrace_string();
      loga = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v23 = os_log_type_enabled(loga, type);
      if (backtrace_string)
      {
        size_t v24 = (char *)backtrace_string;
        uint64_t v19 = v43;
        if (v23)
        {
          uint64_t v25 = *(void *)(v12 + 48);
          if (v25)
          {
            size_t v26 = *(const char **)(v25 + 16);
            if (!v26) {
              size_t v26 = "invalid";
            }
          }
          else
          {
            size_t v26 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v49 = "nw_http3_control_stream_process_output_block_invoke";
          __int16 v50 = 2082;
          os_log_type_t v51 = v26;
          __int16 v52 = 2082;
          uint64_t v53 = v24;
          __int16 v37 = v24;
          _os_log_impl(&dword_1830D4000, loga, v38, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
          size_t v24 = v37;
          uint64_t v19 = v43;
        }
        free(v24);
        goto LABEL_66;
      }
      uint64_t v19 = v43;
      if (v23)
      {
        uint64_t v32 = *(void *)(v12 + 48);
        if (v32)
        {
          uint64_t v33 = *(const char **)(v32 + 16);
          if (!v33) {
            uint64_t v33 = "invalid";
          }
        }
        else
        {
          uint64_t v33 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v49 = "nw_http3_control_stream_process_output_block_invoke";
        __int16 v50 = 2082;
        os_log_type_t v51 = v33;
        char v34 = loga;
        os_log_type_t v35 = v38;
        unsigned int v36 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_65:
        _os_log_impl(&dword_1830D4000, v34, v35, v36, buf, 0x16u);
      }
    }
LABEL_66:
    if (v19) {
      free(v19);
    }
    goto LABEL_17;
  }
}

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_51(uint64_t a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  uint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  unsigned int v5 = (const void *)(a1 + 48);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  unint64_t v7 = v6 - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v7 >= __n)
  {
    memcpy(v4, v5, __n);
  }
  else
  {
    memcpy(v4, v5, v6 - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    nw_frame_claim(a2, v8, 0, __n - v7);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += __n;
  return 1;
}

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_53(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(v1 + 200);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      if (*(void *)(v3 + 96))
      {
        uint64_t v4 = v1 + 168;
        unsigned int v5 = *(unsigned __int8 *)(result + 48);
        uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(result + 32) + 8) + 40);
        if (v5 < 0x40) {
          unsigned int v7 = 2;
        }
        else {
          unsigned int v7 = 3;
        }
        nw_http3_framer_write_http3_frame_header(v4, 7uLL, v5, v7, *v6);
        uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)(v2 + 24) + 96);
        return v8(v2, v6);
      }
    }
  }
  return result;
}

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_55(uint64_t a1, uint64_t a2)
{
  unsigned int v9 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v9);
  unint64_t v5 = *(unsigned int *)(a1 + 48) - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 40) + 1192);
  if (v5 >= v9)
  {
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2000000000;
    uint64_t v24 = 0;
    uint64_t v17 = 0;
    os_log_type_t v18 = &v17;
    uint64_t v19 = 0x2000000000;
    uint64_t v20 = v4;
    if (v6)
    {
      uint64_t applier = MEMORY[0x1E4F143A8];
      uint64_t v11 = 0x40000000;
      uint64_t v12 = __nw_dispatch_data_copyout_block_invoke;
      int v13 = &unk_1E5242B60;
      uint64_t v15 = &v17;
      unint64_t v16 = v9;
      uint64_t v14 = &v21;
      dispatch_data_apply(v6, &applier);
    }
    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v21, 8);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2000000000;
    uint64_t v24 = 0;
    uint64_t v17 = 0;
    os_log_type_t v18 = &v17;
    uint64_t v19 = 0x2000000000;
    uint64_t v20 = v4;
    if (v6)
    {
      uint64_t applier = MEMORY[0x1E4F143A8];
      uint64_t v11 = 0x40000000;
      uint64_t v12 = __nw_dispatch_data_copyout_block_invoke;
      int v13 = &unk_1E5242B60;
      uint64_t v15 = &v17;
      unint64_t v16 = v5;
      uint64_t v14 = &v21;
      dispatch_data_apply(v6, &applier);
    }
    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v21, 8);
    nw_frame_claim(a2, v7, 0, v9 - v5);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v9;
  return 1;
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_57(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      if (*(void *)(v4 + 96))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 48);
        uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        if (v5 >> 30) {
          int v7 = 16;
        }
        else {
          int v7 = 12;
        }
        if (v5 >= 0x4000) {
          int v8 = v7;
        }
        else {
          int v8 = 10;
        }
        if (v5 >= 0x40) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = 9;
        }
        nw_http3_framer_write_http3_frame_header(v2 + 168, 0xFF8E1EB5uLL, v5, v9, *v6);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)(v3 + 24) + 96))(v3, v6);
        uint64_t v2 = *(void *)(a1 + 40);
      }
    }
  }
  uint64_t v10 = *(void **)(v2 + 1192);
  if (v10)
  {
    os_release(v10);
    *(void *)(*(void *)(a1 + 40) + 1192) = 0;
  }
}

BOOL nw_http3_framer_write_http3_frame_header(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__src) = 0;
    if (!__nwlog_fault(v17, type, &__src)) {
      goto LABEL_50;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      if (!os_log_type_enabled(v18, type[0])) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
      uint64_t v20 = "%{public}s called with null http3_framer";
    }
    else if ((_BYTE)__src)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      BOOL v51 = os_log_type_enabled(v18, type[0]);
      if (backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
          __int16 v61 = 2082;
          *(void *)BOOL v62 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null http3_framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v17) {
          return 0;
        }
        goto LABEL_51;
      }
      if (!v51) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
      uint64_t v20 = "%{public}s called with null http3_framer, no backtrace";
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      if (!os_log_type_enabled(v18, type[0])) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
      uint64_t v20 = "%{public}s called with null http3_framer, backtrace limit exceeded";
    }
LABEL_48:
    os_log_type_t v27 = v18;
    os_log_type_t v28 = v19;
LABEL_49:
    _os_log_impl(&dword_1830D4000, v27, v28, v20, buf, 0xCu);
    goto LABEL_50;
  }
  if (!nw_frame_uses_external_data(a5))
  {
    nw_frame_unclaim(a5, v9, a4, 0);
    LODWORD(__src) = 0;
    uint64_t v14 = nw_frame_unclaimed_bytes(a5, &__src);
    if (v14)
    {
      uint64_t v15 = (char *)v14;
      *(void *)os_log_type_t type = 0;
      if (a2 > 0x3F)
      {
        if (a2 >> 14)
        {
          if (a2 >> 30)
          {
            if (a2 >> 62)
            {
              uint64_t v43 = __nwlog_obj();
              os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446466;
              uint64_t v60 = "_http_vle_encode";
              __int16 v61 = 2048;
              *(void *)BOOL v62 = a2;
              os_log_type_t v44 = (void *)_os_log_send_and_compose_impl();
              BOOL result = __nwlog_abort((uint64_t)v44);
              if (result) {
                goto LABEL_117;
              }
              free(v44);
              unsigned int v16 = 0;
            }
            else
            {
              *(void *)os_log_type_t type = bswap64(a2 | 0xC000000000000000);
              unsigned int v16 = 8;
            }
          }
          else
          {
            *(void *)os_log_type_t type = bswap32(a2 | 0x80000000);
            unsigned int v16 = 4;
          }
        }
        else
        {
          *(void *)os_log_type_t type = bswap32(a2 | 0x4000) >> 16;
          unsigned int v16 = 2;
        }
      }
      else
      {
        *(void *)os_log_type_t type = a2;
        unsigned int v16 = 1;
      }
      uint64_t v45 = v16;
      memcpy(v15, type, v16);
      if (a3 > 0x3F)
      {
        if (a3 >> 14)
        {
          if (a3 >> 30)
          {
            *(void *)os_log_type_t type = bswap64(a3 | 0xC000000000000000);
            unsigned int v46 = 8;
          }
          else
          {
            *(void *)os_log_type_t type = bswap32(a3 | 0x80000000);
            unsigned int v46 = 4;
          }
        }
        else
        {
          *(void *)os_log_type_t type = bswap32(a3 | 0x4000) >> 16;
          unsigned int v46 = 2;
        }
      }
      else
      {
        *(void *)os_log_type_t type = a3;
        unsigned int v46 = 1;
      }
      memcpy(&v15[v45], type, v46);
      uint64_t v29 = v46 + v45;
      if (a4 <= v29) {
        return v29;
      }
      memmove(&v15[v29], &v15[a4], __src - a4);
      uint64_t v47 = a5;
      int v48 = 0;
      int v49 = a4 - v29;
      goto LABEL_101;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v55) = 0;
    if (__nwlog_fault(v17, type, &v55))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = gLogObj;
        os_log_type_t v19 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
        uint64_t v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL";
        goto LABEL_48;
      }
      if (!(_BYTE)v55)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = gLogObj;
        os_log_type_t v19 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
        uint64_t v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL, backtrace limit exceeded";
        goto LABEL_48;
      }
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = gLogObj;
      os_log_type_t v23 = type[0];
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v25)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
          __int16 v61 = 2082;
          *(void *)BOOL v62 = v25;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v25);
      }
      else if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
        uint64_t v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL, no backtrace";
        goto LABEL_57;
      }
    }
LABEL_50:
    if (!v17) {
      return 0;
    }
LABEL_51:
    free(v17);
    return 0;
  }
  nw_frame_unclaim(a5, v9, 0, a4);
  size_t offset = 0;
  uint64_t v10 = nw_frame_copy_external_data(a5, (_DWORD *)&offset + 1, &offset);
  uint64_t v11 = v10;
  if (HIDWORD(offset))
  {
    subrange = dispatch_data_create_subrange(v10, HIDWORD(offset), 0xFFFFFFFFFFFFFFFFLL);
    if (v11) {
      dispatch_release(v11);
    }
    if (subrange) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  subrange = v10;
  if (!v10)
  {
LABEL_13:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__src) = 0;
    if (!__nwlog_fault(v17, type, &__src)) {
      goto LABEL_50;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = gLogObj;
      os_log_type_t v19 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
      uint64_t v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL";
      goto LABEL_48;
    }
    if (!(_BYTE)__src)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = gLogObj;
      os_log_type_t v19 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
      uint64_t v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL, backtrace limit exceeded";
      goto LABEL_48;
    }
    uint64_t v21 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = gLogObj;
    os_log_type_t v23 = type[0];
    BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (v21)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
        __int16 v61 = 2082;
        *(void *)BOOL v62 = v21;
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v21);
      if (!v17) {
        return 0;
      }
      goto LABEL_51;
    }
    if (!v24) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
    uint64_t v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL, no backtrace";
LABEL_57:
    os_log_type_t v27 = v22;
    os_log_type_t v28 = v23;
    goto LABEL_49;
  }
LABEL_7:
  *(void *)os_log_type_t type = 0;
  if (a2 <= 0x3F)
  {
    *(void *)os_log_type_t type = a2;
    unsigned int v13 = 1;
    goto LABEL_60;
  }
  if (!(a2 >> 14))
  {
    *(void *)os_log_type_t type = bswap32(a2 | 0x4000) >> 16;
    unsigned int v13 = 2;
    goto LABEL_60;
  }
  if (!(a2 >> 30))
  {
    *(void *)os_log_type_t type = bswap32(a2 | 0x80000000);
    unsigned int v13 = 4;
    goto LABEL_60;
  }
  if (!(a2 >> 62))
  {
    *(void *)os_log_type_t type = bswap64(a2 | 0xC000000000000000);
    unsigned int v13 = 8;
    goto LABEL_60;
  }
  uint64_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  uint64_t v60 = "_http_vle_encode";
  __int16 v61 = 2048;
  *(void *)BOOL v62 = a2;
  char v31 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v31);
  if (!result)
  {
    free(v31);
    unsigned int v13 = 0;
LABEL_60:
    if (a3 > 0x3F)
    {
      if (a3 >> 14)
      {
        if (a3 >> 30)
        {
          __srCC_SHA256_CTX c = bswap64(a3 | 0xC000000000000000);
          unsigned int v33 = 8;
        }
        else
        {
          __srCC_SHA256_CTX c = bswap32(a3 | 0x80000000);
          unsigned int v33 = 4;
        }
      }
      else
      {
        __srCC_SHA256_CTX c = bswap32(a3 | 0x4000) >> 16;
        unsigned int v33 = 2;
      }
    }
    else
    {
      __srCC_SHA256_CTX c = a3;
      unsigned int v33 = 1;
    }
    uint64_t v29 = v33 + v13;
    uint64_t v55 = 0;
    alloCC_SHA256_CTX c = dispatch_data_create_alloc();
    memcpy((void *)(a4 - v29), type, v13);
    memcpy((void *)(a4 - (unint64_t)v33), &__src, v33);
    concat = dispatch_data_create_concat(alloc, subrange);
    if (alloc) {
      dispatch_release(alloc);
    }
    dispatch_release(subrange);
    unsigned int v54 = 0;
    nw_frame_set_external_data(a5, concat, &v54);
    if (concat) {
      dispatch_release(concat);
    }
    if (v54 == offset)
    {
LABEL_99:
      int v48 = a4 - v29;
      if (a4 > v29)
      {
        uint64_t v47 = a5;
        int v49 = 0;
LABEL_101:
        nw_frame_claim(v47, v36, v48, v49);
      }
      return v29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
    __int16 v61 = 1024;
    *(_DWORD *)BOOL v62 = v54;
    *(_WORD *)&void v62[4] = 1024;
    *(_DWORD *)&v62[6] = offset;
    __int16 v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v53 = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (__nwlog_fault(v37, &v53, &v52))
    {
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v38 = gLogObj;
        os_log_type_t v39 = v53;
        if (!os_log_type_enabled((os_log_t)gLogObj, v53)) {
          goto LABEL_97;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
        __int16 v61 = 1024;
        *(_DWORD *)BOOL v62 = v54;
        *(_WORD *)&void v62[4] = 1024;
        *(_DWORD *)&v62[6] = offset;
        uint64_t v40 = "%{public}s Incorrect frame length set: %u != %u";
        goto LABEL_96;
      }
      if (!v52)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v38 = gLogObj;
        os_log_type_t v39 = v53;
        if (!os_log_type_enabled((os_log_t)gLogObj, v53)) {
          goto LABEL_97;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
        __int16 v61 = 1024;
        *(_DWORD *)BOOL v62 = v54;
        *(_WORD *)&void v62[4] = 1024;
        *(_DWORD *)&v62[6] = offset;
        uint64_t v40 = "%{public}s Incorrect frame length set: %u != %u, backtrace limit exceeded";
        goto LABEL_96;
      }
      __int16 v41 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v38 = gLogObj;
      os_log_type_t v39 = v53;
      BOOL v42 = os_log_type_enabled((os_log_t)gLogObj, v53);
      if (v41)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
          __int16 v61 = 1024;
          *(_DWORD *)BOOL v62 = v54;
          *(_WORD *)&void v62[4] = 1024;
          *(_DWORD *)&v62[6] = offset;
          __int16 v63 = 2082;
          id v64 = v41;
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s Incorrect frame length set: %u != %u, dumping backtrace:%{public}s", buf, 0x22u);
        }
        free(v41);
        goto LABEL_97;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v60 = "nw_http3_framer_write_http3_frame_header";
        __int16 v61 = 1024;
        *(_DWORD *)BOOL v62 = v54;
        *(_WORD *)&void v62[4] = 1024;
        *(_DWORD *)&v62[6] = offset;
        uint64_t v40 = "%{public}s Incorrect frame length set: %u != %u, no backtrace";
LABEL_96:
        _os_log_impl(&dword_1830D4000, v38, v39, v40, buf, 0x18u);
      }
    }
LABEL_97:
    if (v37) {
      free(v37);
    }
    goto LABEL_99;
  }
LABEL_117:
  __break(1u);
  return result;
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_37(uint64_t a1, void *a2, int a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v69[0] = MEMORY[0x1E4F143A8];
        v69[1] = 0x40000000;
        v69[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_38;
        v69[3] = &__block_descriptor_tmp_40_61371;
        v69[4] = *(void *)(a1 + 32);
        id v8 = v6;
        uint64_t v9 = v69;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }
      if (!v7) {
        goto LABEL_40;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      uint64_t v12 = *(void *)(a1 + 32);
      if (v12 && (*(_WORD *)(v12 + 736) & 0x800) != 0) {
        goto LABEL_39;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_36);
      }
      unsigned int v13 = ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_39;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (const char *)(v14 + 636);
      unsigned int v16 = "";
      BOOL v17 = v14 == 0;
      if (!v14) {
        uint64_t v15 = "";
      }
      int v18 = *(_DWORD *)(*(void *)(v14 + 336) + 1280);
      uint64_t v19 = *(void *)(v14 + 240);
      if (!v17) {
        unsigned int v16 = " ";
      }
      *(_DWORD *)buf = 136447490;
      os_log_type_t v71 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v72 = 2082;
      __int16 v73 = v15;
      __int16 v74 = 2080;
      uint64_t v75 = v16;
      __int16 v76 = 1024;
      int v77 = v18;
      __int16 v78 = 2048;
      uint64_t v79 = v19;
      __int16 v80 = 1024;
      LODWORD(v81) = status_code;
      uint64_t v20 = "%{public}s %{public}s%s<i%u:s%llu> sending response header {status=%hu}";
      goto LABEL_38;
    case 1:
      outbound_body_unsigned int size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      uint64_t v22 = *(void *)(a1 + 32);
      if (v22 && (*(_WORD *)(v22 + 736) & 0x800) != 0) {
        return;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_36);
      }
      os_log_type_t v23 = ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = (const char *)(v24 + 636);
      BOOL v26 = "";
      BOOL v27 = v24 == 0;
      if (!v24) {
        uint64_t v25 = "";
      }
      int v28 = *(_DWORD *)(*(void *)(v24 + 336) + 1280);
      uint64_t v29 = *(void *)(v24 + 240);
      if (!v27) {
        BOOL v26 = " ";
      }
      *(_DWORD *)buf = 136447490;
      os_log_type_t v71 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v72 = 2082;
      __int16 v73 = v25;
      __int16 v74 = 2080;
      uint64_t v75 = v26;
      __int16 v76 = 1024;
      int v77 = v28;
      __int16 v78 = 2048;
      uint64_t v79 = v29;
      __int16 v80 = 2048;
      uint64_t v81 = outbound_body_size;
      uint64_t v30 = "%{public}s %{public}s%s<i%u:s%llu> finished sending {body_bytes=%llu}";
      goto LABEL_54;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v31 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v68[0] = MEMORY[0x1E4F143A8];
        v68[1] = 0x40000000;
        v68[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_41;
        v68[3] = &__block_descriptor_tmp_42_61374;
        v68[4] = *(void *)(a1 + 32);
        id v32 = v6;
        unsigned int v33 = v68;
        _nw_http_request_access_method((uint64_t)v32, v33);
      }
      if (v31)
      {
        id v10 = v31;
        int v34 = _nw_http_response_get_status_code();

        uint64_t v35 = *(void *)(a1 + 32);
        if (!v35 || (*(_WORD *)(v35 + 736) & 0x800) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_36);
          }
          unsigned int v13 = ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v36 = *(void *)(a1 + 32);
            __int16 v37 = (const char *)(v36 + 636);
            os_log_type_t v38 = "";
            BOOL v39 = v36 == 0;
            if (!v36) {
              __int16 v37 = "";
            }
            int v40 = *(_DWORD *)(*(void *)(v36 + 336) + 1280);
            uint64_t v41 = *(void *)(v36 + 240);
            if (!v39) {
              os_log_type_t v38 = " ";
            }
            *(_DWORD *)buf = 136447490;
            os_log_type_t v71 = "nw_http3_control_stream_process_output_block_invoke";
            __int16 v72 = 2082;
            __int16 v73 = v37;
            __int16 v74 = 2080;
            uint64_t v75 = v38;
            __int16 v76 = 1024;
            int v77 = v40;
            __int16 v78 = 2048;
            uint64_t v79 = v41;
            __int16 v80 = 1024;
            LODWORD(v81) = v34;
            uint64_t v20 = "%{public}s %{public}s%s<i%u:s%llu> receiving response header {status=%hu}";
LABEL_38:
            _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, v20, buf, 0x36u);
          }
        }
LABEL_39:
        os_release(v10);
      }
LABEL_40:
      if (v6) {
        os_release(v6);
      }
      if (!outbound_message) {
        return;
      }
      BOOL v42 = outbound_message;
      goto LABEL_76;
    case 3:
      inbound_body_unsigned int size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      uint64_t v44 = *(void *)(a1 + 32);
      if (v44 && (*(_WORD *)(v44 + 736) & 0x800) != 0) {
        return;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_36);
      }
      os_log_type_t v23 = ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v45 = *(void *)(a1 + 32);
      unsigned int v46 = (const char *)(v45 + 636);
      uint64_t v47 = "";
      BOOL v48 = v45 == 0;
      if (!v45) {
        unsigned int v46 = "";
      }
      int v49 = *(_DWORD *)(*(void *)(v45 + 336) + 1280);
      uint64_t v50 = *(void *)(v45 + 240);
      if (!v48) {
        uint64_t v47 = " ";
      }
      *(_DWORD *)buf = 136447490;
      os_log_type_t v71 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v72 = 2082;
      __int16 v73 = v46;
      __int16 v74 = 2080;
      uint64_t v75 = v47;
      __int16 v76 = 1024;
      int v77 = v49;
      __int16 v78 = 2048;
      uint64_t v79 = v50;
      __int16 v80 = 2048;
      uint64_t v81 = inbound_body_size;
      uint64_t v30 = "%{public}s %{public}s%s<i%u:s%llu> finished receiving {body_bytes=%llu}";
LABEL_54:
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_INFO, v30, buf, 0x3Au);
      return;
    case 4:
      v63[0] = MEMORY[0x1E4F143A8];
      v63[1] = 0x40000000;
      id v64 = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_43;
      uint64_t v65 = &__block_descriptor_tmp_45_61377;
      uint64_t v51 = *(void *)(a1 + 32);
      os_log_t v66 = a2;
      uint64_t v67 = v51;
      id v52 = nw_http_transaction_metadata_get_outbound_message(a2);
      os_log_type_t v53 = v52;
      if (v52)
      {
        id v54 = nw_http_metadata_copy_request(v52);
        id v55 = nw_http_metadata_copy_response(v53);
        id inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message) {
          goto LABEL_64;
        }
        if (v54)
        {
          if (v55) {
            goto LABEL_65;
          }
          goto LABEL_63;
        }
      }
      else
      {
        id v57 = nw_http_transaction_metadata_get_inbound_message(a2);
        id v55 = 0;
        if (!v57)
        {
          uint64_t v58 = 0;
          id inbound_message = 0;
          goto LABEL_79;
        }
        id inbound_message = v57;
      }
      id v54 = nw_http_metadata_copy_request(inbound_message);
      if (v55) {
        goto LABEL_65;
      }
LABEL_63:
      id v55 = nw_http_metadata_copy_response(inbound_message);
LABEL_64:
      if (!v55)
      {
        uint64_t v58 = 0;
        if (!v54) {
          goto LABEL_79;
        }
LABEL_68:
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 0x40000000;
        v61[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_46;
        v61[3] = &unk_1E52470C0;
        void v61[4] = v63;
        __int16 v62 = v58;
        id v59 = v54;
        uint64_t v60 = v61;
        _nw_http_request_access_method((uint64_t)v59, v60);

        if (!inbound_message) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }
LABEL_65:
      id v55 = v55;
      uint64_t v58 = _nw_http_response_get_status_code();

      if (v54) {
        goto LABEL_68;
      }
LABEL_79:
      v64((uint64_t)v63, (uint64_t)"", v58);
      id v59 = 0;
      if (inbound_message) {
LABEL_69:
      }
        os_release(inbound_message);
LABEL_70:
      if (v53) {
        os_release(v53);
      }
      if (v55) {
        os_release(v55);
      }
      if (v59)
      {
        BOOL v42 = v59;
LABEL_76:
        os_release(v42);
      }
      return;
    default:
      return;
  }
}

void nw_http3_signal_output_pending(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v4 = *(unsigned __int16 *)(a1 + 1373);
    int v5 = v4 | (*(unsigned __int8 *)(a1 + 1375) << 16);
    if (((((v4 & 0x80) == 0) ^ a2) & 1) == 0)
    {
      if (a2) {
        __int16 v6 = 128;
      }
      else {
        __int16 v6 = 0;
      }
      *(unsigned char *)(a1 + 1375) = (v5 & 0xFFFFFF7F) >> 16;
      *(_WORD *)(a1 + 1373) = v5 & 0xFF7F | v6;
      if ((v5 & 0x400000) == 0)
      {
        if (gLogDatapath)
        {
          unsigned int v16 = __nwlog_obj();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            int v17 = *(_DWORD *)(a1 + 1280);
            int v18 = "no longer ";
            *(_DWORD *)buf = 136447234;
            uint64_t v22 = "nw_http3_signal_output_pending";
            __int16 v23 = 2082;
            if (a2) {
              int v18 = "";
            }
            uint64_t v24 = (char *)(a1 + 1289);
            __int16 v25 = 2080;
            BOOL v26 = " ";
            __int16 v27 = 1024;
            int v28 = v17;
            __int16 v29 = 2082;
            uint64_t v30 = v18;
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> signalling output %{public}spending", buf, 0x30u);
          }
        }
      }
      uint64_t v7 = *(void *)(a1 + 32);
      buf[0] = a2;
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 24);
        if (v8)
        {
          uint64_t v9 = *(void (**)(void))(v8 + 160);
          if (v9) {
            v9();
          }
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_http3_signal_output_pending";
  id v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v10, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_http3_signal_output_pending";
      unsigned int v13 = "%{public}s called with null http3";
      goto LABEL_30;
    }
    if (!v19)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_http3_signal_output_pending";
      unsigned int v13 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_30;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "nw_http3_signal_output_pending";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_http3_signal_output_pending";
      unsigned int v13 = "%{public}s called with null http3, no backtrace";
LABEL_30:
      _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_31:
  if (v10) {
    free(v10);
  }
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_38(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_36);
    }
    int v5 = ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = (const char *)(v6 + 636);
      uint64_t v8 = "";
      BOOL v9 = v6 == 0;
      if (!v6) {
        uint64_t v7 = "";
      }
      int v10 = *(_DWORD *)(*(void *)(v6 + 336) + 1280);
      uint64_t v11 = *(void *)(v6 + 240);
      if (!v9) {
        uint64_t v8 = " ";
      }
      int v12 = 136447490;
      unsigned int v13 = "nw_http3_control_stream_process_output_block_invoke_2";
      __int16 v14 = 2082;
      BOOL v15 = v7;
      __int16 v16 = 2080;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 2048;
      uint64_t v21 = v11;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> sending request header {method=\"%{public}s\"}", (uint8_t *)&v12, 0x3Au);
    }
  }
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_41(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_36);
    }
    int v5 = ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = (const char *)(v6 + 636);
      uint64_t v8 = "";
      BOOL v9 = v6 == 0;
      if (!v6) {
        uint64_t v7 = "";
      }
      int v10 = *(_DWORD *)(*(void *)(v6 + 336) + 1280);
      uint64_t v11 = *(void *)(v6 + 240);
      if (!v9) {
        uint64_t v8 = " ";
      }
      int v12 = 136447490;
      unsigned int v13 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v14 = 2082;
      BOOL v15 = v7;
      __int16 v16 = 2080;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 2048;
      uint64_t v21 = v11;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> receiving request header {method=\"%{public}s\"}", (uint8_t *)&v12, 0x3Au);
    }
  }
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_43(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_unsigned int size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_unsigned int size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12 || (*(_WORD *)(v12 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_36);
    }
    unsigned int v13 = ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14) {
        BOOL v15 = (const char *)(v14 + 636);
      }
      else {
        BOOL v15 = "";
      }
      if (v14) {
        __int16 v16 = " ";
      }
      else {
        __int16 v16 = "";
      }
      uint64_t v31 = v15;
      id v32 = v16;
      if ((start_reason - 1) > 2) {
        int v17 = "initial";
      }
      else {
        int v17 = off_1E52492C0[start_reason - 1];
      }
      int v28 = v17;
      int v29 = *(_DWORD *)(*(void *)(v14 + 336) + 1280);
      uint64_t v30 = *(void *)(v14 + 240);
      int v18 = -1;
      if (start_time && end_time)
      {
        unint64_t v19 = nw_delta_nanos(start_time, end_time);
        if (v19 > 0xF423FFFFFFFFFLL) {
          int v18 = -1;
        }
        else {
          int v18 = v19 / 0xF4240;
        }
      }
      int v20 = -1;
      if (start_time && outbound_message_start_time)
      {
        unint64_t v21 = nw_delta_nanos(start_time, outbound_message_start_time);
        if (v21 > 0xF423FFFFFFFFFLL) {
          int v20 = -1;
        }
        else {
          int v20 = v21 / 0xF4240;
        }
      }
      int v22 = -1;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        unint64_t v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        if (v23 > 0xF423FFFFFFFFFLL) {
          int v22 = -1;
        }
        else {
          int v22 = v23 / 0xF4240;
        }
      }
      int v24 = -1;
      if (start_time && inbound_message_start_time)
      {
        unint64_t v25 = nw_delta_nanos(start_time, inbound_message_start_time);
        if (v25 > 0xF423FFFFFFFFFLL) {
          int v24 = -1;
        }
        else {
          int v24 = v25 / 0xF4240;
        }
      }
      LODWORD(v26) = -1;
      if (inbound_message_start_time && inbound_message_end_time)
      {
        unint64_t v27 = nw_delta_nanos(inbound_message_start_time, inbound_message_end_time);
        unint64_t v26 = v27 / 0xF4240;
        if (v27 > 0xF423FFFFFFFFFLL) {
          LODWORD(v26) = -1;
        }
      }
      *(_DWORD *)buf = 136449794;
      __int16 v37 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v38 = 2082;
      BOOL v39 = v31;
      __int16 v40 = 2080;
      uint64_t v41 = v32;
      __int16 v42 = 1024;
      int v43 = v29;
      __int16 v44 = 2048;
      uint64_t v45 = v30;
      __int16 v46 = 2080;
      uint64_t v47 = v28;
      __int16 v48 = 1024;
      int v49 = v18;
      __int16 v50 = 2082;
      uint64_t v51 = a2;
      __int16 v52 = 1024;
      int v53 = a3;
      __int16 v54 = 1024;
      int v55 = v20;
      __int16 v56 = 1024;
      int v57 = v22;
      __int16 v58 = 1024;
      int v59 = v24;
      __int16 v60 = 1024;
      int v61 = v26;
      __int16 v62 = 2048;
      uint64_t v63 = outbound_body_size;
      __int16 v64 = 2048;
      uint64_t v65 = inbound_body_size;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:s%llu> transaction summary {start_reason=\"%s\", duration_ms=%d, request_method=\"%{public}s\", response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}", buf, 0x7Cu);
    }
  }
}

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_46(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 40));
}

void nw_http3_framer_claim_http3_frame_header(unsigned int a1, _DWORD *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = nw_frame_unclaimed_length(a2);
  if (v4 < a1)
  {
    unsigned int v5 = v4;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    __int16 v22 = 1024;
    unsigned int v23 = a1;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v6, &type, &v16)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
      __int16 v20 = 1024;
      unsigned int v21 = v5;
      __int16 v22 = 1024;
      unsigned int v23 = a1;
      BOOL v9 = "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u)";
    }
    else if (v16)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446978;
          unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
          __int16 v20 = 1024;
          unsigned int v21 = v5;
          __int16 v22 = 1024;
          unsigned int v23 = a1;
          __int16 v24 = 2082;
          unint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v15)
      {
LABEL_22:
        if (v6) {
          free(v6);
        }
        return;
      }
      *(_DWORD *)buf = 136446722;
      unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
      __int16 v20 = 1024;
      unsigned int v21 = v5;
      __int16 v22 = 1024;
      unsigned int v23 = a1;
      BOOL v9 = "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u), no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
      __int16 v20 = 1024;
      unsigned int v21 = v5;
      __int16 v22 = 1024;
      unsigned int v23 = a1;
      BOOL v9 = "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u), backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0x18u);
    goto LABEL_22;
  }
  if (nw_frame_uses_external_data((uint64_t)a2))
  {
    uint64_t v11 = (uint64_t)a2;
    int v12 = 0;
    int v13 = a1;
  }
  else
  {
    uint64_t v11 = (uint64_t)a2;
    int v12 = a1;
    int v13 = 0;
  }

  nw_frame_claim(v11, v10, v12, v13);
}

void nw_protocol_http3_stream_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v51 = "nw_protocol_http3_stream_error";
    unsigned int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v21, &type, &v48)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null protocol";
    }
    else if (v48)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v34 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v51 = "nw_protocol_http3_stream_error";
          __int16 v52 = 2082;
          int v53 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_94:
        if (!v21) {
          return;
        }
        goto LABEL_95;
      }
      if (!v34) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_93;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v51 = "nw_protocol_http3_stream_error";
    unsigned int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v21, &type, &v48)) {
      goto LABEL_94;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v48)
      {
        __int16 v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v51 = "nw_protocol_http3_stream_error";
        __int16 v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_93;
      }
      uint64_t v35 = (char *)__nw_create_backtrace_string();
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v36 = os_log_type_enabled(v22, type);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v51 = "nw_protocol_http3_stream_error";
        __int16 v24 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_93;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v51 = "nw_protocol_http3_stream_error";
        __int16 v52 = 2082;
        int v53 = v35;
        __int16 v37 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_63:
        _os_log_impl(&dword_1830D4000, v22, v23, v37, buf, 0x16u);
      }
LABEL_64:
      free(v35);
      if (!v21) {
        return;
      }
LABEL_95:
      free(v21);
      return;
    }
    __int16 v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v51 = "nw_protocol_http3_stream_error";
    __int16 v24 = "%{public}s called with null http3_stream";
LABEL_93:
    _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
    goto LABEL_94;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v51 = "nw_protocol_http3_stream_error";
    unsigned int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v21, &type, &v48)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null other_protocol";
      goto LABEL_93;
    }
    if (!v48)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_93;
    }
    uint64_t v35 = (char *)__nw_create_backtrace_string();
    __int16 v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v38 = os_log_type_enabled(v22, type);
    if (!v35)
    {
      if (!v38) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_93;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v52 = 2082;
      int v53 = v35;
      __int16 v37 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    goto LABEL_64;
  }
  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      unint64_t v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(handle[42] + 1280);
        uint64_t v27 = handle[30];
        *(_DWORD *)buf = 136447234;
        uint64_t v51 = "nw_protocol_http3_stream_error";
        __int16 v52 = 2082;
        int v53 = (char *)handle + 636;
        __int16 v54 = 2080;
        int v55 = " ";
        __int16 v56 = 1024;
        int v57 = v26;
        __int16 v58 = 2048;
        uint64_t v59 = v27;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  if (a3 == 35)
  {
    if ((handle[92] & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v39 = __nwlog_obj();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          int v40 = *(_DWORD *)(handle[42] + 1280);
          uint64_t v41 = handle[30];
          *(_DWORD *)buf = 136447234;
          uint64_t v51 = "nw_protocol_http3_stream_error";
          __int16 v52 = 2082;
          int v53 = (char *)handle + 636;
          __int16 v54 = 2080;
          int v55 = " ";
          __int16 v56 = 1024;
          int v57 = v40;
          __int16 v58 = 2048;
          uint64_t v59 = v41;
          _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> early data rejected", buf, 0x30u);
        }
      }
    }
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error) {
          goto LABEL_16;
        }
      }
    }
    __nwlog_obj();
    uint64_t v11 = a1->default_input_handler;
    int v12 = "invalid";
    if (v11)
    {
      identifier = v11->identifier;
      if (identifier) {
        int v12 = (const char *)identifier;
      }
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v51 = "nw_protocol_http3_stream_error";
    __int16 v52 = 2082;
    int v53 = (char *)v12;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v14, &type, &v48)) {
      goto LABEL_85;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_85;
      }
      int v17 = a1->default_input_handler;
      int v18 = "invalid";
      if (v17)
      {
        unint64_t v19 = v17->identifier;
        if (v19) {
          int v18 = (const char *)v19;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v52 = 2082;
      int v53 = (char *)v18;
      __int16 v20 = "%{public}s protocol %{public}s has invalid error callback";
    }
    else if (v48)
    {
      int v28 = (char *)__nw_create_backtrace_string();
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v29 = os_log_type_enabled(v15, type);
      if (v28)
      {
        if (v29)
        {
          uint64_t v30 = a1->default_input_handler;
          uint64_t v31 = "invalid";
          if (v30)
          {
            id v32 = v30->identifier;
            if (v32) {
              uint64_t v31 = (const char *)v32;
            }
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v51 = "nw_protocol_http3_stream_error";
          __int16 v52 = 2082;
          int v53 = (char *)v31;
          __int16 v54 = 2082;
          int v55 = v28;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v28);
        goto LABEL_85;
      }
      if (!v29)
      {
LABEL_85:
        if (v14) {
          free(v14);
        }
        return;
      }
      uint64_t v45 = a1->default_input_handler;
      __int16 v46 = "invalid";
      if (v45)
      {
        uint64_t v47 = v45->identifier;
        if (v47) {
          __int16 v46 = (const char *)v47;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v52 = 2082;
      int v53 = (char *)v46;
      __int16 v20 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
    }
    else
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_85;
      }
      __int16 v42 = a1->default_input_handler;
      int v43 = "invalid";
      if (v42)
      {
        __int16 v44 = v42->identifier;
        if (v44) {
          int v43 = (const char *)v44;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v52 = 2082;
      int v53 = (char *)v43;
      __int16 v20 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v15, v16, v20, buf, 0x16u);
    goto LABEL_85;
  }
  nw_http3_stream_get_application_error((uint64_t)handle);
  BOOL v9 = a1->default_input_handler;
  if (v9)
  {
    uint64_t v10 = v9->callbacks;
    if (v10)
    {
      error = (void (*)(void))v10->error;
      if (error) {
LABEL_16:
      }
        error();
    }
  }
}

void nw_http3_async_close_connection_if_no_stream(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (_WORD *)(a1 + 1373);
  if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      unsigned int v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136446978;
        BOOL v9 = "nw_http3_async_close_connection_if_no_stream";
        __int16 v10 = 2082;
        uint64_t v11 = a1 + 1289;
        __int16 v12 = 2080;
        int v13 = " ";
        __int16 v14 = 1024;
        int v15 = v6;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }
  *v2 |= 8u;
  nw_protocol_remove_instance(a1);
  if (!*(void *)(a1 + 880))
  {
    uint64_t v3 = *(void *)(a1 + 1040);
    unsigned int v4 = *(void **)(a1 + 1256);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = ___ZL44nw_http3_async_close_connection_if_no_streamP17nw_protocol_http3_block_invoke;
    void v7[3] = &unk_1E5246F88;
    void v7[4] = v3;
    nw_queue_context_async(v4, v7);
  }
}

void ___ZL44nw_http3_async_close_connection_if_no_streamP17nw_protocol_http3_block_invoke(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v1)
  {
    nw_http3_connection_destroy(v1);
  }
}

void nw_http3_connection_destroy(uint64_t a1)
{
  uint64_t v305 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = (unsigned __int16 *)(a1 + 1373);
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v4 = *(_DWORD *)(v1 + 1280);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v1 + 1289;
        *(_WORD *)&uint8_t buf[22] = 2080;
        v300 = " ";
        LOWORD(v301) = 1024;
        *(_DWORD *)((char *)&v301 + 2) = v4;
        HIWORD(v301) = 2048;
        uint64_t v302 = v1;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> destroying %p", buf, 0x30u);
      }
    }
    uint64_t v5 = *(void *)(v1 + 1264);
    if (v5)
    {
      nw_queue_cancel_source(v5);
      *(void *)(v1 + 1264) = 0;
    }
    uint64_t v6 = *(void *)(v1 + 1088);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 8))(v6, v1, 0);
    }
    nw_http_connection_metadata_closed(*(void **)(v1 + 1248));
    uint64_t v7 = *(void **)(v1 + 1240);
    if (v7)
    {
      nw_quic_connection_close_with_error(v7, 256);
      os_log_type_t v8 = *(void **)(v1 + 1240);
      if (v8)
      {
        os_release(v8);
        *(void *)(v1 + 1240) = 0;
      }
    }
    BOOL v9 = *(void **)(v1 + 1248);
    if (v9)
    {
      os_release(v9);
      *(void *)(v1 + 1248) = 0;
    }
    uint64_t v297 = v1;
    uint64_t v10 = *(void *)(v1 + 880);
    if (v10)
    {
      do
      {
        uint64_t v11 = *(void *)(v10 + 544);
        if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v12 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v13 = *(_DWORD *)(v1 + 1280);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v1 + 1289;
            *(_WORD *)&uint8_t buf[22] = 2080;
            v300 = " ";
            LOWORD(v301) = 1024;
            *(_DWORD *)((char *)&v301 + 2) = v13;
            HIWORD(v301) = 2048;
            uint64_t v302 = v10;
            _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways", buf, 0x30u);
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        v303[0] = 16;
        char v298 = 0;
        if (!__nwlog_fault(v14, v303, &v298)) {
          goto LABEL_34;
        }
        if (v303[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v15 = gLogObj;
          uint8_t v16 = v303[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v303[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            int v17 = v15;
            os_log_type_t v18 = v16;
            unint64_t v19 = "%{public}s should not have streams left when destroying";
LABEL_33:
            _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
          }
        }
        else if (v298)
        {
          backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v21 = gLogObj;
          os_log_type_t v22 = v303[0];
          BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v303[0]);
          if (backtrace_string)
          {
            if (v23)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_34;
          }
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            int v17 = v21;
            os_log_type_t v18 = v22;
            unint64_t v19 = "%{public}s should not have streams left when destroying, no backtrace";
            goto LABEL_33;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v24 = gLogObj;
          uint8_t v25 = v303[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v303[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            int v17 = v24;
            os_log_type_t v18 = v25;
            unint64_t v19 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
            goto LABEL_33;
          }
        }
LABEL_34:
        if (v14) {
          free(v14);
        }
        nw_protocol_http3_stream_destroy(v10);
        uint64_t v10 = v11;
      }
      while (v11);
    }
    if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v193 = __nwlog_obj();
        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
        {
          int v194 = *(_DWORD *)(v1 + 1280);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = v1 + 1289;
          *(_WORD *)&uint8_t buf[22] = 2080;
          v300 = " ";
          LOWORD(v301) = 1024;
          *(_DWORD *)((char *)&v301 + 2) = v194;
          _os_log_impl(&dword_1830D4000, v193, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    nw_protocol_remove_instance(v1);
    int v26 = *v2;
    if ((v26 & 0x800) == 0)
    {
LABEL_52:
      if (!*(void *)(v1 + 1048)) {
        goto LABEL_69;
      }
      BOOL v36 = (void *)(v1 + 216);
      uint64_t v35 = *(void *)(v1 + 216);
      do
      {
        if (!v35) {
          break;
        }
        uint64_t v37 = *(void *)(v35 + 32);
        char v38 = ___ZL23nw_http3_framer_cleanupP15nw_http3_framer_block_invoke((uint64_t)&__block_literal_global_29, (_DWORD *)v35);
        uint64_t v35 = v37;
      }
      while ((v38 & 1) != 0);
      if (gLogDatapath)
      {
        v225 = __nwlog_obj();
        if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          _os_log_impl(&dword_1830D4000, v225, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_61444;
      v300 = (const char *)&__block_descriptor_tmp_30_61445;
      v301 = v36;
      LOBYTE(v302) = 0;
      uint64_t v39 = *v36;
      uint64_t v1 = v297;
      do
      {
        if (!v39) {
          break;
        }
        uint64_t v40 = *(void *)(v39 + 32);
        char v41 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v39 = v40;
      }
      while ((v41 & 1) != 0);
      *(_DWORD *)(v297 + 232) = 0;
      __int16 v42 = (void *)(*(void *)(v297 + 1048) + 104);
      if (gLogDatapath)
      {
        v226 = __nwlog_obj();
        if (os_log_type_enabled(v226, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          _os_log_impl(&dword_1830D4000, v226, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_61444;
      v300 = (const char *)&__block_descriptor_tmp_30_61445;
      v301 = v42;
      LOBYTE(v302) = 0;
      uint64_t v43 = *v42;
      do
      {
        if (!v43) {
          break;
        }
        uint64_t v44 = *(void *)(v43 + 32);
        char v45 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v43 = v44;
      }
      while ((v45 & 1) != 0);
      uint64_t v46 = *(void *)(v297 + 1048);
      uint64_t v47 = *(void *)(v46 + 32);
      if (v47)
      {
        uint64_t v48 = *(void *)(v47 + 24);
        if (v48)
        {
          int v49 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
          if (v49)
          {
            v49(v47, v46);
LABEL_68:
            nw_protocol_http3_uni_stream_destroy(*(void *)(v1 + 1048));
            *(void *)(v1 + 1048) = 0;
LABEL_69:
            uint64_t v50 = *(void *)(v1 + 1056);
            if (!v50) {
              goto LABEL_75;
            }
            uint64_t v51 = *(void *)(v50 + 32);
            if (v51)
            {
              uint64_t v52 = *(void *)(v51 + 24);
              if (v52)
              {
                int v53 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
                if (v53)
                {
                  v53(v51, v50);
LABEL_74:
                  nw_protocol_http3_uni_stream_destroy(*(void *)(v1 + 1056));
                  *(void *)(v1 + 1056) = 0;
LABEL_75:
                  uint64_t v54 = *(void *)(v1 + 1064);
                  if (!v54) {
                    goto LABEL_85;
                  }
                  int v55 = (void *)(v54 + 104);
                  if (gLogDatapath)
                  {
                    v227 = __nwlog_obj();
                    if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                      _os_log_impl(&dword_1830D4000, v227, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                    }
                  }
                  *(void *)buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 0x40000000;
                  *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_61444;
                  v300 = (const char *)&__block_descriptor_tmp_30_61445;
                  v301 = v55;
                  LOBYTE(v302) = 0;
                  uint64_t v56 = *v55;
                  do
                  {
                    if (!v56) {
                      break;
                    }
                    uint64_t v57 = *(void *)(v56 + 32);
                    char v58 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                    uint64_t v56 = v57;
                  }
                  while ((v58 & 1) != 0);
                  uint64_t v59 = *(void *)(v1 + 1064);
                  uint64_t v60 = *(void *)(v59 + 32);
                  if (v60)
                  {
                    uint64_t v61 = *(void *)(v60 + 24);
                    if (v61)
                    {
                      __int16 v62 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
                      if (v62)
                      {
                        v62(v60, v59);
LABEL_84:
                        nw_protocol_http3_uni_stream_destroy(*(void *)(v1 + 1064));
                        *(void *)(v1 + 1064) = 0;
LABEL_85:
                        uint64_t v63 = *(void *)(v1 + 1072);
                        if (!v63) {
                          goto LABEL_91;
                        }
                        uint64_t v64 = *(void *)(v63 + 32);
                        if (v64)
                        {
                          uint64_t v65 = *(void *)(v64 + 24);
                          if (v65)
                          {
                            uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
                            if (v66)
                            {
                              v66(v64, v63);
LABEL_90:
                              nw_protocol_http3_uni_stream_destroy(*(void *)(v1 + 1072));
                              *(void *)(v1 + 1072) = 0;
LABEL_91:
                              uint64_t v67 = *(void *)(v1 + 1080);
                              if (!v67)
                              {
LABEL_101:
                                __int16 v76 = *(void **)(v1 + 896);
                                if (v76)
                                {
                                  while (1)
                                  {
                                    __int16 v78 = (void *)v76[10];
                                    if (gLogDatapath)
                                    {
                                      uint64_t v96 = __nwlog_obj();
                                      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
                                      {
                                        *(_DWORD *)v303 = 136446210;
                                        v304 = "nw_protocol_finalize_temp_frame_array";
                                        _os_log_impl(&dword_1830D4000, v96, OS_LOG_TYPE_DEBUG, "%{public}s called", v303, 0xCu);
                                      }
                                    }
                                    *(void *)buf = MEMORY[0x1E4F143A8];
                                    *(void *)&buf[8] = 0x40000000;
                                    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_61444;
                                    v300 = (const char *)&__block_descriptor_tmp_30_61445;
                                    v301 = v76 + 13;
                                    LOBYTE(v302) = 0;
                                    uint64_t v79 = v76[13];
                                    do
                                    {
                                      if (!v79) {
                                        break;
                                      }
                                      uint64_t v80 = *(void *)(v79 + 32);
                                      char v81 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                                      uint64_t v79 = v80;
                                    }
                                    while ((v81 & 1) != 0);
                                    uint64_t v82 = v76[4];
                                    if (!v82) {
                                      break;
                                    }
                                    uint64_t v83 = *(void *)(v82 + 24);
                                    if (!v83) {
                                      break;
                                    }
                                    char v84 = *(void (**)(uint64_t, void *))(v83 + 8);
                                    if (!v84) {
                                      break;
                                    }
                                    v84(v82, v76);
LABEL_113:
                                    uint64_t v85 = v76[10];
                                    int v77 = (void *)v76[11];
                                    if (v85)
                                    {
                                      *(void *)(v85 + 88) = v77;
                                      int v77 = (void *)v76[11];
                                    }
                                    else
                                    {
                                      *(void *)(v297 + 904) = v77;
                                    }
                                    void *v77 = v85;
                                    v76[10] = 0;
                                    v76[11] = 0;
                                    nw_protocol_http3_uni_stream_destroy((uint64_t)v76);
                                    __int16 v76 = v78;
                                    if (!v78) {
                                      goto LABEL_158;
                                    }
                                  }
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  uint64_t v86 = v76[4];
                                  if (v86)
                                  {
                                    uint64_t v87 = *(const char **)(v86 + 16);
                                    if (!v87) {
                                      uint64_t v87 = "invalid";
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v87 = "invalid";
                                  }
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                  *(_WORD *)&void buf[12] = 2082;
                                  *(void *)&buf[14] = v87;
                                  __int16 v88 = (char *)_os_log_send_and_compose_impl();
                                  v303[0] = 16;
                                  char v298 = 0;
                                  if (__nwlog_fault(v88, v303, &v298))
                                  {
                                    if (v303[0] == 17)
                                    {
                                      v294 = __nwlog_obj();
                                      uint8_t log = v303[0];
                                      if (!os_log_type_enabled(v294, (os_log_type_t)v303[0])) {
                                        goto LABEL_156;
                                      }
                                      uint64_t v89 = v76[4];
                                      if (v89)
                                      {
                                        size_t v90 = *(const char **)(v89 + 16);
                                        if (!v90) {
                                          size_t v90 = "invalid";
                                        }
                                      }
                                      else
                                      {
                                        size_t v90 = "invalid";
                                      }
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                      *(_WORD *)&void buf[12] = 2082;
                                      *(void *)&buf[14] = v90;
                                      os_log_type_t v101 = v294;
                                      os_log_type_t v102 = log;
                                      int v103 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
                                      goto LABEL_155;
                                    }
                                    if (!v298)
                                    {
                                      v296 = __nwlog_obj();
                                      uint8_t logb = v303[0];
                                      if (!os_log_type_enabled(v296, (os_log_type_t)v303[0])) {
                                        goto LABEL_156;
                                      }
                                      uint64_t v97 = v76[4];
                                      if (v97)
                                      {
                                        uint64_t v98 = *(const char **)(v97 + 16);
                                        if (!v98) {
                                          uint64_t v98 = "invalid";
                                        }
                                      }
                                      else
                                      {
                                        uint64_t v98 = "invalid";
                                      }
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                      *(_WORD *)&void buf[12] = 2082;
                                      *(void *)&buf[14] = v98;
                                      os_log_type_t v101 = v296;
                                      os_log_type_t v102 = logb;
                                      int v103 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, b"
                                             "acktrace limit exceeded";
                                      goto LABEL_155;
                                    }
                                    v295 = v88;
                                    os_log_type_t v91 = __nw_create_backtrace_string();
                                    loga = __nwlog_obj();
                                    os_log_type_t type = v303[0];
                                    BOOL v92 = os_log_type_enabled(loga, (os_log_type_t)v303[0]);
                                    if (v91)
                                    {
                                      uint64_t v93 = (char *)v91;
                                      __int16 v88 = v295;
                                      if (v92)
                                      {
                                        uint64_t v94 = v76[4];
                                        if (v94)
                                        {
                                          uint64_t v95 = *(const char **)(v94 + 16);
                                          if (!v95) {
                                            uint64_t v95 = "invalid";
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v95 = "invalid";
                                        }
                                        *(_DWORD *)buf = 136446722;
                                        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                        *(_WORD *)&void buf[12] = 2082;
                                        *(void *)&buf[14] = v95;
                                        *(_WORD *)&uint8_t buf[22] = 2082;
                                        v300 = v93;
                                        uint64_t v104 = v93;
                                        _os_log_impl(&dword_1830D4000, loga, type, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                                        uint64_t v93 = v104;
                                        __int16 v88 = v295;
                                      }
                                      free(v93);
                                      goto LABEL_156;
                                    }
                                    __int16 v88 = v295;
                                    if (v92)
                                    {
                                      uint64_t v99 = v76[4];
                                      if (v99)
                                      {
                                        uint64_t v100 = *(const char **)(v99 + 16);
                                        if (!v100) {
                                          uint64_t v100 = "invalid";
                                        }
                                      }
                                      else
                                      {
                                        uint64_t v100 = "invalid";
                                      }
                                      os_log_type_t v101 = loga;
                                      os_log_type_t v102 = type;
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                      *(_WORD *)&void buf[12] = 2082;
                                      *(void *)&buf[14] = v100;
                                      int v103 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_155:
                                      _os_log_impl(&dword_1830D4000, v101, v102, v103, buf, 0x16u);
                                    }
                                  }
LABEL_156:
                                  if (v88) {
                                    free(v88);
                                  }
                                  goto LABEL_113;
                                }
LABEL_158:
                                char v105 = (void *)v297;
                                lsqpack_enc_cleanup(v297 + 256);
                                lsqpack_dec_cleanup(v297 + 496);
                                os_log_type_t v106 = *(void **)(v297 + 1216);
                                if (v106)
                                {
                                  id v107 = *(void **)(v297 + 1224);
                                  if (v107) {
                                    nw_association_unregister(v106, v107);
                                  }
                                }
                                os_log_type_t v108 = *(void **)(v297 + 1208);
                                if (v108)
                                {
                                  os_release(v108);
                                  *(void *)(v297 + 1208) = 0;
                                }
                                id v109 = *(void **)(v297 + 1216);
                                if (v109)
                                {
                                  os_release(v109);
                                  *(void *)(v297 + 1216) = 0;
                                }
                                os_log_type_t v110 = *(void **)(v297 + 1224);
                                if (v110)
                                {
                                  os_release(v110);
                                  *(void *)(v297 + 1224) = 0;
                                }
                                BOOL v111 = *(void **)(v297 + 1232);
                                if (v111)
                                {
                                  os_release(v111);
                                  *(void *)(v297 + 1232) = 0;
                                }
                                v112 = *(void **)(v297 + 1096);
                                if (v112)
                                {
                                  os_release(v112);
                                  *(void *)(v297 + 1096) = 0;
                                }
                                os_log_type_t v113 = *(void **)(v297 + 1104);
                                if (v113)
                                {
                                  os_release(v113);
                                  *(void *)(v297 + 1104) = 0;
                                }
                                v114 = *(void **)(v297 + 1112);
                                if (v114)
                                {
                                  os_release(v114);
                                  *(void *)(v297 + 1112) = 0;
                                }
                                os_log_type_t v115 = *(void **)(v297 + 1120);
                                if (v115)
                                {
                                  os_release(v115);
                                  *(void *)(v297 + 1120) = 0;
                                }
                                BOOL v116 = *(void **)(v297 + 1128);
                                if (v116)
                                {
                                  os_release(v116);
                                  *(void *)(v297 + 1128) = 0;
                                }
                                uint64_t v117 = *(void **)(v297 + 1256);
                                if (v117)
                                {
                                  os_release(v117);
                                  *(void *)(v297 + 1256) = 0;
                                }
                                os_log_type_t v118 = *(NSObject **)(v297 + 1176);
                                if (v118)
                                {
                                  dispatch_release(v118);
                                  *(void *)(v297 + 1176) = 0;
                                }
                                BOOL v119 = *(NSObject **)(v297 + 1184);
                                if (v119)
                                {
                                  dispatch_release(v119);
                                  *(void *)(v297 + 1184) = 0;
                                }
                                os_log_type_t v120 = *(NSObject **)(v297 + 1192);
                                if (v120)
                                {
                                  dispatch_release(v120);
                                  *(void *)(v297 + 1192) = 0;
                                }
                                v121 = *(NSObject **)(v297 + 1160);
                                if (v121)
                                {
                                  dispatch_release(v121);
                                  *(void *)(v297 + 1160) = 0;
                                }
                                os_log_type_t v122 = *(NSObject **)(v297 + 1168);
                                if (v122)
                                {
                                  dispatch_release(v122);
                                  *(void *)(v297 + 1168) = 0;
                                }
                                os_log_type_t v123 = *(NSObject **)(v297 + 1152);
                                if (v123)
                                {
                                  dispatch_release(v123);
                                  *(void *)(v297 + 1152) = 0;
                                }
                                os_log_type_t v124 = *(NSObject **)(v297 + 1136);
                                if (v124)
                                {
                                  dispatch_release(v124);
                                  *(void *)(v297 + 1136) = 0;
                                }
                                BOOL v125 = *(NSObject **)(v297 + 1144);
                                if (v125)
                                {
                                  dispatch_release(v125);
                                  *(void *)(v297 + 1144) = 0;
                                }
                                os_log_type_t v126 = *(NSObject **)(v297 + 1200);
                                if (v126)
                                {
                                  dispatch_release(v126);
                                  *(void *)(v297 + 1200) = 0;
                                }
                                os_log_type_t v127 = *(const void **)(v297 + 864);
                                if (v127)
                                {
                                  _Block_release(v127);
                                  *(void *)(v297 + 864) = 0;
                                }
                                BOOL v128 = *(NSObject **)(v297 + 872);
                                if (v128)
                                {
                                  dispatch_release(v128);
                                  *(void *)(v297 + 872) = 0;
                                }
                                (*(void (**)(void, void))(*(void *)(v297 + 1040) + 16))(*(void *)(v297 + 1040), 0);
                                v129 = *(const void **)(v297 + 1040);
                                if (v129) {
                                  _Block_release(v129);
                                }
                                goto LABEL_205;
                              }
                              uint64_t v68 = (void *)(v67 + 104);
                              if (gLogDatapath)
                              {
                                v228 = __nwlog_obj();
                                if (os_log_type_enabled(v228, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                                  _os_log_impl(&dword_1830D4000, v228, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                                }
                              }
                              *(void *)buf = MEMORY[0x1E4F143A8];
                              *(void *)&buf[8] = 0x40000000;
                              *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_61444;
                              v300 = (const char *)&__block_descriptor_tmp_30_61445;
                              v301 = v68;
                              LOBYTE(v302) = 0;
                              uint64_t v69 = *v68;
                              do
                              {
                                if (!v69) {
                                  break;
                                }
                                uint64_t v70 = *(void *)(v69 + 32);
                                char v71 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                                uint64_t v69 = v70;
                              }
                              while ((v71 & 1) != 0);
                              uint64_t v72 = *(void *)(v1 + 1080);
                              uint64_t v73 = *(void *)(v72 + 32);
                              if (v73)
                              {
                                uint64_t v74 = *(void *)(v73 + 24);
                                if (v74)
                                {
                                  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
                                  if (v75)
                                  {
                                    v75(v73, v72);
LABEL_100:
                                    nw_protocol_http3_uni_stream_destroy(*(void *)(v1 + 1080));
                                    *(void *)(v1 + 1080) = 0;
                                    goto LABEL_101;
                                  }
                                }
                              }
                              __nwlog_obj();
                              uint64_t v170 = *(void *)(*(void *)(v1 + 1080) + 32);
                              v171 = "invalid";
                              if (v170)
                              {
                                __int16 v172 = *(const char **)(v170 + 16);
                                if (v172) {
                                  v171 = v172;
                                }
                              }
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                              *(_WORD *)&void buf[12] = 2082;
                              *(void *)&buf[14] = v171;
                              v173 = (char *)_os_log_send_and_compose_impl();
                              v303[0] = 16;
                              char v298 = 0;
                              if (__nwlog_fault(v173, v303, &v298))
                              {
                                if (v303[0] == 17)
                                {
                                  v174 = __nwlog_obj();
                                  os_log_type_t v175 = v303[0];
                                  if (os_log_type_enabled(v174, (os_log_type_t)v303[0]))
                                  {
                                    uint64_t v176 = *(void *)(*(void *)(v297 + 1080) + 32);
                                    v177 = "invalid";
                                    if (v176)
                                    {
                                      uint64_t v178 = *(const char **)(v176 + 16);
                                      if (v178) {
                                        v177 = v178;
                                      }
                                    }
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                    *(_WORD *)&void buf[12] = 2082;
                                    *(void *)&buf[14] = v177;
                                    v179 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_407:
                                    _os_log_impl(&dword_1830D4000, v174, v175, v179, buf, 0x16u);
                                  }
                                }
                                else if (v298)
                                {
                                  v215 = (char *)__nw_create_backtrace_string();
                                  v174 = __nwlog_obj();
                                  os_log_type_t v175 = v303[0];
                                  BOOL v216 = os_log_type_enabled(v174, (os_log_type_t)v303[0]);
                                  if (v215)
                                  {
                                    if (v216)
                                    {
                                      uint64_t v217 = *(void *)(*(void *)(v297 + 1080) + 32);
                                      v218 = "invalid";
                                      if (v217)
                                      {
                                        v219 = *(const char **)(v217 + 16);
                                        if (v219) {
                                          v218 = v219;
                                        }
                                      }
                                      *(_DWORD *)buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                      *(_WORD *)&void buf[12] = 2082;
                                      *(void *)&buf[14] = v218;
                                      *(_WORD *)&uint8_t buf[22] = 2082;
                                      v300 = v215;
                                      _os_log_impl(&dword_1830D4000, v174, v175, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                                    }
                                    free(v215);
                                    goto LABEL_408;
                                  }
                                  if (v216)
                                  {
                                    uint64_t v263 = *(void *)(*(void *)(v297 + 1080) + 32);
                                    v264 = "invalid";
                                    if (v263)
                                    {
                                      v265 = *(const char **)(v263 + 16);
                                      if (v265) {
                                        v264 = v265;
                                      }
                                    }
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                    *(_WORD *)&void buf[12] = 2082;
                                    *(void *)&buf[14] = v264;
                                    v179 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
                                    goto LABEL_407;
                                  }
                                }
                                else
                                {
                                  v174 = __nwlog_obj();
                                  os_log_type_t v175 = v303[0];
                                  if (os_log_type_enabled(v174, (os_log_type_t)v303[0]))
                                  {
                                    uint64_t v245 = *(void *)(*(void *)(v297 + 1080) + 32);
                                    v246 = "invalid";
                                    if (v245)
                                    {
                                      v247 = *(const char **)(v245 + 16);
                                      if (v247) {
                                        v246 = v247;
                                      }
                                    }
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                    *(_WORD *)&void buf[12] = 2082;
                                    *(void *)&buf[14] = v246;
                                    v179 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, bac"
                                           "ktrace limit exceeded";
                                    goto LABEL_407;
                                  }
                                }
                              }
LABEL_408:
                              if (v173) {
                                free(v173);
                              }
                              uint64_t v1 = v297;
                              goto LABEL_100;
                            }
                          }
                        }
                        __nwlog_obj();
                        uint64_t v160 = *(void *)(*(void *)(v1 + 1072) + 32);
                        unsigned int v161 = "invalid";
                        if (v160)
                        {
                          v162 = *(const char **)(v160 + 16);
                          if (v162) {
                            unsigned int v161 = v162;
                          }
                        }
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                        *(_WORD *)&void buf[12] = 2082;
                        *(void *)&buf[14] = v161;
                        id v163 = (char *)_os_log_send_and_compose_impl();
                        v303[0] = 16;
                        char v298 = 0;
                        if (__nwlog_fault(v163, v303, &v298))
                        {
                          if (v303[0] == 17)
                          {
                            id v164 = __nwlog_obj();
                            os_log_type_t v165 = v303[0];
                            if (os_log_type_enabled(v164, (os_log_type_t)v303[0]))
                            {
                              uint64_t v166 = *(void *)(*(void *)(v297 + 1072) + 32);
                              v167 = "invalid";
                              if (v166)
                              {
                                long long v168 = *(const char **)(v166 + 16);
                                if (v168) {
                                  v167 = v168;
                                }
                              }
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                              *(_WORD *)&void buf[12] = 2082;
                              *(void *)&buf[14] = v167;
                              uint64_t v169 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_398:
                              _os_log_impl(&dword_1830D4000, v164, v165, v169, buf, 0x16u);
                            }
                          }
                          else if (v298)
                          {
                            v210 = (char *)__nw_create_backtrace_string();
                            id v164 = __nwlog_obj();
                            os_log_type_t v165 = v303[0];
                            BOOL v211 = os_log_type_enabled(v164, (os_log_type_t)v303[0]);
                            if (v210)
                            {
                              if (v211)
                              {
                                uint64_t v212 = *(void *)(*(void *)(v297 + 1072) + 32);
                                v213 = "invalid";
                                if (v212)
                                {
                                  v214 = *(const char **)(v212 + 16);
                                  if (v214) {
                                    v213 = v214;
                                  }
                                }
                                *(_DWORD *)buf = 136446722;
                                *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                *(_WORD *)&void buf[12] = 2082;
                                *(void *)&buf[14] = v213;
                                *(_WORD *)&uint8_t buf[22] = 2082;
                                v300 = v210;
                                _os_log_impl(&dword_1830D4000, v164, v165, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                              }
                              free(v210);
                              goto LABEL_399;
                            }
                            if (v211)
                            {
                              uint64_t v260 = *(void *)(*(void *)(v297 + 1072) + 32);
                              v261 = "invalid";
                              if (v260)
                              {
                                v262 = *(const char **)(v260 + 16);
                                if (v262) {
                                  v261 = v262;
                                }
                              }
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                              *(_WORD *)&void buf[12] = 2082;
                              *(void *)&buf[14] = v261;
                              uint64_t v169 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
                              goto LABEL_398;
                            }
                          }
                          else
                          {
                            id v164 = __nwlog_obj();
                            os_log_type_t v165 = v303[0];
                            if (os_log_type_enabled(v164, (os_log_type_t)v303[0]))
                            {
                              uint64_t v242 = *(void *)(*(void *)(v297 + 1072) + 32);
                              v243 = "invalid";
                              if (v242)
                              {
                                v244 = *(const char **)(v242 + 16);
                                if (v244) {
                                  v243 = v244;
                                }
                              }
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                              *(_WORD *)&void buf[12] = 2082;
                              *(void *)&buf[14] = v243;
                              uint64_t v169 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
                              goto LABEL_398;
                            }
                          }
                        }
LABEL_399:
                        if (v163) {
                          free(v163);
                        }
                        uint64_t v1 = v297;
                        goto LABEL_90;
                      }
                    }
                  }
                  __nwlog_obj();
                  uint64_t v150 = *(void *)(*(void *)(v1 + 1064) + 32);
                  os_log_type_t v151 = "invalid";
                  if (v150)
                  {
                    os_log_type_t v152 = *(const char **)(v150 + 16);
                    if (v152) {
                      os_log_type_t v151 = v152;
                    }
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&buf[14] = v151;
                  os_log_type_t v153 = (char *)_os_log_send_and_compose_impl();
                  v303[0] = 16;
                  char v298 = 0;
                  if (__nwlog_fault(v153, v303, &v298))
                  {
                    if (v303[0] == 17)
                    {
                      os_log_type_t v154 = __nwlog_obj();
                      os_log_type_t v155 = v303[0];
                      if (os_log_type_enabled(v154, (os_log_type_t)v303[0]))
                      {
                        uint64_t v156 = *(void *)(*(void *)(v297 + 1064) + 32);
                        os_log_type_t v157 = "invalid";
                        if (v156)
                        {
                          os_log_type_t v158 = *(const char **)(v156 + 16);
                          if (v158) {
                            os_log_type_t v157 = v158;
                          }
                        }
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                        *(_WORD *)&void buf[12] = 2082;
                        *(void *)&buf[14] = v157;
                        v159 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_389:
                        _os_log_impl(&dword_1830D4000, v154, v155, v159, buf, 0x16u);
                      }
                    }
                    else if (v298)
                    {
                      v205 = (char *)__nw_create_backtrace_string();
                      os_log_type_t v154 = __nwlog_obj();
                      os_log_type_t v155 = v303[0];
                      BOOL v206 = os_log_type_enabled(v154, (os_log_type_t)v303[0]);
                      if (v205)
                      {
                        if (v206)
                        {
                          uint64_t v207 = *(void *)(*(void *)(v297 + 1064) + 32);
                          v208 = "invalid";
                          if (v207)
                          {
                            v209 = *(const char **)(v207 + 16);
                            if (v209) {
                              v208 = v209;
                            }
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                          *(_WORD *)&void buf[12] = 2082;
                          *(void *)&buf[14] = v208;
                          *(_WORD *)&uint8_t buf[22] = 2082;
                          v300 = v205;
                          _os_log_impl(&dword_1830D4000, v154, v155, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                        }
                        free(v205);
                        goto LABEL_390;
                      }
                      if (v206)
                      {
                        uint64_t v257 = *(void *)(*(void *)(v297 + 1064) + 32);
                        v258 = "invalid";
                        if (v257)
                        {
                          v259 = *(const char **)(v257 + 16);
                          if (v259) {
                            v258 = v259;
                          }
                        }
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                        *(_WORD *)&void buf[12] = 2082;
                        *(void *)&buf[14] = v258;
                        v159 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
                        goto LABEL_389;
                      }
                    }
                    else
                    {
                      os_log_type_t v154 = __nwlog_obj();
                      os_log_type_t v155 = v303[0];
                      if (os_log_type_enabled(v154, (os_log_type_t)v303[0]))
                      {
                        uint64_t v239 = *(void *)(*(void *)(v297 + 1064) + 32);
                        v240 = "invalid";
                        if (v239)
                        {
                          v241 = *(const char **)(v239 + 16);
                          if (v241) {
                            v240 = v241;
                          }
                        }
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                        *(_WORD *)&void buf[12] = 2082;
                        *(void *)&buf[14] = v240;
                        v159 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
                        goto LABEL_389;
                      }
                    }
                  }
LABEL_390:
                  if (v153) {
                    free(v153);
                  }
                  uint64_t v1 = v297;
                  goto LABEL_84;
                }
              }
            }
            __nwlog_obj();
            uint64_t v140 = *(void *)(*(void *)(v1 + 1056) + 32);
            v141 = "invalid";
            if (v140)
            {
              os_log_type_t v142 = *(const char **)(v140 + 16);
              if (v142) {
                v141 = v142;
              }
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v141;
            BOOL v143 = (char *)_os_log_send_and_compose_impl();
            v303[0] = 16;
            char v298 = 0;
            if (__nwlog_fault(v143, v303, &v298))
            {
              if (v303[0] == 17)
              {
                v144 = __nwlog_obj();
                os_log_type_t v145 = v303[0];
                if (os_log_type_enabled(v144, (os_log_type_t)v303[0]))
                {
                  uint64_t v146 = *(void *)(*(void *)(v297 + 1056) + 32);
                  BOOL v147 = "invalid";
                  if (v146)
                  {
                    os_log_type_t v148 = *(const char **)(v146 + 16);
                    if (v148) {
                      BOOL v147 = v148;
                    }
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&buf[14] = v147;
                  os_log_type_t v149 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_380:
                  _os_log_impl(&dword_1830D4000, v144, v145, v149, buf, 0x16u);
                }
              }
              else if (v298)
              {
                v200 = (char *)__nw_create_backtrace_string();
                v144 = __nwlog_obj();
                os_log_type_t v145 = v303[0];
                BOOL v201 = os_log_type_enabled(v144, (os_log_type_t)v303[0]);
                if (v200)
                {
                  if (v201)
                  {
                    uint64_t v202 = *(void *)(*(void *)(v297 + 1056) + 32);
                    v203 = "invalid";
                    if (v202)
                    {
                      v204 = *(const char **)(v202 + 16);
                      if (v204) {
                        v203 = v204;
                      }
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                    *(_WORD *)&void buf[12] = 2082;
                    *(void *)&buf[14] = v203;
                    *(_WORD *)&uint8_t buf[22] = 2082;
                    v300 = v200;
                    _os_log_impl(&dword_1830D4000, v144, v145, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                  }
                  free(v200);
                  goto LABEL_381;
                }
                if (v201)
                {
                  uint64_t v254 = *(void *)(*(void *)(v297 + 1056) + 32);
                  v255 = "invalid";
                  if (v254)
                  {
                    v256 = *(const char **)(v254 + 16);
                    if (v256) {
                      v255 = v256;
                    }
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&buf[14] = v255;
                  os_log_type_t v149 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
                  goto LABEL_380;
                }
              }
              else
              {
                v144 = __nwlog_obj();
                os_log_type_t v145 = v303[0];
                if (os_log_type_enabled(v144, (os_log_type_t)v303[0]))
                {
                  uint64_t v236 = *(void *)(*(void *)(v297 + 1056) + 32);
                  v237 = "invalid";
                  if (v236)
                  {
                    v238 = *(const char **)(v236 + 16);
                    if (v238) {
                      v237 = v238;
                    }
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&buf[14] = v237;
                  os_log_type_t v149 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
                  goto LABEL_380;
                }
              }
            }
LABEL_381:
            if (v143) {
              free(v143);
            }
            uint64_t v1 = v297;
            goto LABEL_74;
          }
        }
      }
      __nwlog_obj();
      uint64_t v130 = *(void *)(*(void *)(v297 + 1048) + 32);
      BOOL v131 = "invalid";
      if (v130)
      {
        os_log_type_t v132 = *(const char **)(v130 + 16);
        if (v132) {
          BOOL v131 = v132;
        }
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
      *(_WORD *)&void buf[12] = 2082;
      *(void *)&buf[14] = v131;
      os_log_type_t v133 = (char *)_os_log_send_and_compose_impl();
      v303[0] = 16;
      char v298 = 0;
      if (__nwlog_fault(v133, v303, &v298))
      {
        if (v303[0] == 17)
        {
          BOOL v134 = __nwlog_obj();
          os_log_type_t v135 = v303[0];
          if (os_log_type_enabled(v134, (os_log_type_t)v303[0]))
          {
            uint64_t v136 = *(void *)(*(void *)(v297 + 1048) + 32);
            char v137 = "invalid";
            if (v136)
            {
              os_log_type_t v138 = *(const char **)(v136 + 16);
              if (v138) {
                char v137 = v138;
              }
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v137;
            BOOL v139 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_371:
            _os_log_impl(&dword_1830D4000, v134, v135, v139, buf, 0x16u);
          }
        }
        else if (v298)
        {
          v195 = (char *)__nw_create_backtrace_string();
          BOOL v134 = __nwlog_obj();
          os_log_type_t v135 = v303[0];
          BOOL v196 = os_log_type_enabled(v134, (os_log_type_t)v303[0]);
          if (v195)
          {
            if (v196)
            {
              uint64_t v197 = *(void *)(*(void *)(v297 + 1048) + 32);
              v198 = "invalid";
              if (v197)
              {
                v199 = *(const char **)(v197 + 16);
                if (v199) {
                  v198 = v199;
                }
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v198;
              *(_WORD *)&uint8_t buf[22] = 2082;
              v300 = v195;
              _os_log_impl(&dword_1830D4000, v134, v135, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v195);
            goto LABEL_372;
          }
          if (v196)
          {
            uint64_t v251 = *(void *)(*(void *)(v297 + 1048) + 32);
            v252 = "invalid";
            if (v251)
            {
              v253 = *(const char **)(v251 + 16);
              if (v253) {
                v252 = v253;
              }
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v252;
            BOOL v139 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
            goto LABEL_371;
          }
        }
        else
        {
          BOOL v134 = __nwlog_obj();
          os_log_type_t v135 = v303[0];
          if (os_log_type_enabled(v134, (os_log_type_t)v303[0]))
          {
            uint64_t v233 = *(void *)(*(void *)(v297 + 1048) + 32);
            v234 = "invalid";
            if (v233)
            {
              v235 = *(const char **)(v233 + 16);
              if (v235) {
                v234 = v235;
              }
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v234;
            BOOL v139 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
            goto LABEL_371;
          }
        }
      }
LABEL_372:
      if (v133) {
        free(v133);
      }
      uint64_t v1 = v297;
      goto LABEL_68;
    }
    if (((v26 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v231 = __nwlog_obj();
        if (os_log_type_enabled(v231, OS_LOG_TYPE_DEBUG))
        {
          int v232 = *(_DWORD *)(v1 + 1280);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = v1 + 1289;
          *(_WORD *)&uint8_t buf[22] = 2080;
          v300 = " ";
          LOWORD(v301) = 1024;
          *(_DWORD *)((char *)&v301 + 2) = v232;
          _os_log_impl(&dword_1830D4000, v231, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> stopping control stream", buf, 0x26u);
        }
      }
    }
    uint64_t v27 = *(void *)(v1 + 1088);
    if (v27)
    {
      if (*(void *)v27)
      {
        int v28 = *(void (**)(uint64_t, uint64_t))(*(void *)v27 + 8);
        if (v28) {
          v28(v27, v1);
        }
      }
    }
    uint64_t v29 = *(void *)(v1 + 32);
    if (v29)
    {
      uint64_t v30 = *(void *)(v29 + 24);
      if (v30)
      {
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v30 + 240);
        if (v31)
        {
          v31(v29, v1 + 136);
          uint64_t v32 = *(void *)(v1 + 32);
          if (!v32) {
            goto LABEL_422;
          }
LABEL_49:
          uint64_t v33 = *(void *)(v32 + 24);
          if (v33)
          {
            BOOL v34 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
            if (v34)
            {
              v34(v32, v1);
              goto LABEL_52;
            }
          }
LABEL_422:
          __nwlog_obj();
          uint64_t v269 = *(void *)(v1 + 32);
          v270 = "invalid";
          if (v269)
          {
            v271 = *(const char **)(v269 + 16);
            if (v271) {
              v270 = v271;
            }
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = v270;
          v272 = (char *)_os_log_send_and_compose_impl();
          v303[0] = 16;
          char v298 = 0;
          if (!__nwlog_fault(v272, v303, &v298)) {
            goto LABEL_451;
          }
          if (v303[0] == 17)
          {
            v273 = __nwlog_obj();
            os_log_type_t v274 = v303[0];
            if (os_log_type_enabled(v273, (os_log_type_t)v303[0]))
            {
              uint64_t v275 = *(void *)(v297 + 32);
              v276 = "invalid";
              if (v275)
              {
                v277 = *(const char **)(v275 + 16);
                if (v277) {
                  v276 = v277;
                }
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v276;
              v278 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_450:
              _os_log_impl(&dword_1830D4000, v273, v274, v278, buf, 0x16u);
            }
          }
          else if (v298)
          {
            v279 = (char *)__nw_create_backtrace_string();
            v273 = __nwlog_obj();
            os_log_type_t v274 = v303[0];
            BOOL v280 = os_log_type_enabled(v273, (os_log_type_t)v303[0]);
            if (v279)
            {
              if (v280)
              {
                uint64_t v281 = *(void *)(v297 + 32);
                v282 = "invalid";
                if (v281)
                {
                  v283 = *(const char **)(v281 + 16);
                  if (v283) {
                    v282 = v283;
                  }
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v282;
                *(_WORD *)&uint8_t buf[22] = 2082;
                v300 = v279;
                _os_log_impl(&dword_1830D4000, v273, v274, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(v279);
              goto LABEL_451;
            }
            if (v280)
            {
              uint64_t v287 = *(void *)(v297 + 32);
              v288 = "invalid";
              if (v287)
              {
                v289 = *(const char **)(v287 + 16);
                if (v289) {
                  v288 = v289;
                }
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v288;
              v278 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
              goto LABEL_450;
            }
          }
          else
          {
            v273 = __nwlog_obj();
            os_log_type_t v274 = v303[0];
            if (os_log_type_enabled(v273, (os_log_type_t)v303[0]))
            {
              uint64_t v284 = *(void *)(v297 + 32);
              v285 = "invalid";
              if (v284)
              {
                v286 = *(const char **)(v284 + 16);
                if (v286) {
                  v285 = v286;
                }
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v285;
              v278 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
              goto LABEL_450;
            }
          }
LABEL_451:
          if (v272) {
            free(v272);
          }
          uint64_t v1 = v297;
          goto LABEL_52;
        }
      }
    }
    __nwlog_obj();
    uint64_t v180 = *(void *)(v1 + 32);
    v181 = "invalid";
    if (v180)
    {
      v182 = *(const char **)(v180 + 16);
      if (v182) {
        v181 = v182;
      }
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&buf[14] = v181;
    v183 = (char *)_os_log_send_and_compose_impl();
    v303[0] = 16;
    char v298 = 0;
    if (__nwlog_fault(v183, v303, &v298))
    {
      if (v303[0] == 17)
      {
        v184 = __nwlog_obj();
        os_log_type_t v185 = v303[0];
        if (!os_log_type_enabled(v184, (os_log_type_t)v303[0])) {
          goto LABEL_419;
        }
        uint64_t v186 = *(void *)(v297 + 32);
        v187 = "invalid";
        if (v186)
        {
          v188 = *(const char **)(v186 + 16);
          if (v188) {
            v187 = v188;
          }
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v187;
        v189 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback";
LABEL_418:
        _os_log_impl(&dword_1830D4000, v184, v185, v189, buf, 0x16u);
        goto LABEL_419;
      }
      if (!v298)
      {
        v184 = __nwlog_obj();
        os_log_type_t v185 = v303[0];
        if (!os_log_type_enabled(v184, (os_log_type_t)v303[0])) {
          goto LABEL_419;
        }
        uint64_t v248 = *(void *)(v297 + 32);
        v249 = "invalid";
        if (v248)
        {
          v250 = *(const char **)(v248 + 16);
          if (v250) {
            v249 = v250;
          }
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v249;
        v189 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, backtrace limit exceeded";
        goto LABEL_418;
      }
      v220 = (char *)__nw_create_backtrace_string();
      v184 = __nwlog_obj();
      os_log_type_t v185 = v303[0];
      BOOL v221 = os_log_type_enabled(v184, (os_log_type_t)v303[0]);
      if (!v220)
      {
        if (!v221) {
          goto LABEL_419;
        }
        uint64_t v266 = *(void *)(v297 + 32);
        v267 = "invalid";
        if (v266)
        {
          v268 = *(const char **)(v266 + 16);
          if (v268) {
            v267 = v268;
          }
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v267;
        v189 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, no backtrace";
        goto LABEL_418;
      }
      if (v221)
      {
        uint64_t v222 = *(void *)(v297 + 32);
        v223 = "invalid";
        if (v222)
        {
          v224 = *(const char **)(v222 + 16);
          if (v224) {
            v223 = v224;
          }
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v223;
        *(_WORD *)&uint8_t buf[22] = 2082;
        v300 = v220;
        _os_log_impl(&dword_1830D4000, v184, v185, "%{public}s protocol %{public}s has invalid remove_listen_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v220);
    }
LABEL_419:
    if (v183) {
      free(v183);
    }
    uint64_t v1 = v297;
    uint64_t v32 = *(void *)(v297 + 32);
    if (!v32) {
      goto LABEL_422;
    }
    goto LABEL_49;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
  char v105 = (void *)_os_log_send_and_compose_impl();
  v303[0] = 16;
  char v298 = 0;
  if (!__nwlog_fault((const char *)v105, v303, &v298))
  {
LABEL_457:
    if (!v105) {
      return;
    }
LABEL_205:
    free(v105);
    return;
  }
  if (v303[0] == 17)
  {
    v190 = __nwlog_obj();
    os_log_type_t v191 = v303[0];
    if (!os_log_type_enabled(v190, (os_log_type_t)v303[0])) {
      goto LABEL_457;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    v192 = "%{public}s called with null http3";
LABEL_456:
    _os_log_impl(&dword_1830D4000, v190, v191, v192, buf, 0xCu);
    goto LABEL_457;
  }
  if (!v298)
  {
    v190 = __nwlog_obj();
    os_log_type_t v191 = v303[0];
    if (!os_log_type_enabled(v190, (os_log_type_t)v303[0])) {
      goto LABEL_457;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    v192 = "%{public}s called with null http3, backtrace limit exceeded";
    goto LABEL_456;
  }
  v229 = (char *)__nw_create_backtrace_string();
  v190 = __nwlog_obj();
  os_log_type_t v191 = v303[0];
  BOOL v230 = os_log_type_enabled(v190, (os_log_type_t)v303[0]);
  if (!v229)
  {
    if (!v230) {
      goto LABEL_457;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    v192 = "%{public}s called with null http3, no backtrace";
    goto LABEL_456;
  }
  if (v230)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&buf[14] = v229;
    _os_log_impl(&dword_1830D4000, v190, v191, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v229);
  if (v105) {
    goto LABEL_205;
  }
}

void nw_protocol_http3_stream_destroy(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned __int16 *)(a1 + 736);
  if ((*(_WORD *)(a1 + 736) & 0x800) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v4 = *(_DWORD *)(*(void *)(a1 + 336) + 1280);
      uint64_t v5 = *(void *)(a1 + 240);
      *(_DWORD *)buf = 136447490;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      __int16 v57 = 2082;
      char v58 = (char *)(a1 + 636);
      __int16 v59 = 2080;
      uint64_t v60 = " ";
      __int16 v61 = 1024;
      int v62 = v4;
      __int16 v63 = 2048;
      uint64_t v64 = v5;
      __int16 v65 = 2048;
      uint64_t v66 = a1;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> destroying stream %p", buf, 0x3Au);
    }
  }
  if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x80000) != 0) {
    nw_http_transaction_metadata_set_event_handler(*(void **)(a1 + 392), 0);
  }
  if (*(void *)(a1 + 216))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v56 = "nw_protocol_http3_stream_destroy";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v6, &type, &v53)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      BOOL v9 = "%{public}s should not have unprocessed input frames left when destroying";
    }
    else
    {
      if (v53)
      {
        backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v56 = "nw_protocol_http3_stream_destroy";
            __int16 v57 = 2082;
            char v58 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s should not have unprocessed input frames left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v13)
        {
LABEL_20:
          if (v6) {
            free(v6);
          }
          goto LABEL_22;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v56 = "nw_protocol_http3_stream_destroy";
        BOOL v9 = "%{public}s should not have unprocessed input frames left when destroying, no backtrace";
        __int16 v14 = v11;
        os_log_type_t v15 = v12;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v14, v15, v9, buf, 0xCu);
        goto LABEL_20;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      BOOL v9 = "%{public}s should not have unprocessed input frames left when destroying, backtrace limit exceeded";
    }
    __int16 v14 = v7;
    os_log_type_t v15 = v8;
    goto LABEL_19;
  }
LABEL_22:
  if (!*(void *)(a1 + 176)) {
    goto LABEL_38;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v56 = "nw_protocol_http3_stream_destroy";
  uint8_t v16 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v53 = 0;
  if (__nwlog_fault(v16, &type, &v53))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = gLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      unint64_t v19 = "%{public}s should not have unprocessed framer input frames left when destroying";
LABEL_34:
      uint64_t v24 = v17;
      os_log_type_t v25 = v18;
LABEL_35:
      _os_log_impl(&dword_1830D4000, v24, v25, v19, buf, 0xCu);
      goto LABEL_36;
    }
    if (!v53)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = gLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      unint64_t v19 = "%{public}s should not have unprocessed framer input frames left when destroying, backtrace limit exceeded";
      goto LABEL_34;
    }
    __int16 v20 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v21 = gLogObj;
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v20)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v56 = "nw_protocol_http3_stream_destroy";
        __int16 v57 = 2082;
        char v58 = v20;
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s should not have unprocessed framer input frames left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v20);
      goto LABEL_36;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      unint64_t v19 = "%{public}s should not have unprocessed framer input frames left when destroying, no backtrace";
      uint64_t v24 = v21;
      os_log_type_t v25 = v22;
      goto LABEL_35;
    }
  }
LABEL_36:
  if (v16) {
    free(v16);
  }
LABEL_38:
  if (!*(void *)(a1 + 376)) {
    goto LABEL_54;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v56 = "nw_protocol_http3_stream_destroy";
  int v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v53 = 0;
  if (__nwlog_fault(v26, &type, &v53))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = gLogObj;
      os_log_type_t v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      uint64_t v29 = "%{public}s should not have input_fields_frame left when destroying";
LABEL_50:
      BOOL v34 = v27;
      os_log_type_t v35 = v28;
LABEL_51:
      _os_log_impl(&dword_1830D4000, v34, v35, v29, buf, 0xCu);
      goto LABEL_52;
    }
    if (!v53)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = gLogObj;
      os_log_type_t v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      uint64_t v29 = "%{public}s should not have input_fields_frame left when destroying, backtrace limit exceeded";
      goto LABEL_50;
    }
    uint64_t v30 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v31 = gLogObj;
    os_log_type_t v32 = type;
    BOOL v33 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v30)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v56 = "nw_protocol_http3_stream_destroy";
        __int16 v57 = 2082;
        char v58 = v30;
        _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s should not have input_fields_frame left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v30);
      goto LABEL_52;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_protocol_http3_stream_destroy";
      uint64_t v29 = "%{public}s should not have input_fields_frame left when destroying, no backtrace";
      BOOL v34 = v31;
      os_log_type_t v35 = v32;
      goto LABEL_51;
    }
  }
LABEL_52:
  if (v26) {
    free(v26);
  }
LABEL_54:
  nw_frame_reset(*(void *)(a1 + 384), 0, 0, 0, 0);
  BOOL v36 = *(void **)(a1 + 384);
  if (v36)
  {
    os_release(v36);
    *(void *)(a1 + 384) = 0;
  }
  uint64_t v37 = *(void *)(a1 + 608);
  char v38 = *(void **)(a1 + 616);
  if (v37)
  {
    *(void *)(v37 + 616) = v38;
    char v38 = *(void **)(a1 + 616);
  }
  else
  {
    if (!v38) {
      goto LABEL_61;
    }
    *(void *)(*(void *)(a1 + 336) + 968) = v38;
  }
  *char v38 = v37;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
LABEL_61:
  uint64_t v39 = *(void **)(a1 + 344);
  if (v39)
  {
    os_release(v39);
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v40 = *(void **)(a1 + 352);
  if (v40)
  {
    os_release(v40);
    *(void *)(a1 + 352) = 0;
  }
  char v41 = *(void **)(a1 + 360);
  if (v41)
  {
    os_release(v41);
    *(void *)(a1 + 360) = 0;
  }
  __int16 v42 = *(void **)(a1 + 392);
  if (v42)
  {
    os_release(v42);
    *(void *)(a1 + 392) = 0;
  }
  uint64_t v43 = *(void **)(a1 + 536);
  if (v43)
  {
    os_release(v43);
    *(void *)(a1 + 536) = 0;
  }
  uint64_t v44 = *(void **)(a1 + 416);
  if (v44)
  {
    os_release(v44);
    *(void *)(a1 + 416) = 0;
  }
  char v45 = *(void **)(a1 + 424);
  if (v45)
  {
    os_release(v45);
    *(void *)(a1 + 424) = 0;
  }
  uint64_t v46 = *(void **)(a1 + 488);
  if (v46)
  {
    free(v46);
    *(void *)(a1 + 488) = 0;
  }
  uint64_t v47 = *(NSObject **)(a1 + 520);
  if (v47)
  {
    dispatch_release(v47);
    *(void *)(a1 + 520) = 0;
  }
  uint64_t v48 = *(NSObject **)(a1 + 528);
  if (v48)
  {
    dispatch_release(v48);
    *(void *)(a1 + 528) = 0;
  }
  (*(void (**)(void, void))(*(void *)(a1 + 328) + 16))(*(void *)(a1 + 328), 0);
  int v49 = *(const void **)(a1 + 328);
  if (v49)
  {
    _Block_release(v49);
    *(void *)(a1 + 328) = 0;
  }
  if (*(unsigned char *)(a1 + 512))
  {
    uint64_t v50 = *(void **)(a1 + 504);
    if (v50) {
      os_release(v50);
    }
  }
  *(void *)(a1 + 504) = 0;
  if (*(unsigned char *)(a1 + 440))
  {
    uint64_t v51 = *(const void **)(a1 + 432);
    if (v51) {
      _Block_release(v51);
    }
  }
  *(void *)(a1 + 432) = 0;
  if (*(unsigned char *)(a1 + 408))
  {
    uint64_t v52 = *(void **)(a1 + 400);
    if (v52) {
      os_release(v52);
    }
  }
  free((void *)a1);
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_61444(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  *uint64_t v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

void nw_protocol_http3_uni_stream_destroy(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = a1;
    if (gLogDatapath)
    {
      os_log_type_t v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
      }
    }
    if (!*(void *)(v1 + 104)) {
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
    __int16 v19 = 2048;
    uint64_t v20 = v1;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v2, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = gLogObj;
        os_log_type_t v4 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        uint64_t v5 = "%{public}s unistream %p input_frames_unprocessed is not empty";
        goto LABEL_17;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = gLogObj;
        os_log_type_t v4 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        uint64_t v5 = "%{public}s unistream %p input_frames_unprocessed is not empty, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
          __int16 v19 = 2048;
          uint64_t v20 = v1;
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s unistream %p input_frames_unprocessed is not empty, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        uint64_t v5 = "%{public}s unistream %p input_frames_unprocessed is not empty, no backtrace";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0x16u);
      }
    }
LABEL_18:
    if (v2) {
      free(v2);
    }
LABEL_20:
    (*(void (**)(void, void))(*(void *)(v1 + 96) + 16))(*(void *)(v1 + 96), 0);
    os_log_type_t v8 = *(const void **)(v1 + 96);
    if (v8) {
      _Block_release(v8);
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
  uint64_t v1 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault((const char *)v1, &type, &v15)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
    uint64_t v11 = "%{public}s called with null http3_stream";
    goto LABEL_39;
  }
  if (!v15)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
    uint64_t v11 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    goto LABEL_39;
  }
  BOOL v13 = (char *)__nw_create_backtrace_string();
  BOOL v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  BOOL v14 = os_log_type_enabled(v9, type);
  if (v13)
  {
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
      __int16 v19 = 2082;
      uint64_t v20 = (uint64_t)v13;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v13);
    if (v1) {
      goto LABEL_22;
    }
    return;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
    uint64_t v11 = "%{public}s called with null http3_stream, no backtrace";
LABEL_39:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
  }
LABEL_40:
  if (v1) {
LABEL_22:
  }
    free((void *)v1);
}

uint64_t ___ZL23nw_http3_framer_cleanupP15nw_http3_framer_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    os_log_type_t v4 = __nwlog_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136446722;
      uint64_t v6 = "nw_http3_framer_cleanup_block_invoke";
      __int16 v7 = 2048;
      os_log_type_t v8 = a2;
      __int16 v9 = 1024;
      int v10 = nw_frame_unclaimed_length(a2);
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s input frames unprocessed still has frames in it: frame %p (%u bytes)", (uint8_t *)&v5, 0x1Cu);
    }
  }
  return 1;
}

uint64_t nw_http3_stream_get_application_error(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v8 = 0;
  __int16 v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2)
    {
      uint64_t v3 = *(uint64_t (**)(void))(v2 + 224);
      if (v3)
      {
        os_log_type_t v4 = (atomic_uchar *)v3();
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 0x40000000;
        v7[2] = ___ZL37nw_http3_stream_get_application_errorP24nw_protocol_http3_stream_block_invoke;
        void v7[3] = &unk_1E5246F60;
        void v7[4] = &v8;
        nw_array_apply(v4, (uint64_t)v7);
        if (v4) {
          os_release(v4);
        }
      }
    }
  }
  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

BOOL ___ZL37nw_http3_stream_get_application_errorP24nw_protocol_http3_stream_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(a3);
  if (is_quic_stream) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_quic_stream_get_application_error(a3);
  }
  return !is_quic_stream;
}

uint64_t nw_http3_stream_fields_process_field(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)a2 + *(int *)(a2 + 16);
  uint64_t v4 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v5 = (const char *)(*(void *)a2 + *(int *)(a2 + 20));
  int64_t v6 = *(unsigned __int16 *)(a2 + 26);
  if (!a1 || (*(_WORD *)(a1 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        __int16 v9 = " ";
        uint64_t v10 = (const char *)(a1 + 636);
        int v11 = *(_DWORD *)(*(void *)(a1 + 336) + 1280);
        uint64_t v12 = *(void *)(a1 + 240);
        if (!a1)
        {
          __int16 v9 = "";
          uint64_t v10 = "";
        }
        int v13 = 136448259;
        BOOL v14 = "nw_http3_stream_fields_process_field";
        __int16 v15 = 2082;
        uint8_t v16 = v10;
        __int16 v17 = 2080;
        os_log_type_t v18 = v9;
        __int16 v19 = 1024;
        int v20 = v11;
        __int16 v21 = 2048;
        uint64_t v22 = v12;
        __int16 v23 = 1040;
        int v24 = v4;
        __int16 v25 = 2080;
        unint64_t v26 = v3;
        __int16 v27 = 1040;
        int v28 = v6;
        __int16 v29 = 2085;
        uint64_t v30 = v5;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> received header field %.*s: %{sensitive}.*s", (uint8_t *)&v13, 0x50u);
      }
    }
  }
  return (nw_http_parsed_fields_add(*(void **)(a1 + 504), v3, v4, v5, v6, 1) - 1);
}

uint64_t nw_http3_stream_fields_prepare_decode(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a1 + 496);
  if (v5 >= a3)
  {
    __int16 v9 = *(void **)(a1 + 488);
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  unint64_t v6 = 2 * v5;
  if (v6 <= a3) {
    unint64_t v6 = a3;
  }
  if (v6 <= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v6;
  }
  *(void *)(a1 + 496) = v7;
  uint64_t v8 = *(void **)(a1 + 488);
  if (v8)
  {
    __int16 v9 = (void *)nw_reallocf_type<char *>(v8, v7);
    goto LABEL_14;
  }
  __int16 v9 = malloc_type_malloc(v7, 0xF2B69DE5uLL);
  if (v9)
  {
LABEL_14:
    *(void *)(a1 + 488) = v9;
    unint64_t v5 = *(void *)(a1 + 496);
    if (!a2)
    {
LABEL_10:
      *(_OWORD *)(a1 + 472) = 0u;
      *(_OWORD *)(a1 + 456) = 0u;
      if (v5 >= 0xFFFF) {
        LOWORD(v5) = -1;
      }
    }
LABEL_12:
    *(void *)(a1 + 448) = v9;
    *(_WORD *)(a1 + 474) = v5;
    return a1 + 448;
  }
  int v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  uint64_t v12 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    __int16 v9 = 0;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void nw_http3_stream_fields_unblocked(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1 || (a1[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      unint64_t v3 = __nwlog_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v4 = (char *)a1 + 636;
        unint64_t v5 = " ";
        int v6 = *(_DWORD *)(a1[42] + 1280);
        uint64_t v7 = a1[30];
        if (!a1)
        {
          unint64_t v5 = "";
          uint64_t v4 = "";
        }
        int v8 = 136447234;
        __int16 v9 = "nw_http3_stream_fields_unblocked";
        __int16 v10 = 2082;
        int v11 = v4;
        __int16 v12 = 2080;
        int v13 = v5;
        __int16 v14 = 1024;
        int v15 = v6;
        __int16 v16 = 2048;
        uint64_t v17 = v7;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> qpack unblocked", (uint8_t *)&v8, 0x30u);
      }
    }
  }
  a1[76] = 0;
  uint64_t v2 = *(void **)(a1[42] + 968);
  a1[77] = v2;
  *uint64_t v2 = a1;
  *(void *)(a1[42] + 968) = a1 + 76;
}

void ___ZL38nw_protocol_http3_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http3_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http3_listen_protocol_new_flow;
  qword_1E8F6B018 = (uint64_t)nw_protocol_http3_listen_protocol_disconnected;
}

void nw_protocol_http3_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v7, &type, &v27)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
      __int16 v10 = "%{public}s called with null listener";
    }
    else if (v27)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v23 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
          __int16 v31 = 2082;
          os_log_type_t v32 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v7) {
          return;
        }
LABEL_75:
        free(v7);
        return;
      }
      if (!v23) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
      __int16 v10 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
      __int16 v10 = "%{public}s called with null listener, backtrace limit exceeded";
    }
LABEL_73:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_74;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        __int16 v19 = __nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          int v20 = *((_DWORD *)handle + 320);
          *(_DWORD *)buf = 136446978;
          uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
          __int16 v31 = 2082;
          os_log_type_t v32 = (nw_protocol_identifier *)(handle + 1289);
          __int16 v33 = 2080;
          BOOL v34 = " ";
          __int16 v35 = 1024;
          int v36 = v20;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> listen protocol is disconnected", buf, 0x26u);
        }
      }
    }
    if (a2)
    {
      callbacks = a2->callbacks;
      if (callbacks)
      {
        remove_listen_handler = (void (*)(nw_protocol *, char *))callbacks->remove_listen_handler;
        if (remove_listen_handler)
        {
          remove_listen_handler(a2, handle + 136);
LABEL_9:
          nw_http3_async_close_connection_if_no_stream((uint64_t)handle);
          if ((*(_WORD *)(handle + 1373) & 0x800) == 0) {
            nw_protocol_set_output_handler((uint64_t)handle, 0);
          }
          return;
        }
      }
      __nwlog_obj();
      identifier = a2->identifier;
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
    }
    else
    {
      __nwlog_obj();
      identifier = (nw_protocol_identifier *)"invalid";
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
    __int16 v31 = 2082;
    os_log_type_t v32 = identifier;
    int v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v11, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_63;
        }
        __int16 v14 = (nw_protocol_identifier *)"invalid";
        if (a2 && a2->identifier) {
          __int16 v14 = a2->identifier;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
        __int16 v31 = 2082;
        os_log_type_t v32 = v14;
        int v15 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback";
        goto LABEL_62;
      }
      if (!v27)
      {
        __int16 v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_63;
        }
        __int16 v21 = (nw_protocol_identifier *)"invalid";
        if (a2 && a2->identifier) {
          __int16 v21 = a2->identifier;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
        __int16 v31 = 2082;
        os_log_type_t v32 = v21;
        int v15 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, backtrace limit exceeded";
        goto LABEL_62;
      }
      __int16 v16 = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v17 = os_log_type_enabled(v12, type);
      if (v16)
      {
        if (v17)
        {
          uint64_t v18 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            uint64_t v18 = a2->identifier;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
          __int16 v31 = 2082;
          os_log_type_t v32 = v18;
          __int16 v33 = 2082;
          BOOL v34 = v16;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s protocol %{public}s has invalid remove_listen_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v16);
        goto LABEL_63;
      }
      if (v17)
      {
        unint64_t v26 = (nw_protocol_identifier *)"invalid";
        if (a2 && a2->identifier) {
          unint64_t v26 = a2->identifier;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
        __int16 v31 = 2082;
        os_log_type_t v32 = v26;
        int v15 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, no backtrace";
LABEL_62:
        _os_log_impl(&dword_1830D4000, v12, v13, v15, buf, 0x16u);
      }
    }
LABEL_63:
    if (v11) {
      free(v11);
    }
    goto LABEL_9;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v7, &type, &v27)) {
    goto LABEL_74;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
    __int16 v10 = "%{public}s called with null http3";
    goto LABEL_73;
  }
  if (!v27)
  {
    int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
    __int16 v10 = "%{public}s called with null http3, backtrace limit exceeded";
    goto LABEL_73;
  }
  int v24 = (char *)__nw_create_backtrace_string();
  int v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v25 = os_log_type_enabled(v8, type);
  if (!v24)
  {
    if (!v25) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
    __int16 v10 = "%{public}s called with null http3, no backtrace";
    goto LABEL_73;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
    __int16 v31 = 2082;
    os_log_type_t v32 = (nw_protocol_identifier *)v24;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v24);
  if (v7) {
    goto LABEL_75;
  }
}

BOOL nw_protocol_http3_listen_protocol_new_flow(nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    uint64_t v50 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v118) = 0;
    if (!__nwlog_fault(v50, type, &v118)) {
      goto LABEL_127;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v51 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        char v53 = "%{public}s called with null listener";
LABEL_126:
        _os_log_impl(&dword_1830D4000, v51, v52, v53, aBlock, 0xCu);
      }
LABEL_127:
      if (v50) {
        free(v50);
      }
      return 0;
    }
    if (!(_BYTE)v118)
    {
      uint64_t v51 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        char v53 = "%{public}s called with null listener, backtrace limit exceeded";
        goto LABEL_126;
      }
      goto LABEL_127;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v51 = __nwlog_obj();
    os_log_type_t v52 = type[0];
    BOOL v57 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        char v53 = "%{public}s called with null listener, no backtrace";
        goto LABEL_126;
      }
      goto LABEL_127;
    }
    if (v57)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = backtrace_string;
      char v58 = "%{public}s called with null listener, dumping backtrace:%{public}s";
LABEL_82:
      _os_log_impl(&dword_1830D4000, v51, v52, v58, aBlock, 0x16u);
    }
LABEL_83:
    free(backtrace_string);
    goto LABEL_127;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    uint64_t v50 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v118) = 0;
    if (!__nwlog_fault(v50, type, &v118)) {
      goto LABEL_127;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v51 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        char v53 = "%{public}s called with null http3";
        goto LABEL_126;
      }
      goto LABEL_127;
    }
    if (!(_BYTE)v118)
    {
      uint64_t v51 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        char v53 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_126;
      }
      goto LABEL_127;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v51 = __nwlog_obj();
    os_log_type_t v52 = type[0];
    BOOL v59 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        char v53 = "%{public}s called with null http3, no backtrace";
        goto LABEL_126;
      }
      goto LABEL_127;
    }
    if (v59)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = backtrace_string;
      char v58 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  uint64_t v7 = handle + 1373;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v54 = __nwlog_obj();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        int v55 = *((_DWORD *)handle + 320);
        *(_DWORD *)aBlock = 136447234;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = handle + 1289;
        *(_WORD *)&aBlock[22] = 2080;
        uint64_t v127 = (uint64_t)" ";
        LOWORD(v128) = 1024;
        *(_DWORD *)((char *)&v128 + 2) = v55;
        HIWORD(v128) = 2112;
        v129 = a2;
        _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> creating new inbound flow from %@", aBlock, 0x30u);
      }
    }
  }
  uint64_t v118 = 0;
  BOOL v119 = &v118;
  uint64_t v120 = 0x2000000000;
  uint64_t v121 = 0;
  uint64_t v8 = *((void *)handle + 4);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9)
    {
      __int16 v10 = *(uint64_t (**)(void, uint64_t, void))(v9 + 224);
      if (v10)
      {
        int v11 = (atomic_uchar *)v10(*((void *)handle + 4), 255, 0);
        v117[0] = MEMORY[0x1E4F143A8];
        v117[1] = 0x40000000;
        v117[2] = ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke;
        v117[3] = &unk_1E5247A40;
        v117[4] = &v118;
        nw_array_apply(v11, (uint64_t)v117);
        if (v11) {
          os_release(v11);
        }
      }
    }
  }
  __int16 v12 = (void *)v119[3];
  if (!v12) {
    goto LABEL_59;
  }
  BOOL has_datagram_variant_flow_id = nw_quic_stream_get_has_datagram_variant_flow_id(v12);
  __int16 v14 = (void *)v119[3];
  if (has_datagram_variant_flow_id)
  {
    uint64_t datagram_variant_flow_id = nw_quic_stream_get_datagram_variant_flow_id(v14);
    if ((((unsigned __int16)*v7 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v70 = __nwlog_obj();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
        {
          int v71 = *((_DWORD *)handle + 320);
          *(_DWORD *)aBlock = 136447234;
          *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = handle + 1289;
          *(_WORD *)&aBlock[22] = 2080;
          uint64_t v127 = (uint64_t)" ";
          LOWORD(v128) = 1024;
          *(_DWORD *)((char *)&v128 + 2) = v71;
          HIWORD(v128) = 2048;
          v129 = (nw_endpoint *)datagram_variant_flow_id;
          _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Received datagram flow %llu", aBlock, 0x30u);
        }
      }
    }
    uint64_t v16 = *((void *)handle + 110);
    if (!v16)
    {
LABEL_15:
      if ((((unsigned __int16)*v7 | (handle[1375] << 16)) & 0x400000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v18 = *((_DWORD *)handle + 320);
          *(_DWORD *)aBlock = 136447234;
          *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = handle + 1289;
          *(_WORD *)&aBlock[22] = 2080;
          uint64_t v127 = (uint64_t)" ";
          LOWORD(v128) = 1024;
          *(_DWORD *)((char *)&v128 + 2) = v18;
          HIWORD(v128) = 2048;
          v129 = (nw_endpoint *)datagram_variant_flow_id;
          __int16 v19 = "%{public}s %{public}s%s<i%u> Rejecting datagram flow ID %llu";
          int v20 = v17;
          uint32_t v21 = 48;
LABEL_58:
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, v19, aBlock, v21);
          uint64_t v46 = 0;
LABEL_62:
          _Block_object_dispose(&v118, 8);
          return v46;
        }
      }
LABEL_59:
      uint64_t v46 = 0;
      goto LABEL_62;
    }
    while (1)
    {
      uint64_t v22 = *(void *)(v16 + 544);
      if ((*(_WORD *)(v16 + 736) & 0x20) != 0 && datagram_variant_flow_id == *(void *)(v16 + 248)) {
        break;
      }
      uint64_t v16 = *(void *)(v16 + 544);
      if (!v22) {
        goto LABEL_15;
      }
    }
    if ((*(_WORD *)(v16 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v97 = __nwlog_obj();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          int v98 = *(_DWORD *)(*(void *)(v16 + 336) + 1280);
          uint64_t v99 = *(nw_endpoint **)(v16 + 240);
          *(_DWORD *)aBlock = 136447490;
          *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v16 + 636;
          *(_WORD *)&aBlock[22] = 2080;
          uint64_t v127 = (uint64_t)" ";
          LOWORD(v128) = 1024;
          *(_DWORD *)((char *)&v128 + 2) = v98;
          HIWORD(v128) = 2048;
          v129 = v99;
          __int16 v130 = 2048;
          uint64_t v131 = datagram_variant_flow_id;
          _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Accepting datagram flow ID %llu", aBlock, 0x3Au);
        }
      }
    }
    int v23 = *(_WORD *)(v16 + 736) & 0xFFDF | (*(unsigned __int8 *)(v16 + 738) << 16);
    *(_WORD *)(v16 + 736) = *(_WORD *)(v16 + 736) & 0xFFCF | 0x10;
    *(unsigned char *)(v16 + 738) = BYTE2(v23);
    if (*(_DWORD *)(v16 + 372) == 4) {
      *(_DWORD *)(v16 + 372) = 8;
    }
    uint64_t v24 = v16 + 64;
    nw_protocol_set_input_handler(v16 + 64, *(void *)(v16 + 48));
    *(_OWORD *)(v16 + 64) = *(_OWORD *)v16;
    if (v8)
    {
      BOOL v25 = *(void (***)(uint64_t, uint64_t))(v8 + 24);
      if (v25)
      {
        unint64_t v26 = *v25;
        if (v26)
        {
          v26(v8, v16 + 64);
          nw_protocol_set_output_handler(v16 + 64, v8);
          goto LABEL_29;
        }
      }
      __nwlog_obj();
      char v84 = *(const char **)(v8 + 16);
      if (!v84) {
        char v84 = "invalid";
      }
    }
    else
    {
      __nwlog_obj();
      char v84 = "invalid";
    }
    *(_DWORD *)aBlock = 136446466;
    *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = v84;
    uint64_t v89 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v116 = 0;
    if (__nwlog_fault(v89, type, &v116))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        size_t v90 = __nwlog_obj();
        os_log_type_t v91 = type[0];
        if (!os_log_type_enabled(v90, type[0])) {
          goto LABEL_172;
        }
        BOOL v92 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          BOOL v92 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v92;
        uint64_t v93 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_171:
        _os_log_impl(&dword_1830D4000, v90, v91, v93, aBlock, 0x16u);
        goto LABEL_172;
      }
      if (!v116)
      {
        size_t v90 = __nwlog_obj();
        os_log_type_t v91 = type[0];
        if (!os_log_type_enabled(v90, type[0])) {
          goto LABEL_172;
        }
        int v103 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          int v103 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v103;
        uint64_t v93 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_171;
      }
      uint64_t v94 = (char *)__nw_create_backtrace_string();
      size_t v90 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      BOOL v95 = os_log_type_enabled(v90, type[0]);
      if (!v94)
      {
        if (!v95) {
          goto LABEL_172;
        }
        uint64_t v104 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          uint64_t v104 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v104;
        uint64_t v93 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_171;
      }
      if (v95)
      {
        uint64_t v96 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          uint64_t v96 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446722;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v96;
        *(_WORD *)&aBlock[22] = 2082;
        uint64_t v127 = (uint64_t)v94;
        _os_log_impl(&dword_1830D4000, v90, v91, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", aBlock, 0x20u);
      }
      free(v94);
    }
LABEL_172:
    if (v89) {
      free(v89);
    }
    nw_protocol_set_output_handler(v24, v8);
    if (!v8)
    {
      __nwlog_obj();
      uint64_t v85 = "invalid";
      goto LABEL_176;
    }
LABEL_29:
    uint64_t v27 = *(void *)(v8 + 24);
    if (v27)
    {
      int v28 = *(void (**)(uint64_t, uint64_t))(v27 + 24);
      if (v28)
      {
        v28(v8, v24);
LABEL_61:
        uint64_t v46 = 1;
        goto LABEL_62;
      }
    }
    __nwlog_obj();
    uint64_t v85 = *(const char **)(v8 + 16);
    if (!v85) {
      uint64_t v85 = "invalid";
    }
LABEL_176:
    *(_DWORD *)aBlock = 136446466;
    *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = v85;
    char v105 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v116 = 0;
    if (!__nwlog_fault(v105, type, &v116)) {
      goto LABEL_202;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v106 = __nwlog_obj();
      os_log_type_t v107 = type[0];
      if (!os_log_type_enabled(v106, type[0])) {
        goto LABEL_202;
      }
      os_log_type_t v108 = "invalid";
      if (v8 && *(void *)(v8 + 16)) {
        os_log_type_t v108 = *(const char **)(v8 + 16);
      }
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v108;
      id v109 = "%{public}s protocol %{public}s has invalid connect callback";
    }
    else if (v116)
    {
      os_log_type_t v110 = (char *)__nw_create_backtrace_string();
      os_log_type_t v106 = __nwlog_obj();
      os_log_type_t v107 = type[0];
      BOOL v111 = os_log_type_enabled(v106, type[0]);
      if (v110)
      {
        if (v111)
        {
          v112 = "invalid";
          if (v8 && *(void *)(v8 + 16)) {
            v112 = *(const char **)(v8 + 16);
          }
          *(_DWORD *)aBlock = 136446722;
          *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v112;
          *(_WORD *)&aBlock[22] = 2082;
          uint64_t v127 = (uint64_t)v110;
          _os_log_impl(&dword_1830D4000, v106, v107, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", aBlock, 0x20u);
        }
        free(v110);
        goto LABEL_202;
      }
      if (!v111)
      {
LABEL_202:
        if (v105) {
          free(v105);
        }
        goto LABEL_61;
      }
      v114 = "invalid";
      if (v8 && *(void *)(v8 + 16)) {
        v114 = *(const char **)(v8 + 16);
      }
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v114;
      id v109 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
    }
    else
    {
      os_log_type_t v106 = __nwlog_obj();
      os_log_type_t v107 = type[0];
      if (!os_log_type_enabled(v106, type[0])) {
        goto LABEL_202;
      }
      os_log_type_t v113 = "invalid";
      if (v8 && *(void *)(v8 + 16)) {
        os_log_type_t v113 = *(const char **)(v8 + 16);
      }
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v113;
      id v109 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v106, v107, v109, aBlock, 0x16u);
    goto LABEL_202;
  }
  uint64_t id = nw_quic_stream_get_id(v14);
  uint64_t v30 = id;
  int v31 = (handle[1375] >> 6) & 1;
  if (!gLogDatapath) {
    LOBYTE(v31) = 1;
  }
  if ((id & 2) == 0)
  {
    if ((v31 & 1) == 0)
    {
      uint64_t v80 = __nwlog_obj();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        int v81 = *((_DWORD *)handle + 320);
        *(_DWORD *)aBlock = 136446978;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = handle + 1289;
        *(_WORD *)&aBlock[22] = 2080;
        uint64_t v127 = (uint64_t)" ";
        LOWORD(v128) = 1024;
        *(_DWORD *)((char *)&v128 + 2) = v81;
        _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> new incoming flow is bidi-stream, calling our listen handler", aBlock, 0x26u);
      }
    }
    os_log_type_t v32 = (void (***)(void, nw_endpoint *, nw_parameters *))*((void *)handle + 136);
    int v33 = (unsigned __int16)*v7 | (handle[1375] << 16);
    if (v32)
    {
      if (*v7)
      {
        *((void *)handle + 123) = v30;
        handle[1375] = BYTE2(v33);
        _WORD *v7 = v33 | 0x8000;
        (**v32)(v32, a2, a3);
        int v47 = (unsigned __int16)*v7;
        unsigned int v48 = v47 & 0xFFFF7FFF | (handle[1375] << 16);
        _WORD *v7 = v47 & 0x7FFF;
        handle[1375] = BYTE2(v48);
        goto LABEL_61;
      }
      if ((v33 & 0x400000) != 0) {
        goto LABEL_59;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v34 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      int v35 = *((_DWORD *)handle + 320);
      *(_DWORD *)aBlock = 136446978;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = handle + 1289;
      *(_WORD *)&aBlock[22] = 2080;
      uint64_t v127 = (uint64_t)" ";
      LOWORD(v128) = 1024;
      *(_DWORD *)((char *)&v128 + 2) = v35;
      __int16 v19 = "%{public}s %{public}s%s<i%u> Rejecting server initiated stream";
    }
    else
    {
      if ((v33 & 0x400000) != 0) {
        goto LABEL_59;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v34 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      int v45 = *((_DWORD *)handle + 320);
      *(_DWORD *)aBlock = 136446978;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = handle + 1289;
      *(_WORD *)&aBlock[22] = 2080;
      uint64_t v127 = (uint64_t)" ";
      LOWORD(v128) = 1024;
      *(_DWORD *)((char *)&v128 + 2) = v45;
      __int16 v19 = "%{public}s %{public}s%s<i%u> No listen handler found for inbound stream";
    }
    int v20 = v34;
    uint32_t v21 = 38;
    goto LABEL_58;
  }
  if ((v31 & 1) == 0)
  {
    uint64_t v82 = __nwlog_obj();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      int v83 = *((_DWORD *)handle + 320);
      *(_DWORD *)aBlock = 136446978;
      *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = handle + 1289;
      *(_WORD *)&aBlock[22] = 2080;
      uint64_t v127 = (uint64_t)" ";
      LOWORD(v128) = 1024;
      *(_DWORD *)((char *)&v128 + 2) = v83;
      _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> New incoming flow is uni-stream, opening", aBlock, 0x26u);
    }
  }
  int v36 = malloc_type_calloc(1uLL, 0x88uLL, 0xEAFB8F1AuLL);
  if (v36)
  {
LABEL_43:
    v36[16] = 0;
    *((_OWORD *)v36 + 6) = 0u;
    *((_OWORD *)v36 + 7) = 0u;
    *((_OWORD *)v36 + 4) = 0u;
    *((_OWORD *)v36 + 5) = 0u;
    *((_OWORD *)v36 + 2) = 0u;
    *((_OWORD *)v36 + 3) = 0u;
    *(_OWORD *)int v36 = 0u;
    *((_OWORD *)v36 + 1) = 0u;
    if (gLogDatapath)
    {
      uint64_t v79 = __nwlog_obj();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_http3_uni_stream_create_inbound";
        *(_WORD *)&aBlock[12] = 2048;
        *(void *)&aBlock[14] = v36;
        _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s created uni_stream %p", aBlock, 0x16u);
      }
    }
    *(void *)os_log_type_t type = 0;
    os_log_type_t v123 = type;
    uint64_t v124 = 0x2000000000;
    BOOL v125 = v36;
    *(void *)aBlock = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 0x40000000;
    *(void *)&aBlock[16] = ___ZL34nw_http3_uni_stream_create_inboundP17nw_protocol_http3_block_invoke;
    uint64_t v127 = (uint64_t)&unk_1E5247A90;
    BOOL v128 = type;
    v36[12] = _Block_copy(aBlock);
    _Block_object_dispose(type, 8);
    v36[2] = &g_http3_uni_stream_protocol_identifier;
    if (nw_protocol_http3_uni_stream_get_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http3_uni_stream_get_callbacks(void)::onceToken, &__block_literal_global_67);
    }
    v36[3] = &nw_protocol_http3_uni_stream_get_callbacks(void)::protocol_callbacks;
    v36[5] = v36;
    char v37 = *((unsigned char *)v36 + 131);
    v36[9] = handle;
    v36[13] = 0;
    v36[14] = v36 + 13;
    *((_WORD *)v36 + 64) = 0;
    *((unsigned char *)v36 + 131) = v37 & 0xF2 | 8;
    *(_OWORD *)int v36 = *(_OWORD *)handle;
    nw_protocol_set_input_handler((uint64_t)v36, (uint64_t)handle);
    protocol_handler = a1->protocol_handler;
    if (protocol_handler)
    {
      callbacks = protocol_handler->callbacks;
      if (callbacks)
      {
        add_input_handler = (void (*)(nw_protocol *, void *))callbacks->add_input_handler;
        if (add_input_handler)
        {
          add_input_handler(protocol_handler, v36);
LABEL_50:
          uint64_t v41 = *((void *)handle + 112);
          unsigned char v36[10] = v41;
          if (v41) {
            __int16 v42 = (void *)(v41 + 88);
          }
          else {
            __int16 v42 = handle + 904;
          }
          void *v42 = v36 + 10;
          *((void *)handle + 112) = v36;
          v36[11] = handle + 896;
          uint64_t v43 = v36[12];
          uint64_t v44 = (void *)*((void *)handle + 157);
          v115[0] = MEMORY[0x1E4F143A8];
          v115[1] = 0x40000000;
          v115[2] = ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke_184;
          v115[3] = &unk_1E5247A68;
          v115[4] = v43;
          nw_queue_context_async(v44, v115);
          goto LABEL_61;
        }
      }
    }
    __nwlog_obj();
    uint64_t v60 = a1->protocol_handler;
    __int16 v61 = "invalid";
    if (v60)
    {
      identifier = v60->identifier;
      if (identifier) {
        __int16 v61 = (const char *)identifier;
      }
    }
    *(_DWORD *)aBlock = 136446466;
    *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = v61;
    __int16 v63 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v116 = 0;
    if (__nwlog_fault(v63, type, &v116))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v64 = __nwlog_obj();
        os_log_type_t v65 = type[0];
        if (!os_log_type_enabled(v64, type[0])) {
          goto LABEL_159;
        }
        uint64_t v66 = a1->protocol_handler;
        uint64_t v67 = "invalid";
        if (v66)
        {
          uint64_t v68 = v66->identifier;
          if (v68) {
            uint64_t v67 = (const char *)v68;
          }
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v67;
        uint64_t v69 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
        goto LABEL_158;
      }
      if (!v116)
      {
        uint64_t v64 = __nwlog_obj();
        os_log_type_t v65 = type[0];
        if (!os_log_type_enabled(v64, type[0])) {
          goto LABEL_159;
        }
        uint64_t v86 = a1->protocol_handler;
        uint64_t v87 = "invalid";
        if (v86)
        {
          __int16 v88 = v86->identifier;
          if (v88) {
            uint64_t v87 = (const char *)v88;
          }
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v87;
        uint64_t v69 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_158;
      }
      uint64_t v72 = (char *)__nw_create_backtrace_string();
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      BOOL v73 = os_log_type_enabled(v64, type[0]);
      if (v72)
      {
        if (v73)
        {
          uint64_t v74 = a1->protocol_handler;
          uint64_t v75 = "invalid";
          if (v74)
          {
            __int16 v76 = v74->identifier;
            if (v76) {
              uint64_t v75 = (const char *)v76;
            }
          }
          *(_DWORD *)aBlock = 136446722;
          *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v75;
          *(_WORD *)&aBlock[22] = 2082;
          uint64_t v127 = (uint64_t)v72;
          _os_log_impl(&dword_1830D4000, v64, v65, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", aBlock, 0x20u);
        }
        free(v72);
        goto LABEL_159;
      }
      if (v73)
      {
        uint64_t v100 = a1->protocol_handler;
        os_log_type_t v101 = "invalid";
        if (v100)
        {
          os_log_type_t v102 = v100->identifier;
          if (v102) {
            os_log_type_t v101 = (const char *)v102;
          }
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v101;
        uint64_t v69 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
LABEL_158:
        _os_log_impl(&dword_1830D4000, v64, v65, v69, aBlock, 0x16u);
      }
    }
LABEL_159:
    if (v63) {
      free(v63);
    }
    goto LABEL_50;
  }
  int v77 = __nwlog_obj();
  os_log_type_enabled(v77, OS_LOG_TYPE_ERROR);
  *(_DWORD *)aBlock = 136446722;
  *(void *)&void aBlock[4] = "strict_calloc";
  *(_WORD *)&aBlock[12] = 2048;
  *(void *)&aBlock[14] = 1;
  *(_WORD *)&aBlock[22] = 2048;
  uint64_t v127 = 136;
  __int16 v78 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v78);
  if (!result)
  {
    free(v78);
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

uint64_t nw_http3_get_default_output_handler(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 32);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v11 = "nw_http3_get_default_output_handler";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        int v11 = "nw_http3_get_default_output_handler";
        unint64_t v5 = "%{public}s called with null http3";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      unint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          int v11 = "nw_http3_get_default_output_handler";
          __int16 v12 = 2082;
          os_log_type_t v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        int v11 = "nw_http3_get_default_output_handler";
        unint64_t v5 = "%{public}s called with null http3, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        int v11 = "nw_http3_get_default_output_handler";
        unint64_t v5 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

uint64_t ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (nw_protocol_metadata_is_quic_stream(a3)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  }
  return 1;
}

uint64_t ___ZL34nw_http3_uni_stream_create_inboundP17nw_protocol_http3_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke_184(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      unint64_t v5 = *(void (**)(void))(v4 + 24);
      if (v5)
      {
        v5();
        return;
      }
    }
  }
  __nwlog_obj();
  uint64_t v6 = *(void *)(v2 + 32);
  BOOL v7 = "invalid";
  if (v6)
  {
    char v8 = *(const char **)(v6 + 16);
    if (v8) {
      BOOL v7 = v8;
    }
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
  __int16 v31 = 2082;
  os_log_type_t v32 = v7;
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v9, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_37;
      }
      uint64_t v12 = *(void *)(v2 + 32);
      os_log_type_t v13 = "invalid";
      if (v12)
      {
        uint64_t v14 = *(const char **)(v12 + 16);
        if (v14) {
          os_log_type_t v13 = v14;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
      __int16 v31 = 2082;
      os_log_type_t v32 = v13;
      int v15 = "%{public}s protocol %{public}s has invalid connect callback";
      goto LABEL_36;
    }
    if (!v27)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_37;
      }
      uint64_t v21 = *(void *)(v2 + 32);
      uint64_t v22 = "invalid";
      if (v21)
      {
        int v23 = *(const char **)(v21 + 16);
        if (v23) {
          uint64_t v22 = v23;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
      __int16 v31 = 2082;
      os_log_type_t v32 = v22;
      int v15 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    __int16 v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v17 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v17)
      {
        uint64_t v18 = *(void *)(v2 + 32);
        __int16 v19 = "invalid";
        if (v18)
        {
          int v20 = *(const char **)(v18 + 16);
          if (v20) {
            __int16 v19 = v20;
          }
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
        __int16 v31 = 2082;
        os_log_type_t v32 = v19;
        __int16 v33 = 2082;
        uint64_t v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_37;
    }
    if (v17)
    {
      uint64_t v24 = *(void *)(v2 + 32);
      BOOL v25 = "invalid";
      if (v24)
      {
        unint64_t v26 = *(const char **)(v24 + 16);
        if (v26) {
          BOOL v25 = v26;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
      __int16 v31 = 2082;
      os_log_type_t v32 = v25;
      int v15 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
LABEL_36:
      _os_log_impl(&dword_1830D4000, v10, v11, v15, buf, 0x16u);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
}

double ___ZL42nw_protocol_http3_uni_stream_get_callbacksv_block_invoke()
{
  qword_1E8F6B360 = 0;
  *(void *)algn_1E8F6B359 = 0;
  strcpy((char *)&g_http3_uni_stream_protocol_identifier, "http3-uni-stream");
  *(void *)&double result = 0x100000004;
  qword_1E8F6B368 = 0x100000004;
  nw_protocol_http3_uni_stream_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_default_add_input_handler;
  qword_1E8F6B070 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F6B068 = (uint64_t)nw_protocol_default_remove_input_handler;
  qword_1E8F6B0A8 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F6B120 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F6B168 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F6B158 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F6B0C8 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F6B0D0 = (uint64_t)nw_protocol_default_get_parameters;
  qword_1E8F6B0E0 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F6B0E8 = (uint64_t)nw_protocol_default_get_remote;
  qword_1E8F6B0D8 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F6B108 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F6B128 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F6B130 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F6B078 = (uint64_t)nw_protocol_default_connect;
  qword_1E8F6B080 = (uint64_t)nw_protocol_default_disconnect;
  qword_1E8F6B160 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F6B138 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F6B140 = (uint64_t)nw_protocol_default_copy_info;
  qword_1E8F6B0F0 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F6B0F8 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F6B100 = (uint64_t)nw_protocol_default_notify;
  qword_1E8F6B148 = (uint64_t)nw_protocol_default_add_listen_handler;
  qword_1E8F6B150 = (uint64_t)nw_protocol_default_remove_listen_handler;
  qword_1E8F6B088 = (uint64_t)nw_protocol_http3_uni_stream_connected;
  qword_1E8F6B090 = (uint64_t)nw_protocol_http3_uni_stream_disconnected;
  qword_1E8F6B098 = (uint64_t)nw_protocol_http3_uni_stream_error;
  qword_1E8F6B118 = (uint64_t)nw_protocol_http3_uni_stream_input_finished;
  qword_1E8F6B0A0 = (uint64_t)nw_protocol_http3_uni_stream_input_available;
  qword_1E8F6B0B0 = (uint64_t)nw_protocol_http3_uni_stream_get_input_frames;
  qword_1E8F6B0B8 = (uint64_t)nw_protocol_http3_uni_stream_get_output_frames;
  qword_1E8F6B0C0 = (uint64_t)nw_protocol_http3_uni_stream_finalize_output_frames;
  qword_1E8F6B110 = (uint64_t)nw_protocol_http3_uni_stream_supports_external_data;
  return result;
}

uint64_t nw_protocol_http3_uni_stream_supports_external_data(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (unsigned __int8 *)a1->handle;
    if (handle) {
      return (handle[131] >> 4) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null http3_stream";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
      __int16 v15 = 2082;
      uint64_t v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
      __int16 v15 = 2082;
      uint64_t v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
    uint64_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_http3_uni_stream_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    char v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    BYTE4(offset) = 0;
    if (!__nwlog_fault(v27, &__src, (unsigned char *)&offset + 4)) {
      goto LABEL_107;
    }
    if (__src != 17)
    {
      if (!BYTE4(offset))
      {
        int v28 = __nwlog_obj();
        os_log_type_t v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_106;
        }
        goto LABEL_107;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v28 = __nwlog_obj();
      os_log_type_t v29 = __src;
      BOOL v32 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_106;
        }
        goto LABEL_107;
      }
      if (!v32) {
        goto LABEL_93;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      __int16 v44 = 2082;
      *(void *)int v45 = backtrace_string;
      __int16 v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_92;
    }
    int v28 = __nwlog_obj();
    os_log_type_t v29 = __src;
    if (!os_log_type_enabled(v28, (os_log_type_t)__src)) {
      goto LABEL_107;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    uint64_t v30 = "%{public}s called with null protocol";
LABEL_106:
    _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
    goto LABEL_107;
  }
  handle = (unsigned __int8 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    char v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    BYTE4(offset) = 0;
    if (!__nwlog_fault(v27, &__src, (unsigned char *)&offset + 4)) {
      goto LABEL_107;
    }
    if (__src != 17)
    {
      if (!BYTE4(offset))
      {
        int v28 = __nwlog_obj();
        os_log_type_t v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null http3_stream, backtrace limit exceeded";
          goto LABEL_106;
        }
        goto LABEL_107;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      int v28 = __nwlog_obj();
      os_log_type_t v29 = __src;
      BOOL v34 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null http3_stream, no backtrace";
          goto LABEL_106;
        }
        goto LABEL_107;
      }
      if (!v34) {
        goto LABEL_93;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      __int16 v44 = 2082;
      *(void *)int v45 = backtrace_string;
      __int16 v33 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_92;
    }
    int v28 = __nwlog_obj();
    os_log_type_t v29 = __src;
    if (!os_log_type_enabled(v28, (os_log_type_t)__src)) {
      goto LABEL_107;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    uint64_t v30 = "%{public}s called with null http3_stream";
    goto LABEL_106;
  }
  if (!handle[130]) {
    return ((uint64_t (*)(nw_protocol *, nw_frame_array_s *))a1->output_handler->callbacks->finalize_output_frames)(a1->output_handler, a2);
  }
  tqh_first = a2->tqh_first;
  if (!nw_frame_uses_external_data((uint64_t)a2->tqh_first))
  {
    nw_frame_unclaim((uint64_t)tqh_first, v6, handle[130], 0);
    HIDWORD(offset) = 0;
    uint64_t v10 = nw_frame_unclaimed_bytes((uint64_t)tqh_first, (_DWORD *)&offset + 1);
    if (v10)
    {
      char v11 = (void *)v10;
      __srCC_SHA256_CTX c = 0;
      unint64_t v12 = *((void *)handle + 8);
      if (v12 > 0x3F)
      {
        if (v12 >> 14)
        {
          if (v12 >> 30)
          {
            if (v12 >> 62)
            {
              uint64_t v14 = __nwlog_obj();
              os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446466;
              uint64_t v43 = "_http_vle_encode";
              __int16 v44 = 2048;
              *(void *)int v45 = v12;
              __int16 v15 = (void *)_os_log_send_and_compose_impl();
              uint64_t result = __nwlog_abort((uint64_t)v15);
              if (result) {
                goto LABEL_110;
              }
              free(v15);
            }
            else
            {
              __srCC_SHA256_CTX c = bswap64(v12 | 0xC000000000000000);
            }
          }
          else
          {
            __srCC_SHA256_CTX c = bswap32(v12 | 0x80000000);
          }
        }
        else
        {
          __srCC_SHA256_CTX c = bswap32(v12 | 0x4000) >> 16;
        }
      }
      else
      {
        __srCC_SHA256_CTX c = *((void *)handle + 8);
      }
      memcpy(v11, &__src, handle[130]);
LABEL_53:
      *((void *)handle + 8) = -1;
      handle[130] = 0;
      return ((uint64_t (*)(nw_protocol *, nw_frame_array_s *))a1->output_handler->callbacks->finalize_output_frames)(a1->output_handler, a2);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    char v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    LOBYTE(offset) = 0;
    if (!__nwlog_fault(v27, &__src, &offset)) {
      goto LABEL_107;
    }
    if (__src == 17)
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = __src;
      if (!os_log_type_enabled(v28, (os_log_type_t)__src)) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      uint64_t v30 = "%{public}s called with null unclaimed_bytes";
      goto LABEL_106;
    }
    if (!(_BYTE)offset)
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = __src;
      if (os_log_type_enabled(v28, (os_log_type_t)__src))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        uint64_t v30 = "%{public}s called with null unclaimed_bytes, backtrace limit exceeded";
        goto LABEL_106;
      }
      goto LABEL_107;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    int v28 = __nwlog_obj();
    os_log_type_t v29 = __src;
    BOOL v35 = os_log_type_enabled(v28, (os_log_type_t)__src);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        uint64_t v30 = "%{public}s called with null unclaimed_bytes, no backtrace";
        goto LABEL_106;
      }
      goto LABEL_107;
    }
    if (!v35) {
      goto LABEL_93;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    __int16 v44 = 2082;
    *(void *)int v45 = backtrace_string;
    __int16 v33 = "%{public}s called with null unclaimed_bytes, dumping backtrace:%{public}s";
LABEL_92:
    _os_log_impl(&dword_1830D4000, v28, v29, v33, buf, 0x16u);
    goto LABEL_93;
  }
  nw_frame_unclaim((uint64_t)tqh_first, v6, 0, handle[130]);
  size_t offset = 0;
  BOOL v7 = nw_frame_copy_external_data((uint64_t)tqh_first, (_DWORD *)&offset + 1, &offset);
  BOOL v8 = v7;
  if (HIDWORD(offset))
  {
    subrange = dispatch_data_create_subrange(v7, HIDWORD(offset), 0xFFFFFFFFFFFFFFFFLL);
    if (v8) {
      dispatch_release(v8);
    }
  }
  else
  {
    subrange = v7;
  }
  if (subrange)
  {
    __srCC_SHA256_CTX c = 0;
    unint64_t v13 = *((void *)handle + 8);
    if (v13 <= 0x3F)
    {
      __srCC_SHA256_CTX c = *((void *)handle + 8);
      goto LABEL_32;
    }
    if (!(v13 >> 14))
    {
      __srCC_SHA256_CTX c = bswap32(v13 | 0x4000) >> 16;
      goto LABEL_32;
    }
    if (!(v13 >> 30))
    {
      __srCC_SHA256_CTX c = bswap32(v13 | 0x80000000);
      goto LABEL_32;
    }
    if (!(v13 >> 62))
    {
      __srCC_SHA256_CTX c = bswap64(v13 | 0xC000000000000000);
      goto LABEL_32;
    }
    uint64_t v17 = __nwlog_obj();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "_http_vle_encode";
    __int16 v44 = 2048;
    *(void *)int v45 = v13;
    uint64_t v18 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v18);
    if (!result)
    {
      free(v18);
LABEL_32:
      __int16 v19 = dispatch_data_create(&__src, handle[130], 0, 0);
      concat = dispatch_data_create_concat(v19, subrange);
      if (v19) {
        dispatch_release(v19);
      }
      dispatch_release(subrange);
      unsigned int v39 = 0;
      nw_frame_set_external_data((uint64_t)tqh_first, concat, &v39);
      if (concat) {
        dispatch_release(concat);
      }
      if (v39 == offset) {
        goto LABEL_53;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      __int16 v44 = 1024;
      *(_DWORD *)int v45 = v39;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = offset;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (!__nwlog_fault(v21, &type, &v37)) {
        goto LABEL_51;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_51;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        __int16 v44 = 1024;
        *(_DWORD *)int v45 = v39;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = offset;
        uint64_t v24 = "%{public}s Incorrect frame length set: %u != %u";
      }
      else if (v37)
      {
        BOOL v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = gLogObj;
        os_log_type_t v23 = type;
        BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v25)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
            __int16 v44 = 1024;
            *(_DWORD *)int v45 = v39;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)&v45[6] = offset;
            __int16 v46 = 2082;
            int v47 = v25;
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s Incorrect frame length set: %u != %u, dumping backtrace:%{public}s", buf, 0x22u);
          }
          free(v25);
          goto LABEL_51;
        }
        if (!v26)
        {
LABEL_51:
          if (v21) {
            free(v21);
          }
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        __int16 v44 = 1024;
        *(_DWORD *)int v45 = v39;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = offset;
        uint64_t v24 = "%{public}s Incorrect frame length set: %u != %u, no backtrace";
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_51;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        __int16 v44 = 1024;
        *(_DWORD *)int v45 = v39;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = offset;
        uint64_t v24 = "%{public}s Incorrect frame length set: %u != %u, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0x18u);
      goto LABEL_51;
    }
LABEL_110:
    __break(1u);
    return result;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
  char v27 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(__src) = 16;
  LOBYTE(v39) = 0;
  if (!__nwlog_fault(v27, &__src, &v39)) {
    goto LABEL_107;
  }
  if (__src != 17)
  {
    if (!(_BYTE)v39)
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = __src;
      if (os_log_type_enabled(v28, (os_log_type_t)__src))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        uint64_t v30 = "%{public}s called with null external_data, backtrace limit exceeded";
        goto LABEL_106;
      }
      goto LABEL_107;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    int v28 = __nwlog_obj();
    os_log_type_t v29 = __src;
    BOOL v36 = os_log_type_enabled(v28, (os_log_type_t)__src);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        uint64_t v30 = "%{public}s called with null external_data, no backtrace";
        goto LABEL_106;
      }
      goto LABEL_107;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      __int16 v44 = 2082;
      *(void *)int v45 = backtrace_string;
      __int16 v33 = "%{public}s called with null external_data, dumping backtrace:%{public}s";
      goto LABEL_92;
    }
LABEL_93:
    free(backtrace_string);
    goto LABEL_107;
  }
  int v28 = __nwlog_obj();
  os_log_type_t v29 = __src;
  if (os_log_type_enabled(v28, (os_log_type_t)__src))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    uint64_t v30 = "%{public}s called with null external_data";
    goto LABEL_106;
  }
LABEL_107:
  if (v27) {
    free(v27);
  }
  return 0;
}

BOOL nw_protocol_http3_uni_stream_get_output_frames(nw_protocol *a1, nw_protocol *a2, int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
    char v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v37, &type, &v50)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        uint64_t v40 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_1830D4000, v38, v39, v40, buf, 0xCu);
      }
LABEL_94:
      if (!v37) {
        return 0;
      }
      BOOL v36 = (char *)v37;
      goto LABEL_53;
    }
    if (!v50)
    {
      char v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        uint64_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    char v38 = __nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v43 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        uint64_t v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
      __int16 v54 = 2082;
      *(void *)int v55 = backtrace_string;
      __int16 v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_74:
      _os_log_impl(&dword_1830D4000, v38, v39, v44, buf, 0x16u);
    }
LABEL_75:
    free(backtrace_string);
    goto LABEL_94;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
    char v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v37, &type, &v50)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        uint64_t v40 = "%{public}s called with null http3_stream";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (!v50)
    {
      char v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        uint64_t v40 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    char v38 = __nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v45 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        uint64_t v40 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
      __int16 v54 = 2082;
      *(void *)int v55 = backtrace_string;
      __int16 v44 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_74;
    }
    goto LABEL_75;
  }
  if (gLogDatapath)
  {
    uint64_t v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
      __int16 v54 = 2048;
      *(void *)int v55 = handle;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
    }
  }
  unint64_t v11 = handle[8];
  if (v11 == -1 || *((unsigned char *)handle + 130))
  {
    unsigned int v12 = 0;
    output_handler = a1->output_handler;
    if (!output_handler) {
      return 0;
    }
    goto LABEL_23;
  }
  if (v11 < 0x40)
  {
    unsigned int v12 = 1;
    goto LABEL_18;
  }
  if (v11 < 0x4000)
  {
    unsigned int v12 = 2;
    goto LABEL_18;
  }
  if (!(v11 >> 30))
  {
    unsigned int v12 = 4;
    goto LABEL_18;
  }
  if (!(v11 >> 62))
  {
    unsigned int v12 = 8;
    goto LABEL_18;
  }
  uint64_t v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  char v53 = "_http_vle_length";
  __int16 v54 = 2048;
  *(void *)int v55 = v11;
  __int16 v15 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    unsigned int v12 = 0;
LABEL_18:
    BOOL v17 = __CFADD__(a3, v12);
    uint64_t v18 = a3 + v12;
    if (v17)
    {
      if (gLogDatapath)
      {
        int v49 = handle;
        __int16 v46 = __nwlog_obj();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
          __int16 v54 = 2082;
          *(void *)int v55 = "minimum_bytes";
          *(_WORD *)&v55[8] = 2048;
          *(void *)uint64_t v56 = v12;
          *(_WORD *)&v56[8] = 2048;
          uint64_t v57 = v18;
          _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
        handle = v49;
        BOOL v17 = __CFADD__(a4, v12);
        uint64_t v19 = a4 + v12;
        if (!v17)
        {
LABEL_22:
          output_handler = a1->output_handler;
          if (!output_handler) {
            return 0;
          }
LABEL_23:
          callbacks = output_handler->callbacks;
          if (!callbacks) {
            return 0;
          }
          get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *))callbacks->get_output_frames;
          if (!get_output_frames) {
            return 0;
          }
          uint64_t v22 = get_output_frames(output_handler, a1);
          if (!v22 || !v12) {
            return v22;
          }
          tqh_first = a6->tqh_first;
          unsigned int v24 = nw_frame_unclaimed_length(tqh_first);
          if (v24 >= v12)
          {
            if (nw_frame_uses_external_data((uint64_t)tqh_first))
            {
              uint64_t v31 = (uint64_t)tqh_first;
              int v32 = 0;
              int v33 = v12;
            }
            else
            {
              uint64_t v31 = (uint64_t)tqh_first;
              int v32 = v12;
              int v33 = 0;
            }
            nw_frame_claim(v31, v30, v32, v33);
            *((unsigned char *)handle + 130) = v12;
            return v22;
          }
          unsigned int v25 = v24;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446722;
          char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
          __int16 v54 = 1024;
          *(_DWORD *)int v55 = v12;
          *(_WORD *)&v55[4] = 1024;
          *(_DWORD *)&v55[6] = v25;
          BOOL v26 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v50 = 0;
          if (__nwlog_fault(v26, &type, &v50))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v27 = gLogObj;
              os_log_type_t v28 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                goto LABEL_51;
              }
              *(_DWORD *)buf = 136446722;
              char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
              __int16 v54 = 1024;
              *(_DWORD *)int v55 = v12;
              *(_WORD *)&v55[4] = 1024;
              *(_DWORD *)&v55[6] = v25;
              os_log_type_t v29 = "%{public}s Expected http3_stream_type_length (%u) to be <= claimed_length (%u)";
LABEL_50:
              _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0x18u);
              goto LABEL_51;
            }
            if (!v50)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v27 = gLogObj;
              os_log_type_t v28 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                goto LABEL_51;
              }
              *(_DWORD *)buf = 136446722;
              char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
              __int16 v54 = 1024;
              *(_DWORD *)int v55 = v12;
              *(_WORD *)&v55[4] = 1024;
              *(_DWORD *)&v55[6] = v25;
              os_log_type_t v29 = "%{public}s Expected http3_stream_type_length (%u) to be <= claimed_length (%u), backtrace limit exceeded";
              goto LABEL_50;
            }
            BOOL v34 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v27 = gLogObj;
            os_log_type_t v28 = type;
            BOOL v35 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (!v34)
            {
              if (!v35) {
                goto LABEL_51;
              }
              *(_DWORD *)buf = 136446722;
              char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
              __int16 v54 = 1024;
              *(_DWORD *)int v55 = v12;
              *(_WORD *)&v55[4] = 1024;
              *(_DWORD *)&v55[6] = v25;
              os_log_type_t v29 = "%{public}s Expected http3_stream_type_length (%u) to be <= claimed_length (%u), no backtrace";
              goto LABEL_50;
            }
            if (v35)
            {
              *(_DWORD *)buf = 136446978;
              char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
              __int16 v54 = 1024;
              *(_DWORD *)int v55 = v12;
              *(_WORD *)&v55[4] = 1024;
              *(_DWORD *)&v55[6] = v25;
              *(_WORD *)uint64_t v56 = 2082;
              *(void *)&v56[2] = v34;
              _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s Expected http3_stream_type_length (%u) to be <= claimed_length (%u), dumping backtrace:%{public}s", buf, 0x22u);
            }
            free(v34);
          }
LABEL_51:
          if (v26)
          {
            BOOL v36 = (char *)v26;
LABEL_53:
            free(v36);
          }
          return 0;
        }
      }
      else
      {
        BOOL v17 = __CFADD__(a4, v12);
        uint64_t v19 = a4 + v12;
        if (!v17) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      BOOL v17 = __CFADD__(a4, v12);
      uint64_t v19 = a4 + v12;
      if (!v17) {
        goto LABEL_22;
      }
    }
    if (gLogDatapath)
    {
      int v47 = handle;
      uint64_t v48 = __nwlog_obj();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        char v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        __int16 v54 = 2082;
        *(void *)int v55 = "maximum_bytes";
        *(_WORD *)&v55[8] = 2048;
        *(void *)uint64_t v56 = v12;
        *(_WORD *)&v56[8] = 2048;
        uint64_t v57 = v19;
        _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
      }
      handle = v47;
      output_handler = a1->output_handler;
      if (!output_handler) {
        return 0;
      }
    }
    else
    {
      output_handler = a1->output_handler;
      if (!output_handler) {
        return 0;
      }
    }
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_http3_uni_stream_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    char v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v37, type, &v73)) {
      goto LABEL_83;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v73 == OS_LOG_TYPE_DEFAULT)
      {
        char v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        uint64_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_82;
      }
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      char v38 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v43 = os_log_type_enabled(v38, type[0]);
      if (!backtrace_string)
      {
        if (!v43) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        uint64_t v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_82;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        __int16 v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_72:
        _os_log_impl(&dword_1830D4000, v38, v39, v44, buf, 0x16u);
      }
LABEL_73:
      free(backtrace_string);
      goto LABEL_83;
    }
    char v38 = __nwlog_obj();
    os_log_type_t v39 = type[0];
    if (!os_log_type_enabled(v38, type[0])) {
      goto LABEL_83;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    uint64_t v40 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_1830D4000, v38, v39, v40, buf, 0xCu);
LABEL_83:
    if (v37) {
      free(v37);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    char v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v37, type, &v73)) {
      goto LABEL_83;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v38 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      if (!os_log_type_enabled(v38, type[0])) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
      uint64_t v40 = "%{public}s called with null http3_stream";
      goto LABEL_82;
    }
    if (v73 == OS_LOG_TYPE_DEFAULT)
    {
      char v38 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      if (!os_log_type_enabled(v38, type[0])) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
      uint64_t v40 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_82;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    char v38 = __nwlog_obj();
    os_log_type_t v39 = type[0];
    BOOL v45 = os_log_type_enabled(v38, type[0]);
    if (backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        __int16 v44 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (!v45) {
      goto LABEL_83;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    uint64_t v40 = "%{public}s called with null http3_stream, no backtrace";
    goto LABEL_82;
  }
  if (gLogDatapath)
  {
    uint64_t v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
      *(_WORD *)&void buf[12] = 2048;
      *(void *)&buf[14] = handle;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
    }
  }
  if ((handle[131] & 2) == 0) {
    return 0;
  }
  if ((handle[131] & 4) == 0)
  {
    output_handler = a1->output_handler;
    if (!output_handler) {
      return 0;
    }
    callbacks = output_handler->callbacks;
    if (!callbacks) {
      return 0;
    }
    get_input_frames = (unsigned int (*)(void))callbacks->get_input_frames;
    if (!get_input_frames || !get_input_frames()) {
      return 0;
    }
    *(void *)os_log_type_t type = 0;
    uint64_t v69 = type;
    uint64_t v70 = 0x2000000000;
    uint64_t v71 = -1;
    v62[0] = MEMORY[0x1E4F143A8];
    v62[1] = 0x40000000;
    __int16 v63 = ___ZL45nw_protocol_http3_uni_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    uint64_t v64 = &unk_1E5247260;
    os_log_type_t v65 = type;
    uint64_t v66 = handle;
    uint64_t v67 = a1;
    uint64_t v14 = *((void *)handle + 13);
    do
    {
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)(v14 + 32);
      char v16 = ((uint64_t (*)(void *))v63)(v62);
      uint64_t v14 = v15;
    }
    while ((v16 & 1) != 0);
    if ((handle[131] & 4) == 0 || (handle[131] & 2) == 0)
    {
LABEL_51:
      _Block_object_dispose(type, 8);
      return 0;
    }
    uint64_t v17 = *((void *)v69 + 3);
    uint64_t v19 = (void *)*((void *)handle + 9);
    uint64_t v18 = *((void *)handle + 10);
    int v20 = (void *)*((void *)handle + 11);
    if (v18)
    {
      *(void *)(v18 + 88) = v20;
      int v20 = (void *)*((void *)handle + 11);
    }
    else
    {
      v19[113] = v20;
    }
    *int v20 = v18;
    switch(v17)
    {
      case 3:
        if (!v19[135])
        {
          handle[131] &= ~8u;
          v19[135] = handle;
          nw_http3_decoder_stream_process_input((uint64_t)v19);
          goto LABEL_51;
        }
        goto LABEL_41;
      case 2:
        if (!v19[133])
        {
          handle[131] &= ~8u;
          v19[133] = handle;
          nw_http3_encoder_stream_process_input((uint64_t)v19);
          goto LABEL_51;
        }
        goto LABEL_41;
      case 0:
        if (!v19[131])
        {
          handle[131] &= ~8u;
          v19[131] = handle;
          v19[26] = handle;
          nw_http3_control_stream_process_input((uint64_t)v19);
          goto LABEL_51;
        }
LABEL_41:
        nw_http3_fail_all_streams((uint64_t)v19, 259);
        goto LABEL_51;
    }
    uint64_t v30 = *((void *)handle + 4);
    if (v30)
    {
      uint64_t v31 = *(void *)(v30 + 24);
      if (v31)
      {
        int v32 = *(uint64_t (**)(void))(v31 + 224);
        if (v32)
        {
          int v33 = (atomic_uchar *)v32();
          nw_array_apply(v33, (uint64_t)&__block_literal_global_74);
          if (v33) {
            os_release(v33);
          }
        }
      }
    }
    uint64_t v34 = *((void *)handle + 3);
    if (v34)
    {
      BOOL v35 = *(void (**)(char *, void *))(v34 + 32);
      if (v35)
      {
        v35(handle, v19);
        goto LABEL_51;
      }
    }
    __nwlog_obj();
    __int16 v46 = (const char *)*((void *)handle + 2);
    if (!v46) {
      __int16 v46 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&buf[14] = v46;
    int v47 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v73 = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (__nwlog_fault(v47, &v73, &v72))
    {
      if (v73 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v48 = __nwlog_obj();
        os_log_type_t v49 = v73;
        if (!os_log_type_enabled(v48, v73)) {
          goto LABEL_109;
        }
        char v50 = (const char *)*((void *)handle + 2);
        if (!v50) {
          char v50 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v50;
        uint64_t v51 = "%{public}s protocol %{public}s has invalid disconnect callback";
        goto LABEL_108;
      }
      if (!v72)
      {
        uint64_t v48 = __nwlog_obj();
        os_log_type_t v49 = v73;
        if (!os_log_type_enabled(v48, v73)) {
          goto LABEL_109;
        }
        int v55 = (const char *)*((void *)handle + 2);
        if (!v55) {
          int v55 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v55;
        uint64_t v51 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        goto LABEL_108;
      }
      os_log_type_t v52 = (char *)__nw_create_backtrace_string();
      uint64_t v48 = __nwlog_obj();
      os_log_type_t v49 = v73;
      BOOL v53 = os_log_type_enabled(v48, v73);
      if (v52)
      {
        if (v53)
        {
          __int16 v54 = (const char *)*((void *)handle + 2);
          if (!v54) {
            __int16 v54 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = v54;
          *(_WORD *)&uint8_t buf[22] = 2082;
          uint64_t v75 = v52;
          _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v52);
        goto LABEL_109;
      }
      if (v53)
      {
        uint64_t v56 = (const char *)*((void *)handle + 2);
        if (!v56) {
          uint64_t v56 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v56;
        uint64_t v51 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
LABEL_108:
        _os_log_impl(&dword_1830D4000, v48, v49, v51, buf, 0x16u);
      }
    }
LABEL_109:
    if (v47) {
      free(v47);
    }
    goto LABEL_51;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  LODWORD(v75) = 0;
  *(void *)&buf[16] = 0x2000000000;
  *(void *)os_log_type_t type = 0;
  uint64_t v69 = type;
  LODWORD(v71) = 0;
  uint64_t v70 = 0x2000000000;
  uint64_t v22 = (nw_frame **)(handle + 104);
  uint64_t v21 = *((void *)handle + 13);
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 0x40000000;
  uint64_t v58 = (uint64_t (*)(void *))___ZL45nw_protocol_http3_uni_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2;
  BOOL v59 = &unk_1E5247288;
  uint64_t v60 = buf;
  __int16 v61 = type;
  do
  {
    if (!v21) {
      break;
    }
    uint64_t v23 = *(void *)(v21 + 32);
    char v24 = v58(v57);
    uint64_t v21 = v23;
  }
  while ((v24 & 1) != 0);
  if (a3 <= *(_DWORD *)(*(void *)&buf[8] + 24) || a5 <= *((_DWORD *)v69 + 6)) {
    goto LABEL_27;
  }
  unsigned int v25 = a1->output_handler;
  if (v25)
  {
    BOOL v26 = v25->callbacks;
    if (v26)
    {
      char v27 = (uint64_t (*)(void))v26->get_input_frames;
      if (v27)
      {
        int v28 = v27();
        if (v28)
        {
          *((_DWORD *)v69 + 6) += v28;
LABEL_27:
          if (*v22)
          {
            *a6->tqh_last = *v22;
            *(void *)(*((void *)handle + 13) + 40) = a6->tqh_last;
            a6->tqh_last = (nw_frame **)*((void *)handle + 14);
            *((void *)handle + 13) = 0;
            *((void *)handle + 14) = v22;
          }
          uint64_t v29 = *((unsigned int *)v69 + 6);
          goto LABEL_30;
        }
      }
    }
  }
  uint64_t v29 = 0;
LABEL_30:
  _Block_object_dispose(type, 8);
  _Block_object_dispose(buf, 8);
  return v29;
}

BOOL ___ZL45nw_protocol_http3_uni_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v19 = 0;
  uint64_t v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v19);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int16 *)(v5 + 128);
  if (8 - v6 >= (unint64_t)v19) {
    size_t v7 = v19;
  }
  else {
    size_t v7 = 8 - v6;
  }
  memcpy((void *)(v5 + v6 + 120), v4, v7);
  uint64_t v9 = *(void *)(a1 + 40);
  unsigned __int16 v10 = *(_WORD *)(v9 + 128) + v7;
  *(_WORD *)(v9 + 128) = v10;
  if (!v10)
  {
    unsigned __int16 v10 = 0;
LABEL_9:
    int v12 = 0;
    char v13 = 0;
    goto LABEL_10;
  }
  unint64_t v11 = *(unsigned __int8 *)(v9 + 120);
  if (v11 <= 0x3F)
  {
    int v12 = 1;
LABEL_7:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v11;
    v10 -= v12;
    char v13 = 4;
    goto LABEL_10;
  }
  if (v11 >> 6 == 2)
  {
    if (v10 >= 4u)
    {
      unint64_t v11 = bswap32(*(_DWORD *)(v9 + 120) & 0xFFFFFF7F);
      int v12 = 4;
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  if (v11 >> 6 != 1)
  {
    if (v10 >= 8u)
    {
      unint64_t v11 = bswap64(*(void *)(v9 + 120) & 0xFFFFFFFFFFFFFF3FLL);
      int v12 = 8;
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  if (v10 >= 2u)
  {
    unint64_t v11 = bswap32(*(_WORD *)(v9 + 120) & 0xFFBF) >> 16;
    int v12 = 2;
    goto LABEL_7;
  }
  int v12 = 0;
  char v13 = 0;
  unsigned __int16 v10 = 1;
LABEL_10:
  *(unsigned char *)(v9 + 131) = *(unsigned char *)(v9 + 131) & 0xFB | v13;
  uint64_t v14 = *(void *)(a1 + 40);
  *(_WORD *)(v14 + 128) = v10;
  char v15 = *(unsigned char *)(v14 + 131);
  if ((v15 & 4) != 0)
  {
    nw_frame_claim(a2, v8, v12 - v6, 0);
  }
  else
  {
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v17 = *(void **)(a2 + 40);
    if (v16)
    {
      *(void *)(v16 + 40) = v17;
      uint64_t v17 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(v14 + 112) = v17;
    }
    *uint64_t v17 = v16;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
  }
  return (v15 & 4) == 0;
}

void nw_http3_fail_all_streams(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v11 = __nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v12 = *(_DWORD *)(a1 + 1280);
          *(_DWORD *)buf = 136446978;
          uint64_t v18 = "nw_http3_fail_all_streams";
          __int16 v19 = 2082;
          int v20 = (char *)(a1 + 1289);
          __int16 v21 = 2080;
          uint64_t v22 = " ";
          __int16 v23 = 1024;
          int v24 = v12;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    nw_http3_async_close_connection_if_no_stream(a1);
    uint64_t v4 = *(nw_protocol **)(a1 + 880);
    if (v4)
    {
      do
      {
        output_handler = v4[8].output_handler;
        nw_protocol_http3_stream_error(v4, (nw_protocol *)a1, 100);
        uint64_t v4 = output_handler;
      }
      while (output_handler);
    }
    uint64_t v6 = *(void **)(a1 + 1240);
    if (v6) {
      nw_quic_connection_close_with_error(v6, a2);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_http3_fail_all_streams";
  size_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_http3_fail_all_streams";
      unsigned __int16 v10 = "%{public}s called with null http3";
      goto LABEL_24;
    }
    if (!v15)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_http3_fail_all_streams";
      unsigned __int16 v10 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v18 = "nw_http3_fail_all_streams";
        __int16 v19 = 2082;
        int v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_http3_fail_all_streams";
      unsigned __int16 v10 = "%{public}s called with null http3, no backtrace";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_25:
  if (v7) {
    free(v7);
  }
}

void nw_http3_control_stream_process_input(uint64_t a1)
{
  uint64_t v291 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
    v200 = (char *)_os_log_send_and_compose_impl();
    v273[0] = OS_LOG_TYPE_ERROR;
    v281[0] = 0;
    if (!__nwlog_fault(v200, v273, v281)) {
      goto LABEL_361;
    }
    if (v273[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v201 = __nwlog_obj();
      os_log_type_t v202 = v273[0];
      if (!os_log_type_enabled(v201, v273[0])) {
        goto LABEL_361;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
      v203 = "%{public}s called with null http3";
    }
    else if (v281[0])
    {
      backtrace_uuid_string_t string = (char *)__nw_create_backtrace_string();
      BOOL v201 = __nwlog_obj();
      os_log_type_t v202 = v273[0];
      BOOL v209 = os_log_type_enabled(v201, v273[0]);
      if (backtrace_string)
      {
        if (v209)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v201, v202, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_361;
      }
      if (!v209)
      {
LABEL_361:
        if (v200) {
          free(v200);
        }
        return;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
      v203 = "%{public}s called with null http3, no backtrace";
    }
    else
    {
      BOOL v201 = __nwlog_obj();
      os_log_type_t v202 = v273[0];
      if (!os_log_type_enabled(v201, v273[0])) {
        goto LABEL_361;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
      v203 = "%{public}s called with null http3, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v201, v202, v203, buf, 0xCu);
    goto LABEL_361;
  }
  uint64_t v2 = (unsigned __int16 *)(a1 + 1373);
  uint64_t v3 = a1 + 1289;
  uint64_t type = a1 + 168;
  while (1)
  {
    *(void *)v273 = 0;
    os_log_type_t v274 = v273;
    uint64_t v275 = 0x3802000000;
    v276 = __Block_byref_object_copy__61309;
    v277 = __Block_byref_object_dispose__61310;
    v278[0] = 0;
    v278[1] = v278;
    v271 = 0;
    uint64_t v272 = -1;
    char v270 = 0;
    if (!nw_http3_framer_get_input_frames(type, 0xFFFFu, 0xFFFFu, 0xFFFFFFFF, &v272, &v271, &v270, 0, (uint64_t)v278))goto LABEL_334; {
    int v4 = *v2;
    }
    int v5 = v4 | (*((unsigned __int8 *)v2 + 2) << 16);
    if ((v4 & 0x1000) != 0)
    {
      char v15 = (void *)*((void *)v274 + 5);
      if (!v15)
      {
LABEL_35:
        if (v270)
        {
          int v32 = *v2;
          unsigned int v33 = v32 & 0xFFFFEFFF | (*((unsigned __int8 *)v2 + 2) << 16);
          *uint64_t v2 = v32 & 0xEFFF;
          *((unsigned char *)v2 + 2) = BYTE2(v33);
        }
        goto LABEL_3;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v16 = (void (*)(void *, uint64_t, uint64_t))v15[10];
          uint64_t v17 = (void *)v15[4];
          if (!v16) {
            break;
          }
          uint64_t v18 = v15[11];
          v15[10] = 0;
          v15[11] = 0;
          v16(v15, 1, v18);
          char v15 = v17;
          if (!v17) {
            goto LABEL_35;
          }
        }
        uint64_t v19 = v3;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        int v20 = (char *)_os_log_send_and_compose_impl();
        v281[0] = 16;
        LOBYTE(error) = 0;
        if (!__nwlog_fault(v20, v281, &error)) {
          goto LABEL_32;
        }
        if (v281[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = gLogObj;
          os_log_type_t v22 = v281[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v281[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            __int16 v23 = v21;
            os_log_type_t v24 = v22;
            uint64_t v25 = "%{public}s called with null frame->finalizer";
LABEL_31:
            _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
          }
        }
        else if ((_BYTE)error)
        {
          BOOL v26 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v27 = gLogObj;
          os_log_type_t v28 = v281[0];
          BOOL v29 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v281[0]);
          if (v26)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v26;
              _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v26);
            goto LABEL_32;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            __int16 v23 = v27;
            os_log_type_t v24 = v28;
            uint64_t v25 = "%{public}s called with null frame->finalizer, no backtrace";
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v30 = __nwlog_obj();
          os_log_type_t v31 = v281[0];
          if (os_log_type_enabled(v30, (os_log_type_t)v281[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            __int16 v23 = v30;
            os_log_type_t v24 = v31;
            uint64_t v25 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
            goto LABEL_31;
          }
        }
LABEL_32:
        if (v20) {
          free(v20);
        }
        uint64_t v3 = v19;
        char v15 = v17;
        if (!v17) {
          goto LABEL_35;
        }
      }
    }
    if (v270) {
      break;
    }
    uint64_t v34 = (void *)*((void *)v274 + 5);
    if (!v34) {
      goto LABEL_59;
    }
    do
    {
      while (1)
      {
        BOOL v35 = (void (*)(void *, uint64_t, uint64_t))v34[10];
        BOOL v36 = (void *)v34[4];
        if (!v35) {
          break;
        }
        uint64_t v37 = v34[11];
        v34[10] = 0;
        v34[11] = 0;
        v35(v34, 1, v37);
        uint64_t v34 = v36;
        if (!v36) {
          goto LABEL_58;
        }
      }
      uint64_t v38 = v3;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
      os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
      v281[0] = 16;
      LOBYTE(error) = 0;
      if (__nwlog_fault(v39, v281, &error))
      {
        if (v281[0] == 17)
        {
          uint64_t v40 = __nwlog_obj();
          os_log_type_t v41 = v281[0];
          if (!os_log_type_enabled(v40, (os_log_type_t)v281[0])) {
            goto LABEL_55;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          __int16 v42 = v40;
          os_log_type_t v43 = v41;
          __int16 v44 = "%{public}s called with null frame->finalizer";
LABEL_54:
          _os_log_impl(&dword_1830D4000, v42, v43, v44, buf, 0xCu);
          goto LABEL_55;
        }
        if (!(_BYTE)error)
        {
          os_log_type_t v49 = __nwlog_obj();
          os_log_type_t v50 = v281[0];
          if (!os_log_type_enabled(v49, (os_log_type_t)v281[0])) {
            goto LABEL_55;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          __int16 v42 = v49;
          os_log_type_t v43 = v50;
          __int16 v44 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          goto LABEL_54;
        }
        BOOL v45 = (char *)__nw_create_backtrace_string();
        __int16 v46 = __nwlog_obj();
        os_log_type_t v47 = v281[0];
        BOOL v48 = os_log_type_enabled(v46, (os_log_type_t)v281[0]);
        if (!v45)
        {
          if (!v48) {
            goto LABEL_55;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          __int16 v42 = v46;
          os_log_type_t v43 = v47;
          __int16 v44 = "%{public}s called with null frame->finalizer, no backtrace";
          goto LABEL_54;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = v45;
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v45);
      }
LABEL_55:
      if (v39) {
        free(v39);
      }
      uint64_t v3 = v38;
      uint64_t v34 = v36;
    }
    while (v36);
LABEL_58:
    int v5 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
LABEL_59:
    *((unsigned char *)v2 + 2) = BYTE2(v5);
    *uint64_t v2 = v5 | 0x1000;
    if ((v5 & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v51 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v52 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v3;
        *(_WORD *)&uint8_t buf[22] = 2080;
        uint64_t v284 = " ";
        __int16 v285 = 1024;
        int v286 = v52;
        __int16 v287 = 2048;
        CFErrorRef v288 = v271;
        __int16 v289 = 2048;
        uint64_t v290 = v272;
        _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Dropping oversized frame %llu of type %llu on control stream", buf, 0x3Au);
      }
    }
LABEL_3:
    _Block_object_dispose(v273, 8);
  }
  uint64_t v6 = (__CFError *)v272;
  uint64_t v7 = *(void *)(a1 + 1176);
  if (v272 != 4)
  {
    if (v7)
    {
      if (v272 <= 4287504052)
      {
        if (v272 == 7)
        {
          if ((v5 & 0x400000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v53 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              int v54 = *(_DWORD *)(a1 + 1280);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v3;
              *(_WORD *)&uint8_t buf[22] = 2080;
              uint64_t v284 = " ";
              __int16 v285 = 1024;
              int v286 = v54;
              _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> received a GOAWAY, connection will not be reused", buf, 0x26u);
            }
          }
          nw_http3_async_close_connection_if_no_stream(a1);
          uint64_t v55 = *(void *)(a1 + 32);
          if (v55)
          {
            uint64_t v56 = *(void *)(v55 + 24);
            if (v56)
            {
              uint64_t v57 = *(void (**)(void))(v56 + 240);
              if (v57)
              {
                v57();
LABEL_72:
                nw_http3_notify_do_not_reuse(a1);
                goto LABEL_136;
              }
            }
          }
          __nwlog_obj();
          uint64_t v107 = *(void *)(a1 + 32);
          if (v107)
          {
            uint64_t v108 = v3;
            id v109 = *(const char **)(v107 + 16);
            if (!v109) {
              id v109 = "invalid";
            }
          }
          else
          {
            uint64_t v108 = v3;
            id v109 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = v109;
          os_log_type_t v110 = (char *)_os_log_send_and_compose_impl();
          v281[0] = 16;
          LOBYTE(error) = 0;
          if (__nwlog_fault(v110, v281, &error))
          {
            if (v281[0] == 17)
            {
              BOOL v111 = __nwlog_obj();
              os_log_type_t v112 = v281[0];
              if (os_log_type_enabled(v111, (os_log_type_t)v281[0]))
              {
                uint64_t v113 = *(void *)(a1 + 32);
                if (v113)
                {
                  v114 = *(const char **)(v113 + 16);
                  if (!v114) {
                    v114 = "invalid";
                  }
                }
                else
                {
                  v114 = "invalid";
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v114;
                char v137 = v111;
                os_log_type_t v138 = v112;
                BOOL v139 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback";
LABEL_206:
                _os_log_impl(&dword_1830D4000, v137, v138, v139, buf, 0x16u);
              }
            }
            else if ((_BYTE)error)
            {
              os_log_type_t v115 = (char *)__nw_create_backtrace_string();
              char v116 = __nwlog_obj();
              os_log_type_t v117 = v281[0];
              BOOL v118 = os_log_type_enabled(v116, (os_log_type_t)v281[0]);
              if (v115)
              {
                if (v118)
                {
                  uint64_t v119 = *(void *)(a1 + 32);
                  if (v119)
                  {
                    uint64_t v120 = *(const char **)(v119 + 16);
                    if (!v120) {
                      uint64_t v120 = "invalid";
                    }
                  }
                  else
                  {
                    uint64_t v120 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&buf[14] = v120;
                  *(_WORD *)&uint8_t buf[22] = 2082;
                  uint64_t v284 = v115;
                  _os_log_impl(&dword_1830D4000, v116, v117, "%{public}s protocol %{public}s has invalid remove_listen_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v115);
                goto LABEL_207;
              }
              if (v118)
              {
                uint64_t v133 = *(void *)(a1 + 32);
                if (v133)
                {
                  BOOL v134 = *(const char **)(v133 + 16);
                  if (!v134) {
                    BOOL v134 = "invalid";
                  }
                }
                else
                {
                  BOOL v134 = "invalid";
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v134;
                char v137 = v116;
                os_log_type_t v138 = v117;
                BOOL v139 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, no backtrace";
                goto LABEL_206;
              }
            }
            else
            {
              BOOL v125 = __nwlog_obj();
              os_log_type_t v126 = v281[0];
              if (os_log_type_enabled(v125, (os_log_type_t)v281[0]))
              {
                uint64_t v127 = *(void *)(a1 + 32);
                if (v127)
                {
                  BOOL v128 = *(const char **)(v127 + 16);
                  if (!v128) {
                    BOOL v128 = "invalid";
                  }
                }
                else
                {
                  BOOL v128 = "invalid";
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v128;
                char v137 = v125;
                os_log_type_t v138 = v126;
                BOOL v139 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, backtrace limit exceeded";
                goto LABEL_206;
              }
            }
          }
LABEL_207:
          if (v110) {
            free(v110);
          }
          uint64_t v3 = v108;
          goto LABEL_72;
        }
        if ((unint64_t)v272 >= 2 && v272 != 5)
        {
LABEL_87:
          if ((v5 & 0x400000) == 0)
          {
            if (gLogDatapath)
            {
              uint64_t v70 = __nwlog_obj();
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
              {
                int v71 = *(_DWORD *)(a1 + 1280);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v3;
                *(_WORD *)&uint8_t buf[22] = 2080;
                uint64_t v284 = " ";
                __int16 v285 = 1024;
                int v286 = v71;
                __int16 v287 = 2048;
                CFErrorRef v288 = v6;
                _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> received unsupported frame %llu", buf, 0x30u);
              }
            }
          }
          goto LABEL_136;
        }
        if ((v5 & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v176 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v177 = *(_DWORD *)(a1 + 1280);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v3;
            *(_WORD *)&uint8_t buf[22] = 2080;
            uint64_t v284 = " ";
            __int16 v285 = 1024;
            int v286 = v177;
            __int16 v287 = 2048;
            CFErrorRef v288 = v6;
            _os_log_impl(&dword_1830D4000, v176, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Invalid frame %llu on control stream", buf, 0x30u);
          }
        }
        uint64_t v178 = (void *)*((void *)v274 + 5);
        if (!v178)
        {
LABEL_304:
          uint64_t v164 = a1;
          uint64_t v165 = 261;
          goto LABEL_305;
        }
        while (1)
        {
          v179 = (void (*)(void *, uint64_t, uint64_t))v178[10];
          uint64_t v180 = (void *)v178[4];
          if (!v179) {
            break;
          }
          uint64_t v181 = v178[11];
          v178[10] = 0;
          v178[11] = 0;
          v179(v178, 1, v181);
LABEL_286:
          uint64_t v178 = v180;
          if (!v180) {
            goto LABEL_304;
          }
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        v182 = (const char *)_os_log_send_and_compose_impl();
        v281[0] = 16;
        LOBYTE(error) = 0;
        v255 = (char *)v182;
        if (__nwlog_fault(v182, v281, &error))
        {
          if (v281[0] == 17)
          {
            v246 = __nwlog_obj();
            logCFIndex i = v281[0];
            if (!os_log_type_enabled(v246, (os_log_type_t)v281[0])) {
              goto LABEL_302;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            v183 = v246;
            os_log_type_t v184 = logi;
            os_log_type_t v185 = "%{public}s called with null frame->finalizer";
            goto LABEL_301;
          }
          if (!(_BYTE)error)
          {
            uint64_t v248 = __nwlog_obj();
            os_log_type_t logk = v281[0];
            if (!os_log_type_enabled(v248, (os_log_type_t)v281[0])) {
              goto LABEL_302;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            v183 = v248;
            os_log_type_t v184 = logk;
            os_log_type_t v185 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
            goto LABEL_301;
          }
          v247 = __nw_create_backtrace_string();
          logCFIndex j = __nwlog_obj();
          os_log_type_t typed = v281[0];
          BOOL v186 = os_log_type_enabled(logj, (os_log_type_t)v281[0]);
          v187 = (char *)v247;
          if (v247)
          {
            if (v186)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v247;
              _os_log_impl(&dword_1830D4000, logj, typed, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
              v187 = (char *)v247;
            }
            free(v187);
            goto LABEL_302;
          }
          if (v186)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            v183 = logj;
            os_log_type_t v184 = typed;
            os_log_type_t v185 = "%{public}s called with null frame->finalizer, no backtrace";
LABEL_301:
            _os_log_impl(&dword_1830D4000, v183, v184, v185, buf, 0xCu);
          }
        }
LABEL_302:
        if (v255) {
          free(v255);
        }
        goto LABEL_286;
      }
      if (v272 != 4287504053) {
        goto LABEL_87;
      }
      uint64_t v58 = *(NSObject **)(a1 + 1184);
      if (v58)
      {
        dispatch_release(v58);
        *(void *)(a1 + 1184) = 0;
      }
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)v274 + 5, 1, buf);
      __int16 v59 = *(_WORD *)buf;
      *(void *)uint64_t v263 = 0;
      *(void *)(a1 + 1184) = dispatch_data_create_alloc();
      **(_WORD **)uint64_t v263 = v59;
      *(void *)uint64_t v281 = 0;
      *(void *)&v281[8] = v281;
      int v282 = 0;
      *(void *)&v281[16] = 0x2000000000;
      v257[0] = MEMORY[0x1E4F143A8];
      v257[1] = 0x40000000;
      v258 = (uint64_t (*)(void *))___ZL37nw_http3_control_stream_process_inputP17nw_protocol_http3_block_invoke_76;
      v259 = &unk_1E52472F8;
      v261 = v281;
      uint64_t v262 = *(void *)v263 + 2;
      uint64_t v260 = v273;
      uint64_t v60 = *((void *)v274 + 5);
      do
      {
        if (!v60) {
          break;
        }
        uint64_t v61 = *(void *)(v60 + 32);
        char v62 = v258(v257);
        uint64_t v60 = v61;
      }
      while ((v62 & 1) != 0);
      id v63 = nw_quic_connection_copy_sec_protocol_metadata(*(void **)(a1 + 1240));
      if (v63)
      {
        uint64_t v64 = v63;
        uint64_t v65 = sec_protocol_metadata_copy_authenticator_trust();
        int v66 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
        if (v65)
        {
          uint64_t v67 = v65;
          v213 = v64;
          if ((v66 & 0x400000) == 0)
          {
            if (gLogDatapath)
            {
              uint64_t v121 = __nwlog_obj();
              if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
              {
                int v122 = *(_DWORD *)(a1 + 1280);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v3;
                *(_WORD *)&uint8_t buf[22] = 2080;
                uint64_t v284 = " ";
                __int16 v285 = 1024;
                int v286 = v122;
                __int16 v287 = 2112;
                CFErrorRef v288 = (CFErrorRef)v67;
                _os_log_impl(&dword_1830D4000, v121, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Received trust %@", buf, 0x30u);
              }
            }
          }
          uint64_t v214 = v3;
          uint64_t v68 = *(void **)(a1 + 1096);
          if (v68) {
            uint64_t v69 = os_retain(v68);
          }
          else {
            uint64_t v69 = 0;
          }
          object = v67;
          char v72 = sec_trust_copy_ref(v67);
          if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
          {
            if (gLogDatapath)
            {
              os_log_type_t v123 = __nwlog_obj();
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
              {
                int v124 = *(_DWORD *)(a1 + 1280);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v214;
                *(_WORD *)&uint8_t buf[22] = 2080;
                uint64_t v284 = " ";
                __int16 v285 = 1024;
                int v286 = v124;
                __int16 v287 = 2112;
                CFErrorRef v288 = v72;
                _os_log_impl(&dword_1830D4000, v123, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Received Authenticator trustRef: %@", buf, 0x30u);
              }
            }
          }
          SecTrustRef trust = v72;
          if (*(void *)(a1 + 1248))
          {
            if ((nw_parameters_get_should_trust_invalid_certificates(*(void **)(a1 + 1120)) & 1) != 0
              || (error = 0, v73 = SecTrustEvaluateWithError(v72, &error), CFErrorRef v74 = error, v73) && !error)
            {
              if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
              {
                if (gLogDatapath)
                {
                  v129 = __nwlog_obj();
                  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
                  {
                    int v130 = *(_DWORD *)(a1 + 1280);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
                    *(_WORD *)&void buf[12] = 2082;
                    *(void *)&buf[14] = v214;
                    *(_WORD *)&uint8_t buf[22] = 2080;
                    uint64_t v284 = " ";
                    __int16 v285 = 1024;
                    int v286 = v130;
                    _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Trusted incoming secondary certificate", buf, 0x26u);
                  }
                }
              }
              if (v72)
              {
                CFArrayRef v75 = SecTrustCopyCertificateChain(v72);
                for (CFIndex i = 0; CFArrayGetCount(v75) > i; ++i)
                {
                  CFArrayGetValueAtIndex(v75, 0);
                  CFArrayRef v77 = (const __CFArray *)SecCertificateCopyDNSNames();
                  for (CFIndex j = 0; CFArrayGetCount(v77) > j; ++j)
                  {
                    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v77, j);
                    c_string_from_cfuuid_string_t string = (char *)nw_utilities_create_c_string_from_cfstring(ValueAtIndex);
                    if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
                    {
                      if (gLogDatapath)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        int v83 = gLogObj;
                        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                        {
                          int v84 = *(_DWORD *)(a1 + 1280);
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
                          *(_WORD *)&void buf[12] = 2082;
                          *(void *)&buf[14] = v214;
                          *(_WORD *)&uint8_t buf[22] = 2080;
                          uint64_t v284 = " ";
                          __int16 v285 = 1024;
                          int v286 = v84;
                          __int16 v287 = 2080;
                          CFErrorRef v288 = (CFErrorRef)c_string_from_cfstring;
                          _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Received name in cert %s", buf, 0x30u);
                        }
                      }
                    }
                    unsigned int port = nw_endpoint_get_port(v69);
                    host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(c_string_from_cfstring, port);
                    if (c_string_from_cfstring) {
                      free(c_string_from_cfstring);
                    }
                    nw_http_connection_metadata_store_secondary_certificate(*(void **)(a1 + 1248), (void *)host_with_numeric_port);
                    if (host_with_numeric_port) {
                      os_release((void *)host_with_numeric_port);
                    }
                  }
                  if (v77) {
                    CFRelease(v77);
                  }
                }
                if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
                {
                  if (gLogDatapath)
                  {
                    os_log_type_t v135 = __nwlog_obj();
                    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
                    {
                      int v136 = *(_DWORD *)(a1 + 1280);
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
                      *(_WORD *)&void buf[12] = 2082;
                      *(void *)&buf[14] = v214;
                      *(_WORD *)&uint8_t buf[22] = 2080;
                      uint64_t v284 = " ";
                      __int16 v285 = 1024;
                      int v286 = v136;
                      __int16 v287 = 2112;
                      CFErrorRef v288 = v75;
                      _os_log_impl(&dword_1830D4000, v135, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Received Authenticator certChain: %@", buf, 0x30u);
                    }
                  }
                }
                if (v75) {
                  CFRelease(v75);
                }
              }
              if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
              {
                if (gLogDatapath)
                {
                  uint64_t v131 = __nwlog_obj();
                  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
                  {
                    int v132 = *(_DWORD *)(a1 + 1280);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http3_all_streams_metadata_changed";
                    *(_WORD *)&void buf[12] = 2082;
                    *(void *)&buf[14] = v214;
                    *(_WORD *)&uint8_t buf[22] = 2080;
                    uint64_t v284 = " ";
                    __int16 v285 = 1024;
                    int v286 = v132;
                    _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
                  }
                }
              }
              uint64_t v85 = *(void *)(a1 + 880);
              if (v85)
              {
                do
                {
                  uint64_t v86 = *(void *)(v85 + 544);
                  if (((*(unsigned __int16 *)(v85 + 736) | (*(unsigned __int8 *)(v85 + 738) << 16)) & 0x20000) != 0) {
                    nw_protocol_notify(*(void **)(v85 + 48), a1, 5);
                  }
                  uint64_t v85 = v86;
                }
                while (v86);
              }
            }
            else
            {
              if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v87 = gLogObj;
                BOOL v88 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
                CFErrorRef v74 = error;
                if (v88)
                {
                  int v89 = *(_DWORD *)(a1 + 1280);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&buf[14] = v214;
                  *(_WORD *)&uint8_t buf[22] = 2080;
                  uint64_t v284 = " ";
                  __int16 v285 = 1024;
                  int v286 = v89;
                  __int16 v287 = 2112;
                  CFErrorRef v288 = error;
                  _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Trust evaluation on secondary certificate failed with error: %@, ignoring secondary certificates", buf, 0x30u);
                  CFErrorRef v74 = error;
                }
              }
              if (v74) {
                CFRelease(v74);
              }
            }
          }
          if (trust) {
            CFRelease(trust);
          }
          os_release(object);
          os_release(v213);
          _Block_object_dispose(v281, 8);
          uint64_t v3 = v214;
          goto LABEL_136;
        }
        if ((v66 & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v189 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v190 = *(_DWORD *)(a1 + 1280);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v3;
            *(_WORD *)&uint8_t buf[22] = 2080;
            uint64_t v284 = " ";
            __int16 v285 = 1024;
            int v286 = v190;
            __int16 v287 = 2112;
            CFErrorRef v288 = (CFErrorRef)v64;
            _os_log_impl(&dword_1830D4000, v189, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> failed to copy authenticator trust from received certificate, sec_protocol_metadata: %@", buf, 0x30u);
          }
        }
        os_release(v64);
LABEL_311:
        os_log_type_t v191 = (void *)*((void *)v274 + 5);
        if (!v191)
        {
LABEL_332:
          nw_http3_fail_all_streams(a1, 262);
          v188 = v281;
          goto LABEL_333;
        }
        while (1)
        {
          v192 = (void (*)(void *, uint64_t, uint64_t))v191[10];
          v193 = (void *)v191[4];
          if (!v192) {
            break;
          }
          uint64_t v194 = v191[11];
          v191[10] = 0;
          v191[11] = 0;
          v192(v191, 1, v194);
LABEL_314:
          os_log_type_t v191 = v193;
          if (!v193) {
            goto LABEL_332;
          }
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        v195 = (const char *)_os_log_send_and_compose_impl();
        LOBYTE(error) = 16;
        char v280 = 0;
        v256 = (char *)v195;
        if (__nwlog_fault(v195, &error, &v280))
        {
          if (error == 17)
          {
            v249 = __nwlog_obj();
            os_log_type_t logl = error;
            if (!os_log_type_enabled(v249, (os_log_type_t)error)) {
              goto LABEL_330;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            BOOL v196 = v249;
            os_log_type_t v197 = logl;
            v198 = "%{public}s called with null frame->finalizer";
            goto LABEL_329;
          }
          if (!v280)
          {
            uint64_t v251 = __nwlog_obj();
            os_log_type_t logn = error;
            if (!os_log_type_enabled(v251, (os_log_type_t)error)) {
              goto LABEL_330;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            BOOL v196 = v251;
            os_log_type_t v197 = logn;
            v198 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
            goto LABEL_329;
          }
          v250 = (char *)__nw_create_backtrace_string();
          logm = __nwlog_obj();
          os_log_type_t typee = error;
          BOOL v199 = os_log_type_enabled(logm, (os_log_type_t)error);
          if (v250)
          {
            if (v199)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&buf[14] = v250;
              _os_log_impl(&dword_1830D4000, logm, typee, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v250);
            goto LABEL_330;
          }
          if (v199)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            BOOL v196 = logm;
            os_log_type_t v197 = typee;
            v198 = "%{public}s called with null frame->finalizer, no backtrace";
LABEL_329:
            _os_log_impl(&dword_1830D4000, v196, v197, v198, buf, 0xCu);
          }
        }
LABEL_330:
        if (v256) {
          free(v256);
        }
        goto LABEL_314;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
      v204 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(error) = 16;
      char v280 = 0;
      if (__nwlog_fault(v204, &error, &v280))
      {
        if (error == 17)
        {
          v205 = __nwlog_obj();
          os_log_type_t v206 = error;
          if (!os_log_type_enabled(v205, (os_log_type_t)error)) {
            goto LABEL_366;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
          uint64_t v207 = "%{public}s called with null sec_metadata";
          goto LABEL_365;
        }
        if (!v280)
        {
          v205 = __nwlog_obj();
          os_log_type_t v206 = error;
          if (!os_log_type_enabled(v205, (os_log_type_t)error)) {
            goto LABEL_366;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
          uint64_t v207 = "%{public}s called with null sec_metadata, backtrace limit exceeded";
          goto LABEL_365;
        }
        v210 = (char *)__nw_create_backtrace_string();
        v205 = __nwlog_obj();
        os_log_type_t v206 = error;
        BOOL v211 = os_log_type_enabled(v205, (os_log_type_t)error);
        if (v210)
        {
          if (v211)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v210;
            _os_log_impl(&dword_1830D4000, v205, v206, "%{public}s called with null sec_metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v210);
          goto LABEL_366;
        }
        if (v211)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_parse_certificate";
          uint64_t v207 = "%{public}s called with null sec_metadata, no backtrace";
LABEL_365:
          _os_log_impl(&dword_1830D4000, v205, v206, v207, buf, 0xCu);
        }
      }
LABEL_366:
      if (v204) {
        free(v204);
      }
      goto LABEL_311;
    }
    if ((v5 & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v152 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v153 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v3;
        *(_WORD *)&uint8_t buf[22] = 2080;
        uint64_t v284 = " ";
        __int16 v285 = 1024;
        int v286 = v153;
        _os_log_impl(&dword_1830D4000, v152, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> First frame is not SETTINGS", buf, 0x26u);
      }
    }
    os_log_type_t v154 = (void *)*((void *)v274 + 5);
    if (!v154)
    {
LABEL_258:
      uint64_t v164 = a1;
      uint64_t v165 = 266;
LABEL_305:
      nw_http3_fail_all_streams(v164, v165);
      goto LABEL_334;
    }
    while (1)
    {
      os_log_type_t v155 = (void (*)(void *, uint64_t, uint64_t))v154[10];
      uint64_t v156 = (void *)v154[4];
      if (!v155) {
        break;
      }
      uint64_t v157 = v154[11];
      v154[10] = 0;
      v154[11] = 0;
      v155(v154, 1, v157);
LABEL_240:
      os_log_type_t v154 = v156;
      if (!v156) {
        goto LABEL_258;
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
    os_log_type_t v158 = (const char *)_os_log_send_and_compose_impl();
    v281[0] = 16;
    LOBYTE(error) = 0;
    v253 = (char *)v158;
    if (__nwlog_fault(v158, v281, &error))
    {
      if (v281[0] == 17)
      {
        v240 = __nwlog_obj();
        logCC_SHA256_CTX c = v281[0];
        if (!os_log_type_enabled(v240, (os_log_type_t)v281[0])) {
          goto LABEL_256;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        v159 = v240;
        os_log_type_t v160 = logc;
        unsigned int v161 = "%{public}s called with null frame->finalizer";
        goto LABEL_255;
      }
      if (!(_BYTE)error)
      {
        uint64_t v242 = __nwlog_obj();
        os_log_type_t loge = v281[0];
        if (!os_log_type_enabled(v242, (os_log_type_t)v281[0])) {
          goto LABEL_256;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        v159 = v242;
        os_log_type_t v160 = loge;
        unsigned int v161 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
        goto LABEL_255;
      }
      v241 = __nw_create_backtrace_string();
      logd = __nwlog_obj();
      os_log_type_t typeb = v281[0];
      BOOL v162 = os_log_type_enabled(logd, (os_log_type_t)v281[0]);
      id v163 = (char *)v241;
      if (v241)
      {
        if (v162)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&buf[14] = v241;
          _os_log_impl(&dword_1830D4000, logd, typeb, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
          id v163 = (char *)v241;
        }
        free(v163);
        goto LABEL_256;
      }
      if (v162)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        v159 = logd;
        os_log_type_t v160 = typeb;
        unsigned int v161 = "%{public}s called with null frame->finalizer, no backtrace";
LABEL_255:
        _os_log_impl(&dword_1830D4000, v159, v160, v161, buf, 0xCu);
      }
    }
LABEL_256:
    if (v253) {
      free(v253);
    }
    goto LABEL_240;
  }
  if (v7)
  {
    if ((v5 & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v140 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v141 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&buf[14] = v3;
        *(_WORD *)&uint8_t buf[22] = 2080;
        uint64_t v284 = " ";
        __int16 v285 = 1024;
        int v286 = v141;
        _os_log_impl(&dword_1830D4000, v140, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Duplicated SETTINGS frame", buf, 0x26u);
      }
    }
    os_log_type_t v142 = (void *)*((void *)v274 + 5);
    if (v142)
    {
      while (1)
      {
        BOOL v143 = (void (*)(void *, uint64_t, uint64_t))v142[10];
        v144 = (void *)v142[4];
        if (!v143) {
          break;
        }
        uint64_t v145 = v142[11];
        v142[10] = 0;
        v142[11] = 0;
        v143(v142, 1, v145);
LABEL_216:
        os_log_type_t v142 = v144;
        if (!v144) {
          goto LABEL_304;
        }
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
      uint64_t v146 = (const char *)_os_log_send_and_compose_impl();
      v281[0] = 16;
      LOBYTE(error) = 0;
      v252 = (char *)v146;
      if (__nwlog_fault(v146, v281, &error))
      {
        if (v281[0] == 17)
        {
          v237 = __nwlog_obj();
          os_log_type_t log = v281[0];
          if (!os_log_type_enabled(v237, (os_log_type_t)v281[0])) {
            goto LABEL_232;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          BOOL v147 = v237;
          os_log_type_t v148 = log;
          os_log_type_t v149 = "%{public}s called with null frame->finalizer";
          goto LABEL_231;
        }
        if (!(_BYTE)error)
        {
          uint64_t v239 = __nwlog_obj();
          os_log_type_t logb = v281[0];
          if (!os_log_type_enabled(v239, (os_log_type_t)v281[0])) {
            goto LABEL_232;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          BOOL v147 = v239;
          os_log_type_t v148 = logb;
          os_log_type_t v149 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          goto LABEL_231;
        }
        v238 = __nw_create_backtrace_string();
        loga = __nwlog_obj();
        os_log_type_t typea = v281[0];
        BOOL v150 = os_log_type_enabled(loga, (os_log_type_t)v281[0]);
        os_log_type_t v151 = (char *)v238;
        if (v238)
        {
          if (v150)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&buf[14] = v238;
            _os_log_impl(&dword_1830D4000, loga, typea, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
            os_log_type_t v151 = (char *)v238;
          }
          free(v151);
          goto LABEL_232;
        }
        if (v150)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          BOOL v147 = loga;
          os_log_type_t v148 = typea;
          os_log_type_t v149 = "%{public}s called with null frame->finalizer, no backtrace";
LABEL_231:
          _os_log_impl(&dword_1830D4000, v147, v148, v149, buf, 0xCu);
        }
      }
LABEL_232:
      if (v252) {
        free(v252);
      }
      goto LABEL_216;
    }
    goto LABEL_304;
  }
  *(_DWORD *)buf = 0;
  nw_frame_array_get_frame_count((uint64_t *)v274 + 5, 1, buf);
  __int16 v8 = *(_WORD *)buf;
  unsigned int v9 = *(unsigned __int16 *)buf;
  CFErrorRef error = 0;
  *(void *)(a1 + 1176) = dispatch_data_create_alloc();
  *(_WORD *)CFErrorRef error = v8;
  unint64_t v11 = (_DWORD *)((char *)error + 2);
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  LODWORD(v284) = 0;
  *(void *)&buf[16] = 0x2000000000;
  v264[0] = MEMORY[0x1E4F143A8];
  v264[1] = 0x40000000;
  v265 = (uint64_t (*)(void *))___ZL37nw_http3_control_stream_process_inputP17nw_protocol_http3_block_invoke;
  uint64_t v266 = &unk_1E52472D0;
  v268 = buf;
  uint64_t v269 = (char *)error + 2;
  v267 = v273;
  uint64_t v12 = *((void *)v274 + 5);
  do
  {
    if (!v12) {
      break;
    }
    uint64_t v13 = *(void *)(v12 + 32);
    char v14 = v265(v264);
    uint64_t v12 = v13;
  }
  while ((v14 & 1) != 0);
  if (nw_http3_parse_settings(a1, v11, v9, v10))
  {
    nw_http3_try_persist_0rtt_state(a1);
    _Block_object_dispose(buf, 8);
LABEL_136:
    size_t v90 = (void *)*((void *)v274 + 5);
    if (!v90) {
      goto LABEL_3;
    }
    while (2)
    {
      while (1)
      {
        os_log_type_t v91 = (void (*)(void *, uint64_t, uint64_t))v90[10];
        BOOL v92 = (void *)v90[4];
        if (!v91) {
          break;
        }
        uint64_t v93 = v90[11];
        v90[10] = 0;
        v90[11] = 0;
        v91(v90, 1, v93);
        size_t v90 = v92;
        if (!v92) {
          goto LABEL_3;
        }
      }
      uint64_t v94 = v3;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
      BOOL v95 = (char *)_os_log_send_and_compose_impl();
      v281[0] = 16;
      LOBYTE(error) = 0;
      if (__nwlog_fault(v95, v281, &error))
      {
        if (v281[0] != 17)
        {
          if ((_BYTE)error)
          {
            os_log_type_t v101 = (char *)__nw_create_backtrace_string();
            os_log_type_t v102 = __nwlog_obj();
            os_log_type_t v103 = v281[0];
            BOOL v104 = os_log_type_enabled(v102, (os_log_type_t)v281[0]);
            if (v101)
            {
              if (v104)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
                *(_WORD *)&void buf[12] = 2082;
                *(void *)&buf[14] = v101;
                _os_log_impl(&dword_1830D4000, v102, v103, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v101);
              goto LABEL_154;
            }
            if (!v104) {
              goto LABEL_154;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            int v98 = v102;
            os_log_type_t v99 = v103;
            uint64_t v100 = "%{public}s called with null frame->finalizer, no backtrace";
          }
          else
          {
            char v105 = __nwlog_obj();
            os_log_type_t v106 = v281[0];
            if (!os_log_type_enabled(v105, (os_log_type_t)v281[0])) {
              goto LABEL_154;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            int v98 = v105;
            os_log_type_t v99 = v106;
            uint64_t v100 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          }
LABEL_153:
          _os_log_impl(&dword_1830D4000, v98, v99, v100, buf, 0xCu);
          goto LABEL_154;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v96 = gLogObj;
        os_log_type_t v97 = v281[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v281[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          int v98 = v96;
          os_log_type_t v99 = v97;
          uint64_t v100 = "%{public}s called with null frame->finalizer";
          goto LABEL_153;
        }
      }
LABEL_154:
      if (v95) {
        free(v95);
      }
      size_t v90 = v92;
      uint64_t v3 = v94;
      if (!v92) {
        goto LABEL_3;
      }
      continue;
    }
  }
  uint64_t v166 = (void *)*((void *)v274 + 5);
  if (v166)
  {
    while (2)
    {
      v167 = (void (*)(void *, uint64_t, uint64_t))v166[10];
      long long v168 = (void *)v166[4];
      if (v167)
      {
        uint64_t v169 = v166[11];
        v166[10] = 0;
        v166[11] = 0;
        v167(v166, 1, v169);
        goto LABEL_262;
      }
      __nwlog_obj();
      *(_DWORD *)uint64_t v281 = 136446210;
      *(void *)&v281[4] = "__nw_frame_finalize";
      uint64_t v170 = (const char *)_os_log_send_and_compose_impl();
      v263[0] = OS_LOG_TYPE_ERROR;
      char v280 = 0;
      uint64_t v254 = (char *)v170;
      if (!__nwlog_fault(v170, v263, &v280)) {
        goto LABEL_278;
      }
      if (v263[0] == OS_LOG_TYPE_FAULT)
      {
        v243 = __nwlog_obj();
        os_log_type_t logf = v263[0];
        if (os_log_type_enabled(v243, v263[0]))
        {
          *(_DWORD *)uint64_t v281 = 136446210;
          *(void *)&v281[4] = "__nw_frame_finalize";
          v171 = v243;
          os_log_type_t v172 = logf;
          v173 = "%{public}s called with null frame->finalizer";
          break;
        }
        goto LABEL_278;
      }
      if (v280)
      {
        v244 = __nw_create_backtrace_string();
        logg = __nwlog_obj();
        typeCC_SHA256_CTX c = v263[0];
        BOOL v174 = os_log_type_enabled(logg, v263[0]);
        os_log_type_t v175 = (char *)v244;
        if (v244)
        {
          if (v174)
          {
            *(_DWORD *)uint64_t v281 = 136446466;
            *(void *)&v281[4] = "__nw_frame_finalize";
            *(_WORD *)&v281[12] = 2082;
            *(void *)&v281[14] = v244;
            _os_log_impl(&dword_1830D4000, logg, typec, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", v281, 0x16u);
            os_log_type_t v175 = (char *)v244;
          }
          free(v175);
          goto LABEL_278;
        }
        if (!v174)
        {
LABEL_278:
          if (v254) {
            free(v254);
          }
LABEL_262:
          uint64_t v166 = v168;
          if (!v168) {
            goto LABEL_306;
          }
          continue;
        }
        *(_DWORD *)uint64_t v281 = 136446210;
        *(void *)&v281[4] = "__nw_frame_finalize";
        v171 = logg;
        os_log_type_t v172 = typec;
        v173 = "%{public}s called with null frame->finalizer, no backtrace";
      }
      else
      {
        uint64_t v245 = __nwlog_obj();
        os_log_type_t logh = v263[0];
        if (!os_log_type_enabled(v245, v263[0])) {
          goto LABEL_278;
        }
        *(_DWORD *)uint64_t v281 = 136446210;
        *(void *)&v281[4] = "__nw_frame_finalize";
        v171 = v245;
        os_log_type_t v172 = logh;
        v173 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
      }
      break;
    }
    _os_log_impl(&dword_1830D4000, v171, v172, v173, v281, 0xCu);
    goto LABEL_278;
  }
LABEL_306:
  nw_http3_fail_all_streams(a1, 265);
  v188 = buf;
LABEL_333:
  _Block_object_dispose(v188, 8);
LABEL_334:
  _Block_object_dispose(v273, 8);
}