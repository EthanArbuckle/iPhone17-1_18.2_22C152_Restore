uint64_t sub_18356A938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    v2 = sub_18356AA7C;
  }
  else {
    v2 = sub_18356AA4C;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_18356AA4C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 48);
  **(unsigned char **)(v0 + 56) = *(unsigned char *)(v0 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v1, v2, v3, v4);
}

uint64_t sub_18356AA7C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18356AA98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64490);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10 = *(NSObject **)(v7 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_18356F318;
  *(void *)(v11 + 24) = v9;
  aBlock[4] = sub_183570334;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1832E5DC4;
  aBlock[3] = &block_descriptor_133;
  v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_18356AC8C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unint64_t v5 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (a3)
  {
    uint64_t v8 = result;
    uint64_t v9 = qword_1E8F61FE0;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    v10 = *(NSObject **)(a3 + 16);
    nw_protocol_metadata_t v11 = nw_content_context_copy_protocol_metadata(v10, *((nw_protocol_definition_t *)off_1E8F61FE8 + 4));
    if (v11)
    {
      nw_protocol_metadata_t v12 = v11;
      uint64_t v13 = sub_1835312A8((uint64_t)v11);
      if (v13)
      {
        (*(void (**)(nw_protocol_metadata_t))(v13 + 96))(v12);
        type metadata accessor for NWProtocolWebSocket.Metadata();
        uint64_t v14 = swift_dynamicCastClass();
        if (v14)
        {
          char v28 = *(unsigned char *)(v14 + 24);
          if (a2 >> 60 == 15) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = v8;
          }
          unint64_t v16 = 0xC000000000000000;
          if (a2 >> 60 != 15) {
            unint64_t v16 = a2;
          }
          v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
          uint64_t v27 = v15;
          uint64_t v17 = swift_allocObject();
          *(void *)(v17 + 16) = MEMORY[0x1E4FBC860];
          v18 = (void **)(v17 + 16);
          v33 = sub_18356F304;
          uint64_t v34 = v17;
          uint64_t aBlock = MEMORY[0x1E4F143A8];
          uint64_t v30 = 1107296256;
          v31 = sub_183573F68;
          v32 = &block_descriptor_138;
          v19 = _Block_copy(&aBlock);
          sub_1834D7FF8(v8, a2);
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v10, v19);
          _Block_release(v19);
          swift_unknownObjectRelease();
          swift_beginAccess();
          v20 = *v18;
          swift_bridgeObjectRetain();
          swift_release();
          char v21 = *(unsigned char *)(a3 + 64);
          LOBYTE(aBlock) = v28;
          uint64_t v30 = v27;
          v31 = v26;
          v32 = v20;
          LOBYTE(v33) = v21;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64490);
          sub_183D44F4C();
          swift_release();
          return swift_release();
        }
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    if (HIDWORD(v5) <= 0xFE)
    {
      sub_1834AC424();
      uint64_t v24 = swift_allocError();
      *(_DWORD *)uint64_t v25 = v5;
      *(unsigned char *)(v25 + 4) = BYTE4(v5);
      uint64_t aBlock = v24;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64490);
      sub_183D44F3C();
      return swift_release();
    }
    return swift_release();
  }
  else if (HIDWORD(v5) <= 0xFE)
  {
    sub_1834AC424();
    uint64_t v22 = swift_allocError();
    *(_DWORD *)uint64_t v23 = v5;
    *(unsigned char *)(v23 + 4) = BYTE4(v5);
    uint64_t aBlock = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64490);
    return sub_183D44F3C();
  }
  return result;
}

uint64_t sub_18356B010(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(a1);
  type metadata accessor for AsyncSequenceReceive();
  swift_allocObject();
  uint64_t v6 = sub_183563638(a4, v4);
  swift_retain();
  return v6;
}

uint64_t sub_18356B0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(NSObject **)(v5 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_18356F2C4;
  *(void *)(v8 + 24) = v6;
  v11[4] = sub_183570334;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = sub_1832E5DC4;
  v11[3] = &block_descriptor_117;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v7, v9);
  _Block_release(v9);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_18356B210(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(uint64_t *, int *))
{
  unint64_t v7 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (a3)
  {
    uint64_t v11 = qword_1E8F61FE0;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    nw_protocol_metadata_t v12 = *(NSObject **)(a3 + 16);
    nw_protocol_metadata_t v13 = nw_content_context_copy_protocol_metadata(v12, *((nw_protocol_definition_t *)off_1E8F61FE8 + 4));
    if (v13)
    {
      nw_protocol_metadata_t v14 = v13;
      uint64_t v15 = sub_1835312A8((uint64_t)v13);
      if (v15)
      {
        (*(void (**)(nw_protocol_metadata_t))(v15 + 96))(v14);
        type metadata accessor for NWProtocolWebSocket.Metadata();
        uint64_t v16 = swift_dynamicCastClass();
        if (v16)
        {
          uint64_t v27 = *(unsigned __int8 *)(v16 + 24);
          if (a2 >> 60 == 15) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = a1;
          }
          unint64_t v18 = 0xC000000000000000;
          if (a2 >> 60 != 15) {
            unint64_t v18 = a2;
          }
          unint64_t v25 = v18;
          uint64_t v26 = v17;
          uint64_t v19 = swift_allocObject();
          *(void *)(v19 + 16) = MEMORY[0x1E4FBC860];
          v20 = (uint64_t *)(v19 + 16);
          v36 = sub_18356F304;
          uint64_t v37 = v19;
          uint64_t aBlock = MEMORY[0x1E4F143A8];
          uint64_t v33 = 1107296256;
          uint64_t v34 = sub_183573F68;
          uint64_t v35 = (uint64_t)&block_descriptor_123;
          char v21 = _Block_copy(&aBlock);
          sub_1834D7FF8(a1, a2);
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v12, v21);
          _Block_release(v21);
          swift_unknownObjectRelease();
          swift_beginAccess();
          uint64_t v22 = *v20;
          swift_bridgeObjectRetain();
          swift_release();
          char v23 = *(unsigned char *)(a3 + 64);
          uint64_t aBlock = v27;
          uint64_t v33 = v26;
          uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
          uint64_t v35 = v22;
          LOBYTE(v36) = v23;
          char v29 = -1;
          int v28 = 0;
          a6(&aBlock, &v28);
          swift_release();
          swift_release();
          sub_1832E5E9C(v26, v25);
          return swift_bridgeObjectRelease();
        }
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    uint64_t aBlock = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 1;
    LOBYTE(v36) = 0;
    if (HIDWORD(v7) <= 0xFE)
    {
      char v31 = BYTE4(v7);
      int v30 = v7;
    }
    else
    {
      char v31 = 0;
      int v30 = 22;
    }
    a6(&aBlock, &v30);
    return swift_release();
  }
  else
  {
    uint64_t aBlock = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 1;
    LOBYTE(v36) = 0;
    if (HIDWORD(v7) <= 0xFE)
    {
      char v31 = BYTE4(v7);
      int v30 = v7;
    }
    else
    {
      char v31 = 0;
      int v30 = 22;
    }
    return ((uint64_t (*)(uint64_t *, int *))a6)(&aBlock, &v30);
  }
}

uint64_t Connection1<>.ping(_:metadata:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char v4 = 4;
  return sub_18356A49C(&v4, a1, a2, a3);
}

uint64_t Connection1<>.pong(_:metadata:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char v4 = 5;
  return sub_18356A49C(&v4, a1, a2, a3);
}

uint64_t Connection1<>.close(code:reason:metadata:)(unsigned __int16 *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  nw_ws_close_code_t v8 = *a1;
  int v9 = *((unsigned __int8 *)a1 + 2);
  uint64_t v10 = *(void *)(*(void *)v4 + 96);
  uint64_t v11 = *(void *)(*(void *)v4 + 112);
  uint64_t v25 = *(void *)(*(void *)v4 + 80);
  uint64_t v26 = &type metadata for WebSocket;
  uint64_t v27 = v10;
  int v28 = &protocol witness table for WebSocket;
  uint64_t v29 = v11;
  type metadata accessor for SendProgress();
  uint64_t v12 = swift_retain();
  uint64_t v13 = sub_18356F230(v12, (void (*)(void, uint64_t *))type metadata accessor for SendProgress, sub_18356D538);
  swift_release();
  unint64_t v14 = MEMORY[0x1E4FBC860];
  if (a4) {
    unint64_t v14 = a4;
  }
  unint64_t v24 = v14;
  type metadata accessor for NWProtocolWebSocket.Metadata();
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 24) = 3;
  *(_WORD *)(v15 + 40) = 4;
  *(unsigned char *)(v15 + 42) = 0;
  *(void *)(v15 + 32) = 0;
  swift_bridgeObjectRetain();
  metadata = nw_ws_create_metadata(nw_ws_opcode_close);
  *(void *)(v15 + 16) = metadata;
  swift_beginAccess();
  *(_WORD *)(v15 + 40) = v8;
  *(unsigned char *)(v15 + 42) = v9;
  if (!v9) {
    nw_ws_close_code_t v8 = word_183D594F4[(char)v8];
  }
  nw_ws_metadata_set_close_code(metadata, v8);
  uint64_t v17 = swift_retain();
  MEMORY[0x185314200](v17);
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_183D44E9C();
  }
  sub_183D44EDC();
  sub_183D44E6C();
  if (a3)
  {
    swift_bridgeObjectRetain();
    a3 = sub_1834CD42C(a2, a3);
    unint64_t v19 = v18;
  }
  else
  {
    unint64_t v19 = 0xF000000000000000;
  }
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x746E6F43646E6573, 0xEB00000000747865, 0, 0, 0, v24, 0.5);
  uint64_t v21 = v20;
  v23[0] = (uint64_t)sub_18356D768;
  v23[1] = v13;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(a3, v19, v21, 1, v23);
  swift_release();
  swift_release();
  sub_1832E669C(a3, v19);
  swift_release();
  return v13;
}

uint64_t Connection1<>.get()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_18356BCE8();
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(*(void *)(v6 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) + 16);
  nw_ws_close_code_t v8 = (void *)(v7 + 16);
  int v9 = (os_unfair_lock_s *)(v7 + 24);
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_1834A4678(v8, v37);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = *(void **)&v37[0];
  swift_release();
  uint64_t v11 = nw_parameters_copy_url_endpoint(v10);
  swift_unknownObjectRelease();
  if (!v11)
  {
    *(_OWORD *)((char *)v37 + 8) = 0u;
    *(_OWORD *)((char *)&v37[1] + 8) = 0u;
    *(_OWORD *)((char *)&v37[2] + 8) = 0u;
    *(_OWORD *)((char *)&v37[3] + 8) = 0u;
    *(void *)&v37[0] = 22;
    *((void *)&v37[4] + 1) = 0x8000000000000000;
    v37[5] = 0uLL;
    sub_1835613FC(v37);
    return v5;
  }
  uint64_t v29 = v11;
  nw_endpoint_get_url(v11);
  sub_183D44C9C();
  sub_183D4445C();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_183D4447C();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v4, 1, v12);
  if (result != 1)
  {
    unint64_t v30 = 5522759;
    unint64_t v31 = 0xE300000000000000;
    HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], &v36);
    HTTPRequest.init(method:url:headerFields:)((uint64_t *)&v30, (uint64_t)v4, &v36, v37);
    type metadata accessor for __NWHTTPRequest();
    uint64_t v14 = swift_allocObject();
    memcpy((void *)(v14 + 16), v37, 0x120uLL);
    sub_18350BA8C(v37);
    metadata_for_request = nw_http_create_metadata_for_request((void *)v14);
    swift_release();
    type metadata accessor for NWProtocolHTTP.Metadata();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = metadata_for_request;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61E50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183D569A0;
    *(void *)(inited + 32) = v16;
    unint64_t v30 = inited;
    sub_183D44E6C();
    unint64_t v18 = v30;
    type metadata accessor for NWConnection.ContentContext();
    swift_initStackObject();
    swift_retain();
    NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x746E6F43646E6573, 0xEB00000000747865, 0, 1, 0, v18, 0.5);
    uint64_t v20 = v19;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v5;
    *(void *)(v21 + 24) = v1;
    uint64_t v22 = *(NSObject **)(v6 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    uint64_t v24 = v5;
    uint64_t v25 = NWCreateDispatchDataFromNSData(0, v23);
    uint64_t v26 = *(NSObject **)(v20 + 16);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_18356D808;
    *(void *)(v27 + 24) = v21;
    uint64_t v34 = sub_1832E6DE0;
    uint64_t v35 = v27;
    unint64_t v30 = MEMORY[0x1E4F143A8];
    unint64_t v31 = 1107296256;
    v32 = sub_1832E6C64;
    uint64_t v33 = &block_descriptor_14;
    int v28 = _Block_copy(&v30);
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v22, v25, v26, 1, v28);
    _Block_release(v28);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();

    uint64_t v5 = v24;
    swift_unknownObjectRelease();
    sub_18356D810(v37);
    swift_release();
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_18356BCE8()
{
  type metadata accessor for HTTP();
  type metadata accessor for HTTP.Progress();
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_18356F230(v0, (void (*)(void, uint64_t *))type metadata accessor for HTTP.Progress, sub_18356F08C);
  swift_release();
  return v1;
}

uint64_t sub_18356BDC4(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (*((unsigned __int8 *)a1 + 4) == 255)
  {
    unint64_t v10 = 3;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v15 = 0xC000000000000000;
    sub_1835613FC(&v10);
    uint64_t v5 = *(NSObject **)(*(void *)(a3 + 16) + 16);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_18356F084;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_1832E5E74;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_1832E5DC4;
    v9[3] = &block_descriptor_101;
    uint64_t v7 = _Block_copy(v9);
    swift_retain_n();
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_receive_message(v5, v7);
    _Block_release(v7);
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v10 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v15 = 0x8000000000000000;
    return sub_1835613FC(&v10);
  }
}

uint64_t sub_18356BF48(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (!a3) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = qword_1E8F620F8;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  nw_protocol_metadata_t v7 = nw_content_context_copy_protocol_metadata(*(nw_content_context_t *)(a3 + 16), *((nw_protocol_definition_t *)off_1E8F633B0 + 4));
  if (!v7) {
    goto LABEL_14;
  }
  nw_protocol_metadata_t v8 = v7;
  uint64_t v9 = sub_1835312A8((uint64_t)v7);
  if (v9)
  {
    (*(void (**)(nw_protocol_metadata_t))(v9 + 96))(v8);
    type metadata accessor for NWProtocolHTTP.Metadata();
    uint64_t v10 = swift_dynamicCastClass();
    if (v10)
    {
      long long v11 = nw_http_metadata_copy_response(*(void **)(v10 + 16));
      if (v11)
      {
        long long v12 = v11;
        swift_beginAccess();
        uint64_t v13 = v12[3];
        uint64_t v21 = v12[4];
        uint64_t v22 = v12[2];
        uint64_t v14 = v12[5];
        uint64_t v20 = *((unsigned __int8 *)v12 + 48);
        uint64_t v15 = v12[8];
        uint64_t v16 = v12[10];
        uint64_t v18 = v12[9];
        uint64_t v19 = v12[7];
        uint64_t v17 = v12[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_unknownObjectRelease();
        *(void *)&long long v23 = v22;
        *((void *)&v23 + 1) = v13;
        uint64_t v24 = v21;
        uint64_t v25 = v14;
        uint64_t v26 = v20;
        uint64_t v27 = v19;
        uint64_t v28 = v15;
        uint64_t v29 = v18;
        uint64_t v30 = v16;
        uint64_t v31 = v17 | 0x4000000000000000;
        uint64_t v32 = v5;
        unint64_t v33 = a2;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1834D7FF8(v5, a2);
        sub_1835613FC(&v23);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_release();
        swift_release();
        return sub_1832E669C(v5, a2);
      }
    }
    swift_release();
LABEL_14:
    return swift_release();
  }
  swift_release();

  return swift_unknownObjectRelease();
}

double sub_18356C208@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1834F26A8(a1 + 16, (uint64_t)&v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63EE0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_18356C294(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_183D4434C();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = sub_183D4437C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = sub_183D4436C();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)sub_18355A4A0(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

char *sub_18356C344(char *a1, int64_t a2, char *__src, int64_t a4)
{
  uint64_t v4 = __src;
  if (!a4 || !a2) {
    return v4;
  }
  if (a4 >= a2) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = a4;
  }
  if ((v5 & 0x8000000000000000) == 0 && (&a1[v5] <= __src || &__src[v5] <= a1))
  {
    memcpy(a1, __src, v5);
    v4 += v5;
    return v4;
  }
  uint64_t result = (char *)sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_18356C458@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_183D44C1C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL _s7Network4HTTPC8ResponseV2eeoiySbAE_AEtFZ_0(long long *a1, long long *a2)
{
  long long v2 = *a1;
  uint64_t v3 = *((void *)a1 + 3);
  char v4 = *((unsigned char *)a1 + 32);
  long long v5 = *(long long *)((char *)a1 + 40);
  uint64_t v6 = *((void *)a1 + 7);
  uint64_t v8 = *((void *)a1 + 10);
  unint64_t v7 = *((void *)a1 + 11);
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v11 = *((void *)a2 + 3);
  char v12 = *((unsigned char *)a2 + 32);
  long long v13 = *(long long *)((char *)a2 + 40);
  uint64_t v14 = *((void *)a2 + 7);
  uint64_t v16 = *((void *)a2 + 10);
  unint64_t v15 = *((void *)a2 + 11);
  uint64_t v27 = *((void *)a1 + 2);
  uint64_t v28 = v3;
  char v29 = v4;
  long long v30 = v5;
  uint64_t v31 = v6;
  long long v32 = a1[4];
  long long v19 = v9;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  char v22 = v12;
  long long v23 = v13;
  uint64_t v24 = v14;
  long long v25 = a2[4];
  long long v26 = v2;
  if ((_s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0((uint64_t)&v26, (uint64_t)&v19) & 1) == 0) {
    return 0;
  }
  if (v7 >> 60 == 15)
  {
    if (v15 >> 60 == 15) {
      return 1;
    }
    goto LABEL_6;
  }
  if (v15 >> 60 == 15)
  {
LABEL_6:
    sub_1834D7FF8(v8, v7);
    sub_1834D7FF8(v16, v15);
    sub_1832E669C(v8, v7);
    sub_1832E669C(v16, v15);
    return 0;
  }
  sub_1834D7FF8(v8, v7);
  sub_1834D7FF8(v16, v15);
  char v17 = sub_1834FFE28(v8, v7, v16, v15);
  sub_1832E669C(v16, v15);
  sub_1832E669C(v8, v7);
  return (v17 & 1) != 0;
}

BOOL _s7Network4HTTPC5StateO2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v10 = a1[8];
  unint64_t v11 = a1[9];
  uint64_t v12 = a1[10];
  unint64_t v13 = a1[11];
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  uint64_t v16 = a2[2];
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v20 = a2[6];
  uint64_t v21 = a2[7];
  uint64_t v22 = a2[8];
  unint64_t v23 = a2[9];
  uint64_t v24 = a2[10];
  unint64_t v25 = a2[11];
  v72[0] = *a1;
  v72[1] = v2;
  v72[2] = v4;
  v72[3] = v5;
  v72[4] = v7;
  v72[5] = v6;
  v72[6] = v9;
  v72[7] = v8;
  v72[8] = v10;
  v72[9] = v11;
  v72[10] = v12;
  v72[11] = v13;
  v72[12] = v15;
  v72[13] = v14;
  v72[14] = v16;
  v72[15] = v17;
  v72[16] = v18;
  v72[17] = v19;
  v72[18] = v20;
  v72[19] = v21;
  v72[20] = v22;
  v72[21] = v23;
  v72[22] = v24;
  v72[23] = v25;
  switch(v11 >> 62)
  {
    case 1uLL:
      uint64_t v48 = v14;
      uint64_t v49 = v15;
      uint64_t v46 = v17;
      uint64_t v47 = v16;
      uint64_t v44 = v19;
      uint64_t v45 = v18;
      uint64_t v42 = v21;
      uint64_t v43 = v20;
      if (v23 >> 62 != 1)
      {
        uint64_t v28 = v22;
        unint64_t v29 = v23;
        uint64_t v30 = v24;
        unint64_t v31 = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1834D7FF8(v12, v13);
        unint64_t v25 = v31;
        uint64_t v24 = v30;
        unint64_t v23 = v29;
        uint64_t v22 = v28;
        uint64_t v21 = v42;
        uint64_t v20 = v43;
        uint64_t v19 = v44;
        uint64_t v18 = v45;
        uint64_t v17 = v46;
        uint64_t v16 = v47;
        uint64_t v14 = v48;
        goto LABEL_44;
      }
      *(void *)&long long v61 = v3;
      *((void *)&v61 + 1) = v2;
      uint64_t v62 = v4;
      uint64_t v63 = v5;
      char v64 = v7;
      uint64_t v65 = v6;
      uint64_t v66 = v9;
      uint64_t v67 = v8;
      uint64_t v68 = v10;
      uint64_t v69 = v11 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v70 = v12;
      unint64_t v71 = v13;
      *(void *)&long long v50 = v15;
      *((void *)&v50 + 1) = v14;
      uint64_t v51 = v16;
      uint64_t v52 = v17;
      char v53 = v18;
      uint64_t v54 = v19;
      uint64_t v55 = v20;
      uint64_t v56 = v21;
      uint64_t v57 = v22;
      uint64_t v58 = v23 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v59 = v24;
      unint64_t v60 = v25;
      unint64_t v39 = v23;
      uint64_t v40 = v22;
      unint64_t v37 = v25;
      uint64_t v38 = v24;
      uint64_t v41 = v4;
      uint64_t v26 = v4;
      uint64_t v36 = v6;
      sub_18356E8DC(v49, v14, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
      sub_18356E8DC(v3, v2, v26, v5, v7, v36, v9, v8, v10, v11, v12, v13);
      sub_18356E8DC(v49, v48, v47, v46, v45, v44, v43, v42, v40, v39, v38, v37);
      sub_18356E8DC(v3, v2, v41, v5, v7, v36, v9, v8, v10, v11, v12, v13);
      BOOL v27 = _s7Network4HTTPC8ResponseV2eeoiySbAE_AEtFZ_0(&v61, &v50);
      sub_18356FEB4((uint64_t)v72);
      sub_18356D3FC(v49, v48, v47, v46, v45, v44, v43, v42, v40, v39, v38, v37);
      sub_18356D3FC(v3, v2, v41, v5, v7, v36, v9, v8, v10, v11, v12, v13);
      return v27;
    case 2uLL:
      if (v23 >> 62 != 2) {
        goto LABEL_44;
      }
      goto LABEL_5;
    case 3uLL:
      if (v11 == 0xC000000000000000 && !(v2 | v3 | v4 | v5 | v7 | v6 | v9 | v8 | v10 | v12 | v13))
      {
        if (v23 >> 62 != 3
          || v23 != 0xC000000000000000
          || v14 | v15 | v16 | v17 | v18 | v19 | v20 | v21 | v22 | v24 | v25)
        {
          goto LABEL_44;
        }
LABEL_43:
        sub_18356FEB4((uint64_t)v72);
        return 1;
      }
      unint64_t v32 = v4 | v2 | v5 | v7 | v6 | v9 | v8 | v10 | v12 | v13;
      if (v11 == 0xC000000000000000 && v3 == 1 && !v32)
      {
        if (v23 >> 62 != 3 || v23 != 0xC000000000000000 || v15 != 1) {
          goto LABEL_44;
        }
      }
      else if (v11 == 0xC000000000000000 && v3 == 2 && !v32)
      {
        if (v23 >> 62 != 3 || v23 != 0xC000000000000000 || v15 != 2) {
          goto LABEL_44;
        }
      }
      else if (v23 >> 62 != 3 || v23 != 0xC000000000000000 || v15 != 3)
      {
        goto LABEL_44;
      }
      if (!(v16 | v14 | v17 | v18 | v19 | v20 | v21 | v22) && !(v25 | v24)) {
        goto LABEL_43;
      }
LABEL_44:
      sub_18356E8DC(v15, v14, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_45:
      sub_18356FEB4((uint64_t)v72);
      return 0;
    default:
      if (v23 >> 62) {
        goto LABEL_44;
      }
LABEL_5:
      if (BYTE4(v3))
      {
        if (BYTE4(v3) == 1)
        {
          sub_18356FEB4((uint64_t)v72);
          if (BYTE4(v15) != 1) {
            return 0;
          }
        }
        else
        {
          sub_18356FEB4((uint64_t)v72);
          if (BYTE4(v15) != 2) {
            return 0;
          }
        }
        if (v3 != v15) {
          return 0;
        }
      }
      else
      {
        if (BYTE4(v15)) {
          goto LABEL_45;
        }
        int v33 = sub_183D449BC();
        int v34 = sub_183D449BC();
        sub_18356FEB4((uint64_t)v72);
        if (v33 != v34) {
          return 0;
        }
      }
      return 1;
  }
}

uint64_t _s7Network9SendStateO2eeoiySbAC_ACtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  unint64_t v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  unsigned int v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1)
    {
      switch(v3)
      {
        case 0x8000000001uLL:
          uint64_t v12 = v4 & 0xFFFFFFFFFFLL;
          uint64_t v13 = 1;
          break;
        case 0x8000000002uLL:
          uint64_t v12 = v4 & 0xFFFFFFFFFFLL;
          uint64_t v13 = 2;
          break;
        case 0x8000000003uLL:
          uint64_t v12 = v4 & 0xFFFFFFFFFFLL;
          uint64_t v13 = 3;
          break;
        default:
          return (v4 & 0xFFFFFFFFFFLL) == 0x8000000000;
      }
      return v12 == (v13 & 0xFFFF0000FFFFFFFFLL | 0x8000000000);
    }
    if (((v4 >> 38) & 3) != 1) {
      return 0;
    }
    uint64_t v6 = HIDWORD(v3) & 0x3F;
    uint64_t v7 = HIDWORD(v4) & 0x3F;
    if (v6)
    {
      if (v6 == 1) {
        return v7 == 1 && v3 == *a2;
      }
      return v7 == 2 && v3 == *a2;
    }
LABEL_22:
    if (!v7)
    {
      int v10 = sub_183D449BC();
      if (v10 == sub_183D449BC()) {
        return 1;
      }
    }
    return 0;
  }
  if (((v4 >> 38) & 3) != 0) {
    return 0;
  }
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3)) {
    goto LABEL_22;
  }
  if (HIDWORD(v3) != 1) {
    return v7 == 2 && v3 == *a2;
  }
  return v7 == 1 && v3 == *a2;
}

uint64_t sub_18356CC18(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 16);
  v21[0] = &v25;
  while (1)
  {
    uint64_t v29 = 0;
    char v30 = 1;
    MEMORY[0x1F4188790](a1);
    v20[2] = &v29;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_18357025C;
    *(void *)(v4 + 24) = v20;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_183557EF8;
    *(void *)(v5 + 24) = v4;
    BOOL v27 = sub_183557F10;
    uint64_t v28 = v5;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    unint64_t v25 = sub_1835329C4;
    uint64_t v26 = &block_descriptor_373;
    uint64_t v6 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    BOOL v7 = nw_framer_parse_input(v1, 8uLL, 8uLL, 0, v6);
    swift_unknownObjectRelease();
    _Block_release(v6);
    LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v6) {
      break;
    }
    if (!v7) {
      return 8;
    }
    if ((v30 & 1) == 0)
    {
      int v9 = v29;
      unsigned int v10 = HIDWORD(v29);
      if (qword_1E8F62160 != -1) {
        swift_once();
      }
      uint64_t v11 = qword_1E8F7A918;
      type metadata accessor for NWProtocolFramer.Message();
      uint64_t inited = swift_initStackObject();
      message = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v11 + 32));
      *(void *)(inited + 16) = message;
      uint64_t v26 = (void *)MEMORY[0x1E4FBC4C0];
      LODWORD(aBlock[0]) = v9;
      sub_183138900((uint64_t)aBlock, (uint64_t)v22, (uint64_t *)&unk_1E8F61D90);
      uint64_t v14 = v23;
      if (v23)
      {
        uint64_t v15 = __swift_project_boxed_opaque_existential_2(v22, v23);
        v21[1] = v21;
        uint64_t v16 = *(void *)(v14 - 8);
        MEMORY[0x1F4188790](v15);
        uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v16 + 16))(v18);
        unsigned int v2 = (void *)sub_183D4591C();
        uint64_t v19 = *(void (**)(char *, uint64_t))(v16 + 8);
        swift_retain();
        v19(v18, v14);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
      }
      else
      {
        swift_retain();
        unsigned int v2 = 0;
      }
      nw_framer_message_set_object_value(message, "Type", v2);
      swift_unknownObjectRelease();
      sub_183138A24((uint64_t)aBlock, (uint64_t *)&unk_1E8F61D90);
      swift_release();
      BOOL v3 = nw_framer_deliver_input_no_copy(v1, bswap32(v10), *(nw_framer_message_t *)(inited + 16), 1);
      a1 = swift_unknownObjectRelease();
      if (v3) {
        continue;
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

void sub_18356CFF4(uint64_t a1, uint64_t a2, size_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v5 = sub_18355A694();
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    sub_183D456BC();
    __break(1u);
  }
  else
  {
    __src[0] = v5;
    __src[1] = bswap32(a3);
    uint64_t v6 = sub_1835572E0(__src, 8);
    unint64_t v8 = v7;
    int v9 = *(NSObject **)(a1 + 16);
    swift_unknownObjectRetain();
    unsigned int v10 = (void *)sub_183D4452C();
    uint64_t v12 = NWCreateDispatchDataFromNSData(v10, v11);

    if (!v12) {
      __break(1u);
    }
    nw_framer_write_output_data(v9, v12);
    swift_unknownObjectRelease();

    if (nw_framer_write_output_no_copy(v9, a3))
    {
      sub_1832E5E9C(v6, v8);
    }
    else
    {
      sub_1834AC424();
      uint64_t v13 = (void *)swift_allocError();
      *(_DWORD *)uint64_t v14 = 22;
      *(unsigned char *)(v14 + 4) = 0;
      swift_willThrow();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62B30);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_183D53660;
      sub_183D4547C();
      sub_183D44C8C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63CE0);
      sub_183D4566C();
      *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = 0xE000000000000000;
      sub_183D45ADC();
      sub_1832E5E9C(v6, v8);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_18356D290(unsigned int *a1)
{
  return sub_18355C110(a1, v1);
}

uint64_t type metadata accessor for SendProgress()
{
  return swift_getGenericMetadata();
}

uint64_t sub_18356D2C4(uint64_t a1)
{
  return sub_18355E504(a1, v1, qword_1E8F642E0, (uint64_t)&unk_1ECF65068, (uint64_t)sub_18356FFB0, (uint64_t)&block_descriptor_352);
}

uint64_t sub_18356D30C(uint64_t a1)
{
  return sub_18355E504(a1, v1, &qword_1E8F61A50, (uint64_t)&unk_1ECF65018, (uint64_t)sub_18356FF84, (uint64_t)&block_descriptor_346);
}

uint64_t type metadata accessor for HTTP1()
{
  return self;
}

uint64_t type metadata accessor for TCP()
{
  return self;
}

uint64_t type metadata accessor for HTTP2()
{
  return self;
}

uint64_t type metadata accessor for HTTP3()
{
  return self;
}

uint64_t type metadata accessor for HTTP.Progress()
{
  return swift_getGenericMetadata();
}

void sub_18356D3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a10 >> 62 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1832E669C(a11, a12);
  }
}

uint64_t sub_18356D4A0(uint64_t a1)
{
  return sub_18355E504(a1, v1, qword_1E8F64400, (uint64_t)&unk_1ECF64F78, (uint64_t)sub_18356FD0C, (uint64_t)&block_descriptor_334);
}

uint64_t sub_18356D4E8(uint64_t a1)
{
  return sub_18355E504(a1, v1, &qword_1E8F644D0, (uint64_t)&unk_1ECF64F28, (uint64_t)sub_18356FCE0, (uint64_t)&block_descriptor_328);
}

uint64_t sub_18356D530(uint64_t a1)
{
  return sub_183563E24(a1, v1);
}

uint64_t sub_18356D538(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2 + qword_1E8F63F00;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1E8F642E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (void *)(v2 + qword_1E8F63F10);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *uint64_t v6 = MEMORY[0x1E4FBC860];
  v6[1] = v7;
  v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  uint64_t v8 = v2 + qword_1E8F64248;
  *(unsigned char *)(v8 + 4) = 0x80;
  *(_DWORD *)uint64_t v8 = 0;
  *(void *)(v2 + 16) = a1;
  uint64_t v12 = v2;
  swift_retain();
  uint64_t v9 = type metadata accessor for SendProgress();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_18355C504((uint64_t)&v12, v9, (uint64_t)&protocol witness table for SendProgress<A, Pack{repeat B}>, WitnessTable, (uint64_t)&unk_1ECF645A0, (uint64_t)sub_18356F2AC, (uint64_t)&block_descriptor_107);
  return v2;
}

uint64_t sub_18356D6CC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18356D704(unsigned int *a1)
{
  return sub_18356625C(a1);
}

uint64_t sub_18356D720(uint64_t a1)
{
  return sub_183564B78(a1, v1[3], v1[4], v1[5]);
}

uint64_t sub_18356D72C(uint64_t a1)
{
  return sub_1835650B8(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t type metadata accessor for AsyncSequenceReceive()
{
  return swift_getGenericMetadata();
}

uint64_t sub_18356D750(uint64_t a1, uint64_t a2)
{
  return sub_183565628(a1, a2, *(void *)(v2 + 24));
}

uint64_t sub_18356D758(uint64_t a1)
{
  return sub_183566668(a1, *(void *)(v1 + 24));
}

uint64_t sub_18356D760(uint64_t a1, uint64_t a2)
{
  return sub_183566B9C(a1, a2, *(void *)(v2 + 24));
}

uint64_t sub_18356D768(unsigned int *a1)
{
  return sub_18356625C(a1);
}

uint64_t sub_18356D784(uint64_t a1)
{
  return sub_183567584(a1, *(void *)(v1 + 32));
}

uint64_t sub_18356D790(uint64_t a1, uint64_t a2)
{
  return sub_183567AB4(a1, a2, v2);
}

uint64_t sub_18356D798(uint64_t a1)
{
  return sub_1835684F4(a1, *(void **)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_18356D7A0(uint64_t a1)
{
  return sub_183568E90(a1, *(void **)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_18356D7A8(uint64_t a1, uint64_t a2)
{
  return sub_183569738(a1, a2, *(uint64_t **)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_18356D7B0(uint64_t a1, uint64_t a2)
{
  return sub_183569DF4(a1, a2, *(uint64_t **)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_18356D7B8(uint64_t a1)
{
  return sub_18356AA98(a1, v1);
}

uint64_t sub_18356D7C0(uint64_t a1, uint64_t a2)
{
  return sub_18356B0DC(a1, a2, v2);
}

uint64_t sub_18356D7C8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18356D808(unsigned int *a1)
{
  return sub_18356BDC4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *sub_18356D810(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[21];
  uint64_t v9 = a1[29];
  uint64_t v10 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1834BFA48(v2, v3);
  sub_1834BFA48(v6, v5);
  sub_1834BFA48(v8, v7);
  sub_1834BFA48(v10, v9);
  swift_release();
  return a1;
}

uint64_t sub_18356D978()
{
  return swift_getWitnessTable();
}

uint64_t sub_18356D994()
{
  return swift_getWitnessTable();
}

uint64_t sub_18356D9B0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TLVFramer()
{
  return self;
}

uint64_t method lookup function for TLVFramer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TLVFramer);
}

uint64_t dispatch thunk of TLVFramer.__allocating_init(framer:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of TLVFramer.start(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of TLVFramer.wakeup(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of TLVFramer.stop(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of TLVFramer.cleanup(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of TLVFramer.handleInput(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of TLVFramer.handleOutput(framer:message:messageLength:isComplete:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of StateChangedHandler.handleNewState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of Protocol.configure(parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of OptionalProtocol.init(enabled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_18356DB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t type metadata accessor for ProtocolStackBuilder()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for DisableProtocol()
{
  return &type metadata for DisableProtocol;
}

uint64_t sub_18356DB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t type metadata accessor for Configuration()
{
  return swift_getGenericMetadata();
}

void *sub_18356DB80(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_18356DBB0()
{
  return swift_release();
}

void *sub_18356DBB8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_18356DBF4(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AsyncProperty()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18356DC40()
{
  uint64_t result = sub_183D4503C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_18356DCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D4503C();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_18356DD40(uint64_t a1)
{
  uint64_t v2 = sub_183D4503C();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_18356DDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D4503C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_18356DE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D4503C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_18356DE78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D4503C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_18356DEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D4503C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_18356DF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18356DF5C);
}

uint64_t sub_18356DF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D4503C();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_18356DFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18356DFE0);
}

uint64_t sub_18356DFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D4503C();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AsyncProperty.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Internal()
{
  return self;
}

uint64_t sub_18356E090()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Connection1()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for Connection1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Connection1);
}

uint64_t dispatch thunk of Connection1.__allocating_init(to:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of Connection1.__allocating_init(using:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

ValueMetadata *type metadata accessor for SendState()
{
  return &type metadata for SendState;
}

void sub_18356E14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t method lookup function for SendProgress(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SendProgress);
}

uint64_t dispatch thunk of SendProgress.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SendProgress.handleNewState(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SendProgress.states.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SendProgress.done.getter()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 264) + **(int **)(*(void *)v0 + 264));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1834B5EB0;
  return v4();
}

uint64_t dispatch thunk of SendProgress.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

ValueMetadata *type metadata accessor for TLS()
{
  return &type metadata for TLS;
}

uint64_t method lookup function for TCP(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TCP);
}

uint64_t dispatch thunk of TCP.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

ValueMetadata *type metadata accessor for QUIC()
{
  return &type metadata for QUIC;
}

ValueMetadata *type metadata accessor for UDP()
{
  return &type metadata for UDP;
}

ValueMetadata *type metadata accessor for IP()
{
  return &type metadata for IP;
}

ValueMetadata *type metadata accessor for TLV()
{
  return &type metadata for TLV;
}

uint64_t type metadata accessor for JSON()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for WebSocket()
{
  return &type metadata for WebSocket;
}

uint64_t method lookup function for HTTP1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HTTP1);
}

uint64_t dispatch thunk of HTTP1.__allocating_init(enabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for HTTP2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HTTP2);
}

uint64_t dispatch thunk of HTTP2.__allocating_init(enabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for HTTP3(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HTTP3);
}

uint64_t dispatch thunk of HTTP3.__allocating_init(enabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for HTTP()
{
  return self;
}

uint64_t method lookup function for HTTP(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HTTP);
}

uint64_t dispatch thunk of HTTP.__allocating_init(insecure:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of HTTP.__allocating_init(h1:h2:h3:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t destroy for HTTP.Response(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    return sub_1832E5E9C(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for HTTP.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = (uint64_t *)(a2 + 80);
  unint64_t v8 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    sub_1832E5D6C(*v7, v8);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v8;
  }
  return a1;
}

uint64_t assignWithCopy for HTTP.Response(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 80);
  unint64_t v5 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_1832E5D6C(*v4, v5);
      uint64_t v8 = *(void *)(a1 + 80);
      unint64_t v9 = *(void *)(a1 + 88);
      *(void *)(a1 + 80) = v7;
      *(void *)(a1 + 88) = v5;
      sub_1832E5E9C(v8, v9);
      return a1;
    }
    sub_1834F0E54(a1 + 80);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_1832E5D6C(*v4, v5);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for HTTP.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  uint64_t v8 = (void *)(a2 + 80);
  unint64_t v9 = *(void *)(a1 + 88);
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 88);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v8;
      *(void *)(a1 + 88) = v10;
      sub_1832E5E9C(v11, v9);
      return a1;
    }
    sub_1834F0E54(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTP.Response(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTP.Response(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTP.Response()
{
  return &type metadata for HTTP.Response;
}

void sub_18356E8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a10 >> 62 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1834D7FF8(a11, a12);
  }
}

void destroy for HTTP.State(uint64_t a1)
{
}

uint64_t *initializeWithCopy for HTTP.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  unint64_t v15 = a2[11];
  sub_18356E8DC(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  return a1;
}

uint64_t assignWithCopy for HTTP.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v24 = a2[9];
  uint64_t v25 = a2[10];
  unint64_t v26 = a2[11];
  sub_18356E8DC(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  unint64_t v22 = *(void *)(a1 + 88);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  sub_18356D3FC(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1), v21, v22);
  return a1;
}

uint64_t assignWithTake for HTTP.State(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  unint64_t v13 = *(void *)(a1 + 88);
  long long v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  long long v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  sub_18356D3FC(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((unint64_t *)&v11 + 1), v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTP.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 33);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for HTTP.State(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 88) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = (unint64_t)-a2 << 8;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(void *)(a1 + 88) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_18356EC90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72) >> 62;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_18356ECAC(uint64_t result)
{
  *(void *)(result + 72) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_18356ECBC(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *(void *)(result + 72) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *(void *)(result + 32) = *(unsigned __int8 *)(result + 32);
    *(void *)(result + 72) = v2;
  }
  else
  {
    *(void *)double result = (a2 - 3);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 72) = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTP.State()
{
  return &type metadata for HTTP.State;
}

void sub_18356ED18(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_18356ED3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  sub_183519750(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t method lookup function for HTTP.Progress(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HTTP.Progress);
}

uint64_t dispatch thunk of HTTP.Progress.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of HTTP.Progress.handleNewState(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of HTTP.Progress.states.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of HTTP.Progress.done.getter(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 264) + **(int **)(*(void *)v1 + 264));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1834B96A4;
  return v6(a1);
}

uint64_t dispatch thunk of HTTP.Progress.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t sub_18356EFC0()
{
  sub_183D4500C();
  uint64_t result = sub_183D4536C();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AsyncSequenceReceive(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AsyncSequenceReceive);
}

uint64_t sub_18356F084(uint64_t result, unint64_t a2, uint64_t a3)
{
  return sub_18356BF48(result, a2, a3);
}

uint64_t sub_18356F08C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2 + qword_1E8F63F20;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1E8F64400);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (void *)(v2 + qword_1E8F63F30);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *uint64_t v6 = MEMORY[0x1E4FBC860];
  v6[1] = v7;
  v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  v6[6] = v7;
  uint64_t v8 = v2 + qword_1E8F63F38;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0xC000000000000000;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(void *)(v2 + 16) = a1;
  uint64_t v12 = v2;
  swift_retain();
  uint64_t v9 = type metadata accessor for HTTP.Progress();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_18355C504((uint64_t)&v12, v9, (uint64_t)&protocol witness table for HTTP.Progress<A, Pack{repeat B}>, WitnessTable, (uint64_t)&unk_1ECF645A0, (uint64_t)sub_18356F2AC, (uint64_t)&block_descriptor_107);
  return v2;
}

uint64_t sub_18356F230(uint64_t a1, void (*a2)(void, uint64_t *), uint64_t (*a3)(uint64_t))
{
  uint64_t v8 = *(void *)(v3 + 80);
  long long v6 = *(_OWORD *)(v3 + 104);
  long long v9 = *(_OWORD *)(v3 + 88);
  long long v10 = v6;
  a2(0, &v8);
  swift_allocObject();
  return a3(a1);
}

uint64_t sub_18356F2AC()
{
  return sub_1835701B0((uint64_t (*)(void, unint64_t))sub_18355C3D0);
}

uint64_t sub_18356F2C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return sub_18356B210(a1, a2, a3, a4, a5, *(void (**)(uint64_t *, int *))(v5 + 16));
}

uint64_t sub_18356F2CC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_18356F304(uint64_t a1, uint64_t a2)
{
  return sub_183573E7C(a1, a2, v2);
}

uint64_t sub_18356F30C()
{
  return objectdestroy_125Tm((uint64_t *)&unk_1E8F64490);
}

uint64_t sub_18356F318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18356F7F8(a1, a2, a3, a4, a5, (uint64_t *)&unk_1E8F64490, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_18356AC8C);
}

uint64_t sub_18356F338()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18356F370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18356F3A0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))sub_183569FB0);
}

uint64_t sub_18356F388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18356F3A0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))sub_1835698F4);
}

uint64_t sub_18356F3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a6(a1, a2, a3, a4, a5, v6[7], v6[8], v6[2], v6[3], v6[4], v6[5], v6[6]);
}

uint64_t sub_18356F3E0()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F63F90);
  swift_getTupleTypeMetadata3();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F63CE0);
  uint64_t v1 = sub_183D44F5C();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_18356F4C4(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v9 = v5[2];
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F63F90);
  swift_getTupleTypeMetadata3();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F63CE0);
  uint64_t v12 = *(void *)(sub_183D44F5C() - 8);
  return sub_183569154(a1, a2, a3, a4, a5, (uint64_t)v5 + ((*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v9, v10, v11);
}

uint64_t sub_18356F5DC()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F63CE0);
  uint64_t v1 = sub_183D44F5C();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_18356F68C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_183568784(a1, a2, a3);
}

uint64_t sub_18356F770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(unsigned char *, uint64_t))(v2 + 16);
  sub_183138964(a1, (uint64_t)v6, &qword_1E8F644A8);
  return v4(v6, a2);
}

uint64_t sub_18356F7C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return sub_183567C18(a1, a2, a3, a4, a5, *(void (**)(uint64_t *, int *))(v5 + 16));
}

uint64_t sub_18356F7CC()
{
  return objectdestroy_125Tm(&qword_1E8F644B0);
}

uint64_t sub_18356F7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18356F7F8(a1, a2, a3, a4, a5, &qword_1E8F644B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_183567778);
}

uint64_t sub_18356F7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = v7 + ((*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));

  return a7(a1, a2, a3, a4, a5, v14);
}

uint64_t sub_18356F8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t))(v4 + 16);
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  return v5(v7, a4);
}

uint64_t sub_18356F8EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return sub_183566D00(a1, a2, a3, a4, a5, *(uint64_t (**)(uint64_t, unint64_t, uint64_t, int *))(v5 + 16));
}

uint64_t sub_18356F8F4()
{
  return objectdestroy_125Tm(&qword_1E8F644C0);
}

uint64_t sub_18356F900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18356F7F8(a1, a2, a3, a4, a5, &qword_1E8F644C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_18356685C);
}

uint64_t sub_18356F920(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  long long v6 = *(uint64_t (**)(void *, uint64_t))(v5 + 16);
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  char v9 = a4;
  return v6(v8, a5);
}

uint64_t sub_18356F964(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_183565794(a1, a2, a3, a4, a5, *(void (**)(uint64_t, unint64_t, uint64_t, void, int *))(v5 + 16));
}

uint64_t sub_18356F96C()
{
  return objectdestroy_125Tm(&qword_1E8F644C8);
}

uint64_t sub_18356F978(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_18356F9D4(a1, a2, a3, a4, a5, (uint64_t)sub_18356F304, (uint64_t)&block_descriptor_296, (uint64_t)sub_18356F304, (uint64_t)&block_descriptor_291);
}

uint64_t sub_18356F9D4(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F644C8) - 8);
  return sub_1835652B8(a1, a2, a3, a4, a5, v9 + ((*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), a6, a7, a8, a9);
}

uint64_t sub_18356FAA0()
{
  return objectdestroy_125Tm(&qword_1E8F644C8);
}

uint64_t objectdestroy_125Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80)), v2);

  return swift_deallocObject();
}

uint64_t sub_18356FB38(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_18356F9D4(a1, a2, a3, a4, a5, (uint64_t)sub_18356F304, (uint64_t)&block_descriptor_316, (uint64_t)sub_18356F304, (uint64_t)&block_descriptor_311);
}

uint64_t sub_18356FB94(char *a1, uint64_t a2)
{
  return sub_183563774(a1, a2, v2);
}

uint64_t sub_18356FB9C()
{
  uint64_t v1 = sub_183D4500C();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_18356FC6C()
{
  uint64_t v1 = *(void *)(sub_183D4500C() - 8);
  uint64_t v2 = *(uint64_t **)(v0 + 64);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_18356424C(v2, v3);
}

uint64_t sub_18356FCD4()
{
  return objectdestroy_324Tm(&qword_1E8F644D0);
}

uint64_t sub_18356FCE0()
{
  return sub_18356FFD0(&qword_1E8F644D0, sub_1835631A8);
}

uint64_t sub_18356FD00()
{
  return objectdestroy_324Tm(qword_1E8F64400);
}

uint64_t sub_18356FD0C()
{
  return sub_18356FFD0(qword_1E8F64400, sub_183562A48);
}

uint64_t sub_18356FD2C(uint64_t a1)
{
  return sub_183562EAC(a1, v1, &qword_1E8F63F28, qword_1E8F64400, (uint64_t (*)(char *))sub_183560F60);
}

_OWORD *sub_18356FD6C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  long long v3 = a1[2];
  long long v4 = a1[3];
  long long v5 = a1[5];
  a2[4] = a1[4];
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  return a2;
}

uint64_t sub_18356FD8C()
{
  swift_release();
  sub_18356D3FC(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));

  return swift_deallocObject();
}

void sub_18356FDF0()
{
  sub_183561710(*(void *)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_18356FDFC(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_18356FE58(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_18356FEB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  long long v12 = *(_OWORD *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 176);
  unint64_t v9 = *(void *)(a1 + 184);
  sub_18356D3FC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88));
  sub_18356D3FC(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((unint64_t *)&v12 + 1), v10, v9);
  return a1;
}

uint64_t sub_18356FF78()
{
  return objectdestroy_324Tm(&qword_1E8F61A50);
}

uint64_t sub_18356FF84()
{
  return sub_18356FFD0(&qword_1E8F61A50, sub_18355E900);
}

uint64_t sub_18356FFA4()
{
  return objectdestroy_324Tm(qword_1E8F642E0);
}

uint64_t sub_18356FFB0()
{
  return sub_18356FFD0(qword_1E8F642E0, sub_18355DF4C);
}

uint64_t sub_18356FFD0(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5);
}

uint64_t sub_183570044(uint64_t a1)
{
  return sub_183562EAC(a1, v1, &qword_1E8F63F08, qword_1E8F642E0, (uint64_t (*)(char *))sub_18355CA68);
}

uint64_t sub_183570084()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1835700BC()
{
  return sub_18355D078(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32));
}

uint64_t objectdestroy_103Tm()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_183570198()
{
  return sub_1835701B0((uint64_t (*)(void, unint64_t))sub_18355C900);
}

uint64_t sub_1835701B0(uint64_t (*a1)(void, unint64_t))
{
  return a1(*(void *)(v1 + 80), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 40) - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 40) - 8) + 80)));
}

uint64_t sub_183570200(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_18357025C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_18355A5F4(a1, a2, a3 & 1, a4, *(void *)(v4 + 16));
}

uint64_t sub_183570268()
{
  return swift_deallocObject();
}

uint64_t sub_183570278()
{
  return swift_deallocObject();
}

uint64_t sub_183570288(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1835702D0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static DistributedActor<>.discover(_:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (uint64_t *)&v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  NWActorSystem.assignID<A>(_:)(v7);
  uint64_t v8 = *(os_unfair_lock_s **)(a2 + 128);
  uint64_t v15 = a2;
  long long v16 = v7;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = a1;
  long long v12 = sub_183570648;
  uint64_t v13 = &v14;
  unint64_t v9 = v8 + 4;
  os_unfair_lock_lock(v8 + 4);
  sub_1835071D4(v10);
  os_unfair_lock_unlock(v9);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = a2;
    sub_183D4463C();
    sub_183570908((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }
}

uint64_t sub_183570648()
{
  return sub_1835708E4();
}

void static DistributedActor<>.discover(_:connectionParameters:using:invalidationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a5;
  uint64_t v21 = a4;
  uint64_t v8 = type metadata accessor for NWActorDiscoveryMechanism(0);
  unint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v12 - 8);
  char v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  NWActorSystem.assignID<A>(_:)(v14);
  sub_1834D7F00(a1, (uint64_t)v11);
  type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  swift_storeEnumTagMultiPayload();
  *(void *)&v11[v9[9]] = a2;
  uint64_t v15 = &v11[v9[7]];
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v15[32] = -2;
  *(void *)&v11[v9[8]] = 0;
  long long v16 = *(os_unfair_lock_s **)(a3 + 128);
  uint64_t v27 = a3;
  uint64_t v28 = v14;
  uint64_t v29 = v11;
  uint64_t v30 = v21;
  uint64_t v31 = v22;
  unint64_t v24 = sub_183570648;
  uint64_t v25 = &v26;
  uint64_t v17 = v16 + 4;
  swift_retain();
  os_unfair_lock_lock(v17);
  uint64_t v18 = v23;
  sub_183554138(v19);
  os_unfair_lock_unlock(v17);
  if (v18)
  {
    __break(1u);
  }
  else
  {
    uint64_t v32 = a3;
    sub_183D4463C();
    sub_183570908((uint64_t)v11, type metadata accessor for NWActorDiscoveryMechanism);
    sub_183570908((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }
}

uint64_t DistributedActor<>.peer.getter()
{
  if (qword_1E8F62158 != -1) {
    swift_once();
  }
  return sub_183D45C6C();
}

uint64_t sub_1835708E4()
{
  return sub_1834E91EC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_183570908(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_183570968()
{
  nw_protocol_definition_t v0 = nw_protocol_copy_tcp_definition();
  type metadata accessor for NWProtocolDefinition();
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v3 = sub_183D44AFC();
  uint64_t v5 = v4;

  uint64_t result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_1E8F64508 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolTCP.definition.getter()
{
  if (qword_1E8F62170 != -1) {
    swift_once();
  }

  return swift_retain();
}

void sub_183570A58(char a1)
{
  nw_tcp_options_set_no_delay(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183570A68()
{
  return nw_tcp_options_get_no_delay(*(void **)(v0 + 16));
}

void (*sub_183570A84(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_no_delay(v3);
  return sub_183570AD0;
}

void sub_183570AD0(uint64_t a1)
{
}

void sub_183570AE0(char a1)
{
  nw_tcp_options_set_no_push(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183570AF0()
{
  return nw_tcp_options_get_no_push(*(void **)(v0 + 16));
}

void (*sub_183570B0C(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_no_push(v3);
  return sub_183570B58;
}

void sub_183570B58(uint64_t a1)
{
}

void sub_183570B68(char a1)
{
  nw_tcp_options_set_no_options(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183570B78()
{
  return nw_tcp_options_get_no_options(*(void **)(v0 + 16));
}

void (*sub_183570B94(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_no_options(v3);
  return sub_183570BE0;
}

void sub_183570BE0(uint64_t a1)
{
}

void sub_183570BF0(char a1)
{
  nw_tcp_options_set_enable_keepalive(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183570C00()
{
  return nw_tcp_options_get_enable_keepalive(*(void **)(v0 + 16));
}

void (*sub_183570C1C(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_enable_keepalive(v3);
  return sub_183570C68;
}

void sub_183570C68(uint64_t a1)
{
}

uint64_t sub_183570C78(unint64_t a1)
{
  return sub_183571120(a1, (uint64_t (*)(uint64_t, unint64_t))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_183570C90()
{
  return nw_tcp_options_get_keepalive_count(*(void **)(v0 + 16));
}

uint64_t (*sub_183570CB0(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_count(v3);
  return sub_183570D00;
}

uint64_t sub_183570D00(void *a1, uint64_t a2)
{
  return sub_183571274(a1, a2, (uint64_t (*)(uint64_t))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_183570D18(unint64_t a1)
{
  return sub_183571120(a1, (uint64_t (*)(uint64_t, unint64_t))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_183570D30()
{
  return nw_tcp_options_get_keepalive_idle_time(*(void **)(v0 + 16));
}

uint64_t (*sub_183570D50(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_idle_time(v3);
  return sub_183570DA0;
}

uint64_t sub_183570DA0(void *a1, uint64_t a2)
{
  return sub_183571274(a1, a2, (uint64_t (*)(uint64_t))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_183570DB8(unint64_t a1)
{
  return sub_183571120(a1, (uint64_t (*)(uint64_t, unint64_t))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_183570DD0()
{
  return nw_tcp_options_get_keepalive_interval(*(void **)(v0 + 16));
}

uint64_t (*sub_183570DF0(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_interval(v3);
  return sub_183570E40;
}

uint64_t sub_183570E40(void *a1, uint64_t a2)
{
  return sub_183571274(a1, a2, (uint64_t (*)(uint64_t))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_183570E58(unint64_t a1)
{
  return sub_183571120(a1, (uint64_t (*)(uint64_t, unint64_t))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_183570E70()
{
  return nw_tcp_options_get_maximum_segment_size(*(void **)(v0 + 16));
}

uint64_t (*sub_183570E90(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_maximum_segment_size(v3);
  return sub_183570EE0;
}

uint64_t sub_183570EE0(void *a1, uint64_t a2)
{
  return sub_183571274(a1, a2, (uint64_t (*)(uint64_t))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_183570EF8(unint64_t a1)
{
  return sub_183571120(a1, (uint64_t (*)(uint64_t, unint64_t))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_183570F10()
{
  return nw_tcp_options_get_connection_timeout(*(void **)(v0 + 16));
}

uint64_t (*sub_183570F30(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_connection_timeout(v3);
  return sub_183570F80;
}

uint64_t sub_183570F80(void *a1, uint64_t a2)
{
  return sub_183571274(a1, a2, (uint64_t (*)(uint64_t))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_183570F98(unint64_t a1)
{
  return sub_183571120(a1, (uint64_t (*)(uint64_t, unint64_t))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_183570FB0()
{
  return nw_tcp_options_get_persist_timeout(*(void **)(v0 + 16));
}

uint64_t (*sub_183570FD0(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_persist_timeout(v3);
  return sub_183571020;
}

uint64_t sub_183571020(void *a1, uint64_t a2)
{
  return sub_183571274(a1, a2, (uint64_t (*)(uint64_t))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_183571038(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if ((*a1 & 0x8000000000000000) != 0 || HIDWORD(*a1))
  {
    uint64_t result = sub_183D456BC();
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)a2 + 16);
    return a5(v5);
  }
  return result;
}

uint64_t sub_183571108(unint64_t a1)
{
  return sub_183571120(a1, (uint64_t (*)(uint64_t, unint64_t))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_183571120(unint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1))
  {
    uint64_t result = sub_183D456BC();
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 16);
    return a2(v5, a1);
  }
  return result;
}

uint64_t sub_1835711EC()
{
  return nw_tcp_options_get_retransmit_connection_drop_time(*(void **)(v0 + 16));
}

uint64_t (*sub_18357120C(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_retransmit_connection_drop_time(v3);
  return sub_18357125C;
}

uint64_t sub_18357125C(void *a1, uint64_t a2)
{
  return sub_183571274(a1, a2, (uint64_t (*)(uint64_t))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_183571274(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if ((*a1 & 0x8000000000000000) != 0 || HIDWORD(*a1))
  {
    uint64_t result = sub_183D456BC();
    __break(1u);
  }
  else
  {
    uint64_t v3 = a1[1];
    return a3(v3);
  }
  return result;
}

void sub_183571340(char a1)
{
  nw_tcp_options_set_retransmit_fin_drop(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183571350()
{
  return nw_tcp_options_get_retransmit_fin_drop(*(void **)(v0 + 16));
}

void (*sub_18357136C(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_retransmit_fin_drop(v3);
  return sub_1835713B8;
}

void sub_1835713B8(uint64_t a1)
{
}

void sub_1835713C8(char a1)
{
  nw_tcp_options_set_disable_ack_stretching(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1835713D8()
{
  return nw_tcp_options_get_disable_ack_stretching(*(void **)(v0 + 16));
}

void (*sub_1835713F4(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_disable_ack_stretching(v3);
  return sub_183571440;
}

void sub_183571440(uint64_t a1)
{
}

void sub_183571450(char a1)
{
  nw_tcp_options_set_enable_fast_open(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183571460()
{
  return nw_tcp_options_get_enable_fast_open(*(void **)(v0 + 16));
}

void (*sub_18357147C(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_enable_fast_open(v3);
  return sub_1835714C8;
}

void sub_1835714C8(uint64_t a1)
{
}

void sub_1835714D8(char a1)
{
  nw_tcp_options_set_disable_ecn(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1835714E8()
{
  return nw_tcp_options_get_disable_ecn(*(void **)(v0 + 16));
}

void (*sub_183571504(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = nw_tcp_options_get_disable_ecn(v3);
  return sub_183571550;
}

void sub_183571550(uint64_t a1)
{
}

BOOL sub_183571560(NSObject *a1)
{
  uint64_t v1 = nw_protocol_options_copy_definition(a1);
  uint64_t v2 = nw_protocol_copy_tcp_definition();
  BOOL is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolTCP.Options.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t NWProtocolTCP.Options.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

BOOL sub_183571614(NSObject *a1)
{
  return nw_protocol_metadata_is_tcp(a1);
}

uint64_t sub_18357162C()
{
  return nw_tcp_get_available_receive_buffer(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_183571634()
{
  return nw_tcp_get_available_send_buffer(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t NWProtocolTCP.deinit()
{
  return v0;
}

uint64_t NWProtocolTCP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_183571658@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_no_delay(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183571688(BOOL *a1, uint64_t a2)
{
}

BOOL sub_18357169C@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_no_push(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1835716CC(BOOL *a1, uint64_t a2)
{
}

BOOL sub_1835716E0@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_no_options(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183571710(BOOL *a1, uint64_t a2)
{
}

BOOL sub_183571724@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_enable_keepalive(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183571754(BOOL *a1, uint64_t a2)
{
}

uint64_t sub_183571768@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_keepalive_count(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_18357179C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183571038(a1, a2, a3, a4, (uint64_t (*)(uint64_t))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_1835717C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_keepalive_idle_time(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1835717FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183571038(a1, a2, a3, a4, (uint64_t (*)(uint64_t))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_183571828@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_keepalive_interval(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_18357185C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183571038(a1, a2, a3, a4, (uint64_t (*)(uint64_t))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_183571888@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_maximum_segment_size(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1835718BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183571038(a1, a2, a3, a4, (uint64_t (*)(uint64_t))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_1835718E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_connection_timeout(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_18357191C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183571038(a1, a2, a3, a4, (uint64_t (*)(uint64_t))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_183571948@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_persist_timeout(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_18357197C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183571038(a1, a2, a3, a4, (uint64_t (*)(uint64_t))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_1835719A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_retransmit_connection_drop_time(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1835719DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183571038(a1, a2, a3, a4, (uint64_t (*)(uint64_t))nw_tcp_options_set_retransmit_connection_drop_time);
}

BOOL sub_183571A08@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_retransmit_fin_drop(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183571A38(BOOL *a1, uint64_t a2)
{
}

BOOL sub_183571A4C@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_disable_ack_stretching(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183571A7C(BOOL *a1, uint64_t a2)
{
}

BOOL sub_183571A90@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_enable_fast_open(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183571AC0(BOOL *a1, uint64_t a2)
{
}

BOOL sub_183571AD4@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_disable_ecn(*(void **)(*(void *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183571B04(BOOL *a1, uint64_t a2)
{
}

uint64_t type metadata accessor for NWProtocolTCP()
{
  return self;
}

uint64_t method lookup function for NWProtocolTCP.Options(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWProtocolTCP.Options);
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 464))();
}

uint64_t type metadata accessor for NWProtocolTCP.Metadata()
{
  return self;
}

uint64_t method lookup function for NWProtocolTCP.Metadata(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWProtocolTCP.Metadata);
}

uint64_t dispatch thunk of NWProtocolTCP.Metadata.availableReceiveBuffer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolTCP.Metadata.availableSendBuffer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t NWConnection.__allocating_init(to:using:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  sub_183576AC0(a1, a2);
  uint64_t v5 = v4;
  swift_release();
  return v5;
}

uint64_t NWConnection.identifier.getter()
{
  return nw_connection_get_id(*(void **)(v0 + 16));
}

uint64_t sub_183572378(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t NWConnection.ContentContext.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  uint64_t v14 = swift_allocObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t NWConnection.receiveMessage(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_183574320(a1, a2, (uint64_t)&unk_1ECF65248, (uint64_t)sub_1832E5E80, (uint64_t)&block_descriptor_15_0);
}

uint64_t NWConnection.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  uint64_t v2 = sub_183D44AFC();

  return v2;
}

void NWConnection.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183572538(v4, a1);

  os_unfair_lock_unlock(v5);
}

uint64_t sub_183572538@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 72);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(result + 76);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t (*NWConnection.stateUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  int v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_18315EDB8(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0;
  }
  long long v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1834CCB54;
}

double sub_1835725F8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 24);
  uint64_t v4 = (uint64_t *)&v3[4];
  long long v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_18315EDB8(v4, (uint64_t (**)())&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_183572664(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_1834CCB54;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18315ED5C(v1);
  return NWConnection.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t (*NWConnection.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t *)&v3[4];
  long long v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_18315EDB8(v4, v10);
  os_unfair_lock_unlock(v5);
  if (v10[0])
  {
    long long v9 = *(_OWORD *)v10;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = v9;
    long long v7 = sub_1834CCB54;
  }
  else
  {
    long long v7 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v7;
  a1[1] = (uint64_t (*)())v6;
  return sub_1835727C0;
}

uint64_t sub_1835727C0(uint64_t *a1, char a2)
{
  return sub_183573790(a1, a2, NWConnection.stateUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_18315ED5C, sub_1834CCAEC);
}

uint64_t NWConnection.maximumDatagramSize.getter()
{
  return nw_connection_get_maximum_datagram_size(*(nw_connection_t *)(v0 + 16));
}

uint64_t NWConnection.currentPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = nw_connection_copy_current_path(*(nw_connection_t *)(v1 + 16));
  if (v3)
  {
    sub_1831DF470(v3, a1);
    uint64_t v4 = type metadata accessor for NWPath(0);
    long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for NWPath(0);
    long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a1;
    uint64_t v8 = 1;
  }

  return v5(v7, v8, 1, v6);
}

uint64_t (*NWConnection.pathUpdateHandler.getter())(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_183572C8C(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0;
  }
  long long v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_183576C58;
}

double sub_18357297C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  long long v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183572C8C(v4, (uint64_t (**)())&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1835729E8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18357A9DC;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18315ED5C(v1);
  NWConnection.pathUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.pathUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  long long v5 = *(os_unfair_lock_s **)(v2 + 24);
  uint64_t v6 = (uint64_t)&v5[4];
  long long v7 = v5 + 24;
  os_unfair_lock_lock(v5 + 24);
  sub_1834F7090(v6);
  os_unfair_lock_unlock(v7);
  if (a1)
  {
    uint64_t v8 = *(NSObject **)(v2 + 16);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    aBlock[4] = sub_183576C60;
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1832E6CC4;
    aBlock[3] = &block_descriptor_38;
    uint64_t v10 = _Block_copy(aBlock);
    sub_18315ED5C(a1);
    sub_18315ED5C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_path_changed_handler(v8, v10);
    sub_18313D870(a1);
    _Block_release(v10);
    swift_unknownObjectRelease();
    sub_18313D870(a1);
  }
  else
  {
    nw_connection_set_path_changed_handler(*(nw_connection_t *)(v2 + 16), 0);
  }
}

uint64_t sub_183572BDC(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3 = type metadata accessor for NWPath(0);
  MEMORY[0x1F4188790](v3 - 8);
  long long v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = swift_unknownObjectRetain();
  sub_1831DF470(v6, (uint64_t)v5);
  a2(v5);
  return sub_18315E45C((uint64_t)v5, type metadata accessor for NWPath);
}

uint64_t sub_183572C8C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18313D760;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_18315ED5C(v3);
}

uint64_t (*NWConnection.pathUpdateHandler.modify(uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183572C8C(v4, v10);
  os_unfair_lock_unlock(v5);
  if (v10[0])
  {
    long long v9 = *(_OWORD *)v10;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = v9;
    long long v7 = sub_18357A9DC;
  }
  else
  {
    long long v7 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v7;
  a1[1] = (uint64_t (*)(uint64_t))v6;
  return sub_183572DD4;
}

uint64_t sub_183572DD4(uint64_t *a1, char a2)
{
  return sub_183573790(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnection.pathUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_18315ED5C, (uint64_t (*)(uint64_t, uint64_t))sub_18313D870);
}

uint64_t (*NWConnection.viabilityUpdateHandler.getter())(char)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_183573174(v2, (uint64_t (**)(unsigned __int8 *))&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0;
  }
  long long v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_183576C68;
}

double sub_183572EC0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  long long v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183573174(v4, (uint64_t (**)(unsigned __int8 *))&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_183572F2C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_183576C68;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18315ED5C(v1);
  NWConnection.viabilityUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.viabilityUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  long long v5 = *(os_unfair_lock_s **)(v2 + 24);
  uint64_t v6 = (uint64_t)&v5[4];
  long long v7 = v5 + 24;
  os_unfair_lock_lock(v5 + 24);
  sub_183576C6C(v6);
  os_unfair_lock_unlock(v7);
  if (a1)
  {
    uint64_t v8 = *(NSObject **)(v2 + 16);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    aBlock[4] = sub_183576CC8;
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_183573120;
    aBlock[3] = &block_descriptor_51_0;
    uint64_t v10 = _Block_copy(aBlock);
    sub_18315ED5C(a1);
    sub_18315ED5C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_viability_changed_handler(v8, v10);
    sub_18313D870(a1);
    _Block_release(v10);
    swift_unknownObjectRelease();
    sub_18313D870(a1);
  }
  else
  {
    nw_connection_set_viability_changed_handler(*(nw_connection_t *)(v2 + 16), 0);
  }
}

uint64_t sub_183573120(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_183573174@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18357A8F0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return sub_18315ED5C(v3);
}

uint64_t (*NWConnection.viabilityUpdateHandler.modify(uint64_t (**a1)(char)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(char))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183573174(v4, v10);
  os_unfair_lock_unlock(v5);
  if (v10[0])
  {
    long long v9 = *(_OWORD *)v10;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = v9;
    long long v7 = sub_183576C68;
  }
  else
  {
    long long v7 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v7;
  a1[1] = (uint64_t (*)(char))v6;
  return sub_1835732BC;
}

uint64_t sub_1835732BC(uint64_t *a1, char a2)
{
  return sub_183573790(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnection.viabilityUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_1834CCAF0, sub_1834CCAEC);
}

uint64_t (*NWConnection.betterPathUpdateHandler.getter())(char)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_183573608(v2, (uint64_t (**)(unsigned __int8 *))&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0;
  }
  long long v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_183576C68;
}

double sub_1835733A8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  long long v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183573608(v4, (uint64_t (**)(unsigned __int8 *))&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_183573414(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_183576C68;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18315ED5C(v1);
  NWConnection.betterPathUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.betterPathUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  long long v5 = *(os_unfair_lock_s **)(v2 + 24);
  uint64_t v6 = (uint64_t)&v5[4];
  long long v7 = v5 + 24;
  os_unfair_lock_lock(v5 + 24);
  sub_1834F72EC(v6);
  os_unfair_lock_unlock(v7);
  if (a1)
  {
    uint64_t v8 = *(NSObject **)(v2 + 16);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    aBlock[4] = sub_18357A8E0;
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_183573120;
    aBlock[3] = &block_descriptor_65;
    uint64_t v10 = _Block_copy(aBlock);
    sub_18315ED5C(a1);
    sub_18315ED5C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_better_path_available_handler(v8, v10);
    sub_18313D870(a1);
    _Block_release(v10);
    swift_unknownObjectRelease();
    sub_18313D870(a1);
  }
  else
  {
    nw_connection_set_better_path_available_handler(*(nw_connection_t *)(v2 + 16), 0);
  }
}

uint64_t sub_183573608@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18357A8B0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return sub_18315ED5C(v3);
}

uint64_t (*NWConnection.betterPathUpdateHandler.modify(uint64_t (**a1)(char)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(char))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_183573608(v4, v10);
  os_unfair_lock_unlock(v5);
  if (v10[0])
  {
    long long v9 = *(_OWORD *)v10;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = v9;
    long long v7 = sub_183576C68;
  }
  else
  {
    long long v7 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v7;
  a1[1] = (uint64_t (*)(char))v6;
  return sub_183573750;
}

uint64_t sub_183573750(uint64_t *a1, char a2)
{
  return sub_183573790(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnection.betterPathUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_1834CCAF0, sub_1834CCAEC);
}

uint64_t sub_183573790(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t NWConnection.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18315E728(v1 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t NWConnection.parameters.getter()
{
  return swift_retain();
}

uint64_t NWConnection.init(to:using:)(uint64_t a1, uint64_t a2)
{
  sub_183576AC0(a1, a2);
  uint64_t v3 = v2;
  swift_release();
  return v3;
}

uint64_t NWConnection.__allocating_init(host:port:using:)(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  __int16 v11 = *a2;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
  *((void *)v8 + 2) = v9;
  v8[24] = v10;
  *((_WORD *)v8 + 13) = v11;
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  sub_183576AC0((uint64_t)v8, a3);
  uint64_t v13 = v12;
  swift_release();
  return v13;
}

uint64_t NWConnection.__allocating_init(connection:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NWEndpoint();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v22 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void **)(a1 + 16);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = (void *)(v14 + 16);
  long long v16 = (os_unfair_lock_s *)(v14 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v16);
  sub_1834A4678(v15, &v23);
  os_unfair_lock_unlock(v16);
  uint64_t v17 = nw_connection_create_with_connection(v13, v23);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    uint64_t v18 = nw_connection_copy_endpoint(v17);
    sub_18315A830(v18, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      sub_183138A24((uint64_t)v6, qword_1EB266A50);
      return 0;
    }
    else
    {
      sub_18315EE34((uint64_t)v6, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      uint64_t v20 = v22;
      sub_18315E728((uint64_t)v12, v22, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      swift_allocObject();
      uint64_t v19 = sub_18315E310(v20, a2, (uint64_t)v17);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      sub_18315E45C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    }
  }
  else
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v19;
}

uint64_t NWConnection.queue.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_183573CB4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

id sub_183573CB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 64);
  *a2 = v2;
  return v2;
}

Swift::Void __swiftcall NWConnection.forceCancel()()
{
  nw_connection_force_cancel(*(nw_connection_t *)(v0 + 16));
}

Swift::Void __swiftcall NWConnection.cancelCurrentEndpoint()()
{
  nw_connection_cancel_current_endpoint(*(nw_connection_t *)(v0 + 16));
}

Swift::Void __swiftcall NWConnection.restart()()
{
  nw_connection_restart(*(nw_connection_t *)(v0 + 16));
}

uint64_t _s7Network12NWConnectionC2nwSo03OS_C11_connection_pvg_0()
{
  return swift_unknownObjectRetain();
}

uint64_t NWConnection.ContentContext.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWConnection.ContentContext.expirationMilliseconds.getter()
{
  return *(void *)(v0 + 40);
}

double NWConnection.ContentContext.relativePriority.getter()
{
  return *(double *)(v0 + 48);
}

uint64_t NWConnection.ContentContext.antecedent.getter()
{
  return swift_retain();
}

uint64_t NWConnection.ContentContext.isFinal.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_183573D54()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v2 = (uint64_t *)(v1 + 16);
  uint64_t v3 = *(NSObject **)(v0 + 16);
  v7[4] = sub_18356F304;
  v7[5] = v1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = sub_183573F68;
  void v7[3] = &block_descriptor_76;
  uint64_t v4 = _Block_copy(v7);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_content_context_foreach_protocol_metadata(v3, v4);
  _Block_release(v4);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v5 = *v2;
  swift_bridgeObjectRetain();
  swift_release();
  return v5;
}

uint64_t sub_183573E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1835312A8(a2);
  if (result)
  {
    uint64_t v5 = *(void (**)(uint64_t))(result + 96);
    uint64_t v6 = swift_unknownObjectRetain();
    v5(v6);
    swift_beginAccess();
    uint64_t v7 = swift_retain();
    MEMORY[0x185314200](v7);
    if (*(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_183D44E9C();
    sub_183D44EDC();
    sub_183D44E6C();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_183573F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_183573FE4(uint64_t a1)
{
  return sub_1835752D4(a1, (uint64_t (*)(void, void))nw_content_context_copy_protocol_metadata);
}

void NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  uint64_t v15 = sub_183D44BAC();
  long long v16 = nw_content_context_create((const char *)(v15 + 32));
  swift_release();
  *(void *)(v7 + 16) = v16;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  nw_content_context_set_expiration_milliseconds(v16, a3);
  *(double *)(v7 + 48) = a7;
  nw_content_context_set_relative_priority(v16, a7);
  *(unsigned char *)(v7 + 64) = a4;
  nw_content_context_set_is_final(v16, a4 & 1);
  *(void *)(v7 + 56) = a5;
  if (a5)
  {
    uint64_t v17 = *(NSObject **)(a5 + 16);
    swift_retain();
    nw_content_context_set_antecedent(v16, v17);
  }
  if (!a6) {
    goto LABEL_14;
  }
  if (!(a6 >> 62))
  {
    uint64_t v18 = *(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v18) {
      goto LABEL_6;
    }
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    swift_release();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_183D456DC();
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_13;
  }
LABEL_6:
  if (v18 >= 1)
  {
    if ((a6 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v20 = MEMORY[0x1853148B0](i, a6);
        nw_content_context_set_metadata_for_protocol(*(nw_content_context_t *)(v7 + 16), *(nw_protocol_metadata_t *)(v20 + 16));
        swift_unknownObjectRelease();
      }
    }
    else
    {
      uint64_t v21 = (uint64_t *)(a6 + 32);
      uint64_t v22 = *(NSObject **)(v7 + 16);
      do
      {
        uint64_t v23 = *v21++;
        nw_content_context_set_metadata_for_protocol(v22, *(nw_protocol_metadata_t *)(v23 + 16));
        --v18;
      }
      while (v18);
    }
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_183574190(uint64_t a1)
{
  return sub_1834A4A04(a1, (NSObject **)&_nw_content_context_final_send, &qword_1E8F64518);
}

uint64_t static NWConnection.ContentContext.finalMessage.getter()
{
  return sub_1830DC99C(&qword_1E8F62180);
}

uint64_t sub_1835741C8(uint64_t a1)
{
  return sub_1834A4A04(a1, (NSObject **)&_nw_content_context_default_stream, &qword_1E8F64520);
}

uint64_t static NWConnection.ContentContext.defaultStream.getter()
{
  return sub_1830DC99C(&qword_1E8F62188);
}

uint64_t NWConnection.ContentContext.__allocating_init(nw:)(NSObject *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = swift_unknownObjectRetain();
  *(void *)(v2 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v2 + 48) = nw_content_context_get_relative_priority(a1);
  *(unsigned char *)(v2 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v2 + 24) = sub_183D44C9C();
  *(void *)(v2 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  uint64_t v6 = sub_1832E5FFC(v5);
  swift_unknownObjectRelease();
  *(void *)(v2 + 56) = v6;
  return v2;
}

uint64_t NWConnection.ContentContext.init(nw:)(NSObject *a1)
{
  uint64_t v1 = sub_183576FB0(a1);
  swift_unknownObjectRelease();
  return v1;
}

void NWConnection.receiveDiscontiguous(minimumIncompleteLength:maximumLength:completion:)(uint32_t a1, uint32_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t NWConnection.receiveMessageDiscontiguous(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_183574320(a1, a2, (uint64_t)&unk_1ECF654A0, (uint64_t)sub_18357A8E8, (uint64_t)&block_descriptor_88_0);
}

uint64_t sub_183574320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(NSObject **)(v5 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  v14[4] = a4;
  v14[5] = v11;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1107296256;
  v14[2] = sub_1832E5DC4;
  v14[3] = a5;
  uint64_t v12 = _Block_copy(v14);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  return swift_unknownObjectRelease();
}

uint64_t sub_183574400(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(char *, void *, void, unsigned char *))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F62DC0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    sub_183D44A0C();
    uint64_t v11 = sub_183D44A1C();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
  }
  else
  {
    uint64_t v12 = sub_183D44A1C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
  }
  uint64_t v13 = swift_unknownObjectRetain();
  uint64_t v14 = sub_1832E5FFC(v13);
  uint64_t v15 = swift_unknownObjectRetain();
  sub_1832E6D08(v15, (uint64_t)v18);
  a5(v10, v14, a3 & 1, v18);
  swift_release();
  return sub_183138A24((uint64_t)v10, (uint64_t *)&unk_1E8F62DC0);
}

uint64_t NWConnection.receiveFile(at:maximumLength:handler:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(v4 + 16);
  swift_unknownObjectRetain();
  sub_183D4444C();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  v13[4] = sub_183577038;
  v13[5] = v9;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  v13[2] = sub_183574744;
  v13[3] = &block_descriptor_94_0;
  uint64_t v10 = _Block_copy(v13);
  swift_retain();
  swift_release();
  uint64_t v11 = sub_183D44BAC();
  swift_bridgeObjectRelease();
  nw_connection_receive_file_at_path_with_progress(v8, (const char *)(v11 + 32), a2, v10);
  swift_release();
  _Block_release(v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_1835746AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *, uint64_t, unsigned char *))
{
  swift_unknownObjectRetain();
  uint64_t v9 = sub_1832E5FFC(a2);
  uint64_t v10 = swift_unknownObjectRetain();
  sub_1832E6D08(v10, (uint64_t)v12);
  LOBYTE(a5) = a5(a1, v9, a3, v12);
  swift_release();
  return a5 & 1;
}

uint64_t sub_183574744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  LOBYTE(a4) = v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t sub_1835747D8(uint64_t a1, uint64_t (*a2)(unsigned char *))
{
  uint64_t v3 = swift_unknownObjectRetain();
  sub_1832E6D08(v3, (uint64_t)v5);
  return a2(v5);
}

void NWConnection.send(discontiguousContent:contentContext:isComplete:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  if (*a4)
  {
    uint64_t v8 = a4[1];
    uint64_t v9 = *(NSObject **)(v4 + 16);
    sub_18315ED5C(*a4);
    swift_unknownObjectRetain();
    uint64_t v10 = sub_183D449FC();
    uint64_t v11 = *(NSObject **)(a2 + 16);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v7;
    *(void *)(v12 + 24) = v8;
    aBlock[4] = sub_1832E6DE8;
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1832E6C64;
    aBlock[3] = &block_descriptor_100;
    uint64_t v13 = _Block_copy(aBlock);
    sub_18315ED5C(v7);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v9, v10, v11, a3 & 1, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    sub_18313D870(v7);
  }
  else
  {
    uint64_t v14 = *(NSObject **)(v4 + 16);
    swift_unknownObjectRetain();
    uint64_t v15 = sub_183D449FC();
    nw_connection_send_idempotent(v14, v15, *(NSObject **)(a2 + 16), a3 & 1);
    swift_unknownObjectRelease();
  }
}

uint64_t NWConnection.sendFile(at:contentContext:maximumLength:is_complete:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void **)(v6 + 16);
  swift_unknownObjectRetain();
  sub_183D4444C();
  uint64_t v13 = *(void **)(a2 + 16);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = a6;
  v18[4] = sub_183577078;
  v18[5] = v14;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1107296256;
  v18[2] = sub_183574B40;
  v18[3] = &block_descriptor_106;
  uint64_t v15 = _Block_copy(v18);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v16 = sub_183D44BAC();
  swift_bridgeObjectRelease();
  nw_connection_send_file_at_path_with_progress(v12, (const char *)(v16 + 32), v13, a3, a4 & 1, v15);
  swift_release();
  _Block_release(v15);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_183574B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  LOBYTE(a3) = v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  return a3 & 1;
}

void NWConnection.send<A>(content:contentContext:isComplete:completion:)(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  long long v50 = a4;
  uint64_t v41 = a6;
  int v48 = a3;
  uint64_t v49 = a2;
  uint64_t v51 = a1;
  uint64_t v7 = *(void *)(a5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v42 = (char *)&v39 - v10;
  uint64_t v11 = sub_183D4536C();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v44 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v47 = (char *)&v39 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F62DC0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_183D44A1C();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v46(v18, v51, v11);
  uint64_t v43 = v7;
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v45(v18, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
  }
  else
  {
    int v26 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, v26 ^ 1u, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
      NWConnection.send(discontiguousContent:contentContext:isComplete:completion:)((uint64_t)v25, v49, v48 & 1, v50);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      return;
    }
  }
  sub_183138A24((uint64_t)v21, (uint64_t *)&unk_1E8F62DC0);
  uint64_t v28 = v46;
  uint64_t v27 = v47;
  uint64_t v29 = v51;
  v46(v47, v51, v11);
  uint64_t v30 = v45;
  if (v45(v27, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v27, v11);
  }
  else if (swift_dynamicCast())
  {
    uint64_t v31 = v52;
    unint64_t v32 = v53;
    sub_1832E5D6C(v52, v53);
    NWConnection.send(content:contentContext:isComplete:completion:)(v31, v32, v49, v48 & 1, v50);
    sub_1832E5E9C(v31, v32);
    sub_1832E5E9C(v31, v32);
    return;
  }
  int v33 = v44;
  v28(v44, v29, v11);
  if (v30(v33, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v11);
    NWConnection.send(content:contentContext:isComplete:completion:)(0, 0xF000000000000000, v49, v48 & 1, v50);
  }
  else
  {
    uint64_t v35 = v42;
    uint64_t v34 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v33, a5);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v40, v35, a5);
    uint64_t v36 = sub_183D4457C();
    unint64_t v38 = v37;
    NWConnection.send(content:contentContext:isComplete:completion:)(v36, v37, v49, v48 & 1, v50);
    sub_1832E5E9C(v36, v38);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, a5);
  }
}

uint64_t NWConnection.batch(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(NSObject **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v9[4] = sub_1835770F8;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = sub_183575294;
  v9[3] = &block_descriptor_112;
  uint64_t v7 = _Block_copy(v9);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_batch(v5, v7);
  swift_unknownObjectRelease();
  _Block_release(v7);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_183575294(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t NWConnection.metadata(definition:)(uint64_t a1)
{
  return sub_1835752D4(a1, (uint64_t (*)(void, void))nw_connection_copy_protocol_metadata);
}

uint64_t sub_1835752D4(uint64_t a1, uint64_t (*a2)(void, void))
{
  uint64_t result = a2(*(void *)(v2 + 16), *(void *)(a1 + 32));
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = sub_1835312A8(result);
    if (v5)
    {
      return (*(uint64_t (**)(uint64_t))(v5 + 96))(v4);
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t NWConnection.EstablishmentReport.debugDescription.getter()
{
  id v1 = objc_msgSend(*v0, sel_description);
  uint64_t v2 = sub_183D44AFC();

  return v2;
}

double NWConnection.EstablishmentReport.attemptStartedAfterInterval.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.previousAttemptCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NWConnection.EstablishmentReport.usedProxy.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t NWConnection.EstablishmentReport.proxyConfigured.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t NWConnection.EstablishmentReport.proxyEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NWConnection.EstablishmentReport(0) + 40);

  return sub_183577140(v3, a1);
}

void NWConnection.EstablishmentReport.Resolution.source.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

double NWConnection.EstablishmentReport.Resolution.duration.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t NWConnection.EstablishmentReport.Resolution.endpointCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.Resolution.successfulEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  return sub_18315E728(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t NWConnection.EstablishmentReport.Resolution.preferredEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  return sub_18315E728(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

BOOL static NWConnection.EstablishmentReport.Resolution.DNSProtocol.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWConnection.EstablishmentReport.Resolution.DNSProtocol.hash(into:)()
{
  return sub_183D45B0C();
}

uint64_t NWConnection.EstablishmentReport.Resolution.dnsProtocol.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  unsigned int v4 = *(_DWORD *)(v1 + *(int *)(result + 36));
  if (v4 >= 5) {
    LOBYTE(v4) = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t NWConnection.EstablishmentReport.resolutions.getter()
{
  type metadata accessor for NWConnection.EstablishmentReport(0);

  return swift_bridgeObjectRetain();
}

uint64_t NWConnection.EstablishmentReport.Handshake.definition.getter()
{
  return swift_retain();
}

double NWConnection.EstablishmentReport.Handshake.handshakeDuration.getter()
{
  return *(double *)(v0 + 8);
}

double NWConnection.EstablishmentReport.Handshake.handshakeRTT.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.handshakes.getter()
{
  type metadata accessor for NWConnection.EstablishmentReport(0);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1835755B8@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (int *)type metadata accessor for NWConnection.EstablishmentReport(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v23 = v5;
    *(void *)uint64_t v7 = a1;
    uint64_t v8 = swift_unknownObjectRetain_n();
    uint64_t duration_milliseconds = nw_establishment_report_get_duration_milliseconds(v8);
    uint64_t attempt_started_after_milliseconds = nw_establishment_report_get_attempt_started_after_milliseconds(a1);
    v11.i64[0] = duration_milliseconds;
    v11.i64[1] = attempt_started_after_milliseconds;
    *(float64x2_t *)(v7 + 8) = vdivq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
    *((void *)v7 + 3) = nw_establishment_report_get_previous_attempt_count(a1);
    v7[32] = nw_establishment_report_get_used_proxy(a1);
    v7[33] = nw_establishment_report_get_proxy_configured(a1);
    uint64_t v12 = nw_establishment_report_copy_proxy_endpoint(a1);
    sub_18315A830(v12, (uint64_t)&v7[v4[10]]);
    uint64_t v31 = MEMORY[0x1E4FBC860];
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = &v31;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_18357A844;
    *(void *)(v14 + 24) = v13;
    uint64_t v29 = sub_1832FF164;
    uint64_t v30 = v14;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v26 = 1107296256;
    uint64_t v27 = sub_1832FF10C;
    uint64_t v28 = &block_descriptor_189;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    nw_establishment_report_enumerate_resolution_reports(a1, v15);
    _Block_release(v15);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v15)
    {
      __break(1u);
    }
    else
    {
      *(void *)&v7[v4[11]] = v31;
      uint64_t v24 = MEMORY[0x1E4FBC860];
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = &v24;
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = sub_18357A86C;
      *(void *)(v18 + 24) = v17;
      uint64_t v29 = sub_18357A884;
      uint64_t v30 = v18;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v26 = 1107296256;
      uint64_t v27 = sub_183575EF4;
      uint64_t v28 = &block_descriptor_198;
      uint64_t v19 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      nw_establishment_report_enumerate_protocols(a1, v19);
      swift_unknownObjectRelease_n();
      _Block_release(v19);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        *(void *)&v7[v4[12]] = v24;
        swift_bridgeObjectRelease();
        sub_18315EE34((uint64_t)v7, a2, type metadata accessor for NWConnection.EstablishmentReport);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v23 + 56))(a2, 0, 1, v4);
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v5 + 56);
    return v21(a2, 1, 1, v4);
  }
  return result;
}

uint64_t sub_183575A00(NSObject *a1, unint64_t *a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = (int *)type metadata accessor for NWConnection.EstablishmentReport.Resolution(0);
  uint64_t v34 = *((void *)v9 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v33 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (double *)((char *)&v29 - v12);
  nw_report_resolution_source_t source = nw_resolution_report_get_source(a1);
  int v15 = source == nw_report_resolution_source_cache;
  if (source == nw_report_resolution_source_expired_cache) {
    int v15 = 2;
  }
  int v32 = v15;
  uint64_t milliseconds = nw_resolution_report_get_milliseconds(a1);
  uint32_t endpoint_count = nw_resolution_report_get_endpoint_count(a1);
  nw_resolution_report_copy_successful_endpoint(a1);
  nw_resolution_report_copy_preferred_endpoint(a1);
  nw_report_resolution_protocol_t protocol = nw_resolution_report_get_protocol(a1);
  uint64_t v17 = swift_unknownObjectRetain();
  sub_18315A830(v17, (uint64_t)v8);
  uint64_t v18 = type metadata accessor for NWEndpoint();
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t result = v19(v8, 1, v18);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v21 = swift_unknownObjectRetain();
  sub_18315A830(v21, (uint64_t)v6);
  uint64_t result = v19(v6, 1, v18);
  if (result == 1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  double v22 = (double)milliseconds / 1000.0;
  *(unsigned char *)uint64_t v13 = v32;
  v13[1] = v22;
  *((void *)v13 + 2) = endpoint_count;
  sub_18315EE34((uint64_t)v8, (uint64_t)v13 + v9[7], (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  sub_18315EE34((uint64_t)v6, (uint64_t)v13 + v9[8], (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  *(_DWORD *)((char *)v13 + v9[9]) = protocol;
  uint64_t v23 = v33;
  sub_18315E728((uint64_t)v13, v33, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  uint64_t v24 = v35;
  unint64_t v25 = *v35;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v24 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v25 = sub_1834B4EE0(0, *(void *)(v25 + 16) + 1, 1, v25);
    *uint64_t v24 = v25;
  }
  unint64_t v28 = *(void *)(v25 + 16);
  unint64_t v27 = *(void *)(v25 + 24);
  if (v28 >= v27 >> 1)
  {
    unint64_t v25 = sub_1834B4EE0(v27 > 1, v28 + 1, 1, v25);
    *uint64_t v24 = v25;
  }
  *(void *)(v25 + 16) = v28 + 1;
  sub_18315EE34(v23, v25+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v28, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_18315E45C((uint64_t)v13, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  return 1;
}

uint64_t sub_183575DB0(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  type metadata accessor for NWProtocolDefinition();
  uint64_t v8 = (void *)swift_allocObject();
  v8[4] = a1;
  id v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v10 = sub_183D44AFC();
  uint64_t v12 = v11;

  v8[2] = v10;
  void v8[3] = v12;
  uint64_t v13 = *a4;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = sub_1834B4F14(0, v13[2] + 1, 1, v13);
    *a4 = v13;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1) {
    uint64_t v13 = sub_1834B4F14((void *)(v15 > 1), v16 + 1, 1, v13);
  }
  v17.i64[0] = a2;
  v17.i64[1] = a3;
  v13[2] = v16 + 1;
  uint64_t v18 = &v13[3 * v16];
  v18[4] = v8;
  *(float64x2_t *)(v18 + 5) = vdivq_f64(vcvtq_f64_u64(v17), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
  *a4 = v13;
  swift_release();
  return 1;
}

uint64_t sub_183575EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  LOBYTE(a4) = v7(a2, a3, a4);
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t _s7Network18ProxyConfigurationV16debugDescriptionSSvg_0()
{
  id v1 = objc_msgSend(*v0, sel_description);
  uint64_t v2 = sub_183D44AFC();

  return v2;
}

uint64_t NWConnection.requestEstablishmentReport(queue:completion:)(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(NSObject **)(v3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  v11[4] = sub_1835771C8;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = sub_1832E6C64;
  v11[3] = &block_descriptor_118;
  id v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_access_establishment_report(v7, a1, v9);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

uint64_t sub_1835760B0(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64638);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = swift_unknownObjectRetain();
  sub_1835755B8(v6, (uint64_t)v5);
  a2(v5);
  return sub_183138A24((uint64_t)v5, &qword_1E8F64638);
}

uint64_t NWConnection.DataTransferReport.debugDescription.getter()
{
  id v1 = objc_msgSend(*v0, sel_description);
  uint64_t v2 = sub_183D44AFC();

  return v2;
}

double NWConnection.DataTransferReport.duration.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t NWConnection.DataTransferReport.PathReport.interface.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

void NWConnection.DataTransferReport.PathReport.radioType.getter(char *a1@<X8>)
{
  if (*v1)
  {
    uint64_t v3 = (void *)swift_unknownObjectRetain();
    uint64_t radio_type = nw_interface_get_radio_type(v3);
    sub_18350C328(radio_type, a1);
    swift_unknownObjectRelease();
  }
  else
  {
    *a1 = 24;
  }
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedIPPacketCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentIPPacketCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportByteCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportDuplicateByteCount.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportOutOfOrderByteCount.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentTransportByteCount.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t NWConnection.DataTransferReport.PathReport.retransmittedTransportByteCount.getter()
{
  return *(void *)(v0 + 56);
}

double NWConnection.DataTransferReport.PathReport.transportSmoothedRTT.getter()
{
  return *(double *)(v0 + 64);
}

double NWConnection.DataTransferReport.PathReport.transportMinimumRTT.getter()
{
  return *(double *)(v0 + 72);
}

double NWConnection.DataTransferReport.PathReport.transportRTTVariance.getter()
{
  return *(double *)(v0 + 80);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedApplicationByteCount.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentApplicationByteCount.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t NWConnection.DataTransferReport.aggregatePathReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 96);
  long long v3 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 80);
  *(void *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

uint64_t NWConnection.DataTransferReport.pathReports.getter()
{
  return swift_bridgeObjectRetain();
}

double sub_1835762D4@<D0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = swift_unknownObjectRetain();
  uint64_t duration_milliseconds = nw_data_transfer_report_get_duration_milliseconds(v3);
  uint32_t path_count = nw_data_transfer_report_get_path_count(a1);
  if (path_count)
  {
    uint32_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      nw_interface_t v6 = nw_data_transfer_report_copy_path_interface(a1, v4);
      uint64_t received_ip_packet_count = nw_data_transfer_report_get_received_ip_packet_count(a1, v4);
      uint64_t sent_ip_packet_count = nw_data_transfer_report_get_sent_ip_packet_count(a1, v4);
      uint64_t received_transport_byte_count = nw_data_transfer_report_get_received_transport_byte_count(a1, v4);
      uint64_t received_transport_duplicate_byte_count = nw_data_transfer_report_get_received_transport_duplicate_byte_count(a1, v4);
      uint64_t received_transport_out_of_order_byte_count = nw_data_transfer_report_get_received_transport_out_of_order_byte_count(a1, v4);
      uint64_t sent_transport_byte_count = nw_data_transfer_report_get_sent_transport_byte_count(a1, v4);
      uint64_t sent_transport_retransmitted_byte_count = nw_data_transfer_report_get_sent_transport_retransmitted_byte_count(a1, v4);
      transport_smoothed_rtt_uint64_t milliseconds = nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(a1, v4);
      transport_minimum_rtt_uint64_t milliseconds = nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(a1, v4);
      uint64_t transport_rtt_variance = nw_data_transfer_report_get_transport_rtt_variance(a1, v4);
      uint64_t received_application_byte_count = nw_data_transfer_report_get_received_application_byte_count(a1, v4);
      uint64_t sent_application_byte_count = nw_data_transfer_report_get_sent_application_byte_count(a1, v4);
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_1834B503C(0, v5[2] + 1, 1, v5);
      }
      unint64_t v13 = v5[2];
      unint64_t v12 = v5[3];
      uint64_t v14 = v5;
      if (v13 >= v12 >> 1) {
        uint64_t v14 = sub_1834B503C((void *)(v12 > 1), v13 + 1, 1, v5);
      }
      v14[2] = v13 + 1;
      uint64_t v5 = v14;
      unint64_t v15 = (double *)&v14[13 * v13];
      *((void *)v15 + 4) = v6;
      *((void *)v15 + 5) = received_ip_packet_count;
      *((void *)v15 + 6) = sent_ip_packet_count;
      *((void *)v15 + 7) = received_transport_byte_count;
      *((void *)v15 + 8) = received_transport_duplicate_byte_count;
      *((void *)v15 + 9) = received_transport_out_of_order_byte_count;
      *((void *)v15 + 10) = sent_transport_byte_count;
      *((void *)v15 + 11) = sent_transport_retransmitted_byte_count;
      v15[12] = (double)transport_smoothed_rtt_milliseconds / 1000.0;
      v15[13] = (double)transport_minimum_rtt_milliseconds / 1000.0;
      v15[14] = (double)transport_rtt_variance / 1000.0;
      ++v4;
      *((void *)v15 + 15) = received_application_byte_count;
      *((void *)v15 + 16) = sent_application_byte_count;
      swift_unknownObjectRelease();
    }
    while (path_count != v4);
    nw_interface_t v39 = nw_data_transfer_report_copy_path_interface(a1, 0xFFFFFFFF);
    uint64_t v37 = nw_data_transfer_report_get_received_ip_packet_count(a1, 0xFFFFFFFF);
    uint64_t v16 = nw_data_transfer_report_get_sent_ip_packet_count(a1, 0xFFFFFFFF);
    uint64_t v17 = nw_data_transfer_report_get_received_transport_byte_count(a1, 0xFFFFFFFF);
    uint64_t v18 = nw_data_transfer_report_get_received_transport_duplicate_byte_count(a1, 0xFFFFFFFF);
    uint64_t v19 = nw_data_transfer_report_get_received_transport_out_of_order_byte_count(a1, 0xFFFFFFFF);
    uint64_t v20 = nw_data_transfer_report_get_sent_transport_byte_count(a1, 0xFFFFFFFF);
    uint64_t v21 = nw_data_transfer_report_get_sent_transport_retransmitted_byte_count(a1, 0xFFFFFFFF);
    double v22 = (double)nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(a1, 0xFFFFFFFF) / 1000.0;
    double v23 = (double)nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(a1, 0xFFFFFFFF) / 1000.0;
    double v24 = (double)nw_data_transfer_report_get_transport_rtt_variance(a1, 0xFFFFFFFF) / 1000.0;
    uint64_t v25 = nw_data_transfer_report_get_received_application_byte_count(a1, 0xFFFFFFFF);
    uint64_t v26 = nw_data_transfer_report_get_sent_application_byte_count(a1, 0xFFFFFFFF);
  }
  else
  {
    uint64_t v37 = 0;
    nw_interface_t v39 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    double v22 = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_unknownObjectRelease();
  *(void *)a2 = a1;
  double result = (double)duration_milliseconds / 1000.0;
  *(double *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v39;
  *(void *)(a2 + 24) = v37;
  *(void *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v20;
  *(void *)(a2 + 72) = v21;
  *(double *)(a2 + 80) = v22;
  *(double *)(a2 + 88) = v23;
  *(double *)(a2 + 96) = v24;
  *(void *)(a2 + 104) = v25;
  *(void *)(a2 + 112) = v26;
  *(void *)(a2 + 120) = v5;
  return result;
}

void sub_183576698(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(NSObject **)(v3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  v10[4] = sub_1835771D0;
  v10[5] = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  v10[2] = sub_1832E6CC4;
  v10[3] = &block_descriptor_124;
  id v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  nw_data_transfer_report_collect(v7, a1, v9);
  _Block_release(v9);
}

uint64_t sub_183576784(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v3 = swift_unknownObjectRetain();
  sub_1835762D4(v3, (uint64_t)v6);
  v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  v5[0] = v6[0];
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  a2(v5);
  return sub_18357A7E8((uint64_t)v6);
}

uint64_t NWConnection.PendingDataTransferReport.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWConnection.PendingDataTransferReport.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t NWConnection.startDataTransferReport()()
{
  nw_data_transfer_report_t new_data_transfer_report = nw_connection_create_new_data_transfer_report(*(nw_connection_t *)(v0 + 16));
  type metadata accessor for NWConnection.PendingDataTransferReport();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = new_data_transfer_report;
  return result;
}

uint64_t NWConnection.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_18315E45C(v0 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  swift_release();
  return v0;
}

uint64_t NWConnection.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_18315E45C(v0 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t _s7Network12NWConnectionC5StateO2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  unint64_t v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  unsigned int v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1)
    {
      switch(v3)
      {
        case 0x8000000001uLL:
          uint64_t v12 = v4 & 0xFFFFFFFFFFLL;
          uint64_t v13 = 1;
          break;
        case 0x8000000002uLL:
          uint64_t v12 = v4 & 0xFFFFFFFFFFLL;
          uint64_t v13 = 2;
          break;
        case 0x8000000003uLL:
          uint64_t v12 = v4 & 0xFFFFFFFFFFLL;
          uint64_t v13 = 3;
          break;
        default:
          return (v4 & 0xFFFFFFFFFFLL) == 0x8000000000;
      }
      return v12 == (v13 & 0xFFFF0000FFFFFFFFLL | 0x8000000000);
    }
    if (((v4 >> 38) & 3) != 1) {
      return 0;
    }
    uint64_t v6 = HIDWORD(v3) & 0x3F;
    uint64_t v7 = HIDWORD(v4) & 0x3F;
    if (v6)
    {
      if (v6 == 1) {
        return v7 == 1 && v3 == *a2;
      }
      return v7 == 2 && v3 == *a2;
    }
LABEL_22:
    if (!v7)
    {
      int v10 = sub_183D449BC();
      if (v10 == sub_183D449BC()) {
        return 1;
      }
    }
    return 0;
  }
  if (((v4 >> 38) & 3) != 0) {
    return 0;
  }
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3)) {
    goto LABEL_22;
  }
  if (HIDWORD(v3) != 1) {
    return v7 == 2 && v3 == *a2;
  }
  return v7 == 1 && v3 == *a2;
}

void sub_183576AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61E68);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)(v6 + 80) = 0;
  *(_DWORD *)(v6 + 88) = 0;
  *(_WORD *)(v6 + 92) = 128;
  *(void *)(v2 + 24) = v6;
  sub_18315E728(a1, v2 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  *(void *)(v2 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) = a2;
  swift_retain();
  nw_endpoint_t v7 = NWEndpoint.nw.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = *(os_unfair_lock_s **)(a2 + 16);
    int v10 = v9 + 4;
    uint64_t v11 = v9 + 6;
    os_unfair_lock_lock(v9 + 6);
    sub_1834A4678(v10, &parameters);
    os_unfair_lock_unlock(v11);
    nw_connection_t v12 = nw_connection_create(v8, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_18315E45C(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    *(void *)(v3 + 16) = v12;
  }
  else
  {
    __break(1u);
    os_unfair_lock_unlock(0);
    __break(1u);
  }
}

uint64_t sub_183576C10()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_183576C58(uint64_t a1)
{
  return sub_18350D6F0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_183576C60(uint64_t a1)
{
  return sub_183572BDC(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_183576C6C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_18315ED5C(v4);
  uint64_t result = sub_18313D870(v5);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  return result;
}

uint64_t sub_183576CC8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _s7Network12NWConnectionCyACSgSo16OS_nw_connection_pcfC_0(NSObject *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  nw_connection_t v12 = (char *)&v21 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v21 - v13;
  unint64_t v15 = nw_connection_copy_endpoint(a1);
  sub_18315A830(v15, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
  {
    sub_183138A24((uint64_t)v4, qword_1EB266A50);
    swift_unknownObjectRelease();
    return 0;
  }
  else
  {
    sub_18315EE34((uint64_t)v4, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    sub_18315EE34((uint64_t)v12, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    nw_parameters_t v17 = nw_connection_copy_parameters(a1);
    type metadata accessor for NWParameters();
    uint64_t v18 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
    uint64_t v19 = swift_allocObject();
    *(_DWORD *)(v19 + 24) = 0;
    *(void *)(v19 + 16) = v17;
    *(void *)(v18 + 16) = v19;
    sub_18315E728((uint64_t)v14, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for NWConnection(0);
    swift_allocObject();
    uint64_t v16 = sub_18315E310((uint64_t)v9, v18, (uint64_t)a1);
    swift_release();
    swift_unknownObjectRelease();
    sub_18315E45C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }
  return v16;
}

uint64_t sub_183576F78()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_183576FB0(NSObject *a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v3 = swift_unknownObjectRetain();
  *(void *)(v1 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v1 + 48) = nw_content_context_get_relative_priority(a1);
  *(unsigned char *)(v1 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v1 + 24) = sub_183D44C9C();
  *(void *)(v1 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  *(void *)(v1 + 56) = sub_1832E5FFC(v5);
  return v1;
}

uint64_t sub_18357701C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_183574400(a1, a2, a3, a4, *(void (**)(char *, void *, void, unsigned char *))(v4 + 16));
}

uint64_t sub_183577038(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  return sub_1835746AC(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, void *, uint64_t, unsigned char *))(v4 + 16));
}

uint64_t sub_183577040()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_183577078(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(v3 + 16);
  swift_unknownObjectRetain();
  sub_1832E6D08(a3, (uint64_t)v9);
  return v7(a1, a2, v9) & 1;
}

uint64_t sub_1835770E8()
{
  return swift_deallocObject();
}

uint64_t sub_1835770F8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F64540);
}

uint64_t sub_183577140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport.Resolution(uint64_t a1)
{
  return sub_18315A7F8(a1, qword_1E8F645B8);
}

uint64_t sub_1835771C8(uint64_t a1)
{
  return sub_1835760B0(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1835771D0(uint64_t a1)
{
  return sub_183576784(a1, *(void (**)(_OWORD *))(v1 + 16));
}

uint64_t type metadata accessor for NWConnection.PendingDataTransferReport()
{
  return self;
}

unint64_t sub_183577200()
{
  unint64_t result = qword_1E8F64528;
  if (!qword_1E8F64528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64528);
  }
  return result;
}

unint64_t sub_183577258()
{
  unint64_t result = qword_1E8F64530;
  if (!qword_1E8F64530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64530);
  }
  return result;
}

uint64_t sub_1835772CC()
{
  return type metadata accessor for NWConnection(0);
}

uint64_t method lookup function for NWConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWConnection);
}

uint64_t dispatch thunk of NWConnection.__allocating_init(to:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t method lookup function for NWConnection.ContentContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWConnection.ContentContext);
}

uint64_t dispatch thunk of NWConnection.ContentContext.nw.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.protocolMetadata.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.__allocating_init(nw:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t sub_1835773B0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for NWConnection.SendCompletion(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for NWConnection.SendCompletion(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24) = a2[3];
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    uint64_t v8 = a3[10];
    id v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NWEndpoint();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_unknownObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v19 = *((void *)v10 + 1);
          *id v9 = *(void *)v10;
          v9[1] = v19;
          uint64_t v20 = *((void *)v10 + 3);
          v9[2] = *((void *)v10 + 2);
          v9[3] = v20;
          uint64_t v21 = *((void *)v10 + 5);
          v9[4] = *((void *)v10 + 4);
          v9[5] = v21;
          uint64_t v22 = *((void *)v10 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v22 != 1) {
            swift_unknownObjectRetain();
          }
          void v9[6] = v22;
          break;
        case 2u:
          uint64_t v17 = *((void *)v10 + 1);
          *id v9 = *(void *)v10;
          v9[1] = v17;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v18 = sub_183D4447C();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v9, v10, v18);
          break;
        case 4u:
          *id v9 = *(void *)v10;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v15 = *((void *)v10 + 1);
          uint64_t v26 = *(void *)v10;
          uint64_t v16 = *((void *)v10 + 2);
          char v25 = v10[24];
          sub_18315E9E4(*(void *)v10, v15, v16, v25);
          *id v9 = v26;
          v9[1] = v15;
          v9[2] = v16;
          *((unsigned char *)v9 + 24) = v25;
          *((_WORD *)v9 + 13) = *((_WORD *)v10 + 13);
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v23 = a3[12];
    *(void *)(v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(void *)(v7 + v23) = *(uint64_t *)((char *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_18315E658(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(unsigned char *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 48) != 1) {
          goto LABEL_11;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v7 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
        break;
      case 4u:
LABEL_11:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v15 = *((void *)v8 + 1);
        *uint64_t v7 = *(void *)v8;
        v7[1] = v15;
        uint64_t v16 = *((void *)v8 + 3);
        v7[2] = *((void *)v8 + 2);
        void v7[3] = v16;
        uint64_t v17 = *((void *)v8 + 5);
        v7[4] = *((void *)v8 + 4);
        v7[5] = v17;
        uint64_t v18 = *((void *)v8 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 != 1) {
          swift_unknownObjectRetain();
        }
        void v7[6] = v18;
        break;
      case 2u:
        uint64_t v19 = *((void *)v8 + 1);
        *uint64_t v7 = *(void *)v8;
        v7[1] = v19;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v20 = sub_183D4447C();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v7, v8, v20);
        break;
      case 4u:
        *uint64_t v7 = *(void *)v8;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v13 = *((void *)v8 + 1);
        uint64_t v24 = *(void *)v8;
        uint64_t v14 = *((void *)v8 + 2);
        char v23 = v8[24];
        sub_18315E9E4(*(void *)v8, v13, v14, v23);
        *uint64_t v7 = v24;
        v7[1] = v13;
        v7[2] = v14;
        *((unsigned char *)v7 + 24) = v23;
        *((_WORD *)v7 + 13) = *((_WORD *)v8 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v21 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = a3[10];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *(void *)(v8 + 8);
          *(void *)(v7 + 16) = *(void *)(v8 + 16);
          *(void *)(v7 + 24) = *(void *)(v8 + 24);
          *(void *)(v7 + 32) = *(void *)(v8 + 32);
          *(void *)(v7 + 40) = *(void *)(v8 + 40);
          uint64_t v21 = *(void *)(v8 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v21 != 1) {
            swift_unknownObjectRetain();
          }
          *(void *)(v7 + 48) = v21;
          break;
        case 2u:
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *(void *)(v8 + 8);
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v22 = sub_183D4447C();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v7, v8, v22);
          break;
        case 4u:
          *(void *)uint64_t v7 = *(void *)v8;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v14 = *(void *)(v8 + 8);
          uint64_t v27 = *(void *)v8;
          uint64_t v15 = *(void *)(v8 + 16);
          char v26 = *(unsigned char *)(v8 + 24);
          sub_18315E9E4(*(void *)v8, v14, v15, v26);
          *(void *)uint64_t v7 = v27;
          *(void *)(v7 + 8) = v14;
          *(void *)(v7 + 16) = v15;
          *(unsigned char *)(v7 + 24) = v26;
          *(_WORD *)(v7 + 26) = *(_WORD *)(v8 + 26);
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_18;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
    memcpy((void *)v7, (const void *)v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_18;
  }
  if (v13)
  {
    sub_18315E45C(v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_18315E45C(v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *(void *)(v8 + 8);
        *(void *)(v7 + 16) = *(void *)(v8 + 16);
        *(void *)(v7 + 24) = *(void *)(v8 + 24);
        *(void *)(v7 + 32) = *(void *)(v8 + 32);
        *(void *)(v7 + 40) = *(void *)(v8 + 40);
        uint64_t v25 = *(void *)(v8 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v25 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(v7 + 48) = v25;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *(void *)(v8 + 8);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v24 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v7, v8, v24);
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(void *)uint64_t v7 = *(void *)v8;
        swift_unknownObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        uint64_t v17 = *(void *)v8;
        uint64_t v18 = *(void *)(v8 + 8);
        uint64_t v19 = *(void *)(v8 + 16);
        char v20 = *(unsigned char *)(v8 + 24);
        sub_18315E9E4(*(void *)v8, v18, v19, v20);
        *(void *)uint64_t v7 = v17;
        *(void *)(v7 + 8) = v18;
        *(void *)(v7 + 16) = v19;
        *(unsigned char *)(v7 + 24) = v20;
        *(_WORD *)(v7 + 26) = *(_WORD *)(v8 + 26);
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_18:
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NWEndpoint();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v13 = sub_183D4447C();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(v11 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_18315E45C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v16 = sub_183D4447C();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32))(v7, v8, v16);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      size_t v15 = *(void *)(v10 + 64);
      goto LABEL_8;
    }
    sub_18315E45C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
LABEL_7:
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50) - 8) + 64);
LABEL_8:
    memcpy(v7, v8, v15);
    goto LABEL_14;
  }
  if (v13) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v14 = sub_183D4447C();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32))(v7, v8, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(v10 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_14:
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18357851C);
}

uint64_t sub_18357851C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835785E4);
}

void *sub_1835785E4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 40);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_183578690()
{
  sub_1835197A0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v7 = a3[7];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v16 = v9[1];
        *(void *)uint64_t v8 = *v9;
        *(void *)(v8 + 8) = v16;
        uint64_t v17 = v9[3];
        *(void *)(v8 + 16) = v9[2];
        *(void *)(v8 + 24) = v17;
        uint64_t v18 = v9[5];
        *(void *)(v8 + 32) = v9[4];
        *(void *)(v8 + 40) = v18;
        uint64_t v19 = v9[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v19 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(v8 + 48) = v19;
        break;
      case 2u:
        uint64_t v14 = v9[1];
        *(void *)uint64_t v8 = *v9;
        *(void *)(v8 + 8) = v14;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v15 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
        break;
      case 4u:
        *(void *)uint64_t v8 = *v9;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v12 = v9[2];
        char v33 = *((unsigned char *)v9 + 24);
        sub_18315E9E4(*v9, v11, v12, v33);
        *(void *)uint64_t v8 = v10;
        *(void *)(v8 + 8) = v11;
        *(void *)(v8 + 16) = v12;
        *(unsigned char *)(v8 + 24) = v33;
        *(_WORD *)(v8 + 26) = *((_WORD *)v9 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = a3[8];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v28 = v22[1];
        *(void *)uint64_t v21 = *v22;
        *((void *)v21 + 1) = v28;
        uint64_t v29 = v22[3];
        *((void *)v21 + 2) = v22[2];
        *((void *)v21 + 3) = v29;
        uint64_t v30 = v22[5];
        *((void *)v21 + 4) = v22[4];
        *((void *)v21 + 5) = v30;
        uint64_t v31 = v22[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v31 != 1) {
          swift_unknownObjectRetain();
        }
        *((void *)v21 + 6) = v31;
        break;
      case 2u:
        uint64_t v26 = v22[1];
        *(void *)uint64_t v21 = *v22;
        *((void *)v21 + 1) = v26;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v27 = sub_183D4447C();
        (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v27 - 8) + 16))(v21, v22, v27);
        break;
      case 4u:
        *(void *)uint64_t v21 = *v22;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v23 = *v22;
        uint64_t v24 = v22[1];
        uint64_t v25 = v22[2];
        char v34 = *((unsigned char *)v22 + 24);
        sub_18315E9E4(*v22, v24, v25, v34);
        *(void *)uint64_t v21 = v23;
        *((void *)v21 + 1) = v24;
        *((void *)v21 + 2) = v25;
        v21[24] = v34;
        *((_WORD *)v21 + 13) = *((_WORD *)v22 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
    *(_DWORD *)((char *)v4 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  }
  return v4;
}

void destroy for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for NWEndpoint();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_18315E658(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(unsigned char *)(v4 + 24));
      break;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 48) != 1) {
        goto LABEL_7;
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v5 = sub_183D4447C();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      break;
    case 4u:
LABEL_7:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = *(void *)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v9 = *(void *)(v6 + 16);
      char v10 = *(unsigned char *)(v6 + 24);
      sub_18315E658(v7, v8, v9, v10);
      break;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v6 + 48) != 1) {
        goto LABEL_20;
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v11 = sub_183D4447C();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      v12(v6, v11);
      break;
    case 4u:
LABEL_20:
      swift_unknownObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = (uint64_t *)(a2 + v6);
  type metadata accessor for NWEndpoint();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = v8[1];
      *(void *)uint64_t v7 = *v8;
      *(void *)(v7 + 8) = v13;
      uint64_t v14 = v8[3];
      *(void *)(v7 + 16) = v8[2];
      *(void *)(v7 + 24) = v14;
      uint64_t v15 = v8[5];
      *(void *)(v7 + 32) = v8[4];
      *(void *)(v7 + 40) = v15;
      uint64_t v16 = v8[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v16 != 1) {
        swift_unknownObjectRetain();
      }
      *(void *)(v7 + 48) = v16;
      break;
    case 2u:
      uint64_t v17 = v8[1];
      *(void *)uint64_t v7 = *v8;
      *(void *)(v7 + 8) = v17;
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v18 = sub_183D4447C();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16))(v7, v8, v18);
      break;
    case 4u:
      *(void *)uint64_t v7 = *v8;
      swift_unknownObjectRetain();
      break;
    default:
      uint64_t v33 = v3;
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v11 = v8[2];
      char v12 = *((unsigned char *)v8 + 24);
      sub_18315E9E4(*v8, v10, v11, v12);
      *(void *)uint64_t v7 = v9;
      *(void *)(v7 + 8) = v10;
      uint64_t v3 = v33;
      *(void *)(v7 + 16) = v11;
      *(unsigned char *)(v7 + 24) = v12;
      *(_WORD *)(v7 + 26) = *((_WORD *)v8 + 13);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = *(int *)(v3 + 32);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v26 = v21[1];
      *(void *)uint64_t v20 = *v21;
      *(void *)(v20 + 8) = v26;
      uint64_t v27 = v21[3];
      *(void *)(v20 + 16) = v21[2];
      *(void *)(v20 + 24) = v27;
      uint64_t v28 = v21[5];
      *(void *)(v20 + 32) = v21[4];
      *(void *)(v20 + 40) = v28;
      uint64_t v29 = v21[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v29 != 1) {
        swift_unknownObjectRetain();
      }
      *(void *)(v20 + 48) = v29;
      break;
    case 2u:
      uint64_t v30 = v21[1];
      *(void *)uint64_t v20 = *v21;
      *(void *)(v20 + 8) = v30;
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v31 = sub_183D4447C();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v31 - 8) + 16))(v20, v21, v31);
      break;
    case 4u:
      *(void *)uint64_t v20 = *v21;
      swift_unknownObjectRetain();
      break;
    default:
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v34 = v3;
      uint64_t v24 = v21[2];
      char v25 = *((unsigned char *)v21 + 24);
      sub_18315E9E4(*v21, v23, v24, v25);
      *(void *)uint64_t v20 = v22;
      *(void *)(v20 + 8) = v23;
      *(void *)(v20 + 16) = v24;
      uint64_t v3 = v34;
      *(unsigned char *)(v20 + 24) = v25;
      *(_WORD *)(v20 + 26) = *((_WORD *)v21 + 13);
      break;
  }
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)(a1 + *(int *)(v3 + 36)) = *(_DWORD *)(a2 + *(int *)(v3 + 36));
  return a1;
}

uint64_t assignWithCopy for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
    uint64_t v6 = a3[7];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t *)(a2 + v6);
    sub_18315E45C(a1 + v6, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)uint64_t v7 = *v8;
        *(void *)(v7 + 8) = v8[1];
        *(void *)(v7 + 16) = v8[2];
        *(void *)(v7 + 24) = v8[3];
        *(void *)(v7 + 32) = v8[4];
        *(void *)(v7 + 40) = v8[5];
        uint64_t v13 = v8[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v13 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(v7 + 48) = v13;
        break;
      case 2u:
        *(void *)uint64_t v7 = *v8;
        *(void *)(v7 + 8) = v8[1];
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v12 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v8, v12);
        break;
      case 4u:
        *(void *)uint64_t v7 = *v8;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v9 = *v8;
        uint64_t v10 = v8[1];
        uint64_t v11 = v8[2];
        char v23 = *((unsigned char *)v8 + 24);
        sub_18315E9E4(*v8, v10, v11, v23);
        *(void *)uint64_t v7 = v9;
        *(void *)(v7 + 8) = v10;
        *(void *)(v7 + 16) = v11;
        *(unsigned char *)(v7 + 24) = v23;
        *(_WORD *)(v7 + 26) = *((_WORD *)v8 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[8];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = (uint64_t *)(a2 + v14);
    sub_18315E45C(a1 + v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)uint64_t v15 = *v16;
        *(void *)(v15 + 8) = v16[1];
        *(void *)(v15 + 16) = v16[2];
        *(void *)(v15 + 24) = v16[3];
        *(void *)(v15 + 32) = v16[4];
        *(void *)(v15 + 40) = v16[5];
        uint64_t v21 = v16[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v21 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(v15 + 48) = v21;
        break;
      case 2u:
        *(void *)uint64_t v15 = *v16;
        *(void *)(v15 + 8) = v16[1];
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v20 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16))(v15, v16, v20);
        break;
      case 4u:
        *(void *)uint64_t v15 = *v16;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        uint64_t v19 = v16[2];
        char v24 = *((unsigned char *)v16 + 24);
        sub_18315E9E4(*v16, v18, v19, v24);
        *(void *)uint64_t v15 = v17;
        *(void *)(v15 + 8) = v18;
        *(void *)(v15 + 16) = v19;
        *(unsigned char *)(v15 + 24) = v24;
        *(_WORD *)(v15 + 26) = *((_WORD *)v16 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v10 = sub_183D4447C();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v14 = sub_183D4447C();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v9 - 8) + 64));
  }
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
    uint64_t v6 = a3[7];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    sub_18315E45C(a1 + v6, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t v9 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v10 = sub_183D4447C();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    uint64_t v11 = a3[8];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_18315E45C(a1 + v11, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v14 = sub_183D4447C();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_183579704);
}

uint64_t sub_183579704(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *a1;
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for NWEndpoint();
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 28)];
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835797C0);
}

unsigned char *sub_1835797C0(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *unint64_t result = a2 + 2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 28)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_183579864()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution.Source(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835799E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Resolution.Source()
{
  return &type metadata for NWConnection.EstablishmentReport.Resolution.Source;
}

unsigned char *storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution.DNSProtocol(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x183579AECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Resolution.DNSProtocol()
{
  return &type metadata for NWConnection.EstablishmentReport.Resolution.DNSProtocol;
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport.Handshake(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for NWConnection.EstablishmentReport.Handshake()
{
  return swift_release();
}

void *assignWithCopy for NWConnection.EstablishmentReport.Handshake(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport.Handshake(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport.Handshake(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Handshake(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Handshake()
{
  return &type metadata for NWConnection.EstablishmentReport.Handshake;
}

uint64_t destroy for NWConnection.DataTransferReport()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWConnection.DataTransferReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NWConnection.DataTransferReport(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for NWConnection.DataTransferReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.DataTransferReport(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.DataTransferReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.DataTransferReport()
{
  return &type metadata for NWConnection.DataTransferReport;
}

uint64_t initializeWithCopy for NWConnection.DataTransferReport.PathReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for NWConnection.DataTransferReport.PathReport(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  return a1;
}

uint64_t assignWithTake for NWConnection.DataTransferReport.PathReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.DataTransferReport.PathReport(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.DataTransferReport.PathReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.DataTransferReport.PathReport()
{
  return &type metadata for NWConnection.DataTransferReport.PathReport;
}

uint64_t method lookup function for NWConnection.PendingDataTransferReport(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWConnection.PendingDataTransferReport);
}

uint64_t dispatch thunk of NWConnection.PendingDataTransferReport.collect(queue:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

void destroy for NWConnection.LockedState(void *a1)
{
  if (*a1) {
    swift_release();
  }
  if (a1[2]) {
    swift_release();
  }
  if (a1[4]) {
    swift_release();
  }
  if (a1[6]) {
    swift_release();
  }
  uint64_t v2 = (void *)a1[8];
}

uint64_t initializeWithCopy for NWConnection.LockedState(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  uint64_t v11 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v11;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  id v12 = v11;
  return a1;
}

uint64_t assignWithCopy for NWConnection.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (*(void *)(a1 + 16))
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[5];
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v13)
    {
      uint64_t v15 = a2[7];
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v15;
      swift_retain();
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_29;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v14 = a2[7];
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v14;
  swift_retain();
  swift_release();
LABEL_29:
  uint64_t v16 = *(void **)(a1 + 64);
  uint64_t v17 = (void *)a2[8];
  *(void *)(a1 + 64) = v17;
  id v18 = v17;

  int v19 = *((_DWORD *)a2 + 18);
  *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
  *(_DWORD *)(a1 + 72) = v19;
  *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
  return a1;
}

__n128 __swift_memcpy78_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for NWConnection.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (*(void *)(a1 + 16))
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[5];
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v12;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v13)
    {
      uint64_t v15 = a2[7];
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v15;
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_29;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v14 = a2[7];
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v14;
  swift_release();
LABEL_29:
  uint64_t v16 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = a2[8];

  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
  *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.LockedState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 78)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.LockedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 76) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 78) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 78) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t sub_18357A7B0(char a1)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1;
  return v2(&v4);
}

uint64_t sub_18357A7E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_18357A834()
{
  return swift_deallocObject();
}

uint64_t sub_18357A844(NSObject *a1)
{
  return sub_183575A00(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_18357A84C()
{
  return swift_deallocObject();
}

uint64_t sub_18357A85C()
{
  return swift_deallocObject();
}

uint64_t sub_18357A86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183575DB0(a1, a2, a3, *(void ***)(v3 + 16));
}

uint64_t sub_18357A874()
{
  return swift_deallocObject();
}

uint64_t sub_18357A884()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_18357A8B0(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t HTTPResponse.status.getter@<X0>(void *a1@<X8>)
{
  unint64_t v5 = *(void *)(v1 + 40);
  unint64_t v6 = *(void *)(v1 + 48);
  if ((v6 & 0x2000000000000000) != 0) {
    unint64_t v7 = HIBYTE(v6) & 0xF;
  }
  else {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    __break(1u);
LABEL_53:
    unsigned __int8 v8 = sub_183D44CFC();
    unint64_t v9 = sub_183D44CBC();
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  if ((v6 & 0x1000000000000000) != 0) {
    uint64_t v1 = (v5 >> 59) & 1;
  }
  else {
    uint64_t v1 = 1;
  }
  if ((v6 & 0x1000000000000000) != 0) {
    goto LABEL_53;
  }
  if ((v6 & 0x2000000000000000) != 0)
  {
    unsigned __int8 v8 = v5;
  }
  else
  {
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_63;
    }
    unsigned __int8 v8 = *(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  }
LABEL_13:
  unint64_t v9 = 65540;
LABEL_14:
  int v10 = v8 - 48;
  if ((v10 & 0xFFFFFF00) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v2;
    uint64_t v2 = 4 * v7;
    if (4 * v7 != v9 >> 14)
    {
      uint64_t v19 = v3;
      uint64_t v3 = 4 << v1;
      uint64_t v1 = v9 & 0xC;
      unint64_t v11 = v9;
      if (v1 != v3) {
        goto LABEL_17;
      }
      goto LABEL_56;
    }
  }
  __break(1u);
LABEL_56:
  unint64_t v11 = sub_183520284(v9, v5, v6);
LABEL_17:
  unint64_t v12 = v11 >> 16;
  if (v11 >> 16 < v7)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      unint64_t v12 = sub_183D44CFC();
      if (v1 != v3) {
        goto LABEL_25;
      }
    }
    else
    {
      if ((v6 & 0x2000000000000000) == 0)
      {
        if ((v5 & 0x1000000000000000) != 0)
        {
          uint64_t v13 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
          goto LABEL_22;
        }
        goto LABEL_66;
      }
      unint64_t v20 = v5;
      uint64_t v21 = v6 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v12 = *((unsigned __int8 *)&v20 + v12);
      if (v1 != v3) {
        goto LABEL_25;
      }
    }
LABEL_28:
    unint64_t v9 = sub_183520284(v9, v5, v6);
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_26;
    }
LABEL_29:
    if (v7 > v9 >> 16)
    {
      unint64_t v9 = sub_183D44CBC();
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_65;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  unint64_t v14 = sub_183520284(v9, v5, v6);
  while (1)
  {
    unint64_t v15 = v14 >> 16;
    if (v14 >> 16 >= v7)
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      unsigned __int8 v8 = *(unsigned char *)sub_183D4557C();
      goto LABEL_13;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      unint64_t v12 = sub_183D44CFC();
      if (v2 != v3) {
        goto LABEL_42;
      }
    }
    else if ((v6 & 0x2000000000000000) != 0)
    {
      unint64_t v20 = v5;
      uint64_t v21 = v6 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v12 = *((unsigned __int8 *)&v20 + v15);
      if (v2 != v3) {
        goto LABEL_42;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0) {
        uint64_t v16 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v16 = sub_183D4557C();
      }
      unint64_t v12 = *(unsigned __int8 *)(v16 + v15);
      if (v2 != v3)
      {
LABEL_42:
        uint64_t v2 = v19;
        if ((v6 & 0x1000000000000000) == 0) {
          goto LABEL_45;
        }
        goto LABEL_43;
      }
    }
    unint64_t v9 = sub_183520284(v9, v5, v6);
    uint64_t v2 = v19;
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_45;
    }
LABEL_43:
    if (v7 > v9 >> 16) {
      break;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    uint64_t v13 = sub_183D4557C();
LABEL_22:
    LOBYTE(v12) = *(unsigned char *)(v13 + v12);
    if (v1 == v3) {
      goto LABEL_28;
    }
LABEL_25:
    if ((v6 & 0x1000000000000000) != 0) {
      goto LABEL_29;
    }
LABEL_26:
    unint64_t v9 = (v9 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_31:
    uint64_t v1 = v12 - 48;
    if ((v1 & 0xFFFFFF00) != 0) {
      goto LABEL_58;
    }
    if (v2 == v9 >> 14) {
      goto LABEL_59;
    }
    uint64_t v2 = v9 & 0xC;
    unint64_t v14 = v9;
    if (v2 == v3) {
      goto LABEL_60;
    }
  }
  sub_183D44CBC();
LABEL_45:
  if (((v12 - 48) & 0xFFFFFF00) != 0) {
    goto LABEL_62;
  }
  *a1 = 100 * v10 + 10 * v1 + (v12 - 48);
  a1[1] = v18;
  a1[2] = v2;

  return swift_bridgeObjectRetain();
}

unint64_t sub_18357AD24(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4 << v6;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = sub_183520284(v8, a1, a2);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_183D44CFC();
      char v13 = result;
      if (v10 != v7) {
        goto LABEL_20;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      char v13 = *((unsigned char *)v15 + v12);
      if (v10 != v7) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t result = v14;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = sub_183D4557C();
      }
      char v13 = *(unsigned char *)(result + v12);
      if (v10 != v7)
      {
LABEL_20:
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }
    unint64_t result = sub_183520284(v8, a1, a2);
    unint64_t v8 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_7:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_8;
    }
LABEL_21:
    if (v4 <= v8 >> 16) {
      goto LABEL_28;
    }
    unint64_t v8 = sub_183D44CBC();
LABEL_8:
    if ((v13 - 58) < 0xF6u) {
      return v9 == v5;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_18357AEC4(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v5 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  uint64_t v6 = 4 << v5;
  uint64_t v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15;
  while (1)
  {
    unint64_t v9 = v8 & 0xC;
    unint64_t result = v8;
    if (v9 == v6) {
      unint64_t result = sub_183520284(v8, a1, a2);
    }
    unint64_t v11 = result >> 16;
    if (result >> 16 >= v2) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_183D44CFC();
      char v12 = result;
      if (v9 == v6) {
        goto LABEL_17;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = a1;
      v13[1] = v14;
      char v12 = *((unsigned char *)v13 + v11);
      if (v9 == v6) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t result = v7;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = sub_183D4557C();
      }
      char v12 = *(unsigned char *)(result + v11);
      if (v9 == v6)
      {
LABEL_17:
        unint64_t result = sub_183520284(v8, a1, a2);
        unint64_t v8 = result;
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_18;
      }
    }
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_22:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_23;
    }
LABEL_18:
    if (v2 <= v8 >> 16) {
      goto LABEL_33;
    }
    unint64_t v8 = sub_183D44CBC();
LABEL_23:
    if (v12 != 32 && v12 != 9 && (v12 & 0x80) == 0 && (v12 - 127) < 0xA2u) {
      return 0;
    }
    if (4 * v2 == v8 >> 14) {
      return 1;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

Network::HTTPResponse::Status __swiftcall HTTPResponse.Status.init(code:reasonPhrase:)(Swift::Int code, Swift::String reasonPhrase)
{
  if ((unint64_t)code > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    object = reasonPhrase._object;
    uint64_t countAndFlagsBits = reasonPhrase._countAndFlagsBits;
    Swift::Int v5 = code;
    uint64_t v6 = v2;
    code = sub_18357AEC4(reasonPhrase._countAndFlagsBits, (unint64_t)reasonPhrase._object);
    if ((code & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F639B8);
      sub_18352D990();
      sub_183D44C0C();
      code = swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
    *uint64_t v6 = v5;
    v6[1] = countAndFlagsBits;
    v6[2] = (Swift::Int)object;
  }
  result.reasonPhrase = reasonPhrase;
  result.code = code;
  return result;
}

uint64_t HTTPResponse.init(status:headerFields:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_183D44C3C();
  uint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = 0x7375746174733ALL;
  *(void *)(a3 + 8) = 0xE700000000000000;
  *(void *)(a3 + 16) = 0x7375746174733ALL;
  *(void *)(a3 + 24) = 0xE700000000000000;
  *(unsigned char *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = v7;
  *(void *)(a3 + 48) = v9;
  *(void *)(a3 + 56) = v4;
  *(void *)(a3 + 64) = v5;
  *(void *)(a3 + 72) = v6;
  return result;
}

uint64_t HTTPResponse.Status.code.getter()
{
  return *(void *)v0;
}

uint64_t HTTPResponse.Status.reasonPhrase.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

Network::HTTPResponse::Status __swiftcall HTTPResponse.Status.init(integerLiteral:)(Swift::Int integerLiteral)
{
  if ((unint64_t)integerLiteral > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    *uint64_t v1 = integerLiteral;
    v1[1] = 0;
    v1[2] = 0xE000000000000000;
  }
  result.code = integerLiteral;
  return result;
}

BOOL static HTTPResponse.Status.Kind.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t HTTPResponse.Status.Kind.hash(into:)()
{
  return sub_183D45B0C();
}

uint64_t HTTPResponse.Status.Kind.hashValue.getter()
{
  return sub_183D45B4C();
}

uint64_t HTTPResponse.Status.kind.getter()
{
  uint64_t v1 = *v0;
  if ((unint64_t)(*v0 - 200) > 0xFFFFFFFFFFFFFF9BLL) {
    return 1;
  }
  if ((unint64_t)(v1 - 300) > 0xFFFFFFFFFFFFFF9BLL) {
    return 2;
  }
  unint64_t v2 = v1 - 400;
  unint64_t v3 = v1 - 500;
  if ((unint64_t)(v1 - 600) >= 0xFFFFFFFFFFFFFF9CLL) {
    unsigned int v4 = 5;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v3 > 0xFFFFFFFFFFFFFF9BLL) {
    unsigned int v4 = 4;
  }
  if (v2 <= 0xFFFFFFFFFFFFFF9BLL) {
    return v4;
  }
  else {
    return 3;
  }
}

uint64_t HTTPResponse.Status.hash(into:)()
{
  return sub_183D45B0C();
}

BOOL static HTTPResponse.Status.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t HTTPResponse.Status.description.getter()
{
  uint64_t v1 = sub_183D4589C();
  sub_183D44C8C();
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_18357B3FC(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (a3 > -100 && a3 < 25600)
  {
    unsigned int v3 = ((char)a3 / 100) + 48;
    if ((v3 >> 8))
    {
      __break(1u);
    }
    else
    {
      *a1 = v3;
      if ((((__int16)a3 / 10 % 10) & 0x8000) == 0)
      {
        unsigned int v4 = ((26215 * (__int16)a3) >> 18) + ((26215 * (__int16)a3) >> 31);
        a1[1] = v4 - 10 * (((int)(26215 * v4) >> 18) + (((26215 * v4) & 0x80000000) != 0)) + 48;
        if ((((__int16)a3 % 10) & 0x8000) == 0)
        {
          a1[2] = (__int16)a3 % 10 + 48;
          return 3;
        }
      }
    }
  }
  uint64_t result = sub_183D456BC();
  __break(1u);
  return result;
}

int *sub_18357B538@<X0>(int *result@<X0>, int *a2@<X8>)
{
  int v2 = *result;
  if ((*result & 0xFFFFFF80) != 0x80 && (*result - 33) >= 0x5E) {
    int v4 = 32;
  }
  else {
    int v4 = *result;
  }
  if (v2 == 32) {
    int v4 = 32;
  }
  if (v2 == 9) {
    int v5 = 9;
  }
  else {
    int v5 = v4;
  }
  *a2 = v5;
  return result;
}

uint64_t HTTPResponse.Status.hashValue.getter()
{
  return sub_183D45B4C();
}

uint64_t sub_18357B5B8()
{
  return sub_183D45B4C();
}

uint64_t sub_18357B600()
{
  return sub_183D45B0C();
}

uint64_t sub_18357B62C()
{
  return sub_183D45B4C();
}

void *sub_18357B670@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result > 0x3E7uLL)
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = 0;
    a2[2] = 0xE000000000000000;
  }
  return result;
}

uint64_t sub_18357B690()
{
  uint64_t v1 = sub_183D4589C();
  sub_183D44C8C();
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  return v1;
}

double sub_18357B718@<D0>(uint64_t a1@<X8>)
{
  HTTPResponse.status.getter(&v4);
  uint64_t v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t HTTPResponse.status.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_183D44C3C();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = v1[1];
  uint64_t v13 = *v1;
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  char v12 = *((unsigned char *)v1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 0x7375746174733ALL && v9 == 0xE700000000000000 || (uint64_t result = sub_183D4592C(), (result & 1) != 0))
  {
    uint64_t result = sub_183D44C5C();
    if (result == 3)
    {
      char v11 = sub_18357AD24(v4, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v11)
      {
        *uint64_t v1 = v13;
        v1[1] = v7;
        v1[2] = v8;
        v1[3] = v9;
        *((unsigned char *)v1 + 32) = v12;
        v1[5] = v4;
        v1[6] = v6;
        uint64_t result = swift_bridgeObjectRelease();
        v1[7] = v2;
        v1[8] = v3;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t HTTPResponse.PseudoHeaderFields.status.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  char v6 = *((unsigned char *)a1 + 32);
  unint64_t v7 = a1[5];
  unint64_t v8 = a1[6];
  BOOL v9 = v4 == 0x7375746174733ALL && v5 == 0xE700000000000000;
  if (v9 || (unint64_t result = sub_183D4592C(), (result & 1) != 0))
  {
    unint64_t result = sub_183D44C5C();
    if (result == 3)
    {
      unint64_t result = sub_18357AD24(v7, v8);
      if (result)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        *(void *)uint64_t v1 = v2;
        *(void *)(v1 + 8) = v3;
        *(void *)(v1 + 16) = v4;
        *(void *)(v1 + 24) = v5;
        *(unsigned char *)(v1 + 32) = v6;
        *(void *)(v1 + 40) = v7;
        *(void *)(v1 + 48) = v8;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*HTTPResponse.status.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  HTTPResponse.status.getter(a1);
  return sub_18357BA84;
}

uint64_t sub_18357BA84(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (a2)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    swift_bridgeObjectRetain();
    HTTPResponse.status.setter((uint64_t)&v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    return HTTPResponse.status.setter((uint64_t)&v5);
  }
}

uint64_t HTTPResponse.PseudoHeaderFields.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((unsigned char *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_18357BB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t sub_18357BBBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = *(void *)a1;
  v8[1] = v1;
  v8[2] = v2;
  void v8[3] = v3;
  char v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HTTPResponse.PseudoHeaderFields.status.setter(v8);
}

void (*HTTPResponse.PseudoHeaderFields.status.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  char v8 = *((unsigned char *)v1 + 32);
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  *uint64_t v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  *((unsigned char *)v3 + 32) = v8;
  v3[5] = v9;
  v3[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_18357BCBC;
}

void sub_18357BCBC(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[3];
  char v6 = *((unsigned char *)*a1 + 32);
  unint64_t v8 = (*a1)[5];
  unint64_t v7 = (*a1)[6];
  BOOL v10 = (*a1)[2] == 0x7375746174733ALL && v5 == 0xE700000000000000;
  uint64_t v17 = (*a1)[2];
  if ((a2 & 1) == 0)
  {
    if (!v10 && (sub_183D4592C() & 1) == 0) {
      goto LABEL_26;
    }
    if (sub_183D44C5C() == 3)
    {
      if (sub_18357AD24(v8, v7))
      {
        uint64_t v14 = v3;
        uint64_t v15 = v4;
        uint64_t v16 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v16 = v15;
        *(void *)(v16 + 8) = v14;
        *(void *)(v16 + 16) = v17;
        *(void *)(v16 + 24) = v5;
        *(unsigned char *)(v16 + 32) = v6;
        *(void *)(v16 + 40) = v8;
        *(void *)(v16 + 48) = v7;
        goto LABEL_18;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  if (!v10 && (sub_183D4592C() & 1) == 0) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_183D44C5C() != 3)
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((sub_18357AD24(v8, v7) & 1) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  uint64_t v13 = v2[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v13 = v12;
  *(void *)(v13 + 8) = v11;
  *(void *)(v13 + 16) = v17;
  *(void *)(v13 + 24) = v5;
  *(unsigned char *)(v13 + 32) = v6;
  *(void *)(v13 + 40) = v8;
  *(void *)(v13 + 48) = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:

  free(v2);
}

uint64_t HTTPResponse.PseudoHeaderFields.hash(into:)()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t HTTPResponse.PseudoHeaderFields.hashValue.getter()
{
  return sub_183D45B4C();
}

uint64_t HTTPResponse.pseudoHeaderFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((unsigned char *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 HTTPResponse.pseudoHeaderFields.setter(__n128 *a1)
{
  __n128 v8 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  unint64_t v5 = a1[2].n128_u64[1];
  unint64_t v6 = a1[3].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v8;
  *uint64_t v1 = v8;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  v1[2].n128_u8[0] = v4;
  v1[2].n128_u64[1] = v5;
  v1[3].n128_u64[0] = v6;
  return result;
}

uint64_t (*HTTPResponse.pseudoHeaderFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPResponse.headerFields.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 72);
  return swift_retain();
}

uint64_t HTTPResponse.headerFields.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 72) = v2;
  return result;
}

uint64_t (*HTTPResponse.headerFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPResponse.hash(into:)()
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183D45B1C();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_retain();
  sub_18351A6A8();

  return swift_release();
}

uint64_t HTTPResponse.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_183D45AFC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183D45B1C();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183D45B1C();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return sub_183D45B4C();
}

uint64_t sub_18357C440()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183D45B1C();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183D45B1C();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18357C5C8()
{
  return sub_183D45B4C();
}

uint64_t HTTPResponse.debugDescription.getter()
{
  HTTPResponse.status.getter(&v2);
  uint64_t v1 = sub_183D4589C();
  sub_183D44C8C();
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRelease_n();
  return v1;
}

uint64_t sub_18357C75C()
{
  HTTPResponse.status.getter(&v2);
  uint64_t v1 = sub_183D4589C();
  sub_183D44C8C();
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRelease_n();
  return v1;
}

uint64_t HTTPResponse.PseudoHeaderFields.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183D45BDC();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_183521EA8();
  sub_183D458EC();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t HTTPResponse.PseudoHeaderFields.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183D45B9C();
  if (!v2)
  {
    uint64_t v24 = a2;
    uint64_t v41 = (uint64_t)v3;
    __swift_project_boxed_opaque_existential_2(v39, v40);
    if (sub_183D458CC())
    {
LABEL_3:
      sub_1834BDE24((uint64_t)v39, (uint64_t)&v32);
      sub_183D4554C();
      swift_allocError();
      sub_183D4551C();
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v6 = 0;
      char v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v31 = 0;
      uint64_t v10 = 0;
      while (2)
      {
        uint64_t v25 = v10;
        uint64_t v26 = v9;
        unint64_t v27 = v8;
        char v28 = v7;
        unint64_t v29 = v6;
        unint64_t v30 = v5;
        while (1)
        {
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
          sub_183521EFC();
          sub_183D458BC();
          uint64_t v12 = v32;
          uint64_t v11 = v33;
          uint64_t v14 = v34;
          unint64_t v13 = v35;
          char v15 = v36;
          unint64_t v17 = v37;
          unint64_t v16 = v38;
          if (v34 == 0x7375746174733ALL && v35 == 0xE700000000000000) {
            break;
          }
          if (sub_183D4592C()) {
            goto LABEL_16;
          }
          swift_bridgeObjectRetain();
          char v19 = sub_183D44D1C();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            sub_1834BFA48(v25, v31);
            sub_1834BDE24((uint64_t)v39, (uint64_t)&v32);
            sub_183D4547C();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_183D44C8C();
            if (sub_1834BF534(v17, v16))
            {
              swift_bridgeObjectRetain();
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1835A378C(v17, v16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_183D44C8C();
            swift_bridgeObjectRelease();
            sub_183D44C8C();
            swift_bridgeObjectRelease();
            sub_183D44C8C();
            sub_183D4554C();
            swift_allocError();
            sub_183D4551C();
            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_project_boxed_opaque_existential_2(v39, v40);
          if (sub_183D458CC())
          {
            uint64_t v12 = v25;
            uint64_t v14 = v26;
            unint64_t v16 = v30;
            uint64_t v11 = v31;
            unint64_t v13 = v27;
            char v15 = v28;
            unint64_t v17 = v29;
            goto LABEL_21;
          }
        }
        unint64_t v13 = 0xE700000000000000;
LABEL_16:
        sub_1834BFA48(v25, v31);
        if (v31)
        {
          sub_1834BDE24((uint64_t)v39, (uint64_t)&v32);
          sub_183D4554C();
          swift_allocError();
          sub_183D4551C();
LABEL_27:
          __swift_destroy_boxed_opaque_existential_2((uint64_t)&v32);
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
        __swift_project_boxed_opaque_existential_2(v39, v40);
        char v20 = sub_183D458CC();
        unint64_t v5 = v38;
        unint64_t v6 = v37;
        char v7 = v36;
        unint64_t v8 = v13;
        uint64_t v9 = v34;
        uint64_t v31 = v33;
        uint64_t v10 = v32;
        if ((v20 & 1) == 0) {
          continue;
        }
        break;
      }
LABEL_21:
      if (!v11) {
        goto LABEL_3;
      }
      swift_bridgeObjectRetain();
      if (sub_183D44C5C() == 3)
      {
        char v21 = sub_18357AD24(v17, v16);
        swift_bridgeObjectRelease();
        if (v21)
        {
          __swift_destroy_boxed_opaque_existential_2((uint64_t)v39);
          *(void *)uint64_t v24 = v12;
          *(void *)(v24 + 8) = v11;
          *(void *)(v24 + 16) = v14;
          *(void *)(v24 + 24) = v13;
          *(unsigned char *)(v24 + 32) = v15;
          *(void *)(v24 + 40) = v17;
          *(void *)(v24 + 48) = v16;
          uint64_t v22 = v41;
          return __swift_destroy_boxed_opaque_existential_2(v22);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_1834BDE24((uint64_t)v39, (uint64_t)&v32);
      sub_183D4547C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_183D44C8C();
      sub_1834BFA48(v12, v11);
      swift_bridgeObjectRelease();
      sub_183D44C8C();
      sub_183D4554C();
      swift_allocError();
      sub_183D4551C();
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_2((uint64_t)&v32);
    swift_willThrow();
LABEL_28:
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v39);
    uint64_t v3 = (void *)v41;
  }
  uint64_t v22 = (uint64_t)v3;
  return __swift_destroy_boxed_opaque_existential_2(v22);
}

uint64_t sub_18357CF0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPResponse.PseudoHeaderFields.init(from:)(a1, a2);
}

uint64_t sub_18357CF24(void *a1)
{
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183D45BDC();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_183521EA8();
  sub_183D458EC();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t sub_18357CFFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1835C0F54(*a1, *a2);
}

uint64_t sub_18357D008()
{
  return sub_183D45B4C();
}

uint64_t sub_18357D0C0()
{
  sub_183D44C4C();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18357D164()
{
  return sub_183D45B4C();
}

uint64_t sub_18357D218@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18357EC64();
  *a1 = result;
  return result;
}

void sub_18357D248(unint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0x8000000183E23840;
  unint64_t v4 = 0xEC00000073646C65;
  uint64_t v5 = 0x6946726564616568;
  if (v2 != 1)
  {
    uint64_t v5 = 0x68506E6F73616572;
    unint64_t v4 = 0xEC00000065736172;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xD000000000000012;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_18357D2BC()
{
  uint64_t v1 = 0x6946726564616568;
  if (*v0 != 1) {
    uint64_t v1 = 0x68506E6F73616572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t sub_18357D32C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18357EC64();
  *a1 = result;
  return result;
}

uint64_t sub_18357D354(uint64_t a1)
{
  unint64_t v2 = sub_18357E1F0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18357D390(uint64_t a1)
{
  unint64_t v2 = sub_18357E1F0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t HTTPResponse.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F646A0);
  uint64_t v23 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v21 = *v1;
  uint64_t v7 = *((void *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 3);
  char v8 = *((unsigned char *)v1 + 32);
  uint64_t v9 = *((void *)v1 + 5);
  uint64_t v19 = *((void *)v1 + 6);
  uint64_t v20 = v9;
  uint64_t v10 = *((void *)v1 + 7);
  uint64_t v17 = *((void *)v1 + 8);
  uint64_t v18 = v10;
  uint64_t v16 = *((void *)v1 + 9);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18357E1F0();
  sub_183D45C0C();
  long long v24 = v21;
  uint64_t v25 = v7;
  uint64_t v26 = v6;
  char v27 = v8;
  uint64_t v28 = v20;
  uint64_t v29 = v19;
  char v30 = 0;
  sub_18357E244();
  uint64_t v11 = v22;
  sub_183D4586C();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  }
  uint64_t v13 = v16;
  uint64_t v14 = v23;
  LOBYTE(v24) = 2;
  sub_183D4584C();
  *(void *)&long long v24 = v13;
  char v30 = 1;
  sub_18357E298();
  sub_183D4586C();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v5, v3);
}

uint64_t HTTPResponse.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F646C0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18357E1F0();
  sub_183D45BCC();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  char v36 = 0;
  sub_18357E2EC();
  sub_183D457DC();
  uint64_t v25 = v28;
  uint64_t v26 = a2;
  uint64_t v10 = v29;
  uint64_t v11 = v31;
  int v35 = v32;
  uint64_t v12 = v34;
  uint64_t v23 = v33;
  uint64_t v24 = v30;
  LOBYTE(v28) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_183D457BC();
  unint64_t v27 = v14;
  unint64_t v15 = v14;
  uint64_t v22 = v11;
  unint64_t v16 = v13;
  if (sub_18357AEC4(v13, v14))
  {
    char v36 = 1;
    sub_18357E394();
    swift_bridgeObjectRetain();
    sub_183D457DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = v28;
    swift_bridgeObjectRetain();
    uint64_t v19 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v26;
    *uint64_t v26 = v25;
    v20[1] = v10;
    v20[2] = v24;
    v20[3] = v19;
    *((unsigned char *)v20 + 32) = v35;
    v20[5] = v23;
    v20[6] = v12;
    v20[7] = v16;
    v20[8] = v27;
    v20[9] = v18;
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18357E340();
    swift_allocError();
    *uint64_t v17 = v16;
    v17[1] = v15;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18357D9E0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return HTTPResponse.init(from:)(a1, a2);
}

uint64_t sub_18357D9F8(void *a1)
{
  return HTTPResponse.encode(to:)(a1);
}

double static HTTPResponse.Status.continue.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 100;
  *(_OWORD *)a1 = xmmword_183D599B0;
  *(void *)(a1 + 16) = 0xE800000000000000;
  return result;
}

double static HTTPResponse.Status.switchingProtocols.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 101;
  *(_OWORD *)a1 = xmmword_183D599C0;
  *(void *)(a1 + 16) = 0x8000000183E268C0;
  return result;
}

double static HTTPResponse.Status.earlyHints.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 103;
  *(_OWORD *)a1 = xmmword_183D599D0;
  *(void *)(a1 + 16) = 0xEB0000000073746ELL;
  return result;
}

double static HTTPResponse.Status.ok.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 200;
  *(_OWORD *)a1 = xmmword_183D599E0;
  *(void *)(a1 + 16) = 0xE200000000000000;
  return result;
}

double static HTTPResponse.Status.created.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 201;
  *(_OWORD *)a1 = xmmword_183D599F0;
  *(void *)(a1 + 16) = 0xE700000000000000;
  return result;
}

double static HTTPResponse.Status.accepted.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 202;
  *(_OWORD *)a1 = xmmword_183D59A00;
  *(void *)(a1 + 16) = 0xE800000000000000;
  return result;
}

double static HTTPResponse.Status.nonAuthoritativeInformation.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 203;
  *(_OWORD *)a1 = xmmword_183D59A10;
  *(void *)(a1 + 16) = 0x8000000183E268E0;
  return result;
}

double static HTTPResponse.Status.noContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 204;
  *(_OWORD *)a1 = xmmword_183D59A20;
  *(void *)(a1 + 16) = 0xEA0000000000746ELL;
  return result;
}

double static HTTPResponse.Status.resetContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 205;
  *(_OWORD *)a1 = xmmword_183D59A30;
  *(void *)(a1 + 16) = 0xED0000746E65746ELL;
  return result;
}

double static HTTPResponse.Status.partialContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 206;
  *(_OWORD *)a1 = xmmword_183D59A40;
  *(void *)(a1 + 16) = 0xEF746E65746E6F43;
  return result;
}

double static HTTPResponse.Status.multipleChoices.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 300;
  *(_OWORD *)a1 = xmmword_183D59A50;
  *(void *)(a1 + 16) = 0x8000000183E26900;
  return result;
}

double static HTTPResponse.Status.movedPermanently.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 301;
  *(_OWORD *)a1 = xmmword_183D59A60;
  *(void *)(a1 + 16) = 0x8000000183E26920;
  return result;
}

double static HTTPResponse.Status.found.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 302;
  *(_OWORD *)a1 = xmmword_183D59A70;
  *(void *)(a1 + 16) = 0xE500000000000000;
  return result;
}

double static HTTPResponse.Status.seeOther.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 303;
  *(_OWORD *)a1 = xmmword_183D59A80;
  *(void *)(a1 + 16) = 0xE900000000000072;
  return result;
}

double static HTTPResponse.Status.notModified.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 304;
  *(_OWORD *)a1 = xmmword_183D59A90;
  *(void *)(a1 + 16) = 0xEC00000064656966;
  return result;
}

double static HTTPResponse.Status.temporaryRedirect.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 307;
  *(_OWORD *)a1 = xmmword_183D59AA0;
  *(void *)(a1 + 16) = 0x8000000183E26940;
  return result;
}

double static HTTPResponse.Status.permanentRedirect.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 308;
  *(_OWORD *)a1 = xmmword_183D59AB0;
  *(void *)(a1 + 16) = 0x8000000183E26960;
  return result;
}

double static HTTPResponse.Status.badRequest.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 400;
  *(_OWORD *)a1 = xmmword_183D59AC0;
  *(void *)(a1 + 16) = 0xEB00000000747365;
  return result;
}

double static HTTPResponse.Status.unauthorized.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 401;
  *(_OWORD *)a1 = xmmword_183D59AD0;
  *(void *)(a1 + 16) = 0xEC00000064657A69;
  return result;
}

double static HTTPResponse.Status.forbidden.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 403;
  *(_OWORD *)a1 = xmmword_183D59AE0;
  *(void *)(a1 + 16) = 0xE90000000000006ELL;
  return result;
}

double static HTTPResponse.Status.notFound.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 404;
  *(_OWORD *)a1 = xmmword_183D59AF0;
  *(void *)(a1 + 16) = 0xE900000000000064;
  return result;
}

double static HTTPResponse.Status.methodNotAllowed.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 405;
  *(_OWORD *)a1 = xmmword_183D59B00;
  *(void *)(a1 + 16) = 0x8000000183E26980;
  return result;
}

double static HTTPResponse.Status.notAcceptable.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 406;
  *(_OWORD *)a1 = xmmword_183D59B10;
  *(void *)(a1 + 16) = 0xEE00656C62617470;
  return result;
}

double static HTTPResponse.Status.proxyAuthenticationRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 407;
  *(_OWORD *)a1 = xmmword_183D59B20;
  *(void *)(a1 + 16) = 0x8000000183E269A0;
  return result;
}

double static HTTPResponse.Status.requestTimeout.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 408;
  *(_OWORD *)a1 = xmmword_183D59B30;
  *(void *)(a1 + 16) = 0xEF74756F656D6954;
  return result;
}

double static HTTPResponse.Status.conflict.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 409;
  *(_OWORD *)a1 = xmmword_183D59B40;
  *(void *)(a1 + 16) = 0xE800000000000000;
  return result;
}

double static HTTPResponse.Status.gone.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 410;
  *(_OWORD *)a1 = xmmword_183D59B50;
  *(void *)(a1 + 16) = 0xE400000000000000;
  return result;
}

double static HTTPResponse.Status.lengthRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 411;
  *(_OWORD *)a1 = xmmword_183D59B60;
  *(void *)(a1 + 16) = 0xEF64657269757165;
  return result;
}

double static HTTPResponse.Status.preconditionFailed.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 412;
  *(_OWORD *)a1 = xmmword_183D59B70;
  *(void *)(a1 + 16) = 0x8000000183E269C0;
  return result;
}

double static HTTPResponse.Status.contentTooLarge.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 413;
  *(_OWORD *)a1 = xmmword_183D59B80;
  *(void *)(a1 + 16) = 0x8000000183E269E0;
  return result;
}

double static HTTPResponse.Status.uriTooLong.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 414;
  *(_OWORD *)a1 = xmmword_183D59B90;
  *(void *)(a1 + 16) = 0xEC000000676E6F4CLL;
  return result;
}

double static HTTPResponse.Status.unsupportedMediaType.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 415;
  *(_OWORD *)a1 = xmmword_183D59BA0;
  *(void *)(a1 + 16) = 0x8000000183E26A00;
  return result;
}

double static HTTPResponse.Status.rangeNotSatisfiable.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 416;
  *(_OWORD *)a1 = xmmword_183D59BB0;
  *(void *)(a1 + 16) = 0x8000000183E26A20;
  return result;
}

double static HTTPResponse.Status.expectationFailed.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 417;
  *(_OWORD *)a1 = xmmword_183D59BC0;
  *(void *)(a1 + 16) = 0x8000000183E26A40;
  return result;
}

double static HTTPResponse.Status.misdirectedRequest.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 421;
  *(_OWORD *)a1 = xmmword_183D59BD0;
  *(void *)(a1 + 16) = 0x8000000183E26A60;
  return result;
}

double static HTTPResponse.Status.unprocessableContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 422;
  *(_OWORD *)a1 = xmmword_183D59BE0;
  *(void *)(a1 + 16) = 0x8000000183E26A80;
  return result;
}

double static HTTPResponse.Status.tooEarly.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 425;
  *(_OWORD *)a1 = xmmword_183D59BF0;
  *(void *)(a1 + 16) = 0xE900000000000079;
  return result;
}

double static HTTPResponse.Status.upgradeRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 426;
  *(_OWORD *)a1 = xmmword_183D59C00;
  *(void *)(a1 + 16) = 0x8000000183E26AA0;
  return result;
}

double static HTTPResponse.Status.preconditionRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 428;
  *(_OWORD *)a1 = xmmword_183D59C10;
  *(void *)(a1 + 16) = 0x8000000183E26AC0;
  return result;
}

double static HTTPResponse.Status.tooManyRequests.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 429;
  *(_OWORD *)a1 = xmmword_183D59C20;
  *(void *)(a1 + 16) = 0x8000000183E26AE0;
  return result;
}

double static HTTPResponse.Status.requestHeaderFieldsTooLarge.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 431;
  *(_OWORD *)a1 = xmmword_183D59C30;
  *(void *)(a1 + 16) = 0x8000000183E26B00;
  return result;
}

double static HTTPResponse.Status.unavailableForLegalReasons.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 451;
  *(_OWORD *)a1 = xmmword_183D59C40;
  *(void *)(a1 + 16) = 0x8000000183E26B20;
  return result;
}

double static HTTPResponse.Status.internalServerError.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 500;
  *(_OWORD *)a1 = xmmword_183D59C50;
  *(void *)(a1 + 16) = 0x8000000183E26B40;
  return result;
}

double static HTTPResponse.Status.notImplemented.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 501;
  *(_OWORD *)a1 = xmmword_183D59C60;
  *(void *)(a1 + 16) = 0xEF6465746E656D65;
  return result;
}

double static HTTPResponse.Status.badGateway.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 502;
  *(_OWORD *)a1 = xmmword_183D59C70;
  *(void *)(a1 + 16) = 0xEB00000000796177;
  return result;
}

double static HTTPResponse.Status.serviceUnavailable.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 503;
  *(_OWORD *)a1 = xmmword_183D59C80;
  *(void *)(a1 + 16) = 0x8000000183E26B60;
  return result;
}

double static HTTPResponse.Status.gatewayTimeout.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 504;
  *(_OWORD *)a1 = xmmword_183D59C90;
  *(void *)(a1 + 16) = 0xEF74756F656D6954;
  return result;
}

double static HTTPResponse.Status.httpVersionNotSupported.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 505;
  *(_OWORD *)a1 = xmmword_183D59CA0;
  *(void *)(a1 + 16) = 0x8000000183E26B80;
  return result;
}

double static HTTPResponse.Status.networkAuthenticationRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 511;
  *(_OWORD *)a1 = xmmword_183D59CB0;
  *(void *)(a1 + 16) = 0x8000000183E26BA0;
  return result;
}

BOOL _s7Network12HTTPResponseV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  BOOL v8 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  BOOL result = 0;
  if (v8 || (sub_183D4592C()) && v2 == v5)
  {
    BOOL v9 = v3 == v6 && v4 == v7;
    if (v9 || (sub_183D4592C() & 1) != 0) {
      return 1;
    }
  }
  return result;
}

uint64_t _s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 72);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  if ((*(void *)(a1 + 16) != *(void *)(a2 + 16) || *(void *)(a1 + 24) != *(void *)(a2 + 24))
    && (sub_183D4592C() & 1) == 0
    || v2 != v6
    || (v3 != v7 || v4 != v8) && (sub_183D4592C() & 1) == 0)
  {
    return 0;
  }
  swift_retain();
  swift_retain();
  char v10 = sub_183521734(v5, v9);
  swift_release();
  swift_release();
  return v10 & 1;
}

unint64_t sub_18357E1F0()
{
  unint64_t result = qword_1E8F646A8;
  if (!qword_1E8F646A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646A8);
  }
  return result;
}

unint64_t sub_18357E244()
{
  unint64_t result = qword_1E8F646B0;
  if (!qword_1E8F646B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646B0);
  }
  return result;
}

unint64_t sub_18357E298()
{
  unint64_t result = qword_1E8F646B8;
  if (!qword_1E8F646B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646B8);
  }
  return result;
}

unint64_t sub_18357E2EC()
{
  unint64_t result = qword_1E8F646C8;
  if (!qword_1E8F646C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646C8);
  }
  return result;
}

unint64_t sub_18357E340()
{
  unint64_t result = qword_1E8F646D0;
  if (!qword_1E8F646D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646D0);
  }
  return result;
}

unint64_t sub_18357E394()
{
  unint64_t result = qword_1E8F646D8;
  if (!qword_1E8F646D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646D8);
  }
  return result;
}

unint64_t sub_18357E3EC()
{
  unint64_t result = qword_1E8F646E0;
  if (!qword_1E8F646E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646E0);
  }
  return result;
}

unint64_t sub_18357E444()
{
  unint64_t result = qword_1E8F646E8;
  if (!qword_1E8F646E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646E8);
  }
  return result;
}

uint64_t sub_18357E498()
{
  return MEMORY[0x1E4FBB5C0];
}

unint64_t sub_18357E4A8()
{
  unint64_t result = qword_1E8F646F0;
  if (!qword_1E8F646F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646F0);
  }
  return result;
}

unint64_t sub_18357E500()
{
  unint64_t result = qword_1E8F646F8;
  if (!qword_1E8F646F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F646F8);
  }
  return result;
}

uint64_t sub_18357E558(long long *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  long long v3 = *a1;
  uint64_t v4 = v1;
  swift_bridgeObjectRetain();
  return HTTPResponse.status.setter((uint64_t)&v3);
}

uint64_t destroy for HTTPResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for HTTPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HTTPResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for HTTPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse()
{
  return &type metadata for HTTPResponse;
}

uint64_t getEnumTagSinglePayload for HTTPResponse.Status(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPResponse.Status(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.Status()
{
  return &type metadata for HTTPResponse.Status;
}

unsigned char *storeEnumTagSinglePayload for HTTPResponse.Status.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18357EA00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.Status.Kind()
{
  return &type metadata for HTTPResponse.Status.Kind;
}

ValueMetadata *type metadata accessor for HTTPResponse.PseudoHeaderFields()
{
  return &type metadata for HTTPResponse.PseudoHeaderFields;
}

ValueMetadata *type metadata accessor for HTTPResponse.DecodingError()
{
  return &type metadata for HTTPResponse.DecodingError;
}

unsigned char *storeEnumTagSinglePayload for HTTPResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18357EB24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.CodingKeys()
{
  return &type metadata for HTTPResponse.CodingKeys;
}

unint64_t sub_18357EB60()
{
  unint64_t result = qword_1E8F64700;
  if (!qword_1E8F64700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64700);
  }
  return result;
}

unint64_t sub_18357EBB8()
{
  unint64_t result = qword_1E8F64708;
  if (!qword_1E8F64708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64708);
  }
  return result;
}

unint64_t sub_18357EC10()
{
  unint64_t result = qword_1E8F64710;
  if (!qword_1E8F64710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64710);
  }
  return result;
}

uint64_t sub_18357EC64()
{
  unint64_t v0 = sub_183D4575C();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_18357ECB0(unsigned char *a1, uint64_t a2)
{
  return sub_18352D9EC(a1, a2);
}

uint64_t sub_18357ECC8(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t NWMulticastGroup.sourceFilter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183577140(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, a1);
}

uint64_t NWMulticastGroup.isUnicastDisabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled);
}

uint64_t sub_18357ED18(NSObject *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = a1;
  unsigned int v6 = (void *)swift_unknownObjectRetain();
  specific_nw_report_resolution_source_t source = nw_multicast_group_descriptor_get_specific_source(v6);
  sub_18315A830(specific_source, (uint64_t)v5);
  sub_183583FC4((uint64_t)v5, v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled) = nw_multicast_group_descriptor_get_disable_unicast_traffic(a1);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v14;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_18358403C;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_1835840B0;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1832FF10C;
  aBlock[3] = &block_descriptor_106_0;
  char v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_group_descriptor_enumerate_endpoints(a1, v10);
  swift_unknownObjectRelease();
  _Block_release(v10);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a1)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 16) = v14;
    swift_release();
    return v1;
  }
  return result;
}

uint64_t sub_18357EF14()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62FC0);
  MEMORY[0x1F4188790](v0 - 8);
  unint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = swift_unknownObjectRetain();
  sub_18315A830(v10, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_183138A24((uint64_t)v5, qword_1EB266A50);
  }
  else
  {
    sub_18315E28C((uint64_t)v5, (uint64_t)v9);
    sub_1834D7F00((uint64_t)v9, (uint64_t)v2);
    sub_1834EF82C(0, 0, (uint64_t)v2);
    sub_1834D7F64((uint64_t)v9);
  }
  return 1;
}

uint64_t NWMulticastGroup.__allocating_init(_:)(void *a1)
{
  uint64_t v1 = nw_group_descriptor_copy(a1);
  type metadata accessor for NWMulticastGroup(0);
  uint64_t v2 = swift_allocObject();
  sub_18357ED18(v1);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t type metadata accessor for NWMulticastGroup(uint64_t a1)
{
  return sub_18315A7F8(a1, qword_1E8F61E10);
}

uint64_t NWMulticastGroup.__allocating_init(for:from:disableUnicast:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = swift_allocObject();
  NWMulticastGroup.init(for:from:disableUnicast:)(a1, a2, a3);
  return v6;
}

uint64_t NWMulticastGroup.init(for:from:disableUnicast:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = v3;
  type metadata accessor for NWEndpoint();
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = 0;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    HIDWORD(v28) = a3;
    uint64_t v29 = v4;
    uint64_t v30 = v9;
    uint64_t v31 = a2;
    uint64_t v32 = v5;
    uint64_t v14 = v9 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1834D7F00(v14, (uint64_t)v12);
      if (swift_getEnumCaseMultiPayload()) {
        break;
      }
      uint64_t v17 = *(void *)v12;
      uint64_t v16 = *((void *)v12 + 1);
      uint64_t v18 = *((void *)v12 + 2);
      int v19 = v12[24];
      if (v19 == 1)
      {
        if ((*(void *)v12 & 0xF0) != 0xE0) {
          goto LABEL_11;
        }
      }
      else if (v19 != 2 || ~*v12 != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease_n();
        sub_1834AC424();
        swift_allocError();
        *(_DWORD *)uint64_t v21 = 22;
        *(unsigned char *)(v21 + 4) = 0;
        swift_willThrow();
        sub_18315E658(v17, v16, v18, v19);
        goto LABEL_15;
      }
      sub_18315E658(*(void *)v12, *((void *)v12 + 1), *((void *)v12 + 2), v12[24]);
      v14 += v15;
      if (!--v13)
      {
        uint64_t v23 = v30;
        swift_bridgeObjectRelease();
        uint64_t v5 = v32;
        *(void *)(v32 + 16) = v23;
        uint64_t v24 = v31;
        sub_183577140(v31, v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter);
        *(unsigned char *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled) = BYTE4(v28) & 1;
        uint64_t v25 = sub_18357F518();
        sub_183138A24(v24, qword_1EB266A50);
        *(void *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = v25;
        swift_unknownObjectRelease();
        return v5;
      }
    }
    swift_bridgeObjectRelease_n();
    sub_1834D7F64((uint64_t)v12);
    sub_1834AC424();
    swift_allocError();
    *(_DWORD *)uint64_t v26 = 22;
    *(unsigned char *)(v26 + 4) = 0;
    swift_willThrow();
LABEL_15:
    uint64_t v5 = v32;
    a2 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1834AC424();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 22;
    *(unsigned char *)(v22 + 4) = 0;
    swift_willThrow();
  }
  sub_183138A24(a2, qword_1EB266A50);
  swift_unknownObjectRelease();
  type metadata accessor for NWMulticastGroup(0);
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t sub_18357F508()
{
  return swift_unknownObjectRetain();
}

NSObject *sub_18357F518()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NWEndpoint();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v21 - v9;
  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  sub_1834D7F00(v13, (uint64_t)v21 - v9);
  swift_bridgeObjectRetain();
  uint64_t v14 = NWEndpoint.nw.getter();
  if (!v14)
  {
    sub_1834D7F64((uint64_t)v10);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v22 = v4;
  uint64_t v23 = v0;
  v21[1] = v14;
  multicast = nw_group_descriptor_create_multicast(v14);
  uint64_t v16 = *(void *)(v5 + 72);
  do
  {
    sub_1834D7F00(v13, (uint64_t)v8);
    if ((_s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v10) & 1) == 0)
    {
      uint64_t v17 = NWEndpoint.nw.getter();
      if (v17)
      {
        nw_group_descriptor_add_endpoint(multicast, v17);
        swift_unknownObjectRelease();
      }
    }
    sub_1834D7F64((uint64_t)v8);
    v13 += v16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  uint64_t v18 = v23;
  sub_183577140(v23 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v22) == 1)
  {
    sub_183138A24((uint64_t)v3, qword_1EB266A50);
  }
  else
  {
    int v19 = NWEndpoint.nw.getter();
    sub_1834D7F64((uint64_t)v3);
    if (v19)
    {
      nw_multicast_group_descriptor_set_specific_source(multicast, v19);
      swift_unknownObjectRelease();
    }
  }
  nw_multicast_group_descriptor_set_disable_unicast_traffic(multicast, *(unsigned char *)(v18 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled));
  swift_unknownObjectRelease();
  sub_1834D7F64((uint64_t)v10);
  return multicast;
}

uint64_t NWMulticastGroup.deinit()
{
  swift_bridgeObjectRelease();
  sub_183138A24(v0 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, qword_1EB266A50);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWMulticastGroup.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  sub_183138A24(v0 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, qword_1EB266A50);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_18357F87C()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB266A28);
  uint64_t v1 = *(void *)(type metadata accessor for NWEndpoint() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_183D53660;
  sub_1834D7F00(v0 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint, v3 + v2);
  return v3;
}

uint64_t NWMultiplexGroup.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = nw_group_descriptor_copy(a1);
  type metadata accessor for NWMultiplexGroup(0);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = v5;
  uint64_t v7 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_copy_member(v7);
  uint64_t v8 = swift_unknownObjectRetain();
  sub_18315A830(v8, (uint64_t)v4);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_18315E28C((uint64_t)v4, v6 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
    swift_unknownObjectRelease();
    return v6;
  }
  return result;
}

uint64_t type metadata accessor for NWMultiplexGroup(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F61E28);
}

uint64_t NWMultiplexGroup.__allocating_init(to:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1834D7F00(a1, v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  uint64_t v3 = NWEndpoint.nw.getter();
  if (v3)
  {
    nw_group_descriptor_t multiplex = nw_group_descriptor_create_multiplex(v3);
    swift_unknownObjectRelease();
    sub_1834D7F64(a1);
  }
  else
  {
    sub_1834D7F64(a1);
    nw_group_descriptor_t multiplex = 0;
  }
  *(void *)(v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = multiplex;
  return v2;
}

uint64_t NWMultiplexGroup.init(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1834D7F00(a1, v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  uint64_t v4 = NWEndpoint.nw.getter();
  if (v4)
  {
    nw_group_descriptor_t multiplex = nw_group_descriptor_create_multiplex(v4);
    swift_unknownObjectRelease();
    sub_1834D7F64(a1);
  }
  else
  {
    sub_1834D7F64(a1);
    nw_group_descriptor_t multiplex = 0;
  }
  *(void *)(v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = multiplex;
  return v2;
}

uint64_t sub_18357FBB4()
{
  return swift_unknownObjectRetain();
}

uint64_t NWMultiplexGroup.deinit()
{
  sub_1834D7F64(v0 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWMultiplexGroup.__deallocating_deinit()
{
  sub_1834D7F64(v0 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t NWApplicationServiceGroup.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_18357FC80(NSObject *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_183D445FC();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw) = a1;
  long long v14 = 0uLL;
  uint64_t v7 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_get_id(v7, &v14);
  sub_183D445CC();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID, v6, v3);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v13;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_183583F8C;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_1832FF164;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1832FF10C;
  aBlock[3] = &block_descriptor_90;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_group_descriptor_enumerate_endpoints(a1, v10);
  swift_unknownObjectRelease();
  _Block_release(v10);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (a1) {
    __break(1u);
  }
  *(void *)(v1 + 16) = v13;
  swift_release();
  return v1;
}

uint64_t sub_18357FF08(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = swift_unknownObjectRetain();
  sub_18315A830(v13, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_183138A24((uint64_t)v5, qword_1EB266A50);
  }
  else
  {
    sub_18315E28C((uint64_t)v5, (uint64_t)v12);
    sub_1834D7F00((uint64_t)v12, (uint64_t)v10);
    unint64_t v14 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_1832FFC34(0, *(void *)(v14 + 16) + 1, 1, v14);
      *a2 = v14;
    }
    unint64_t v17 = *(void *)(v14 + 16);
    unint64_t v16 = *(void *)(v14 + 24);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_1832FFC34(v16 > 1, v17 + 1, 1, v14);
      *a2 = v14;
    }
    *(void *)(v14 + 16) = v17 + 1;
    sub_18315E28C((uint64_t)v10, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17);
    sub_1834D7F64((uint64_t)v12);
  }
  return 1;
}

uint64_t NWApplicationServiceGroup.__allocating_init(for:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  NWApplicationServiceGroup.init(for:id:)(a1, a2);
  return v4;
}

uint64_t NWApplicationServiceGroup.init(for:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v30[1] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    *(void *)(v2 + 16) = a1;
    uint64_t v10 = v2 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
    uint64_t v11 = sub_183D445FC();
    uint64_t v12 = a2;
    uint64_t v13 = *(void *)(v11 - 8);
    unint64_t v14 = *(void (**)(uint64_t))(v13 + 16);
    uint64_t v28 = v12;
    v14(v10);
    if (*(void *)(a1 + 16))
    {
      sub_1834D7F00(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v9);
      swift_bridgeObjectRetain();
      nw_endpoint_t v15 = NWEndpoint.nw.getter();
      sub_1834D7F64((uint64_t)v9);
      if (v15)
      {
        *(void *)&long long v29 = sub_183D445DC();
        WORD4(v29) = v16;
        BYTE10(v29) = v17;
        BYTE11(v29) = v18;
        BYTE12(v29) = v19;
        BYTE13(v29) = v20;
        BYTE14(v29) = v21;
        HIBYTE(v29) = v22;
        sub_183580508(&v29, v15, a1, v30);
        swift_bridgeObjectRelease();
        uint64_t v23 = v30[0];
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v11);
        swift_unknownObjectRelease();
LABEL_8:
        *(void *)(v3 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw) = v23;
        return v3;
      }
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v11);
    uint64_t v23 = 0;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  sub_1834AC424();
  swift_allocError();
  *(_DWORD *)uint64_t v24 = 22;
  *(unsigned char *)(v24 + 4) = 0;
  swift_willThrow();
  uint64_t v25 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a2, v25);
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t sub_183580508@<X0>(_OWORD *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v41 = a4;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F647A0);
  MEMORY[0x1F4188790](v51);
  uint64_t v53 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v40 - v12;
  MEMORY[0x1F4188790](v11);
  nw_endpoint_t v15 = (char *)&v40 - v14;
  uint64_t v16 = type metadata accessor for NWEndpoint();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v42 = (uint64_t)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v18);
  uint64_t v52 = (char *)&v40 - v21;
  if (!a1)
  {
    __break(1u);
    return result;
  }
  application_service = nw_group_descriptor_create_application_service(a2, a1);
  uint64_t result = a3;
  uint64_t v22 = *(void *)(a3 + 16);
  if (!v22) {
    goto LABEL_16;
  }
  uint64_t v23 = result + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v24 = *(void *)(v17 + 72);
  int v48 = (void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
  uint64_t v49 = v24;
  uint64_t v47 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v40 = result;
  swift_bridgeObjectRetain();
  uint64_t v50 = v23;
  uint64_t v25 = (uint64_t)v52;
  uint64_t v44 = v16;
  uint64_t v45 = v15;
  do
  {
    sub_1834D7F00(v23, v25);
    sub_1834D7F00(v25, (uint64_t)v15);
    uint64_t v26 = *v48;
    (*v48)(v15, 0, 1, v16);
    sub_1834D7F00(v50, (uint64_t)v13);
    v26(v13, 0, 1, v16);
    uint64_t v27 = v53;
    uint64_t v28 = v53 + *(int *)(v51 + 48);
    sub_183577140((uint64_t)v15, v53);
    sub_183577140((uint64_t)v13, v28);
    long long v29 = *v47;
    if ((*v47)(v27, 1, v16) == 1)
    {
      sub_183138A24((uint64_t)v13, qword_1EB266A50);
      sub_183138A24((uint64_t)v15, qword_1EB266A50);
      if (v29(v28, 1, v16) == 1)
      {
        sub_183138A24(v53, qword_1EB266A50);
        uint64_t v25 = (uint64_t)v52;
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v30 = v53;
      uint64_t v31 = (uint64_t)v13;
      uint64_t v32 = v46;
      sub_183577140(v53, v46);
      if (v29(v28, 1, v16) != 1)
      {
        uint64_t v35 = v42;
        sub_18315E28C(v28, v42);
        char v36 = _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0(v32, v35);
        sub_1834D7F64(v35);
        unint64_t v37 = (char *)v31;
        sub_183138A24(v31, qword_1EB266A50);
        nw_endpoint_t v15 = v45;
        sub_183138A24((uint64_t)v45, qword_1EB266A50);
        uint64_t v38 = v32;
        uint64_t v13 = v37;
        sub_1834D7F64(v38);
        sub_183138A24(v30, qword_1EB266A50);
        uint64_t v25 = (uint64_t)v52;
        uint64_t v16 = v44;
        if (v36) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }
      uint64_t v33 = (char *)v31;
      sub_183138A24(v31, qword_1EB266A50);
      nw_endpoint_t v15 = v45;
      sub_183138A24((uint64_t)v45, qword_1EB266A50);
      uint64_t v34 = v32;
      uint64_t v13 = v33;
      sub_1834D7F64(v34);
      uint64_t v16 = v44;
    }
    sub_183138A24(v53, &qword_1E8F647A0);
    uint64_t v25 = (uint64_t)v52;
LABEL_13:
    nw_interface_t v39 = NWEndpoint.nw.getter();
    if (v39)
    {
      nw_group_descriptor_add_endpoint((nw_group_descriptor_t)application_service, v39);
      swift_unknownObjectRelease();
    }
LABEL_5:
    sub_1834D7F64(v25);
    v23 += v49;
    --v22;
  }
  while (v22);
  uint64_t result = swift_bridgeObjectRelease();
LABEL_16:
  *uint64_t v41 = application_service;
  return result;
}

uint64_t NWApplicationServiceGroup.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
  uint64_t v2 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWApplicationServiceGroup.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
  uint64_t v2 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t NWConnectionGroup.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 24), sel_description);
  uint64_t v2 = sub_183D44AFC();

  return v2;
}

uint64_t sub_183580B20@<X0>(nw_error_t error@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  switch((int)result)
  {
    case 0:
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000000;
      break;
    case 1:
      if (error)
      {
        nw_error_domain_t error_domain = nw_error_get_error_domain(error);
        switch(error_domain)
        {
          case nw_error_domain_tls:
            unsigned int error_code = nw_error_get_error_code(error);
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = error_code | 0x200000000;
            break;
          case nw_error_domain_dns:
            unsigned int v9 = nw_error_get_error_code(error);
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = v9 | 0x100000000;
            break;
          case nw_error_domain_posix:
            nw_error_get_error_code(error);
            uint64_t v7 = sub_183D449AC();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = 22;
            if ((v7 & 0x100000000) == 0) {
              unint64_t v5 = v7;
            }
            break;
          default:
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = 22;
            break;
        }
      }
      else
      {
        unint64_t v5 = 50;
      }
      break;
    case 2:
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000001;
      break;
    case 3:
      uint64_t result = (uint64_t)sub_1832E6D08(error, (uint64_t)&v10);
      unint64_t v5 = 0x4000000016;
      if (v11 != 255) {
        unint64_t v5 = v10 | ((unint64_t)v11 << 32) | 0x4000000000;
      }
      break;
    default:
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000002;
      break;
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 4) = BYTE4(v5);
  return result;
}

void NWConnectionGroup.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  unint64_t v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_183580D1C(v4, a1);

  os_unfair_lock_unlock(v5);
}

uint64_t sub_183580D1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 40);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(result + 44);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t (*NWConnectionGroup.stateUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 18;
  os_unfair_lock_lock(v1 + 18);
  sub_183581204(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0;
  }
  long long v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_18313D738;
}

double sub_183580DDC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  long long v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_183581204(v4, (uint64_t (**)())&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_183580E48(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_1834CCB54;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_1834CCAF0(v1, v2);
  return NWConnectionGroup.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t NWConnectionGroup.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v6 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v7 = (uint64_t)&v6[4];
  uint64_t v8 = v6 + 18;
  os_unfair_lock_lock(v6 + 18);
  sub_18358338C(v7, aBlock);
  os_unfair_lock_unlock(v8);
  if (LOBYTE(aBlock[0]) != 1) {
    return sub_1834CCAEC(a1, a2);
  }
  unsigned int v9 = *(NSObject **)(v2 + 24);
  unsigned int v10 = (void *)swift_allocObject();
  v10[2] = v3;
  v10[3] = a1;
  v10[4] = a2;
  aBlock[4] = sub_183583444;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_183581194;
  aBlock[3] = &block_descriptor_16;
  unsigned __int8 v11 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  sub_1834CCAF0(a1, a2);
  swift_release();
  nw_connection_group_set_state_changed_handler(v9, v11);
  sub_1834CCAEC(a1, a2);
  _Block_release(v11);
  return swift_unknownObjectRelease();
}

void sub_183581044(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(int *))
{
  long long v5 = *(os_unfair_lock_s **)(a3 + 16);
  uint64_t v6 = (uint64_t)&v5[4];
  uint64_t v7 = v5 + 18;
  os_unfair_lock_lock(v5 + 18);
  sub_183583FA4(v6, (uint64_t)&v8);
  os_unfair_lock_unlock(v7);
  if (a4) {
    a4(&v8);
  }
}

uint64_t sub_1835810E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X8>)
{
  swift_unknownObjectRetain();
  uint64_t result = sub_183580B20(a3, a2, (uint64_t)&v11);
  unsigned int v9 = v11;
  unint64_t v10 = v11 | ((unint64_t)v12 << 32);
  *(unsigned char *)(a1 + 44) = v12;
  *(_DWORD *)(a1 + 40) = v9;
  if (v10 >= 0x8000000002)
  {
    uint64_t result = nw_utilities_minos_atleast(1);
    if (result)
    {
      sub_1834CCAEC(*(void *)(a1 + 8), *(void *)(a1 + 16));
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      uint64_t result = sub_1834CCAEC(*(void *)(a1 + 24), *(void *)(a1 + 32));
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
    }
  }
  *(_DWORD *)a4 = v10;
  *(unsigned char *)(a4 + 4) = BYTE4(v10);
  return result;
}

uint64_t sub_183581194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_183581204@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18313D760;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_1834CCAF0(v3, v4);
}

uint64_t (*NWConnectionGroup.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_183581204(v4, v10);
  os_unfair_lock_unlock(v5);
  if (v10[0])
  {
    long long v9 = *(_OWORD *)v10;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = v9;
    uint64_t v7 = sub_1834CCB54;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v7;
  a1[1] = (uint64_t (*)())v6;
  return sub_18358134C;
}

uint64_t sub_18358134C(uint64_t *a1, char a2)
{
  return sub_1835825E4(a1, a2, NWConnectionGroup.stateUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183584058, sub_18358405C);
}

NSObject *NWConnectionGroup.metadata(definition:)(uint64_t a1)
{
  uint64_t result = nw_connection_group_copy_protocol_metadata(*(nw_connection_group_t *)(v1 + 24), *(nw_protocol_definition_t *)(a1 + 32));
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_1835312A8((uint64_t)result);
    if (v4)
    {
      return (*(uint64_t (**))(v4 + 96))(v3);
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1835813FC()
{
  type metadata accessor for NWConnectionGroup.Message();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 16) = &__block_literal_global_42249;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 40) = 0;
  uint64_t v1 = swift_unknownObjectRetain_n();
  *(unsigned char *)(v0 + 64) = nw_content_context_get_is_final(v1);
  nw_content_context_get_identifier((nw_content_context_t)&__block_literal_global_42249);
  uint64_t v2 = sub_183D44C9C();
  uint64_t v4 = v3;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 72) = 0;
  qword_1E8F64720 = v0;
  return result;
}

uint64_t static NWConnectionGroup.Message.default.getter()
{
  if (qword_1E8F62190 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_1835814EC@<X0>(uint64_t a1@<X8>)
{
  return sub_18358151C((uint64_t (*)(uint64_t, uint64_t))nw_connection_group_copy_remote_endpoint_for_message, a1);
}

uint64_t sub_183581504@<X0>(uint64_t a1@<X8>)
{
  return sub_18358151C((uint64_t (*)(uint64_t, uint64_t))nw_connection_group_copy_local_endpoint_for_message, a1);
}

uint64_t sub_18358151C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 72);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 24);
    uint64_t v7 = *(void *)(v2 + 16);
    swift_retain();
    int v8 = a1(v6, v7);
    sub_18315A830(v8, a2);
    return swift_release();
  }
  else
  {
    uint64_t v10 = type metadata accessor for NWEndpoint();
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    return v11(a2, 1, 1, v10);
  }
}

uint64_t sub_1835815F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 72);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(NSObject **)(v2 + 24);
  uint64_t v4 = *(NSObject **)(v1 + 16);
  uint64_t v5 = *(NSObject **)(a1 + 32);
  swift_retain();
  uint64_t v6 = nw_connection_group_copy_protocol_metadata_for_message(v3, v4, v5);
  uint64_t v7 = (uint64_t)v6;
  if (v6)
  {
    uint64_t v8 = sub_1835312A8((uint64_t)v6);
    if (v8)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(v8 + 96))(v7);
      goto LABEL_5;
    }
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_5:
  swift_release();
  return v7;
}

uint64_t sub_1835816A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 72);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v3 + 24);
    uint64_t v5 = *(NSObject **)(v1 + 16);
    swift_retain();
    uint64_t v6 = nw_connection_group_copy_path_for_message(v4, v5);
    sub_1831DF470(v6, a1);
    swift_release();
    uint64_t v7 = type metadata accessor for NWPath(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a1;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v12 = type metadata accessor for NWPath(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v9 = v12;
    uint64_t v10 = a1;
    uint64_t v11 = 1;
  }

  return v8(v10, v11, 1, v9);
}

void sub_183581784(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 72);
  if (v4)
  {
    swift_retain();
    if (a2 >> 60 == 15) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (void *)sub_183D4452C();
    }
    uint64_t v9 = NWCreateDispatchDataFromNSData(v8, v7);

    uint64_t v10 = *(NSObject **)(v4 + 24);
    uint64_t v11 = *(NSObject **)(v3 + 16);
    uint64_t v12 = *(NSObject **)(a3 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if (v9)
    {
      uint64_t v13 = v9;
      nw_connection_group_reply(v10, v11, v12, v13);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      nw_connection_group_reply(v10, v11, v12, 0);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    swift_release();
  }
}

NSObject *sub_1835818BC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(NSObject **)(v1 + 24);
  uint64_t v3 = *(NSObject **)(v0 + 16);
  swift_retain();
  connection_for_message = nw_connection_group_extract_connection_for_message(v2, v3);
  if (connection_for_message)
  {
    uint64_t v5 = swift_retain();
    connection_for_message = sub_18315A340(v5, connection_for_message);
  }
  swift_release();
  return connection_for_message;
}

void NWConnectionGroup.Message.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  *(void *)(swift_allocObject() + 72) = 0;
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(a1, a2, a3, a4, a5, a6, a7);
}

void NWConnectionGroup.Message.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  *(void *)(v7 + 72) = 0;
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t NWConnectionGroup.Message.__allocating_init(nw:)(NSObject *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = swift_unknownObjectRetain();
  *(void *)(v2 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v2 + 48) = nw_content_context_get_relative_priority(a1);
  *(unsigned char *)(v2 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v2 + 24) = sub_183D44C9C();
  *(void *)(v2 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  uint64_t v6 = sub_1832E5FFC(v5);
  swift_unknownObjectRelease();
  *(void *)(v2 + 56) = v6;
  return v2;
}

uint64_t NWConnectionGroup.Message.init(nw:)(NSObject *a1)
{
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 16) = a1;
  uint64_t v3 = swift_unknownObjectRetain();
  *(void *)(v1 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v1 + 48) = nw_content_context_get_relative_priority(a1);
  *(unsigned char *)(v1 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v1 + 24) = sub_183D44C9C();
  *(void *)(v1 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  *(void *)(v1 + 56) = sub_1832E5FFC(v5);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_183581AE0()
{
  return swift_release();
}

uint64_t NWConnectionGroup.Message.deinit()
{
  uint64_t v0 = NWConnection.ContentContext.deinit();
  swift_release();
  return v0;
}

uint64_t NWConnectionGroup.Message.__deallocating_deinit()
{
  NWConnection.ContentContext.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

void NWConnectionGroup.setReceiveHandler(maximumMessageSize:rejectOversizedMessages:handler:)(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1 > 0xFFFFFFFE) {
    uint32_t v6 = -1;
  }
  else {
    uint32_t v6 = a1;
  }
  if (a3)
  {
    uint64_t v9 = *(NSObject **)(v4 + 24);
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v4;
    v10[3] = a3;
    v10[4] = a4;
    v13[4] = sub_183583454;
    v13[5] = v10;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1107296256;
    void v13[2] = sub_183581DDC;
    v13[3] = &block_descriptor_13_0;
    uint64_t v11 = _Block_copy(v13);
    sub_1834CCAF0(a3, a4);
    sub_1834CCAF0(a3, a4);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_connection_group_set_receive_handler(v9, v6, a2 & 1, v11);
    _Block_release(v11);
    swift_unknownObjectRelease();
    sub_1834CCAEC(a3, a4);
  }
  else
  {
    uint64_t v12 = *(NSObject **)(v4 + 24);
    nw_connection_group_set_receive_handler(v12, v6, a2 & 1, 0);
  }
}

uint64_t sub_183581CDC(void *a1, NSObject *a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, unint64_t, void))
{
  type metadata accessor for NWConnectionGroup.Message();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 72) = 0;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 40) = 0;
  swift_retain();
  uint64_t v11 = swift_unknownObjectRetain();
  *(unsigned char *)(v10 + 64) = nw_content_context_get_is_final(v11);
  nw_content_context_get_identifier(a2);
  *(void *)(v10 + 24) = sub_183D44C9C();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 72) = a4;
  uint64_t v13 = NWCreateNSDataFromDispatchData(a1);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_183D4453C();
    unint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v17 = 0xF000000000000000;
  }
  a5(v10, v15, v17, a3 & 1);
  sub_1832E669C(v15, v17);

  return swift_release();
}

void sub_183581DDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v8 = a2;
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
}

uint64_t NWConnectionGroup.send(content:to:message:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(NSObject **)(v6 + 24);
  swift_unknownObjectRetain();
  if (a2 >> 60 == 15) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = (void *)sub_183D4452C();
  }
  uint64_t v18 = NWCreateDispatchDataFromNSData(v17, v16);

  sub_183577140(a3, (uint64_t)v14);
  uint64_t v19 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v14, 1, v19) == 1)
  {
    sub_183138A24((uint64_t)v14, qword_1EB266A50);
    char v20 = 0;
  }
  else
  {
    char v20 = NWEndpoint.nw.getter();
    sub_1834D7F64((uint64_t)v14);
  }
  uint64_t v21 = *(NSObject **)(a4 + 16);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a5;
  *(void *)(v22 + 24) = a6;
  aBlock[4] = sub_1832E6CC8;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1832E6C64;
  aBlock[3] = &block_descriptor_19_0;
  uint64_t v23 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_group_send_message(v15, v18, v20, v21, v23);
  _Block_release(v23);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t (*NWConnectionGroup.newConnectionHandler.getter())(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 18;
  os_unfair_lock_lock(v1 + 18);
  sub_18358245C(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0;
  }
  long long v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1834F240C;
}

double sub_183582158@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  long long v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_18358245C(v4, &v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1835821C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_1835840AC;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_1834CCAF0(v1, v2);
  NWConnectionGroup.newConnectionHandler.setter((uint64_t)v4, v3);
}

void NWConnectionGroup.newConnectionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v6 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v7 = (uint64_t)&v6[4];
  id v8 = v6 + 18;
  os_unfair_lock_lock(v6 + 18);
  sub_183583460(v7);
  os_unfair_lock_unlock(v8);
  if (a1)
  {
    uint64_t v9 = *(NSObject **)(v2 + 24);
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v3;
    v10[3] = a1;
    v10[4] = a2;
    aBlock[4] = sub_1835834C0;
    aBlock[5] = v10;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1832E6CC4;
    aBlock[3] = &block_descriptor_28;
    uint64_t v11 = _Block_copy(aBlock);
    sub_1834CCAF0(a1, a2);
    sub_1834CCAF0(a1, a2);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_connection_group_set_new_connection_handler(v9, v11);
    sub_1834CCAEC(a1, a2);
    _Block_release(v11);
    swift_unknownObjectRelease();
    sub_1834CCAEC(a1, a2);
  }
  else
  {
    nw_connection_group_set_new_connection_handler(*(nw_connection_group_t *)(v2 + 24), 0);
  }
}

void sub_1835823C4(NSObject *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = *(void *)(a2 + 48);
  swift_retain();
  swift_unknownObjectRetain();
  if (sub_18315A340(v5, a1))
  {
    a3();
    swift_release();
  }
  else
  {
    nw_connection_cancel(a1);
  }
}

uint64_t sub_18358245C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    long long v6 = sub_1834F9994;
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_1834CCAF0(v3, v4);
}

uint64_t (*NWConnectionGroup.newConnectionHandler.modify(uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_18358245C(v4, &v10);
  os_unfair_lock_unlock(v5);
  if ((void)v10)
  {
    long long v9 = v10;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = v9;
    uint64_t v7 = sub_1835840AC;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v7;
  a1[1] = (uint64_t (*)(uint64_t))v6;
  return sub_1835825A4;
}

uint64_t sub_1835825A4(uint64_t *a1, char a2)
{
  return sub_1835825E4(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWConnectionGroup.newConnectionHandler.setter, (void (*)(uint64_t, uint64_t))sub_1834CCAF0, sub_1834CCAEC);
}

uint64_t sub_1835825E4(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t NWConnectionGroup.extract(connectionTo:using:)(uint64_t a1, NSObject *isa)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *(NSObject **)(v2 + 24);
  sub_183577140(a1, (uint64_t)v7);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9);
  swift_unknownObjectRetain();
  if (v10 != 1)
  {
    uint64_t v11 = NWEndpoint.nw.getter();
    sub_1834D7F64((uint64_t)v7);
    if (!isa) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_183138A24((uint64_t)v7, qword_1EB266A50);
  uint64_t v11 = 0;
  if (isa)
  {
LABEL_5:
    isa = isa[2].isa;
    swift_unknownObjectRetain();
  }
LABEL_6:
  connection = nw_connection_group_extract_connection(v8, v11, isa);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (connection) {
    return _s7Network12NWConnectionCyACSgSo16OS_nw_connection_pcfC_0(connection);
  }
  else {
    return 0;
  }
}

BOOL NWConnectionGroup.reinsert(connection:)(uint64_t a1)
{
  return nw_connection_group_reinsert_extracted_connection(*(nw_connection_group_t *)(v1 + 24), *(nw_connection_t *)(a1 + 16));
}

uint64_t NWConnectionGroup.descriptor.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWConnectionGroup.parameters.getter()
{
  return swift_retain();
}

uint64_t NWConnectionGroup.__allocating_init(with:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = sub_1835834CC(a1, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  return v6;
}

uint64_t NWConnectionGroup.init(with:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_1835834CC(a1, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t sub_1835828F0(NSObject *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64798);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 72) = 0;
  *(unsigned char *)(v7 + 16) = 0;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(unsigned char *)(v7 + 60) = 0x80;
  *(_DWORD *)(v7 + 56) = 0;
  *(void *)(v7 + 64) = 0;
  v2[2] = v7;
  nw_parameters_t v8 = nw_connection_group_copy_parameters(a1);
  type metadata accessor for NWParameters();
  uint64_t v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = v8;
  *(void *)(v9 + 16) = v10;
  v2[6] = v9;
  nw_group_descriptor_t v11 = nw_connection_group_copy_descriptor(a1);
  int type = nw_group_descriptor_get_type(v11);
  if (type == 1)
  {
    type metadata accessor for NWMulticastGroup(0);
    uint64_t v18 = swift_allocObject();
    sub_18357ED18(v11);
    uint64_t v19 = &protocol witness table for NWMulticastGroup;
LABEL_8:
    v2[4] = v18;
    v2[5] = v19;
    v2[3] = a1;
    return (uint64_t)v2;
  }
  if (type == 3)
  {
    type metadata accessor for NWApplicationServiceGroup(0);
    uint64_t v18 = swift_allocObject();
    sub_18357FC80(v11);
    uint64_t v19 = &protocol witness table for NWApplicationServiceGroup;
    goto LABEL_8;
  }
  if (type != 2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance();
    return 0;
  }
  type metadata accessor for NWMultiplexGroup(0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = v11;
  uint64_t v14 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_copy_member(v14);
  uint64_t v15 = swift_unknownObjectRetain();
  sub_18315A830(v15, (uint64_t)v6);
  uint64_t v16 = type metadata accessor for NWEndpoint();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v6, 1, v16);
  if (result != 1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_18315E28C((uint64_t)v6, v13 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
    v2[4] = v13;
    v2[5] = &protocol witness table for NWMultiplexGroup;
    v2[3] = a1;
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

uint64_t NWConnectionGroup.__allocating_init(_:)(NSObject *a1)
{
  return sub_1835828F0(a1);
}

void NWConnectionGroup.start(queue:)(NSObject *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v5 = (uint64_t)&v4[4];
  uint64_t v6 = v4 + 18;
  os_unfair_lock_lock(v4 + 18);
  sub_183583678(v5);
  os_unfair_lock_unlock(v6);
  os_unfair_lock_lock(v6);
  sub_183581204(v5, v11);
  os_unfair_lock_unlock(v6);
  if (v11[0])
  {
    long long v10 = *(_OWORD *)v11;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    nw_parameters_t v8 = sub_1834CCB54;
  }
  else
  {
    nw_parameters_t v8 = 0;
    uint64_t v7 = 0;
  }
  sub_1834CCAF0(v8, v7);
  sub_1834CCAF0(v8, v7);
  NWConnectionGroup.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_1834CCAEC(v8, v7);
  sub_1834CCAEC(v8, v7);
  uint64_t v9 = *(NSObject **)(v1 + 24);
  nw_connection_group_set_queue(*(nw_connection_group_t *)(v2 + 24), a1);
  nw_connection_group_start(v9);
}

uint64_t NWConnectionGroup.queue.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 18;
  os_unfair_lock_lock(v1 + 18);
  sub_183582D78(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

id sub_183582D78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 48);
  *a2 = v2;
  return v2;
}

Swift::Void __swiftcall NWConnectionGroup.cancel()()
{
  nw_connection_group_cancel(*(nw_connection_group_t *)(v0 + 24));
}

uint64_t NWConnectionGroup.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t NWConnectionGroup.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t NWConnection.__allocating_init(message:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = *(NSObject **)(v5 + 24);
  uint64_t v7 = *(NSObject **)(a1 + 16);
  swift_retain();
  nw_connection_t connection_for_message = nw_connection_group_extract_connection_for_message(v6, v7);
  if (!connection_for_message)
  {
    swift_release();
LABEL_7:
    swift_release();
    return 0;
  }
  uint64_t v9 = connection_for_message;
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_18315A340(v10, v9);
  swift_release();
  if (!v11) {
    goto LABEL_7;
  }
  sub_1834D7F00(v11 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t)v4);
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtC7Network13_NWConnection_parameters);
  uint64_t v13 = *(void *)(v11 + 16);
  swift_allocObject();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v14 = sub_18315E310((uint64_t)v4, v12, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v14;
}

uint64_t NWConnection.__allocating_init(from:to:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v37 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v36 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v38 = (uint64_t)&v36 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  unint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v39 = a1;
  uint64_t v20 = *(NSObject **)(a1 + 24);
  sub_183577140(a2, (uint64_t)&v36 - v18);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v22 = v21(v19, 1, v6);
  swift_unknownObjectRetain();
  if (v22 == 1)
  {
    sub_183138A24((uint64_t)v19, qword_1EB266A50);
    uint64_t v23 = 0;
    uint64_t v40 = a2;
    if (a3)
    {
LABEL_3:
      uint64_t v24 = *(NSObject **)(a3 + 16);
      swift_unknownObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v23 = NWEndpoint.nw.getter();
    sub_1834D7F64((uint64_t)v19);
    uint64_t v40 = a2;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v24 = 0;
LABEL_6:
  connection = nw_connection_group_extract_connection(v20, v23, v24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (connection)
  {
    uint64_t v26 = nw_connection_copy_endpoint(connection);
    sub_18315A830(v26, (uint64_t)v17);
    if (!v21(v17, 1, v6))
    {
      sub_18315E28C((uint64_t)v17, (uint64_t)v12);
      uint64_t v29 = v38;
      sub_18315E28C((uint64_t)v12, v38);
      uint64_t v30 = nw_connection_copy_parameters(connection);
      nw_parameters_t v31 = nw_parameters_copy(v30);
      swift_unknownObjectRelease();
      type metadata accessor for NWParameters();
      uint64_t v32 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
      uint64_t v33 = swift_allocObject();
      *(_DWORD *)(v33 + 24) = 0;
      *(void *)(v33 + 16) = v31;
      *(void *)(v32 + 16) = v33;
      uint64_t v34 = v37;
      sub_1834D7F00(v29, v37);
      swift_allocObject();
      uint64_t v28 = sub_18315E310(v34, v32, (uint64_t)connection);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      sub_183138A24(v40, qword_1EB266A50);
      sub_1834D7F64(v29);
      return v28;
    }
    sub_183138A24((uint64_t)v17, qword_1EB266A50);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v27 = v40;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v27 = v40;
  }
  sub_183138A24(v27, qword_1EB266A50);
  return 0;
}

uint64_t sub_183583354()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18358338C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  sub_1834CCAF0(v6, v5);
  uint64_t result = sub_1834CCAEC(v7, v8);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v5;
  *a2 = *(unsigned char *)a1;
  return result;
}

uint64_t sub_1835833FC()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return swift_deallocObject();
}

void sub_183583444(uint64_t a1, uint64_t a2)
{
  sub_183581044(a1, a2, *(void *)(v2 + 16), *(void (**)(int *))(v2 + 24));
}

uint64_t sub_183583454(void *a1, NSObject *a2, char a3)
{
  return sub_183581CDC(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(uint64_t, uint64_t, unint64_t, void))(v3 + 24));
}

uint64_t sub_183583460(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  sub_1834CCAF0(v4, v3);
  uint64_t result = sub_1834CCAEC(v5, v6);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v3;
  return result;
}

void sub_1835834C0(NSObject *a1)
{
  sub_1835823C4(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_1835834CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64798);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 72) = 0;
  *(unsigned char *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(v8 + 60) = 0x80;
  *(_DWORD *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  v4[2] = v8;
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  type metadata accessor for NWMultiplexGroup(0);
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    uint64_t v10 = *(NSObject **)(v9 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw);
    if (v10) {
      goto LABEL_8;
    }
    __break(1u);
  }
  type metadata accessor for NWApplicationServiceGroup(v9);
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11) {
    goto LABEL_7;
  }
  uint64_t v10 = *(NSObject **)(v11 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw);
  if (v10)
  {
LABEL_8:
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = (void *)(v13 + 16);
    uint64_t v15 = (os_unfair_lock_s *)(v13 + 24);
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v15);
    sub_1834A4678(v14, &parameters);
    os_unfair_lock_unlock(v15);
    nw_connection_group_t v16 = nw_connection_group_create(v10, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v4[3] = v16;
    sub_1834CCAF0(0, 0);
    NWConnectionGroup.stateUpdateHandler.setter(0, 0);
    return (uint64_t)v4;
  }
  __break(1u);
LABEL_7:
  type metadata accessor for NWMulticastGroup(v11);
  uint64_t result = swift_dynamicCastClassUnconditional();
  uint64_t v10 = *(NSObject **)(result + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw);
  if (v10) {
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_183583678(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(void **)(a1 + 48);
  id v5 = v3;

  *(void *)(a1 + 48) = v3;
  *(unsigned char *)a1 = 1;
}

uint64_t dispatch thunk of NWGroupDescriptor.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1835836E8()
{
  return type metadata accessor for NWMulticastGroup(0);
}

void sub_1835836F0()
{
  sub_1835197A0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NWMulticastGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWMulticastGroup);
}

uint64_t dispatch thunk of NWMulticastGroup.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of NWMulticastGroup.__allocating_init(for:from:disableUnicast:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of NWMulticastGroup.nw.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t sub_18358382C()
{
  return type metadata accessor for NWMultiplexGroup(0);
}

uint64_t sub_183583834()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NWMultiplexGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWMultiplexGroup);
}

uint64_t dispatch thunk of NWMultiplexGroup.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of NWMultiplexGroup.__allocating_init(to:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWMultiplexGroup.nw.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t sub_183583940()
{
  return type metadata accessor for NWApplicationServiceGroup(0);
}

uint64_t type metadata accessor for NWApplicationServiceGroup(uint64_t a1)
{
  return sub_18315A7F8(a1, qword_1E8F61E38);
}

uint64_t sub_183583968()
{
  uint64_t result = sub_183D445FC();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NWApplicationServiceGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWApplicationServiceGroup);
}

uint64_t dispatch thunk of NWApplicationServiceGroup.__allocating_init(for:id:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for NWConnectionGroup()
{
  return self;
}

uint64_t method lookup function for NWConnectionGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWConnectionGroup);
}

uint64_t dispatch thunk of NWConnectionGroup.__allocating_init(with:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for NWConnectionGroup.State()
{
  return &type metadata for NWConnectionGroup.State;
}

uint64_t type metadata accessor for NWConnectionGroup.Message()
{
  return self;
}

uint64_t method lookup function for NWConnectionGroup.Message(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWConnectionGroup.Message);
}

uint64_t dispatch thunk of NWConnectionGroup.Message.remoteEndpoint.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.localEndpoint.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.metadata(definition:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.path.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.reply(content:message:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.extractConnection()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

void destroy for NWConnectionGroup.LockedState(void *a1)
{
  if (a1[1]) {
    swift_release();
  }
  if (a1[3]) {
    swift_release();
  }
  uint64_t v2 = (void *)a1[6];
}

uint64_t initializeWithCopy for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  uint64_t v8 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v11;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  swift_retain();
  swift_release();
LABEL_15:
  int v12 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v12;
  uint64_t v13 = *(void **)(a1 + 48);
  uint64_t v14 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v14;
  id v15 = v14;

  return a1;
}

uint64_t assignWithTake for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v11;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  swift_release();
LABEL_15:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  int v12 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnectionGroup.LockedState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnectionGroup.LockedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWConnectionGroup.LockedState()
{
  return &type metadata for NWConnectionGroup.LockedState;
}

uint64_t sub_183583F7C()
{
  return swift_deallocObject();
}

uint64_t sub_183583F8C(uint64_t a1)
{
  return sub_18357FF08(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_183583F94()
{
  return swift_deallocObject();
}

uint64_t sub_183583FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1835810E4(a1, *(unsigned int *)(v2 + 16), *(NSObject **)(v2 + 24), a2);
}

uint64_t sub_183583FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18358402C()
{
  return swift_deallocObject();
}

uint64_t sub_18358403C()
{
  return sub_18357EF14();
}

uint64_t sub_183584044()
{
  return swift_deallocObject();
}

void static BonjourMetadataProviders.None.none.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t BonjourMetadataProviders.None.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.None.makeMetadata(from:)()
{
  return 0;
}

uint64_t sub_1835840CC()
{
  return *v0;
}

void static BonjourMetadataProviders.Default.default.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BonjourMetadataProviders.Default.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.Default.makeMetadata(from:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (!*a1)
  {
    unint64_t v6 = sub_1835961E0(MEMORY[0x1E4FBC860]);
    NWTXTRecord.init(_:)(v6, v8);
    unint64_t v4 = v8[0];
    unint64_t v5 = v8[1];
  }
  *a2 = v4;
  a2[1] = v5;

  return sub_1834C4654(v3);
}

uint64_t sub_18358415C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (!*a1)
  {
    unint64_t v6 = sub_1835961E0(MEMORY[0x1E4FBC860]);
    NWTXTRecord.init(_:)(v6, v8);
    unint64_t v4 = v8[0];
    unint64_t v5 = v8[1];
  }
  *a2 = v4;
  a2[1] = v5;

  return sub_1834C4654(v3);
}

uint64_t BonjourMetadataProviders.DecodeResult.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.DecodeResult.makeMetadata(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    MEMORY[0x1F4188790](a1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63CE0);
    sub_1835843EC((void (*)(unsigned char *))sub_1835843A0, a2);
    sub_1834C80D8(v3);
    uint64_t v4 = sub_183D45B8C();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 0, 1, v4);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F63CE0);
    uint64_t v6 = sub_183D45B8C();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    return v7(a2, 1, 1, v6);
  }
}

uint64_t sub_1835843A0(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v6 = *(_OWORD *)(v1 + 40);
  uint64_t result = TXTRecordDecoder.decode<A>(_:from:)(v4, (uint64_t *)&v6);
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t sub_1835843EC@<X0>(void (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_183D45B8C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

void static BonjourMetadataProviders.Decode.decode(_:decoder:)(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BonjourMetadataProviders.Decode.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.Decode.makeMetadata(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1)
  {
    uint64_t v4 = a1[1];
    v10[0] = *a1;
    v10[1] = v4;
    uint64_t v5 = *(void *)(a2 + 16);
    TXTRecordDecoder.decode<A>(_:from:)(v5, v10);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = a3;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 56);
    uint64_t v7 = a3;
    uint64_t v8 = 1;
  }

  return v6(v7, v8, 1);
}

uint64_t sub_1835846C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BonjourMetadataProviders.Decode.makeMetadata(from:)(a1, a2, a3);
}

uint64_t BonjourEndpoint.id.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  sub_183D44C8C();
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t BonjourEndpoint.nw.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWBrowser.Result(0);
  return sub_18315E790(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t BonjourEndpoint.description.getter()
{
  return 0;
}

uint64_t sub_183584948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  sub_18315EE9C(a1, a9, type metadata accessor for NWBrowser.Result);
  uint64_t v18 = (int *)type metadata accessor for BonjourEndpoint();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9 + v18[7], a2, a10);
  uint64_t v20 = (void *)(a9 + v18[8]);
  void *v20 = a3;
  v20[1] = a4;
  uint64_t v21 = (void *)(a9 + v18[9]);
  *uint64_t v21 = a5;
  v21[1] = a6;
  int v22 = (void *)(a9 + v18[10]);
  *int v22 = a7;
  v22[1] = a8;
  return result;
}

uint64_t sub_183584A30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = BonjourEndpoint.id.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t BrowseDescriptorFactories.Bonjour.makeDescriptor()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  char v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))(*(void *)(a1 + 16));
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v9 = v3[2];
  uint64_t v8 = v3[3];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v5) {
    char v11 = 32;
  }
  else {
    char v11 = 0;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 32) = v11;
  return result;
}

uint64_t BrowseDescriptorFactories.Bonjour.makeEndpoint(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v5 = type metadata accessor for NWBrowser.Result(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v56 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v63 = a2;
  uint64_t v59 = v8;
  uint64_t v60 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_183D4536C();
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v65 = (char *)&v49 - v12;
  uint64_t v61 = AssociatedTypeWitness;
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  id v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for NWEndpoint();
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (uint64_t *)((char *)&v49 - v23);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v49 - v25;
  uint64_t v58 = v5;
  uint64_t v27 = *(int *)(v5 + 20);
  uint64_t v28 = a1;
  sub_18315E790(a1 + v27, (uint64_t)&v49 - v25, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  sub_18315E790((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = v17;
    uint64_t v52 = v15;
    uint64_t v53 = v10;
    uint64_t v30 = v57;
    uint64_t v31 = *v24;
    uint64_t v32 = v24[1];
    uint64_t v50 = v24[2];
    uint64_t v51 = v31;
    uint64_t v33 = v24[3];
    uint64_t v49 = v24[4];
    uint64_t v34 = v24[6];
    uint64_t v54 = v24[5];
    uint64_t v55 = v33;
    sub_18315E51C(v34);
    uint64_t v35 = v28;
    long long v67 = *(_OWORD *)(v28 + *(int *)(v58 + 28));
    uint64_t v36 = v65;
    (*(void (**)(long long *, uint64_t))(v60 + 16))(&v67, v59);
    sub_1834D7F64((uint64_t)v26);
    uint64_t v37 = v61;
    uint64_t v38 = v62;
    int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48))(v36, 1, v61);
    uint64_t v40 = v66;
    if (v39 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v53);
      uint64_t v41 = type metadata accessor for BonjourEndpoint();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
    }
    else
    {
      uint64_t v64 = v32;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      v44(v29, v36, v37);
      uint64_t v45 = v35;
      uint64_t v46 = v56;
      sub_18315E790(v45, v56, type metadata accessor for NWBrowser.Result);
      uint64_t v47 = (uint64_t)v52;
      v44(v52, v29, v37);
      sub_183584948(v46, v47, v51, v64, v50, v55, v49, v54, v40, v37);
      uint64_t v48 = type metadata accessor for BonjourEndpoint();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v40, 0, 1, v48);
    }
  }
  else
  {
    sub_18315E790((uint64_t)v26, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for UnexpectedEndpointType();
    sub_183584FF8();
    swift_allocError();
    sub_18315EE9C((uint64_t)v21, v43, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    swift_willThrow();
    sub_1834D7F64((uint64_t)v26);
    return sub_1834D7F64((uint64_t)v24);
  }
}

unint64_t sub_183584FF8()
{
  unint64_t result = qword_1E8F647A8[0];
  if (!qword_1E8F647A8[0])
  {
    type metadata accessor for UnexpectedEndpointType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E8F647A8);
  }
  return result;
}

uint64_t type metadata accessor for BonjourEndpoint()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t BrowseDescriptorFactories.Bonjour.browseParameters.getter()
{
  type metadata accessor for NWParameters();
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t sub_1835850D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BrowseDescriptorFactories.Bonjour.makeEndpoint(from:)(a1, a2, a3);
}

uint64_t sub_1835850E8()
{
  type metadata accessor for NWParameters();
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t static BrowseDescriptorFactories.Bonjour.bonjour(_:domain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)(a5 + 32) = 1;
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t _s7Network25BrowseDescriptorFactoriesO7BonjourV7bonjour_6domain8metadataQrSS_SSSgxtFZ_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v16);
  *(void *)a6 = a1;
  *((void *)a6 + 1) = a2;
  *((void *)a6 + 2) = a3;
  *((void *)a6 + 3) = a4;
  uint64_t v17 = type metadata accessor for BrowseDescriptorFactories.Bonjour();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&a6[*(int *)(v17 + 40)], v14, a5);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _s7Network8Browser1C3for5usingACyAA25BrowseDescriptorFactoriesO7BonjourVy_AA0H17MetadataProvidersO4NoneVGGAN_AA12NWParametersCSgtcANRszrlufC_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  char v6 = *((unsigned char *)a1 + 32);
  if (a2)
  {
    uint64_t v7 = a2;
  }
  else
  {
    type metadata accessor for NWParameters();
    uint64_t v7 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    nw_parameters_t v8 = nw_parameters_create();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
    uint64_t v9 = swift_allocObject();
    *(_DWORD *)(v9 + 24) = 0;
    *(void *)(v9 + 16) = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = v9;
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v2;
  *(void *)(result + 32) = v5;
  *(void *)(result + 40) = v4;
  *(unsigned char *)(result + 48) = v6;
  *(void *)(result + 56) = v7;
  return result;
}

uint64_t _s7Network8Browser1C3for5usingACyAA25BrowseDescriptorFactoriesO7BonjourVy_AA0H17MetadataProvidersO12DecodeResultVy_qd__GGGAO_AA12NWParametersCSgtcAORszSeRd__s8SendableRd__lufC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 32);
  v8[0] = *(void *)a1;
  v8[1] = v2;
  long long v9 = *(_OWORD *)(a1 + 16);
  char v10 = v3;
  if (a2)
  {
    uint64_t v4 = a2;
  }
  else
  {
    type metadata accessor for NWParameters();
    uint64_t v4 = swift_allocObject();
    nw_parameters_t v5 = nw_parameters_create();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
    uint64_t v6 = swift_allocObject();
    *(_DWORD *)(v6 + 24) = 0;
    *(void *)(v6 + 16) = v5;
    *(void *)(v4 + 16) = v6;
  }
  return Browser1.__allocating_init(provider:using:)((uint64_t)v8, v4);
}

uint64_t sub_183585460()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t dispatch thunk of BonjourMetadataProvider.makeMetadata(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of BonjourMetadataProvider.shouldFetchMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders()
{
  return &type metadata for BonjourMetadataProviders;
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders.None()
{
  return &type metadata for BonjourMetadataProviders.None;
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders.Default()
{
  return &type metadata for BonjourMetadataProviders.Default;
}

uint64_t sub_1835854CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t type metadata accessor for BonjourMetadataProviders.DecodeResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s7Network24BonjourMetadataProvidersO4NoneVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7Network24BonjourMetadataProvidersO4NoneVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x183585658);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for BonjourMetadataProviders.Decode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_183585698()
{
  uint64_t result = type metadata accessor for NWBrowser.Result(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_183585770(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_183D4447C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9 & 0xF8 | 7;
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v11 = 56;
  }
  else {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  uint64_t v12 = v11 + 8;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  unint64_t v16 = ((((v11 + 8 + (((v9 & 0xF8) + 15) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + v15
      + 16;
  uint64_t v17 = *(void *)(v14 + 64) + 7;
  int v18 = (*(_DWORD *)(v14 + 80) | v9) & 0x100000;
  uint64_t v19 = *a2;
  *a1 = *a2;
  if ((v15 | v10) != 7
    || v18 != 0
    || ((((((v17 + (v16 & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    a1 = (void *)(v19 + (((v15 | v10) + 16) & ~(v15 | v10)));
    swift_retain();
  }
  else
  {
    unint64_t v51 = v16;
    uint64_t v52 = v17;
    uint64_t v53 = v13;
    uint64_t v54 = a2;
    uint64_t v22 = ~v10;
    uint64_t v23 = (char *)a1 + v10;
    uint64_t v24 = (char *)a2 + v10;
    uint64_t v25 = (unint64_t)(v23 + 8) & v22;
    uint64_t v26 = (unsigned __int8 *)((unint64_t)(v24 + 8) & v22);
    unsigned int v27 = v26[v11];
    swift_unknownObjectRetain();
    if (v27 >= 5)
    {
      if (v11 <= 3) {
        uint64_t v28 = v11;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *v26;
          goto LABEL_22;
        case 2:
          int v29 = *(unsigned __int16 *)v26;
          goto LABEL_22;
        case 3:
          int v29 = *(unsigned __int16 *)v26 | (v26[2] << 16);
          goto LABEL_22;
        case 4:
          int v29 = *(_DWORD *)v26;
LABEL_22:
          int v30 = (v29 | ((v27 - 5) << (8 * v11))) + 5;
          unsigned int v31 = v29 + 5;
          if (v11 >= 4) {
            unsigned int v27 = v31;
          }
          else {
            unsigned int v27 = v30;
          }
          break;
        default:
          break;
      }
    }
    switch(v27)
    {
      case 1u:
        uint64_t v32 = ~v15;
        *(void *)uint64_t v25 = *(void *)v26;
        *(void *)(v25 + 8) = *((void *)v26 + 1);
        *(void *)(v25 + 16) = *((void *)v26 + 2);
        *(void *)(v25 + 24) = *((void *)v26 + 3);
        *(void *)(v25 + 32) = *((void *)v26 + 4);
        *(void *)(v25 + 40) = *((void *)v26 + 5);
        uint64_t v37 = *((void *)v26 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v37 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(v25 + 48) = v37;
        char v36 = 1;
        goto LABEL_33;
      case 2u:
        uint64_t v32 = ~v15;
        *(void *)uint64_t v25 = *(void *)v26;
        *(void *)(v25 + 8) = *((void *)v26 + 1);
        *(unsigned char *)(v25 + v11) = 2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v32 = ~v15;
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(v25, v26, v6);
        char v36 = 3;
LABEL_33:
        *(unsigned char *)(v25 + v11) = v36;
        break;
      case 4u:
        uint64_t v32 = ~v15;
        *(void *)uint64_t v25 = *(void *)v26;
        *(unsigned char *)(v25 + v11) = 4;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v32 = ~v15;
        uint64_t v34 = *(void *)v26;
        uint64_t v33 = *((void *)v26 + 1);
        uint64_t v35 = *((void *)v26 + 2);
        char v50 = v26[24];
        sub_18315E9E4(*(void *)v26, v33, v35, v50);
        *(void *)uint64_t v25 = v34;
        *(void *)(v25 + 8) = v33;
        *(void *)(v25 + 16) = v35;
        *(unsigned char *)(v25 + 24) = v50;
        *(_WORD *)(v25 + 26) = *((_WORD *)v26 + 13);
        *(unsigned char *)(v25 + v11) = 0;
        break;
    }
    uint64_t v38 = (void *)((unint64_t)&v26[v12] & 0xFFFFFFFFFFFFFFF8);
    int v39 = (void *)((v12 + v25) & 0xFFFFFFFFFFFFFFF8);
    *int v39 = *v38;
    unint64_t v40 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v41 = (unint64_t *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    if (v42 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
    }
    else
    {
      *(void *)unint64_t v40 = v42;
      *(void *)(v40 + 8) = v41[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(((unint64_t)a1 + v51) & v32, ((unint64_t)v54 + v51) & v32, v53);
    uint64_t v43 = (void *)((v52 + (((unint64_t)a1 + v51) & v32)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = (void *)((v52 + (((unint64_t)v54 + v51) & v32)) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v43 = *v44;
    v43[1] = v44[1];
    uint64_t v45 = (void *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v46 = (void *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v45 = *v46;
    v45[1] = v46[1];
    uint64_t v47 = (void *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v48 = (void *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v47 = *v48;
    v47[1] = v48[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_183585C04(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = sub_183D4447C();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v7 = v6 + 15;
  uint64_t v8 = v6 + 15 + a1;
  unint64_t v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (uint64_t *)(v8 & v9);
  if (*(void *)(v5 + 64) <= 0x38uLL) {
    uint64_t v11 = 56;
  }
  else {
    uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v12 = *((unsigned __int8 *)v10 + v11);
  unsigned int v13 = v12 - 5;
  if (v12 >= 5)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *(unsigned __int8 *)v10;
        goto LABEL_13;
      case 2:
        int v15 = *(unsigned __int16 *)v10;
        goto LABEL_13;
      case 3:
        int v15 = *(unsigned __int16 *)v10 | (*(unsigned __int8 *)((v8 & v9) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v15 = *(_DWORD *)v10;
LABEL_13:
        int v16 = (v15 | (v13 << (8 * v11))) + 5;
        unsigned int v12 = v15 + 5;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10[6] != 1) {
        goto LABEL_21;
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v8 & v9, v4);
      break;
    case 4u:
LABEL_21:
      swift_unknownObjectRelease();
      break;
    default:
      sub_18315E658(*v10, *(void *)((v8 & v9) + 8), *(void *)((v8 & v9) + 0x10), *(unsigned char *)((v8 & v9) + 0x18));
      break;
  }
  uint64_t v17 = v11 + 8;
  swift_bridgeObjectRelease();
  if (*(void *)(((((unint64_t)v10 + v17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + ((((v17 + (v7 & v9)) & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_183585EB4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = sub_183D4447C();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v8 = v7 + 15;
  unint64_t v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = ((unint64_t)a1 + v7 + 15) & v9;
  uint64_t v44 = a2;
  uint64_t v11 = (unsigned __int8 *)(((unint64_t)a2 + v7 + 15) & v9);
  if (*(void *)(v6 + 64) <= 0x38uLL) {
    uint64_t v12 = 56;
  }
  else {
    uint64_t v12 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v13 = v11[v12];
  swift_unknownObjectRetain();
  if (v13 >= 5)
  {
    if (v12 <= 3) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v11;
        goto LABEL_13;
      case 2:
        int v15 = *(unsigned __int16 *)v11;
        goto LABEL_13;
      case 3:
        int v15 = *(unsigned __int16 *)v11 | (v11[2] << 16);
        goto LABEL_13;
      case 4:
        int v15 = *(_DWORD *)v11;
LABEL_13:
        int v16 = (v15 | ((v13 - 5) << (8 * v12))) + 5;
        unsigned int v17 = v15 + 5;
        if (v12 >= 4) {
          unsigned int v13 = v17;
        }
        else {
          unsigned int v13 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v13)
  {
    case 1u:
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *((void *)v11 + 1);
      *(void *)(v10 + 16) = *((void *)v11 + 2);
      *(void *)(v10 + 24) = *((void *)v11 + 3);
      *(void *)(v10 + 32) = *((void *)v11 + 4);
      *(void *)(v10 + 40) = *((void *)v11 + 5);
      uint64_t v22 = *((void *)v11 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22 != 1) {
        swift_unknownObjectRetain();
      }
      *(void *)(v10 + 48) = v22;
      *(unsigned char *)(v10 + v12) = 1;
      break;
    case 2u:
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *((void *)v11 + 1);
      *(unsigned char *)(v10 + v12) = 2;
      swift_bridgeObjectRetain();
      break;
    case 3u:
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(v10, v11, v5);
      *(unsigned char *)(v10 + v12) = 3;
      break;
    case 4u:
      *(void *)uint64_t v10 = *(void *)v11;
      *(unsigned char *)(v10 + v12) = 4;
      swift_unknownObjectRetain();
      break;
    default:
      uint64_t v18 = *(void *)v11;
      uint64_t v19 = *((void *)v11 + 1);
      uint64_t v20 = *((void *)v11 + 2);
      char v21 = v11[24];
      sub_18315E9E4(*(void *)v11, v19, v20, v21);
      *(void *)uint64_t v10 = v18;
      *(void *)(v10 + 8) = v19;
      *(void *)(v10 + 16) = v20;
      *(unsigned char *)(v10 + 24) = v21;
      *(_WORD *)(v10 + 26) = *((_WORD *)v11 + 13);
      *(unsigned char *)(v10 + v12) = 0;
      break;
  }
  uint64_t v23 = v12 + 8;
  uint64_t v24 = (void *)((unint64_t)&v11[v23] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)((v23 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v24;
  unint64_t v26 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v27 = (unint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = *v27;
  swift_bridgeObjectRetain();
  if (v28 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  }
  else
  {
    *(void *)unint64_t v26 = v28;
    *(void *)(v26 + 8) = v27[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  uint64_t v29 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v30 = v29 + 16;
  uint64_t v31 = *(unsigned __int8 *)(v29 + 80);
  unint64_t v32 = ((((v23 + (v8 & v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v31 + 16;
  unint64_t v33 = ((unint64_t)a1 + v32) & ~v31;
  unint64_t v34 = ((unint64_t)v44 + v32) & ~v31;
  (*(void (**)(unint64_t, unint64_t))(v29 + 16))(v33, v34);
  uint64_t v35 = *(void *)(v30 + 48) + 7;
  char v36 = (void *)((v35 + v33) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (void *)((v35 + v34) & 0xFFFFFFFFFFFFFFF8);
  *char v36 = *v37;
  v36[1] = v37[1];
  uint64_t v38 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  unint64_t v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1835862A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = sub_183D4447C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = (unint64_t)a1 + v8 + 15;
  unint64_t v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = v10 & v11;
  uint64_t v13 = ((unint64_t)v4 + v8 + 15) & v11;
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v14 = 56;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  if (v12 != v13)
  {
    uint64_t v15 = v6;
    unsigned int v16 = *(unsigned __int8 *)(v12 + v14);
    unsigned int v17 = v16 - 5;
    if (v16 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *(unsigned __int8 *)v12;
          goto LABEL_14;
        case 2:
          int v19 = *(unsigned __int16 *)v12;
          goto LABEL_14;
        case 3:
          int v19 = *(unsigned __int16 *)v12 | (*(unsigned __int8 *)((v10 & v11) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v19 = *(_DWORD *)v12;
LABEL_14:
          int v20 = (v19 | (v17 << (8 * v14))) + 5;
          unsigned int v16 = v19 + 5;
          if (v14 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    switch(v16)
    {
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v12 + 48) != 1) {
          goto LABEL_21;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v10 & v11, v6);
        break;
      case 4u:
LABEL_21:
        swift_unknownObjectRelease();
        break;
      default:
        sub_18315E658(*(void *)v12, *(void *)((v10 & v11) + 8), *(void *)((v10 & v11) + 0x10), *(unsigned char *)((v10 & v11) + 0x18));
        break;
    }
    unsigned int v21 = *(unsigned __int8 *)(v13 + v14);
    unsigned int v22 = v21 - 5;
    if (v21 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v23 = v14;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *(unsigned __int8 *)v13;
          goto LABEL_31;
        case 2:
          int v24 = *(unsigned __int16 *)v13;
          goto LABEL_31;
        case 3:
          int v24 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)(v13 + 2) << 16);
          goto LABEL_31;
        case 4:
          int v24 = *(_DWORD *)v13;
LABEL_31:
          int v25 = (v24 | (v22 << (8 * v14))) + 5;
          unsigned int v21 = v24 + 5;
          if (v14 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v21)
    {
      case 1u:
        *(void *)unint64_t v12 = *(void *)v13;
        *(void *)(v12 + 8) = *(void *)(v13 + 8);
        *(void *)(v12 + 16) = *(void *)(v13 + 16);
        *(void *)(v12 + 24) = *(void *)(v13 + 24);
        *(void *)(v12 + 32) = *(void *)(v13 + 32);
        *(void *)(v12 + 40) = *(void *)(v13 + 40);
        uint64_t v30 = *(void *)(v13 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(v12 + 48) = v30;
        *(unsigned char *)(v12 + v14) = 1;
        break;
      case 2u:
        *(void *)unint64_t v12 = *(void *)v13;
        *(void *)(v12 + 8) = *(void *)(v13 + 8);
        *(unsigned char *)(v12 + v14) = 2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v12, v13, v15);
        *(unsigned char *)(v12 + v14) = 3;
        break;
      case 4u:
        *(void *)unint64_t v12 = *(void *)v13;
        *(unsigned char *)(v12 + v14) = 4;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v26 = *(void *)v13;
        uint64_t v27 = *(void *)(v13 + 8);
        uint64_t v52 = v4;
        uint64_t v53 = a3;
        uint64_t v28 = *(void *)(v13 + 16);
        char v29 = *(unsigned char *)(v13 + 24);
        sub_18315E9E4(*(void *)v13, v27, v28, v29);
        *(void *)unint64_t v12 = v26;
        *(void *)(v12 + 8) = v27;
        *(void *)(v12 + 16) = v28;
        *(unsigned char *)(v12 + 24) = v29;
        uint64_t v4 = v52;
        a3 = v53;
        *(_WORD *)(v12 + 26) = *(_WORD *)(v13 + 26);
        *(unsigned char *)(v12 + v14) = 0;
        break;
    }
  }
  uint64_t v31 = v14 + 1;
  unint64_t v32 = (void *)(((v12 | 7) + v31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (v13 | 7) + v31;
  unint64_t v34 = (v33 & 0xFFFFFFFFFFFFFFF8) + 15;
  void *v32 = *(void *)(v33 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v36 = (unint64_t *)(v34 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = *v36;
  if (*v35 < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      *uint64_t v35 = v37;
      v35[1] = v36[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_48;
    }
LABEL_47:
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_48;
  }
  if (v37 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_47;
  }
  *uint64_t v35 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35[1] = v36[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
LABEL_48:
  uint64_t v38 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v39 = v38 + 24;
  uint64_t v40 = *(unsigned __int8 *)(v38 + 80);
  unint64_t v41 = (((((v9 & v11 | 7) + v31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v40 + 16;
  unint64_t v42 = ((unint64_t)a1 + v41) & ~v40;
  unint64_t v43 = ((unint64_t)v4 + v41) & ~v40;
  (*(void (**)(unint64_t, unint64_t))(v38 + 24))(v42, v43);
  uint64_t v44 = *(void *)(v39 + 40) + 7;
  uint64_t v45 = (void *)((v44 + v42) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v46 = (void *)((v44 + v43) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = (void *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v48 = (void *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v47 = *v48;
  v47[1] = v48[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = (void *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v50 = (void *)(((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_18358686C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = sub_183D4447C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = (unint64_t)a1 + v8 + 15;
  unint64_t v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (_OWORD *)(v10 & v11);
  uint64_t v13 = (unsigned __int8 *)(((unint64_t)a2 + v8 + 15) & v11);
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v14 = 56;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v15 = v13[v14];
  unsigned int v16 = v15 - 5;
  if (v15 >= 5)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v13;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v13;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)(((unint64_t)a2 + v8 + 15) & v11) | (*(unsigned __int8 *)((((unint64_t)a2 + v8 + 15) & v11)
                                                                                                  + 2) << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v13;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 5;
        unsigned int v15 = v18 + 5;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  switch(v15)
  {
    case 1u:
      long long v22 = *(_OWORD *)v13;
      long long v23 = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v11) + 0x10);
      long long v24 = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v11) + 0x20);
      *(void *)((v10 & v11) + 0x30) = *(void *)((((unint64_t)a2 + v8 + 15) & v11) + 0x30);
      *(_OWORD *)((v10 & v11) + 0x10) = v23;
      *(_OWORD *)((v10 & v11) + 0x20) = v24;
      _OWORD *v12 = v22;
      char v20 = 1;
      break;
    case 2u:
      _OWORD *v12 = *(_OWORD *)v13;
      char v20 = 2;
      break;
    case 3u:
      (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v7 + 32))(v10 & v11, v13, v6);
      char v20 = 3;
      break;
    case 4u:
      *(void *)unint64_t v12 = *(void *)v13;
      char v20 = 4;
      break;
    default:
      char v20 = 0;
      long long v21 = *(_OWORD *)v13;
      *(_OWORD *)((v10 & v11) + 0xC) = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v11) + 0xC);
      _OWORD *v12 = v21;
      break;
  }
  *((unsigned char *)v12 + v14) = v20;
  int v25 = (void *)(((unint64_t)v12 + v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)((unint64_t)&v13[v14 + 8] & 0xFFFFFFFFFFFFFFF8);
  *int v25 = *v26;
  *(_OWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v28 = v27 + 32;
  uint64_t v29 = *(unsigned __int8 *)(v27 + 80);
  unint64_t v30 = ((((v14 + 8 + (v9 & v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v29 + 16;
  unint64_t v31 = ((unint64_t)a1 + v30) & ~v29;
  unint64_t v32 = ((unint64_t)a2 + v30) & ~v29;
  (*(void (**)(unint64_t, unint64_t))(v27 + 32))(v31, v32);
  uint64_t v33 = *(void *)(v28 + 32) + 7;
  unint64_t v34 = (_OWORD *)((v33 + v31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (_OWORD *)((v33 + v32) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  char v36 = (_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = (_OWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v36 = *v37;
  *(_OWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_183586B44(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v6 = sub_183D4447C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = (unint64_t)a1 + v8 + 15;
  unint64_t v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = v10 & v11;
  uint64_t v13 = ((unint64_t)a2 + v8 + 15) & v11;
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v14 = 56;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  if (v12 != v13)
  {
    uint64_t v15 = v6;
    unsigned int v16 = *(unsigned __int8 *)(v12 + v14);
    unsigned int v17 = v16 - 5;
    if (v16 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *(unsigned __int8 *)v12;
          goto LABEL_14;
        case 2:
          int v19 = *(unsigned __int16 *)v12;
          goto LABEL_14;
        case 3:
          int v19 = *(unsigned __int16 *)v12 | (*(unsigned __int8 *)((v10 & v11) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v19 = *(_DWORD *)v12;
LABEL_14:
          int v20 = (v19 | (v17 << (8 * v14))) + 5;
          unsigned int v16 = v19 + 5;
          if (v14 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    switch(v16)
    {
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v12 + 48) != 1) {
          goto LABEL_21;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v10 & v11, v6);
        break;
      case 4u:
LABEL_21:
        swift_unknownObjectRelease();
        break;
      default:
        sub_18315E658(*(void *)v12, *(void *)((v10 & v11) + 8), *(void *)((v10 & v11) + 0x10), *(unsigned char *)((v10 & v11) + 0x18));
        break;
    }
    unsigned int v21 = *(unsigned __int8 *)(v13 + v14);
    unsigned int v22 = v21 - 5;
    if (v21 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v23 = v14;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *(unsigned __int8 *)v13;
          goto LABEL_31;
        case 2:
          int v24 = *(unsigned __int16 *)v13;
          goto LABEL_31;
        case 3:
          int v24 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)(v13 + 2) << 16);
          goto LABEL_31;
        case 4:
          int v24 = *(_DWORD *)v13;
LABEL_31:
          int v25 = (v24 | (v22 << (8 * v14))) + 5;
          unsigned int v21 = v24 + 5;
          if (v14 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v21)
    {
      case 1u:
        long long v28 = *(_OWORD *)v13;
        long long v29 = *(_OWORD *)(v13 + 16);
        long long v30 = *(_OWORD *)(v13 + 32);
        *(void *)(v12 + 48) = *(void *)(v13 + 48);
        *(_OWORD *)(v12 + 16) = v29;
        *(_OWORD *)(v12 + 32) = v30;
        *(_OWORD *)unint64_t v12 = v28;
        char v26 = 1;
        break;
      case 2u:
        *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
        char v26 = 2;
        break;
      case 3u:
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v12, v13, v15);
        char v26 = 3;
        break;
      case 4u:
        *(void *)unint64_t v12 = *(void *)v13;
        char v26 = 4;
        break;
      default:
        char v26 = 0;
        long long v27 = *(_OWORD *)v13;
        *(_OWORD *)(v12 + 12) = *(_OWORD *)(v13 + 12);
        *(_OWORD *)unint64_t v12 = v27;
        break;
    }
    *(unsigned char *)(v12 + v14) = v26;
  }
  uint64_t v31 = v14 + 1;
  unint64_t v32 = (void *)(((v12 | 7) + v14 + 1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)(((v13 | 7) + v14 + 1) & 0xFFFFFFFFFFFFFFF8);
  void *v32 = *v33;
  swift_bridgeObjectRelease();
  unint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*v34 < 0xFFFFFFFFuLL) {
    goto LABEL_44;
  }
  if (*(void *)v35 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_44:
    *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
    goto LABEL_45;
  }
  *unint64_t v34 = *(void *)v35;
  swift_bridgeObjectRelease();
  v34[1] = *(void *)(v35 + 8);
  swift_unknownObjectRelease();
LABEL_45:
  uint64_t v36 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v37 = v36 + 40;
  uint64_t v38 = *(unsigned __int8 *)(v36 + 80);
  unint64_t v39 = (((((v9 & v11 | 7) + v31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v38 + 16;
  unint64_t v40 = ((unint64_t)a1 + v39) & ~v38;
  unint64_t v41 = ((unint64_t)a2 + v39) & ~v38;
  (*(void (**)(unint64_t, unint64_t))(v36 + 40))(v40, v41);
  uint64_t v42 = *(void *)(v37 + 24) + 7;
  unint64_t v43 = (void *)((v42 + v40) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = (void *)((v42 + v41) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v43 = *v44;
  v43[1] = v44[1];
  swift_bridgeObjectRelease();
  uint64_t v45 = (void *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v46 = (void *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRelease();
  uint64_t v47 = (void *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v48 = (void *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v47 = *v48;
  v47[1] = v48[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_183587008(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(sub_183D4447C() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  if (v7 <= 0x38) {
    unint64_t v7 = 56;
  }
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  int v10 = *(_DWORD *)(v6 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v14 = ((((v7 + ((unsigned __int16)((v10 & 0xF8) + 15) & (unsigned __int16)~(v10 & 0xF8) & 0x1F8) + 8) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v11
      + 16;
  if (v13 < a2)
  {
    unint64_t v15 = ((((((v12 + (v14 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v13 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x183587238);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_24:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v13 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if ((v9 & 0x80000000) != 0)
  {
    int v25 = *(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 48);
    return v25(((unint64_t)a1 + v14) & ~v11);
  }
  else
  {
    uint64_t v24 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v24) = -1;
    }
    return (v24 + 1);
  }
}

void sub_18358724C(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(sub_183D4447C() - 8);
  if (*(void *)(v8 + 64) <= 0x38uLL) {
    uint64_t v9 = 56;
  }
  else {
    uint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  int v12 = *(_DWORD *)(v8 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  size_t v15 = ((((v9 + ((unsigned __int16)((v12 & 0xF8) + 15) & (unsigned __int16)~(v12 & 0xF8) & 0x1F8) + 8) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  size_t v16 = v15 + v13;
  size_t v17 = ((((((*(void *)(v10 + 64) + ((v15 + v13) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v14 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_20:
      uint64_t v22 = ~v13;
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)((char *)a1 + v17) = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if ((v11 & 0x80000000) != 0)
            {
              int v25 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
              v25(((unint64_t)a1 + v16) & v22, a2);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              if (v15)
              {
                bzero(a1, v15);
                *a1 = a2 ^ 0x80000000;
              }
            }
            else
            {
              *(void *)a1 = (a2 - 1);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((*(_DWORD *)(v10 + 64) + ((v15 + v13) & ~v13) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v18 = a3 - v14 + 1;
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_20;
    }
  }
  if (((((((*(_DWORD *)(v10 + 64) + ((v15 + v13) & ~v13) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v23 = v21;
  else {
    int v23 = 1;
  }
  if (((((((*(_DWORD *)(v10 + 64) + ((v15 + v13) & ~v13) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v24 = ~v14 + a2;
    bzero(a1, v17);
    *a1 = v24;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v23;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v23;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1835874E4);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = v23;
      break;
    default:
      return;
  }
}

uint64_t sub_18358750C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1835875B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 32) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    unsigned int v11 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v12 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v11 = *v12;
    v11[1] = v12[1];
    uint64_t v13 = ((unint64_t)v11 + v6 + 16) & ~v6;
    uint64_t v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    size_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t sub_1835876EC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_183587770(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v10, v11, v7);
  return a1;
}

void *sub_183587830(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_OWORD *sub_183587900(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_183587988(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_183587A38(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 16) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_183587BE0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 32) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x183587E48);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
          int v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for BrowseDescriptorFactories.Bonjour()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_183587E88()
{
  type metadata accessor for BrowseDescriptorFactories.Bonjour();

  return swift_getWitnessTable();
}

uint64_t NWApplicationID.init(nw:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NWApplicationID.hash(into:)()
{
  uint64_t v1 = sub_183D445FC();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v0;
  uint64_t v5 = v9;
  sub_183588010();
  sub_1835880A4();
  sub_183D44A7C();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v2 + 8);
  v6(v4, v1);
  uint64_t v9 = v5;
  NWApplicationID.persona.getter();
  sub_183D44A7C();
  return ((uint64_t (*)(char *, uint64_t))v6)(v4, v1);
}

uint64_t sub_183588010()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  long long v3 = 0uLL;
  nw_application_id_get_uuid(v1, &v3);
  return sub_183D445CC();
}

unint64_t sub_1835880A4()
{
  unint64_t result = qword_1E8F649C0;
  if (!qword_1E8F649C0)
  {
    sub_183D445FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F649C0);
  }
  return result;
}

uint64_t NWApplicationID.persona.getter()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  long long v3 = 0uLL;
  nw_application_id_get_persona(v1, &v3);
  return sub_183D445CC();
}

uint64_t static NWApplicationID.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_183D445FC();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  size_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v17 = v11;
  sub_183588010();
  uint64_t v17 = v12;
  sub_183588010();
  LOBYTE(a2) = sub_183D445BC();
  int v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  if (a2)
  {
    uint64_t v17 = v11;
    NWApplicationID.persona.getter();
    uint64_t v17 = v12;
    NWApplicationID.persona.getter();
    char v14 = sub_183D445BC();
    v13(v8, v4);
    v13(v10, v4);
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

unint64_t NWApplicationID.debugDescription.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_18358835C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    sub_1835AF3E4(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 80);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        sub_1835AF3E4(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      v4 += 7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_183588434@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == -1)
  {
    int well_known = nw_http_field_name_find_well_known(a1);
    uint64_t v8 = 0x646F6874656D3ALL;
    unint64_t v6 = 0xE700000000000000;
    uint64_t result = 0x646F6874656D3ALL;
    unint64_t v10 = 0xE700000000000000;
    switch(well_known)
    {
      case 0:
        break;
      case 1:
        uint64_t v8 = 0x656D656863733ALL;
        uint64_t result = 0x656D656863733ALL;
        break;
      case 2:
        uint64_t v8 = 0x69726F687475613ALL;
        unint64_t v6 = 0xEA00000000007974;
        uint64_t result = 0x69726F687475613ALL;
        unint64_t v10 = 0xEA00000000007974;
        break;
      case 3:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v8 = 0x687461703ALL;
        uint64_t result = 0x687461703ALL;
        unint64_t v10 = 0xE500000000000000;
        break;
      case 4:
        uint64_t v8 = 0x6F636F746F72703ALL;
        unint64_t v6 = 0xE90000000000006CLL;
        uint64_t result = 0x6F636F746F72703ALL;
        unint64_t v10 = 0xE90000000000006CLL;
        break;
      case 5:
        uint64_t v8 = 0x7375746174733ALL;
        uint64_t result = 0x7375746174733ALL;
        break;
      case 6:
        uint64_t v8 = 0x747065636341;
        goto LABEL_72;
      case 7:
        unint64_t v6 = 0xEF676E69646F636ELL;
        uint64_t result = 0x652D747065636361;
        uint64_t v8 = 0x452D747065636341;
        unint64_t v10 = 0xEF676E69646F636ELL;
        break;
      case 8:
        unint64_t v6 = 0xEF65676175676E61;
        uint64_t result = 0x6C2D747065636361;
        uint64_t v8 = 0x4C2D747065636341;
        unint64_t v10 = 0xEF65676175676E61;
        break;
      case 9:
        unint64_t v6 = 0xED00007365676E61;
        uint64_t result = 0x722D747065636361;
        uint64_t v8 = 0x522D747065636341;
        unint64_t v10 = 0xED00007365676E61;
        break;
      case 10:
        uint64_t v8 = 0xD00000000000001CLL;
        unint64_t v10 = 0x8000000183E25170;
        uint64_t v12 = "Access-Control-Allow-Headers";
        goto LABEL_82;
      case 11:
        uint64_t v8 = 0xD00000000000001CLL;
        unint64_t v10 = 0x8000000183E251B0;
        uint64_t v12 = "Access-Control-Allow-Methods";
        goto LABEL_82;
      case 12:
        uint64_t v8 = 0xD00000000000001BLL;
        unint64_t v10 = 0x8000000183E251F0;
        uint64_t v12 = "Access-Control-Allow-Origin";
        goto LABEL_82;
      case 13:
        uint64_t v8 = 0xD00000000000001DLL;
        unint64_t v10 = 0x8000000183E25230;
        uint64_t v12 = "Access-Control-Expose-Headers";
        goto LABEL_82;
      case 14:
        uint64_t v8 = 0xD000000000000016;
        unint64_t v10 = 0x8000000183E25270;
        uint64_t v12 = "Access-Control-Max-Age";
        goto LABEL_82;
      case 15:
        uint64_t v8 = 0xD00000000000001ELL;
        unint64_t v10 = 0x8000000183E252B0;
        uint64_t v12 = "Access-Control-Request-Headers";
        goto LABEL_82;
      case 16:
        uint64_t v8 = 0xD00000000000001DLL;
        unint64_t v10 = 0x8000000183E252F0;
        uint64_t v12 = "Access-Control-Request-Method";
        goto LABEL_82;
      case 17:
        uint64_t v8 = 6645569;
LABEL_27:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE300000000000000;
        unint64_t v10 = 0xE300000000000000;
        break;
      case 18:
        uint64_t v8 = 0x776F6C6C41;
LABEL_29:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE500000000000000;
        unint64_t v10 = 0xE500000000000000;
        break;
      case 19:
        uint64_t result = 0x6376732D746C61;
        uint64_t v8 = 0x6376532D746C41;
        break;
      case 20:
        uint64_t v8 = 0xD000000000000013;
        unint64_t v10 = 0x8000000183E25330;
        uint64_t v12 = "Authentication-Info";
        goto LABEL_82;
      case 21:
        uint64_t v8 = 0x7A69726F68747541;
        uint64_t result = 0x7A69726F68747561;
        unint64_t v6 = 0xED00006E6F697461;
        unint64_t v10 = 0xED00006E6F697461;
        break;
      case 22:
        unint64_t v6 = 0xED00006C6F72746ELL;
        uint64_t result = 0x6F632D6568636163;
        uint64_t v8 = 0x6F432D6568636143;
        unint64_t v10 = 0xED00006C6F72746ELL;
        break;
      case 23:
        unint64_t v10 = 0x8000000183E27270;
        int v13 = "Capsule-Protocol";
        goto LABEL_80;
      case 24:
        uint64_t v8 = 0xD000000000000014;
        unint64_t v10 = 0x8000000183E27230;
        uint64_t v12 = "Client-Connection-Id";
        goto LABEL_82;
      case 25:
        unint64_t v6 = 0xEE00687361686F65;
        uint64_t result = 0x672D746E65696C63;
        uint64_t v14 = 0x746E65696C43;
LABEL_37:
        uint64_t v8 = v14 & 0xFFFFFFFFFFFFLL | 0x472D000000000000;
        unint64_t v10 = 0xEE00687361686F65;
        break;
      case 26:
        uint64_t v8 = 0x697463656E6E6F43;
        uint64_t result = 0x697463656E6E6F63;
        unint64_t v6 = 0xEA00000000006E6FLL;
        unint64_t v10 = 0xEA00000000006E6FLL;
        break;
      case 27:
        unint64_t v10 = 0x8000000183E271F0;
        int v13 = "Connect-UDP-Bind";
        goto LABEL_80;
      case 29:
        uint64_t v8 = 0xD000000000000013;
        unint64_t v10 = 0x8000000183E25370;
        uint64_t v12 = "Content-Disposition";
        goto LABEL_82;
      case 30:
        unint64_t v10 = 0x8000000183E253B0;
        int v13 = "Content-Encoding";
        goto LABEL_80;
      case 31:
        unint64_t v10 = 0x8000000183E253F0;
        int v13 = "Content-Language";
        goto LABEL_80;
      case 32:
        uint64_t v8 = 0x2D746E65746E6F43;
        uint64_t result = 0x2D746E65746E6F63;
        unint64_t v6 = 0xEE006874676E654CLL;
        unint64_t v10 = 0xEE006874676E656CLL;
        break;
      case 33:
        unint64_t v10 = 0x8000000183E25430;
        int v13 = "Content-Location";
        goto LABEL_80;
      case 34:
        uint64_t v8 = 0x2D746E65746E6F43;
        uint64_t result = 0x2D746E65746E6F63;
        unint64_t v6 = 0xED000065676E6152;
        unint64_t v10 = 0xED000065676E6172;
        break;
      case 35:
        uint64_t v8 = 0xD000000000000017;
        unint64_t v10 = 0x8000000183E25470;
        uint64_t v12 = "Content-Security-Policy";
        goto LABEL_82;
      case 36:
        uint64_t v8 = 0x2D746E65746E6F43;
        uint64_t result = 0x2D746E65746E6F63;
        unint64_t v6 = 0xEC00000065707954;
        unint64_t v10 = 0xEC00000065707974;
        break;
      case 37:
        uint64_t v8 = 0x65696B6F6F43;
        goto LABEL_72;
      case 38:
        uint64_t v8 = 0xD00000000000001CLL;
        unint64_t v10 = 0x8000000183E25510;
        uint64_t v12 = "Cross-Origin-Resource-Policy";
        goto LABEL_82;
      case 39:
        unint64_t v10 = 0x8000000183E271B0;
        int v13 = "Datagram-Flow-Id";
        goto LABEL_80;
      case 40:
        uint64_t v8 = 1702125892;
        goto LABEL_59;
      case 41:
        unint64_t v6 = 0xEA00000000006174;
        uint64_t result = 0x61642D796C726165;
        uint64_t v8 = 0x61442D796C726145;
        unint64_t v10 = 0xEA00000000006174;
        break;
      case 42:
        unint64_t v6 = 0xE400000000000000;
        uint64_t result = 1734440037;
        uint64_t v8 = 1734431813;
        unint64_t v10 = 0xE400000000000000;
        break;
      case 43:
        uint64_t v8 = 0x746365707845;
        goto LABEL_72;
      case 44:
        uint64_t v8 = 0x73657269707845;
        uint64_t result = 0x73657269707865;
        break;
      case 45:
        uint64_t v8 = 1836020294;
LABEL_59:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE400000000000000;
        unint64_t v10 = 0xE400000000000000;
        break;
      case 47:
        uint64_t result = 0x686374616D2D6669;
        unint64_t v6 = 0xE800000000000000;
        uint64_t v8 = 0x686374614D2D6649;
        unint64_t v10 = 0xE800000000000000;
        break;
      case 48:
        uint64_t v8 = 0xD000000000000011;
        unint64_t v10 = 0x8000000183E25550;
        uint64_t v12 = "If-Modified-Since";
        goto LABEL_82;
      case 49:
        unint64_t v6 = 0xED0000686374614DLL;
        unint64_t v10 = 0xED0000686374616DLL;
        uint64_t result = 0x2D656E6F6E2D6669;
        uint64_t v8 = 0x2D656E6F4E2D6649;
        break;
      case 50:
        uint64_t result = 0x65676E61722D6669;
        unint64_t v6 = 0xE800000000000000;
        uint64_t v8 = 0x65676E61522D6649;
        unint64_t v10 = 0xE800000000000000;
        break;
      case 51:
        uint64_t v8 = 0xD000000000000013;
        unint64_t v10 = 0x8000000183E25590;
        uint64_t v12 = "If-Unmodified-Since";
        goto LABEL_82;
      case 52:
        unint64_t v6 = 0xEA00000000006576;
        uint64_t result = 0x696C612D7065656BLL;
        uint64_t v8 = 0x696C412D7065654BLL;
        unint64_t v10 = 0xEA00000000006576;
        break;
      case 53:
        unint64_t v6 = 0xED00006465696669;
        uint64_t result = 0x646F6D2D7473616CLL;
        uint64_t v8 = 0x646F4D2D7473614CLL;
        unint64_t v10 = 0xED00006465696669;
        break;
      case 54:
        uint64_t v8 = 0x6E6F697461636F4CLL;
        goto LABEL_74;
      case 55:
        unint64_t v6 = 0xEC00000073647261;
        uint64_t result = 0x77726F662D78616DLL;
        uint64_t v8 = 0x77726F462D78614DLL;
        unint64_t v10 = 0xEC00000073647261;
        break;
      case 56:
        uint64_t v8 = 0x6E696769724FLL;
        goto LABEL_72;
      case 57:
        unint64_t v6 = 0xE300000000000000;
        uint64_t result = 7353200;
        uint64_t v8 = 5256016;
        unint64_t v10 = 0xE300000000000000;
        break;
      case 58:
        uint64_t v8 = 0x616D67617250;
LABEL_72:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE600000000000000;
        unint64_t v10 = 0xE600000000000000;
        break;
      case 59:
        uint64_t v8 = 0x797469726F697250;
LABEL_74:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE800000000000000;
        unint64_t v10 = 0xE800000000000000;
        break;
      case 60:
        uint64_t v8 = 0xD000000000000012;
        unint64_t v10 = 0x8000000183E255D0;
        uint64_t v12 = "Proxy-Authenticate";
        goto LABEL_82;
      case 61:
        uint64_t v8 = 0xD000000000000019;
        unint64_t v10 = 0x8000000183E25610;
        uint64_t v12 = "Proxy-Authentication-Info";
        goto LABEL_82;
      case 62:
        uint64_t v8 = 0xD000000000000013;
        unint64_t v10 = 0x8000000183E25650;
        uint64_t v12 = "Proxy-Authorization";
        goto LABEL_82;
      case 63:
        uint64_t v8 = 0xD000000000000012;
        unint64_t v10 = 0x8000000183E27170;
        uint64_t v12 = "Proxy-Config-Epoch";
        goto LABEL_82;
      case 64:
        unint64_t v10 = 0x8000000183E27130;
        int v13 = "Proxy-Connection";
LABEL_80:
        unint64_t v6 = (unint64_t)(v13 - 32) | 0x8000000000000000;
        uint64_t v8 = 0xD000000000000010;
        uint64_t result = 0xD000000000000010;
        break;
      case 65:
        uint64_t v8 = 0xD000000000000015;
        unint64_t v10 = 0x8000000183E270F0;
        uint64_t v12 = "Proxy-QUIC-Forwarding";
LABEL_82:
        unint64_t v6 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        uint64_t result = v8;
        break;
      default:
        unint64_t v6 = 0xEC00000073757461;
        uint64_t result = 0x74732D79786F7270;
        uint64_t v8 = 0x74532D79786F7250;
        unint64_t v10 = 0xEC00000073757461;
        switch(well_known)
        {
          case 'B':
            goto LABEL_83;
          case 'C':
            uint64_t v8 = 0x65676E6152;
            goto LABEL_29;
          case 'D':
            uint64_t v8 = 0x72657265666552;
            break;
          case 'E':
            unint64_t v6 = 0xEB00000000726574;
            uint64_t result = 0x66612D7972746572;
            uint64_t v8 = 0x66412D7972746552;
            unint64_t v10 = 0xEB00000000726574;
            goto LABEL_83;
          case 'F':
            uint64_t v8 = 0xD000000000000011;
            unint64_t v10 = 0x8000000183E270B0;
            uint64_t v12 = "Sec-CH-Background";
            goto LABEL_82;
          case 'G':
            unint64_t v6 = 0xEE00687361686F65;
            uint64_t result = 0x672D68632D636573;
            uint64_t v14 = 0x48432D636553;
            goto LABEL_37;
          case 'H':
            unint64_t v6 = 0xEB0000000065736FLL;
            uint64_t result = 0x707275702D636573;
            uint64_t v8 = 0x707275502D636553;
            unint64_t v10 = 0xEB0000000065736FLL;
            goto LABEL_83;
          case 'I':
            uint64_t v8 = 0xD000000000000014;
            unint64_t v10 = 0x8000000183E25690;
            uint64_t v12 = "Sec-WebSocket-Accept";
            goto LABEL_82;
          case 'J':
            uint64_t v8 = 0xD000000000000018;
            unint64_t v10 = 0x8000000183E256D0;
            uint64_t v12 = "Sec-WebSocket-Extensions";
            goto LABEL_82;
          case 'K':
            uint64_t v8 = 0xD000000000000011;
            unint64_t v10 = 0x8000000183E25710;
            uint64_t v12 = "Sec-WebSocket-Key";
            goto LABEL_82;
          case 'L':
            uint64_t v8 = 0xD000000000000016;
            unint64_t v10 = 0x8000000183E25750;
            uint64_t v12 = "Sec-WebSocket-Protocol";
            goto LABEL_82;
          case 'M':
            uint64_t v8 = 0xD000000000000015;
            unint64_t v10 = 0x8000000183E25790;
            uint64_t v12 = "Sec-WebSocket-Version";
            goto LABEL_82;
          case 'N':
            uint64_t v8 = 0x726576726553;
            goto LABEL_72;
          case 'O':
            uint64_t v8 = 0xD000000000000014;
            unint64_t v10 = 0x8000000183E27070;
            uint64_t v12 = "Server-Connection-Id";
            goto LABEL_82;
          case 'P':
            unint64_t v6 = 0xEA00000000006569;
            uint64_t result = 0x6B6F6F632D746573;
            uint64_t v8 = 0x6B6F6F432D746553;
            unint64_t v10 = 0xEA00000000006569;
            goto LABEL_83;
          case 'Q':
            uint64_t v8 = 0xD000000000000019;
            unint64_t v10 = 0x8000000183E257D0;
            uint64_t v12 = "Strict-Transport-Security";
            goto LABEL_82;
          case 'R':
            unint64_t v6 = 0xE200000000000000;
            uint64_t result = 25972;
            uint64_t v8 = 17748;
            unint64_t v10 = 0xE200000000000000;
            goto LABEL_83;
          case 'S':
            uint64_t v8 = 0xD000000000000013;
            unint64_t v10 = 0x8000000183E27030;
            uint64_t v12 = "Timing-Allow-Origin";
            goto LABEL_82;
          case 'T':
            uint64_t v8 = 0x72656C69617254;
            break;
          case 'U':
            uint64_t v8 = 0xD000000000000011;
            unint64_t v10 = 0x8000000183E25810;
            uint64_t v12 = "Transfer-Encoding";
            goto LABEL_82;
          case 'V':
            uint64_t v8 = 0x65646172677055;
            break;
          case 'W':
            uint64_t v8 = 0xD000000000000019;
            unint64_t v10 = 0x8000000183E26FF0;
            uint64_t v12 = "Upgrade-Insecure-Requests";
            goto LABEL_82;
          case 'X':
            unint64_t v6 = 0xEA0000000000746ELL;
            uint64_t result = 0x6567612D72657375;
            uint64_t v8 = 0x6567412D72657355;
            unint64_t v10 = 0xEA0000000000746ELL;
            goto LABEL_83;
          case 'Y':
            uint64_t v8 = 2037539158;
            goto LABEL_59;
          case 'Z':
            uint64_t v8 = 6383958;
            goto LABEL_27;
          case '[':
            unint64_t v10 = 0x8000000183E25850;
            int v13 = "WWW-Authenticate";
            goto LABEL_80;
          case '\\':
            uint64_t v8 = 0xD000000000000016;
            unint64_t v10 = 0x8000000183E25890;
            uint64_t v12 = "X-Content-Type-Options";
            goto LABEL_82;
          case ']':
            unint64_t v6 = 0xEF736E6F6974704FLL;
            unint64_t v10 = 0xEF736E6F6974706FLL;
            uint64_t result = 0x2D656D6172662D78;
            uint64_t v8 = 0x2D656D6172462D58;
            goto LABEL_83;
          case '^':
            unint64_t v10 = 0x8000000183E26FB0;
            int v13 = "X-XSS-Protection";
            goto LABEL_80;
          default:
            unint64_t v4 = sub_183D44C9C();
            goto LABEL_3;
        }
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE700000000000000;
        unint64_t v10 = 0xE700000000000000;
        break;
    }
  }
  else
  {
    unint64_t v4 = sub_183D44C1C();
LABEL_3:
    unint64_t v6 = v5;
    uint64_t v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7 || (uint64_t v8 = v4, (sub_183529FF8(v4, v5) & 1) == 0))
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
    uint64_t result = sub_183D44B8C();
  }
LABEL_83:
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = v10;
  return result;
}

uint64_t sub_1835894EC@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *, uint64_t)@<X2>, void (*a4)(void, void, void, void, void, void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(void, void, void, void, void, void, void, void))
{
  uint64_t v33 = a6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (sub_1834BF534(a1, a2))
  {
    unint64_t v32 = a10;
    swift_bridgeObjectRetain();
    sub_1834BFB88(a8);
    a10(a1, a2, a3, a4, a5, v33, a7, a8);
    goto LABEL_13;
  }
  v30[1] = a9;
  uint64_t v31 = a5;
  unint64_t v32 = a4;
  uint64_t v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v18 = a1;
  }
  uint64_t v19 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v19 = 11;
  }
  unint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v19 | (v18 << 16), a1, a2);
  uint64_t v21 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v21 < 0) {
    goto LABEL_15;
  }
  if (v21 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    int v23 = (char *)v30 - v22;
    sub_18358AE00((uint64_t)v30 - v22, v21, a1, a2);
    uint64_t v24 = sub_183D44C5C();
    uint64_t v25 = sub_183D44C5C();
    a3(v31, v24, v23, v25);
  }
  else
  {
    uint64_t v26 = swift_slowAlloc();
    sub_18358AE00(v26, v21, a1, a2);
    uint64_t v27 = sub_183D44C5C();
    uint64_t v28 = sub_183D44C5C();
    a3(v31, v27, (char *)v26, v28);
    MEMORY[0x185318E50](v26, -1, -1);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return sub_18312A0D8(a8);
}

uint64_t sub_183589740(unint64_t a1, unint64_t a2, uint64_t (*a3)(char *))
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (sub_1834BF534(a1, a2)) {
    return sub_18358A1FC(a1, a2, (uint64_t (*)(void *))a3);
  }
  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v8 = a1;
  }
  uint64_t v9 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v9 = 11;
  }
  unint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v9 | (v8 << 16), a1, a2);
  uint64_t v11 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if (v11 < 0) {
    goto LABEL_16;
  }
  if (v11 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    int v13 = (char *)v15 - v12;
    sub_18358AE00((uint64_t)v15 - v12, v11, a1, a2);
    uint64_t result = a3(v13);
    if (v3) {
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v14 = swift_slowAlloc();
    sub_18358AE00(v14, v11, a1, a2);
    a3((char *)v14);
    return MEMORY[0x185318E50](v14, -1, -1);
  }
  return result;
}

uint64_t sub_183589908(unint64_t a1, unint64_t a2, void (**a3)(void, void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v33 = a7;
  uint64_t v34 = a4;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (sub_1834BF534(a1, a2))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _Block_copy(a3);
    sub_18358A678(a1, a2, a3, v34, a5, a6, v33, a8, a9);
    goto LABEL_19;
  }
  v31[1] = a5;
  int v32 = a9;
  uint64_t v15 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v15 = a1;
  }
  uint64_t v16 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v16 = 11;
  }
  unint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v16 | (v15 << 16), a1, a2);
  uint64_t v18 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v18 < 0) {
    goto LABEL_21;
  }
  if (v18 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    int v20 = (char *)v31 - v19;
    sub_18358AE00((uint64_t)v31 - v19, v18, a1, a2);
    uint64_t v21 = sub_183D44C5C();
    uint64_t v22 = sub_183D44C5C();
    unsigned int v23 = (v32 - 1);
    if (v23 < 3) {
      uint64_t v24 = v23 + 1;
    }
    else {
      uint64_t v24 = 0;
    }
    ((void (**)(void, uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)[2](a3, v34, v21, v20, v22, v24);
  }
  else
  {
    uint64_t v25 = swift_slowAlloc();
    sub_18358AE00(v25, v18, a1, a2);
    uint64_t v26 = sub_183D44C5C();
    uint64_t v27 = sub_183D44C5C();
    unsigned int v28 = (v32 - 1);
    if (v28 < 3) {
      uint64_t v29 = v28 + 1;
    }
    else {
      uint64_t v29 = 0;
    }
    a3[2](a3, v34, v26, v25, v27, v29);
    MEMORY[0x185318E50](v25, -1, -1);
  }
LABEL_19:
  _Block_release(a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_183589BA0(unint64_t a1, unint64_t a2, void (**a3)(void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (sub_1834BF534(a1, a2))
  {
    swift_bridgeObjectRetain();
    _Block_copy(a3);
    sub_18358A820(a1, a2, a3, a4, a5, a6, a7);
    goto LABEL_21;
  }
  int v29 = a7;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1;
  }
  uint64_t v15 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v15 = 11;
  }
  unint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v15 | (v14 << 16), a1, a2);
  uint64_t v17 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v17 < 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  if (v17 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v28[1] = v28;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v19 = (char *)v28 - v18;
    sub_18358AE00((uint64_t)v28 - v18, v17, a1, a2);
    uint64_t v20 = sub_183D44C5C();
    if (!__OFSUB__(v20, a4))
    {
      unsigned int v21 = (v29 - 1);
      if (v21 < 3) {
        uint64_t v22 = v21 + 1;
      }
      else {
        uint64_t v22 = 0;
      }
      ((void (**)(void, char *, uint64_t, uint64_t, uint64_t))a3)[2](a3, v19, a4, v20 - a4, v22);
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  uint64_t v23 = swift_slowAlloc();
  sub_18358AE00(v23, v17, a1, a2);
  uint64_t v24 = sub_183D44C5C();
  if (__OFSUB__(v24, a4)) {
    goto LABEL_25;
  }
  unsigned int v25 = (v29 - 1);
  if (v25 < 3) {
    uint64_t v26 = v25 + 1;
  }
  else {
    uint64_t v26 = 0;
  }
  a3[2](a3, v23, a4, v24 - a4, v26);
  MEMORY[0x185318E50](v23, -1, -1);
LABEL_21:
  _Block_release(a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_183589E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void v12[2];
  uint64_t v13;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    unint64_t v10 = sub_183D4544C();
    if (!v4) {
      unint64_t v10 = BYTE1(v13);
    }
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v12[0] = v5;
      v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v10 = v7(&v13, v12);
      if (!v4) {
        unint64_t v10 = v13;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = sub_183D4557C();
      }
      unint64_t v10 = sub_183594320(v8, v9, (void (*)(uint64_t *__return_ptr))sub_18359545C);
    }
  }
  return v10 & 1;
}

uint64_t sub_183589F20(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183D4544C();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v15[0] = a1;
    v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = sub_183D44C5C();
    uint64_t v13 = sub_183D44C5C();
    a3(a5, v12, v15, v13);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v10 = sub_183D4557C();
    }
    sub_183595580(v10);
  }
  swift_bridgeObjectRelease();
  return sub_18312A0D8(a8);
}

uint64_t sub_18358A070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, char *, uint64_t)@<X3>, void (*a5)(void, void, void, void, void, void, void, void)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v18[4] = a3;
  v18[5] = a4;
  void v18[6] = a5;
  v18[7] = a6;
  unsigned char v18[8] = a7;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183D4544C();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v19[0] = a1;
      v19[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v19[3] = v18;
      unint64_t v15 = *(void *)(a3 + 40);
      unint64_t v16 = *(void *)(a3 + 48);
      swift_bridgeObjectRetain();
      sub_1834BFB88(a3);
      sub_1835894EC(v15, v16, a4, a5, (uint64_t)v19, a6, a7, a3, a8, (void (*)(void, void, void, void, void, void, void, void))sub_183589F20);
      sub_18312A0D8(a3);
      return swift_bridgeObjectRelease();
    }
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v12 = sub_183D4557C();
    }
    sub_183595554(v12, a8);
  }
  sub_18312A0D8(a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18358A1FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000)) {
    return sub_183D4544C();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v4[0] = a1;
    v4[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    return a3(v4);
  }
  else
  {
    if ((a1 & 0x1000000000000000) == 0) {
      sub_183D4557C();
    }
    return sub_183595660();
  }
}

void sub_18358A2E4(uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void))
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183D4544C();
LABEL_7:
    _Block_release(a3);
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = sub_183D4557C();
    }
    a3[2](a3, v6, v5, v4);
    goto LABEL_7;
  }
  v7[0] = a1;
  v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  ((void (*)(void (**)(void, void, void, void), void *))a3[2])(a3, v7);
  _Block_release(a3);
}

void sub_18358A3E0(uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void))
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183D4544C();
LABEL_7:
    _Block_release(a3);
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = sub_183D4557C();
    }
    a3[2](a3, v6, v5, v4);
    goto LABEL_7;
  }
  v7[0] = a1;
  v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  ((void (*)(void (**)(void, void, void, void), void *))a3[2])(a3, v7);
  _Block_release(a3);
}

uint64_t sub_18358A4F4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, void *aBlock, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183D4544C();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v16[0] = a1;
      v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_183589908(a3, a4, (void (**)(void, void, void, void, void, void))aBlock, (uint64_t)v16, a6, a7, a3, a4, a8);
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v12 = sub_183D4557C();
    }
    sub_183594DA8(v12);
  }
  swift_bridgeObjectRelease();
LABEL_9:
  _Block_release(aBlock);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18358A678(uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183D4544C();
    _Block_release(a3);
    if (v9) {
      goto LABEL_8;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v18[0] = a1;
    v18[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = sub_183D44C5C();
    uint64_t v14 = sub_183D44C5C();
    unsigned int v15 = (a9 - 1);
    if (v15 < 3) {
      uint64_t v16 = v15 + 1;
    }
    else {
      uint64_t v16 = 0;
    }
    ((void (**)(void, uint64_t, uint64_t, void *, uint64_t, uint64_t))a3)[2](a3, a4, v13, v18, v14, v16);
    _Block_release(a3);
    goto LABEL_14;
  }
  if ((a1 & 0x1000000000000000) != 0) {
    uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else {
    uint64_t v12 = sub_183D4557C();
  }
  sub_183594DD0(v12);
  if (!v9)
  {
    _Block_release(a3);
    goto LABEL_14;
  }
  _Block_release(a3);
LABEL_8:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18358A820(uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_183D4544C();
LABEL_7:
    _Block_release(a3);
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v9 = sub_183D4557C();
    }
    sub_183594D84(v9);
    goto LABEL_7;
  }
  v14[0] = a1;
  v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t result = sub_183D44C5C();
  if (!__OFSUB__(result, a4))
  {
    unsigned int v12 = (a7 - 1);
    if (v12 < 3) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = 0;
    }
    ((void (**)(void, void *, uint64_t, uint64_t, uint64_t))a3)[2](a3, v14, a4, result - a4, v13);
    _Block_release(a3);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_18358A97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *, uint64_t)@<X2>, void (*a4)(void, void, void, void, void, void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, void, void, void, void, void, void, void)@<X6>, uint64_t a8@<X8>)
{
  unint64_t v15 = *(void *)(a2 + 40);
  unint64_t v16 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_1834BFB88(a2);
  return sub_1835894EC(v15, v16, a3, a4, a1, a5, a6, a2, a8, a7);
}

uint64_t sub_18358AA24(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = *v1;
  v11[3] = v5;
  v11[4] = v6;
  v11[0] = v2;
  v11[1] = v3;
  v11[2] = v4;
  uint64_t v7 = HTTPFields.subscript.getter((uint64_t)v11);
  if (*(void *)(v7 + 16))
  {
    if (v4 != 0x65696B6F6F63 || v5 != 0xE600000000000000) {
      sub_183D4592C();
    }
    uint64_t v9 = sub_18358835C(v7);
    swift_bridgeObjectRelease();
    v11[0] = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F60);
    sub_1834FBEF8((unint64_t *)&qword_1E8F61F68, &qword_1E8F61F60);
    uint64_t v8 = sub_183D44A8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t sub_18358AB84(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  if (a2)
  {
    BOOL v9 = v6 == 0x65696B6F6F63 && v5 == 0xE600000000000000;
    if (v9 || (sub_183D4592C() & 1) != 0)
    {
      sub_183521DD8();
      uint64_t v10 = sub_183D451FC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_183594F58(v10, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18351C0FC(v11, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = sub_1834FBAD4(a1, a2);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F70);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183D53660;
      *(void *)(inited + 32) = v4;
      *(unsigned char *)(inited + 64) = 0;
      *(void *)(inited + 40) = v3;
      *(void *)(inited + 48) = v6;
      *(void *)(inited + 56) = v5;
      *(void *)(inited + 72) = v13;
      *(void *)(inited + 80) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18351C0FC(inited, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      return swift_arrayDestroy();
    }
  }
  else
  {
    sub_18351C0FC(MEMORY[0x1E4FBC860], *a3, a3[1], v6, v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_18358AE00(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v10) = sub_183D4546C();
        if (__OFADD__(v8, 1)) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v18[0] = a3;
          v18[1] = a4 & 0xFFFFFFFFFFFFFFLL;
          int v10 = *((unsigned __int8 *)v18 + v9);
          if (*((char *)v18 + v9) < 0)
          {
            switch(__clz(v10 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v13 = (char *)v18 + v9;
LABEL_21:
                LOBYTE(v10) = v13[1] & 0x3F | ((v10 & 0x1F) << 6);
                uint64_t v11 = 2;
                if (!__OFADD__(v8, 1)) {
                  goto LABEL_7;
                }
                goto LABEL_37;
              case 0x1Bu:
                uint64_t v14 = (char *)v18 + v9;
LABEL_27:
                LOBYTE(v10) = v14[2] & 0x3F | ((v14[1] & 0x3F) << 6);
                uint64_t v11 = 3;
                if (!__OFADD__(v8, 1)) {
                  goto LABEL_7;
                }
                goto LABEL_37;
              case 0x1Cu:
                uint64_t v15 = (char *)v18 + v9;
LABEL_31:
                LOBYTE(v10) = v15[3] & 0x3F | ((v15[2] & 0x3F) << 6);
                uint64_t v11 = 4;
                if (!__OFADD__(v8, 1)) {
                  goto LABEL_7;
                }
                goto LABEL_37;
              default:
                break;
            }
          }
        }
        else
        {
          uint64_t v12 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v12 = sub_183D4557C();
          }
          int v10 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0)
          {
            switch(__clz(v10 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v13 = (char *)(v9 + v12);
                goto LABEL_21;
              case 0x1Bu:
                uint64_t v14 = (char *)(v9 + v12);
                goto LABEL_27;
              case 0x1Cu:
                uint64_t v15 = (char *)(v9 + v12);
                goto LABEL_31;
              default:
                break;
            }
          }
        }
        uint64_t v11 = 1;
        if (__OFADD__(v8, 1))
        {
LABEL_37:
          __break(1u);
          JUMPOUT(0x18358B020);
        }
      }
LABEL_7:
      v9 += v11;
      *(unsigned char *)(a1 + v8++) = v10;
    }
    while (v9 < v7);
  }
  uint64_t v16 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
    uint64_t v16 = 11;
  }
  unint64_t result = sub_1835945A4(0xFuLL, v16 | (v7 << 16), a3, a4);
  *(unsigned char *)(a1 + result) = 0;
  return result;
}

uint64_t _nw_http_field_has_name(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183588434(a2, -1, (uint64_t)&v10);
  uint64_t v5 = v11;
  if (v11)
  {
    uint64_t v6 = v10;
    if (v3 == v12 && v13 == v4) {
      char v8 = 1;
    }
    else {
      char v8 = sub_183D4592C();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18358B160(v6, v5);
    return v8 & 1;
  }
  else
  {
    uint64_t result = sub_183D456CC();
    __break(1u);
  }
  return result;
}

uint64_t sub_18358B160(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _nw_http_field_set_value()
{
  unint64_t v0 = sub_183D44C9C();
  return HTTPField.value.setter(v0, v1);
}

void _nw_http_field_access(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = _Block_copy(v3);
  long long v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  v11[2] = *(_OWORD *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v10 = v4;
  void v8[2] = sub_1835948BC;
  void v8[3] = &v9;
  long long v6 = v11[0];
  sub_1834BFB88((uint64_t)v11);
  sub_1834BFB88((uint64_t)v11);
  swift_bridgeObjectRetain();
  sub_18358A070(v6, *((uint64_t *)&v6 + 1), (uint64_t)v11, (void (*)(uint64_t, uint64_t, char *, uint64_t))sub_1835948E0, (void (*)(void, void, void, void, void, void, void, void))v8, v6, *((uint64_t *)&v6 + 1), v7);
  _Block_release(v4);
  sub_18312A0D8((uint64_t)v11);
  _Block_release(v3);
}

void _nw_http_field_access_canonical(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = _Block_copy(v3);
  long long v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  v11[2] = *(_OWORD *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v10 = v4;
  void v8[2] = sub_183595658;
  void v8[3] = &v9;
  long long v6 = v5;
  sub_1834BFB88((uint64_t)v11);
  sub_1834BFB88((uint64_t)v11);
  swift_bridgeObjectRetain();
  sub_18358A070(v6, *((uint64_t *)&v6 + 1), (uint64_t)v11, (void (*)(uint64_t, uint64_t, char *, uint64_t))sub_183595678, (void (*)(void, void, void, void, void, void, void, void))v8, v6, *((uint64_t *)&v6 + 1), v7);
  _Block_release(v4);
  sub_18312A0D8((uint64_t)v11);
  _Block_release(v3);
}

uint64_t _nw_http_field_set_indexing_strategy(uint64_t result, unsigned int a2)
{
  if (a2 >= 4) {
    char v2 = 0;
  }
  else {
    char v2 = a2;
  }
  *(unsigned char *)(result + 32) = v2;
  return result;
}

uint64_t _nw_http_field_get_indexing_strategy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) - 1 < 3) {
    return (*(unsigned char *)(a1 + 32) - 1) + 1;
  }
  else {
    return 0;
  }
}

void sub_18358B3B8()
{
}

void sub_18358B404()
{
}

void sub_18358B450()
{
}

void sub_18358B49C()
{
}

uint64_t sub_18358B4E8(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))(*a2) & 1;
}

uint64_t sub_18358B534(void (*a1)(uint64_t))
{
  swift_beginAccess();
  a1(v1 + 16);
  return swift_endAccess();
}

uint64_t sub_18358B5A0@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  a1[3] = &type metadata for HTTPFields;
  a1[4] = &off_1ECF5BF88;
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_18358B5FC()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t sub_18358B684(uint64_t a1)
{
  if (*(__objc2_class **)a1 == _TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8314__NWHTTPFields)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v1 + 16);
    swift_beginAccess();
    uint64_t v5 = *(void *)(a1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    char v2 = sub_183521734(v4, v5);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t sub_18358B764()
{
  return swift_release();
}

uint64_t sub_18358B76C()
{
  return sub_183592BE4(MEMORY[0x1E4FBC8D0]);
}

uint64_t _nw_http_fields_create()
{
  type metadata accessor for HTTPFields._Storage();
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  v0[2] = MEMORY[0x1E4FBC860];
  v0[3] = sub_1835960A8(v1);
  char v2 = (_DWORD *)swift_slowAlloc();
  v0[4] = v2;
  *char v2 = 0;
  type metadata accessor for __NWHTTPFields();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t _nw_http_fields_copy(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 96);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t _nw_http_fields_is_equal(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 104);
  swift_retain();
  uint64_t v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_release();
  return v1 & 1;
}

uint64_t _nw_http_fields_get_count()
{
  uint64_t v0 = swift_retain();
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, void *@<X8>), void, void))(*(void *)v0 + 80))(&v2, sub_18358B94C, 0, MEMORY[0x1E4FBB550]);
  swift_release();
  return v2;
}

uint64_t sub_18358B94C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(*(void *)(v3 + 16) + 16);
  return result;
}

uint64_t sub_18358B99C(uint64_t a1, unint64_t a2, char *a3)
{
  swift_retain();
  sub_183588434(a2, -1, (uint64_t)&v21);
  uint64_t v6 = v22;
  if (v22)
  {
    uint64_t v7 = (uint64_t)v21;
    char v9 = v23;
    uint64_t v8 = v24;
    size_t v10 = strlen(a3);
    if (v10)
    {
      if (*a3 < 0) {
        goto LABEL_11;
      }
      if (v10 == 1) {
        goto LABEL_10;
      }
      if (a3[1] < 0)
      {
LABEL_11:
        unsigned int v21 = a3;
        uint64_t v22 = v10;
        uint64_t v23 = sub_1835A3780;
        uint64_t v24 = 0;
        sub_18359492C(v7, v6);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
        sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
        sub_183D44C0C();
        uint64_t v13 = 0;
        unint64_t v15 = 0xE000000000000000;
        goto LABEL_12;
      }
      size_t v11 = v10 - 2;
      if (v10 != 2)
      {
        uint64_t v12 = a3 + 2;
        while ((*v12 & 0x80000000) == 0)
        {
          ++v12;
          if (!--v11) {
            goto LABEL_10;
          }
        }
        goto LABEL_11;
      }
    }
LABEL_10:
    sub_18359492C((uint64_t)v21, v22);
    uint64_t v13 = sub_183D44C1C();
    unint64_t v15 = v14;
LABEL_12:
    uint64_t v16 = sub_1834FBAD4(v13, v15);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    unsigned int v21 = (char *)v7;
    uint64_t v22 = v6;
    uint64_t v23 = v9;
    uint64_t v24 = v8;
    char v25 = 0;
    uint64_t v26 = v16;
    uint64_t v27 = v18;
    uint64_t v19 = sub_18358B160(v7, v6);
    MEMORY[0x1F4188790](v19);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(void *)a1 + 80))(sub_183594970);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358BC24(uint64_t *a1, uint64_t a2)
{
  long long v11 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t v9 = *(void *)(*(void *)(v8 + 16) + 16);
  long long v12 = v11;
  uint64_t v13 = v3;
  uint64_t v14 = v4;
  char v15 = v5;
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  sub_1834BFB88(a2);
  sub_18351DF80(v9, v9, (uint64_t)&v12);
  return sub_18312A0D8(a2);
}

uint64_t sub_18358BCD4(uint64_t a1, unint64_t a2, char *a3)
{
  swift_retain();
  sub_183588434(a2, -1, (uint64_t)&v13);
  uint64_t v6 = v14;
  if (v14)
  {
    uint64_t v7 = (uint64_t)v13;
    size_t v8 = strlen(a3);
    if (v8)
    {
      if (*a3 < 0) {
        goto LABEL_11;
      }
      if (v8 == 1) {
        goto LABEL_10;
      }
      if (a3[1] < 0)
      {
LABEL_11:
        uint64_t v13 = a3;
        size_t v14 = v8;
        char v15 = sub_1835A3780;
        uint64_t v16 = 0;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
        sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
        sub_183D44C0C();
        uint64_t v11 = 0;
        goto LABEL_12;
      }
      size_t v9 = v8 - 2;
      if (v8 != 2)
      {
        size_t v10 = a3 + 2;
        while ((*v10 & 0x80000000) == 0)
        {
          ++v10;
          if (!--v9) {
            goto LABEL_10;
          }
        }
        goto LABEL_11;
      }
    }
LABEL_10:
    uint64_t v11 = sub_183D44C1C();
LABEL_12:
    MEMORY[0x1F4188790](v11);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 80))(sub_183594978);
    swift_release();
    sub_18358B160(v7, v6);
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358BEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v10[2] = a4;
  v10[3] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_18358AB84(a6, a7, v10);
}

uint64_t sub_18358BF68(uint64_t a1, unint64_t a2)
{
  swift_retain();
  uint64_t v4 = sub_183588434(a2, -1, (uint64_t)&v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v8;
    MEMORY[0x1F4188790](v4);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 80))(sub_183594988);
    swift_release();
    return sub_18358B160(v6, v5);
  }
  else
  {
    uint64_t result = sub_183D456CC();
    __break(1u);
  }
  return result;
}

uint64_t sub_18358C0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183521BF0(a2, a3, a4, a5);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _nw_http_fields_remove(uint64_t a1, uint64_t a2)
{
  void v4[2] = a2;
  uint64_t v2 = *(void (**)(uint64_t (*)(uint64_t *), void *, uint64_t))(*(void *)a1 + 80);
  swift_retain();
  v2(sub_183594994, v4, MEMORY[0x1E4FBC848] + 8);
  return swift_release();
}

uint64_t sub_18358C1B0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  unint64_t v5 = *(void *)(*(void *)(v3 + 16) + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v5 > a2) {
    return sub_1835226CC(a2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_18358C230(uint64_t a1, unint64_t a2)
{
  void (*v9)(unint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>), void *, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t result;
  void v20[4];
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_retain();
  uint64_t v4 = sub_183588434(a2, -1, (uint64_t)&v23);
  uint64_t v5 = v24;
  if (v24)
  {
    uint64_t v7 = v25;
    uint64_t v6 = v26;
    uint64_t v8 = v23;
    MEMORY[0x1F4188790](v4);
    v20[2] = v8;
    v20[3] = v5;
    unsigned int v21 = v7;
    uint64_t v22 = v6;
    uint64_t v9 = *(void (**)(unint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>), void *, uint64_t))(*(void *)a1 + 80);
    size_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61EA8);
    v9(&v23, sub_18359499C, v20, v10);
    sub_18358B160(v8, v5);
    uint64_t v11 = v24;
    if (!v24)
    {
      swift_release();
      return 0;
    }
    long long v12 = v23;
    uint64_t v13 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0) {
      uint64_t v13 = v23;
    }
    size_t v14 = 7;
    if (((v24 >> 60) & ((v23 & 0x800000000000000) == 0)) != 0) {
      size_t v14 = 11;
    }
    char v15 = sub_1835945A4(0xFuLL, v14 | (v13 << 16), v23, v24);
    uint64_t v16 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v17 = malloc(v15 + 1);
      if (v17)
      {
        uint64_t v18 = v17;
        sub_18358AE00((uint64_t)v17, v16, v12, v11);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v18;
      }
    }
    __break(1u);
  }
  LODWORD(v22) = 0;
  unsigned int v21 = 374;
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t _nw_http_fields_have_field_with_name(uint64_t a1, unint64_t a2)
{
  return sub_18358C440(a1, a2) & 1;
}

uint64_t sub_18358C440(uint64_t a1, unint64_t a2)
{
  swift_retain();
  uint64_t v4 = sub_183588434(a2, -1, (uint64_t)&v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v8;
    MEMORY[0x1F4188790](v4);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(unsigned char *@<X8>)))(*(void *)a1 + 80))(&v8, sub_1835949EC);
    swift_release();
    sub_18358B160(v6, v5);
    return v8;
  }
  else
  {
    uint64_t result = sub_183D456CC();
    __break(1u);
  }
  return result;
}

uint64_t sub_18358C588@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, unsigned char *a3@<X8>)
{
  swift_retain();
  if (*(void *)(sub_18351A02C() + 16))
  {
    swift_bridgeObjectRetain();
    sub_18359A408(a1, a2);
    char v7 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a3 = v7 & 1;
  return result;
}

void _nw_http_fields_append_advanced(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *aBlock)
{
  uint64_t v11 = _Block_copy(aBlock);
  sub_18358C69C(a1, a2, a3, a4, a5, v11);

  _Block_release(v11);
}

uint64_t sub_18358C69C(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *aBlock)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (void (**)(void *, uint64_t *))_Block_copy(aBlock);
  swift_retain();
  sub_183588434(a2, a3, (uint64_t)&v26);
  uint64_t v12 = v27;
  if (v27)
  {
    uint64_t v13 = (uint64_t)v26;
    size_t v14 = v28;
    uint64_t v15 = v29;
    if (a5 == -1)
    {
      a5 = strlen(a4);
      if (!a5) {
        goto LABEL_13;
      }
    }
    else if (!a5)
    {
      goto LABEL_13;
    }
    if (*a4 < 0) {
      goto LABEL_14;
    }
    if (a5 == 1) {
      goto LABEL_13;
    }
    if (a4[1] < 0)
    {
LABEL_14:
      uint64_t v26 = a4;
      uint64_t v27 = a5;
      unsigned int v28 = sub_1835A3780;
      uint64_t v29 = 0;
      sub_18359492C(v13, v12);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
      sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
      sub_183D44C0C();
      uint64_t v18 = 0;
      unint64_t v20 = 0xE000000000000000;
      goto LABEL_15;
    }
    size_t v16 = a5 - 2;
    if (a5 != 2)
    {
      uint64_t v17 = a4 + 2;
      while ((*v17 & 0x80000000) == 0)
      {
        ++v17;
        if (!--v16) {
          goto LABEL_13;
        }
      }
      goto LABEL_14;
    }
LABEL_13:
    sub_18359492C((uint64_t)v26, v27);
    uint64_t v18 = sub_183D44C1C();
    unint64_t v20 = v19;
LABEL_15:
    uint64_t v21 = sub_1834FBAD4(v18, v20);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v26 = (char *)v13;
    uint64_t v27 = v12;
    unsigned int v28 = v14;
    uint64_t v29 = v15;
    char v30 = 0;
    uint64_t v31 = v21;
    uint64_t v32 = v23;
    sub_18358B160(v13, v12);
    v11[2](v11, (uint64_t *)&v26);
    _Block_release(v11);
    MEMORY[0x1F4188790](v24);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(void *)a1 + 80))(sub_1835949F8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358C9A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  char v6 = *((unsigned char *)a2 + 32);
  uint64_t v8 = a2[5];
  uint64_t v7 = a2[6];
  uint64_t v9 = *a1;
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)(v9 + 16) + 16);
  v12[0] = v3;
  v12[1] = v2;
  v12[2] = v5;
  v12[3] = v4;
  char v13 = v6;
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18351DF80(v10, v10, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _nw_http_fields_access_value_by_name(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  sub_18358CAC8(a1, a2, v5);

  _Block_release(v5);
}

void sub_18358CAC8(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v6 = sub_183588434(a2, -1, (uint64_t)&v9);
  uint64_t v7 = v10;
  if (v10)
  {
    uint64_t v8 = v9;
    MEMORY[0x1F4188790](v6);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(void *)a1 + 80))(sub_183594A00);
    swift_release();
    sub_18358B160(v8, v7);
    _Block_release(v5);
  }
  else
  {
    sub_183D456CC();
    __break(1u);
  }
}

uint64_t sub_18358CC20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a1;
  v15[3] = a5;
  v15[4] = v7;
  v15[0] = a2;
  v15[1] = a3;
  void v15[2] = a4;
  uint64_t v8 = sub_18358AA24(v15);
  if (v9)
  {
    uint64_t v10 = MEMORY[0x1F4188790](v8);
    unint64_t v11 = MEMORY[0x1F4188790](v10);
    sub_183589740(v11, v12, (uint64_t (*)(char *))sub_183595640);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t))(a6 + 16);
    return v14(a6);
  }
}

void _nw_http_fields_access_field(uint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = _Block_copy(v5);
  void v8[2] = a2;
  void v8[3] = v6;
  uint64_t v7 = *(void (**)(uint64_t (*)(uint64_t *), void *, uint64_t))(*(void *)a1 + 80);
  swift_retain();
  v7(sub_183594A10, v8, MEMORY[0x1E4FBC848] + 8);
  swift_release();
  _Block_release(v6);
  _Block_release(v5);
}

uint64_t sub_18358CDE4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  uint64_t v5 = *a1;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 16);
  if (*(void *)(v6 + 16) <= a2) {
    goto LABEL_5;
  }
  uint64_t v7 = v6 + (a2 << 6);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(v7 + 48);
  uint64_t v10 = *(void *)(v7 + 56);
  char v11 = *(unsigned char *)(v7 + 64);
  uint64_t v12 = *(void *)(v7 + 72);
  uint64_t v13 = *(void *)(v7 + 80);
  *(void *)&long long v22 = *(void *)(v7 + 32);
  *((void *)&v22 + 1) = v8;
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  char v25 = v11;
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  uint64_t v14 = *(void (**)(uint64_t, long long *))(a3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(a3, &v22);
  long long v16 = v22;
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  char v19 = v25;
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  return HTTPFields.subscript.setter((uint64_t *)&v16, a2);
}

unint64_t _nw_http_fields_enumerate_by_name(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  LOBYTE(a2) = sub_18358CF5C(a1, a2, v5);
  _Block_release(v5);
  return a2 & 1;
}

uint64_t sub_18358CF5C(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v6 = sub_183588434(a2, -1, (uint64_t)&v10);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t v8 = v10;
    MEMORY[0x1F4188790](v6);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(unint64_t *@<X0>, char *@<X8>)))(*(void *)a1 + 80))(&v10, sub_183594A18);
    swift_release();
    sub_18358B160(v8, v7);
    _Block_release(v5);
    return v10;
  }
  else
  {
    uint64_t result = sub_183D456CC();
    __break(1u);
  }
  return result;
}

uint64_t sub_18358D0C8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  v72 = a7;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  unint64_t v86 = *a1;
  *(void *)&long long v88 = a2;
  *((void *)&v88 + 1) = a3;
  *(void *)&long long v89 = a4;
  *((void *)&v89 + 1) = a5;
  uint64_t v8 = HTTPFields.subscript.getter((uint64_t)&v88);
  uint64_t v80 = *(void *)(v8 + 16);
  if (!v80)
  {
LABEL_83:
    uint64_t result = swift_bridgeObjectRelease();
    char v70 = 1;
    goto LABEL_84;
  }
  uint64_t v9 = 0;
  uint64_t v81 = 0;
  uint64_t v71 = v8;
  uint64_t v79 = v8 + 32;
  uint64_t v73 = a6 + 16;
  uint64_t v78 = a6;
  while (2)
  {
    uint64_t v10 = v79 + 56 * v9;
    long long v12 = *(_OWORD *)(v10 + 16);
    long long v11 = *(_OWORD *)(v10 + 32);
    long long v13 = *(_OWORD *)v10;
    unint64_t v91 = *(void *)(v10 + 48);
    long long v89 = v12;
    long long v90 = v11;
    long long v88 = v13;
    long long v14 = v13;
    uint64_t v15 = MEMORY[0x1F4188790](v8);
    *(&v71 - 2) = a6;
    uint64_t v16 = MEMORY[0x1F4188790](v15);
    *(&v71 - 2) = (uint64_t)sub_18359565C;
    *(&v71 - 1) = v17;
    uint64_t v18 = MEMORY[0x1F4188790](v16);
    *(&v71 - 6) = (uint64_t)&v88;
    *(&v71 - 5) = (uint64_t)sub_183595680;
    *(&v71 - 4) = v19;
    *(_OWORD *)(&v71 - 3) = v14;
    if ((*((void *)&v14 + 1) & 0x1000000000000000) != 0)
    {
LABEL_81:
      sub_1834BFB88((uint64_t)&v88);
      uint64_t v68 = v81;
      sub_183D4544C();
      uint64_t v81 = v68;
      goto LABEL_78;
    }
    unint64_t v21 = *((void *)&v90 + 1);
    unint64_t v20 = v91;
    v83 = &v71;
    uint64_t v84 = v9;
    long long v82 = v14;
    if ((*((void *)&v14 + 1) & 0x2000000000000000) != 0)
    {
      v77 = &v71;
      unint64_t v86 = v14;
      uint64_t v87 = *((void *)&v14 + 1) & 0xFFFFFFFFFFFFFFLL;
      MEMORY[0x1F4188790](v18);
      v76 = &v71 - 8;
      *(&v71 - 6) = (uint64_t)sub_183595680;
      *(&v71 - 5) = v33;
      *(&v71 - 4) = (uint64_t)&v86;
      *(_OWORD *)(&v71 - 3) = v14;
      *(&v71 - 1) = (uint64_t)&v88;
      if ((v20 & 0x2000000000000000) != 0) {
        unint64_t v34 = HIBYTE(v20) & 0xF;
      }
      else {
        unint64_t v34 = v21 & 0xFFFFFFFFFFFFLL;
      }
      if ((v20 & 0x1000000000000000) != 0) {
        uint64_t v35 = (v21 >> 59) & 1;
      }
      else {
        uint64_t v35 = 1;
      }
      uint64_t v75 = v35;
      uint64_t v36 = 4 << v35;
      unint64_t v37 = 15;
      while (1)
      {
        while (1)
        {
          if (4 * v34 == v37 >> 14)
          {
LABEL_58:
            sub_1834BFB88((uint64_t)&v88);
            uint64_t v43 = v81;
            char v44 = sub_183589E08((uint64_t)sub_183594F40, (uint64_t)v76, v21, v20);
            uint64_t v81 = v43;
            a6 = v78;
            goto LABEL_77;
          }
          unint64_t v38 = v37 & 0xC;
          unint64_t v39 = v37;
          if (v38 == v36) {
            unint64_t v39 = sub_183520284(v37, v21, v20);
          }
          unint64_t v40 = v39 >> 16;
          if (v39 >> 16 >= v34)
          {
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
          if ((v20 & 0x1000000000000000) == 0) {
            break;
          }
          char v42 = sub_183D44CFC();
          if (v38 == v36) {
            goto LABEL_56;
          }
LABEL_51:
          if ((v20 & 0x1000000000000000) == 0) {
            goto LABEL_39;
          }
LABEL_52:
          if (v34 <= v37 >> 16) {
            goto LABEL_87;
          }
          unint64_t v37 = sub_183D44CBC();
          if (v42 < 0)
          {
LABEL_59:
            uint64_t v45 = 11;
            if (v75) {
              uint64_t v45 = 7;
            }
            unint64_t v46 = sub_1835945A4(0xFuLL, v45 | (v34 << 16), v21, v20);
            uint64_t v47 = v46 + 1;
            if (!__OFADD__(v46, 1))
            {
              if ((v47 & 0x8000000000000000) == 0)
              {
                uint64_t isStackAllocationSafe = sub_1834BFB88((uint64_t)&v88);
                if (v47 < 1025
                  || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
                {
                  MEMORY[0x1F4188790](isStackAllocationSafe);
                  char v50 = (char *)&v71 - v49;
                  sub_18358AE00((uint64_t)&v71 - v49, v47, v21, v20);
                  uint64_t v51 = sub_183D44C5C();
                  uint64_t v52 = sub_183D44C5C();
                  a6 = v78;
                  char v53 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, char *, uint64_t))(v78 + 16))(v78, &v86, v51, v50, v52);
                  goto LABEL_73;
                }
                uint64_t v62 = swift_slowAlloc();
                sub_18358AE00(v62, v47, v21, v20);
                uint64_t v63 = sub_183D44C5C();
                uint64_t v64 = sub_183D44C5C();
                a6 = v78;
                char v65 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t))(v78 + 16))(v78, &v86, v63, v62, v64);
                goto LABEL_76;
              }
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
            }
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
        }
        if ((v20 & 0x2000000000000000) != 0)
        {
          v85[0] = v21;
          v85[1] = v20 & 0xFFFFFFFFFFFFFFLL;
          char v42 = *((unsigned char *)v85 + v40);
          if (v38 == v36) {
            goto LABEL_56;
          }
          goto LABEL_51;
        }
        uint64_t v41 = (v20 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v21 & 0x1000000000000000) == 0) {
          uint64_t v41 = sub_183D4557C();
        }
        char v42 = *(unsigned char *)(v41 + v40);
        if (v38 != v36) {
          goto LABEL_51;
        }
LABEL_56:
        unint64_t v37 = sub_183520284(v37, v21, v20);
        if ((v20 & 0x1000000000000000) != 0) {
          goto LABEL_52;
        }
LABEL_39:
        unint64_t v37 = (v37 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v42 < 0) {
          goto LABEL_59;
        }
      }
    }
    if ((v14 & 0x1000000000000000) == 0) {
      goto LABEL_81;
    }
    v77 = &v71;
    MEMORY[0x1F4188790](v18);
    v76 = &v71 - 8;
    *(&v71 - 6) = (uint64_t)sub_183595680;
    *(&v71 - 5) = v22;
    uint64_t v74 = v23;
    *(&v71 - 4) = v23;
    *(_OWORD *)(&v71 - 3) = v14;
    *(&v71 - 1) = (uint64_t)&v88;
    if ((v20 & 0x2000000000000000) != 0) {
      unint64_t v24 = HIBYTE(v20) & 0xF;
    }
    else {
      unint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if ((v20 & 0x1000000000000000) != 0) {
      uint64_t v25 = (v21 >> 59) & 1;
    }
    else {
      uint64_t v25 = 1;
    }
    uint64_t v75 = v25;
    uint64_t v26 = 4 << v25;
    unint64_t v27 = 15;
    do
    {
      while (1)
      {
        if (4 * v24 == v27 >> 14) {
          goto LABEL_58;
        }
        unint64_t v28 = v27 & 0xC;
        unint64_t v29 = v27;
        if (v28 == v26) {
          unint64_t v29 = sub_183520284(v27, v21, v20);
        }
        unint64_t v30 = v29 >> 16;
        if (v29 >> 16 >= v24) {
          goto LABEL_86;
        }
        if ((v20 & 0x1000000000000000) == 0) {
          break;
        }
        char v32 = sub_183D44CFC();
        if (v28 == v26) {
          goto LABEL_30;
        }
LABEL_25:
        if ((v20 & 0x1000000000000000) != 0) {
          goto LABEL_26;
        }
LABEL_13:
        unint64_t v27 = (v27 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v32 < 0) {
          goto LABEL_66;
        }
      }
      if ((v20 & 0x2000000000000000) != 0)
      {
        unint64_t v86 = v21;
        uint64_t v87 = v20 & 0xFFFFFFFFFFFFFFLL;
        char v32 = *((unsigned char *)&v86 + v30);
        if (v28 == v26) {
          goto LABEL_30;
        }
        goto LABEL_25;
      }
      uint64_t v31 = (v20 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v21 & 0x1000000000000000) == 0) {
        uint64_t v31 = sub_183D4557C();
      }
      char v32 = *(unsigned char *)(v31 + v30);
      if (v28 != v26) {
        goto LABEL_25;
      }
LABEL_30:
      unint64_t v27 = sub_183520284(v27, v21, v20);
      if ((v20 & 0x1000000000000000) == 0) {
        goto LABEL_13;
      }
LABEL_26:
      if (v24 <= v27 >> 16) {
        goto LABEL_88;
      }
      unint64_t v27 = sub_183D44CBC();
    }
    while ((v32 & 0x80) == 0);
LABEL_66:
    uint64_t v54 = 11;
    if (v75) {
      uint64_t v54 = 7;
    }
    unint64_t v55 = sub_1835945A4(0xFuLL, v54 | (v24 << 16), v21, v20);
    uint64_t v56 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      goto LABEL_90;
    }
    if (v56 < 0) {
      goto LABEL_92;
    }
    uint64_t v57 = sub_1834BFB88((uint64_t)&v88);
    if (v56 >= 1025)
    {
      uint64_t v57 = swift_stdlib_isStackAllocationSafe();
      if ((v57 & 1) == 0)
      {
        uint64_t v62 = swift_slowAlloc();
        sub_18358AE00(v62, v56, v21, v20);
        uint64_t v66 = sub_183D44C5C();
        uint64_t v67 = sub_183D44C5C();
        a6 = v78;
        char v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 16))(v78, v74, v66, v62, v67);
LABEL_76:
        char v44 = v65;
        MEMORY[0x185318E50](v62, -1, -1);
        goto LABEL_77;
      }
    }
    MEMORY[0x1F4188790](v57);
    uint64_t v59 = (char *)&v71 - v58;
    sub_18358AE00((uint64_t)&v71 - v58, v56, v21, v20);
    uint64_t v60 = sub_183D44C5C();
    uint64_t v61 = sub_183D44C5C();
    a6 = v78;
    char v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t))(v78 + 16))(v78, v74, v60, v59, v61);
LABEL_73:
    char v44 = v53;
LABEL_77:
    uint64_t v9 = v84;
    LOBYTE(v85[0]) = v44 & 1;
LABEL_78:
    uint64_t v8 = sub_18312A0D8((uint64_t)&v88);
    if (v85[0])
    {
      if (++v9 == v80) {
        goto LABEL_83;
      }
      continue;
    }
    break;
  }
  uint64_t result = swift_bridgeObjectRelease();
  char v70 = 0;
LABEL_84:
  char *v72 = v70;
  return result;
}

uint64_t _nw_http_fields_enumerate(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_183594A28);
}

uint64_t sub_18358D974@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v73 = v3 + 16;
  uint64_t v75 = a2;
  uint64_t v67 = a2 + 16;
  uint64_t v65 = v3;
  swift_retain();
  unint64_t v4 = 0;
  uint64_t v72 = 0;
  do
  {
    uint64_t v5 = v73;
    uint64_t v6 = swift_beginAccess();
    unint64_t v7 = *(void *)(*(void *)v5 + 16);
    if (v4 == v7)
    {
      uint64_t result = swift_release();
      char v64 = 1;
      goto LABEL_83;
    }
    if (v4 >= v7)
    {
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    uint64_t v8 = *(void *)v5 + (v4 << 6);
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v11 = *(void *)(v8 + 48);
    uint64_t v12 = *(void *)(v8 + 56);
    char v13 = *(unsigned char *)(v8 + 64);
    unint64_t v15 = *(void *)(v8 + 72);
    unint64_t v14 = *(void *)(v8 + 80);
    v83[0] = *(void *)(v8 + 32);
    unint64_t v9 = v83[0];
    v83[1] = v10;
    v83[2] = v11;
    v83[3] = v12;
    char v84 = v13;
    unint64_t v85 = v15;
    unint64_t v86 = v14;
    uint64_t v16 = MEMORY[0x1F4188790](v6);
    *(&v65 - 2) = v75;
    uint64_t v17 = MEMORY[0x1F4188790](v16);
    *(&v65 - 2) = (uint64_t)sub_183594EC0;
    *(&v65 - 1) = v18;
    uint64_t v19 = MEMORY[0x1F4188790](v17);
    *(&v65 - 6) = (uint64_t)v83;
    *(&v65 - 5) = (uint64_t)sub_183594EF4;
    *(&v65 - 4) = v20;
    *(&v65 - 3) = v9;
    *(&v65 - 2) = v10;
    if ((v10 & 0x1000000000000000) != 0)
    {
LABEL_81:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v62 = v72;
      sub_183D4544C();
      uint64_t v72 = v62;
      goto LABEL_79;
    }
    v76 = &v65;
    unint64_t v77 = v4;
    uint64_t v78 = v12;
    uint64_t v79 = v10;
    unint64_t v74 = v9;
    if ((v10 & 0x2000000000000000) != 0)
    {
      uint64_t v71 = &v65;
      unint64_t v81 = v9;
      uint64_t v82 = v10 & 0xFFFFFFFFFFFFFFLL;
      MEMORY[0x1F4188790](v19);
      char v70 = &v65 - 8;
      *(&v65 - 6) = (uint64_t)sub_183594EF4;
      *(&v65 - 5) = v32;
      *(&v65 - 4) = (uint64_t)&v81;
      *(&v65 - 3) = v9;
      *(&v65 - 2) = v10;
      *(&v65 - 1) = (uint64_t)v83;
      if ((v14 & 0x2000000000000000) != 0) {
        unint64_t v33 = HIBYTE(v14) & 0xF;
      }
      else {
        unint64_t v33 = v15 & 0xFFFFFFFFFFFFLL;
      }
      if ((v14 & 0x1000000000000000) != 0) {
        uint64_t v34 = (v15 >> 59) & 1;
      }
      else {
        uint64_t v34 = 1;
      }
      uint64_t v69 = v34;
      uint64_t v35 = 4 << v34;
      unint64_t v36 = 15;
      while (1)
      {
        while (1)
        {
          if (4 * v33 == v36 >> 14)
          {
LABEL_59:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v42 = v72;
            char v43 = sub_183589E08((uint64_t)sub_183594F40, (uint64_t)v70, v15, v14);
            uint64_t v72 = v42;
            goto LABEL_78;
          }
          unint64_t v37 = v36 & 0xC;
          unint64_t v38 = v36;
          if (v37 == v35) {
            unint64_t v38 = sub_183520284(v36, v15, v14);
          }
          unint64_t v39 = v38 >> 16;
          if (v38 >> 16 >= v33)
          {
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          if ((v14 & 0x1000000000000000) == 0) {
            break;
          }
          char v41 = sub_183D44CFC();
          if (v37 == v35) {
            goto LABEL_57;
          }
LABEL_52:
          if ((v14 & 0x1000000000000000) == 0) {
            goto LABEL_40;
          }
LABEL_53:
          if (v33 <= v36 >> 16) {
            goto LABEL_86;
          }
          unint64_t v36 = sub_183D44CBC();
          if (v41 < 0)
          {
LABEL_60:
            uint64_t v44 = 11;
            if (v69) {
              uint64_t v44 = 7;
            }
            unint64_t v45 = sub_1835945A4(0xFuLL, v44 | (v33 << 16), v15, v14);
            uint64_t v46 = v45 + 1;
            if (!__OFADD__(v45, 1))
            {
              if ((v46 & 0x8000000000000000) == 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
                if (v46 < 1025
                  || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
                {
                  MEMORY[0x1F4188790](isStackAllocationSafe);
                  sub_18358AE00((uint64_t)&v65 - v48, v46, v15, v14);
                  sub_183D44C5C();
                  sub_183D44C5C();
                  char v49 = (*(uint64_t (**)(uint64_t))(v75 + 16))(v75);
                  goto LABEL_74;
                }
                uint64_t v55 = swift_slowAlloc();
                sub_18358AE00(v55, v46, v15, v14);
                uint64_t v56 = sub_183D44C5C();
                uint64_t v57 = sub_183D44C5C();
                char v43 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t))(v75 + 16))(v75, &v81, v56, v55, v57);
                uint64_t v58 = v55;
                goto LABEL_77;
              }
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
            }
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
        }
        if ((v14 & 0x2000000000000000) != 0)
        {
          v80[0] = v15;
          v80[1] = v14 & 0xFFFFFFFFFFFFFFLL;
          char v41 = *((unsigned char *)v80 + v39);
          if (v37 == v35) {
            goto LABEL_57;
          }
          goto LABEL_52;
        }
        uint64_t v40 = (v14 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v15 & 0x1000000000000000) == 0) {
          uint64_t v40 = sub_183D4557C();
        }
        char v41 = *(unsigned char *)(v40 + v39);
        if (v37 != v35) {
          goto LABEL_52;
        }
LABEL_57:
        unint64_t v36 = sub_183520284(v36, v15, v14);
        if ((v14 & 0x1000000000000000) != 0) {
          goto LABEL_53;
        }
LABEL_40:
        unint64_t v36 = (v36 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v41 < 0) {
          goto LABEL_60;
        }
      }
    }
    if ((v9 & 0x1000000000000000) == 0) {
      goto LABEL_81;
    }
    uint64_t v71 = &v65;
    MEMORY[0x1F4188790](v19);
    char v70 = &v65 - 8;
    *(&v65 - 6) = (uint64_t)sub_183594EF4;
    *(&v65 - 5) = v21;
    uint64_t v68 = v22;
    *(&v65 - 4) = v22;
    *(&v65 - 3) = v9;
    *(&v65 - 2) = v10;
    *(&v65 - 1) = (uint64_t)v83;
    if ((v14 & 0x2000000000000000) != 0) {
      unint64_t v23 = HIBYTE(v14) & 0xF;
    }
    else {
      unint64_t v23 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if ((v14 & 0x1000000000000000) != 0) {
      uint64_t v24 = (v15 >> 59) & 1;
    }
    else {
      uint64_t v24 = 1;
    }
    uint64_t v69 = v24;
    uint64_t v25 = 4 << v24;
    unint64_t v26 = 15;
    do
    {
      while (1)
      {
        if (4 * v23 == v26 >> 14) {
          goto LABEL_59;
        }
        unint64_t v27 = v26 & 0xC;
        unint64_t v28 = v26;
        if (v27 == v25) {
          unint64_t v28 = sub_183520284(v26, v15, v14);
        }
        unint64_t v29 = v28 >> 16;
        if (v28 >> 16 >= v23) {
          goto LABEL_85;
        }
        if ((v14 & 0x1000000000000000) == 0) {
          break;
        }
        char v31 = sub_183D44CFC();
        if (v27 == v25) {
          goto LABEL_31;
        }
LABEL_26:
        if ((v14 & 0x1000000000000000) != 0) {
          goto LABEL_27;
        }
LABEL_14:
        unint64_t v26 = (v26 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v31 < 0) {
          goto LABEL_67;
        }
      }
      if ((v14 & 0x2000000000000000) != 0)
      {
        unint64_t v81 = v15;
        uint64_t v82 = v14 & 0xFFFFFFFFFFFFFFLL;
        char v31 = *((unsigned char *)&v81 + v29);
        if (v27 == v25) {
          goto LABEL_31;
        }
        goto LABEL_26;
      }
      uint64_t v30 = (v14 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v15 & 0x1000000000000000) == 0) {
        uint64_t v30 = sub_183D4557C();
      }
      char v31 = *(unsigned char *)(v30 + v29);
      if (v27 != v25) {
        goto LABEL_26;
      }
LABEL_31:
      unint64_t v26 = sub_183520284(v26, v15, v14);
      if ((v14 & 0x1000000000000000) == 0) {
        goto LABEL_14;
      }
LABEL_27:
      if (v23 <= v26 >> 16) {
        goto LABEL_87;
      }
      unint64_t v26 = sub_183D44CBC();
    }
    while ((v31 & 0x80) == 0);
LABEL_67:
    uint64_t v50 = 11;
    if (v69) {
      uint64_t v50 = 7;
    }
    unint64_t v51 = sub_1835945A4(0xFuLL, v50 | (v23 << 16), v15, v14);
    uint64_t v52 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      goto LABEL_90;
    }
    if (v52 < 0) {
      goto LABEL_92;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = swift_bridgeObjectRetain();
    if (v52 >= 1025)
    {
      uint64_t v53 = swift_stdlib_isStackAllocationSafe();
      if ((v53 & 1) == 0)
      {
        uint64_t v59 = swift_slowAlloc();
        sub_18358AE00(v59, v52, v15, v14);
        uint64_t v60 = sub_183D44C5C();
        uint64_t v61 = sub_183D44C5C();
        char v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 16))(v75, v68, v60, v59, v61);
        uint64_t v58 = v59;
LABEL_77:
        MEMORY[0x185318E50](v58, -1, -1);
        goto LABEL_78;
      }
    }
    MEMORY[0x1F4188790](v53);
    sub_18358AE00((uint64_t)&v65 - v54, v52, v15, v14);
    sub_183D44C5C();
    sub_183D44C5C();
    char v49 = (*(uint64_t (**)(uint64_t))(v75 + 16))(v75);
LABEL_74:
    char v43 = v49;
LABEL_78:
    unint64_t v4 = v77;
    LOBYTE(v80[0]) = v43 & 1;
LABEL_79:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v4;
  }
  while ((v80[0] & 1) != 0);
  uint64_t result = swift_release();
  char v64 = 0;
LABEL_83:
  *uint64_t v66 = v64;
  return result;
}

uint64_t _nw_http_fields_enumerate_field(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_183594A30);
}

uint64_t sub_18358E2D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(*(void *)(v6 + 16) + 16);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *a1;
      swift_beginAccess();
      uint64_t v12 = *(void *)(v11 + 16);
      if (v10 >= *(void *)(v12 + 16)) {
        __break(1u);
      }
      uint64_t v13 = v12 + v9;
      uint64_t v14 = *(void *)(v13 + 40);
      uint64_t v15 = *(void *)(v13 + 48);
      uint64_t v16 = *(void *)(v13 + 56);
      char v17 = *(unsigned char *)(v13 + 64);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = *(void *)(v13 + 80);
      *(void *)&long long v27 = *(void *)(v13 + 32);
      *((void *)&v27 + 1) = v14;
      uint64_t v28 = v15;
      uint64_t v29 = v16;
      char v30 = v17;
      uint64_t v31 = v18;
      uint64_t v32 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v16) = (*(uint64_t (**)(uint64_t, unint64_t, long long *))(a2 + 16))(a2, v10, &v27);
      long long v21 = v27;
      uint64_t v22 = v28;
      uint64_t v23 = v29;
      char v24 = v30;
      uint64_t v25 = v31;
      uint64_t v26 = v32;
      uint64_t result = HTTPFields.subscript.setter((uint64_t *)&v21, v10);
      if (!v16) {
        break;
      }
      ++v10;
      v9 += 64;
      if (v8 == v10) {
        goto LABEL_6;
      }
    }
    char v20 = 0;
  }
  else
  {
LABEL_6:
    char v20 = 1;
  }
  *a3 = v20;
  return result;
}

uint64_t _nw_http_fields_enumerate_const_field(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_183594A38);
}

uint64_t _nw_http_fields_enumerateTm(uint64_t a1, void *aBlock, uint64_t a3)
{
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = _Block_copy(v5);
  swift_retain();
  void v8[2] = v6;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void *, void))(*(void *)a1 + 80))(&v9, a3, v8, MEMORY[0x1E4FBB390]);
  swift_release();
  _Block_release(v6);
  _Block_release(v5);
  return v9;
}

uint64_t sub_18358E510@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 16;
  swift_retain();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      if (v10 >= v8) {
        __break(1u);
      }
      uint64_t v11 = v7 + v9;
      uint64_t v12 = *(void *)(v11 + 72);
      uint64_t v13 = *(void *)(v11 + 80);
      char v14 = *(unsigned char *)(v11 + 64);
      uint64_t v15 = *(void *)(v11 + 48);
      uint64_t v16 = *(void *)(v11 + 56);
      uint64_t v17 = *(void *)(v11 + 40);
      v19[0] = *(void *)(v11 + 32);
      v19[1] = v17;
      v19[2] = v15;
      v19[3] = v16;
      char v20 = v14;
      uint64_t v21 = v12;
      uint64_t v22 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LOBYTE(v13) = (*(uint64_t (**)(uint64_t, unint64_t, void *))(a2 + 16))(a2, v10, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        break;
      }
      ++v10;
      uint64_t v7 = *(void *)v6;
      unint64_t v8 = *(void *)(*(void *)v6 + 16);
      v9 += 64;
      if (v10 == v8) {
        goto LABEL_6;
      }
    }
    uint64_t result = swift_release();
    *a3 = 0;
  }
  else
  {
LABEL_6:
    uint64_t result = swift_release();
    *a3 = 1;
  }
  return result;
}

uint64_t sub_18358E67C(void (*a1)(uint64_t))
{
  swift_beginAccess();
  a1(v1 + 296);
  return swift_endAccess();
}

void *sub_18358E6E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + 16);
  swift_beginAccess();
  memcpy(__dst, v3, sizeof(__dst));
  a1[3] = (uint64_t)&type metadata for HTTPRequest;
  a1[4] = (uint64_t)&off_1ECF5C858;
  uint64_t v4 = swift_allocObject();
  *a1 = v4;
  memcpy((void *)(v4 + 16), v3, 0x120uLL);
  return sub_18350BA8C(__dst);
}

uint64_t sub_18358E784()
{
  uint64_t v1 = (const void *)(v0 + 16);
  swift_beginAccess();
  memcpy(__dst, (const void *)(v0 + 16), sizeof(__dst));
  uint64_t v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), v1, 0x120uLL);
  sub_18350BA8C(__dst);
  return v2;
}

uint64_t sub_18358E830(__objc2_class **a1)
{
  if (*a1 != _TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8315__NWHTTPRequest) {
    goto LABEL_5;
  }
  uint64_t v2 = a1;
  swift_beginAccess();
  memcpy(__dst, (const void *)(v1 + 16), sizeof(__dst));
  v2 += 2;
  swift_beginAccess();
  memcpy(v10, v2, sizeof(v10));
  memcpy(v8, __dst, sizeof(v8));
  memcpy(v7, v2, sizeof(v7));
  sub_18350BA8C(__dst);
  sub_18350BA8C(v10);
  if (!_s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v7))
  {
    sub_18356D810(v10);
    sub_18356D810(__dst);
LABEL_5:
    char v5 = 0;
    return v5 & 1;
  }
  uint64_t v3 = __dst[35];
  uint64_t v4 = v10[35];
  swift_retain();
  swift_retain();
  char v5 = sub_183521734(v3, v4);
  swift_release();
  swift_release();
  sub_18356D810(v10);
  sub_18356D810(__dst);
  return v5 & 1;
}

void *sub_18358E988()
{
  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  return sub_18356D810(v2);
}

uint64_t sub_18358E9C4()
{
  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_18356D810(v2);
  return swift_deallocClassInstance();
}

uint64_t sub_18358EA14(uint64_t a1, const char *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_183D4447C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v20 - v11;
  unint64_t v13 = sub_183D44C9C();
  uint64_t v15 = v14;
  uint64_t v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 && (uint64_t v17 = v13, (sub_183529FF8(v13, v14) & 1) != 0))
  {
    sub_18358ED14(a2, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      v22[0] = v17;
      v22[1] = v15;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
      HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], &v21);
      HTTPRequest.init(method:url:headerFields:)(v22, (uint64_t)v10, &v21, v23);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      type metadata accessor for __NWHTTPRequest();
      uint64_t v18 = swift_allocObject();
      memcpy((void *)(v18 + 16), v23, 0x120uLL);
      return v18;
    }
    sub_183138A24((uint64_t)v5, &qword_1E8F61F40);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358ED14@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v19 - v8;
  CFIndex v10 = strlen(a1);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringEncoding v12 = sub_183D443DC();
  CFURLRef v13 = CFURLCreateAbsoluteURLWithBytes(v11, (const UInt8 *)a1, v10, v12, 0, 0);
  if (v13)
  {
    CFURLRef v14 = v13;
    sub_183D4443C();

    uint64_t v15 = sub_183D4447C();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 0, 1, v15);
  }
  else
  {
    uint64_t v15 = sub_183D4447C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  }
  sub_183594E58((uint64_t)v7, (uint64_t)v9);
  sub_183D4447C();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) == 1)
  {
    sub_183138A24((uint64_t)v9, &qword_1E8F61F40);
    uint64_t v17 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v9, v15);
    uint64_t v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, v17, 1, v15);
}

uint64_t _nw_http_request_has_method(uint64_t a1)
{
  swift_retain();
  uint64_t v2 = sub_183D44C9C();
  uint64_t v4 = v3;
  swift_beginAccess();
  if (*(void *)(a1 + 56) == v2 && *(void *)(a1 + 64) == v4) {
    char v6 = 1;
  }
  else {
    char v6 = sub_183D4592C();
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  return v6 & 1;
}

uint64_t sub_18358EFD8(uint64_t a1)
{
  swift_retain();
  unint64_t v2 = sub_183D44C9C();
  unint64_t v4 = v3;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    unint64_t v6 = v2;
    if (sub_183529FF8(v2, v3))
    {
      swift_beginAccess();
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      char v11 = *(unsigned char *)(a1 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 == 0x646F6874656D3ALL && v10 == 0xE700000000000000 || (sub_183D4592C() & 1) != 0)
      {
        if (sub_183529FF8(v6, v4))
        {
          *(void *)(a1 + 16) = v8;
          *(void *)(a1 + 24) = v7;
          *(void *)(a1 + 32) = v9;
          *(void *)(a1 + 40) = v10;
          *(unsigned char *)(a1 + 48) = v11;
          *(void *)(a1 + 56) = v6;
          *(void *)(a1 + 64) = v4;
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        __break(1u);
      }
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358F1A8(uint64_t a1, char *a2)
{
  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = 0;
    sub_1834BFA48(v10, v11);
    return swift_release();
  }
  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v7 = sub_183D44C1C();
      unint64_t v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  uint64_t v7 = 0;
  unint64_t v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    uint64_t v16 = v7;
    uint64_t v12 = 1;
    swift_beginAccess();
    uint64_t v13 = *(void *)(a1 + 80);
    if (v13) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 104);
    }
    uint64_t v14 = *(void *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = xmmword_183D5A630;
    *(_OWORD *)(a1 + 88) = xmmword_183D5A630;
    *(void *)(a1 + 104) = v12;
    *(void *)(a1 + 112) = v16;
    *(void *)(a1 + 120) = v9;
    swift_bridgeObjectRetain();
    sub_1834BFA48(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358F3FC(uint64_t a1, char *a2)
{
  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 128);
    uint64_t v11 = *(void *)(a1 + 136);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(void *)(a1 + 176) = 0;
    sub_1834BFA48(v10, v11);
    return swift_release();
  }
  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v7 = sub_183D44C1C();
      unint64_t v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  uint64_t v7 = 0;
  unint64_t v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    uint64_t v16 = v7;
    uint64_t v12 = 1;
    swift_beginAccess();
    uint64_t v13 = *(void *)(a1 + 136);
    if (v13) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 160);
    }
    uint64_t v14 = *(void *)(a1 + 128);
    *(_OWORD *)(a1 + 128) = xmmword_183D5A640;
    *(_OWORD *)(a1 + 144) = xmmword_183D5A640;
    *(void *)(a1 + 160) = v12;
    *(void *)(a1 + 168) = v16;
    *(void *)(a1 + 176) = v9;
    swift_bridgeObjectRetain();
    sub_1834BFA48(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358F640(uint64_t a1, char *a2)
{
  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 184);
    uint64_t v11 = *(void *)(a1 + 192);
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(void *)(a1 + 232) = 0;
    sub_1834BFA48(v10, v11);
    return swift_release();
  }
  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v7 = sub_183D44C1C();
      unint64_t v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  uint64_t v7 = 0;
  unint64_t v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(a1 + 136);
    if (v12) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 160);
    }
    uint64_t v13 = *(void *)(a1 + 184);
    uint64_t v14 = *(void *)(a1 + 192);
    *(_OWORD *)(a1 + 184) = xmmword_183D5A650;
    *(_OWORD *)(a1 + 200) = xmmword_183D5A650;
    *(void *)(a1 + 216) = v12;
    *(void *)(a1 + 224) = v7;
    *(void *)(a1 + 232) = v9;
    swift_bridgeObjectRetain();
    sub_1834BFA48(v13, v14);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_18358F884(uint64_t a1, char *a2)
{
  swift_retain();
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 240);
    uint64_t v11 = *(void *)(a1 + 248);
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(void *)(a1 + 288) = 0;
    sub_1834BFA48(v10, v11);
    return swift_release();
  }
  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v7 = sub_183D44C1C();
      unint64_t v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  uint64_t v7 = 0;
  unint64_t v9 = 0xE000000000000000;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    uint64_t v16 = v7;
    uint64_t v12 = 1;
    swift_beginAccess();
    uint64_t v13 = *(void *)(a1 + 248);
    if (v13) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 272);
    }
    uint64_t v14 = *(void *)(a1 + 240);
    *(_OWORD *)(a1 + 240) = xmmword_183D5A660;
    *(_OWORD *)(a1 + 256) = xmmword_183D5A660;
    *(void *)(a1 + 272) = v12;
    *(void *)(a1 + 280) = v16;
    *(void *)(a1 + 288) = v9;
    swift_bridgeObjectRetain();
    sub_1834BFA48(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

void _nw_http_request_access_method(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = _Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  _Block_copy(v4);
  swift_bridgeObjectRetain();
  sub_18358A2E4(v5, v6, (void (**)(void, void, void, void))v4);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_extended_connect_protocol(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 248))
  {
    uint64_t v5 = MEMORY[0x1F4188790](*(void *)(a1 + 280));
    unint64_t v6 = MEMORY[0x1F4188790](v5);
    sub_183589740(v6, v7, (uint64_t (*)(char *))sub_183594A78);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_scheme(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 80))
  {
    uint64_t v5 = MEMORY[0x1F4188790](*(void *)(a1 + 112));
    unint64_t v6 = MEMORY[0x1F4188790](v5);
    sub_183589740(v6, v7, (uint64_t (*)(char *))sub_183595640);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_authority(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 136))
  {
    uint64_t v5 = MEMORY[0x1F4188790](*(void *)(a1 + 168));
    unint64_t v6 = MEMORY[0x1F4188790](v5);
    sub_183589740(v6, v7, (uint64_t (*)(char *))sub_183595640);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_path(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 192))
  {
    uint64_t v5 = MEMORY[0x1F4188790](*(void *)(a1 + 224));
    unint64_t v6 = MEMORY[0x1F4188790](v5);
    sub_183589740(v6, v7, (uint64_t (*)(char *))sub_183595640);
  }
  else
  {
    v4[2](v4, 0);
  }
  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_method_field(uint64_t a1, void *a2)
{
}

void sub_183590048(uint64_t a1, void *aBlock)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = v4;
  *(void *)&long long v20 = v5;
  *((void *)&v20 + 1) = v6;
  char v21 = v7;
  unint64_t v22 = v8;
  unint64_t v23 = v9;
  uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v3, &v18);
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  long long v13 = v20;
  char v14 = v21;
  unint64_t v15 = v22;
  unint64_t v16 = v23;
  if (v20 != __PAIR128__(0xE700000000000000, 0x646F6874656D3ALL) && (sub_183D4592C() & 1) == 0) {
LABEL_10:
  }
    __break(1u);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((sub_183529FF8(v15, v16) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  swift_endAccess();
  swift_release();
  _Block_release(v3);
}

uint64_t _nw_http_request_access_scheme_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_18359022C);
}

BOOL sub_18359022C(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[10];
  if (v4)
  {
    uint64_t v5 = a1[14];
    uint64_t v6 = a1[15];
    uint64_t v8 = a1[12];
    uint64_t v7 = a1[13];
    uint64_t v9 = a1[11];
    uint64_t v19 = a1[9];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    if ((v21 != 0x656D656863733ALL || v22 != 0xE700000000000000) && (sub_183D4592C() & 1) == 0) {
      __break(1u);
    }
    sub_1834BFA48(a1[9], a1[10]);
    a1[9] = v11;
    a1[10] = v12;
    a1[11] = v13;
    a1[12] = v14;
    a1[13] = v15;
    a1[14] = v16;
    a1[15] = v17;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_authority_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_1835903E0);
}

BOOL sub_1835903E0(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[17];
  if (v4)
  {
    uint64_t v5 = a1[21];
    uint64_t v6 = a1[22];
    uint64_t v8 = a1[19];
    uint64_t v7 = a1[20];
    uint64_t v9 = a1[18];
    uint64_t v19 = a1[16];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v24;
    uint64_t v16 = v25;
    if ((v21 != 0x69726F687475613ALL || v22 != 0xEA00000000007974) && (sub_183D4592C() & 1) == 0) {
      __break(1u);
    }
    sub_1834BFA48(a1[16], a1[17]);
    a1[16] = v11;
    a1[17] = v12;
    a1[18] = v13;
    a1[19] = v14;
    a1[20] = v15;
    a1[21] = v17;
    a1[22] = v16;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_path_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_18359059C);
}

BOOL sub_18359059C(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[24];
  if (v4)
  {
    uint64_t v5 = a1[28];
    uint64_t v6 = a1[29];
    uint64_t v8 = a1[26];
    uint64_t v7 = a1[27];
    uint64_t v9 = a1[25];
    uint64_t v19 = a1[23];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    if ((v21 != 0x687461703ALL || v22 != 0xE500000000000000) && (sub_183D4592C() & 1) == 0) {
      __break(1u);
    }
    sub_1834BFA48(a1[23], a1[24]);
    a1[23] = v11;
    a1[24] = v12;
    a1[25] = v13;
    a1[26] = v14;
    a1[27] = v15;
    a1[28] = v16;
    a1[29] = v17;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_extended_connect_protocol_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_1835907A0);
}

uint64_t _nw_http_request_access_scheme_fieldTm(uint64_t a1, void *aBlock, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t v5 = _Block_copy(aBlock);
  LOBYTE(a3) = a3(a1, v5);
  _Block_release(v5);
  return a3 & 1;
}

BOOL sub_1835907A0(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[31];
  if (v4)
  {
    uint64_t v5 = a1[35];
    uint64_t v6 = a1[36];
    uint64_t v8 = a1[33];
    uint64_t v7 = a1[34];
    uint64_t v9 = a1[32];
    uint64_t v19 = a1[30];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v24;
    uint64_t v16 = v25;
    if ((v21 != 0x6F636F746F72703ALL || v22 != 0xE90000000000006CLL) && (sub_183D4592C() & 1) == 0) {
      __break(1u);
    }
    sub_1834BFA48(a1[30], a1[31]);
    a1[30] = v11;
    a1[31] = v12;
    a1[32] = v13;
    a1[33] = v14;
    a1[34] = v15;
    a1[35] = v17;
    a1[36] = v16;
  }
  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t sub_183590948(uint64_t a1, const char *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = sub_183D4447C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_18358ED14(a2, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_183138A24((uint64_t)v8, &qword_1E8F61F40);
    uint64_t result = sub_183D456CC();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v12, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    HTTPRequest.url.setter((uint64_t)v6);
    swift_endAccess();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

UInt8 *sub_183590BC4(uint64_t a1)
{
  uint64_t v2 = sub_183D4447C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_retain();
  swift_beginAccess();
  memcpy(v15, (const void *)(a1 + 16), sizeof(v15));
  HTTPRequest.url.getter((uint64_t)v8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_183138A24((uint64_t)v8, &qword_1E8F61F40);
    uint64_t v9 = 0;
LABEL_6:
    swift_endAccess();
    swift_release();
    return v9;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v5, v8, v2);
  sub_183138A24((uint64_t)v8, &qword_1E8F61F40);
  CFURLRef v10 = (const __CFURL *)sub_183D4441C();
  uint64_t result = (UInt8 *)CFURLGetBytes(v10, 0, 0);
  CFIndex v12 = (CFIndex)(result + 1);
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = result;
    uint64_t result = (UInt8 *)malloc((size_t)(result + 1));
    if (result)
    {
      uint64_t v9 = result;
      CFURLGetBytes(v10, result, v12);
      v13[(void)v9] = 0;

      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t _nw_http_request_set_header_fields(uint64_t a1, uint64_t a2)
{
  return _nw_http_request_set_header_fieldsTm(a1, a2, (uint64_t)sub_183594AA8);
}

uint64_t _nw_http_request_copy_header_fields(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  uint64_t v2 = *(void *)(a1 + 296);
  type metadata accessor for __NWHTTPFields();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  swift_release();
  return v3;
}

uint64_t sub_183590E90(void (*a1)(uint64_t))
{
  swift_beginAccess();
  a1(v1 + 88);
  return swift_endAccess();
}

uint64_t sub_183590EF8@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  char v7 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v14 = *(void *)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 88);
  a1[3] = (uint64_t)&type metadata for HTTPResponse;
  a1[4] = (uint64_t)&off_1ECF5D5E8;
  uint64_t v12 = swift_allocObject();
  *a1 = v12;
  *(void *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v3;
  *(void *)(v12 + 32) = v6;
  *(void *)(v12 + 40) = v5;
  *(unsigned char *)(v12 + 48) = v7;
  *(void *)(v12 + 56) = v9;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = v10;
  *(void *)(v12 + 88) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_183590FE0()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  char v5 = *(unsigned char *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  *(void *)(v10 + 24) = v1;
  *(void *)(v10 + 32) = v4;
  *(void *)(v10 + 40) = v3;
  *(unsigned char *)(v10 + 48) = v5;
  *(void *)(v10 + 56) = v7;
  *(void *)(v10 + 64) = v6;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = v8;
  *(void *)(v10 + 88) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return v10;
}

uint64_t sub_1835910D8(uint64_t a1)
{
  if (*(__objc2_class **)a1 == _TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8316__NWHTTPResponse)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = *(void *)(v1 + 40);
    char v6 = *(unsigned char *)(v1 + 48);
    long long v7 = *(_OWORD *)(v1 + 56);
    uint64_t v8 = *(void *)(v1 + 72);
    long long v22 = *(_OWORD *)(v1 + 16);
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    char v25 = v6;
    long long v26 = v7;
    uint64_t v27 = v8;
    long long v28 = *(_OWORD *)(v1 + 80);
    swift_beginAccess();
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    char v11 = *(unsigned char *)(a1 + 48);
    long long v12 = *(_OWORD *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 72);
    long long v15 = *(_OWORD *)(a1 + 16);
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    char v18 = v11;
    long long v19 = v12;
    uint64_t v20 = v13;
    long long v21 = *(_OWORD *)(a1 + 80);
    char v2 = _s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0((uint64_t)&v22, (uint64_t)&v15);
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t sub_1835911E0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18359124C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1835912C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = xmmword_183D599B0;
  unint64_t v3 = 0xE800000000000000;
  switch((int)result)
  {
    case 100:
      goto LABEL_51;
    case 101:
      long long v2 = xmmword_183D599C0;
      uint64_t v4 = "Switching Protocols";
      goto LABEL_50;
    case 103:
      long long v2 = xmmword_183D599D0;
      unint64_t v3 = 0xEB0000000073746ELL;
      goto LABEL_51;
    case 200:
      long long v2 = xmmword_183D599E0;
      unint64_t v3 = 0xE200000000000000;
      goto LABEL_51;
    case 201:
      long long v2 = xmmword_183D599F0;
      unint64_t v3 = 0xE700000000000000;
      goto LABEL_51;
    case 202:
      long long v2 = xmmword_183D59A00;
      unint64_t v3 = 0xE800000000000000;
      goto LABEL_51;
    case 203:
      long long v2 = xmmword_183D59A10;
      uint64_t v4 = "Non-Authoritative Information";
      goto LABEL_50;
    case 204:
      long long v2 = xmmword_183D59A20;
      unint64_t v3 = 0xEA0000000000746ELL;
      goto LABEL_51;
    case 205:
      long long v2 = xmmword_183D59A30;
      unint64_t v3 = 0xED0000746E65746ELL;
      goto LABEL_51;
    case 206:
      long long v2 = xmmword_183D59A40;
      unint64_t v3 = 0xEF746E65746E6F43;
      goto LABEL_51;
    case 300:
      long long v2 = xmmword_183D59A50;
      uint64_t v4 = "Multiple Choices";
      goto LABEL_50;
    case 301:
      long long v2 = xmmword_183D59A60;
      uint64_t v4 = "Moved Permanently";
      goto LABEL_50;
    case 302:
      long long v2 = xmmword_183D59A70;
      unint64_t v3 = 0xE500000000000000;
      goto LABEL_51;
    case 303:
      unint64_t v3 = 0xE900000000000072;
      long long v2 = xmmword_183D59A80;
      goto LABEL_51;
    case 304:
      long long v2 = xmmword_183D59A90;
      uint64_t v5 = 26982;
      goto LABEL_29;
    case 307:
      long long v2 = xmmword_183D59AA0;
      uint64_t v4 = "Temporary Redirect";
      goto LABEL_50;
    case 308:
      long long v2 = xmmword_183D59AB0;
      uint64_t v4 = "Permanent Redirect";
      goto LABEL_50;
    case 400:
      long long v2 = xmmword_183D59AC0;
      unint64_t v3 = 0xEB00000000747365;
      goto LABEL_51;
    case 401:
      long long v2 = xmmword_183D59AD0;
      uint64_t v5 = 31337;
LABEL_29:
      unint64_t v3 = v5 & 0xFFFF0000FFFFLL | 0xEC00000064650000;
      goto LABEL_51;
    case 403:
      unint64_t v3 = 0xE90000000000006ELL;
      long long v2 = xmmword_183D59AE0;
      goto LABEL_51;
    case 404:
      long long v2 = xmmword_183D59AF0;
      unint64_t v3 = 0xE900000000000064;
      goto LABEL_51;
    case 405:
      long long v2 = xmmword_183D59B00;
      uint64_t v4 = "Method Not Allowed";
      goto LABEL_50;
    case 406:
      long long v2 = xmmword_183D59B10;
      unint64_t v3 = 0xEE00656C62617470;
      goto LABEL_51;
    case 407:
      long long v2 = xmmword_183D59B20;
      uint64_t v4 = "Proxy Authentication Required";
      goto LABEL_50;
    case 408:
      long long v2 = xmmword_183D59B30;
      goto LABEL_53;
    case 409:
      long long v2 = xmmword_183D59B40;
      unint64_t v3 = 0xE800000000000000;
      goto LABEL_51;
    case 410:
      long long v2 = xmmword_183D59B50;
      unint64_t v3 = 0xE400000000000000;
      goto LABEL_51;
    case 411:
      long long v2 = xmmword_183D59B60;
      unint64_t v3 = 0xEF64657269757165;
      goto LABEL_51;
    case 412:
      long long v2 = xmmword_183D59B70;
      uint64_t v4 = "Precondition Failed";
      goto LABEL_50;
    case 413:
      long long v2 = xmmword_183D59B80;
      uint64_t v4 = "Content Too Large";
      goto LABEL_50;
    case 414:
      long long v2 = xmmword_183D59B90;
      unint64_t v3 = 0xEC000000676E6F4CLL;
      goto LABEL_51;
    case 415:
      long long v2 = xmmword_183D59BA0;
      uint64_t v4 = "Unsupported Media Type";
      goto LABEL_50;
    case 416:
      long long v2 = xmmword_183D59BB0;
      uint64_t v4 = "Range Not Satisfiable";
      goto LABEL_50;
    case 417:
      long long v2 = xmmword_183D59BC0;
      uint64_t v4 = "Expectation Failed";
      goto LABEL_50;
    case 421:
      long long v2 = xmmword_183D59BD0;
      uint64_t v4 = "Misdirected Request";
      goto LABEL_50;
    case 422:
      long long v2 = xmmword_183D59BE0;
      uint64_t v4 = "Unprocessable Content";
      goto LABEL_50;
    case 425:
      unint64_t v3 = 0xE900000000000079;
      long long v2 = xmmword_183D59BF0;
      goto LABEL_51;
    case 426:
      long long v2 = xmmword_183D59C00;
      uint64_t v4 = "Upgrade Required";
      goto LABEL_50;
    case 428:
      long long v2 = xmmword_183D59C10;
      uint64_t v4 = "Precondition Required";
      goto LABEL_50;
    case 429:
      long long v2 = xmmword_183D59C20;
      uint64_t v4 = "Too Many Requests";
      goto LABEL_50;
    case 431:
      long long v2 = xmmword_183D59C30;
      uint64_t v4 = "Request Header Fields Too Large";
      goto LABEL_50;
    case 451:
      long long v2 = xmmword_183D59C40;
      uint64_t v4 = "Unavailable For Legal Reasons";
      goto LABEL_50;
    case 500:
      long long v2 = xmmword_183D59C50;
      uint64_t v4 = "Internal Server Error";
      goto LABEL_50;
    case 501:
      long long v2 = xmmword_183D59C60;
      unint64_t v3 = 0xEF6465746E656D65;
      goto LABEL_51;
    case 502:
      long long v2 = xmmword_183D59C70;
      unint64_t v3 = 0xEB00000000796177;
      goto LABEL_51;
    case 503:
      long long v2 = xmmword_183D59C80;
      uint64_t v4 = "Service Unavailable";
      goto LABEL_50;
    case 504:
      long long v2 = xmmword_183D59C90;
LABEL_53:
      unint64_t v3 = 0xEF74756F656D6954;
      goto LABEL_51;
    case 505:
      long long v2 = xmmword_183D59CA0;
      uint64_t v4 = "HTTP Version Not Supported";
      goto LABEL_50;
    case 511:
      long long v2 = xmmword_183D59CB0;
      uint64_t v4 = "Network Authentication Required";
LABEL_50:
      unint64_t v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
LABEL_51:
      *(_OWORD *)a2 = v2;
      *(void *)(a2 + 16) = v3;
      return result;
    default:
      sub_183D456CC();
      __break(1u);
      JUMPOUT(0x183591754);
  }
}

uint64_t sub_183591DC8(uint64_t result, char *__s)
{
  long long v2 = __s;
  unsigned __int16 v3 = result;
  if (!__s)
  {
    unint64_t v8 = 0xE000000000000000;
    goto LABEL_13;
  }
  size_t v4 = strlen(__s);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*v2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((v2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        char v6 = v2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }
        goto LABEL_12;
      }
LABEL_10:
      uint64_t result = sub_183D44C1C();
      long long v2 = (char *)result;
      unint64_t v8 = v7;
      goto LABEL_13;
    }
  }
LABEL_12:
  uint64_t v14 = v2;
  size_t v15 = v4;
  uint64_t v16 = sub_1835A3780;
  uint64_t v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  uint64_t result = sub_183D44C0C();
  long long v2 = 0;
  unint64_t v8 = 0xE000000000000000;
LABEL_13:
  if (v3 > 0x3E7u)
  {
    __break(1u);
  }
  else
  {
    if ((sub_18357AEC4((unint64_t)v2, v8) & 1) == 0)
    {
      uint64_t v14 = v2;
      size_t v15 = v8;
      uint64_t v16 = sub_18357B538;
      uint64_t v17 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F639B8);
      sub_1834FBEF8((unint64_t *)&qword_1E8F639C0, &qword_1E8F639B8);
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      long long v2 = 0;
      unint64_t v8 = 0xE000000000000000;
    }
    unint64_t v9 = HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], &v14);
    uint64_t v10 = v14;
    MEMORY[0x1F4188790](v9);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_183D44C3C();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    type metadata accessor for __NWHTTPResponse();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0x7375746174733ALL;
    *(void *)(result + 24) = 0xE700000000000000;
    *(void *)(result + 32) = 0x7375746174733ALL;
    *(void *)(result + 40) = 0xE700000000000000;
    *(unsigned char *)(result + 48) = 0;
    *(void *)(result + 56) = v11;
    *(void *)(result + 64) = v13;
    *(void *)(result + 72) = v2;
    *(void *)(result + 80) = v8;
    *(void *)(result + 88) = v10;
  }
  return result;
}

uint64_t _nw_http_response_create_well_known(uint64_t a1)
{
  sub_1835912C8(a1, (uint64_t)v9);
  uint64_t v1 = v9[1];
  uint64_t v2 = v9[2];
  HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], &v8);
  uint64_t v3 = v8;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_183D44C3C();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPResponse();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x7375746174733ALL;
  *(void *)(result + 24) = 0xE700000000000000;
  *(void *)(result + 32) = 0x7375746174733ALL;
  *(void *)(result + 40) = 0xE700000000000000;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = v6;
  *(void *)(result + 72) = v1;
  *(void *)(result + 80) = v2;
  *(void *)(result + 88) = v3;
  return result;
}

uint64_t sub_183592120(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v3 = a2;
  swift_retain();
  uint64_t result = swift_beginAccess();
  if (v3 > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    if ((sub_18357AEC4(0, 0xE000000000000000) & 1) == 0)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0xE000000000000000;
      unint64_t v7 = sub_18357B538;
      uint64_t v8 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F639B8);
      sub_1834FBEF8((unint64_t *)&qword_1E8F639C0, &qword_1E8F639B8);
      sub_183D44C0C();
    }
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    unint64_t v7 = (int *(*)@<X0>(int *@<X0>, int *@<X8>))0xE000000000000000;
    HTTPResponse.status.setter((uint64_t)&v5);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t _nw_http_response_get_status_code()
{
  return (unsigned __int16)sub_183592258();
}

uint64_t sub_183592258()
{
  swift_retain();
  swift_beginAccess();
  HTTPResponse.status.getter(&v2);
  unint64_t v0 = v2;
  swift_bridgeObjectRelease();
  if ((v0 & 0x8000000000000000) != 0 || v0 >= 0x10000)
  {
    uint64_t result = sub_183D456BC();
    __break(1u);
  }
  else
  {
    swift_endAccess();
    swift_release();
    return v0;
  }
  return result;
}

uint64_t sub_18359238C(uint64_t a1, char *a2)
{
  swift_retain();
  if (!a2)
  {
    unint64_t v7 = 0;
    unint64_t v9 = 0xE000000000000000;
    goto LABEL_13;
  }
  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }
        goto LABEL_12;
      }
LABEL_10:
      unint64_t v7 = sub_183D44C1C();
      unint64_t v9 = v8;
      goto LABEL_13;
    }
  }
LABEL_12:
  *(void *)&long long v18 = a2;
  *((void *)&v18 + 1) = v4;
  unint64_t v19 = sub_1835A3780;
  uint64_t v20 = 0;
  v25[3] = 0;
  v25[4] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  unint64_t v7 = 0;
  unint64_t v9 = 0xE000000000000000;
LABEL_13:
  swift_beginAccess();
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  char v12 = *(unsigned char *)(a1 + 48);
  long long v13 = *(_OWORD *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 72);
  long long v18 = *(_OWORD *)(a1 + 16);
  unint64_t v19 = v10;
  uint64_t v20 = v11;
  char v21 = v12;
  long long v22 = v13;
  uint64_t v23 = v14;
  long long v24 = *(_OWORD *)(a1 + 80);
  HTTPResponse.status.getter(v25);
  unint64_t v15 = v25[0];
  uint64_t result = swift_bridgeObjectRelease();
  if (v15 > 0x3E7)
  {
    __break(1u);
  }
  else
  {
    if (sub_18357AEC4(v7, v9))
    {
      swift_bridgeObjectRetain();
      unint64_t v17 = v9;
    }
    else
    {
      *(void *)&long long v18 = v7;
      *((void *)&v18 + 1) = v9;
      unint64_t v19 = sub_18357B538;
      uint64_t v20 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F639B8);
      sub_1834FBEF8((unint64_t *)&qword_1E8F639C0, &qword_1E8F639B8);
      sub_183D44C0C();
      unint64_t v7 = 0;
      unint64_t v17 = 0xE000000000000000;
    }
    *(void *)&long long v18 = v15;
    *((void *)&v18 + 1) = v7;
    unint64_t v19 = (void *)v17;
    HTTPResponse.status.setter((uint64_t)&v18);
    swift_endAccess();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void _nw_http_response_access_reason_phrase(uint64_t a1, void *a2)
{
}

void sub_1835925F4(uint64_t a1, void *aBlock)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 72);
  long long v23 = *(_OWORD *)(a1 + 16);
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  char v26 = v6;
  long long v27 = v7;
  uint64_t v28 = v8;
  long long v29 = *(_OWORD *)(a1 + 80);
  HTTPResponse.status.getter(&v20);
  unint64_t v10 = v21;
  unint64_t v9 = v22;
  if (sub_1834BF534(v21, v22))
  {
    _Block_copy(v3);
    _Block_copy(v3);
    sub_18358A3E0(v10, v9, (void (**)(void, void, void, void))v3);
    goto LABEL_13;
  }
  uint64_t v11 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v11 = v10;
  }
  uint64_t v12 = 7;
  if (((v9 >> 60) & ((v10 & 0x800000000000000) == 0)) != 0) {
    uint64_t v12 = 11;
  }
  unint64_t v13 = sub_1835945A4(0xFuLL, v12 | (v11 << 16), v10, v9);
  uint64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v14 < 0) {
    goto LABEL_15;
  }
  uint64_t isStackAllocationSafe = (uint64_t)_Block_copy(v3);
  if (v14 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v17 = (char *)&v19 - v16;
    sub_18358AE00((uint64_t)&v19 - v16, v14, v10, v9);
    (*((void (**)(void *, char *))v3 + 2))(v3, v17);
  }
  else
  {
    uint64_t v18 = swift_slowAlloc();
    sub_18358AE00(v18, v14, v10, v9);
    (*((void (**)(void *, uint64_t))v3 + 2))(v3, v18);
    MEMORY[0x185318E50](v18, -1, -1);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_endAccess();
  _Block_release(v3);
  swift_release();
  _Block_release(v3);
}

void _nw_http_response_access_status_field(uint64_t a1, void *a2)
{
}

void _nw_http_request_access_method_fieldTm(uint64_t a1, void *aBlock, void (*a3)(uint64_t, void *))
{
  uint64_t v5 = _Block_copy(aBlock);
  a3(a1, v5);

  _Block_release(v5);
}

void sub_1835928B4(uint64_t a1, void *aBlock)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = v4;
  *(void *)&long long v19 = v5;
  *((void *)&v19 + 1) = v6;
  char v20 = v7;
  unint64_t v21 = v8;
  unint64_t v22 = v9;
  unint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v3, &v17);
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  long long v13 = v19;
  char v14 = v20;
  unint64_t v15 = v21;
  unint64_t v16 = v22;
  if (v19 != __PAIR128__(0xE700000000000000, 0x7375746174733ALL) && (sub_183D4592C() & 1) == 0) {
LABEL_8:
  }
    __break(1u);
  if (sub_183D44C5C() != 3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((sub_18357AD24(v15, v16) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  swift_endAccess();
  swift_release();
  _Block_release(v3);
}

uint64_t _nw_http_response_set_header_fields(uint64_t a1, uint64_t a2)
{
  return _nw_http_request_set_header_fieldsTm(a1, a2, (uint64_t)sub_183594B14);
}

uint64_t _nw_http_request_set_header_fieldsTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_retain();
  swift_retain();
  swift_beginAccess();
  void v7[2] = v5;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 80))(a3, v7, MEMORY[0x1E4FBC848] + 8);
  swift_endAccess();
  swift_release();
  return swift_release();
}

uint64_t _nw_http_response_copy_header_fields(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  uint64_t v2 = *(void *)(a1 + 88);
  type metadata accessor for __NWHTTPFields();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  swift_release();
  return v3;
}

uint64_t sub_183592BCC()
{
  return sub_183592BE4(MEMORY[0x1E4FBC898]);
}

uint64_t sub_183592BE4(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return swift_deallocClassInstance();
}

uint64_t _nw_http_parsed_fields_add(uint64_t a1, unint64_t a2, uint64_t a3, const char *a4, int64_t a5, char a6)
{
  return sub_183592C40(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t sub_183592C40(uint64_t a1, unint64_t a2, uint64_t a3, const char *a4, int64_t a5, char a6)
{
  if (a3 == -1)
  {
    sub_183588434(a2, -1, (uint64_t)&v47);
LABEL_5:
    uint64_t v12 = (uint64_t)v47;
    uint64_t v13 = v48;
    uint64_t v14 = (uint64_t)v49;
    uint64_t v15 = v50;
    swift_retain();
    if (v13)
    {
      if (a5 >= 1) {
        goto LABEL_14;
      }
LABEL_7:
      a5 = strlen(a4);
      if (!a5) {
        goto LABEL_21;
      }
LABEL_14:
      if ((*a4 & 0x80000000) == 0)
      {
        if (a5 == 1) {
          goto LABEL_21;
        }
        if ((a4[1] & 0x80000000) == 0)
        {
          if (a5 != 2)
          {
            uint64_t v18 = 2;
            while ((a4[v18] & 0x80000000) == 0)
            {
              if (a5 == ++v18) {
                goto LABEL_21;
              }
            }
            goto LABEL_22;
          }
LABEL_21:
          sub_18359492C(v12, v13);
          unint64_t v19 = sub_183D44C1C();
          unint64_t v21 = v20;
          goto LABEL_23;
        }
      }
LABEL_22:
      uint64_t v47 = (char *)a4;
      int64_t v48 = a5;
      char v49 = sub_1835A3780;
      uint64_t v50 = 0;
      sub_18359492C(v12, v13);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
      sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
      sub_183D44C0C();
      unint64_t v19 = 0;
      unint64_t v21 = 0xE000000000000000;
LABEL_23:
      uint64_t v22 = sub_1834FBC78(v19, v21);
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      if (a6)
      {
        sub_18358B160(v12, v13);
LABEL_25:
        uint64_t v46 = v22;
        uint64_t v25 = (void *)(a1 + 16);
        swift_beginAccess();
        char v26 = *(void **)(a1 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a1 + 16) = v26;
        uint64_t v28 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          char v26 = sub_1834B5168(0, v26[2] + 1, 1, v26);
          *uint64_t v25 = v26;
        }
        unint64_t v30 = v26[2];
        unint64_t v29 = v26[3];
        if (v30 >= v29 >> 1)
        {
          char v26 = sub_1834B5168((void *)(v29 > 1), v30 + 1, 1, v26);
          *uint64_t v25 = v26;
        }
        v26[2] = v30 + 1;
        uint64_t v31 = &v26[7 * v30];
        v31[4] = v12;
        v31[5] = v13;
        v31[6] = v14;
        v31[7] = v15;
        *((unsigned char *)v31 + 64) = 0;
        v31[9] = v46;
        v31[10] = v28;
        goto LABEL_42;
      }
      if (v14 == 0x69726F687475613ALL && v15 == 0xEA00000000007974)
      {
        sub_18358B160(v12, v13);
      }
      else
      {
        char v45 = sub_183D4592C();
        sub_18358B160(v12, v13);
        if ((v45 & 1) == 0) {
          goto LABEL_25;
        }
      }
      swift_beginAccess();
      uint64_t v47 = (char *)v12;
      int64_t v48 = v13;
      char v49 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>))v14;
      uint64_t v50 = v15;
      char v51 = 0;
      uint64_t v52 = v22;
      uint64_t v53 = v24;
      sub_1834EFA4C(0, 0, (uint64_t)&v47);
LABEL_42:
      swift_endAccess();
      swift_release();
      return 1;
    }
    goto LABEL_34;
  }
  uint64_t v10 = sub_183D44C1C();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (a6)
  {
    HTTPField.Name.init(parsed:)(v10, v11, (uint64_t)&v47);
    goto LABEL_5;
  }
  uint64_t v16 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v16 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 && (sub_183529FF8(v10, v11) & 1) != 0)
  {
    uint64_t v14 = sub_183D44B8C();
    uint64_t v15 = v17;
    swift_retain();
    if (a5 >= 1) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  swift_retain();
LABEL_34:
  sub_18352D678();
  uint64_t v32 = (void *)swift_allocError();
  *uint64_t v33 = 0;
  swift_willThrow();
  id v34 = v32;
  if (qword_1E8F619C8 != -1) {
    swift_once();
  }
  uint64_t v35 = sub_183D4498C();
  __swift_project_value_buffer(v35, (uint64_t)qword_1E8F7A7E8);
  id v36 = v32;
  id v37 = v32;
  unint64_t v38 = sub_183D4496C();
  os_log_type_t v39 = sub_183D4529C();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    char v41 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 138543362;
    id v42 = v32;
    uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v47 = (char *)v43;
    sub_183D453AC();
    *char v41 = v43;

    _os_log_impl(&dword_1830D4000, v38, v39, "Failed to parse HTTP field: %{public}@", v40, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61A60);
    swift_arrayDestroy();
    MEMORY[0x185318E50](v41, -1, -1);
    MEMORY[0x185318E50](v40, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();
  }
  return 0;
}

uint64_t sub_1835931E4(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  HTTPRequest.init(parsed:)(v2, __src);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPRequest();
  uint64_t v3 = swift_allocObject();
  memcpy((void *)(v3 + 16), __src, 0x120uLL);
  return v3;
}

__n128 sub_183593444(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  HTTPResponse.init(parsed:)(v2, (uint64_t)&v12);
  uint64_t v3 = v13;
  uint64_t v4 = v14;
  char v5 = v15;
  long long v10 = v16;
  long long v11 = v12;
  uint64_t v6 = v17;
  __n128 v9 = v18;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPResponse();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = v11;
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v4;
  *(unsigned char *)(v7 + 48) = v5;
  *(_OWORD *)(v7 + 56) = v10;
  *(void *)(v7 + 72) = v6;
  __n128 result = v9;
  *(__n128 *)(v7 + 80) = v9;
  return result;
}

uint64_t sub_1835936D0(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  HTTPFields.init(parsedTrailerFields:)(v2, &v5);
  uint64_t v3 = v5;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPFields();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  return result;
}

void _nw_http_fields_enumerate_modern_header_fields(uint64_t a1, void *a2)
{
}

uint64_t sub_183593948(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5, void *a6)
{
  unsigned __int8 v11 = *a5;
  swift_bridgeObjectRetain();
  _Block_copy(a6);
  swift_bridgeObjectRetain();
  return sub_18358A4F4(a1, a2, a3, a4, a6, a1, a2, v11);
}

uint64_t sub_1835939D4(uint64_t a1, unint64_t a2, unint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  return sub_183589908(a2, a3, (void (**)(void, void, void, void, void, void))aBlock, a1, a5, a6, a2, a3, a7);
}

uint64_t sub_183593A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v12 = sub_183D44C5C();
  uint64_t v13 = sub_183D44C5C();
  unsigned int v14 = (a8 - 1);
  if (v14 < 3) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, a3, v12, a1, v13, v15);
}

void _nw_http_fields_enumerate_modern_header_fields_combined(uint64_t a1, void *a2)
{
}

void _nw_http_fields_enumerate_modern_header_fieldsTm(uint64_t a1, void *aBlock, uint64_t a3, void (*a4)(uint64_t, void *, uint64_t, uint64_t))
{
  uint64_t v7 = _Block_copy(aBlock);
  unint64_t v8 = _Block_copy(v7);
  uint64_t v9 = swift_retain();
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 88))(v13, v9);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  __swift_project_boxed_opaque_existential_2(v13, v14);
  v12[2] = v8;
  a4(a3, v12, v10, v11);
  swift_release();
  _Block_release(v8);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v13);
  _Block_release(v7);
}

uint64_t sub_183593C34(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, void *aBlock)
{
  int v9 = *a4;
  _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  return sub_183589BA0(a1, a2, (void (**)(void, void, void, void, void))aBlock, a3, a1, a2, v9);
}

uint64_t sub_183593CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result = sub_183D44C5C();
  if (__OFSUB__(result, a3))
  {
    __break(1u);
  }
  else
  {
    unsigned int v11 = (a6 - 1);
    if (v11 < 3) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, a1, a3, result - a3, v12);
  }
  return result;
}

uint64_t sub_183593D38(uint64_t a1, size_t *a2)
{
  uint64_t v3 = swift_retain();
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 88))(v12);
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  __swift_project_boxed_opaque_existential_2(v12, v13);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v12);
  size_t v7 = *(void *)(v6 + 16);
  unint64_t v8 = malloc(v7);
  if (v8)
  {
    int v9 = v8;
    if (v7)
    {
      if (v6 + 32 < (unint64_t)v8 + v7 && (unint64_t)v8 < v6 + 32 + v7) {
        goto LABEL_11;
      }
      memcpy(v8, (const void *)(v6 + 32), v7);
    }
    swift_bridgeObjectRelease();
    *a2 = v7;
    swift_release();
    return (uint64_t)v9;
  }
  __break(1u);
LABEL_11:
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t _nw_http_request_create_from_url_request(void *a1)
{
  id v1 = a1;
  sub_183538890(v1, v4);
  type metadata accessor for __NWHTTPRequest();
  uint64_t v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), v4, 0x120uLL);

  return v2;
}

uint64_t _nw_http_request_copy_url_request(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_183593F4C(a1, (uint64_t)v5, (const __CFURL *)a3);

  return v7;
}

uint64_t sub_183593F4C(uint64_t a1, uint64_t a2, const __CFURL *a3)
{
  uint64_t v4 = (const void *)(a1 + 16);
  swift_retain();
  swift_beginAccess();
  memcpy(__dst, v4, sizeof(__dst));
  memcpy(v11, v4, sizeof(v11));
  uint64_t v5 = sub_183D44AFC();
  uint64_t v7 = v6;
  sub_18350BA8C(__dst);
  sub_183539628(v5, v7, a3);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  sub_18356D810(__dst);
  swift_endAccess();
  swift_release();
  return v9;
}

uint64_t _nw_http_response_copy_url_response(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = sub_18359408C(a1, a2, a3);

  return v10;
}

uint64_t sub_18359408C(uint64_t a1, uint64_t a2, void *a3)
{
  swift_retain();
  if (a2)
  {
    swift_retain();
    swift_beginAccess();
    memcpy(__dst, (const void *)(a2 + 16), sizeof(__dst));
    memmove(__src, (const void *)(a2 + 16), 0x120uLL);
    sub_183594C30((uint64_t)__src);
    sub_18350BA8C(__dst);
    swift_release();
LABEL_5:
    sub_18353A700(__src, v20);
    swift_beginAccess();
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    char v10 = *(unsigned char *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = *(void *)(a1 + 88);
    __dst[0] = *(void *)(a1 + 16);
    __dst[1] = v7;
    __dst[2] = v8;
    __dst[3] = v9;
    LOBYTE(__dst[4]) = v10;
    __dst[5] = v11;
    __dst[6] = v12;
    __dst[7] = v13;
    __dst[8] = v14;
    __dst[9] = v15;
    sub_18353A700(v20, __src);
    sub_183D44AFC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_183539DA0(__src);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CFURLResponse(0);
    uint64_t v16 = swift_dynamicCastUnknownClassUnconditional();
    swift_endAccess();
    swift_release();
    sub_183594BAC((uint64_t)v20);
    return v16;
  }
  if (a3)
  {
    __src[0] = a3;
    sub_183594B90((uint64_t)__src);
    id v6 = a3;
    goto LABEL_5;
  }
  uint64_t result = sub_183D456CC();
  __break(1u);
  return result;
}

uint64_t sub_1835942B0()
{
  uint64_t v0 = sub_183D4498C();
  __swift_allocate_value_buffer(v0, qword_1E8F7A7E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E8F7A7E8);
  return sub_183D4497C();
}

uint64_t sub_183594320(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unint64_t sub_183594380(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_183594420(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_183594490(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_183594420(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = sub_183520284(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_183594490(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      void v13[2] = v3;
      void v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_183D4557C();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return MEMORY[0x1F4184CD0]();
    }
  }
  return result;
}

unint64_t sub_1835945A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_183594380(a1, a3, a4);
  unint64_t result = sub_183594380(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_183D44BEC();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_183D4557C();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_183D44BFC();
        unint64_t v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_183D4557C();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

void *sub_1835947B8@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  unint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1835947FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unsigned char *__return_ptr, uint64_t, uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  unint64_t v14 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_1834BFB88(a2);
  char v15 = sub_183595208(v14, v13, a3, a4, a1, a5, a6, a2);
  sub_18312A0D8(a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a7 = v15 & 1;
  return result;
}

uint64_t sub_1835948BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + 16))(*(void *)(v4 + 16), a1, a2, a3, a4);
}

uint64_t sub_1835948E0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t type metadata accessor for __NWHTTPFields()
{
  return self;
}

uint64_t sub_18359492C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_183594970(uint64_t *a1)
{
  return sub_18358BC24(a1, *(void *)(v1 + 16));
}

uint64_t sub_183594978(uint64_t a1)
{
  return sub_18358BEF4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_183594988(uint64_t a1)
{
  return sub_18358C0A4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_183594994(uint64_t *a1)
{
  return sub_18358C1B0(a1, *(void *)(v1 + 16));
}

uint64_t sub_18359499C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = *(_OWORD *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v12 = *a1;
  long long v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  uint64_t result = sub_18358AA24((uint64_t *)&v9);
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t sub_1835949EC@<X0>(unsigned char *a1@<X8>)
{
  return sub_18358C588(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1835949F8(uint64_t *a1)
{
  return sub_18358C9A4(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_183594A00(uint64_t *a1)
{
  return sub_18358CC20(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_183594A10(uint64_t *a1)
{
  return sub_18358CDE4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_183594A18@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_18358D0C8(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

uint64_t sub_183594A28@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_18358D974(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_183594A30@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_18358E2D8(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_183594A38@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_18358E510(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for __NWHTTPRequest()
{
  return self;
}

uint64_t sub_183594A64()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_183594A78()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_183594AAC(void *a1)
{
  *(void *)(*(void *)(v1 + 16) + 280) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t type metadata accessor for __NWHTTPResponse()
{
  return self;
}

uint64_t sub_183594B18(void *a1)
{
  *(void *)(*(void *)(v1 + 16) + 72) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t type metadata accessor for __NWHTTPParsedFields()
{
  return self;
}

uint64_t sub_183594B80(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5)
{
  return sub_183593948(a1, a2, a3, a4, a5, *(void **)(v5 + 16));
}

uint64_t sub_183594B88(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  return sub_183593C34(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_183594B90(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 280) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  *(void *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(void *)(result + 280) = v1;
  return result;
}

uint64_t sub_183594BAC(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v3 = *(_OWORD *)(a1 + 208);
  sub_183537FEC(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280));
  return a1;
}

uint64_t sub_183594C30(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 280) & 0xFFFFFFFFFFFFFF8;
  *(void *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(void *)(result + 280) = v1;
  return result;
}

uint64_t type metadata accessor for __NWHTTPFieldsProvider()
{
  return self;
}

uint64_t sub_183594C6C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_183594CC4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[10])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[17])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[24])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_183594D84(uint64_t a1)
{
  return sub_183593CB0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t sub_183594DA8(uint64_t a1)
{
  return sub_1835939D4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56));
}

uint64_t sub_183594DD0(uint64_t a1)
{
  return sub_183593A84(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned char *)(v1 + 64));
}

uint64_t sub_183594DF8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_183594E20()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_183594E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_183594EC0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_183594EF4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_183594F28@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1835954A0(a1, a2);
}

void *sub_183594F40@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1835954C4(a1, a2);
}

uint64_t sub_183594F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v42 = MEMORY[0x1E4FBC860];
    sub_1835AF424(0, v5, 0);
    uint64_t v6 = v42;
    for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      uint64_t v11 = *(i - 3);
      uint64_t v10 = *(i - 2);
      uint64_t v13 = *(i - 1);
      uint64_t v12 = *i;
      swift_bridgeObjectRetain();
      uint64_t v14 = MEMORY[0x185313F90](v11, v10, v13, v12);
      unint64_t v16 = v15;
      if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v14, v15)) {
        break;
      }
LABEL_11:
      swift_bridgeObjectRetain();
      uint64_t v19 = a5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v42 = v6;
      unint64_t v21 = *(void *)(v6 + 16);
      unint64_t v20 = *(void *)(v6 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1835AF424(v20 > 1, v21 + 1, 1);
        uint64_t v19 = a5;
        uint64_t v6 = v42;
      }
      *(void *)(v6 + 16) = v21 + 1;
      uint64_t v22 = v6 + 56 * v21;
      *(void *)(v22 + 32) = a2;
      *(void *)(v22 + 40) = a3;
      *(void *)(v22 + 48) = a4;
      *(void *)(v22 + 56) = v19;
      *(unsigned char *)(v22 + 64) = 0;
      *(void *)(v22 + 72) = v14;
      *(void *)(v22 + 80) = v16;
      if (!--v5) {
        return v6;
      }
    }
    *(void *)&long long v35 = v14;
    *((void *)&v35 + 1) = v16;
    id v36 = sub_1834FA7A8;
    uint64_t v37 = 0;
    unint64_t v38 = sub_1834FA7E4;
    uint64_t v39 = 0;
    uint64_t v40 = sub_1834FC554;
    uint64_t v41 = 0;
    long long v29 = v35;
    long long v30 = (unint64_t)sub_1834FA7A8;
    long long v31 = (unint64_t)sub_1834FA7E4;
    long long v32 = (unint64_t)sub_1834FC554;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63158);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F644A0);
    if (swift_dynamicCast())
    {
      sub_1834D9964(v27, (uint64_t)v33);
      __swift_project_boxed_opaque_existential_2(v33, v34);
      if (sub_183D4573C())
      {
        __swift_project_boxed_opaque_existential_2(v33, v34);
        sub_183D4572C();
        unint64_t v17 = *((void *)&v29 + 1);
        uint64_t v14 = v29;
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
LABEL_10:
        swift_bridgeObjectRelease();
        unint64_t v16 = v17;
        goto LABEL_11;
      }
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
    }
    else
    {
      uint64_t v28 = 0;
      memset(v27, 0, sizeof(v27));
      sub_183138A24((uint64_t)v27, &qword_1E8F63150);
    }
    uint64_t v14 = sub_18353A7A0(&v35);
    unint64_t v17 = v18;
    goto LABEL_10;
  }
  return v6;
}

uint64_t sub_183595208(unint64_t a1, unint64_t a2, void (*a3)(unsigned char *__return_ptr, uint64_t, uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v29)(unsigned char *__return_ptr, uint64_t, uint64_t, char *, uint64_t);
  uint64_t v30;
  unsigned char v31[81];

  *(void *)&v31[73] = *MEMORY[0x1E4F143B8];
  *(void *)&v31[17] = a3;
  *(void *)&v31[25] = a4;
  *(void *)&v31[33] = a5;
  *(void *)&v31[41] = a6;
  *(void *)&v31[49] = a7;
  *(void *)&v31[57] = a8;
  if (sub_1834BF534(a1, a2))
  {
    char v13 = sub_183589E08((uint64_t)sub_183594F40, (uint64_t)&v31[1], a1, a2);
    return v13 & 1;
  }
  long long v30 = a4;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1;
  }
  uint64_t v15 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v15 = 11;
  }
  unint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v15 | (v14 << 16), a1, a2);
  uint64_t v17 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v17 < 0) {
    goto LABEL_15;
  }
  long long v29 = a3;
  if (v17 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v28 = (uint64_t)&v28;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v19 = (char *)&v28 - v18;
    sub_18358AE00((uint64_t)&v28 - v18, v17, a1, a2);
    uint64_t v20 = sub_183D44C5C();
    uint64_t v21 = sub_183D44C5C();
    v29(v31, a5, v20, v19, v21);
    char v13 = v31[0];
  }
  else
  {
    uint64_t v22 = swift_slowAlloc();
    sub_18358AE00(v22, v17, a1, a2);
    uint64_t v23 = sub_183D44C5C();
    uint64_t v24 = sub_183D44C5C();
    uint64_t v25 = v23;
    uint64_t v26 = v22;
    v29(v31, a5, v25, (char *)v22, v24);
    char v13 = v31[0];
    MEMORY[0x185318E50](v26, -1, -1);
  }
  return v13 & 1;
}

void *sub_18359545C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_1835954A0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1835947FC(a1, *(void *)(v2 + 16), *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, char *, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a2);
}

void *sub_1835954C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  void *(*v5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;

  uint64_t v5 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 32);
  unint64_t v7 = sub_183D44C5C();
  uint64_t v8 = sub_183D44C5C();
  uint64_t result = v5(&v10, v6, v7, a1, v8);
  *a2 = v10;
  return result;
}

uint64_t sub_183595554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_183595598(a1, (void (*)(void, void, void, void, void, void, void, void))sub_183589F20, a2);
}

uint64_t sub_183595580(uint64_t a1)
{
  return sub_1835955C0(a1);
}

uint64_t sub_183595598@<X0>(uint64_t a1@<X0>, void (*a2)(void, void, void, void, void, void, void, void)@<X1>, uint64_t a3@<X8>)
{
  return sub_18358A97C(a1, *(void *)(v3 + 16), *(void (**)(uint64_t, uint64_t, char *, uint64_t))(v3 + 24), *(void (**)(void, void, void, void, void, void, void, void))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), a2, a3);
}

uint64_t sub_1835955C0(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = sub_183D44C5C();
  uint64_t v6 = sub_183D44C5C();
  return v3(v4, v5, a1, v6);
}

uint64_t sub_183595640()
{
  return sub_183594A78();
}

uint64_t sub_183595660()
{
  return sub_183594DF8();
}

uint64_t sub_183595684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_18359891C(a2);
  if (v10) {
    goto LABEL_17;
  }
  uint64_t v11 = v9;
  uint64_t v12 = *(unsigned int *)(a2 + 36);
  if (v12 != v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v13 = result;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  if (v14 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v22 = *(_OWORD *)a1;
  char v23 = *(unsigned char *)(a1 + 16);
  long long v24 = v22;
  char v25 = v23;
  sub_1835A27C0((uint64_t)&v24, (uint64_t)v26);
  uint64_t result = sub_1835A27C0((uint64_t)v26, (uint64_t)&v27);
  if (v29)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v28 != v12) {
    goto LABEL_13;
  }
  if (v27 < v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  long long v17 = *(_OWORD *)(a1 + 24);
  char v18 = *(unsigned char *)(a1 + 40);
  long long v19 = v17;
  char v20 = v18;
  sub_1835A27C0((uint64_t)&v19, (uint64_t)v21);
  uint64_t result = sub_1835A27C0((uint64_t)v21, (uint64_t)&v30);
  if ((v32 & 1) == 0)
  {
    uint64_t v15 = v30;
    int v16 = v31;
    sub_1835A25C4(v13, v11, 0);
    uint64_t result = sub_1835A25C4(v14, v12, 0);
    if (v12 == v16)
    {
      if (v14 >= v15)
      {
        *(void *)(a4 + 48) = a2;
        *(void *)(a4 + 56) = a3;
        *(_OWORD *)a4 = v22;
        *(unsigned char *)(a4 + 16) = v23;
        *(_OWORD *)(a4 + 24) = v17;
        *(unsigned char *)(a4 + 40) = v18;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        return sub_1835A2828(a1);
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t NWTXTRecord.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v72 = sub_183596318(MEMORY[0x1E4FBC860]);
  nw_txt_record_t dictionary = nw_txt_record_create_dictionary();
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v76 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v74 = a1 + 64;
  uint64_t v75 = a1;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_20:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    char v18 = (uint64_t *)(*(void *)(a1 + 56) + v14);
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    uint64_t v21 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v21 = v20 & 0xFFFFFFFFFFFFLL;
    }
    int64_t v77 = v4;
    if (v21)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == 0xE000000000000000;
      }
      if (v22 || (sub_183D4592C() & 1) != 0)
      {
        char v23 = (const char *)(sub_183D44BAC() + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        long long v24 = swift_unknownObjectRetain();
        LOBYTE(v23) = nw_txt_record_set_key(v24, v23, (const uint8_t *)"", 0);
        swift_unknownObjectRelease();
        swift_release();
        if ((v23 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_51;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v27 = v19;
      uint64_t v28 = v20;
      if ((v19 & 0x1000000000000000) != 0)
      {
        uint64_t v28 = sub_18359979C();
        unint64_t v27 = v49;
        swift_bridgeObjectRelease();
        if ((v27 & 0x2000000000000000) != 0)
        {
LABEL_50:
          *(void *)uint64_t v78 = v28;
          uint64_t v79 = v27 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v50 = (const char *)(sub_183D44BAC() + 32);
          char v51 = swift_unknownObjectRetain();
          BOOL v52 = nw_txt_record_set_key(v51, v50, v78, HIBYTE(v27) & 0xF);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          uint64_t v5 = v74;
          a1 = v75;
          if (!v52) {
            goto LABEL_29;
          }
          goto LABEL_51;
        }
      }
      else if ((v19 & 0x2000000000000000) != 0)
      {
        goto LABEL_50;
      }
      if ((v28 & 0x1000000000000000) != 0)
      {
        value = (uint8_t *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
        size_t v29 = v28 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        value = (uint8_t *)sub_183D4557C();
        size_t v29 = v68;
      }
      uint64_t v30 = (const char *)(sub_183D44BAC() + 32);
      int v31 = swift_unknownObjectRetain();
      BOOL v32 = nw_txt_record_set_key(v31, v30, value, v29);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      uint64_t v5 = v74;
      a1 = v75;
      if (!v32)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
LABEL_51:
      char v70 = dictionary;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v78 = v72;
      unint64_t v55 = sub_18359A484(v16, v17);
      uint64_t v56 = *(void *)(v72 + 16);
      BOOL v57 = (v54 & 1) == 0;
      uint64_t v58 = v56 + v57;
      if (__OFADD__(v56, v57)) {
        goto LABEL_66;
      }
      char v59 = v54;
      if (*(void *)(v72 + 24) >= v58)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_18359FF80();
        }
      }
      else
      {
        sub_18359BB24(v58, isUniquelyReferenced_nonNull_native);
        unint64_t v60 = sub_18359A484(v16, v17);
        if ((v59 & 1) != (v61 & 1)) {
          goto LABEL_70;
        }
        unint64_t v55 = v60;
      }
      uint64_t v62 = *(void **)v78;
      unint64_t v72 = *(void *)v78;
      if (v59)
      {
        uint64_t v63 = *(void *)(*(void *)v78 + 56) + 24 * v55;
        sub_1834CC974(*(void *)v63, *(void *)(v63 + 8), *(unsigned char *)(v63 + 16));
        *(void *)uint64_t v63 = v20;
        *(void *)(v63 + 8) = v19;
        *(unsigned char *)(v63 + 16) = 0;
      }
      else
      {
        *(void *)(*(void *)v78 + 8 * (v55 >> 6) + 64) |= 1 << v55;
        char v64 = (uint64_t *)(v62[6] + 16 * v55);
        *char v64 = v16;
        v64[1] = v17;
        uint64_t v65 = v62[7] + 24 * v55;
        *(void *)uint64_t v65 = v20;
        *(void *)(v65 + 8) = v19;
        *(unsigned char *)(v65 + 16) = 0;
        uint64_t v66 = v62[2];
        BOOL v47 = __OFADD__(v66, 1);
        uint64_t v67 = v66 + 1;
        if (v47) {
          goto LABEL_68;
        }
        v62[2] = v67;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v5 = v74;
      a1 = v75;
      nw_txt_record_t dictionary = v70;
      int64_t v4 = v77;
    }
    else
    {
      char v25 = (const char *)(sub_183D44BAC() + 32);
      swift_bridgeObjectRetain();
      uint64_t v26 = swift_unknownObjectRetain();
      LOBYTE(v25) = nw_txt_record_set_key(v26, v25, (const uint8_t *)"", 0);
      swift_unknownObjectRelease();
      swift_release();
      if (v25)
      {
        swift_bridgeObjectRetain();
        char v33 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v78 = v72;
        unint64_t v35 = sub_18359A484(v16, v17);
        uint64_t v36 = *(void *)(v72 + 16);
        BOOL v37 = (v34 & 1) == 0;
        uint64_t v38 = v36 + v37;
        if (__OFADD__(v36, v37)) {
          goto LABEL_67;
        }
        char v39 = v34;
        if (*(void *)(v72 + 24) >= v38)
        {
          if ((v33 & 1) == 0) {
            sub_18359FF80();
          }
        }
        else
        {
          sub_18359BB24(v38, v33);
          unint64_t v40 = sub_18359A484(v16, v17);
          if ((v39 & 1) != (v41 & 1)) {
            goto LABEL_70;
          }
          unint64_t v35 = v40;
        }
        uint64_t v42 = *(void **)v78;
        unint64_t v72 = *(void *)v78;
        if (v39)
        {
          uint64_t v43 = *(void *)(*(void *)v78 + 56) + 24 * v35;
          sub_1834CC974(*(void *)v43, *(void *)(v43 + 8), *(unsigned char *)(v43 + 16));
          *(_OWORD *)uint64_t v43 = xmmword_183D584E0;
          *(unsigned char *)(v43 + 16) = 2;
        }
        else
        {
          *(void *)(*(void *)v78 + 8 * (v35 >> 6) + 64) |= 1 << v35;
          uint64_t v44 = (uint64_t *)(v42[6] + 16 * v35);
          *uint64_t v44 = v16;
          v44[1] = v17;
          uint64_t v45 = v42[7] + 24 * v35;
          *(_OWORD *)uint64_t v45 = xmmword_183D584E0;
          *(unsigned char *)(v45 + 16) = 2;
          uint64_t v46 = v42[2];
          BOOL v47 = __OFADD__(v46, 1);
          uint64_t v48 = v46 + 1;
          if (v47) {
            goto LABEL_69;
          }
          v42[2] = v48;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease_n();
      }
LABEL_31:
      swift_bridgeObjectRelease();
      int64_t v4 = v77;
    }
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_65;
  }
  if (v11 >= v76) {
    goto LABEL_63;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v76) {
    goto LABEL_63;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v76) {
    goto LABEL_63;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_19:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_20;
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v76)
  {
LABEL_63:
    uint64_t result = swift_release();
    *a2 = v72;
    a2[1] = (unint64_t)dictionary;
    return result;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v76) {
      goto LABEL_63;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  uint64_t result = sub_183D45A4C();
  __break(1u);
  return result;
}

unint64_t sub_183595EA8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64AA0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A60);
  uint64_t v6 = sub_183D4570C();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  unint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_183138900(v12, (uint64_t)v5, &qword_1E8F64AA0);
    unint64_t result = sub_18359A420((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_183D456AC();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_1835249AC(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1835960A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F50);
  uint64_t v2 = (void *)sub_183D4570C();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (__int16 *)(a1 + 50);
  while (1)
  {
    uint64_t v5 = *(void *)(v4 - 9);
    uint64_t v6 = *(void *)(v4 - 5);
    __int16 v7 = *(v4 - 1);
    __int16 v8 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1835A1C54(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (_WORD *)(v2[7] + 4 * result);
    _WORD *v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 12;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1835961E0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A50);
  uint64_t v2 = (void *)sub_183D4570C();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1835A1C54(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_183596318(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61B38);
  uint64_t v2 = (void *)sub_183D4570C();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (char *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    uint64_t v6 = *((void *)v4 - 3);
    uint64_t v7 = *((void *)v4 - 2);
    unint64_t v8 = *((void *)v4 - 1);
    char v9 = *v4;
    swift_bridgeObjectRetain();
    sub_1834CC954(v7, v8, v9);
    unint64_t result = sub_18359A484(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 24 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(unsigned char *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18359645C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61D30);
  uint64_t v2 = sub_183D4570C();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_183138900(v6, (uint64_t)&v15, &qword_1E8F61D58);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1835A1C54(v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1835249AC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1835965A8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A90);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64A38);
  uint64_t v6 = sub_183D4570C();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_183138900(v12, (uint64_t)v5, &qword_1E8F64A90);
    unint64_t result = sub_18359A614((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_183D445FC();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A30);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    void v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t NWTXTRecord.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v7 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v14 = a1;
      unint64_t v15 = a2;
      char v16 = 0;
      NWTXTRecord.setEntry(_:for:)((uint64_t)&v14, a3, a4);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = (const char *)(sub_183D44BAC() + 32);
    unint64_t v11 = swift_unknownObjectRetain();
    LOBYTE(v10) = nw_txt_record_set_key(v11, v10, (const uint8_t *)"", 0);
    swift_unknownObjectRelease();
    swift_release();
    if (v10)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = *v4;
      *uint64_t v4 = 0x8000000000000000;
      sub_18359E67C(1, 0, 2, a3, a4, isUniquelyReferenced_nonNull_native);
      *uint64_t v4 = v14;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v8 = (const char *)(sub_183D44BAC() + 32);
    char v9 = swift_unknownObjectRetain();
    LODWORD(v8) = nw_txt_record_remove_key(v9, v8);
    swift_unknownObjectRelease();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRetain();
      sub_18359AE74(a3, a4, (uint64_t)&v14);
      swift_bridgeObjectRelease();
      sub_1835A015C(v14, v15, v16);
      return swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t NWTXTRecord.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_183D44B6C();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = *v2;
  if (!*(void *)(v6 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_18359A484(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v6 + 56) + 24 * v7;
  uint64_t v10 = *(void *)v9;
  unint64_t v11 = *(void *)(v9 + 8);
  int v12 = *(unsigned __int8 *)(v9 + 16);
  sub_1834CC954(*(void *)v9, v11, *(unsigned char *)(v9 + 16));
  swift_bridgeObjectRelease();
  if (v12)
  {
    if (v12 == 1)
    {
      sub_1832E5D6C(v10, v11);
      sub_183D44B4C();
      sub_1835A0170();
      uint64_t v13 = sub_183D44B2C();
      sub_1834CC974(v10, v11, 1);
      sub_1834CC974(v10, v11, 1);
      return v13;
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void v9[2];
  char v10;

  uint64_t v4 = sub_183598690((uint64_t)v9, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  uint64_t v5 = v9[0];
  uint64_t v6 = v9[1];
  unint64_t v7 = v10;
  swift_bridgeObjectRetain();
  sub_1834CC954(v5, v6, v7);
  sub_1834CC974(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return v4;
}

uint64_t NWTXTRecord.init(nw:)@<X0>(NSObject *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = MEMORY[0x1E4FBC868];
  uint64_t v5 = (uint64_t *)(v4 + 16);
  v9[4] = sub_1834CCA38;
  v9[5] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = sub_183597F24;
  void v9[3] = &block_descriptor_17;
  uint64_t v6 = _Block_copy(v9);
  swift_retain();
  swift_release();
  nw_txt_record_apply(a1, v6);
  _Block_release(v6);
  swift_beginAccess();
  uint64_t v7 = *v5;
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  *a2 = v7;
  a2[1] = a1;
  return result;
}

BOOL static NWTXTRecord.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 8), *(nw_txt_record_t *)(a2 + 8));
}

uint64_t NWTXTRecord.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v4 = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  sub_1834C3DA8(v1, &v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = sub_183D44A4C();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t NWTXTRecord.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWTXTRecord.Entry.data.getter()
{
  unint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1) {
      sub_1832E5D6C(*(void *)v0, *(void *)(v0 + 8));
    }
    else {
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    return sub_1834CD42C(v2, v1);
  }
  return v2;
}

uint64_t NWTXTRecord.Entry.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_183D44B6C();
  uint64_t result = MEMORY[0x1F4188790](v6 - 8);
  if (a2 >> 60 == 15)
  {
    a1 = 0;
    a2 = 0;
    char v8 = 2;
  }
  else
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        if ((int)a1 == a1 >> 32) {
          goto LABEL_11;
        }
        goto LABEL_7;
      case 2uLL:
        if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
          goto LABEL_11;
        }
LABEL_7:
        sub_1832E5D6C(a1, a2);
        goto LABEL_8;
      case 3uLL:
        goto LABEL_5;
      default:
        if ((a2 & 0xFF000000000000) != 0)
        {
LABEL_8:
          sub_183D44B4C();
          sub_1835A0170();
          uint64_t v9 = sub_183D44B2C();
          unint64_t v11 = v10;
          uint64_t result = sub_1832E669C(a1, a2);
          if (v11)
          {
            uint64_t result = sub_1832E669C(a1, a2);
            char v8 = 0;
            a1 = v9;
            a2 = v11;
          }
          else
          {
            char v8 = 1;
          }
        }
        else
        {
LABEL_5:
          sub_1832E669C(a1, a2);
LABEL_11:
          uint64_t result = sub_1832E669C(a1, a2);
          a2 = 0;
          char v8 = 2;
          a1 = 1;
        }
        break;
    }
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t NWTXTRecord.Entry.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_1832E5D6C(*(void *)v0, *(void *)(v0 + 8));
    }
    else
    {
      if (!(v1 | v2)) {
        return sub_183D45B1C();
      }
      uint64_t v1 = 0;
      unint64_t v2 = 0xC000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_1834CD42C(v1, v2);
    unint64_t v2 = v3;
  }
  sub_183D45B1C();
  sub_1832E5D6C(v1, v2);
  sub_183D4454C();
  sub_1832E669C(v1, v2);

  return sub_1832E669C(v1, v2);
}

uint64_t NWTXTRecord.Entry.debugDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_1832E5D6C(*(void *)v0, *(void *)(v0 + 8));
      uint64_t v3 = sub_183D444BC();
      sub_1834CC974(v1, v2, 1);
    }
    else if (v1 | v2)
    {
      return 0x3E7974706D653CLL;
    }
    else
    {
      return 0x3E656E6F6E3CLL;
    }
  }
  else
  {
    sub_183D44C8C();
    sub_183D44C8C();
    return 34;
  }
  return v3;
}

uint64_t NWTXTRecord.Entry.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  sub_183D45AFC();
  if (v3)
  {
    if (v3 == 1)
    {
      sub_1832E5D6C(v1, v2);
    }
    else
    {
      if (!(v1 | v2))
      {
        sub_183D45B1C();
        return sub_183D45B4C();
      }
      uint64_t v1 = 0;
      unint64_t v2 = 0xC000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_1834CD42C(v1, v2);
    unint64_t v2 = v4;
  }
  sub_183D45B1C();
  sub_1832E5D6C(v1, v2);
  sub_183D4454C();
  sub_1832E669C(v1, v2);
  sub_1832E669C(v1, v2);
  return sub_183D45B4C();
}

uint64_t sub_1835971F8()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_1832E5D6C(*(void *)v0, *(void *)(v0 + 8));
    }
    else
    {
      if (!(v1 | v2)) {
        return sub_183D45B1C();
      }
      uint64_t v1 = 0;
      unint64_t v2 = 0xC000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_1834CD42C(v1, v2);
    unint64_t v2 = v3;
  }
  sub_183D45B1C();
  sub_1832E5D6C(v1, v2);
  sub_183D4454C();
  sub_1832E669C(v1, v2);

  return sub_1832E669C(v1, v2);
}

uint64_t sub_1835972DC()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  sub_183D45AFC();
  if (v3)
  {
    if (v3 == 1)
    {
      sub_1832E5D6C(v1, v2);
    }
    else
    {
      if (!(v1 | v2))
      {
        sub_183D45B1C();
        return sub_183D45B4C();
      }
      uint64_t v1 = 0;
      unint64_t v2 = 0xC000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_1834CD42C(v1, v2);
    unint64_t v2 = v4;
  }
  sub_183D45B1C();
  sub_1832E5D6C(v1, v2);
  sub_183D4454C();
  sub_1832E669C(v1, v2);
  sub_1832E669C(v1, v2);
  return sub_183D45B4C();
}

uint64_t sub_1835973C4()
{
  return sub_183D45B4C();
}

uint64_t sub_18359742C()
{
  sub_183D44B8C();
  sub_183D44C4C();

  return swift_bridgeObjectRelease();
}

uint64_t sub_183597480()
{
  return sub_183D45B4C();
}

uint64_t sub_1835974E4()
{
  uint64_t v0 = sub_183D44B8C();
  uint64_t v2 = v1;
  if (v0 == sub_183D44B8C() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_183D4592C();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t NWTXTRecord.setEntry(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (v7) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v8 == 0xE000000000000000;
    }
    if (!v11 && (sub_183D4592C() & 1) == 0)
    {
      uint64_t v44 = v7;
      unint64_t v45 = v8;
      swift_bridgeObjectRetain();
      sub_1834CC954(v7, v8, 0);
      BOOL v12 = sub_1835A1E58(&v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if (!v12) {
        return result;
      }
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v9 == 1)
  {
    unint64_t v10 = v8 >> 62;
    switch(v8 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v7), v7))
        {
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v21 = HIDWORD(v7) - (int)v7;
LABEL_21:
        sub_1832E5D6C(*(void *)a1, v8);
        if (v21)
        {
LABEL_22:
          if (!v10)
          {
            uint64_t v44 = v7;
            LOWORD(v45) = v8;
            BYTE2(v45) = BYTE2(v8);
            BYTE3(v45) = BYTE3(v8);
            BYTE4(v45) = BYTE4(v8);
            BYTE5(v45) = BYTE5(v8);
            int v31 = (const char *)(sub_183D44BAC() + 32);
            swift_bridgeObjectRetain_n();
            BOOL v32 = swift_unknownObjectRetain();
            BOOL v30 = nw_txt_record_set_key(v32, v31, (const uint8_t *)&v44, BYTE6(v8));
            swift_unknownObjectRelease();
            swift_release();
            goto LABEL_36;
          }
          if (v10 != 1)
          {
            uint64_t v33 = *(void *)(v7 + 16);
            uint64_t v34 = *(void *)(v7 + 24);
            swift_bridgeObjectRetain_n();
            swift_retain();
            swift_retain();
            unint64_t v35 = (const uint8_t *)sub_183D4434C();
            if (v35)
            {
              uint64_t v36 = sub_183D4437C();
              if (__OFSUB__(v33, v36)) {
                goto LABEL_56;
              }
              v35 += v33 - v36;
            }
            BOOL v37 = __OFSUB__(v34, v33);
            uint64_t v38 = v34 - v33;
            if (!v37)
            {
              uint64_t v39 = sub_183D4436C();
              if (v39 >= v38) {
                uint64_t v40 = v38;
              }
              else {
                uint64_t v40 = v39;
              }
              char v41 = &v35[v40];
              if (v35) {
                uint64_t v42 = (uint64_t)v41;
              }
              else {
                uint64_t v42 = 0;
              }
              swift_bridgeObjectRetain();
              BOOL v43 = sub_1835A1F8C(v35, v42);
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              sub_1834CC974(v7, v8, 1);
              swift_bridgeObjectRelease_n();
              if (!v43) {
                return 0;
              }
              goto LABEL_16;
            }
            goto LABEL_54;
          }
          if (v7 >> 32 >= (int)v7)
          {
            swift_bridgeObjectRetain_n();
            long long v24 = (const uint8_t *)sub_183D4434C();
            if (!v24)
            {
LABEL_28:
              uint64_t v26 = sub_183D4436C();
              if (v26 >= (v7 >> 32) - (int)v7) {
                uint64_t v27 = (v7 >> 32) - (int)v7;
              }
              else {
                uint64_t v27 = v26;
              }
              uint64_t v28 = &v24[v27];
              if (v24) {
                uint64_t v29 = (uint64_t)v28;
              }
              else {
                uint64_t v29 = 0;
              }
              swift_bridgeObjectRetain();
              BOOL v30 = sub_1835A1F8C(v24, v29);
              swift_bridgeObjectRelease();
LABEL_36:
              sub_1834CC974(v7, v8, 1);
              swift_bridgeObjectRelease_n();
              if (!v30) {
                return 0;
              }
LABEL_16:
              swift_bridgeObjectRetain();
              sub_1834CC954(v7, v8, v9);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v44 = *v4;
              *unint64_t v4 = 0x8000000000000000;
              sub_18359E67C(v7, v8, v9, a2, a3, isUniquelyReferenced_nonNull_native);
              *unint64_t v4 = v44;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return 1;
            }
            uint64_t v25 = sub_183D4437C();
            if (!__OFSUB__((int)v7, v25))
            {
              v24 += (int)v7 - v25;
              goto LABEL_28;
            }
            goto LABEL_55;
          }
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
        }
LABEL_5:
        sub_1834CC974(v7, v8, 1);
        break;
      case 2uLL:
        uint64_t v23 = *(void *)(v7 + 16);
        uint64_t v22 = *(void *)(v7 + 24);
        uint64_t v21 = v22 - v23;
        if (!__OFSUB__(v22, v23)) {
          goto LABEL_21;
        }
        goto LABEL_52;
      case 3uLL:
        goto LABEL_5;
      default:
        if (!BYTE6(v8)) {
          goto LABEL_5;
        }
        goto LABEL_22;
    }
    goto LABEL_14;
  }
  if (v7 | v8)
  {
LABEL_14:
    uint64_t v14 = sub_183D44BAC() + 32;
    unint64_t v15 = swift_unknownObjectRetain();
    char v16 = (const uint8_t *)"";
    uint64_t v17 = (const char *)v14;
    goto LABEL_15;
  }
  uint64_t v20 = sub_183D44BAC() + 32;
  unint64_t v15 = swift_unknownObjectRetain();
  uint64_t v17 = (const char *)v20;
  char v16 = 0;
LABEL_15:
  BOOL v18 = nw_txt_record_set_key(v15, v17, v16, 0);
  swift_unknownObjectRelease();
  swift_release();
  if (v18) {
    goto LABEL_16;
  }
  return 0;
}

uint64_t NWTXTRecord.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((a1 ^ (unint64_t)(a1 << 32)) >> 32) {
        goto LABEL_18;
      }
      goto LABEL_7;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        goto LABEL_7;
      }
      if (a2 >> 62 != 2)
      {
LABEL_18:
        uint64_t v20 = (a1 >> 32) - (int)a1;
        if (a1 >> 32 < (int)a1)
        {
          __break(1u);
        }
        else
        {
          uint64_t v21 = sub_183D4434C();
          if (!v21)
          {
            sub_183D4436C();
            __break(1u);
            goto LABEL_33;
          }
          uint64_t v22 = v21;
          uint64_t v23 = sub_183D4437C();
          uint64_t v24 = (int)a1 - v23;
          if (!__OFSUB__((int)a1, v23))
          {
            uint64_t v25 = sub_183D4436C();
            if (v25 >= v20) {
              size_t v6 = (a1 >> 32) - (int)a1;
            }
            else {
              size_t v6 = v25;
            }
            p_unint64_t aBlock = (const uint8_t *)(v22 + v24);
LABEL_25:
            uint64_t v13 = nw_txt_record_create_with_bytes(p_aBlock, v6);
            goto LABEL_26;
          }
        }
        __break(1u);
        goto LABEL_30;
      }
      swift_retain();
      swift_retain();
      uint64_t v14 = (const uint8_t *)sub_183D4434C();
      if (v14)
      {
        uint64_t v15 = sub_183D4437C();
        if (__OFSUB__(v8, v15)) {
          goto LABEL_31;
        }
        v14 += v8 - v15;
      }
      BOOL v16 = __OFSUB__(v9, v8);
      int64_t v17 = v9 - v8;
      if (v16)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      uint64_t v18 = sub_183D4436C();
      if (!v14)
      {
LABEL_33:
        __break(1u);
        JUMPOUT(0x183597D78);
      }
      if (v18 >= v17) {
        size_t v19 = v17;
      }
      else {
        size_t v19 = v18;
      }
      uint64_t v13 = nw_txt_record_create_with_bytes(v14, v19);
      swift_release();
      swift_release();
LABEL_26:
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = MEMORY[0x1E4FBC868];
      uint64_t v27 = (unint64_t *)(v26 + 16);
      uint64_t v33 = sub_1834CCA38;
      uint64_t v34 = v26;
      unint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v30 = 1107296256;
      int v31 = sub_183597F24;
      BOOL v32 = &block_descriptor_5_0;
      uint64_t v28 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      nw_txt_record_apply(v13, v28);
      _Block_release(v28);
      swift_beginAccess();
      unint64_t v12 = *v27;
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t result = sub_1832E5E9C(a1, a2);
LABEL_27:
      *a3 = v12;
      a3[1] = (unint64_t)v13;
      return result;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
        unint64_t aBlock = a1;
        LOWORD(v30) = a2;
        BYTE2(v30) = BYTE2(a2);
        BYTE3(v30) = BYTE3(a2);
        BYTE4(v30) = BYTE4(a2);
        size_t v6 = BYTE6(a2);
        BYTE5(v30) = BYTE5(a2);
        p_unint64_t aBlock = (const uint8_t *)&aBlock;
        goto LABEL_25;
      }
LABEL_7:
      unint64_t v10 = sub_1835961E0(MEMORY[0x1E4FBC860]);
      NWTXTRecord.init(_:)(v10, &aBlock);
      uint64_t result = sub_1832E5E9C(a1, a2);
      unint64_t v12 = aBlock;
      uint64_t v13 = v30;
      goto LABEL_27;
  }
}

uint64_t sub_183597D88(uint64_t a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (uint64_t *)(a5 + 16);
  uint64_t v9 = sub_183D44C9C();
  uint64_t v11 = v10;
  if (a2 == 4)
  {
    uint64_t v14 = sub_1835572E0(a3, a4);
    NWTXTRecord.Entry.init(_:)(v14, v15, (uint64_t)v23);
    uint64_t v16 = v23[0];
    uint64_t v17 = v23[1];
    char v18 = v24;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    sub_18359E67C(v16, v17, v18, v9, v11, isUniquelyReferenced_nonNull_native);
    uint64_t v20 = v22;
  }
  else
  {
    if (a2 == 3)
    {
      swift_beginAccess();
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      v23[0] = *v8;
      *uint64_t v8 = 0x8000000000000000;
      uint64_t v13 = 1;
    }
    else
    {
      if (a2 != 2)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      swift_beginAccess();
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      v23[0] = *v8;
      *uint64_t v8 = 0x8000000000000000;
      uint64_t v13 = 0;
    }
    sub_18359E67C(v13, 0, 2, v9, v11, v12);
    uint64_t v20 = v23[0];
  }
  *uint64_t v8 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return 1;
}

uint64_t sub_183597F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a5) = v9(a2, a3, a4, a5);
  swift_release();
  return a5 & 1;
}

Swift::Bool __swiftcall NWTXTRecord.removeEntry(key:)(Swift::String key)
{
  object = key._object;
  uint64_t countAndFlagsBits = key._countAndFlagsBits;
  uint64_t v3 = (const char *)(sub_183D44BAC() + 32);
  unint64_t v4 = swift_unknownObjectRetain();
  BOOL v5 = nw_txt_record_remove_key(v4, v3);
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_18359AE74(countAndFlagsBits, (uint64_t)object, (uint64_t)v7);
    swift_bridgeObjectRelease();
    sub_1835A015C(v7[0], v7[1], v8);
  }
  return v5;
}

uint64_t NWTXTRecord.getEntry(for:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_7;
  }
  uint64_t v7 = result;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_18359A484(v7, a2);
  if ((v9 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_7:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = -1;
    return result;
  }
  uint64_t v10 = *(void *)(v5 + 56) + 24 * v8;
  uint64_t v11 = *(void *)v10;
  unint64_t v12 = *(void *)(v10 + 8);
  *(void *)a3 = *(void *)v10;
  *(void *)(a3 + 8) = v12;
  char v13 = *(unsigned char *)(v10 + 16);
  *(unsigned char *)(a3 + 16) = v13;
  sub_1834CC954(v11, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t NWTXTRecord.data.getter()
{
  uint64_t v1 = *(NSObject **)(v0 + 8);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_183D54880;
  v6[4] = sub_1835A207C;
  v6[5] = v2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1107296256;
  v6[2] = sub_18359830C;
  v6[3] = &block_descriptor_11;
  uint64_t v3 = _Block_copy(v6);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_txt_record_access_bytes(v1, v3);
  _Block_release(v3);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  sub_1832E5D6C(v4, *(void *)(v2 + 24));
  swift_release();
  return v4;
}

uint64_t sub_18359821C(unsigned char *__src, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 <= 14)
    {
      uint64_t v7 = sub_1834D7CD4(__src, &__src[a2]);
      unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      sub_183D4439C();
      swift_allocObject();
      uint64_t v5 = sub_183D4433C();
      uint64_t v6 = v5;
      if ((unint64_t)a2 >= 0x7FFFFFFF)
      {
        sub_183D444DC();
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = a2;
        unint64_t v8 = v6 | 0x8000000000000000;
      }
      else
      {
        uint64_t v7 = a2 << 32;
        unint64_t v8 = v5 | 0x4000000000000000;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xC000000000000000;
  }
  swift_beginAccess();
  uint64_t v10 = *(void *)(a3 + 16);
  unint64_t v11 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  sub_1832E5E9C(v10, v11);
  return 1;
}

uint64_t sub_18359830C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a3) = v5(a2, a3);
  swift_release();
  return a3 & 1;
}

uint64_t sub_183598368@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v5 = NWTXTRecord.subscript.getter(v3, v4);
  uint64_t v7 = v6;
  swift_unknownObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_1835983E8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return NWTXTRecord.subscript.setter(v5, v6, v3, v4);
}

void (*NWTXTRecord.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  v7[4] = v3;
  uint64_t v7[2] = a2;
  *uint64_t v7 = NWTXTRecord.subscript.getter(a2, a3);
  v7[1] = v8;
  return sub_1835984D4;
}

void sub_1835984D4(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[2];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NWTXTRecord.subscript.setter(v3, v4, v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    NWTXTRecord.subscript.setter(v3, v4, v6, v5);
  }

  free(v2);
}

uint64_t NWTXTRecord.dictionary.getter()
{
  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1834C3DA8(v0, &v2);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL sub_1835985D0(uint64_t a1, uint64_t a2)
{
  return nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 8), *(nw_txt_record_t *)(a2 + 8));
}

uint64_t sub_183598690(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *(void *)(a5 + 56) + 24 * a2;
    uint64_t v7 = *(void *)v6;
    unint64_t v8 = *(void *)(v6 + 8);
    *(void *)uint64_t result = *(void *)v6;
    *(void *)(result + 8) = v8;
    char v9 = *(unsigned char *)(v6 + 16);
    *(unsigned char *)(result + 16) = v9;
    swift_bridgeObjectRetain();
    sub_1834CC954(v7, v8, v9);
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL static NWTXTRecord.Index.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result == *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static NWTXTRecord.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result < *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1835987BC(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result < *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1835987F8(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0 && (*(unsigned char *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(void *)(result + 8)) {
      return *(void *)a2 >= *(void *)result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_183598834(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result >= *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_183598870(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0 && (*(unsigned char *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(void *)(result + 8)) {
      return *(void *)a2 < *(void *)result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_1835988AC(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result == *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t NWTXTRecord.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_18359891C(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t sub_18359891C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  char v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void NWTXTRecord.endIndex.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36);
  *(void *)a1 = 1 << *(unsigned char *)(*(void *)v1 + 32);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t NWTXTRecord.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1835A1BCC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_183598A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_18359891C(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

void sub_183598A50(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36);
  *(void *)a1 = 1 << *(unsigned char *)(*(void *)v1 + 32);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
}

void (*sub_183598A70(void *a1, uint64_t a2))(uint64_t a1)
{
  char v5 = malloc(0x40uLL);
  *a1 = v5;
  uint64_t v6 = sub_183598690((uint64_t)v13, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  uint64_t v8 = v7;
  uint64_t v9 = v13[0];
  unint64_t v10 = v13[1];
  v5[5] = v7;
  v5[6] = v9;
  v5[7] = v10;
  char v11 = v14;
  *((unsigned char *)v5 + 33) = v14;
  swift_bridgeObjectRetain();
  sub_1834CC954(v9, v10, v11);
  sub_1834CC974(v9, v10, v11);
  swift_bridgeObjectRelease();
  *char v5 = v6;
  v5[1] = v8;
  v5[2] = v9;
  v5[3] = v10;
  *((unsigned char *)v5 + 32) = v11;
  swift_bridgeObjectRetain();
  sub_1834CC954(v9, v10, v11);
  return sub_183598B64;
}

void sub_183598B64(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  unint64_t v2 = *(void *)(*(void *)a1 + 56);
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  unint64_t v5 = *(void *)(*(void *)a1 + 24);
  char v6 = *(unsigned char *)(*(void *)a1 + 32);
  char v7 = *(unsigned char *)(*(void *)a1 + 33);
  swift_bridgeObjectRelease();
  sub_1834CC974(v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_1834CC974(v3, v2, v7);

  free(v1);
}

uint64_t sub_183598BF4@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[1];
  long long v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  return sub_183595684((uint64_t)&v5, *v2, v2[1], a2);
}

uint64_t sub_183598C2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = sub_18359891C(v4);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6 & 1;
  uint64_t v7 = *(unsigned int *)(v4 + 36);
  *(void *)(a1 + 40) = 1 << *(unsigned char *)(v4 + 32);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = 0;
  swift_bridgeObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t sub_183598CA4()
{
  uint64_t v1 = *v0;
  uint64_t result = sub_18359891C(*v0);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) == v3) {
      return result == 1 << *(unsigned char *)(v1 + 32);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_183598CFC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

uint64_t sub_183598D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_183598D24(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *v3, a3);
}

uint64_t sub_183598D24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    uint64_t v7 = a2;
    unint64_t v8 = result;
    uint64_t v9 = a6;
    char v10 = a3 & 1;
    if (a4)
    {
      uint64_t result = sub_1835A25A8(result, a2, a3 & 1);
      uint64_t v12 = 0;
      uint64_t v13 = a5 + 64;
      uint64_t v14 = a4 - 1;
      uint64_t v15 = v7;
      uint64_t v16 = a5 + 96;
      while (1)
      {
        if (v10) {
          goto LABEL_31;
        }
        if ((v8 & 0x8000000000000000) != 0 || (uint64_t v18 = 1 << *(unsigned char *)(a5 + 32), (uint64_t)v8 >= v18))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        unint64_t v19 = v8 >> 6;
        unint64_t v20 = *(void *)(v13 + 8 * (v8 >> 6));
        if (((v20 >> v8) & 1) == 0) {
          goto LABEL_28;
        }
        if (*(_DWORD *)(a5 + 36) != v7) {
          goto LABEL_29;
        }
        unint64_t v21 = v20 & (-2 << (v8 & 0x3F));
        if (v21)
        {
          unint64_t v8 = __clz(__rbit64(v21)) | v8 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v22 = v19 + 1;
          unint64_t v23 = (unint64_t)(v18 + 63) >> 6;
          if (v19 + 1 >= v23) {
            goto LABEL_22;
          }
          unint64_t v24 = *(void *)(v13 + 8 * v22);
          if (!v24)
          {
            unint64_t v22 = v19 + 2;
            if (v19 + 2 >= v23) {
              goto LABEL_22;
            }
            unint64_t v24 = *(void *)(v13 + 8 * v22);
            if (!v24)
            {
              unint64_t v22 = v19 + 3;
              if (v19 + 3 >= v23)
              {
LABEL_22:
                unint64_t v8 = 1 << *(unsigned char *)(a5 + 32);
                goto LABEL_5;
              }
              unint64_t v24 = *(void *)(v13 + 8 * v22);
              if (!v24)
              {
                while (v23 - 4 != v19)
                {
                  unint64_t v24 = *(void *)(v16 + 8 * v19++);
                  if (v24)
                  {
                    uint64_t v25 = v8;
                    uint64_t v26 = v16;
                    uint64_t result = sub_1835A25C4(v25, v7, 0);
                    uint64_t v16 = v26;
                    unint64_t v22 = v19 + 3;
                    goto LABEL_14;
                  }
                }
                uint64_t v27 = v8;
                uint64_t v28 = v16;
                uint64_t result = sub_1835A25C4(v27, v7, 0);
                uint64_t v16 = v28;
                unint64_t v8 = v18;
                goto LABEL_5;
              }
            }
          }
LABEL_14:
          unint64_t v8 = __clz(__rbit64(v24)) + (v22 << 6);
        }
LABEL_5:
        char v10 = 0;
        uint64_t v7 = v15;
        if (v12++ == v14)
        {
          uint64_t v7 = v15;
          uint64_t v9 = a6;
          goto LABEL_26;
        }
      }
    }
    uint64_t result = sub_1835A25A8(result, a2, a3 & 1);
LABEL_26:
    *(void *)uint64_t v9 = v8;
    *(void *)(v9 + 8) = v7;
    *(unsigned char *)(v9 + 16) = v10;
  }
  return result;
}

uint64_t sub_183598F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_183598F68(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16), *v4, a4);
}

uint64_t sub_183598F68@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (a4 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    uint64_t v14 = a2;
    unint64_t v15 = result;
    char v16 = a3 & 1;
    uint64_t result = sub_1835A25A8(result, a2, a3 & 1);
    if (a4)
    {
      uint64_t v17 = 0;
      char v31 = a7 & 1;
      char v18 = (a3 | a7) & 1;
      uint64_t v19 = a8 + 64;
      uint64_t v20 = a5;
      while (1)
      {
        if (v18) {
          goto LABEL_36;
        }
        if (v14 != a6)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if (v15 == v20)
        {
          uint64_t result = sub_1835A25C4(v20, v14, 0);
          *(void *)a9 = 0;
          *(void *)(a9 + 8) = 0;
          *(unsigned char *)(a9 + 16) = -1;
          return result;
        }
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_32;
        }
        uint64_t v21 = 1 << *(unsigned char *)(a8 + 32);
        if ((uint64_t)v15 >= v21) {
          goto LABEL_32;
        }
        unint64_t v22 = v15 >> 6;
        unint64_t v23 = *(void *)(v19 + 8 * (v15 >> 6));
        if (((v23 >> v15) & 1) == 0) {
          goto LABEL_33;
        }
        if (*(_DWORD *)(a8 + 36) != a6) {
          goto LABEL_34;
        }
        unint64_t v24 = v23 & (-2 << (v15 & 0x3F));
        if (v24)
        {
          uint64_t result = sub_1835A25C4(v15, v14, 0);
          unint64_t v15 = __clz(__rbit64(v24)) | v15 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v25 = v22 + 1;
          unint64_t v26 = (unint64_t)(v21 + 63) >> 6;
          if (v22 + 1 < v26)
          {
            unint64_t v27 = *(void *)(v19 + 8 * v25);
            if (v27) {
              goto LABEL_16;
            }
            unint64_t v25 = v22 + 2;
            if (v22 + 2 >= v26)
            {
LABEL_26:
              uint64_t result = sub_1835A25C4(v15, v14, 0);
              unint64_t v15 = v21;
            }
            else
            {
              unint64_t v27 = *(void *)(v19 + 8 * v25);
              if (!v27)
              {
                unint64_t v25 = v22 + 3;
                if (v22 + 3 >= v26) {
                  goto LABEL_26;
                }
                unint64_t v27 = *(void *)(v19 + 8 * v25);
                if (!v27)
                {
                  unint64_t v28 = v26 - 4;
                  while (v28 != v22)
                  {
                    unint64_t v27 = *(void *)(a8 + 96 + 8 * v22++);
                    if (v27)
                    {
                      unint64_t v25 = v22 + 3;
                      goto LABEL_16;
                    }
                  }
                  goto LABEL_26;
                }
              }
LABEL_16:
              uint64_t result = sub_1835A25C4(v15, v14, 0);
              unint64_t v15 = __clz(__rbit64(v27)) | (v25 << 6);
            }
            uint64_t v20 = a5;
            goto LABEL_5;
          }
          uint64_t result = sub_1835A25C4(v15, v14, 0);
          unint64_t v15 = v21;
        }
LABEL_5:
        ++v17;
        uint64_t v14 = a6;
        char v18 = v31;
        if (v17 == a4)
        {
          char v16 = 0;
          uint64_t v14 = a6;
          break;
        }
      }
    }
    *(void *)a9 = v15;
    *(void *)(a9 + 8) = v14;
    *(unsigned char *)(a9 + 16) = v16;
  }
  return result;
}

uint64_t sub_1835991B0(uint64_t a1, uint64_t a2)
{
  return sub_1835991D0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *v2);
}

uint64_t sub_1835991D0(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  if (a6 & 1) != 0 || (a3) {
    goto LABEL_39;
  }
  unint64_t v8 = result;
  if (a4 < result) {
    goto LABEL_37;
  }
  if (a5 != a2)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    uint64_t v12 = a7 + 64;
    uint64_t v22 = a7 + 96;
    uint64_t v10 = 1;
    while (1)
    {
      if ((v8 & 0x8000000000000000) != 0 || (uint64_t v13 = 1 << *(unsigned char *)(a7 + 32), (uint64_t)v8 >= v13))
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      unint64_t v14 = v8 >> 6;
      unint64_t v15 = *(void *)(v12 + 8 * (v8 >> 6));
      if (((v15 >> v8) & 1) == 0) {
        goto LABEL_35;
      }
      if (*(_DWORD *)(a7 + 36) != a5) {
        goto LABEL_36;
      }
      unint64_t v16 = v15 & (-2 << (v8 & 0x3F));
      if (v16)
      {
        uint64_t result = sub_1835A25C4(v8, a2, 0);
        unint64_t v8 = __clz(__rbit64(v16)) | v8 & 0xFFFFFFFFFFFFFFC0;
        if (v8 == a4) {
          return v10;
        }
      }
      else
      {
        unint64_t v17 = v14 + 1;
        unint64_t v18 = (unint64_t)(v13 + 63) >> 6;
        if (v14 + 1 < v18)
        {
          unint64_t v19 = *(void *)(v12 + 8 * v17);
          if (v19) {
            goto LABEL_18;
          }
          unint64_t v17 = v14 + 2;
          if (v14 + 2 >= v18)
          {
LABEL_29:
            uint64_t result = sub_1835A25C4(v8, a2, 0);
            unint64_t v8 = v13;
          }
          else
          {
            unint64_t v19 = *(void *)(v12 + 8 * v17);
            if (!v19)
            {
              unint64_t v17 = v14 + 3;
              if (v14 + 3 >= v18) {
                goto LABEL_29;
              }
              unint64_t v19 = *(void *)(v12 + 8 * v17);
              if (!v19)
              {
                unint64_t v20 = v18 - 4;
                while (v20 != v14)
                {
                  unint64_t v19 = *(void *)(v22 + 8 * v14++);
                  if (v19)
                  {
                    unint64_t v17 = v14 + 3;
                    goto LABEL_18;
                  }
                }
                goto LABEL_29;
              }
            }
LABEL_18:
            uint64_t result = sub_1835A25C4(v8, a2, 0);
            unint64_t v8 = __clz(__rbit64(v19)) | (v17 << 6);
          }
          if (v8 == a4) {
            return v10;
          }
          goto LABEL_31;
        }
        uint64_t result = sub_1835A25C4(v8, a2, 0);
        unint64_t v8 = v13;
        if (v13 == a4) {
          return v10;
        }
      }
LABEL_31:
      a2 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
    }
  }
  sub_1835A25C4(a4, a2, 0);
  return 0;
}

uint64_t sub_1835993C0(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v2 != *(void *)(a2 + 32)) {
    goto LABEL_11;
  }
  if (*(void *)result >= *(void *)(a2 + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_18359942C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != v2) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_183599498(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(result + 8) != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a2 + 40) | *(unsigned char *)(result + 40)))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != *(void *)(result + 32)) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_183599514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1835A1BCC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_183599554(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  uint64_t v7 = sub_1835A1BCC(*(void *)a1, v5, v6, v3);
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t result = sub_1835A25C4(v4, v5, v6);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  return result;
}

__n128 sub_1835995D0@<Q0>(__n128 *a1@<X8>)
{
  __n128 v7 = *(__n128 *)v1;
  uint64_t v3 = sub_18359891C(*v1);
  __n128 result = v7;
  *a1 = v7;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = v5;
  a1[2].n128_u8[0] = v6 & 1;
  return result;
}

uint64_t sub_18359961C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_18359891C(*v0);
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  uint64_t v7 = sub_1835991D0(v2, v3, v5 & 1, 1 << *(unsigned char *)(v1 + 32), *(_DWORD *)(v1 + 36), 0, v1);
  sub_1835A25C4(v2, v4, v6);
  return v7;
}

uint64_t sub_18359969C()
{
  uint64_t v1 = sub_183599D74(*v0, v0[1]);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1835996E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18359A118(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_1835996F0()
{
  uint64_t v1 = *v0;
  uint64_t v4 = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  sub_1834C3DA8(v1, &v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = sub_183D44A4C();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_18359979C()
{
  unint64_t v0 = sub_183D44D4C();
  uint64_t v4 = sub_18359981C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_18359981C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_183599974(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = sub_1834EFD44(v9, 0);
      unint64_t v12 = sub_183599A74((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_183D4557C();
LABEL_4:
        JUMPOUT(0x185314000);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x185314000](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x185314000]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_183599974(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    __n128 result = sub_183520284(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    __n128 result = sub_183520284(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return sub_183D44CEC();
}

unint64_t sub_183599A74(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    void v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    __n128 result = v12;
    if (v17 == v15) {
      __n128 result = sub_183520284(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      __n128 result = sub_183D44CFC();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        __n128 result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          __n128 result = sub_183D4557C();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    __n128 result = sub_183520284(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_183D44CBC();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void *sub_183599C88(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 16);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F70);
  unint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v2;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  uint64_t v5 = sub_183599FF8((uint64_t)&v7, (uint64_t)(v3 + 4), v2, a1);
  swift_retain();
  swift_release();
  if (v5 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_183599D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18359891C(a1);
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t v9 = sub_1835991D0(v4, v5, v7 & 1, 1 << *(unsigned char *)(a1 + 32), *(_DWORD *)(a1 + 36), 0, a1);
  sub_1835A25C4(v4, v6, v8);
  if (!v9) {
    return MEMORY[0x1E4FBC860];
  }
  if (v9 <= 0)
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A18);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v12 = sub_18359A118((uint64_t)v17, (uint64_t)(v10 + 4), v9, a1, a2);
  uint64_t v13 = v17[2];
  uint64_t v14 = v17[3];
  char v15 = v18;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1835A25C4(v13, v14, v15);
  if (v12 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_183599ED4(char *a1, int64_t a2)
{
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61ED0);
    uint64_t v4 = (char *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * v5 - 64;
    uint64_t v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_183599FF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = (void *)result;
  if (!a2)
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_12:
    *size_t v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = a2;
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(a4 + 16);
    unint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(v8 + 80);
      uint64_t v11 = 1;
      while (v11 - 1 < v9)
      {
        uint64_t v12 = *(v10 - 1);
        uint64_t v13 = *v10;
        char v14 = *((unsigned char *)v10 - 16);
        uint64_t v15 = *(v10 - 4);
        uint64_t v16 = *(v10 - 3);
        uint64_t v17 = *(v10 - 5);
        *(void *)uint64_t v7 = *(v10 - 6);
        *(void *)(v7 + 8) = v17;
        *(void *)(v7 + 16) = v15;
        *(void *)(v7 + 24) = v16;
        *(unsigned char *)(v7 + 32) = v14;
        *(void *)(v7 + 40) = v12;
        *(void *)(v7 + 48) = v13;
        if (v6 == v11)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v18 = v11 + 1;
        unint64_t v9 = *(void *)(v8 + 16);
        v10 += 8;
        v7 += 56;
        if (v11++ == v9)
        {
          uint64_t v6 = v18 - 1;
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_18359A118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_18359891C(a4);
  unint64_t v12 = result;
  char v13 = v11 & 1;
  if (!a2)
  {
    uint64_t result = 0;
    goto LABEL_32;
  }
  if (!a3)
  {
    uint64_t result = 0;
LABEL_32:
    uint64_t v14 = a4;
LABEL_36:
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = a5;
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v10;
    *(unsigned char *)(a1 + 32) = v13;
    return result;
  }
  if (a3 < 0) {
    goto LABEL_43;
  }
  uint64_t v34 = a1;
  uint64_t v35 = a5;
  if ((v11 & 1) == 0)
  {
    uint64_t result = 0;
    uint64_t v14 = a4;
    uint64_t v15 = a4 + 64;
    uint64_t v16 = 1;
    uint64_t v37 = a3;
    while (1)
    {
      uint64_t v17 = *(unsigned int *)(v14 + 36);
      if (v17 != v10)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        break;
      }
      uint64_t v18 = v16;
      uint64_t v19 = 1 << *(unsigned char *)(v14 + 32);
      if (v12 == v19)
      {
        char v13 = 0;
LABEL_35:
        a1 = v34;
        a5 = v35;
        goto LABEL_36;
      }
      if ((v12 & 0x8000000000000000) != 0 || (uint64_t)v12 >= v19) {
        goto LABEL_38;
      }
      uint64_t v41 = a2;
      unint64_t v20 = v12 >> 6;
      if ((*(void *)(v15 + 8 * (v12 >> 6)) & (1 << v12)) == 0) {
        goto LABEL_39;
      }
      uint64_t v40 = v18;
      uint64_t v36 = v10;
      uint64_t v21 = v15;
      uint64_t v22 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v12);
      uint64_t v23 = v22[1];
      uint64_t v39 = *v22;
      uint64_t v24 = *(void *)(v14 + 56) + 24 * v12;
      uint64_t v25 = *(void *)v24;
      unint64_t v26 = *(void *)(v24 + 8);
      char v27 = *(unsigned char *)(v24 + 16);
      swift_bridgeObjectRetain();
      sub_1834CC954(v25, v26, v27);
      swift_bridgeObjectRetain();
      sub_1834CC954(v25, v26, v27);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1834CC974(v25, v26, v27);
      uint64_t v14 = a4;
      uint64_t v28 = 1 << *(unsigned char *)(a4 + 32);
      if ((uint64_t)v12 >= v28) {
        goto LABEL_40;
      }
      uint64_t v29 = *(void *)(v21 + 8 * v20);
      if ((v29 & (1 << v12)) == 0) {
        goto LABEL_41;
      }
      uint64_t v10 = v17;
      if (*(_DWORD *)(a4 + 36) != v17) {
        goto LABEL_42;
      }
      uint64_t v15 = v21;
      unint64_t v30 = v29 & (-2 << (v12 & 0x3F));
      if (v30)
      {
        unint64_t v12 = __clz(__rbit64(v30)) | v12 & 0xFFFFFFFFFFFFFFC0;
        goto LABEL_28;
      }
      unint64_t v31 = v20 + 1;
      unint64_t v32 = (unint64_t)(v28 + 63) >> 6;
      if (v20 + 1 < v32)
      {
        unint64_t v33 = *(void *)(v21 + 8 * v31);
        if (v33) {
          goto LABEL_18;
        }
        unint64_t v31 = v20 + 2;
        if (v20 + 2 < v32)
        {
          unint64_t v33 = *(void *)(v21 + 8 * v31);
          if (v33) {
            goto LABEL_18;
          }
          unint64_t v31 = v20 + 3;
          if (v20 + 3 < v32)
          {
            unint64_t v33 = *(void *)(v21 + 8 * v31);
            if (v33)
            {
LABEL_18:
              unint64_t v12 = __clz(__rbit64(v33)) + (v31 << 6);
              goto LABEL_28;
            }
            while (v32 - 4 != v20)
            {
              unint64_t v33 = *(void *)(a4 + 96 + 8 * v20++);
              if (v33)
              {
                sub_1835A25C4(v12, v36, 0);
                uint64_t v10 = v17;
                uint64_t v15 = v21;
                uint64_t v14 = a4;
                unint64_t v31 = v20 + 3;
                goto LABEL_18;
              }
            }
            sub_1835A25C4(v12, v36, 0);
            uint64_t v10 = v17;
            uint64_t v15 = v21;
            uint64_t v14 = a4;
          }
        }
      }
      unint64_t v12 = v28;
LABEL_28:
      uint64_t result = v40;
      *(void *)uint64_t v41 = v39;
      *(void *)(v41 + 8) = v23;
      *(void *)(v41 + 16) = v25;
      *(void *)(v41 + 24) = v26;
      *(unsigned char *)(v41 + 32) = v27;
      if (v40 == v37)
      {
        char v13 = 0;
        uint64_t result = v37;
        goto LABEL_35;
      }
      a2 = v41 + 40;
      uint64_t v16 = v40 + 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_18359A408(uint64_t a1, uint64_t a2)
{
  return sub_1835A1C54(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
}

unint64_t sub_18359A420(uint64_t a1)
{
  sub_183D456AC();
  uint64_t v2 = sub_183D44A6C();

  return sub_18359A77C(a1, v2);
}

unint64_t sub_18359A484(uint64_t a1, uint64_t a2)
{
  sub_183D45AFC();
  sub_183D44B8C();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_183D45B4C();

  return sub_18359A914(a1, a2, v4);
}

unint64_t sub_18359A518(void *a1)
{
  sub_183D45AFC();
  sub_183D44C4C();
  type metadata accessor for NWActorID();
  sub_183D445FC();
  sub_1835A287C((unint64_t *)&qword_1E8F649C0);
  sub_183D44A7C();
  uint64_t v2 = sub_183D45B4C();

  return sub_18359AAA8(a1, v2);
}

unint64_t sub_18359A5D0(uint64_t a1)
{
  uint64_t v2 = sub_183D45AEC();

  return sub_18359AC2C(a1, v2);
}

unint64_t sub_18359A614(uint64_t a1)
{
  sub_183D445FC();
  sub_1835A287C((unint64_t *)&qword_1E8F649C0);
  uint64_t v2 = sub_183D44A6C();

  return sub_18359ACC8(a1, v2);
}

unint64_t sub_18359A698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_183D4592C() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        char v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_183D4592C() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_18359A77C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = sub_183D456AC();
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    char v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = sub_183D44ACC();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_18359A914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = sub_183D44B8C();
    uint64_t v9 = v8;
    if (v7 == sub_183D44B8C() && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v6;
    }
    char v12 = sub_183D4592C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t v6 = (v6 + 1) & v13;
      if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
      {
        while (1)
        {
          uint64_t v14 = sub_183D44B8C();
          uint64_t v16 = v15;
          if (v14 == sub_183D44B8C() && v16 == v17) {
            break;
          }
          char v19 = sub_183D4592C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v6 = (v6 + 1) & v13;
            if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
              continue;
            }
          }
          return v6;
        }
        goto LABEL_16;
      }
    }
  }
  return v6;
}

unint64_t sub_18359AAA8(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1835A291C(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWActorID);
      BOOL v13 = *v8 == *a1 && v8[1] == a1[1];
      if (v13 || (sub_183D4592C()) && (sub_183D445BC()) {
        break;
      }
      sub_1835A28C0((uint64_t)v8);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    sub_1835A28C0((uint64_t)v8);
  }
  return v10;
}

unint64_t sub_18359AC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_18359ACC8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_183D445FC();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    BOOL v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1835A287C(&qword_1E8F64A48);
      char v15 = sub_183D44ACC();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_18359AE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_18359A484(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_18359FF80();
      uint64_t v12 = v15;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 56) + 24 * v8;
    char v14 = *(unsigned char *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(unsigned char *)(a3 + 16) = v14;
    sub_18354F8AC(v8, v12);
    *uint64_t v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = -1;
  }
  return result;
}

double sub_18359AF68@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_18359A420(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1835A01FC();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_183D456AC();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_1835249AC((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_18354FAC8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_18359B094(void *a1)
{
  return sub_18359B0D4(a1, (void (*)(unint64_t, uint64_t))sub_18354FD80, &qword_1E8F64A80);
}

uint64_t sub_18359B0B4(void *a1)
{
  return sub_18359B0D4(a1, (void (*)(unint64_t, uint64_t))sub_18354FD80, &qword_1E8F64A88);
}

uint64_t sub_18359B0D4(void *a1, void (*a2)(unint64_t, uint64_t), uint64_t *a3)
{
  unint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_18359A518(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v6;
  uint64_t v16 = *v6;
  *unint64_t v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1835A04B0(a3);
    uint64_t v11 = v16;
  }
  uint64_t v12 = *(void *)(v11 + 48);
  uint64_t v13 = type metadata accessor for NWActorID();
  sub_1835A28C0(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v8);
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  a2(v8, v11);
  *unint64_t v6 = v11;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_18359B1CC(void *a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_18359A518(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1835A0730();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for NWActorID();
  sub_1835A28C0(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_1835500C8(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_18359B2C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_18359A518(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1835A09B4();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for NWActorID();
    sub_1835A28C0(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for NWActorDiscoveryMechanism(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1835A2984(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for NWActorDiscoveryMechanism);
    sub_18355040C(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for NWActorDiscoveryMechanism(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_18359B474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1835A1C54(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1835A0CCC();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for NWActorSystem.ServerRole();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1835A2984(v12 + *(void *)(v20 + 72) * v8, a3, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    sub_18355079C(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for NWActorSystem.ServerRole();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_18359B62C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_18359A614(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1835A13CC();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_183D445FC();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A30);
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_183550B8C(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A30);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_18359B804(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F50);
  char v40 = a2;
  uint64_t v6 = sub_183D456FC();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    unint64_t v33 = (__int16 *)(*(void *)(v5 + 56) + 4 * v21);
    __int16 v34 = *v33;
    __int16 v35 = v33[1];
    if ((v40 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_183D45AFC();
    sub_183D44C4C();
    uint64_t result = sub_183D45B4C();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = (_WORD *)(*(void *)(v7 + 56) + 4 * v17);
    _WORD *v19 = v34;
    v19[1] = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_18359BB24(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61B38);
  char v40 = a2;
  uint64_t v6 = sub_183D456FC();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v34 = *(void *)v32;
      unint64_t v33 = *(void *)(v32 + 8);
      char v35 = *(unsigned char *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1834CC954(v34, v33, v35);
      }
      sub_183D45AFC();
      sub_183D44B8C();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      uint64_t result = sub_183D45B4C();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v30;
      v18[1] = v31;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)uint64_t v19 = v34;
      *(void *)(v19 + 8) = v33;
      *(unsigned char *)(v19 + 16) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_18359BE6C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = sub_183D456AC();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A60);
  int v45 = a2;
  uint64_t v9 = sub_183D456FC();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    int64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    char v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    BOOL v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      BOOL v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_1835249AC((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_1834F26A8(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = sub_183D44A6C();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_1835249AC(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_18359C268(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for NWActorID();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v44 = a2;
  uint64_t v11 = sub_183D456FC();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v41 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  int64_t v39 = v3;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v39;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v40) {
              goto LABEL_34;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v26;
      }
    }
LABEL_21:
    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v42 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if (v44)
    {
      sub_1835A2984(v28, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWActorID);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }
    else
    {
      sub_1835A291C(v28, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWActorID);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_retain();
    }
    sub_183D45AFC();
    sub_183D44C4C();
    sub_183D445FC();
    sub_1835A287C((unint64_t *)&qword_1E8F649C0);
    sub_183D44A7C();
    uint64_t result = sub_183D45B4C();
    uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = sub_1835A2984((uint64_t)v9, *(void *)(v12 + 48) + v27 * v20, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v5 = v39;
  uint64_t v24 = v41;
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v37;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v12;
  return result;
}

uint64_t sub_18359C694(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for NWActorID();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A68);
  int v40 = a2;
  uint64_t v9 = sub_183D456FC();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v37 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  BOOL v35 = v2;
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = v37;
    unint64_t v23 = v37[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_34;
      }
      unint64_t v23 = v37[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v35;
          if ((v40 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v37[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v36) {
              goto LABEL_34;
            }
            unint64_t v23 = v37[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v38 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v40)
    {
      sub_1835A2984(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
      long long v41 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
    }
    else
    {
      sub_1835A291C(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
      long long v41 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      swift_retain();
    }
    sub_183D45AFC();
    sub_183D44C4C();
    sub_183D445FC();
    sub_1835A287C((unint64_t *)&qword_1E8F649C0);
    sub_183D44A7C();
    uint64_t result = sub_183D45B4C();
    uint64_t v27 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_1835A2984((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v41;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = v37;
  if ((v40 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_18359CAC8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for NWActorDiscoveryMechanism(0);
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NWActorID();
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64A70);
  int v47 = a2;
  uint64_t v12 = sub_183D456FC();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  int v40 = v2;
  int64_t v41 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v43 = v7;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v47)
    {
      sub_1835A2984(v29, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NWActorID);
      uint64_t v30 = *(void *)(v44 + 72);
      sub_1835A2984(*(void *)(v11 + 56) + v30 * v23, (uint64_t)v7, type metadata accessor for NWActorDiscoveryMechanism);
    }
    else
    {
      sub_1835A291C(v29, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NWActorID);
      uint64_t v30 = *(void *)(v44 + 72);
      sub_1835A291C(*(void *)(v11 + 56) + v30 * v23, (uint64_t)v7, type metadata accessor for NWActorDiscoveryMechanism);
    }
    sub_183D45AFC();
    sub_183D44C4C();
    sub_183D445FC();
    sub_1835A287C((unint64_t *)&qword_1E8F649C0);
    sub_183D44A7C();
    uint64_t result = sub_183D45B4C();
    uint64_t v31 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v7 = v43;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      uint64_t v7 = v43;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    sub_1835A2984((uint64_t)v10, *(void *)(v13 + 48) + v28 * v21, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t result = sub_1835A2984((uint64_t)v7, *(void *)(v13 + 56) + v30 * v21, type metadata accessor for NWActorDiscoveryMechanism);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_18359CFCC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A98);
  int v43 = a2;
  uint64_t v9 = sub_183D456FC();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_1835A2984(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    }
    else
    {
      sub_1835A291C(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
      swift_bridgeObjectRetain();
    }
    sub_183D45AFC();
    sub_183D44C4C();
    uint64_t result = sub_183D45B4C();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    void *v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_1835A2984((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_18359D3AC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB266A00);
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F619C0);
  int v40 = a2;
  uint64_t result = sub_183D456FC();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    BOOL v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = sub_183D45AEC();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_18359D758(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61D30);
  uint64_t v6 = sub_183D456FC();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1835249AC(v24, v35);
      }
      else
      {
        sub_1834F26A8((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_183D45AFC();
      sub_183D44C4C();
      uint64_t result = sub_183D45B4C();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1835249AC(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_18359DA58(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A30);
  uint64_t v5 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  BOOL v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_183D445FC();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64A38);
  int v50 = a2;
  uint64_t v12 = sub_183D456FC();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  char v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    unint64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_1835A287C((unint64_t *)&qword_1E8F649C0);
    uint64_t result = sub_183D44A6C();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_18359DF44(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_183D445FC();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A58);
  int v46 = a2;
  uint64_t v10 = sub_183D456FC();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    int64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    sub_1835A287C((unint64_t *)&qword_1E8F649C0);
    uint64_t result = sub_183D44A6C();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  int64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_18359E354(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A50);
  char v42 = a2;
  uint64_t v6 = sub_183D456FC();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    unint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_183D45AFC();
    sub_183D44C4C();
    uint64_t result = sub_183D45B4C();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_18359E67C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_18359A484(a4, a5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_18359FF80();
LABEL_7:
    unint64_t v22 = (void *)*v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 24 * v16;
      uint64_t result = sub_1834CC974(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = a2;
      *(unsigned char *)(v23 + 16) = a3;
      return result;
    }
    goto LABEL_11;
  }
  sub_18359BB24(v19, a6 & 1);
  unint64_t v25 = sub_18359A484(a4, a5);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  unint64_t v22 = (void *)*v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  char v27 = (uint64_t *)(v22[6] + 16 * v16);
  *char v27 = a4;
  v27[1] = a5;
  uint64_t v28 = v22[7] + 24 * v16;
  *(void *)uint64_t v28 = a1;
  *(void *)(v28 + 8) = a2;
  *(unsigned char *)(v28 + 16) = a3;
  uint64_t v29 = v22[2];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v31;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_18359E818(_OWORD *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = sub_183D456AC();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_18359A420(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1835A01FC();
      goto LABEL_7;
    }
    sub_18359BE6C(v17, a3 & 1);
    unint64_t v23 = sub_18359A420(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      char v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_18359F73C(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_183D45A4C();
    __break(1u);
    return result;
  }
LABEL_7:
  char v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v21);

  return sub_1835249AC(a1, v21);
}

uint64_t sub_18359E9F0(uint64_t a1, void *a2, char a3)
{
  return sub_18359EA08(a1, a2, a3, &qword_1E8F64A80);
}

uint64_t sub_18359E9FC(uint64_t a1, void *a2, char a3)
{
  return sub_18359EA08(a1, a2, a3, &qword_1E8F64A88);
}

uint64_t sub_18359EA08(uint64_t a1, void *a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v10 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_18359A518(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_release();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1835A04B0(a4);
    goto LABEL_7;
  }
  sub_18359C268(v18, a3 & 1, a4);
  unint64_t v24 = sub_18359A518(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v6;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1835A291C((uint64_t)a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
  return sub_18359F7FC(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_18359EB94(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_18359A518(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release();
      *uint64_t v22 = a1;
      v22[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1835A0730();
    goto LABEL_7;
  }
  sub_18359C694(v18, a4 & 1);
  unint64_t v24 = sub_18359A518(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1835A291C((uint64_t)a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
  return sub_18359F8B0(v15, (uint64_t)v12, a1, a2, v21);
}

uint64_t sub_18359ED1C(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_18359A518(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    char v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t v21 = type metadata accessor for NWActorDiscoveryMechanism(0);
      return sub_1835A29EC(a1, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v13, type metadata accessor for NWActorDiscoveryMechanism);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1835A09B4();
    goto LABEL_7;
  }
  sub_18359CAC8(v16, a3 & 1);
  unint64_t v23 = sub_18359A518(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
  unint64_t v13 = v23;
  char v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1835A291C((uint64_t)a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NWActorID);
  return sub_18359F96C(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_18359EEC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1835A1C54(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for NWActorSystem.ServerRole();
      return sub_1835A29EC(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1835A0CCC();
    goto LABEL_7;
  }
  sub_18359CFCC(v15, a4 & 1);
  uint64_t v22 = sub_1835A1C54(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_18359FA58(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_18359F05C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_18359A5D0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1835A0F50();
      goto LABEL_7;
    }
    sub_18359D3AC(v13, a3 & 1);
    unint64_t v24 = sub_18359A5D0(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB266A00);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return sub_18359FB04(v10, a2, a1, v16);
}

_OWORD *sub_18359F1C8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1835A1C54(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1835A11E4();
      goto LABEL_7;
    }
    sub_18359D758(v15, a4 & 1);
    uint64_t v21 = sub_1835A1C54(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18359A698);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_183D45A4C();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v19);
    return sub_1835249AC(a1, v19);
  }
LABEL_13:
  sub_18359FBB4(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_18359F344(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = sub_183D445FC();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_18359A614(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1835A13CC();
      goto LABEL_7;
    }
    sub_18359DA58(v17, a3 & 1);
    unint64_t v28 = sub_18359A614(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_18359FC20(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A30);
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_18359F54C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = sub_183D445FC();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_18359A614(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1835A1778();
    goto LABEL_7;
  }
  sub_18359DF44(v17, a3 & 1);
  unint64_t v23 = sub_18359A614(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_183D45A4C();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_18359FD18(v14, (uint64_t)v11, a1, v20);
}

unint64_t sub_18359F6F4(unint64_t result, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(_DWORD *)(a5[7] + 4 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_18359F73C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_183D456AC();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_1835249AC(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_18359F7FC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for NWActorID();
  uint64_t result = sub_1835A2984(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for NWActorID);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_18359F8B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for NWActorID();
  uint64_t result = sub_1835A2984(a2, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_18359F96C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for NWActorID();
  sub_1835A2984(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for NWActorDiscoveryMechanism(0);
  uint64_t result = sub_1835A2984(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for NWActorDiscoveryMechanism);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_18359FA58(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t result = sub_1835A2984(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_18359FB04(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB266A00);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

_OWORD *sub_18359FBB4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1835249AC(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_18359FC20(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_183D445FC();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A30);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_18359FD18(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_183D445FC();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_18359FDD0()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F50);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_183D456EC();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(void *)(v2 + 56) + v20);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v20) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_18359FF80()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61B38);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_183D456EC();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    unint64_t v23 = *(void *)(v21 + 8);
    int64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    char v25 = *(unsigned char *)(v21 + 16);
    *int64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(unsigned char *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_1834CC954(v22, v23, v25);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1835A015C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_1834CC974(result, a2, a3);
  }
  return result;
}

unint64_t sub_1835A0170()
{
  unint64_t result = qword_1E8F61A70;
  if (!qword_1E8F61A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F61A70);
  }
  return result;
}

uint64_t sub_1835A01C4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *sub_1835A01FC()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_183D456AC();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A60);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_183D456EC();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    *unint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  unint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_1834F26A8(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    unint64_t result = sub_1835249AC(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    unint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1835A04A4()
{
  return sub_1835A04B0(&qword_1E8F64A80);
}

void *sub_1835A04B0(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for NWActorID();
  uint64_t v29 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v7 = *v1;
  uint64_t v8 = sub_183D456EC();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v3 = v9;
    return result;
  }
  int64_t v27 = v3;
  unint64_t result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    unint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v28 = v7 + 64;
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v17) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v17) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v13);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v29 + 72) * v19;
    sub_1835A291C(*(void *)(v7 + 48) + v20, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v7 + 56) + 8 * v19);
    sub_1835A2984((uint64_t)v6, *(void *)(v9 + 48) + v20, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(void *)(*(void *)(v9 + 56) + v21) = v22;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v3 = v27;
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v13 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v13);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1835A0730()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWActorID();
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A68);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_183D456EC();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    *unint64_t v1 = v7;
    return result;
  }
  unint64_t v24 = v1;
  unint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v25 + 72) * v17;
    sub_1835A291C(*(void *)(v5 + 48) + v18, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v19 = 16 * v17;
    uint64_t v20 = *(void *)(v7 + 48) + v18;
    long long v26 = *(_OWORD *)(*(void *)(v5 + 56) + v19);
    sub_1835A2984((uint64_t)v4, v20, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(_OWORD *)(*(void *)(v7 + 56) + v19) = v26;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    unint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1835A09B4()
{
  uint64_t v1 = type metadata accessor for NWActorDiscoveryMechanism(0);
  uint64_t v28 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NWActorID();
  uint64_t v27 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64A70);
  unint64_t v24 = v0;
  uint64_t v7 = *v0;
  uint64_t v8 = sub_183D456EC();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v24 = v9;
    return result;
  }
  unint64_t result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    unint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 64);
  uint64_t v25 = v7 + 64;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v27 + 72) * v17;
    sub_1835A291C(*(void *)(v7 + 48) + v18, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NWActorID);
    unint64_t v19 = *(void *)(v28 + 72) * v17;
    sub_1835A291C(*(void *)(v7 + 56) + v19, (uint64_t)v3, type metadata accessor for NWActorDiscoveryMechanism);
    sub_1835A2984((uint64_t)v6, *(void *)(v9 + 48) + v18, (uint64_t (*)(void))type metadata accessor for NWActorID);
    unint64_t result = (void *)sub_1835A2984((uint64_t)v3, *(void *)(v9 + 56) + v19, type metadata accessor for NWActorDiscoveryMechanism);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1835A0CCC()
{
  uint64_t v1 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t v27 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A98);
  unint64_t v24 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = sub_183D456EC();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v24 = v6;
    return result;
  }
  unint64_t result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  uint64_t v25 = v4 + 64;
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_9:
    uint64_t v15 = 16 * v14;
    unint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    unint64_t v19 = *(void *)(v27 + 72) * v14;
    sub_1835A291C(*(void *)(v4 + 56) + v19, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    int64_t v20 = (void *)(*(void *)(v6 + 48) + v15);
    void *v20 = v17;
    v20[1] = v18;
    sub_1835A2984((uint64_t)v3, *(void *)(v6 + 56) + v19, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1835A0F50()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB266A00);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F619C0);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_183D456EC();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1835A11E4()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61D30);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_183D456EC();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1834F26A8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_1835249AC(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1835A13CC()
{
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A30);
  uint64_t v45 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_183D445FC();
  uint64_t v44 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64A38);
  unint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = sub_183D456EC();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v46 = v4;
  if (!v5)
  {
    unint64_t result = (void *)swift_release();
    uint64_t v31 = v46;
    uint64_t v30 = v32;
LABEL_25:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  unint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v46;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  uint64_t v43 = v3;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v45;
  uint64_t v14 = v44;
  uint64_t v37 = v45 + 16;
  uint64_t v38 = v44 + 16;
  uint64_t v35 = v45 + 32;
  uint64_t v36 = v44 + 32;
  unint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = v42;
  uint64_t v18 = v46;
  while (1)
  {
    if (v12)
    {
      unint64_t v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v47 = v9;
      unint64_t v20 = v19 | (v9 << 6);
      uint64_t v21 = v43;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v21 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    int64_t v28 = v9 + 1;
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    int64_t v47 = v28;
    unint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    unint64_t v22 = *(void *)(v14 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v21 + 48) + v22, v16);
    unint64_t v23 = *(void *)(v13 + 72) * v20;
    unint64_t v24 = *(void *)(v21 + 56) + v23;
    int64_t v25 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v41, v24, v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v18 + 48) + v22, v15, v16);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v18 + 56) + v23, v25, v17);
    int64_t v9 = v47;
  }
  int64_t v29 = v26 + 2;
  if (v29 >= v34)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v30 = v32;
    uint64_t v31 = v46;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1835A1778()
{
  uint64_t v1 = sub_183D445FC();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A58);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_183D456EC();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1835A1A10()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64A50);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_183D456EC();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1835A1BCC(uint64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_10;
  }
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if ((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result))
  {
    if (*(_DWORD *)(a4 + 36) == a2) {
      return sub_183D4541C();
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1835A1C54(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  sub_183D45AFC();
  sub_183D44C4C();
  uint64_t v5 = sub_183D45B4C();

  return a3(a1, a2, v5);
}

uint64_t _s7Network11NWTXTRecordV5EntryO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) == 1)
    {
      sub_1832E5D6C(*(void *)a1, v2);
      if (!v6) {
        goto LABEL_12;
      }
    }
    else
    {
      if (v3 | v2) {
        unint64_t v2 = 0xC000000000000000;
      }
      else {
        unint64_t v2 = 0xF000000000000000;
      }
      uint64_t v3 = 0;
      if (!*(unsigned char *)(a2 + 16)) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1834CD42C(v3, v2);
    unint64_t v2 = v7;
    if (!v6)
    {
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_1834CD42C(v5, v4);
      unint64_t v4 = v8;
      goto LABEL_17;
    }
  }
  if (v6 == 1)
  {
    sub_1832E5D6C(v5, v4);
  }
  else
  {
    if (v5 | v4) {
      unint64_t v4 = 0xC000000000000000;
    }
    else {
      unint64_t v4 = 0xF000000000000000;
    }
    uint64_t v5 = 0;
  }
LABEL_17:
  if (v2 >> 60 == 15)
  {
    if (v4 >> 60 == 15) {
      return 1;
    }
    goto LABEL_21;
  }
  if (v4 >> 60 == 15)
  {
LABEL_21:
    sub_1832E669C(v3, v2);
    sub_1832E669C(v5, v4);
    return 0;
  }
  sub_1832E5D6C(v3, v2);
  char v10 = sub_1834FFE28(v3, v2, v5, v4);
  sub_1832E669C(v5, v4);
  sub_1832E669C(v3, v2);
  sub_1832E669C(v3, v2);
  return v10 & 1;
}

BOOL sub_1835A1E58(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000) != 0)
  {
    uint64_t v1 = sub_18359979C();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v12;
    unint64_t v2 = v12;
    if ((v12 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    v17[0] = v1;
    v17[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = sub_183D44BAC() + 32;
    int v6 = swift_unknownObjectRetain();
    unint64_t v8 = (const uint8_t *)v17;
    unint64_t v7 = (const char *)v13;
    size_t v9 = HIBYTE(v2) & 0xF;
    goto LABEL_8;
  }
  if ((v2 & 0x2000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    uint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v3 = sub_183D4557C();
    uint64_t v4 = v16;
  }
  uint64_t v5 = sub_183D44BAC() + 32;
  int v6 = swift_unknownObjectRetain();
  unint64_t v7 = (const char *)v5;
  unint64_t v8 = (const uint8_t *)v3;
  size_t v9 = v4;
LABEL_8:
  BOOL v14 = nw_txt_record_set_key(v6, v7, v8, v9);
  swift_unknownObjectRelease();
  swift_release();
  return v14;
}

BOOL sub_1835A1F8C(const uint8_t *a1, uint64_t a2)
{
  if (a1)
  {
    size_t v3 = a2 - (void)a1;
    uint64_t v4 = sub_183D44BAC() + 32;
    uint64_t v5 = swift_unknownObjectRetain();
    int v6 = (const char *)v4;
    unint64_t v7 = a1;
    size_t v8 = v3;
  }
  else
  {
    uint64_t v9 = sub_183D44BAC() + 32;
    uint64_t v5 = swift_unknownObjectRetain();
    int v6 = (const char *)v9;
    unint64_t v7 = 0;
    size_t v8 = 0;
  }
  BOOL v10 = nw_txt_record_set_key(v5, v6, v7, v8);
  swift_unknownObjectRelease();
  swift_release();
  return v10;
}

uint64_t sub_1835A2044()
{
  sub_1832E5E9C(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t sub_1835A207C(unsigned char *a1, uint64_t a2)
{
  return sub_18359821C(a1, a2, v2);
}

unint64_t sub_1835A2088()
{
  unint64_t result = qword_1E8F649C8;
  if (!qword_1E8F649C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F649C8);
  }
  return result;
}

unint64_t sub_1835A20E0()
{
  unint64_t result = qword_1E8F649D0;
  if (!qword_1E8F649D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F649D0);
  }
  return result;
}

unint64_t sub_1835A2138()
{
  unint64_t result = qword_1E8F649D8;
  if (!qword_1E8F649D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F649D8);
  }
  return result;
}

unint64_t sub_1835A2190()
{
  unint64_t result = qword_1E8F649E0;
  if (!qword_1E8F649E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F649E0);
  }
  return result;
}

uint64_t sub_1835A21E4()
{
  return sub_1834FBEF8(&qword_1E8F649E8, &qword_1E8F649F0);
}

uint64_t sub_1835A2220()
{
  return sub_1834FBEF8(&qword_1E8F649F8, &qword_1E8F64A00);
}

uint64_t sub_1835A225C()
{
  return sub_1834FBEF8(&qword_1E8F64A08, &qword_1E8F64A10);
}

uint64_t sub_1835A22A0()
{
  return 0;
}

uint64_t destroy for NWTXTRecord()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void *_s7Network11NWTXTRecordVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for NWTXTRecord(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_OWORD *assignWithTake for NWTXTRecord(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NWTXTRecord()
{
  return &type metadata for NWTXTRecord;
}

uint64_t destroy for NWTXTRecord.Entry(uint64_t a1)
{
  return sub_1834CC974(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s7Network11NWTXTRecordV5EntryOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1834CC954(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NWTXTRecord.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1834CC954(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1834CC974(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NWTXTRecord.Entry(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1834CC974(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.Entry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1835A2564(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1835A257C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWTXTRecord.Entry()
{
  return &type metadata for NWTXTRecord.Entry;
}

uint64_t sub_1835A25A8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for NWTXTRecord.Index(uint64_t a1)
{
  return sub_1835A25C4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1835A25C4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7Network11NWTXTRecordV5IndexVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1835A25A8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NWTXTRecord.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1835A25A8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1835A25C4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NWTXTRecord.Index(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1835A25C4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWTXTRecord.Index()
{
  return &type metadata for NWTXTRecord.Index;
}

ValueMetadata *type metadata accessor for NWTXTRecord.CaseInsensitiveString()
{
  return &type metadata for NWTXTRecord.CaseInsensitiveString;
}

unint64_t sub_1835A276C()
{
  unint64_t result = qword_1E8F61A98;
  if (!qword_1E8F61A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1E8F61A98);
  }
  return result;
}

uint64_t sub_1835A27C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F64A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1835A2828(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  sub_1835A25A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  sub_1835A25A8(v2, v3, v4);
  return a1;
}

uint64_t sub_1835A287C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_183D445FC();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1835A28C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWActorID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1835A291C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1835A2984(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1835A29EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1835A2A68(uint64_t a1)
{
  unint64_t v2 = sub_1835A3378();

  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1835A2AA4(uint64_t a1)
{
  unint64_t v2 = sub_1835A3378();

  return MEMORY[0x1F40E6E10](a1, v2);
}

unint64_t static NWActorSystemError.errorDomain.getter()
{
  return 0xD000000000000012;
}

uint64_t NWActorSystemError.errorCode.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[2];
  uint64_t result = 1;
  switch(v2 >> 60)
  {
    case 1uLL:
      uint64_t result = 2;
      break;
    case 2uLL:
      uint64_t result = 3;
      break;
    case 3uLL:
      uint64_t result = 4;
      break;
    case 4uLL:
      uint64_t result = 5;
      break;
    case 5uLL:
      uint64_t result = 8;
      break;
    case 6uLL:
      uint64_t result = 10;
      break;
    case 7uLL:
      uint64_t result = 11;
      break;
    case 8uLL:
      uint64_t result = 15;
      break;
    case 9uLL:
      uint64_t result = 16;
      break;
    case 0xAuLL:
      uint64_t result = 17;
      break;
    case 0xBuLL:
      uint64_t v4 = v0[1];
      if (v2 == 0xB000000000000000 && (v4 | v1) == 0)
      {
        uint64_t result = 6;
      }
      else if (v2 == 0xB000000000000000 && v1 == 1 && v4 == 0)
      {
        uint64_t result = 7;
      }
      else if (v2 == 0xB000000000000000 && v1 == 2 && !v4)
      {
        uint64_t result = 9;
      }
      else if (v2 == 0xB000000000000000 && v1 == 3 && !v4)
      {
        uint64_t result = 12;
      }
      else
      {
        if (v4) {
          BOOL v8 = 0;
        }
        else {
          BOOL v8 = v1 == 4;
        }
        if (v8 && v2 == 0xB000000000000000) {
          uint64_t result = 13;
        }
        else {
          uint64_t result = 14;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1835A2C3C()
{
  unint64_t result = qword_1E8F64AA8;
  if (!qword_1E8F64AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64AA8);
  }
  return result;
}

unint64_t sub_1835A2C94()
{
  return 0xD000000000000012;
}

uint64_t sub_1835A2CB0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[2];
  uint64_t result = 1;
  switch(v2 >> 60)
  {
    case 1uLL:
      uint64_t result = 2;
      break;
    case 2uLL:
      uint64_t result = 3;
      break;
    case 3uLL:
      uint64_t result = 4;
      break;
    case 4uLL:
      uint64_t result = 5;
      break;
    case 5uLL:
      uint64_t result = 8;
      break;
    case 6uLL:
      uint64_t result = 10;
      break;
    case 7uLL:
      uint64_t result = 11;
      break;
    case 8uLL:
      uint64_t result = 15;
      break;
    case 9uLL:
      uint64_t result = 16;
      break;
    case 0xAuLL:
      uint64_t result = 17;
      break;
    case 0xBuLL:
      uint64_t v4 = v0[1];
      if (v2 == 0xB000000000000000 && (v4 | v1) == 0)
      {
        uint64_t result = 6;
      }
      else if (v2 == 0xB000000000000000 && v1 == 1 && v4 == 0)
      {
        uint64_t result = 7;
      }
      else if (v2 == 0xB000000000000000 && v1 == 2 && !v4)
      {
        uint64_t result = 9;
      }
      else if (v2 == 0xB000000000000000 && v1 == 3 && !v4)
      {
        uint64_t result = 12;
      }
      else
      {
        if (v4) {
          BOOL v8 = 0;
        }
        else {
          BOOL v8 = v1 == 4;
        }
        if (v8 && v2 == 0xB000000000000000) {
          uint64_t result = 13;
        }
        else {
          uint64_t result = 14;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ActorSystemError(void *a1, void *a2, uint64_t a3)
{
  return sub_1834A3F08(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1835A2E08);
}

id sub_1835A2E08(id result, unint64_t a2, unint64_t a3)
{
  switch(a3 >> 60)
  {
    case 2uLL:
      uint64_t v4 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_1832E5D6C((uint64_t)result, a2);
      uint64_t result = (id)v4;
      goto LABEL_6;
    case 3uLL:
LABEL_6:
      uint64_t result = result;
      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for ActorSystemError(uint64_t a1)
{
}

void sub_1835A2EB8(void *a1, unint64_t a2, unint64_t a3)
{
  switch(a3 >> 60)
  {
    case 2uLL:
      uint64_t v4 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_1832E5E9C((uint64_t)a1, a2);
      a1 = (void *)v4;
      goto LABEL_6;
    case 3uLL:
LABEL_6:

      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t *assignWithCopy for ActorSystemError(uint64_t *a1, void *a2, uint64_t a3)
{
  return sub_1835A31A8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1835A2E08, (void (*)(uint64_t, uint64_t, uint64_t))sub_1835A2EB8);
}

uint64_t *assignWithTake for ActorSystemError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1835A322C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1835A2EB8);
}

uint64_t getEnumTagSinglePayload for ActorSystemError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x76 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 118);
  }
  unsigned int v3 = ((*(void *)(a1 + 16) >> 60) & 0x8F | (16 * (*(void *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x75) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ActorSystemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x75)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 118;
    if (a3 >= 0x76) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x76) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1835A3044(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 60;
  if (v1 <= 9) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t sub_1835A3060(uint64_t result)
{
  *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1835A3070(uint64_t result, uint64_t a2)
{
  if (a2 < 0xA)
  {
    *(void *)(result + 16) = *(void *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  }
  else
  {
    *(void *)uint64_t result = (a2 - 10);
    *(_OWORD *)(result + 8) = xmmword_183D5AA90;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActorSystemError()
{
  return &type metadata for ActorSystemError;
}

void *initializeBufferWithCopyOfBuffer for NWActorSystemError(void *a1, void *a2, uint64_t a3)
{
  return sub_1834A3F08(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1835A30C8);
}

id sub_1835A30C8(id result, unint64_t a2, unint64_t a3)
{
  switch(a3 >> 60)
  {
    case 2uLL:
      uint64_t v4 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_1832E5D6C((uint64_t)result, a2);
      uint64_t result = (id)v4;
      goto LABEL_6;
    case 3uLL:
LABEL_6:
      uint64_t result = result;
      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for NWActorSystemError(uint64_t a1)
{
}

uint64_t *assignWithCopy for NWActorSystemError(uint64_t *a1, void *a2, uint64_t a3)
{
  return sub_1835A31A8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1835A30C8, (void (*)(uint64_t, uint64_t, uint64_t))sub_183553494);
}

uint64_t *sub_1835A31A8(uint64_t *a1, void *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for NWActorSystemError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1835A322C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_183553494);
}

uint64_t *sub_1835A322C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  a4(v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x75 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 117);
  }
  unsigned int v3 = ((*(void *)(a1 + 16) >> 60) & 0x8F | (16 * (*(void *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x74) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NWActorSystemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x74)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 117;
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1835A331C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 60;
  if (v1 <= 0xA) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 11);
  }
}

uint64_t sub_1835A3338(uint64_t result, uint64_t a2)
{
  if (a2 < 0xB)
  {
    *(void *)(result + 16) = *(void *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  }
  else
  {
    *(void *)uint64_t result = (a2 - 11);
    *(_OWORD *)(result + 8) = xmmword_183D5AAA0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWActorSystemError()
{
  return &type metadata for NWActorSystemError;
}

unint64_t sub_1835A3378()
{
  unint64_t result = qword_1E8F64AB0;
  if (!qword_1E8F64AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64AB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ISOLatin1String()
{
  return &type metadata for ISOLatin1String;
}

uint64_t sub_1835A33E0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((sub_1834BF534(a3, a4) & 1) == 0) {
    return sub_1835A420C(a1, a2, a3, a4, a5, a6);
  }
  swift_bridgeObjectRetain();
  sub_1835A3494((uint64_t (*)(void *, uint64_t))a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835A3494(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v10;
    return a1(v5, v6);
  }
  uint64_t v3 = sub_18359979C();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = (void *)sub_183D4557C();
  }
  return a1(v5, v6);
}

uint64_t sub_1835A355C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = sub_183D454BC();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v15 - v7;
  uint64_t v9 = sub_183D4564C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v15 - v11;
  MEMORY[0x185314190](a2, v4);
  swift_getWitnessTable();
  sub_183D4574C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  swift_getWitnessTable();
  sub_183D44C0C();
  uint64_t v13 = v15[0];
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

unsigned __int8 *sub_1835A3780@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1835A378C(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v6 = 11;
  }
  uint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v6 | (v5 << 16), a1, a2);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v8 = isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v10 = sub_1835A4468((uint64_t)v13 - v9, v8, a1, v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = swift_slowAlloc();
    unint64_t v3 = sub_1835A4468(v11, v8, a1, v3);
    MEMORY[0x185318E50](v11, -1, -1);
  }
  return v3;
}

uint64_t sub_1835A3910@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  BOOL v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v17 = a1;
  }
  uint64_t v18 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v18 = 11;
  }
  unint64_t v19 = sub_1835945A4(0xFuLL, v18 | (v17 << 16), a1, a2);
  if ((v19 & 0x8000000000000000) != 0) {
    __break(1u);
  }
  int64_t v20 = v19;
  sub_1834BFB88(a3);
  sub_1834BFB88(a4);
  sub_1834BFB88(a3);
  uint64_t isStackAllocationSafe = sub_1834BFB88(a4);
  if (v20 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    int64_t v28 = v16;
    uint64_t v29 = a5;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v23 = (char *)&v27 - v22;
    sub_1834BFB88(a3);
    sub_1834BFB88(a4);
    sub_1835A466C(v23, (char *)v20, a1, a2, a3, a4, (uint64_t)v14);
    if (v5)
    {
      swift_willThrow();
    }
    else
    {
      uint64_t v24 = (uint64_t)v28;
      sub_183594E58((uint64_t)v14, (uint64_t)v28);
      sub_183594E58(v24, v29);
    }
  }
  else
  {
    int64_t v25 = (char *)swift_slowAlloc();
    sub_1834BFB88(a3);
    sub_1834BFB88(a4);
    sub_1835A466C(v25, (char *)v20, a1, a2, a3, a4, a5);
    MEMORY[0x185318E50](v25, -1, -1);
  }
  sub_18312A0D8(a3);
  sub_18312A0D8(a4);
  sub_18312A0D8(a3);
  sub_18312A0D8(a4);
  sub_18312A0D8(a3);
  return sub_18312A0D8(a4);
}

uint64_t sub_1835A3BB0@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a5;
  int64_t v28 = a6;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F40);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v19 = a1;
  }
  uint64_t v20 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v20 = 11;
  }
  uint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v20 | (v19 << 16), a1, a2);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v22 = (char *)isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    sub_1835A4960((char *)&v26 - v23, v22, a1, a2, a3, a4, v27, v28, (uint64_t)v16);
    if (v7)
    {
      return swift_willThrow();
    }
    else
    {
      sub_183594E58((uint64_t)v16, (uint64_t)v18);
      return sub_183594E58((uint64_t)v18, a7);
    }
  }
  else
  {
    int64_t v25 = (char *)swift_slowAlloc();
    sub_1835A4960(v25, v22, a1, a2, a3, a4, v27, v28, a7);
    return MEMORY[0x185318E50](v25, -1, -1);
  }
}

char *sub_1835A3DE0(unint64_t a1, unint64_t a2)
{
  return sub_1835A3E2C(a1, a2);
}

char *sub_1835A3E2C(unint64_t a1, unint64_t a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v6 = 11;
  }
  uint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v6 | (v5 << 16), a1, a2);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v8 = (char *)isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t result = sub_1835A4B70((char *)v12 - v9, v8, a1, a2);
    if (v2) {
      return (char *)swift_willThrow();
    }
  }
  else
  {
    uint64_t v11 = (char *)swift_slowAlloc();
    sub_1835A4B70(v11, v8, a1, a2);
    return (char *)MEMORY[0x185318E50](v11, -1, -1);
  }
  return result;
}

uint64_t sub_1835A3FAC@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *(*a6)@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  v26[1] = a8;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v17 = a1;
  }
  uint64_t v18 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v18 = 11;
  }
  unint64_t v19 = sub_1835945A4(0xFuLL, v18 | (v17 << 16), a1, a2);
  if ((v19 & 0x8000000000000000) != 0) {
    __break(1u);
  }
  uint64_t v20 = v19;
  uint64_t v27 = a3;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v20 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v23 = (char *)v26 - v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1835A4D6C(v23, v20, a1, a2, v27, a4, a5, a6, a7);
    if (v9)
    {
      swift_willThrow();
      swift_bridgeObjectRelease_n();
LABEL_12:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v24 = (char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1835A4D6C(v24, v20, a1, a2, v27, a4, a5, a6, a7);
    MEMORY[0x185318E50](v24, -1, -1);
    swift_bridgeObjectRelease_n();
    if (v8) {
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1835A420C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v28[1] = a2;
  v28[3] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)v28 - v17;
  uint64_t v19 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v19 = v15;
  }
  uint64_t v20 = 7;
  if (((v16 >> 60) & ((v15 & 0x800000000000000) == 0)) != 0) {
    uint64_t v20 = 11;
  }
  uint64_t isStackAllocationSafe = sub_1835945A4(0xFuLL, v20 | (v19 << 16), v15, v16);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v22 = isStackAllocationSafe;
  if (isStackAllocationSafe <= 1024
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    v28[0] = a6;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v24 = v28[2];
    sub_1835A4FA0((uint64_t)v28 - v23, v22, a3, a4, a1);
    if (v24)
    {
      return swift_willThrow();
    }
    else
    {
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v26(v18, v14, a5);
      return ((uint64_t (*)(void, char *, uint64_t))v26)(v28[0], v18, a5);
    }
  }
  else
  {
    uint64_t v27 = swift_slowAlloc();
    sub_1835A4FA0(v27, v22, a3, a4, a1);
    return MEMORY[0x185318E50](v27, -1, -1);
  }
}

uint64_t sub_1835A4468(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v13) = sub_183D4546C();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v19[0] = a3;
          v19[1] = v10;
          int v13 = *((unsigned __int8 *)v19 + v9);
          if (*((char *)v19 + v9) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v14 = (char *)v19 + v9;
LABEL_21:
                LOBYTE(v13) = v14[1] & 0x3F | ((v13 & 0x1F) << 6);
                uint64_t v15 = 2;
                break;
              case 0x1Bu:
                unint64_t v16 = (char *)v19 + v9;
LABEL_25:
                LOBYTE(v13) = v16[2] & 0x3F | ((v16[1] & 0x3F) << 6);
                uint64_t v15 = 3;
                break;
              case 0x1Cu:
                uint64_t v17 = (char *)v19 + v9;
LABEL_27:
                LOBYTE(v13) = v17[3] & 0x3F | ((v17[2] & 0x3F) << 6);
                uint64_t v15 = 4;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v12 = v11;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v12 = sub_183D4557C();
          }
          int v13 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v14 = (char *)(v9 + v12);
                goto LABEL_21;
              case 0x1Bu:
                unint64_t v16 = (char *)(v9 + v12);
                goto LABEL_25;
              case 0x1Cu:
                uint64_t v17 = (char *)(v9 + v12);
                goto LABEL_27;
              default:
                break;
            }
          }
        }
LABEL_15:
        uint64_t v15 = 1;
      }
LABEL_16:
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        JUMPOUT(0x1835A464CLL);
      }
      v9 += v15;
      *(unsigned char *)(a1 + v8++) = v13;
    }
    while (v9 < v5);
  }
  return sub_183D44C1C();
}

uint64_t sub_1835A466C@<X0>(char *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v29 = a6;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    unint64_t v9 = a4;
    unint64_t v10 = a3;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v14 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while (1)
    {
      if ((v9 & 0x1000000000000000) != 0)
      {
        LOBYTE(v16) = sub_183D4546C();
        goto LABEL_16;
      }
      if ((v9 & 0x2000000000000000) == 0) {
        break;
      }
      unint64_t v27 = v10;
      unint64_t v28 = v13;
      int v16 = *((unsigned __int8 *)&v27 + v12);
      if ((*((char *)&v27 + v12) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      switch(__clz(v16 ^ 0xFF))
      {
        case 0x1Au:
          uint64_t v17 = (char *)&v27 + v12;
LABEL_21:
          LOBYTE(v16) = v17[1] & 0x3F | ((v16 & 0x1F) << 6);
          uint64_t v18 = 2;
          break;
        case 0x1Bu:
          uint64_t v19 = (char *)&v27 + v12;
LABEL_24:
          LOBYTE(v16) = v19[2] & 0x3F | ((v19[1] & 0x3F) << 6);
          uint64_t v18 = 3;
          break;
        case 0x1Cu:
          uint64_t v20 = (char *)&v27 + v12;
LABEL_27:
          LOBYTE(v16) = v20[3] & 0x3F | ((v20[2] & 0x3F) << 6);
          uint64_t v18 = 4;
          break;
        default:
          goto LABEL_15;
      }
LABEL_16:
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_32:
        uint64_t v21 = v29;
        sub_1834BFB88(v29);
        sub_183129E54(v10, v9, v21, a1, a2, a7);
        goto LABEL_33;
      }
      v12 += v18;
      a1[v11++] = v16;
      if (v12 >= v8) {
        goto LABEL_28;
      }
    }
    uint64_t v15 = v14;
    if ((v10 & 0x1000000000000000) == 0) {
      uint64_t v15 = sub_183D4557C();
    }
    int v16 = *(unsigned __int8 *)(v15 + v12);
    if (*(char *)(v15 + v12) < 0)
    {
      switch(__clz(v16 ^ 0xFF))
      {
        case 0x1Au:
          uint64_t v17 = (char *)(v12 + v15);
          goto LABEL_21;
        case 0x1Bu:
          uint64_t v19 = (char *)(v12 + v15);
          goto LABEL_24;
        case 0x1Cu:
          uint64_t v20 = (char *)(v12 + v15);
          goto LABEL_27;
        default:
          break;
      }
    }
LABEL_15:
    uint64_t v18 = 1;
    goto LABEL_16;
  }
LABEL_28:
  uint64_t v14 = a5;
  unint64_t v10 = *(void *)(a5 + 40);
  unint64_t v9 = *(void *)(a5 + 48);
  if ((sub_1834BF534(v10, v9) & 1) == 0) {
    goto LABEL_32;
  }
  unint64_t v27 = v10;
  unint64_t v28 = v9;
  uint64_t v21 = v29;
  sub_1834BFB88(v29);
  sub_1834BFB88(v21);
  sub_1834BFB88(v21);
  swift_bridgeObjectRetain();
  sub_1834BF90C((uint64_t *)&v27, v21, a1, a2, a7);
  if (v23)
  {
    sub_18312A0D8(v21);
    sub_18312A0D8(v21);
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1835A4920);
  }
  swift_bridgeObjectRelease();
  sub_18312A0D8(v21);
  sub_18312A0D8(v21);
LABEL_33:
  sub_18312A0D8(v14);
  return sub_18312A0D8(v21);
}

uint64_t sub_1835A4960@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v18) = sub_183D4546C();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v30[0] = a3;
          v30[1] = v15;
          int v18 = *((unsigned __int8 *)v30 + v14);
          if (*((char *)v30 + v14) < 0)
          {
            switch(__clz(v18 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v19 = (char *)v30 + v14;
LABEL_21:
                LOBYTE(v18) = v19[1] & 0x3F | ((v18 & 0x1F) << 6);
                uint64_t v20 = 2;
                break;
              case 0x1Bu:
                uint64_t v21 = (char *)v30 + v14;
LABEL_25:
                LOBYTE(v18) = v21[2] & 0x3F | ((v21[1] & 0x3F) << 6);
                uint64_t v20 = 3;
                break;
              case 0x1Cu:
                uint64_t v22 = (char *)v30 + v14;
LABEL_27:
                LOBYTE(v18) = v22[3] & 0x3F | ((v22[2] & 0x3F) << 6);
                uint64_t v20 = 4;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v17 = v16;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v17 = sub_183D4557C();
          }
          int v18 = *(unsigned __int8 *)(v17 + v14);
          if (*(char *)(v17 + v14) < 0)
          {
            switch(__clz(v18 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v19 = (char *)(v14 + v17);
                goto LABEL_21;
              case 0x1Bu:
                uint64_t v21 = (char *)(v14 + v17);
                goto LABEL_25;
              case 0x1Cu:
                uint64_t v22 = (char *)(v14 + v17);
                goto LABEL_27;
              default:
                break;
            }
          }
        }
LABEL_15:
        uint64_t v20 = 1;
      }
LABEL_16:
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        JUMPOUT(0x1835A4B50);
      }
      v14 += v20;
      a1[v13++] = v18;
    }
    while (v14 < v10);
  }
  return sub_1834BEB10(a5, a6, a7, a8, a1, a2, a9);
}

char *sub_1835A4B70(char *a1, char *a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v13) = sub_183D4546C();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v20[0] = a3;
          v20[1] = v10;
          int v13 = *((unsigned __int8 *)v20 + v9);
          if (*((char *)v20 + v9) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v14 = (char *)v20 + v9;
LABEL_21:
                LOBYTE(v13) = v14[1] & 0x3F | ((v13 & 0x1F) << 6);
                uint64_t v15 = 2;
                break;
              case 0x1Bu:
                uint64_t v16 = (char *)v20 + v9;
LABEL_25:
                LOBYTE(v13) = v16[2] & 0x3F | ((v16[1] & 0x3F) << 6);
                uint64_t v15 = 3;
                break;
              case 0x1Cu:
                uint64_t v17 = (char *)v20 + v9;
LABEL_27:
                LOBYTE(v13) = v17[3] & 0x3F | ((v17[2] & 0x3F) << 6);
                uint64_t v15 = 4;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v12 = v11;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v12 = sub_183D4557C();
          }
          int v13 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v14 = (char *)(v9 + v12);
                goto LABEL_21;
              case 0x1Bu:
                uint64_t v16 = (char *)(v9 + v12);
                goto LABEL_25;
              case 0x1Cu:
                uint64_t v17 = (char *)(v9 + v12);
                goto LABEL_27;
              default:
                break;
            }
          }
        }
LABEL_15:
        uint64_t v15 = 1;
      }
LABEL_16:
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        JUMPOUT(0x1835A4D4CLL);
      }
      v9 += v15;
      a1[v8++] = v13;
    }
    while (v9 < v5);
  }
  return sub_183559FE4(a1, a2);
}

uint64_t sub_1835A4D6C(char *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, char *a6, uint64_t a7, unsigned __int8 *(*a8)@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>), uint64_t a9)
{
  uint64_t v29 = a7;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v18) = sub_183D4546C();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v28[0] = a3;
          v28[1] = v15;
          int v18 = *((unsigned __int8 *)v28 + v14);
          if (*((char *)v28 + v14) < 0)
          {
            switch(__clz(v18 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v19 = (char *)v28 + v14;
LABEL_21:
                LOBYTE(v18) = v19[1] & 0x3F | ((v18 & 0x1F) << 6);
                uint64_t v20 = 2;
                break;
              case 0x1Bu:
                uint64_t v21 = (char *)v28 + v14;
LABEL_25:
                LOBYTE(v18) = v21[2] & 0x3F | ((v21[1] & 0x3F) << 6);
                uint64_t v20 = 3;
                break;
              case 0x1Cu:
                uint64_t v22 = (char *)v28 + v14;
LABEL_27:
                LOBYTE(v18) = v22[3] & 0x3F | ((v22[2] & 0x3F) << 6);
                uint64_t v20 = 4;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v17 = v16;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v17 = sub_183D4557C();
          }
          int v18 = *(unsigned __int8 *)(v17 + v14);
          if (*(char *)(v17 + v14) < 0)
          {
            switch(__clz(v18 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v19 = (char *)(v14 + v17);
                goto LABEL_21;
              case 0x1Bu:
                uint64_t v21 = (char *)(v14 + v17);
                goto LABEL_25;
              case 0x1Cu:
                uint64_t v22 = (char *)(v14 + v17);
                goto LABEL_27;
              default:
                break;
            }
          }
        }
LABEL_15:
        uint64_t v20 = 1;
      }
LABEL_16:
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        JUMPOUT(0x1835A4F80);
      }
      v14 += v20;
      a1[v13++] = v18;
    }
    while (v14 < v10);
  }
  sub_1835393E0(a1, a2, a5, a6, v29, a8, a9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835A4FA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v13) = sub_183D4546C();
        if (__OFADD__(v9, 1)) {
          goto LABEL_35;
        }
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22[0] = a3;
          v22[1] = v11;
          int v13 = *((unsigned __int8 *)v22 + v10);
          if (*((char *)v22 + v10) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v16 = (char *)v22 + v10;
LABEL_21:
                LOBYTE(v13) = v16[1] & 0x3F | ((v13 & 0x1F) << 6);
                uint64_t v14 = 2;
                if (!__OFADD__(v9, 1)) {
                  goto LABEL_7;
                }
                goto LABEL_35;
              case 0x1Bu:
                uint64_t v17 = (char *)v22 + v10;
LABEL_27:
                LOBYTE(v13) = v17[2] & 0x3F | ((v17[1] & 0x3F) << 6);
                uint64_t v14 = 3;
                if (!__OFADD__(v9, 1)) {
                  goto LABEL_7;
                }
                goto LABEL_35;
              case 0x1Cu:
                int v18 = (char *)v22 + v10;
LABEL_31:
                LOBYTE(v13) = v18[3] & 0x3F | ((v18[2] & 0x3F) << 6);
                uint64_t v14 = 4;
                if (!__OFADD__(v9, 1)) {
                  goto LABEL_7;
                }
                goto LABEL_35;
              default:
                break;
            }
          }
        }
        else
        {
          uint64_t v15 = v12;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v15 = sub_183D4557C();
          }
          int v13 = *(unsigned __int8 *)(v15 + v10);
          if (*(char *)(v15 + v10) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v16 = (char *)(v10 + v15);
                goto LABEL_21;
              case 0x1Bu:
                uint64_t v17 = (char *)(v10 + v15);
                goto LABEL_27;
              case 0x1Cu:
                int v18 = (char *)(v10 + v15);
                goto LABEL_31;
              default:
                break;
            }
          }
        }
        uint64_t v14 = 1;
        if (__OFADD__(v9, 1))
        {
LABEL_35:
          __break(1u);
          JUMPOUT(0x1835A51ACLL);
        }
      }
LABEL_7:
      v10 += v14;
      *(unsigned char *)(a1 + v9++) = v13;
    }
    while (v10 < v6);
  }
  return a5(a1, a2);
}

uint64_t sub_1835A51CC(unsigned __int8 *a1)
{
  return (*a1 >> 7) ^ 1u;
}

uint64_t sub_1835A51DC()
{
  return sub_183D45B4C();
}

uint64_t sub_1835A5228()
{
  return sub_183D44C4C();
}

uint64_t sub_1835A5230()
{
  return sub_183D45B4C();
}

uint64_t sub_1835A5278(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_183D4592C();
  }
}

unint64_t sub_1835A52AC()
{
  unint64_t result = qword_1E8F64AB8;
  if (!qword_1E8F64AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64AB8);
  }
  return result;
}

uint64_t sub_1835A5300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1853141D0](a1, a2, AssociatedTypeWitness);
  uint64_t result = sub_183D44C1C();
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_1835A5378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *))(v6 + 16))(&v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v7 = sub_183D44D6C();
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v7 < 0 || (v7 & 0x4000000000000000) != 0)) {
    goto LABEL_12;
  }
  _swift_isClassOrObjCExistentialType();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v7 < 0 || (v7 & 0x4000000000000000) != 0))
  {
    swift_unknownObjectRetain();
    sub_183D456DC();
    swift_unknownObjectRelease();
  }
  else
  {
    _swift_isClassOrObjCExistentialType();
  }
  sub_183D44ADC();
  if ((unsigned __int128)(v10 * (__int128)*(uint64_t *)(v9 + 72)) >> 64 != (v10 * *(void *)(v9 + 72)) >> 63)
  {
    __break(1u);
LABEL_12:
    uint64_t v16 = v7;
    sub_183D454FC();
    swift_retain();
    swift_getWitnessTable();
    sub_183D455DC();
    uint64_t v11 = (uint64_t)sub_1835A568C((void *(*)(uint64_t *__return_ptr, uint64_t))sub_1835A5E08);
    swift_release();
    goto LABEL_10;
  }
  uint64_t v11 = sub_183D44C1C();
LABEL_10:
  swift_release();
  return v11;
}

uint64_t sub_1835A560C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1853141D0](a1, a2, AssociatedTypeWitness);
  uint64_t result = sub_183D44C1C();
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v9 & 1;
  return result;
}

void *sub_1835A568C(void *(*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3 = sub_183D44ADC();
  uint64_t result = a1(&v5, v3);
  if (!v1) {
    return (void *)v5;
  }
  return result;
}

uint64_t sub_1835A572C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a2;
  v28[1] = a7;
  void v28[2] = a6;
  uint64_t v32 = a5;
  uint64_t v10 = sub_183D44B6C();
  MEMORY[0x1F4188790](v10 - 8);
  v28[3] = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        LOBYTE(v16) = sub_183D4546C();
        goto LABEL_16;
      }
      if ((a4 & 0x2000000000000000) == 0) {
        break;
      }
      uint64_t v30 = a3;
      uint64_t v31 = a4 & 0xFFFFFFFFFFFFFFLL;
      int v16 = *((unsigned __int8 *)&v30 + v14);
      if ((*((char *)&v30 + v14) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      switch(__clz(v16 ^ 0xFF))
      {
        case 0x1Au:
          uint64_t v17 = (char *)&v30 + v14;
LABEL_21:
          LOBYTE(v16) = v17[1] & 0x3F | ((v16 & 0x1F) << 6);
          uint64_t v18 = 2;
          break;
        case 0x1Bu:
          uint64_t v19 = (char *)&v30 + v14;
LABEL_25:
          LOBYTE(v16) = v19[2] & 0x3F | ((v19[1] & 0x3F) << 6);
          uint64_t v18 = 3;
          break;
        case 0x1Cu:
          uint64_t v20 = (char *)&v30 + v14;
LABEL_27:
          LOBYTE(v16) = v20[3] & 0x3F | ((v20[2] & 0x3F) << 6);
          uint64_t v18 = 4;
          break;
        default:
          goto LABEL_15;
      }
LABEL_16:
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_35;
      }
      v14 += v18;
      *(unsigned char *)(a1 + v13++) = v16;
      if (v14 >= v12) {
        goto LABEL_28;
      }
    }
    uint64_t v15 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a3 & 0x1000000000000000) == 0) {
      uint64_t v15 = sub_183D4557C();
    }
    int v16 = *(unsigned __int8 *)(v15 + v14);
    if (*(char *)(v15 + v14) < 0)
    {
      switch(__clz(v16 ^ 0xFF))
      {
        case 0x1Au:
          uint64_t v17 = (char *)(v14 + v15);
          goto LABEL_21;
        case 0x1Bu:
          uint64_t v19 = (char *)(v14 + v15);
          goto LABEL_25;
        case 0x1Cu:
          uint64_t v20 = (char *)(v14 + v15);
          goto LABEL_27;
        default:
          break;
      }
    }
LABEL_15:
    uint64_t v18 = 1;
    goto LABEL_16;
  }
LABEL_28:
  uint64_t v21 = *(void *)(v32 + 16);
  if (!v21) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  uint64_t v23 = v29;
  while (1)
  {
    uint64_t v30 = a1;
    uint64_t v31 = v23;
    sub_183D44B5C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61CD0);
    sub_1835A5CEC();
    sub_183D44B2C();
    if (v24) {
      break;
    }
    if (v21 == ++v22)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
LABEL_35:
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)sub_183D44AEC();
  unint64_t v27 = (void *)sub_183D44AEC();
  swift_bridgeObjectRelease();
  _CFHTTPMessageAddHeaderFieldValue();

  return 1;
}

uint64_t sub_1835A5A40(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v28[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v12 = a1;
  }
  uint64_t v13 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v13 = 11;
  }
  unint64_t v14 = sub_1835945A4(0xFuLL, v13 | (v12 << 16), a1, a2);
  if ((v14 & 0x8000000000000000) != 0) {
    __break(1u);
  }
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  id v16 = a4;
  sub_1834BFB88(a5);
  swift_bridgeObjectRetain();
  id v17 = v16;
  uint64_t isStackAllocationSafe = sub_1834BFB88(a5);
  v28[0] = v17;
  if (v15 >= 1025)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v23 = v17;
      uint64_t v24 = swift_slowAlloc();
      swift_bridgeObjectRetain();
      id v25 = v23;
      sub_1834BFB88(a5);
      char v22 = sub_1835A572C(v24, v15, a1, a2, a3, (uint64_t)v25, a5);
      sub_18312A0D8(a5);
      swift_bridgeObjectRelease();

      MEMORY[0x185318E50](v24, -1, -1);
      swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_12;
      }
LABEL_13:
      id v26 = v28[0];
      sub_18312A0D8(a5);

      swift_bridgeObjectRelease();
      sub_18312A0D8(a5);
      return v22 & 1;
    }
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v20 = (char *)v28 - v19;
  swift_bridgeObjectRetain();
  id v21 = v17;
  sub_1834BFB88(a5);
  char v22 = sub_1835A572C((uint64_t)v20, v15, a1, a2, a3, (uint64_t)v21, a5);
  sub_18312A0D8(a5);
  swift_bridgeObjectRelease();

  if (!v5)
  {

    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_willThrow();

  swift_bridgeObjectRelease();
LABEL_12:
  sub_18312A0D8(a5);

  swift_bridgeObjectRelease();
  sub_18312A0D8(a5);
  return v22 & 1;
}

unint64_t sub_1835A5CEC()
{
  unint64_t result = qword_1E8F61CD8;
  if (!qword_1E8F61CD8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F61CD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F61CD8);
  }
  return result;
}

uint64_t sub_1835A5D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1835A5300(a1, a2, a3);
}

unint64_t sub_1835A5DB4()
{
  unint64_t result = qword_1E8F64AC0;
  if (!qword_1E8F64AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64AC0);
  }
  return result;
}

uint64_t sub_1835A5E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1835A560C(a1, a2, a3);
}

uint64_t NWParameters.nw.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1834A4678(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t NWParameters.copy()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835ACA74(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t NWParameters.defaultProtocolStack.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1834A471C(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t static NWParameters.applicationService.getter()
{
  application_service = nw_parameters_create_application_service();
  nw_parameters_t v1 = nw_parameters_copy(application_service);
  swift_unknownObjectRelease();
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWParameters.__allocating_init(_:)(NSObject *a1)
{
  nw_parameters_t v1 = nw_parameters_copy(a1);
  swift_unknownObjectRelease();
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWParameters.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t NWParameters.debugDescription.getter()
{
  nw_parameters_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (id *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A60F0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A60F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1835A610C(void **a1)
{
}

void sub_1835A6140(void **a1)
{
}

uint64_t NWParameters.__allocating_init(quicStream:)()
{
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 16) = v2;
  *(_DWORD *)(v2 + 24) = 0;
  uint64_t v3 = (os_unfair_lock_s *)(v2 + 24);
  *(void *)(v2 + 16) = v1;
  uint64_t v4 = (void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  sub_1834A471C(v4, &v9);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = *(void *)(v9 + 16);
  uint64_t v6 = (nw_protocol_stack_t *)(v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1834A492C(v6);
  os_unfair_lock_unlock(v7);
  swift_release();
  swift_release_n();
  return v0;
}

uint64_t NWParameters.init()()
{
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

NSObject *static NWParameters.applicationServiceQUIC(identity:)(uint64_t a1)
{
  if (a1)
  {
    nw_parameters_t v1 = (void *)swift_unknownObjectRetain();
    unint64_t result = nw_parameters_create_application_service_quic_using_identity(v1);
    if (result)
    {
      nw_parameters_t v3 = nw_parameters_copy(result);
      swift_unknownObjectRelease();
      uint64_t v4 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
      uint64_t v5 = swift_allocObject();
      *(_DWORD *)(v5 + 24) = 0;
      *(void *)(v5 + 16) = v3;
      swift_unknownObjectRelease();
LABEL_6:
      *(void *)(v4 + 16) = v5;
      return v4;
    }
    __break(1u);
  }
  else
  {
    unint64_t result = nw_parameters_create_application_service_quic();
    if (result)
    {
      nw_parameters_t v6 = nw_parameters_copy(result);
      swift_unknownObjectRelease();
      uint64_t v4 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
      uint64_t v5 = swift_allocObject();
      *(_DWORD *)(v5 + 24) = 0;
      *(void *)(v5 + 16) = v6;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t static NWParameters.quic(alpn:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(v0);

  return _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0();
}

uint64_t static NWParameters.migratingPeerToPeerQuic(quic:)()
{
  swift_retain();
  uint64_t v0 = _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0();
  nw_parameters_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  nw_parameters_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1834A4678(v2, &v5);
  os_unfair_lock_unlock(v3);
  nw_parameters_set_migrating_peer_to_peer(v5);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t static NWParameters.quicDatagram(alpn:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(v0);
  nw_quic_set_stream_is_datagram(*(nw_protocol_options_t *)(v1 + 16), 1);

  return _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0();
}

uint64_t static NWParameters.tls.getter()
{
  return sub_1835A6518((void (*)(void))type metadata accessor for NWProtocolTCP.Options, (uint64_t (*)(void))nw_tcp_create_options, (uint64_t (*)(uint64_t, uint64_t))_s7Network12NWParametersC3tls3tcpAcA13NWProtocolTLSC7OptionsCSg_AA0E3TCPCAHCtcfC_0);
}

uint64_t static NWParameters.dtls.getter()
{
  return sub_1835A6518((void (*)(void))type metadata accessor for NWProtocolUDP.Options, (uint64_t (*)(void))nw_udp_create_options, (uint64_t (*)(uint64_t, uint64_t))_s7Network12NWParametersC4dtls3udpAcA13NWProtocolTLSC7OptionsCSg_AA0E3UDPCAHCtcfC_0);
}

uint64_t sub_1835A6518(void (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  type metadata accessor for NWProtocolTLS.Options();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = nw_tls_create_options();
  a1(0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a2();
  return a3(v6, inited);
}

uint64_t static NWParameters.tcp.getter()
{
  return sub_1835A6624((void (*)(void))type metadata accessor for NWProtocolTCP.Options, (uint64_t (*)(void))nw_tcp_create_options, (uint64_t (*)(void, uint64_t))_s7Network12NWParametersC3tls3tcpAcA13NWProtocolTLSC7OptionsCSg_AA0E3TCPCAHCtcfC_0);
}

uint64_t static NWParameters.udp.getter()
{
  return sub_1835A6624((void (*)(void))type metadata accessor for NWProtocolUDP.Options, (uint64_t (*)(void))nw_udp_create_options, (uint64_t (*)(void, uint64_t))_s7Network12NWParametersC4dtls3udpAcA13NWProtocolTLSC7OptionsCSg_AA0E3UDPCAHCtcfC_0);
}

uint64_t sub_1835A6624(void (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(void, uint64_t))
{
  a1(0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a2();
  return a3(0, inited);
}

void NWParameters.requiredInterface.getter(uint64_t *a1@<X8>)
{
  nw_parameters_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A689C(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835A66FC(uint64_t a1@<X0>, void *a2@<X8>)
{
  nw_parameters_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A689C(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1835A6768(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a2 + 16);
  uint64_t v4 = (NSObject **)(v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + 24);
  sub_18315E9D4(*a1);
  os_unfair_lock_lock(v5);
  sub_1835B2230(v4);
  os_unfair_lock_unlock(v5);
  return sub_18315E51C(v2);
}

uint64_t NWParameters.requiredInterface.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (NSObject **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AFF5C(v4);
  os_unfair_lock_unlock(v5);
  return sub_18315E51C(v2);
}

uint64_t sub_1835A6844(NSObject **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 >= 2)
  {
    uint64_t v3 = a2;
    swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  nw_parameters_require_interface(v2, v3);
  return swift_unknownObjectRelease();
}

nw_interface_t sub_1835A689C@<X0>(nw_parameters_t *a1@<X0>, uint64_t *a2@<X8>)
{
  nw_interface_t result = nw_parameters_copy_required_interface(*a1);
  if (result) {
    uint64_t v4 = (uint64_t)result;
  }
  else {
    uint64_t v4 = 1;
  }
  *a2 = v4;
  return result;
}

uint64_t (*NWParameters.requiredInterface.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A689C(v4, a1);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  return sub_1835A695C;
}

uint64_t sub_1835A695C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)a1[1];
  uint64_t v4 = v2 + 6;
  uint64_t v5 = (NSObject **)&v2[4];
  if (a2)
  {
    sub_18315E9D4(v3);
    os_unfair_lock_lock(v4);
    sub_1835B2230(v5);
    os_unfair_lock_unlock(v4);
    sub_18315E51C(v3);
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1835B2230(v5);
    os_unfair_lock_unlock(v4);
  }
  return sub_18315E51C(v3);
}

void NWParameters.requiredInterfaceType.getter(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A6BAC(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835A6A7C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A6BAC(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A6AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  uint64_t v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B1FF4(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.requiredInterfaceType.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AFF78(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835A6BAC@<X0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = nw_parameters_get_required_interface_type(*a1);
  if (result >= 5) {
    char v4 = 0;
  }
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.requiredInterfaceType.modify(os_unfair_lock_s **a1))(os_unfair_lock_s **a1)
{
  uint64_t v3 = a1 + 2;
  char v4 = *(os_unfair_lock_s **)(v1 + 16);
  *a1 = v4;
  uint64_t v5 = (nw_parameters_t *)&v4[4];
  char v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1835A6BAC(v5, v3);
  a1[1] = 0;
  os_unfair_lock_unlock(v6);
  return sub_1835A6C78;
}

void sub_1835A6C78(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B1FF4((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

void NWParameters.requiredInterfaceSubtype.getter(char *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  char v4 = (void **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A6E9C(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835A6D6C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  char v4 = (void **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A6E9C(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A6DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  uint64_t v3 = (void **)&v2[4];
  char v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835AFFA8(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.requiredInterfaceSubtype.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AFFA8(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835A6E9C@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  uint64_t result = nw_parameters_get_required_interface_subtype(*a1);
  if ((int)result > 4000)
  {
    if (result == 4001)
    {
      char v4 = 3;
      goto LABEL_11;
    }
    if (result == 5001)
    {
      char v4 = 4;
      goto LABEL_11;
    }
LABEL_8:
    char v4 = 0;
    goto LABEL_11;
  }
  if (result == 1001)
  {
    char v4 = 1;
    goto LABEL_11;
  }
  if (result != 1002) {
    goto LABEL_8;
  }
  char v4 = 2;
LABEL_11:
  *a2 = v4;
  return result;
}

void (*NWParameters.requiredInterfaceSubtype.modify(os_unfair_lock_s **a1))(os_unfair_lock_s **a1)
{
  uint64_t v3 = (char *)(a1 + 2);
  char v4 = *(os_unfair_lock_s **)(v1 + 16);
  *a1 = v4;
  uint64_t v5 = (void **)&v4[4];
  char v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1835A6E9C(v5, v3);
  a1[1] = 0;
  os_unfair_lock_unlock(v6);
  return sub_1835A6FB0;
}

void sub_1835A6FB0(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835AFFA8((void **)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.prohibitedInterfaces.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (NSObject **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A7268(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A7098(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  char v4 = (NSObject **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A7268(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1835A7104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  uint64_t v3 = (nw_parameters_t *)(v2 + 16);
  char v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1835B2248(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitedInterfaces.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AFFE4(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

void sub_1835A71E0(nw_parameters_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  nw_parameters_clear_prohibited_interfaces(*a1);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = 0;
      while (1)
      {
        uint64_t v6 = *(NSObject **)(a2 + 8 * v5 + 32);
        if (!v6) {
          break;
        }
        ++v5;
        nw_parameters_prohibit_interface(v3, v6);
        if (v4 == v5)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
    }
  }
}

uint64_t sub_1835A7268@<X0>(NSObject **a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v11;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1832FF1BC;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1832FF164;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1832FF10C;
  aBlock[3] = &block_descriptor_261;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_parameters_iterate_prohibited_interfaces(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v11;
    uint64_t v9 = *(void *)(v11 + 16);
    uint64_t result = swift_release();
    if (!v9)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0;
    }
    *a2 = v8;
  }
  return result;
}

uint64_t (*NWParameters.prohibitedInterfaces.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (NSObject **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A7268(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1835A7474;
}

uint64_t sub_1835A7474(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = (nw_parameters_t *)&v2[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1835B2248(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1835B2248(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitedInterfaceTypes.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (NSObject **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A7750(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A7588(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (NSObject **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A7750(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1835A75F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  uint64_t v3 = (nw_parameters_t *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1835B2260(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitedInterfaceTypes.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0000(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

void sub_1835A76D0(nw_parameters_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  nw_parameters_clear_prohibited_interface_types(*a1);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v4; ++i)
      {
        nw_interface_type_t v6 = *(unsigned __int8 *)(a2 + i + 32);
        nw_parameters_prohibit_interface_type(v3, v6);
      }
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1835A7750@<X0>(NSObject **a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v11;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1835B1F60;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1835B1F78;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1835A7988;
  aBlock[3] = &block_descriptor_252;
  nw_interface_type_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_parameters_iterate_prohibited_interface_types(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v11;
    uint64_t v9 = *(void *)(v11 + 16);
    uint64_t result = swift_release();
    if (!v9)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0;
    }
    *a2 = v8;
  }
  return result;
}

uint64_t sub_1835A78D0(unsigned int a1, char **a2)
{
  uint64_t v4 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_1834B5294(0, *((void *)v4 + 2) + 1, 1, v4);
    *a2 = v4;
  }
  unint64_t v7 = *((void *)v4 + 2);
  unint64_t v6 = *((void *)v4 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v4 = sub_1834B5294((char *)(v6 > 1), v7 + 1, 1, v4);
  }
  if (a1 >= 5) {
    char v8 = 0;
  }
  else {
    char v8 = a1;
  }
  *((void *)v4 + 2) = v7 + 1;
  v4[v7 + 32] = v8;
  *a2 = v4;
  return 1;
}

uint64_t sub_1835A7988(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2) & 1;
}

uint64_t (*NWParameters.prohibitedInterfaceTypes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (NSObject **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A7750(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1835A7A44;
}

uint64_t sub_1835A7A44(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = (nw_parameters_t *)&v2[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1835B2260(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1835B2260(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitedInterfaceSubtypes.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A7D64(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A7B58(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (void **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A7D64(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1835A7BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  uint64_t v3 = (void **)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1835B2278(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitedInterfaceSubtypes.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B001C(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835A7CA0(void **a1, uint64_t a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(char *)(a2 + v6++ + 32);
        xpc_object_t v8 = xpc_uint64_create(qword_183D5B108[v7]);
        xpc_array_append_value(v4, v8);
        swift_unknownObjectRelease();
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
  }
  nw_parameters_set_prohibited_interface_subtypes(*a1, v4);
  return swift_unknownObjectRelease();
}

uint64_t sub_1835A7D64@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = MEMORY[0x1E4FBC860];
  id v3 = nw_parameters_copy_prohibited_interface_subtypes(*a1);
  if (!v3) {
    id v3 = xpc_array_create(0, 0);
  }
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v12;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1835B1F0C;
  *(void *)(v5 + 24) = v4;
  v11[4] = sub_1835B1F24;
  void v11[5] = v5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = sub_1835A807C;
  _OWORD v11[3] = &block_descriptor_243;
  uint64_t v6 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  xpc_array_apply(v3, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 + 16);
    uint64_t result = swift_release();
    if (!v10)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v9 = 0;
    }
    *a2 = v9;
  }
  return result;
}

uint64_t sub_1835A7F20(int a1, xpc_object_t xuint, char **a3)
{
  uint64_t value = xpc_uint64_get_value(xuint);
  if (HIDWORD(value))
  {
    uint64_t result = sub_183D456BC();
    __break(1u);
    return result;
  }
  if ((int)value > 4000)
  {
    if (value == 4001)
    {
      char v5 = 3;
      goto LABEL_12;
    }
    if (value == 5001)
    {
      char v5 = 4;
      goto LABEL_12;
    }
LABEL_9:
    char v5 = 0;
    goto LABEL_12;
  }
  if (value == 1001)
  {
    char v5 = 1;
    goto LABEL_12;
  }
  if (value != 1002) {
    goto LABEL_9;
  }
  char v5 = 2;
LABEL_12:
  uint64_t v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = sub_1834B52A0(0, *((void *)v6 + 2) + 1, 1, v6);
    *a3 = v6;
  }
  unint64_t v9 = *((void *)v6 + 2);
  unint64_t v8 = *((void *)v6 + 3);
  if (v9 >= v8 >> 1) {
    uint64_t v6 = sub_1834B52A0((char *)(v8 > 1), v9 + 1, 1, v6);
  }
  *((void *)v6 + 2) = v9 + 1;
  v6[v9 + 32] = v5;
  *a3 = v6;
  return 1;
}

uint64_t sub_1835A807C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t (*NWParameters.prohibitedInterfaceSubtypes.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (void **)&v3[4];
  char v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A7D64(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1835A8160;
}

uint64_t sub_1835A8160(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
  id v3 = v2 + 6;
  uint64_t v4 = (void **)&v2[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1835B2278(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1835B2278(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitExpensivePaths.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A83A0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A8274(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A83A0(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A82E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  id v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B2064(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.prohibitExpensivePaths.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0038(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835A83A0@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_get_prohibit_expensive(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.prohibitExpensivePaths.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A83A0(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835A8460;
}

void sub_1835A8460(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B2064((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.prohibitConstrainedPaths.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A8670(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A8544(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A8670(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A85B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  id v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B207C(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.prohibitConstrainedPaths.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0068(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835A8670@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_get_prohibit_constrained(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.prohibitConstrainedPaths.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A8670(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835A8730;
}

void sub_1835A8730(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B207C((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.preferNoProxies.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A8940(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A8814(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A8940(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A8880(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  id v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B2094(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.preferNoProxies.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0098(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835A8940@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_get_prefer_no_proxy(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.preferNoProxies.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A8940(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835A8A00;
}

void sub_1835A8A00(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B2094((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

void NWParameters.requiredLocalEndpoint.getter(uint64_t a1@<X8>)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A8D6C(v4, a1);

  os_unfair_lock_unlock(v5);
}

uint64_t sub_1835A8AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_183138900(a1, (uint64_t)v6, qword_1EB266A50);
  uint64_t v7 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  uint64_t v12 = v6;
  unint64_t v8 = (NSObject **)&v7[4];
  unint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_1835B2290(v8);
  os_unfair_lock_unlock(v9);
  return sub_183138A24((uint64_t)v6, qword_1EB266A50);
}

uint64_t NWParameters.requiredLocalEndpoint.setter(uint64_t a1)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (NSObject **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835B00C8(v4);
  os_unfair_lock_unlock(v5);
  return sub_183138A24(a1, qword_1EB266A50);
}

uint64_t sub_1835A8C38(NSObject **a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  sub_183138900(a2, (uint64_t)v6, qword_1EB266A50);
  uint64_t v8 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    sub_183138A24((uint64_t)v6, qword_1EB266A50);
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = NWEndpoint.nw.getter();
    sub_18315E4BC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }
  nw_parameters_set_local_endpoint(v7, v9);
  return swift_unknownObjectRelease();
}

uint64_t sub_1835A8D6C@<X0>(nw_parameters_t *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = nw_parameters_copy_local_endpoint(*a1);
  if (v3) {
    return sub_18315A830(v3, a2);
  }
  uint64_t v5 = type metadata accessor for NWEndpoint();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 1, 1, v5);
}

void (*NWParameters.requiredLocalEndpoint.modify(void **a1))(uint64_t a1, char a2)
{
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50) - 8) + 64);
  *a1 = malloc(v3);
  uint64_t v4 = malloc(v3);
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v4;
  a1[2] = v5;
  char v6 = (nw_parameters_t *)&v5[4];
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_1835A8D6C(v6, (uint64_t)v4);
  a1[3] = 0;
  os_unfair_lock_unlock(v7);
  return sub_1835A8EAC;
}

void sub_1835A8EAC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (os_unfair_lock_s *)(v2 + 24);
  char v6 = (NSObject **)(v2 + 16);
  if (a2)
  {
    uint64_t v7 = sub_183138900(*(void *)(a1 + 8), (uint64_t)v3, qword_1EB266A50);
    MEMORY[0x1F4188790](v7);
    os_unfair_lock_lock(v5);
    sub_1835B2290(v6);
    os_unfair_lock_unlock(v5);
    sub_183138A24((uint64_t)v3, qword_1EB266A50);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    os_unfair_lock_lock(v5);
    sub_1835B2290(v6);
    os_unfair_lock_unlock(v5);
  }
  sub_183138A24((uint64_t)v4, qword_1EB266A50);
  free(v4);
  free(v3);
}

uint64_t NWParameters.allowLocalEndpointReuse.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A9158(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A902C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9158(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A9098(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B20AC(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.allowLocalEndpointReuse.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B00E4(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835A9158@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_get_reuse_local_address(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.allowLocalEndpointReuse.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9158(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835A9218;
}

void sub_1835A9218(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B20AC((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.acceptLocalOnly.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A9428(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A92FC(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9428(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A9368(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B20C4(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.acceptLocalOnly.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0114(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835A9428@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_get_local_only(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.acceptLocalOnly.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9428(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835A94E8;
}

void sub_1835A94E8(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B20C4((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.includePeerToPeer.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A96F8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A95CC(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A96F8(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A9638(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B20DC(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.includePeerToPeer.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0144(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835A96F8@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_get_include_peer_to_peer(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.includePeerToPeer.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A96F8(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835A97B8;
}

void sub_1835A97B8(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B20DC((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.requiresDNSSECValidation.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A99C8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835A989C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A99C8(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A9908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B20F4(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.requiresDNSSECValidation.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0174(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835A99C8@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_requires_dnssec_validation(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.requiresDNSSECValidation.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A99C8(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835A9A88;
}

void sub_1835A9A88(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B20F4((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

BOOL static NWParameters.ServiceClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWParameters.ServiceClass.hash(into:)()
{
  return sub_183D45B0C();
}

void NWParameters.serviceClass.getter(unsigned char *a1@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9CEC(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835A9BBC(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9CEC(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A9C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B200C(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.serviceClass.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B01A4(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835A9CEC@<X0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = nw_parameters_get_service_class(*a1);
  if (result >= 6) {
    char v4 = 0;
  }
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.serviceClass.modify(os_unfair_lock_s **a1))(os_unfair_lock_s **a1)
{
  size_t v3 = a1 + 2;
  char v4 = *(os_unfair_lock_s **)(v1 + 16);
  *a1 = v4;
  unsigned __int8 v5 = (nw_parameters_t *)&v4[4];
  char v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1835A9CEC(v5, v3);
  a1[1] = 0;
  os_unfair_lock_unlock(v6);
  return sub_1835A9DB8;
}

void sub_1835A9DB8(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B200C((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

void NWParameters.multipathServiceType.getter(unsigned char *a1@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  char v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9FE0(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835A9EB0(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  char v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A9FE0(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835A9F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  char v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B2024(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.multipathServiceType.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B01D4(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835A9FE0@<X0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = nw_parameters_get_multipath_service(*a1);
  if (result >= 4) {
    char v4 = 0;
  }
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.multipathServiceType.modify(os_unfair_lock_s **a1))(os_unfair_lock_s **a1)
{
  size_t v3 = a1 + 2;
  char v4 = *(os_unfair_lock_s **)(v1 + 16);
  *a1 = v4;
  unsigned __int8 v5 = (nw_parameters_t *)&v4[4];
  char v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1835A9FE0(v5, v3);
  a1[1] = 0;
  os_unfair_lock_unlock(v6);
  return sub_1835AA0AC;
}

void sub_1835AA0AC(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B2024((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.allowFastOpen.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AA2C0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835AA194(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  char v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AA2C0(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835AA200(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  char v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B210C(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.allowFastOpen.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0204(v2);
  os_unfair_lock_unlock(v3);
}

BOOL sub_1835AA2C0@<W0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_parameters_get_fast_open_enabled(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.allowFastOpen.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  char v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AA2C0(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835AA380;
}

void sub_1835AA380(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B210C((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

void NWParameters.expiredDNSBehavior.getter(unsigned char *a1@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  char v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AA5A4(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835AA474(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  char v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AA5A4(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835AA4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  size_t v3 = (nw_parameters_t *)&v2[4];
  char v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B203C(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.expiredDNSBehavior.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_parameters_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0234(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835AA5A4@<X0>(nw_parameters_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = nw_parameters_get_expired_dns_behavior(*a1);
  if (result >= 4) {
    char v4 = 0;
  }
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.expiredDNSBehavior.modify(os_unfair_lock_s **a1))(os_unfair_lock_s **a1)
{
  size_t v3 = a1 + 2;
  char v4 = *(os_unfair_lock_s **)(v1 + 16);
  *a1 = v4;
  unsigned __int8 v5 = (nw_parameters_t *)&v4[4];
  char v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1835AA5A4(v5, v3);
  a1[1] = 0;
  os_unfair_lock_unlock(v6);
  return sub_1835AA670;
}

void sub_1835AA670(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B203C((nw_parameters_t *)&v1[4]);
  os_unfair_lock_unlock(v2);
}

void sub_1835AA6F8(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  char v4 = (NSObject **)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AA8A0(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1835AA764(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  size_t v3 = (nw_protocol_stack_t *)(v2 + 16);
  char v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1834F2C44(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835AA7D8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_protocol_stack_t *)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1834A47E4(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835AA840()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (NSObject **)&v1[4];
  size_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AA8A0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1835AA8A0@<X0>(NSObject **a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = MEMORY[0x1E4FBC860];
  size_t v3 = *a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v10;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1835B1FD4;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1835B1FEC;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_18350B29C;
  aBlock[3] = &block_descriptor_277;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_protocol_stack_iterate_application_protocols(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    uint64_t result = swift_release();
    *a2 = v8;
  }
  return result;
}

uint64_t sub_1835AAA0C(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (qword_1E8F61DD0 != -1) {
LABEL_22:
  }
    uint64_t result = swift_once();
  uint64_t v4 = off_1E8F61E00;
  uint64_t v5 = *((void *)off_1E8F61E00 + 2);
  if (v5)
  {
    uint64_t v6 = *((void *)off_1E8F61E00 + 4);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 88);
    swift_bridgeObjectRetain();
    uint64_t result = v7(v3);
    if (result)
    {
LABEL_4:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(v6 + 96))(v3);
      swift_unknownObjectRetain();
      uint64_t v8 = swift_retain();
      MEMORY[0x185314200](v8);
      if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_183D44E9C();
      }
      sub_183D44EDC();
      sub_183D44E6C();
      return swift_release();
    }
    if (v5 != 1)
    {
      if (v4[2] < 2uLL)
      {
        __break(1u);
        return result;
      }
      uint64_t v6 = v4[5];
      if ((*(uint64_t (**)(uint64_t))(v6 + 88))(v3)) {
        goto LABEL_4;
      }
      uint64_t v9 = 0;
      uint64_t v10 = v5 - 2;
      while (v10 != v9)
      {
        if ((unint64_t)(v9 + 2) >= v4[2])
        {
          __break(1u);
          goto LABEL_22;
        }
        uint64_t v6 = v4[v9++ + 6];
        if ((*(uint64_t (**)(uint64_t))(v6 + 88))(v3)) {
          goto LABEL_4;
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*sub_1835AAC10(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (NSObject **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AA8A0(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1835AAC9C;
}

uint64_t sub_1835AAC9C(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = (nw_protocol_stack_t *)&v2[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1834F2C44(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1834F2C44(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

void *sub_1835AAD50(void *result, uint64_t a2)
{
  if (*result)
  {
    uint64_t v2 = *(void *)(*(void *)a2 + 16);
    uint64_t v3 = (nw_protocol_stack_t *)(v2 + 16);
    uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
    swift_retain_n();
    os_unfair_lock_lock(v4);
    sub_1834A4914(v3);
    os_unfair_lock_unlock(v4);
    return (void *)swift_release_n();
  }
  return result;
}

uint64_t sub_1835AADC8(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = (nw_protocol_stack_t *)(v2 + 16);
    uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
    swift_retain();
    os_unfair_lock_lock(v4);
    sub_1834A4914(v3);
    os_unfair_lock_unlock(v4);
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1835AAE38()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_protocol_stack_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AAED4(v2, (nw_protocol_options_t *)&v7);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v5 = sub_1835313A8(v7);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(v5 + 96))(v4);
    }
    swift_unknownObjectRelease();
  }
  return 0;
}

nw_protocol_options_t sub_1835AAED4@<X0>(nw_protocol_stack_t *a1@<X0>, nw_protocol_options_t *a2@<X8>)
{
  nw_protocol_options_t result = nw_protocol_stack_copy_transport_protocol(*a1);
  *a2 = result;
  return result;
}

uint64_t *(*sub_1835AAF08(uint64_t *a1))(uint64_t *result, char a2)
{
  a1[1] = v1;
  *a1 = sub_1835AAE38();
  return sub_1835AAF50;
}

uint64_t *sub_1835AAF50(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  if (a2)
  {
    if (v2)
    {
      uint64_t v3 = *(void *)(result[1] + 16);
      uint64_t v4 = (nw_protocol_stack_t *)(v3 + 16);
      uint64_t v5 = (os_unfair_lock_s *)(v3 + 24);
      swift_retain_n();
      os_unfair_lock_lock(v5);
      sub_1834A4914(v4);
      os_unfair_lock_unlock(v5);
      swift_release_n();
    }
    return (uint64_t *)swift_release();
  }
  else if (v2)
  {
    uint64_t v6 = *(void *)(result[1] + 16);
    uint64_t v7 = (nw_protocol_stack_t *)(v6 + 16);
    uint64_t v8 = (os_unfair_lock_s *)(v6 + 24);
    swift_retain();
    os_unfair_lock_lock(v8);
    sub_1834A4914(v7);
    os_unfair_lock_unlock(v8);
    return (uint64_t *)swift_release_n();
  }
  return result;
}

uint64_t sub_1835AB03C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_protocol_stack_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AB0D8(v2, (nw_protocol_options_t *)&v7);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v5 = sub_1835313A8(v7);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(v5 + 96))(v4);
    }
    swift_unknownObjectRelease();
  }
  return 0;
}

nw_protocol_options_t sub_1835AB0D8@<X0>(nw_protocol_stack_t *a1@<X0>, nw_protocol_options_t *a2@<X8>)
{
  nw_protocol_options_t result = nw_protocol_stack_copy_internet_protocol(*a1);
  *a2 = result;
  return result;
}

uint64_t (*sub_1835AB10C(uint64_t *a1))()
{
  *a1 = sub_1835AB03C();
  return destroy for NWConnection.EstablishmentReport.Handshake;
}

uint64_t NWParameters.ProtocolStack.deinit()
{
  swift_release();
  return v0;
}

uint64_t sub_1835AB170()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (id *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A60F0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835AB1D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_description);
  uint64_t v4 = sub_183D44AFC();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1835AB238()
{
  type metadata accessor for NWParameters.PrivacyContext();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64AD8);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = &__block_literal_global_11145;
  *(void *)(v0 + 16) = v1;
  qword_1E8F64AD0 = v0;

  return swift_unknownObjectRetain();
}

uint64_t static NWParameters.PrivacyContext.default.getter()
{
  if (qword_1E8F621A0 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t NWParameters.PrivacyContext.__allocating_init(description:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = MEMORY[0x1E4FBC860];
  uint64_t v1 = sub_183D44BAC();
  swift_bridgeObjectRelease();
  nw_privacy_context_t v2 = nw_privacy_context_create((const char *)(v1 + 32));
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64AD8);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v2;
  *(void *)(v0 + 16) = v3;
  return v0;
}

uint64_t NWParameters.PrivacyContext.init(description:)()
{
  *(void *)(v0 + 24) = MEMORY[0x1E4FBC860];
  uint64_t v1 = sub_183D44BAC();
  swift_bridgeObjectRelease();
  nw_privacy_context_t v2 = nw_privacy_context_create((const char *)(v1 + 32));
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64AD8);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v2;
  *(void *)(v0 + 16) = v3;
  return v0;
}

void sub_1835AB43C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  nw_privacy_context_t v2 = (nw_privacy_context_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AB4A0(v2);

  os_unfair_lock_unlock(v3);
}

void sub_1835AB4A0(nw_privacy_context_t *a1)
{
}

void sub_1835AB4CC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  nw_privacy_context_t v2 = (nw_privacy_context_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AB530(v2);

  os_unfair_lock_unlock(v3);
}

void sub_1835AB530(nw_privacy_context_t *a1)
{
}

uint64_t NWParameters.PrivacyContext.ResolverConfiguration.debugDescription.getter()
{
  uint64_t v0 = sub_1835AB5D8();
  if (!v0) {
    return 7104878;
  }
  id v1 = [v0 description];
  swift_unknownObjectRelease();
  uint64_t v2 = sub_183D44AFC();

  return v2;
}

NSObject *sub_1835AB5D8()
{
  uint64_t v1 = sub_183D4447C();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)v36 - v11;
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)v36 - v13;
  uint64_t v15 = type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration();
  MEMORY[0x1F4188790](v15);
  id v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1835B1E94(v0, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *(void *)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B18) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v17, v1);
    CFURLRef v19 = (const __CFURL *)sub_183D4441C();
    BOOL v20 = nw_endpoint_create_with_cfurl(v19);

    https = nw_resolver_config_create_https((nw_endpoint_t)v20);
    if (https)
    {
      uint64_t v22 = v6;
      uint64_t v23 = *(void *)(v18 + 16);
      if (v23)
      {
        uint64_t v24 = v22;
        unint64_t v25 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        v36[1] = v18;
        uint64_t v26 = v18 + v25;
        uint64_t v27 = *(void *)(v24 + 72);
        swift_unknownObjectRetain();
        do
        {
          sub_1835B1E94(v26, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
          unint64_t v28 = NWEndpoint.nw.getter();
          if (v28)
          {
            nw_resolver_config_add_server_address(https, v28);
            swift_unknownObjectRelease();
          }
          sub_18315E4BC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
          v26 += v27;
          --v23;
        }
        while (v23);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v29 = *(void *)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B10) + 48)];
    sub_18315E28C((uint64_t)v17, (uint64_t)v14);
    uint64_t v30 = NWEndpoint.nw.getter();
    if (v30)
    {
      https = nw_resolver_config_create_tls(v30);
      if (https)
      {
        uint64_t v31 = *(void *)(v29 + 16);
        if (v31)
        {
          uint64_t v32 = v29 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          uint64_t v33 = *(void *)(v6 + 72);
          swift_unknownObjectRetain();
          do
          {
            sub_1835B1E94(v32, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
            int64_t v34 = NWEndpoint.nw.getter();
            if (v34)
            {
              nw_resolver_config_add_server_address(https, v34);
              swift_unknownObjectRelease();
            }
            sub_18315E4BC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
            v32 += v33;
            --v31;
          }
          while (v31);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_unknownObjectRelease();
        sub_18315E4BC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      }
      else
      {
        sub_18315E4BC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_18315E4BC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return https;
}

uint64_t sub_1835ABA9C()
{
  uint64_t v0 = sub_1835AB5D8();
  if (!v0) {
    return 7104878;
  }
  id v1 = [v0 description];
  swift_unknownObjectRelease();
  uint64_t v2 = sub_183D44AFC();

  return v2;
}

void sub_1835ABB18()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (NSObject **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0264(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835ABB78(NSObject **a1, char a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B40);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  sub_183138900(a3, (uint64_t)v8, &qword_1E8F64B40);
  uint64_t v10 = type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) == 1)
  {
    sub_183138A24((uint64_t)v8, &qword_1E8F64B40);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = sub_1835AB5D8();
    sub_18315E4BC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
  }
  nw_privacy_context_require_encrypted_name_resolution(v9, a2 & 1, v11);
  return swift_unknownObjectRelease();
}

void sub_1835ABCB4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(*(void *)a1 + 16) + 24);
  os_unfair_lock_lock(v3);
  sub_1835B215C(&v4);
  os_unfair_lock_unlock(v3);
  *a2 = v4;
}

uint64_t sub_1835ABD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  uint64_t v3 = (NSObject **)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1835B21A8(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835ABD90()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (NSObject **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0284(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

void sub_1835ABDF8(NSObject **a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *a1;
  nw_privacy_context_clear_proxies(v5);
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = *(NSObject **)(a3 + 8 * i + 32);
      nw_privacy_context_add_proxy(v5, v8);
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1835ABE90()
{
  id v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 24);
  os_unfair_lock_lock(v1);
  sub_1835B02A0(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t (*sub_1835ABEEC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v1;
  a1[2] = v3;
  uint64_t v4 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835B215C(&v6);
  a1[3] = 0;
  os_unfair_lock_unlock(v4);
  *a1 = v6;
  return sub_1835ABF74;
}

uint64_t sub_1835ABF74(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 16);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = (NSObject **)&v2[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1835B21A8(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1835B21A8(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.PrivacyContext.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NWParameters.PrivacyContext.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1835AC0A0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)v0 + 16);
  uint64_t v2 = (id *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835A60F0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t NWParameters.requiredNetworkAgents.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AC2B8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835AC164(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AC2B8(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t NWParameters.requiredNetworkAgents.setter()
{
  xpc_object_t v1 = xpc_array_create(0, 0);
  xpc_object_t v2 = xpc_array_create(0, 0);
  uint64_t v3 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835B02C0((uint64_t)v4);
  os_unfair_lock_unlock(v5);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v5);
  sub_1834A4678(v4, &v7);
  os_unfair_lock_unlock(v5);
  nw_parameters_set_required_netagent_classes(v7, v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1835AC2B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1835AC6A4(a1, (uint64_t (*)(void))nw_parameters_copy_required_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_required_netagent_types, a2);
}

uint64_t (*NWParameters.requiredNetworkAgents.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AC2B8(v4, &v7);
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1835AC380;
}

uint64_t sub_1835AC380(uint64_t *a1, char a2)
{
  return sub_1835AC908(a1, a2, (uint64_t (*)(uint64_t))NWParameters.requiredNetworkAgents.setter);
}

uint64_t NWParameters.preferredNetworkAgents.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  xpc_object_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AC664(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835AC3F8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AC664(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t NWParameters.preferredNetworkAgents.setter()
{
  xpc_object_t v1 = xpc_array_create(0, 0);
  xpc_object_t v2 = xpc_array_create(0, 0);
  uint64_t v3 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835B2210((uint64_t)v4);
  os_unfair_lock_unlock(v5);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v5);
  sub_1834A4678(v4, &v7);
  os_unfair_lock_unlock(v5);
  nw_parameters_set_preferred_netagent_classes(v7, v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_1835AC54C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v7 = swift_bridgeObjectRetain() + 56;
    do
    {
      uint64_t v8 = (const char *)(sub_183D44BAC() + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      xpc_object_t v9 = xpc_string_create(v8);
      swift_release();
      xpc_array_append_value(a3, v9);
      swift_bridgeObjectRelease();
      uint64_t v10 = sub_183D44BAC();
      swift_bridgeObjectRelease();
      xpc_object_t v11 = xpc_string_create((const char *)(v10 + 32));
      swift_release();
      xpc_array_append_value(a4, v11);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v7 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1835AC664@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1835AC6A4(a1, (uint64_t (*)(void))nw_parameters_copy_preferred_netagent_domains, (uint64_t (*)(uint64_t))nw_parameters_copy_preferred_netagent_types, a2);
}

uint64_t sub_1835AC6A4@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t result = a2(*a1);
  if (!result)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
LABEL_20:
    *a4 = v13;
    return result;
  }
  uint64_t v8 = (void *)result;
  uint64_t v9 = a3(v6);
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  uint64_t v10 = (void *)v9;
  size_t count = xpc_array_get_count(v8);
  uint64_t result = xpc_array_get_count(v10);
  uint64_t v23 = a4;
  if (count != result) {
    goto LABEL_16;
  }
  if ((count & 0x8000000000000000) == 0)
  {
    if (count)
    {
      size_t v12 = 0;
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v25 = v10;
      size_t v24 = count;
      do
      {
        if (xpc_array_get_string(v8, v12) && xpc_array_get_string(v10, v12))
        {
          uint64_t v15 = sub_183D44C9C();
          uint64_t v17 = v16;
          uint64_t v18 = sub_183D44C9C();
          uint64_t v20 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v13 = sub_1834B52AC(0, v13[2] + 1, 1, v13);
          }
          unint64_t v22 = v13[2];
          unint64_t v21 = v13[3];
          if (v22 >= v21 >> 1) {
            uint64_t v13 = sub_1834B52AC((void *)(v21 > 1), v22 + 1, 1, v13);
          }
          void v13[2] = v22 + 1;
          unint64_t v14 = &v13[4 * v22];
          v14[4] = v15;
          v14[5] = v17;
          void v14[6] = v18;
          v14[7] = v20;
          uint64_t v10 = v25;
          size_t count = v24;
        }
        ++v12;
      }
      while (count != v12);
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_unknownObjectRelease();
    a4 = v23;
LABEL_19:
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t (*NWParameters.preferredNetworkAgents.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AC664(v4, &v7);
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1835AC8F0;
}

uint64_t sub_1835AC8F0(uint64_t *a1, char a2)
{
  return sub_1835AC908(a1, a2, (uint64_t (*)(uint64_t))NWParameters.preferredNetworkAgents.setter);
}

uint64_t sub_1835AC908(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);

  return swift_bridgeObjectRelease();
}

void NWParameters.setPrivacyContext(_:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  xpc_object_t v2 = (NSObject **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B02E0(v2);

  os_unfair_lock_unlock(v3);
}

void sub_1835AC9E0(NSObject **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(os_unfair_lock_s **)(a2 + 16);
  uint64_t v5 = v4 + 4;
  uint64_t v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1834A4764(v5, &privacy_context);
  os_unfair_lock_unlock(v6);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    nw_parameters_set_privacy_context(v3, privacy_context);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1835ACA74@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1834A4690(a1, (uint64_t (*)(void))nw_parameters_copy, (void (*)(void))type metadata accessor for NWParameters, &qword_1E8F61EA0, a2);
}

uint64_t NWParameters.isKnownTracker.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835ACC48(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1835ACB1C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (void **)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835ACC48(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835ACB88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  uint64_t v3 = (void **)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B2124(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.isKnownTracker.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B02FC(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835ACC48@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = nw_parameters_get_is_known_tracker(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.isKnownTracker.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (void **)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835ACC48(v4, v7);
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock(v5);
  *(unsigned char *)(a1 + 16) = v7[0];
  return sub_1835ACD08;
}

void sub_1835ACD08(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B2124((void **)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.Attribution.hash(into:)()
{
  return sub_183D45B0C();
}

BOOL static NWParameters.Attribution.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWParameters.Attribution.hashValue.getter()
{
  return sub_183D45B4C();
}

void NWParameters.attribution.getter(BOOL *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835ACFB4(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835ACE84(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  unsigned __int8 v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835ACFB4(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1835ACEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)a2 + 16);
  uint64_t v3 = (NSObject **)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1835B2190(v3);
  os_unfair_lock_unlock(v4);
}

void NWParameters.attribution.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (NSObject **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B032C(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1835ACFB4@<X0>(nw_parameters_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = nw_parameters_get_attribution(*a1);
  *a2 = result == 2;
  return result;
}

void (*NWParameters.attribution.modify(os_unfair_lock_s **a1))(os_unfair_lock_s **a1)
{
  uint64_t v3 = (BOOL *)(a1 + 2);
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 16);
  *a1 = v4;
  unsigned __int8 v5 = (nw_parameters_t *)&v4[4];
  BOOL v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1835ACFB4(v5, v3);
  a1[1] = 0;
  os_unfair_lock_unlock(v6);
  return sub_1835AD080;
}

void sub_1835AD080(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  os_unfair_lock_lock(v2);
  sub_1835B2190((NSObject **)&v1[4]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.accountID.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AD2AC(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

double sub_1835AD164@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AD2AC(v4, (uint64_t *)&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1835AD1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  uint64_t v3 = (uint64_t *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1835B21C0(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.accountID.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0368(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835AD2AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1835AD658(a1, (uint64_t (*)(void))nw_parameters_get_account_id, a2);
}

uint64_t (*NWParameters.accountID.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AD2AC(v4, v7);
  *(void *)(a1 + 24) = 0;
  os_unfair_lock_unlock(v5);
  *(_OWORD *)a1 = *(_OWORD *)v7;
  return sub_1835AD364;
}

uint64_t sub_1835AD364(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 16);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = (uint64_t *)&v2[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1835B21C0(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1835B21C0(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.sourceApplicationBundleID.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835AD62C(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

double sub_1835AD478@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AD62C(v4, (uint64_t *)&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1835AD4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  uint64_t v3 = (uint64_t *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1835B21D8(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.sourceApplicationBundleID.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1835B0398(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835AD5C0(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  if (a3) {
    uint64_t v6 = sub_183D44BAC() + 32;
  }
  else {
    uint64_t v6 = 0;
  }
  a4(v5, v6);
  return swift_unknownObjectRelease();
}

uint64_t sub_1835AD62C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1835AD658(a1, (uint64_t (*)(void))nw_parameters_get_effective_bundle_id, a2);
}

uint64_t sub_1835AD658@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1);
  if (result) {
    uint64_t result = sub_183D44C9C();
  }
  else {
    uint64_t v5 = 0;
  }
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t (*NWParameters.sourceApplicationBundleID.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AD62C(v4, v7);
  *(void *)(a1 + 24) = 0;
  os_unfair_lock_unlock(v5);
  *(_OWORD *)a1 = *(_OWORD *)v7;
  return sub_1835AD72C;
}

uint64_t sub_1835AD72C(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 16);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = (uint64_t *)&v2[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1835B21D8(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1835B21D8(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

void NWParameters.applicationID.getter(BOOL *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (void **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AD9F4(v4, a1);

  os_unfair_lock_unlock(v5);
}

void sub_1835AD84C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (void **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AD9F4(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void *sub_1835AD8B8(void *result)
{
  if (*result)
  {
    MEMORY[0x1F4188790](result);
    uint64_t v2 = (void **)(v1 + 16);
    uint64_t v3 = (os_unfair_lock_s *)(v1 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1835B213C(v2);
    os_unfair_lock_unlock(v3);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *NWParameters.applicationID.setter(void *result)
{
  if (*result)
  {
    MEMORY[0x1F4188790](result);
    uint64_t v2 = (void **)&v1[4];
    uint64_t v3 = v1 + 6;
    os_unfair_lock_lock(v1 + 6);
    sub_1835B03C8(v2);
    os_unfair_lock_unlock(v3);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

BOOL sub_1835AD9F4@<W0>(void **a1@<X0>, BOOL *a2@<X8>)
{
  BOOL result = nw_parameters_copy_application_id(*a1);
  *a2 = result;
  return result;
}

uint64_t *(*NWParameters.applicationID.modify(BOOL *a1))(uint64_t *result, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = (BOOL)v3;
  uint64_t v4 = (void **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835AD9F4(v4, a1);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  return sub_1835ADAAC;
}

uint64_t *sub_1835ADAAC(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  if (a2)
  {
    if (v2)
    {
      uint64_t v3 = result[1];
      uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
      uint64_t v5 = (void **)(v3 + 16);
      MEMORY[0x1F4188790](result);
      swift_unknownObjectRetain();
      os_unfair_lock_lock(v4);
      sub_1835B213C(v5);
      os_unfair_lock_unlock(v4);
      swift_unknownObjectRelease();
    }
    return (uint64_t *)swift_unknownObjectRelease();
  }
  else if (v2)
  {
    uint64_t v6 = result[1];
    long long v7 = (os_unfair_lock_s *)(v6 + 24);
    uint64_t v8 = (void **)(v6 + 16);
    MEMORY[0x1F4188790](result);
    os_unfair_lock_lock(v7);
    sub_1835B213C(v8);
    os_unfair_lock_unlock(v7);
    return (uint64_t *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ProxyConfiguration.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ProxyConfiguration.init(_nw:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL ProxyConfiguration.allowFailover.getter()
{
  return nw_proxy_config_get_failover_allowed(*v0);
}

void ProxyConfiguration.allowFailover.setter(char a1)
{
  nw_proxy_config_set_failover_allowed(*v1, a1 & 1);
}

void (*ProxyConfiguration.allowFailover.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = nw_proxy_config_get_failover_allowed(*v1);
  return sub_1835ADC44;
}

void sub_1835ADC44(uint64_t a1)
{
}

uint64_t ProxyConfiguration.matchDomains.getter()
{
  uint64_t v1 = *v0;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1835B0408;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1835B0434;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1835ADE24;
  aBlock[3] = &block_descriptor_18;
  uint64_t v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t ProxyConfiguration.matchDomains.setter(uint64_t a1)
{
  sub_1835B049C(a1, (uint64_t (*)(void))nw_proxy_config_clear_match_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_match_domain);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1835ADE24(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void (*ProxyConfiguration.matchDomains.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *a1 = v3;
  v3[7] = v4;
  v3[8] = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3 + 7;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1835B2060;
  *(void *)(v7 + 24) = v6;
  v3[4] = sub_1835B222C;
  v3[5] = v7;
  *uint64_t v3 = MEMORY[0x1E4F143A8];
  v3[1] = 1107296256;
  v3[2] = sub_1835ADE24;
  v3[3] = &block_descriptor_79;
  uint64_t v8 = _Block_copy(v3);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v5, v8);
  swift_unknownObjectRelease();
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = (void (*)(uint64_t, char))swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v3[7];
    swift_release();
    v3[6] = v10;
    return sub_1835ADFF4;
  }
  return result;
}

void sub_1835ADFF4(uint64_t a1, char a2)
{
}

uint64_t ProxyConfiguration.excludedDomains.getter()
{
  uint64_t v1 = *v0;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1835B2060;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1835B222C;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1835ADE24;
  aBlock[3] = &block_descriptor_89;
  uint64_t v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t ProxyConfiguration.excludedDomains.setter(uint64_t a1)
{
  sub_1835B049C(a1, (uint64_t (*)(void))nw_proxy_config_clear_excluded_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_excluded_domain);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1835AE1F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_183D44C9C();
  uint64_t v5 = v4;
  uint64_t v6 = (void *)*a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v6;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1834B423C(0, v6[2] + 1, 1, v6);
    uint64_t v6 = (void *)result;
    *a2 = result;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_1834B423C((void *)(v8 > 1), v9 + 1, 1, v6);
    uint64_t v6 = (void *)result;
    *a2 = result;
  }
  _OWORD v6[2] = v9 + 1;
  uint64_t v10 = &v6[2 * v9];
  uint64_t v10[4] = v3;
  v10[5] = v5;
  return result;
}

void (*ProxyConfiguration.excludedDomains.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *a1 = v3;
  v3[7] = v4;
  v3[8] = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3 + 7;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1835B2060;
  *(void *)(v7 + 24) = v6;
  v3[4] = sub_1835B222C;
  v3[5] = v7;
  *uint64_t v3 = MEMORY[0x1E4F143A8];
  v3[1] = 1107296256;
  v3[2] = sub_1835ADE24;
  v3[3] = &block_descriptor_101_0;
  unint64_t v8 = _Block_copy(v3);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v5, v8);
  swift_unknownObjectRelease();
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = (void (*)(uint64_t, char))swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v3[7];
    swift_release();
    v3[6] = v10;
    return sub_1835AE448;
  }
  return result;
}

void sub_1835AE448(uint64_t a1, char a2)
{
}

void sub_1835AE474(uint64_t a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(*(void *)a1 + 48);
  if (a2)
  {
    uint64_t v8 = swift_bridgeObjectRetain();
    sub_1835B049C(v8, a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1835B049C(v7, a3, a4);
  }
  swift_bridgeObjectRelease();

  free(v6);
}

Swift::Void __swiftcall ProxyConfiguration.applyCredential(username:password:)(Swift::String username, Swift::String password)
{
  uint64_t v2 = (const char *)(sub_183D44BAC() + 32);
  uint64_t v3 = (const char *)(sub_183D44BAC() + 32);
  uint64_t v4 = swift_unknownObjectRetain();
  nw_proxy_config_set_username_and_password(v4, v2, v3);
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
}

NSObject *ProxyConfiguration.init(socksv5Proxy:)@<X0>(uint64_t a1@<X0>, nw_proxy_config_t *a2@<X8>)
{
  uint64_t result = NWEndpoint.nw.getter();
  if (result)
  {
    socksuint64_t v5 = nw_proxy_config_create_socksv5(result);
    swift_unknownObjectRelease();
    uint64_t result = sub_18315E4BC(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    *a2 = socksv5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ProxyConfiguration.init(httpCONNECTProxy:tlsOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, nw_proxy_config_t *a3@<X8>)
{
  uint64_t result = (uint64_t)NWEndpoint.nw.getter();
  if (result)
  {
    uint64_t v7 = result;
    if (a2)
    {
      uint64_t v8 = *(NSObject **)(a2 + 16);
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v8 = 0;
    }
    nw_proxy_config_t http_connect = nw_proxy_config_create_http_connect(v7, v8);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t result = sub_18315E4BC(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    *a3 = http_connect;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ProxyConfiguration.RelayHop.init(http3RelayEndpoint:http2RelayEndpoint:tlsOptions:additionalHTTPHeaderFields:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, NSObject **a5@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  MEMORY[0x1F4188790](v9 - 8);
  xpc_object_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a1;
  size_t v12 = NWEndpoint.nw.getter();
  uint64_t v29 = a2;
  sub_183138900(a2, (uint64_t)v11, qword_1EB266A50);
  uint64_t v13 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) == 1)
  {
    sub_183138A24((uint64_t)v11, qword_1EB266A50);
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = NWEndpoint.nw.getter();
    sub_18315E4BC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }
  uint64_t v28 = a3;
  uint64_t v15 = nw_relay_hop_create(v12, v14, *(nw_protocol_options_t *)(a3 + 16));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v16 = a4 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  uint64_t v19 = v18 & *(void *)(a4 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t result = swift_unknownObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      v19 &= v19 - 1;
      goto LABEL_8;
    }
    int64_t v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v20) {
      goto LABEL_24;
    }
    uint64_t v26 = *(void *)(v16 + 8 * v25);
    ++v22;
    if (!v26)
    {
      int64_t v22 = v25 + 1;
      if (v25 + 1 >= v20) {
        goto LABEL_24;
      }
      uint64_t v26 = *(void *)(v16 + 8 * v22);
      if (!v26)
      {
        int64_t v22 = v25 + 2;
        if (v25 + 2 >= v20) {
          goto LABEL_24;
        }
        uint64_t v26 = *(void *)(v16 + 8 * v22);
        if (!v26) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v19 = (v26 - 1) & v26;
LABEL_8:
    uint64_t v23 = (const char *)(sub_183D44BAC() + 32);
    uint64_t v24 = sub_183D44BAC();
    nw_relay_hop_add_additional_http_header_field(v15, v23, (const char *)(v24 + 32));
    swift_release();
    uint64_t result = swift_release();
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v20)
  {
LABEL_24:
    swift_release();
    swift_unknownObjectRelease();
    sub_183138A24(v29, qword_1EB266A50);
    sub_18315E4BC(v30, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t result = swift_release();
    *uint64_t v31 = v15;
    return result;
  }
  uint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26)
  {
    int64_t v22 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v20) {
      goto LABEL_24;
    }
    uint64_t v26 = *(void *)(v16 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_23;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t ProxyConfiguration.RelayHop.init(http2RelayEndpoint:tlsOptions:additionalHTTPHeaderFields:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v6 = NWEndpoint.nw.getter();
  uint64_t v7 = nw_relay_hop_create(0, v6, *(nw_protocol_options_t *)(a2 + 16));
  swift_unknownObjectRelease();
  uint64_t v8 = a3 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(a3 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_unknownObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      v11 &= v11 - 1;
      goto LABEL_5;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v12) {
      goto LABEL_21;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_21;
      }
      uint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_21;
        }
        uint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v11 = (v18 - 1) & v18;
LABEL_5:
    uint64_t v15 = (const char *)(sub_183D44BAC() + 32);
    uint64_t v16 = sub_183D44BAC();
    nw_relay_hop_add_additional_http_header_field(v7, v15, (const char *)(v16 + 32));
    swift_release();
    uint64_t result = swift_release();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_21:
    swift_release();
    swift_unknownObjectRelease();
    sub_18315E4BC(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t result = swift_release();
    *a4 = v7;
    return result;
  }
  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_21;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

void *ProxyConfiguration.init(relayHops:)@<X0>(void *result@<X0>, nw_proxy_config_t *a2@<X8>)
{
  uint64_t v3 = result[2];
  if (v3 == 1)
  {
    uint64_t v4 = result[4];
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    nw_proxy_config_t relay = nw_proxy_config_create_relay(v4, 0);
LABEL_5:
    uint64_t result = (void *)swift_unknownObjectRelease();
    *a2 = relay;
    return result;
  }
  if (v3 == 2)
  {
    uint64_t v6 = result[4];
    uint64_t v7 = result[5];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    nw_proxy_config_t relay = nw_proxy_config_create_relay(v6, v7);
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ProxyConfiguration.init(obliviousHTTPRelay:relayResourcePath:gatewayKeyConfig:matchDomains:)@<X0>(NSObject **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, NSObject **a7@<X8>)
{
  v26[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  switch(a5 >> 62)
  {
    case 1uLL:
      if (a4 >> 32 < (int)a4) {
        __break(1u);
      }
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_1832E5D6C(a4, a5);
      oblivious_http = sub_1835B054C((int)a4, a4 >> 32, a5 & 0x3FFFFFFFFFFFFFFFLL, v8, a2, a3, a6);
      sub_1832E5E9C(a4, a5);
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(a4 + 16);
      uint64_t v20 = *(void *)(a4 + 24);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
      oblivious_http = sub_1835B054C(v19, v20, a5 & 0x3FFFFFFFFFFFFFFFLL, v8, a2, a3, a6);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v26, 0, 14);
      unint64_t v21 = (const char *)(sub_183D44BAC() + 32);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      oblivious_http = nw_proxy_config_create_oblivious_http(v8, v21, (const uint8_t *)v26, 0);
      swift_release();
      uint64_t v22 = *(void *)(a6 + 16);
      if (v22)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = a6 + 40;
        do
        {
          uint64_t v24 = sub_183D44BAC();
          nw_proxy_config_add_match_domain(oblivious_http, (const char *)(v24 + 32));
          swift_release();
          v23 += 16;
          --v22;
        }
        while (v22);
        goto LABEL_10;
      }
      break;
    default:
      v26[0] = a4;
      LOWORD(v26[1]) = a5;
      BYTE2(v26[1]) = BYTE2(a5);
      BYTE3(v26[1]) = BYTE3(a5);
      BYTE4(v26[1]) = BYTE4(a5);
      BYTE5(v26[1]) = BYTE5(a5);
      int64_t v14 = (const char *)(sub_183D44BAC() + 32);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      oblivious_http = nw_proxy_config_create_oblivious_http(v8, v14, (const uint8_t *)v26, BYTE6(a5));
      swift_release();
      uint64_t v16 = *(void *)(a6 + 16);
      if (v16)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = a6 + 40;
        do
        {
          uint64_t v18 = sub_183D44BAC();
          nw_proxy_config_add_match_domain(oblivious_http, (const char *)(v18 + 32));
          swift_release();
          v17 += 16;
          --v16;
        }
        while (v16);
LABEL_10:
        swift_bridgeObjectRelease();
      }
      break;
  }
  sub_1832E5E9C(a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_unknownObjectRelease();
  *a7 = oblivious_http;
  return result;
}

uint64_t NSURLSessionConfiguration.proxyConfigurations.getter()
{
  id v1 = objc_msgSend(v0, sel_proxyConfigurations);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64AE0);
  unint64_t v2 = sub_183D44E4C();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_183D456DC();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1835AF444(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v10;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x1853148B0](v5, v2);
      }
      else
      {
        uint64_t v7 = *(void *)(v2 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }
      unint64_t v9 = *(void *)(v10 + 16);
      unint64_t v8 = *(void *)(v10 + 24);
      if (v9 >= v8 >> 1) {
        sub_1835AF444(v8 > 1, v9 + 1, 1);
      }
      ++v5;
      *(void *)(v10 + 16) = v9 + 1;
      *(void *)(v10 + 8 * v9 + 32) = v7;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

void NSURLSessionConfiguration.proxyConfigurations.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_183D455AC();
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v3 + 1;
      swift_unknownObjectRetain();
      sub_183D4558C();
      sub_183D455BC();
      sub_183D455CC();
      sub_183D4559C();
      uint64_t v3 = v4;
    }
    while (v2 != v4);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64AE0);
  id v5 = (id)sub_183D44E3C();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setProxyConfigurations_, v5);
}

void (*NSURLSessionConfiguration.proxyConfigurations.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = NSURLSessionConfiguration.proxyConfigurations.getter();
  return sub_1835AF36C;
}

void sub_1835AF36C(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    NSURLSessionConfiguration.proxyConfigurations.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    NSURLSessionConfiguration.proxyConfigurations.setter(*a1);
  }
}

uint64_t sub_1835AF3C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1835AF464(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1835AF3E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1835AF5F0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1835AF404(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1835AF75C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1835AF424(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1835AF8BC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1835AF444(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1835AFA48(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1835AF464(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64BB0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F627C0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_1835AF5F0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F78);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_1835AF75C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61CC0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_1835AF8BC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F70);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_1835AFA48(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B38);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t _s7Network12NWParametersC4dtls3udpAcA13NWProtocolTLSC7OptionsCSg_AA0E3UDPCAHCtcfC_0(uint64_t a1)
{
  type metadata accessor for NWParameters();
  uint64_t v2 = swift_allocObject();
  nw_parameters_t v3 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v4 = swift_allocObject();
  *(void *)(v2 + 16) = v4;
  *(_DWORD *)(v4 + 24) = 0;
  id v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = v3;
  unint64_t v6 = (void **)(v4 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_1835A610C(v6);
  os_unfair_lock_unlock(v5);
  os_unfair_lock_lock(v5);
  sub_1834A471C(v6, &v20);
  os_unfair_lock_unlock(v5);
  uint64_t v7 = *(void *)(v20 + 16);
  uint64_t v8 = (nw_protocol_stack_t *)(v7 + 16);
  uint64_t v9 = (os_unfair_lock_s *)(v7 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  sub_1834A4914(v8);
  os_unfair_lock_unlock(v9);
  swift_retain();
  uint64_t v10 = swift_release_n();
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61E50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183D569A0;
    *(void *)(inited + 32) = a1;
    uint64_t v20 = inited;
    uint64_t v12 = sub_183D44E6C();
    MEMORY[0x1F4188790](v12);
    unint64_t v14 = (nw_protocol_stack_t *)(v13 + 16);
    uint64_t v15 = (os_unfair_lock_s *)(v13 + 24);
    swift_retain_n();
    os_unfair_lock_lock(v15);
    sub_1834F2C44(v14);
    os_unfair_lock_unlock(v15);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x1F4188790](v10);
    uint64_t v17 = (nw_protocol_stack_t *)&v16[4];
    uint64_t v18 = v16 + 6;
    os_unfair_lock_lock(v16 + 6);
    sub_1834F2C44(v17);
    os_unfair_lock_unlock(v18);
  }
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0()
{
  type metadata accessor for NWParameters();
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61EA0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 16) = v2;
  *(_DWORD *)(v2 + 24) = 0;
  nw_parameters_t v3 = (os_unfair_lock_s *)(v2 + 24);
  *(void *)(v2 + 16) = v1;
  uint64_t v4 = (void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  sub_1834A471C(v4, &v10);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = *(void *)(v10 + 16);
  unint64_t v6 = (nw_protocol_stack_t *)(v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1834A4914(v6);
  os_unfair_lock_unlock(v7);
  swift_retain();
  swift_release_n();
  uint64_t v8 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  sub_1835A6140((void **)(v8 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1835AFF5C(NSObject **a1)
{
  return sub_1835A6844(a1, *(void *)(v1 + 16));
}

void sub_1835AFF78(nw_parameters_t *a1)
{
  nw_parameters_set_required_interface_type(*a1, (nw_interface_type_t)*(unsigned __int8 *)(v1 + 16));
}

void sub_1835AFFA8(void **a1)
{
  nw_parameters_set_required_interface_subtype(*a1, dword_183D5B130[*(char *)(v1 + 16)]);
}

void sub_1835AFFE4(nw_parameters_t *a1)
{
  sub_1835A71E0(a1, *(void *)(v1 + 16));
}

void sub_1835B0000(nw_parameters_t *a1)
{
  sub_1835A76D0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1835B001C(void **a1)
{
  return sub_1835A7CA0(a1, *(void *)(v1 + 16));
}

void sub_1835B0038(nw_parameters_t *a1)
{
  nw_parameters_set_prohibit_expensive(*a1, *(unsigned char *)(v1 + 16));
}

void sub_1835B0068(nw_parameters_t *a1)
{
  nw_parameters_set_prohibit_constrained(*a1, *(unsigned char *)(v1 + 16));
}

void sub_1835B0098(nw_parameters_t *a1)
{
  nw_parameters_set_prefer_no_proxy(*a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_1835B00C8(NSObject **a1)
{
  return sub_1835A8C38(a1, *(void *)(v1 + 16));
}

void sub_1835B00E4(nw_parameters_t *a1)
{
  nw_parameters_set_reuse_local_address(*a1, *(unsigned char *)(v1 + 16));
}

void sub_1835B0114(nw_parameters_t *a1)
{
  nw_parameters_set_local_only(*a1, *(unsigned char *)(v1 + 16));
}

void sub_1835B0144(nw_parameters_t *a1)
{
  nw_parameters_set_include_peer_to_peer(*a1, *(unsigned char *)(v1 + 16));
}

void sub_1835B0174(nw_parameters_t *a1)
{
  nw_parameters_set_requires_dnssec_validation(*a1, *(unsigned char *)(v1 + 16));
}

void sub_1835B01A4(nw_parameters_t *a1)
{
  nw_parameters_set_service_class(*a1, (nw_service_class_t)*(unsigned __int8 *)(v1 + 16));
}

void sub_1835B01D4(nw_parameters_t *a1)
{
  nw_parameters_set_multipath_service(*a1, (nw_multipath_service_t)*(unsigned __int8 *)(v1 + 16));
}

void sub_1835B0204(nw_parameters_t *a1)
{
  nw_parameters_set_fast_open_enabled(*a1, *(unsigned char *)(v1 + 16));
}

void sub_1835B0234(nw_parameters_t *a1)
{
  nw_parameters_set_expired_dns_behavior(*a1, (nw_parameters_expired_dns_behavior_t)*(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1835B0264(NSObject **a1)
{
  return sub_1835ABB78(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1835B0284(NSObject **a1)
{
  sub_1835ABDF8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1835B02A0@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

void sub_1835B02C0(uint64_t a1)
{
  sub_1835AC54C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void sub_1835B02E0(NSObject **a1)
{
  sub_1835AC9E0(a1, v1);
}

void sub_1835B02FC(void **a1)
{
  nw_parameters_set_is_known_tracker(*a1, *(unsigned __int8 *)(v1 + 16));
}

void sub_1835B032C(NSObject **a1)
{
  uint64_t v2 = *a1;
  if (*(unsigned char *)(v1 + 16)) {
    nw_parameters_attribution_t v3 = nw_parameters_attribution_user;
  }
  else {
    nw_parameters_attribution_t v3 = nw_parameters_attribution_developer;
  }
  nw_parameters_set_attribution(v2, v3);
}

uint64_t sub_1835B0368(uint64_t *a1)
{
  return sub_1835AD5C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t, uint64_t))nw_parameters_set_account_id);
}

uint64_t sub_1835B0398(uint64_t *a1)
{
  return sub_1835AD5C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t, uint64_t))nw_parameters_set_source_application_by_bundle_id);
}

void sub_1835B03C8(void **a1)
{
  nw_parameters_set_application_id(*a1, *(void **)(v1 + 16));
}

uint64_t sub_1835B03F8()
{
  return swift_deallocObject();
}

uint64_t sub_1835B0408(uint64_t a1)
{
  return sub_1835AE1F0(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1835B0424()
{
  return swift_deallocObject();
}

uint64_t sub_1835B0434()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1835B045C()
{
  return swift_deallocObject();
}

uint64_t sub_1835B046C()
{
  return swift_deallocObject();
}

uint64_t sub_1835B047C()
{
  return swift_deallocObject();
}

uint64_t sub_1835B048C()
{
  return swift_deallocObject();
}

uint64_t sub_1835B049C(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t result = a2(*v3);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = a1 + 40;
    do
    {
      uint64_t v9 = sub_183D44BAC() + 32;
      uint64_t v10 = swift_unknownObjectRetain();
      a3(v10, v9);
      swift_unknownObjectRelease();
      uint64_t result = swift_release();
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1835B052C()
{
  return swift_deallocObject();
}

uint64_t sub_1835B053C()
{
  return swift_deallocObject();
}

uint64_t sub_1835B054C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_183D4434C();
  uint64_t v12 = (const uint8_t *)result;
  if (result)
  {
    uint64_t result = sub_183D4437C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v12 += a1 - result;
  }
  BOOL v13 = __OFSUB__(a2, a1);
  int64_t v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = sub_183D4436C();
  if (!v12)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (result >= v14) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = result;
  }
  uint64_t v16 = sub_183D44BAC();
  oblivious_http = nw_proxy_config_create_oblivious_http(a4, (const char *)(v16 + 32), v12, v15);
  swift_release();
  uint64_t v18 = *(void *)(a7 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = a7 + 40;
    do
    {
      uint64_t v20 = sub_183D44BAC();
      nw_proxy_config_add_match_domain(oblivious_http, (const char *)(v20 + 32));
      swift_release();
      v19 += 16;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)oblivious_http;
}

unint64_t sub_1835B066C()
{
  unint64_t result = qword_1E8F64AE8;
  if (!qword_1E8F64AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64AE8);
  }
  return result;
}

unint64_t sub_1835B06C4()
{
  unint64_t result = qword_1E8F64AF0;
  if (!qword_1E8F64AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64AF0);
  }
  return result;
}

unint64_t sub_1835B071C()
{
  unint64_t result = qword_1E8F64AF8;
  if (!qword_1E8F64AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64AF8);
  }
  return result;
}

unint64_t sub_1835B0774()
{
  unint64_t result = qword_1E8F64B00;
  if (!qword_1E8F64B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64B00);
  }
  return result;
}

void sub_1835B0810(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  nw_parameters_attribution_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1835A8D6C(v4, a2);

  os_unfair_lock_unlock(v5);
}

uint64_t sub_1835B08CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1835AAE38();
  *a1 = result;
  return result;
}

uint64_t sub_1835B08FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1835AB03C();
  *a1 = result;
  return result;
}

uint64_t sub_1835B0938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_145Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))NWParameters.requiredNetworkAgents.setter);
}

uint64_t sub_1835B0954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_145Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))NWParameters.preferredNetworkAgents.setter);
}

BOOL sub_1835B0994@<W0>(nw_proxy_config_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = nw_proxy_config_get_failover_allowed(*a1);
  *a2 = result;
  return result;
}

void sub_1835B09C0(BOOL *a1, nw_proxy_config_t *a2)
{
}

uint64_t sub_1835B09D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ProxyConfiguration.matchDomains.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1835B0A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_161Tm(a1, a2, a3, a4, (uint64_t (*)(void))nw_proxy_config_clear_match_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_match_domain);
}

uint64_t sub_1835B0A38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ProxyConfiguration.excludedDomains.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1835B0A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_161Tm(a1, a2, a3, a4, (uint64_t (*)(void))nw_proxy_config_clear_excluded_domains, (void (*)(uint64_t, uint64_t))nw_proxy_config_add_excluded_domain);
}

uint64_t keypath_set_161Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1835B049C(v8, a5, a6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1835B0AFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSURLSessionConfiguration.proxyConfigurations.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1835B0B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_145Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))NSURLSessionConfiguration.proxyConfigurations.setter);
}

uint64_t keypath_set_145Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t method lookup function for NWParameters(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWParameters);
}

uint64_t dispatch thunk of NWParameters.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unsigned char *storeEnumTagSinglePayload for NWParameters.ServiceClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835B0C6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.ServiceClass()
{
  return &type metadata for NWParameters.ServiceClass;
}

ValueMetadata *type metadata accessor for NWParameters.MultipathServiceType()
{
  return &type metadata for NWParameters.MultipathServiceType;
}

unsigned char *_s7Network12NWParametersC20MultipathServiceTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835B0D88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.ExpiredDNSBehavior()
{
  return &type metadata for NWParameters.ExpiredDNSBehavior;
}

uint64_t method lookup function for NWParameters.ProtocolStack(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWParameters.ProtocolStack);
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t type metadata accessor for NWParameters.PrivacyContext()
{
  return self;
}

uint64_t method lookup function for NWParameters.PrivacyContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWParameters.PrivacyContext);
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.__allocating_init(description:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.flushCache()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.disableLogging()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.requireEncryptedNameResolution(_:fallbackResolver:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

unint64_t initializeBufferWithCopyOfBuffer for NWParameters.PrivacyContext.ResolverConfiguration(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_183D4447C();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B18);
      *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v15 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v15;
          uint64_t v16 = *(void *)(a2 + 24);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = v16;
          uint64_t v17 = *(void *)(a2 + 40);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = v17;
          uint64_t v18 = *(void *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v18 != 1) {
            swift_unknownObjectRetain();
          }
          *(void *)(a1 + 48) = v18;
          break;
        case 2u:
          uint64_t v13 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v13;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v14 = sub_183D4447C();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
          break;
        case 4u:
          *(void *)a1 = *(void *)a2;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v9 = *(void *)a2;
          uint64_t v10 = *(void *)(a2 + 8);
          uint64_t v11 = *(void *)(a2 + 16);
          char v12 = *(unsigned char *)(a2 + 24);
          sub_18315E9E4(*(void *)a2, v10, v11, v12);
          *(void *)a1 = v9;
          *(void *)(a1 + 8) = v10;
          *(void *)(a1 + 16) = v11;
          *(unsigned char *)(a1 + 24) = v12;
          *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B10);
      *(void *)(a1 + *(int *)(v19 + 48)) = *(void *)(a2 + *(int *)(v19 + 48));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_183D4447C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
    int v3 = &qword_1E8F64B18;
  }
  else
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_18315E658(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 48) != 1) {
          goto LABEL_8;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v4 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        break;
      case 4u:
LABEL_8:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
    int v3 = &qword_1E8F64B10;
  }
  __swift_instantiateConcreteTypeFromMangledName(v3);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_183D4447C();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B18);
    *(void *)(a1 + *(int *)(v5 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v5 + 48));
  }
  else
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v12;
        uint64_t v13 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v13;
        uint64_t v14 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v14;
        uint64_t v15 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v15 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(a1 + 48) = v15;
        break;
      case 2u:
        uint64_t v10 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v10;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v11 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        break;
      case 4u:
        *(void *)a1 = *a2;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v8 = a2[2];
        char v9 = *((unsigned char *)a2 + 24);
        sub_18315E9E4(*a2, v7, v8, v9);
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = v8;
        *(unsigned char *)(a1 + 24) = v9;
        *(_WORD *)(a1 + 26) = *((_WORD *)a2 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B10);
    *(void *)(a1 + *(int *)(v16 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v16 + 48));
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    sub_18315E4BC(a1, (uint64_t (*)(void))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_183D4447C();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B18);
      *(void *)(a1 + *(int *)(v5 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v5 + 48));
    }
    else
    {
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = a2[3];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = a2[5];
          uint64_t v11 = a2[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v11 != 1) {
            swift_unknownObjectRetain();
          }
          *(void *)(a1 + 48) = v11;
          break;
        case 2u:
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v10 = sub_183D4447C();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
          break;
        case 4u:
          *(void *)a1 = *a2;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v6 = *a2;
          uint64_t v7 = a2[1];
          uint64_t v8 = a2[2];
          char v9 = *((unsigned char *)a2 + 24);
          sub_18315E9E4(*a2, v7, v8, v9);
          *(void *)a1 = v6;
          *(void *)(a1 + 8) = v7;
          *(void *)(a1 + 16) = v8;
          *(unsigned char *)(a1 + 24) = v9;
          *(_WORD *)(a1 + 26) = *((_WORD *)a2 + 13);
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64B10);
      *(void *)(a1 + *(int *)(v12 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v12 + 48));
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration()
{
  uint64_t result = qword_1E8F64B20;
  if (!qword_1E8F64B20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *initializeWithTake for NWParameters.PrivacyContext.ResolverConfiguration(char *a1, char *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_183D4447C();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    uint64_t v5 = &qword_1E8F64B18;
  }
  else
  {
    uint64_t v6 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v7 = sub_183D4447C();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v5 = &qword_1E8F64B10;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v5);
  *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for NWParameters.PrivacyContext.ResolverConfiguration(char *a1, char *a2)
{
  if (a1 != a2)
  {
    sub_18315E4BC((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_183D4447C();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      uint64_t v5 = &qword_1E8F64B18;
    }
    else
    {
      uint64_t v6 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v7 = sub_183D4447C();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      uint64_t v5 = &qword_1E8F64B10;
    }
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v5);
    *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1835B1C78()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    uint64_t result = sub_183D4447C();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NWParameters.Attribution(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835B1E3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.Attribution()
{
  return &type metadata for NWParameters.Attribution;
}

ValueMetadata *type metadata accessor for ProxyConfiguration()
{
  return &type metadata for ProxyConfiguration;
}

ValueMetadata *type metadata accessor for ProxyConfiguration.RelayHop()
{
  return &type metadata for ProxyConfiguration.RelayHop;
}

uint64_t sub_1835B1E94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1835B1EFC()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1F0C(int a1, void *a2)
{
  return sub_1835A7F20(a1, a2, *(char ***)(v2 + 16));
}

uint64_t sub_1835B1F14()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1F24()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1835B1F50()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1F60(unsigned int a1)
{
  return sub_1835A78D0(a1, *(char ***)(v1 + 16));
}

uint64_t sub_1835B1F68()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1F78()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1835B1FA4()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1FB4()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1FC4()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1FD4(uint64_t a1)
{
  return sub_1835AAA0C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1835B1FDC()
{
  return swift_deallocObject();
}

uint64_t sub_1835B1FEC(uint64_t a1)
{
  return sub_18350B274(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_1835B1FF4(nw_parameters_t *a1)
{
}

void sub_1835B200C(nw_parameters_t *a1)
{
}

void sub_1835B2024(nw_parameters_t *a1)
{
}

void sub_1835B203C(nw_parameters_t *a1)
{
}

void sub_1835B2064(nw_parameters_t *a1)
{
}

void sub_1835B207C(nw_parameters_t *a1)
{
}

void sub_1835B2094(nw_parameters_t *a1)
{
}

void sub_1835B20AC(nw_parameters_t *a1)
{
}

void sub_1835B20C4(nw_parameters_t *a1)
{
}

void sub_1835B20DC(nw_parameters_t *a1)
{
}

void sub_1835B20F4(nw_parameters_t *a1)
{
}

void sub_1835B210C(nw_parameters_t *a1)
{
}

void sub_1835B2124(void **a1)
{
}

void sub_1835B213C(void **a1)
{
}

uint64_t sub_1835B215C@<X0>(void *a1@<X8>)
{
  return sub_1835B02A0(a1);
}

void sub_1835B2190(NSObject **a1)
{
}

void sub_1835B21A8(NSObject **a1)
{
}

uint64_t sub_1835B21C0(uint64_t *a1)
{
  return sub_1835B0368(a1);
}

uint64_t sub_1835B21D8(uint64_t *a1)
{
  return sub_1835B0398(a1);
}

void sub_1835B2210(uint64_t a1)
{
}

uint64_t sub_1835B2230(NSObject **a1)
{
  return sub_1835AFF5C(a1);
}

void sub_1835B2248(nw_parameters_t *a1)
{
}

void sub_1835B2260(nw_parameters_t *a1)
{
}

uint64_t sub_1835B2278(void **a1)
{
  return sub_1835B001C(a1);
}

uint64_t sub_1835B2290(NSObject **a1)
{
  return sub_1835B00C8(a1);
}

uint64_t *sub_1835B22A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_183D445FC();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v9 + 8);
    void *v10 = *(uint64_t *)((char *)a2 + v9);
    v10[1] = v12;
    uint64_t v13 = *(int *)(type metadata accessor for NWActorID() + 20);
    uint64_t v14 = (char *)v10 + v13;
    uint64_t v15 = &v11[v13];
    swift_bridgeObjectRetain();
    v8((uint64_t *)v14, (uint64_t *)v15, v7);
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v21 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1835B2410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for NWActorID();
  v5(v6 + *(int *)(v7 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1835B24E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *uint64_t v9 = *(void *)(a2 + v8);
  v9[1] = v11;
  uint64_t v12 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = v10 + v12;
  swift_bridgeObjectRetain();
  v7((uint64_t)v13, v14, v6);
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v20 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_1835B25FC(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *((void *)v9 + 1) = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for NWActorID();
  v7(&v9[*(int *)(v11 + 20)], v10 + *(int *)(v11 + 20), v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (void *)(a2 + v12);
  *(void *)uint64_t v13 = *v14;
  *((void *)v13 + 1) = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1835B2748(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = type metadata accessor for NWActorID();
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  uint64_t v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  return a1;
}

char *sub_1835B282C(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for NWActorID();
  v7(&v9[*(int *)(v12 + 20)], v10 + *(int *)(v12 + 20), v6);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1835B2940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1835B2954);
}

uint64_t sub_1835B2954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_183D445FC();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for NWActorID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1835B2A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835B2A80);
}

uint64_t sub_1835B2A80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_183D445FC();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for NWActorID();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for RemoteCallEnvelope(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F64BB8);
}

uint64_t sub_1835B2BB4()
{
  uint64_t result = sub_183D445FC();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NWActorID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1835B2CA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWActorSystemProtobuf_ActorID(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  int v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for NWActorSystemProtobuf_RemoteCall(0);
  v23[1] = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (void *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x1E4FBC860];
  void v8[2] = 0;
  void v8[3] = 0xE000000000000000;
  void v8[4] = v9;
  v8[5] = v9;
  v8[6] = 0;
  sub_183D446AC();
  uint64_t v10 = (uint64_t)v8 + *(int *)(v6 + 40);
  v23[0] = *(void *)(v3 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23[0])(v10, 1, 1, v2);
  *uint64_t v8 = sub_183D445AC();
  v8[1] = v11;
  uint64_t v12 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  uint64_t v13 = (void *)(v0 + v12[5]);
  sub_183D446AC();
  uint64_t v14 = v13[1];
  *int v5 = *v13;
  v5[1] = v14;
  type metadata accessor for NWActorID();
  swift_bridgeObjectRetain();
  v5[2] = sub_183D445AC();
  v5[3] = v15;
  sub_183138A24(v10, &qword_1E8F63228);
  sub_1835B49AC((uint64_t)v5, v10, type metadata accessor for NWActorSystemProtobuf_ActorID);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v23[0])(v10, 0, 1, v2);
  uint64_t v16 = (uint64_t *)(v1 + v12[6]);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[2] = v18;
  void v8[3] = v17;
  uint64_t v19 = *(void *)(v1 + v12[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[4] = v19;
  uint64_t v20 = *(void *)(v1 + v12[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[5] = v20;
  v8[6] = *(void *)(v1 + v12[9]);
  sub_1835B4A14(&qword_1E8F631C8, (void (*)(uint64_t))type metadata accessor for NWActorSystemProtobuf_RemoteCall);
  uint64_t v21 = sub_183D447BC();
  sub_1835B4824((uint64_t)v8, type metadata accessor for NWActorSystemProtobuf_RemoteCall);
  return v21;
}

uint64_t sub_1835B2F98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63228);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v49 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NWActorSystemProtobuf_ActorID(0);
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v45 = (void **)((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (void **)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62DD0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v51 = (uint64_t)&v42 - v16;
  uint64_t v17 = sub_183D445FC();
  uint64_t v50 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for NWActorSystemProtobuf_RemoteCall(0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (void **)((char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v55 = a1;
  unint64_t v56 = a2;
  uint64_t v23 = sub_183D446DC();
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = 0;
  MEMORY[0x1F4188790](v23 - 8);
  sub_1832E5D6C(a1, a2);
  sub_183D446CC();
  sub_1835B4A14(&qword_1E8F631C8, (void (*)(uint64_t))type metadata accessor for NWActorSystemProtobuf_RemoteCall);
  unint64_t v24 = v57;
  sub_183D447CC();
  if (v24) {
    return sub_1832E5E9C(a1, a2);
  }
  uint64_t v42 = v11;
  uint64_t v43 = v19;
  uint64_t v44 = a1;
  unint64_t v57 = a2;
  swift_bridgeObjectRetain();
  uint64_t v26 = v51;
  sub_183D4459C();
  swift_bridgeObjectRelease();
  sub_183138900(v26, (uint64_t)v15, &qword_1E8F62DD0);
  uint64_t v27 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v15, 1, v17) == 1)
  {
    sub_183138A24((uint64_t)v15, &qword_1E8F62DD0);
    sub_183559CE0();
    swift_allocError();
    strcpy(v28, "Missing callID");
    v28[15] = -18;
    swift_willThrow();
    sub_1832E5E9C(v44, v57);
    sub_183138A24(v51, &qword_1E8F62DD0);
    return sub_1835B4824((uint64_t)v22, type metadata accessor for NWActorSystemProtobuf_RemoteCall);
  }
  else
  {
    uint64_t v29 = v46;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v31 = v43;
    v30(v43, v15, v17);
    sub_183138A24(v51, &qword_1E8F62DD0);
    uint64_t v51 = v17;
    v30(v29, v31, v17);
    uint64_t v32 = v49;
    sub_183138900((uint64_t)v22 + *(int *)(v20 + 40), v49, &qword_1E8F63228);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v32, 1, v48) == 1)
    {
      uint64_t v33 = v45;
      *uint64_t v45 = 0;
      v33[1] = 0xE000000000000000;
      v33[2] = 0;
      void v33[3] = 0xE000000000000000;
      sub_183D446AC();
      sub_183138A24(v32, &qword_1E8F63228);
    }
    else
    {
      uint64_t v33 = v45;
      sub_1835B49AC(v32, (uint64_t)v45, type metadata accessor for NWActorSystemProtobuf_ActorID);
    }
    unint64_t v34 = v57;
    uint64_t v35 = v44;
    uint64_t v36 = v42;
    sub_1835598B4(v33, v42);
    sub_1832E5E9C(v35, v34);
    uint64_t v37 = (int *)type metadata accessor for RemoteCallEnvelope(0);
    sub_1835B49AC((uint64_t)v36, (uint64_t)&v29[v37[5]], (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v38 = v22[3];
    uint64_t v39 = &v29[v37[6]];
    *(void *)uint64_t v39 = v22[2];
    *((void *)v39 + 1) = v38;
    uint64_t v40 = v22[5];
    *(void *)&v29[v37[7]] = v22[4];
    *(void *)&v29[v37[8]] = v40;
    uint64_t v41 = v22[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_1835B4824((uint64_t)v22, type metadata accessor for NWActorSystemProtobuf_RemoteCall);
    *(void *)&v29[v37[9]] = v41;
  }
  return result;
}

void *sub_1835B3608@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1835B3614()
{
  return sub_183D44E1C();
}

uint64_t sub_1835B3674()
{
  return sub_183D44E0C();
}

uint64_t sub_1835B36C4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64C00);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835B4718();
  sub_183D45C0C();
  LOBYTE(v12) = 0;
  sub_183D445FC();
  sub_1835B4A14(&qword_1E8F63E88, MEMORY[0x1E4F27990]);
  sub_183D4586C();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for RemoteCallEnvelope(0);
    LOBYTE(v12) = 1;
    type metadata accessor for NWActorID();
    sub_1835B4A14(&qword_1E8F64C08, (void (*)(uint64_t))type metadata accessor for NWActorID);
    sub_183D4586C();
    LOBYTE(v12) = 2;
    sub_183D4584C();
    uint64_t v12 = *(void *)(v3 + v9[7]);
    HIBYTE(v11) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F60);
    sub_1835B4884(&qword_1E8F64C10);
    sub_183D4586C();
    uint64_t v12 = *(void *)(v3 + v9[8]);
    HIBYTE(v11) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64BE8);
    sub_1835B48E8(&qword_1E8F64C18, (void (*)(void))sub_1832E478C);
    sub_183D4586C();
    uint64_t v12 = *(void *)(v3 + v9[9]);
    HIBYTE(v11) = 5;
    sub_1835B4958();
    sub_183D4586C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1835B3A30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v21 = type metadata accessor for NWActorID();
  MEMORY[0x1F4188790](v21);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_183D445FC();
  uint64_t v19 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v23 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64BC8);
  uint64_t v20 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835B4718();
  unint64_t v24 = v8;
  uint64_t v12 = (uint64_t)v25;
  sub_183D45BCC();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  int64_t v25 = a1;
  LOBYTE(v27) = 0;
  sub_1835B4A14(&qword_1E8F63E98, MEMORY[0x1E4F27990]);
  sub_183D457DC();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v11, v23, v5);
  LOBYTE(v27) = 1;
  sub_1835B4A14(&qword_1E8F64BD8, (void (*)(uint64_t))type metadata accessor for NWActorID);
  sub_183D457DC();
  sub_1835B49AC((uint64_t)v4, (uint64_t)&v11[v9[5]], (uint64_t (*)(void))type metadata accessor for NWActorID);
  LOBYTE(v27) = 2;
  uint64_t v13 = sub_183D457BC();
  uint64_t v14 = (uint64_t *)&v11[v9[6]];
  *uint64_t v14 = v13;
  v14[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F61F60);
  char v26 = 3;
  sub_1835B4884(&qword_1E8F64BE0);
  sub_183D457DC();
  *(void *)&v11[v9[7]] = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64BE8);
  char v26 = 4;
  sub_1835B48E8(&qword_1E8F64BF0, (void (*)(void))sub_1832E5D18);
  sub_183D457DC();
  *(void *)&v11[v9[8]] = v27;
  char v26 = 5;
  sub_1835B476C();
  sub_183D457DC();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v22);
  *(void *)&v11[v9[9]] = v27;
  sub_1835B47C0((uint64_t)v11, v18);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
  return sub_1835B4824((uint64_t)v11, type metadata accessor for RemoteCallEnvelope);
}

uint64_t sub_1835B4120@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = sub_183D445FC();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64C80);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CancelRemoteCall(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835B5724();
  sub_183D45BCC();
  if (!v2)
  {
    sub_1835B4A14(&qword_1E8F63E98, MEMORY[0x1E4F27990]);
    sub_183D457DC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1835B49AC((uint64_t)v11, v15, type metadata accessor for CancelRemoteCall);
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

void *sub_1835B43B4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1835B43C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1835B43DC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1835B43F0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1835B4420@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1835B444C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1835B4470(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1835B4484(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1835B4498(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1835B44AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1835B44C0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1835B44D4(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1835B44E8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1835B44FC()
{
  return *v0 == 0;
}

void *sub_1835B450C(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1835B4520@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1835B4530@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1834CCA78(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t sub_1835B4570()
{
  unint64_t result = 0x44496C6C6163;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E65697069636572;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x53636972656E6567;
      break;
    case 4:
      unint64_t result = 1936159329;
      break;
    case 5:
      unint64_t result = 0x736E6F6974706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1835B463C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1835B549C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1835B4664(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1835B4670(uint64_t a1)
{
  unint64_t v2 = sub_1835B4718();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835B46AC(uint64_t a1)
{
  unint64_t v2 = sub_1835B4718();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835B46E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1835B3A30(a1, a2);
}

uint64_t sub_1835B4700(void *a1)
{
  return sub_1835B36C4(a1);
}

unint64_t sub_1835B4718()
{
  unint64_t result = qword_1E8F64BD0;
  if (!qword_1E8F64BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64BD0);
  }
  return result;
}

unint64_t sub_1835B476C()
{
  unint64_t result = qword_1E8F64BF8;
  if (!qword_1E8F64BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64BF8);
  }
  return result;
}

uint64_t sub_1835B47C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteCallEnvelope(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1835B4824(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1835B4884(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F61F60);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1835B48E8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F64BE8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1835B4958()
{
  unint64_t result = qword_1E8F64C20;
  if (!qword_1E8F64C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C20);
  }
  return result;
}

uint64_t sub_1835B49AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1835B4A14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1835B4A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1835B4AC8(uint64_t a1)
{
  uint64_t v2 = sub_183D445FC();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1835B4B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1835B4B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1835B4BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1835B4C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1835B4CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1835B4CD0);
}

uint64_t sub_1835B4CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1835B4D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835B4D50);
}

uint64_t sub_1835B4D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CancelRemoteCall(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F64C28);
}

uint64_t sub_1835B4DE0()
{
  uint64_t result = sub_183D445FC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RemoteCallEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835B4F38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteCallEnvelope.CodingKeys()
{
  return &type metadata for RemoteCallEnvelope.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteCallEnvelope.Options()
{
  return &type metadata for RemoteCallEnvelope.Options;
}

unint64_t sub_1835B4F84()
{
  unint64_t result = qword_1E8F64C38;
  if (!qword_1E8F64C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C38);
  }
  return result;
}

unint64_t sub_1835B4FDC()
{
  unint64_t result = qword_1E8F64C40;
  if (!qword_1E8F64C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C40);
  }
  return result;
}

unint64_t sub_1835B5034()
{
  unint64_t result = qword_1E8F64C48;
  if (!qword_1E8F64C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C48);
  }
  return result;
}

unint64_t sub_1835B508C()
{
  unint64_t result = qword_1E8F64C50;
  if (!qword_1E8F64C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C50);
  }
  return result;
}

unint64_t sub_1835B50E4()
{
  unint64_t result = qword_1E8F64C58;
  if (!qword_1E8F64C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C58);
  }
  return result;
}

uint64_t sub_1835B5138()
{
  return 0x44496C6C6163;
}

uint64_t sub_1835B514C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x44496C6C6163 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_183D4592C();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1835B51DC(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1835B51E8(uint64_t a1)
{
  unint64_t v2 = sub_1835B5724();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835B5224(uint64_t a1)
{
  unint64_t v2 = sub_1835B5724();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835B5260@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1835B4120(a1, a2);
}

uint64_t sub_1835B5278(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64C70);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835B5724();
  sub_183D45C0C();
  sub_183D445FC();
  sub_1835B4A14(&qword_1E8F63E88, MEMORY[0x1E4F27990]);
  sub_183D4586C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1835B53F0()
{
  unint64_t result = qword_1E8F64C60;
  if (!qword_1E8F64C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C60);
  }
  return result;
}

unint64_t sub_1835B5448()
{
  unint64_t result = qword_1E8F64C68;
  if (!qword_1E8F64C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C68);
  }
  return result;
}

uint64_t sub_1835B549C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44496C6C6163 && a2 == 0xE600000000000000;
  if (v2 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xE900000000000074 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000183E248E0 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x53636972656E6567 && a2 == 0xEB00000000736275 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1936159329 && a2 == 0xE400000000000000 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_183D4592C();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_1835B5724()
{
  unint64_t result = qword_1E8F64C78;
  if (!qword_1E8F64C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C78);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CancelRemoteCall.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1835B5814);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CancelRemoteCall.CodingKeys()
{
  return &type metadata for CancelRemoteCall.CodingKeys;
}

unint64_t sub_1835B5850()
{
  unint64_t result = qword_1E8F64C88;
  if (!qword_1E8F64C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C88);
  }
  return result;
}

unint64_t sub_1835B58A8()
{
  unint64_t result = qword_1E8F64C90;
  if (!qword_1E8F64C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C90);
  }
  return result;
}

unint64_t sub_1835B5900()
{
  unint64_t result = qword_1E8F64C98;
  if (!qword_1E8F64C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64C98);
  }
  return result;
}

uint64_t sub_1835B5958(void *a1)
{
  BOOL v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D48);
  uint64_t v43 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62AA0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v47 = (void (*)(char *, uint64_t, uint64_t))v7;
    id v10 = a1;
    if (qword_1E8F621A8 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_183D4498C();
    __swift_project_value_buffer(v11, (uint64_t)qword_1E8F64CA0);
    id v12 = a1;
    id v13 = a1;
    uint64_t v14 = sub_183D4496C();
    os_log_type_t v15 = sub_183D452BC();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v45 = v1;
      uint64_t v46 = v4;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      id v19 = a1;
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v48 = (void *)v20;
      sub_183D453AC();
      *uint64_t v18 = v20;

      _os_log_impl(&dword_1830D4000, v14, v15, "Marking file as failed: %@", v17, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61A60);
      swift_arrayDestroy();
      MEMORY[0x185318E50](v18, -1, -1);
      uint64_t v21 = v17;
      BOOL v2 = v45;
      uint64_t v4 = v46;
      MEMORY[0x185318E50](v21, -1, -1);
    }
    else
    {
    }
    uint64_t v7 = (uint64_t)v47;
  }
  else
  {
    if (qword_1E8F621A8 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_183D4498C();
    __swift_project_value_buffer(v23, (uint64_t)qword_1E8F64CA0);
    unint64_t v24 = sub_183D4496C();
    os_log_type_t v25 = sub_183D452BC();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl(&dword_1830D4000, v24, v25, "Marking file as completed", v26, 2u);
      MEMORY[0x185318E50](v26, -1, -1);
    }
  }
  uint64_t v27 = MEMORY[0x1F4188790](v22);
  *(&v42 - 2) = (uint64_t)a1;
  *(&v42 - 1) = (uint64_t)v2;
  MEMORY[0x1F4188790](v27);
  *(&v42 - 2) = (uint64_t)sub_1835B9240;
  *(&v42 - 1) = v28;
  uint64_t v30 = v29 + 4;
  os_unfair_lock_lock(v29 + 4);
  sub_1835071D4(v31);
  os_unfair_lock_unlock(v30);
  MEMORY[0x1F4188790](v32);
  *(&v42 - 2) = (uint64_t)sub_1835B9228;
  *(&v42 - 1) = (uint64_t)v2;
  os_unfair_lock_lock(v30);
  sub_1834F0460(&v48);
  os_unfair_lock_unlock(v30);
  uint64_t v45 = v48;
  uint64_t v33 = v48[2];
  if (v33)
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v34 = v8 + 16;
    uint64_t v36 = v44;
    uint64_t v37 = (uint64_t)v45 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v46 = *(void *)(v34 + 56);
    uint64_t v47 = v35;
    uint64_t v38 = v34;
    uint64_t v39 = (void (**)(char *, uint64_t))(v43 + 8);
    do
    {
      v47(v36, v37, v7);
      LOBYTE(v48) = 1;
      sub_183D450FC();
      (*v39)(v6, v4);
      uint64_t v48 = a1;
      id v40 = a1;
      sub_183D4510C();
      (*(void (**)(char *, uint64_t))(v38 - 8))(v36, v7);
      v37 += v46;
      --v33;
    }
    while (v33);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835B5EA0(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D48);
  uint64_t v32 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62AA0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = *a1;
  if (qword_1E8F621A8 != -1) {
    swift_once();
  }
  int v33 = v11;
  uint64_t v12 = sub_183D4498C();
  __swift_project_value_buffer(v12, (uint64_t)qword_1E8F64CA0);
  id v13 = sub_183D4496C();
  os_log_type_t v14 = sub_183D452BC();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl(&dword_1830D4000, v13, v14, "Updating file state", v15, 2u);
    MEMORY[0x185318E50](v15, -1, -1);
  }

  MEMORY[0x1F4188790](v16);
  v31[-2] = sub_1835B9228;
  v31[-1] = v2;
  uint64_t v18 = v17 + 4;
  os_unfair_lock_lock(v17 + 4);
  sub_1834F0460(&v36);
  os_unfair_lock_unlock(v18);
  uint64_t v19 = *(void *)(v36 + 16);
  if (v19)
  {
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v20 = v8 + 16;
    uint64_t v22 = *(unsigned __int8 *)(v20 + 64);
    v31[1] = v36;
    uint64_t v23 = v36 + ((v22 + 32) & ~v22);
    uint64_t v34 = *(void *)(v20 + 56);
    uint64_t v35 = v21;
    unint64_t v24 = v6;
    uint64_t v25 = v4;
    char v26 = (void (**)(char *, uint64_t))(v32 + 8);
    uint64_t v27 = (void (**)(char *, uint64_t))(v20 - 8);
    uint64_t v28 = v10;
    char v29 = v33;
    do
    {
      v35(v28, v23, v7);
      LOBYTE(v36) = v29;
      sub_183D450FC();
      (*v26)(v24, v25);
      (*v27)(v28, v7);
      v23 += v34;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1835B61C4()
{
  uint64_t v0 = sub_183D4498C();
  __swift_allocate_value_buffer(v0, qword_1E8F64CA0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1E8F64CA0);
  if (qword_1E8F621C0 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1E8F7A940);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1835B628C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D50);
  swift_allocObject();
  uint64_t result = sub_183D45C5C();
  qword_1E8F64CB8 = result;
  return result;
}

uint64_t static NWFile1.$delegate.getter()
{
  if (qword_1E8F621B0 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t static NWFile1.delegate.getter()
{
  if (qword_1E8F621B0 != -1) {
    swift_once();
  }
  return sub_183D45C6C();
}

uint64_t NWFile1.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v4 = sub_183D4447C();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t NWFile1.transferState.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64CC0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62AA0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  int v11 = &v15[-v10];
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBD120], v1);
  sub_183D450BC();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v11, v9, v5);
  uint64_t v12 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v19 = v0;
  uint64_t v20 = v11;
  uint64_t v16 = sub_1835B687C;
  uint64_t v17 = &v18;
  id v13 = v12 + 4;
  os_unfair_lock_lock(v12 + 4);
  sub_1835B84E4((uint64_t)&v21);
  os_unfair_lock_unlock(v13);
  if (v22 == 255) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v5);
  }
  if ((v22 & 1) == 0) {
    uint64_t v21 = 0;
  }
  sub_183D4510C();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v5);
}

id sub_1835B66A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62AA0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(unsigned __int8 *)(a1 + 40);
  if (v10 == 255)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    swift_beginAccess();
    unint64_t v11 = *(void *)(a1 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 24) = v11;
    char v18 = (unint64_t *)(a1 + 24);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v11 = sub_1834B53DC(0, *(void *)(v11 + 16) + 1, 1, v11);
      *(void *)(a1 + 24) = v11;
    }
    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v13 = *(void *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      unint64_t v11 = sub_1834B53DC(v13 > 1, v14 + 1, 1, v11);
      *char v18 = v11;
    }
    *(void *)(v11 + 16) = v14 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v14, v9, v6);
    swift_endAccess();
    LOBYTE(v10) = *(unsigned char *)(a1 + 40);
  }
  os_log_type_t v15 = *(void **)(a1 + 32);
  *(void *)a3 = v15;
  *(unsigned char *)(a3 + 8) = v10;
  return sub_1835B92AC(v15, v10);
}

id sub_1835B687C@<X0>(uint64_t a1@<X8>)
{
  return sub_1835B66A0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t NWFile1.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61DC0);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 16) = v3;
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = -1;
  uint64_t v5 = v2 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v6 = sub_183D4447C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a1, v6);
  return v2;
}

uint64_t NWFile1.init(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61DC0);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = -1;
  uint64_t v5 = v1 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v6 = sub_183D4447C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a1, v6);
  return v1;
}

uint64_t NWFile1.description.getter()
{
  return 0x28656C6946574ELL;
}

uint64_t NWFile1.waitUntilComplete()()
{
  v1[3] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64CD0);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64CD8);
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1835B6BC8, 0, 0);
}

uint64_t sub_1835B6BC8()
{
  unint64_t v14 = v0;
  uint64_t v1 = v0[3];
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = sub_1835B84FC;
  *(void *)(v3 + 24) = v1;
  os_unfair_lock_lock(v2 + 4);
  sub_1835B84E4((uint64_t)&v12);
  os_unfair_lock_unlock(v2 + 4);
  int v4 = v13;
  swift_task_dealloc();
  if (v4 == 255)
  {
    uint64_t v6 = v0[5];
    uint64_t v5 = v0[6];
    uint64_t v7 = v0[4];
    NWFile1.transferState.getter();
    sub_183D4501C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[10] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1835B6DE8;
    uint64_t v9 = v0[7];
    return MEMORY[0x1F4187ED8](v0 + 11, 0, 0, v9, v0 + 2);
  }
  else
  {
    if (v4) {
      swift_willThrow();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    int v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1835B6DE8()
{
  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = sub_1835B7024;
  }
  else {
    uint64_t v1 = sub_1835B6EF8;
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

uint64_t sub_1835B6EF8()
{
  if (*(unsigned char *)(v0 + 88) == 2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1835B6DE8;
    uint64_t v4 = *(void *)(v0 + 56);
    return MEMORY[0x1F4187ED8](v0 + 88, 0, 0, v4, v0 + 16);
  }
}

uint64_t sub_1835B7024()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t NWFile1.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  NWFile1.init(from:)(a1);
  return v2;
}

uint64_t *NWFile1.init(from:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v50 = *v2;
  uint64_t v44 = sub_183D4447C();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v44);
  uint64_t v41 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v45 = (char *)&v40 - v6;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64CE0);
  uint64_t v43 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v49 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_183D456AC();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64CE8);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for NWFileSerializationContext(0);
  uint64_t v15 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v48 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8F61DC0);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  v2[2] = v17;
  v2[3] = v18;
  v2[4] = 0;
  *((unsigned char *)v2 + 40) = -1;
  uint64_t v19 = a1[3];
  uint64_t v51 = a1;
  __swift_project_boxed_opaque_existential_2(a1, v19);
  uint64_t v20 = sub_183D45BBC();
  if (qword_1E8F621B8 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v8, (uint64_t)qword_1E8F7A928);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, v8);
  if (*(void *)(v20 + 16) && (unint64_t v22 = sub_18359A420((uint64_t)v11), (v23 & 1) != 0))
  {
    sub_1834F26A8(*(void *)(v20 + 56) + 32 * v22, (uint64_t)&v52);
  }
  else
  {
    long long v52 = 0u;
    long long v53 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!*((void *)&v53 + 1))
  {
    sub_183138A24((uint64_t)&v52, (uint64_t *)&unk_1E8F61D90);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, 1, 1, v54);
    goto LABEL_13;
  }
  uint64_t v24 = v54;
  int v25 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, v25 ^ 1u, 1, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v24) == 1)
  {
LABEL_13:
    sub_183138A24((uint64_t)v14, &qword_1E8F64CE8);
    uint64_t v30 = sub_183D4554C();
    swift_allocError();
    uint64_t v32 = v31;
    sub_183D4553C();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBA78], v30);
    swift_willThrow();
    uint64_t v27 = v51;
    goto LABEL_14;
  }
  char v26 = v48;
  sub_1835B85C4((uint64_t)v14, (uint64_t)v48);
  uint64_t v27 = v51;
  __swift_project_boxed_opaque_existential_2(v51, v51[3]);
  sub_1835B8628();
  uint64_t v28 = v47;
  sub_183D45BCC();
  if (v28)
  {
    sub_1834BDF28((uint64_t)v26);
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1835B85A0((void *)v2[4], *((unsigned char *)v2 + 40));
    swift_deallocPartialClassInstance();
    goto LABEL_15;
  }
  sub_1835B867C(&qword_1E8F64CF8);
  uint64_t v29 = v44;
  sub_183D457DC();
  __swift_project_boxed_opaque_existential_2(v26, v26[3]);
  uint64_t v47 = sub_183D4440C();
  uint64_t v35 = v34;
  uint64_t v36 = (void (*)(char *, char *, uint64_t))((char *)v26 + *(int *)(v54 + 20));
  if (qword_1E8F621B0 != -1) {
    swift_once();
  }
  sub_183D45C6C();
  uint64_t v37 = v41;
  sub_18354E04C(v47, v35, v36, (uint64_t)&v52, v41);
  sub_183138A24((uint64_t)&v52, &qword_1E8F63C78);
  swift_bridgeObjectRelease();
  uint64_t v38 = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))((uint64_t)v2 + OBJC_IVAR____TtC7Network7NWFile1_fileURL, v37, v29);
  uint64_t v39 = v48;
  __swift_project_boxed_opaque_existential_2(v48, v48[3]);
  sub_18354EECC();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v29);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v46);
  sub_1834BDF28((uint64_t)v39);
LABEL_15:
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v27);
  return v2;
}

uint64_t NWFile1.encode(to:)(void *a1)
{
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D00);
  uint64_t v27 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_183D456AC();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64CE8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for NWFileSerializationContext(0);
  uint64_t v10 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v28 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  uint64_t v12 = sub_183D45BFC();
  if (qword_1E8F621B8 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v3, (uint64_t)qword_1E8F7A928);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
  if (*(void *)(v12 + 16) && (unint64_t v14 = sub_18359A420((uint64_t)v6), (v15 & 1) != 0))
  {
    sub_1834F26A8(*(void *)(v12 + 56) + 32 * v14, (uint64_t)&v33);
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((void *)&v34 + 1))
  {
    sub_183138A24((uint64_t)&v33, (uint64_t *)&unk_1E8F61D90);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v35);
    goto LABEL_13;
  }
  uint64_t v16 = v35;
  int v17 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, v17 ^ 1u, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v16) == 1)
  {
LABEL_13:
    sub_183138A24((uint64_t)v9, &qword_1E8F64CE8);
    uint64_t v24 = sub_183D4556C();
    swift_allocError();
    char v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D08);
    v26[3] = MEMORY[0x1E4FBB1A0];
    *char v26 = 0;
    v26[1] = 0xE000000000000000;
    sub_183D4553C();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBAA0], v24);
    return swift_willThrow();
  }
  uint64_t v18 = v28;
  sub_1835B85C4((uint64_t)v9, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835B8628();
  uint64_t v19 = v30;
  sub_183D45C0C();
  uint64_t v20 = v31;
  sub_183D4447C();
  sub_1835B867C(&qword_1E8F64D10);
  uint64_t v21 = v32;
  uint64_t v22 = v29;
  sub_183D4586C();
  if (!v22)
  {
    __swift_project_boxed_opaque_existential_2(v18, v18[3]);
    sub_18354F260(v20);
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v21);
  return sub_1834BDF28((uint64_t)v18);
}

void sub_1835B7E44(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = a1;
    unsigned __int8 v3 = *(unsigned char *)(a2 + 40);
    *(unsigned char *)(a2 + 40) = 1;
    id v4 = a1;
    uint64_t v5 = v2;
    unsigned __int8 v6 = v3;
  }
  else
  {
    uint64_t v5 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    unsigned __int8 v7 = *(unsigned char *)(a2 + 40);
    *(unsigned char *)(a2 + 40) = 0;
    unsigned __int8 v6 = v7;
  }
  sub_1835B85A0(v5, v6);
}

uint64_t sub_1835B7EB0()
{
  return sub_183D45B4C();
}

uint64_t sub_1835B7F04()
{
  return sub_183D44C4C();
}

uint64_t sub_1835B7F1C()
{
  return sub_183D45B4C();
}

uint64_t sub_1835B7F6C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_183D4575C();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1835B7FC0(void *a1@<X8>)
{
  *a1 = 0x4C5255656C6966;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1835B7FDC()
{
  return 0x4C5255656C6966;
}

uint64_t sub_1835B7FF4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_183D4575C();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1835B804C(uint64_t a1)
{
  unint64_t v2 = sub_1835B8628();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835B8088(uint64_t a1)
{
  unint64_t v2 = sub_1835B8628();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NWFile1.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_1835B85A0(*(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v2 = sub_183D4447C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t NWFile1.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_1835B85A0(*(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v2 = sub_183D4447C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t *sub_1835B8200@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = NWFile1.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1835B8258(void *a1)
{
  return NWFile1.encode(to:)(a1);
}

uint64_t sub_1835B827C()
{
  return 0x28656C6946574ELL;
}

BOOL static NWFile1.TransferPhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWFile1.TransferPhase.hash(into:)()
{
  return sub_183D45B0C();
}

uint64_t NWFile1.TransferPhase.hashValue.getter()
{
  return sub_183D45B4C();
}

uint64_t sub_1835B83B4()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D58);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_183D456AC();
  __swift_allocate_value_buffer(v3, qword_1E8F7A928);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1E8F7A928);
  sub_183D4569C();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

void *sub_1835B84E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1835B8534(a1);
}

id sub_1835B84FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 8) = v3;
  return sub_1835B92AC(v2, v3);
}

void *sub_1835B8534@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v6);
  if (!v2)
  {
    char v5 = v7;
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t type metadata accessor for NWFileSerializationContext(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F64D20);
}

void sub_1835B85A0(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_1835B85B8(a1, a2 & 1);
  }
}

void sub_1835B85B8(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_1835B85C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWFileSerializationContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1835B8628()
{
  unint64_t result = qword_1E8F64CF0;
  if (!qword_1E8F64CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64CF0);
  }
  return result;
}

uint64_t sub_1835B867C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_183D4447C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1835B86C4()
{
  unint64_t result = qword_1E8F64D18;
  if (!qword_1E8F64D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64D18);
  }
  return result;
}

uint64_t sub_1835B8718()
{
  return type metadata accessor for NWFile1(0);
}

uint64_t type metadata accessor for NWFile1(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F61C68);
}

uint64_t sub_1835B8740()
{
  uint64_t result = sub_183D4447C();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NWFile1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NWFile1);
}

uint64_t dispatch thunk of NWFile1.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWFile1.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for NWFile1.TransferState()
{
  return &type metadata for NWFile1.TransferState;
}

unsigned char *_s7Network7NWFile1C13TransferPhaseOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835B892CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NWFile1.TransferPhase()
{
  return &type metadata for NWFile1.TransferPhase;
}

uint64_t dispatch thunk of NWFileTransferDelegate.receivingDestinationDirectory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unsigned char *storeEnumTagSinglePayload for NWFile1.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1835B8A14);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWFile1.CodingKeys()
{
  return &type metadata for NWFile1.CodingKeys;
}

void *sub_1835B8A4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)((char *)v4 + v8);
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *(void *)(v10 + 8);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = *(int *)(type metadata accessor for NWActorID() + 20);
    unint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = v10 + v13;
    uint64_t v16 = sub_183D445FC();
    int v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_1835B8B8C(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_2(a1);
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v6 = sub_183D445FC();
  long long v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1835B8C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = sub_183D445FC();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t *sub_1835B8D00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t *)((char *)a1 + v6);
  uint64_t v8 = (uint64_t *)((char *)a2 + v6);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v10 = (char *)v7 + v9;
  uint64_t v11 = (char *)v8 + v9;
  uint64_t v12 = sub_183D445FC();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_1835B8DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  uint64_t v8 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v9 = v6 + v8;
  uint64_t v10 = v7 + v8;
  uint64_t v11 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1835B8E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_destroy_boxed_opaque_existential_2(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = (char *)v9 + v11;
  uint64_t v14 = sub_183D445FC();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1835B8F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1835B8F1C);
}

uint64_t sub_1835B8F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NWActorID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1835B8FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835B8FE0);
}

uint64_t sub_1835B8FE0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NWActorID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1835B9088()
{
  uint64_t result = type metadata accessor for NWActorID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1835B9124()
{
  unint64_t result = qword_1E8F64D30;
  if (!qword_1E8F64D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64D30);
  }
  return result;
}

unint64_t sub_1835B917C()
{
  unint64_t result = qword_1E8F64D38;
  if (!qword_1E8F64D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64D38);
  }
  return result;
}

unint64_t sub_1835B91D4()
{
  unint64_t result = qword_1E8F64D40;
  if (!qword_1E8F64D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64D40);
  }
  return result;
}

uint64_t sub_1835B9228@<X0>(void *a1@<X8>)
{
  return sub_1835B925C(a1);
}

void sub_1835B9240()
{
  sub_1835B7E44(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1835B925C@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

id sub_1835B92AC(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1835B92C4(result, a2 & 1);
  }
  return result;
}

id sub_1835B92C4(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

uint64_t *sub_1835B92D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_183D445FC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1832E5D6C(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = *((void *)v15 + 3);
    int v17 = v15[32];
    if ((~v16 & 0x3000000000000000) != 0 || v17 != 255)
    {
      char v20 = v17 & 1;
      uint64_t v21 = *(void *)v15;
      unint64_t v22 = *((void *)v15 + 1);
      uint64_t v23 = *((void *)v15 + 2);
      sub_18353673C(*(void *)v15, v22, v23, *((void *)v15 + 3), v17 & 1);
      *(void *)uint64_t v14 = v21;
      *((void *)v14 + 1) = v22;
      *((void *)v14 + 2) = v23;
      *((void *)v14 + 3) = v16;
      v14[32] = v20;
    }
    else
    {
      long long v18 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v18;
      v14[32] = v15[32];
    }
    uint64_t v24 = a3[7];
    int v25 = (char *)a1 + v24;
    char v26 = (char *)a2 + v24;
    *(void *)int v25 = *(void *)v26;
    v25[8] = v26[8];
  }
  return a1;
}

uint64_t sub_1835B9450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t result = sub_1832E5E9C(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  unint64_t v7 = *(void *)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v6 + 32);
  if ((~v7 & 0x3000000000000000) != 0 || v8 != 255)
  {
    uint64_t v9 = *(void *)v6;
    unint64_t v10 = *(void *)(v6 + 8);
    uint64_t v11 = *(void *)(v6 + 16);
    return sub_1835367E4(v9, v10, v11, v7, v8 & 1);
  }
  return result;
}

uint64_t sub_1835B9508(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  int v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1832E5D6C(*v9, v11);
  *int v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(v14 + 24);
  int v16 = *(unsigned __int8 *)(v14 + 32);
  if ((~v15 & 0x3000000000000000) != 0 || v16 != 255)
  {
    char v18 = v16 & 1;
    uint64_t v19 = *(void *)v14;
    unint64_t v20 = *(void *)(v14 + 8);
    uint64_t v21 = *(void *)(v14 + 16);
    sub_18353673C(*(void *)v14, v20, v21, *(void *)(v14 + 24), v16 & 1);
    *(void *)uint64_t v13 = v19;
    *(void *)(v13 + 8) = v20;
    *(void *)(v13 + 16) = v21;
    *(void *)(v13 + 24) = v15;
    *(unsigned char *)(v13 + 32) = v18;
  }
  else
  {
    long long v17 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v17;
    *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  }
  uint64_t v22 = a3[7];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  return a1;
}

uint64_t sub_1835B9638(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  int v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1832E5D6C(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *int v8 = v10;
  v8[1] = v11;
  sub_1832E5E9C(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = a1 + v14;
  int v16 = (long long *)(a2 + v14);
  uint64_t v17 = ~*(void *)(a1 + v14 + 24) & 0x3000000000000000;
  unint64_t v18 = *(void *)(a2 + v14 + 24);
  int v19 = *(unsigned __int8 *)(a2 + v14 + 32);
  BOOL v21 = (~v18 & 0x3000000000000000) == 0 && v19 == 255;
  if (v17 || *(unsigned __int8 *)(v15 + 32) != 255)
  {
    if (v21)
    {
      sub_1835B97F0(v15);
      char v24 = *((unsigned char *)v16 + 32);
      long long v25 = v16[1];
      *(_OWORD *)uint64_t v15 = *v16;
      *(_OWORD *)(v15 + 16) = v25;
      *(unsigned char *)(v15 + 32) = v24;
    }
    else
    {
      char v26 = v19 & 1;
      uint64_t v27 = *(void *)v16;
      unint64_t v28 = *((void *)v16 + 1);
      uint64_t v29 = *((void *)v16 + 2);
      sub_18353673C(v27, v28, v29, v18, v19 & 1);
      uint64_t v30 = *(void *)v15;
      unint64_t v31 = *(void *)(v15 + 8);
      uint64_t v32 = *(void *)(v15 + 16);
      unint64_t v33 = *(void *)(v15 + 24);
      char v34 = *(unsigned char *)(v15 + 32);
      *(void *)uint64_t v15 = v27;
      *(void *)(v15 + 8) = v28;
      *(void *)(v15 + 16) = v29;
      *(void *)(v15 + 24) = v18;
      *(unsigned char *)(v15 + 32) = v26;
      sub_1835367E4(v30, v31, v32, v33, v34);
    }
  }
  else if (v21)
  {
    long long v22 = *v16;
    long long v23 = v16[1];
    *(unsigned char *)(v15 + 32) = *((unsigned char *)v16 + 32);
    *(_OWORD *)uint64_t v15 = v22;
    *(_OWORD *)(v15 + 16) = v23;
  }
  else
  {
    char v35 = v19 & 1;
    uint64_t v36 = *(void *)v16;
    unint64_t v37 = *((void *)v16 + 1);
    uint64_t v38 = *((void *)v16 + 2);
    sub_18353673C(v36, v37, v38, v18, v19 & 1);
    *(void *)uint64_t v15 = v36;
    *(void *)(v15 + 8) = v37;
    *(void *)(v15 + 16) = v38;
    *(void *)(v15 + 24) = v18;
    *(unsigned char *)(v15 + 32) = v35;
  }
  uint64_t v39 = a3[7];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(unsigned char *)(v40 + 8) = *((unsigned char *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  return a1;
}

uint64_t sub_1835B97F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1835B9828(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  return a1;
}

uint64_t sub_1835B98D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_183D445FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_1832E5E9C(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  unint64_t v13 = *(void *)(a1 + v10 + 24);
  int v14 = *(unsigned __int8 *)(a1 + v10 + 32);
  uint64_t v15 = *(void *)(a2 + v10 + 24);
  int v16 = *(unsigned __int8 *)(v12 + 32);
  if ((~v13 & 0x3000000000000000) != 0 || v14 != 255)
  {
    if ((~v15 & 0x3000000000000000) != 0 || v16 != 255)
    {
      char v18 = v14 & 1;
      uint64_t v19 = *(void *)(v12 + 16);
      uint64_t v20 = *(void *)v11;
      unint64_t v21 = *(void *)(v11 + 8);
      uint64_t v22 = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(void *)(v11 + 16) = v19;
      *(void *)(v11 + 24) = v15;
      *(unsigned char *)(v11 + 32) = v16 & 1;
      sub_1835367E4(v20, v21, v22, v13, v18);
      goto LABEL_8;
    }
    sub_1835B97F0(v11);
  }
  long long v17 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v17;
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
LABEL_8:
  uint64_t v23 = a3[7];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  return a1;
}

uint64_t sub_1835B9A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1835B9A1C);
}

uint64_t sub_1835B9A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_183D445FC();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = ((*(void *)(a1 + *(int *)(a3 + 24) + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 32))) ^ 0x3FF;
    if (v10 >= 0x3FB) {
      return 0;
    }
    else {
      return v10;
    }
  }
}

uint64_t sub_1835B9AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835B9AFC);
}

uint64_t sub_1835B9AFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_183D445FC();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = (~a2 & 3) << 60;
    *(unsigned char *)(v11 + 32) = ~a2 >> 2;
  }
  return result;
}

uint64_t type metadata accessor for ReplyEnvelope()
{
  uint64_t result = qword_1E8F64D60;
  if (!qword_1E8F64D60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1835B9C18()
{
  uint64_t result = sub_183D445FC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ReplyEnvelope.Error(uint64_t a1)
{
  return sub_1835367E4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_18353673C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_18353673C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_1835367E4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_1835367E4(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplyEnvelope.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FC && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1020);
  }
  unsigned int v3 = ((*(void *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3FB) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ReplyEnvelope.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 1020;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (-a2 & 3) << 60;
      *(unsigned char *)(result + 32) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_1835B9EA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  unsigned int v2 = (*(void *)(a1 + 24) >> 60) & 3 | v1;
  if (v2 <= 3) {
    return v2;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_1835B9ED4(uint64_t result)
{
  *(void *)(result + 24) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_1835B9EE4(uint64_t result, uint64_t a2)
{
  if (a2 < 4)
  {
    *(void *)(result + 24) = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }
  else
  {
    *(void *)uint64_t result = (a2 - 4);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2 > 3;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error()
{
  return &type metadata for ReplyEnvelope.Error;
}

uint64_t sub_1835B9F28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  v174 = a3;
  uint64_t v5 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v169 = v5;
  uint64_t v170 = v6;
  MEMORY[0x1F4188790](v5);
  v163 = (uint64_t *)((char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63240);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v164 = (uint64_t)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v167 = (char *)&v143 - v11;
  uint64_t v12 = sub_183D44B6C();
  MEMORY[0x1F4188790](v12 - 8);
  v162 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0);
  uint64_t v168 = *(void *)(v171 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v171);
  v161 = (uint64_t *)((char *)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v160 = (uint64_t *)((char *)&v143 - v17);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v153 = (uint64_t *)((char *)&v143 - v19);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v159 = (uint64_t *)((char *)&v143 - v21);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v158 = (uint64_t *)((char *)&v143 - v23);
  MEMORY[0x1F4188790](v22);
  v165 = (uint64_t *)((char *)&v143 - v24);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63248);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v157 = (uint64_t)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v156 = (uint64_t)&v143 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v152 = (uint64_t)&v143 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v155 = (uint64_t)&v143 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v154 = (uint64_t)&v143 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v166 = (uint64_t)&v143 - v37;
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (char *)&v143 - v38;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62DD0);
  uint64_t v41 = MEMORY[0x1F4188790](v40 - 8);
  uint64_t v43 = (char *)&v143 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  v172 = (char *)&v143 - v44;
  uint64_t v45 = sub_183D445FC();
  uint64_t v173 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v47 = (char *)&v143 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for NWActorSystemProtobuf_Reply(0);
  MEMORY[0x1F4188790](v48);
  uint64_t v50 = (char *)&v143 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = a1;
  unint64_t v179 = a2;
  uint64_t v51 = sub_183D446DC();
  long long v175 = 0u;
  long long v176 = 0u;
  uint64_t v177 = 0;
  MEMORY[0x1F4188790](v51 - 8);
  sub_1832E5D6C(a1, a2);
  sub_183D446CC();
  sub_1835BE6C0(&qword_1E8F631A8, (void (*)(uint64_t))type metadata accessor for NWActorSystemProtobuf_Reply);
  uint64_t v52 = v180;
  sub_183D447CC();
  if (v52) {
    return sub_1832E5E9C(a1, a2);
  }
  v148 = v47;
  v149 = v39;
  unint64_t v150 = a2;
  uint64_t v180 = v48;
  uint64_t v147 = 0;
  uint64_t v151 = a1;
  swift_bridgeObjectRetain();
  uint64_t v54 = (uint64_t)v172;
  sub_183D4459C();
  swift_bridgeObjectRelease();
  sub_183138900(v54, (uint64_t)v43, &qword_1E8F62DD0);
  uint64_t v55 = v173;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v43, 1, v45) == 1)
  {
    sub_183138A24((uint64_t)v43, &qword_1E8F62DD0);
    sub_183559CE0();
    swift_allocError();
    strcpy(v56, "Missing callID");
    v56[15] = -18;
    swift_willThrow();
    sub_1832E5E9C(v151, v150);
    sub_183138A24(v54, &qword_1E8F62DD0);
    return sub_1835BE7D8((uint64_t)v50, type metadata accessor for NWActorSystemProtobuf_Reply);
  }
  uint64_t v57 = v45;
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  char v59 = v148;
  v58(v148, v43, v45);
  sub_183138A24(v54, &qword_1E8F62DD0);
  unint64_t v60 = v174;
  uint64_t v145 = v57;
  v58(v174, v59, v57);
  uint64_t v61 = *((void *)v50 + 2);
  unint64_t v62 = *((void *)v50 + 3);
  uint64_t v63 = type metadata accessor for ReplyEnvelope();
  char v64 = (uint64_t *)&v60[*(int *)(v63 + 20)];
  *char v64 = v61;
  v64[1] = v62;
  v144 = v64;
  uint64_t v65 = *(int *)(v180 + 28);
  v172 = v50;
  v146 = &v50[v65];
  uint64_t v66 = (uint64_t)v149;
  sub_183138900((uint64_t)&v50[v65], (uint64_t)v149, &qword_1E8F63248);
  uint64_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48);
  uint64_t v68 = v171;
  LODWORD(v58) = v67(v66, 1, v171);
  sub_1832E5D6C(v61, v62);
  sub_183138A24(v66, &qword_1E8F63248);
  v148 = (char *)v63;
  if (v58 == 1)
  {
    uint64_t v69 = &v60[*(int *)(v63 + 24)];
    *(void *)uint64_t v69 = 0;
    *((void *)v69 + 1) = 0;
    *((void *)v69 + 2) = 0;
    *((void *)v69 + 3) = 0x3000000000000000;
    v69[32] = -1;
    unint64_t v70 = v150;
    uint64_t v72 = v169;
    uint64_t v71 = v170;
    uint64_t v73 = (uint64_t)v167;
    goto LABEL_14;
  }
  uint64_t v74 = v166;
  sub_183138900((uint64_t)v146, v166, &qword_1E8F63248);
  uint64_t v75 = v67;
  unsigned int v76 = v67(v74, 1, v68);
  uint64_t v72 = v169;
  uint64_t v71 = v170;
  uint64_t v73 = (uint64_t)v167;
  int64_t v77 = v165;
  if (v76 == 1)
  {
    void *v165 = 0;
    *((unsigned char *)v77 + 8) = 1;
    v77[2] = MEMORY[0x1E4FBC860];
    sub_183D446AC();
    sub_183138A24(v74, &qword_1E8F63248);
  }
  else
  {
    sub_1835BE770(v74, (uint64_t)v165, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
  }
  uint64_t v78 = v174;
  uint64_t v79 = *v77;
  int v80 = *((unsigned __int8 *)v77 + 8);
  sub_1835BE7D8((uint64_t)v77, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
  if (v80 != 1)
  {
    unint64_t v70 = v150;
    *(void *)&long long v175 = 0;
    *((void *)&v175 + 1) = 0xE000000000000000;
    sub_183D4547C();
    swift_bridgeObjectRelease();
    *(void *)&long long v175 = 0xD00000000000001BLL;
    *((void *)&v175 + 1) = 0x8000000183E27430;
    uint64_t v178 = v79;
    sub_183D4589C();
    sub_183D44C8C();
    swift_bridgeObjectRelease();
    uint64_t v83 = *((void *)&v175 + 1);
    char v84 = &v78[*((int *)v148 + 6)];
    *(void *)char v84 = v175;
    *((void *)v84 + 1) = v83;
    *((void *)v84 + 2) = 0;
    *((void *)v84 + 3) = 0;
    v84[32] = 0;
    goto LABEL_14;
  }
  uint64_t v81 = v180;
  switch(v79)
  {
    case 1:
      unint64_t v70 = v150;
      v95 = &v78[*((int *)v148 + 6)];
      *(void *)v95 = 1;
      *((void *)v95 + 1) = 0;
      *((void *)v95 + 2) = 0;
      *((void *)v95 + 3) = 0;
      v95[32] = 1;
      goto LABEL_15;
    case 2:
      uint64_t v96 = v154;
      sub_183138900((uint64_t)v146, v154, &qword_1E8F63248);
      if (v75(v96, 1, v171) == 1)
      {
        v97 = v158;
        void *v158 = 0;
        *((unsigned char *)v97 + 8) = 1;
        v97[2] = MEMORY[0x1E4FBC860];
        sub_183D446AC();
        sub_183138A24(v96, &qword_1E8F63248);
      }
      else
      {
        v97 = v158;
        sub_1835BE770(v96, (uint64_t)v158, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      }
      v106 = (void *)v97[2];
      swift_bridgeObjectRetain();
      sub_1835BE7D8((uint64_t)v97, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      if (!v106[2]) {
        goto LABEL_45;
      }
      uint64_t v107 = v106[4];
      unint64_t v108 = v106[5];
      sub_1832E5D6C(v107, v108);
      swift_bridgeObjectRelease();
      sub_183D44B4C();
      uint64_t v109 = sub_183D44B1C();
      if (!v110) {
        goto LABEL_49;
      }
      uint64_t v111 = v109;
      uint64_t v112 = v110;
      unint64_t v70 = v150;
      sub_1832E5E9C(v107, v108);
      v113 = &v78[*((int *)v148 + 6)];
      *(void *)v113 = v111;
      *((void *)v113 + 1) = v112;
      *((void *)v113 + 2) = 0;
      *((void *)v113 + 3) = 0;
      goto LABEL_44;
    case 3:
      uint64_t v98 = v155;
      sub_183138900((uint64_t)v146, v155, &qword_1E8F63248);
      uint64_t v99 = v171;
      if (v75(v98, 1, v171) == 1)
      {
        v100 = v159;
        void *v159 = 0;
        *((unsigned char *)v100 + 8) = 1;
        v100[2] = MEMORY[0x1E4FBC860];
        sub_183D446AC();
        sub_183138A24(v98, &qword_1E8F63248);
      }
      else
      {
        v100 = v159;
        sub_1835BE770(v98, (uint64_t)v159, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      }
      v114 = (void *)v100[2];
      swift_bridgeObjectRetain();
      sub_1835BE7D8((uint64_t)v100, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      if (!v114[2])
      {
        swift_bridgeObjectRelease();
        sub_183559CE0();
        swift_allocError();
        void *v137 = 0xD000000000000013;
        v137[1] = 0x8000000183E274F0;
        swift_willThrow();
LABEL_54:
        uint64_t v78 = v174;
        goto LABEL_55;
      }
      uint64_t v115 = v114[4];
      unint64_t v116 = v114[5];
      sub_1832E5D6C(v115, v116);
      swift_bridgeObjectRelease();
      sub_183D44B4C();
      uint64_t v117 = sub_183D44B1C();
      if (!v118)
      {
        sub_183559CE0();
        swift_allocError();
        void *v138 = 0xD000000000000027;
        v138[1] = 0x8000000183E274C0;
        swift_willThrow();
        sub_1832E5E9C(v115, v116);
        goto LABEL_54;
      }
      uint64_t v119 = v117;
      uint64_t v120 = v118;
      uint64_t v121 = v152;
      sub_183138900((uint64_t)v146, v152, &qword_1E8F63248);
      if (v75(v121, 1, v99) == 1)
      {
        v122 = v153;
        void *v153 = 0;
        *((unsigned char *)v122 + 8) = 1;
        v122[2] = MEMORY[0x1E4FBC860];
        sub_183D446AC();
        sub_183138A24(v121, &qword_1E8F63248);
      }
      else
      {
        v122 = v153;
        sub_1835BE770(v121, (uint64_t)v153, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      }
      v139 = (void *)v122[2];
      swift_bridgeObjectRetain();
      sub_1835BE7D8((uint64_t)v122, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      if (v139[2] < 2uLL)
      {
        __break(1u);
        JUMPOUT(0x1835BB340);
      }
      uint64_t v140 = v139[6];
      unint64_t v141 = v139[7];
      sub_1832E5D6C(v140, v141);
      swift_bridgeObjectRelease();
      sub_1832E5E9C(v115, v116);
      v142 = &v174[*((int *)v148 + 6)];
      *(void *)v142 = v119;
      *((void *)v142 + 1) = v120;
      *((void *)v142 + 2) = v140;
      *((void *)v142 + 3) = v141 | 0x1000000000000000;
      v142[32] = 0;
      unint64_t v70 = v150;
      uint64_t v72 = v169;
      uint64_t v71 = v170;
LABEL_14:
      uint64_t v81 = v180;
LABEL_15:
      uint64_t v85 = (uint64_t)v172;
      uint64_t v86 = (uint64_t)&v172[*(int *)(v81 + 32)];
      sub_183138900(v86, v73, &qword_1E8F63240);
      uint64_t v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
      int v88 = v87(v73, 1, v72);
      sub_183138A24(v73, &qword_1E8F63240);
      if (v88 == 1)
      {
        sub_1832E5E9C(v151, v70);
        uint64_t result = sub_1835BE7D8(v85, type metadata accessor for NWActorSystemProtobuf_Reply);
        uint64_t v89 = 0;
        long long v90 = v174;
      }
      else
      {
        uint64_t v91 = v86;
        uint64_t v92 = v164;
        sub_183138900(v91, v164, &qword_1E8F63240);
        if (v87(v92, 1, v72) == 1)
        {
          v93 = v163;
          uint64_t *v163 = 0;
          sub_183D446AC();
          sub_183138A24(v92, &qword_1E8F63240);
        }
        else
        {
          v93 = v163;
          sub_1835BE770(v92, (uint64_t)v163, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
        }
        long long v90 = v174;
        sub_1832E5E9C(v151, v70);
        sub_1835BE7D8((uint64_t)v172, type metadata accessor for NWActorSystemProtobuf_Reply);
        uint64_t v89 = *v93;
        uint64_t result = sub_1835BE7D8((uint64_t)v93, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
      }
      v94 = &v90[*((int *)v148 + 7)];
      *(void *)v94 = v89;
      v94[8] = v88 == 1;
      return result;
    case 4:
      uint64_t v101 = v156;
      sub_183138900((uint64_t)v146, v156, &qword_1E8F63248);
      if (v75(v101, 1, v171) == 1)
      {
        v102 = v160;
        void *v160 = 0;
        *((unsigned char *)v102 + 8) = 1;
        v102[2] = MEMORY[0x1E4FBC860];
        sub_183D446AC();
        sub_183138A24(v101, &qword_1E8F63248);
      }
      else
      {
        v102 = v160;
        sub_1835BE770(v101, (uint64_t)v160, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      }
      v123 = (void *)v102[2];
      swift_bridgeObjectRetain();
      sub_1835BE7D8((uint64_t)v102, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      if (!v123[2])
      {
LABEL_45:
        swift_bridgeObjectRelease();
        sub_183559CE0();
        swift_allocError();
        unint64_t v129 = 0xD000000000000013;
        v130 = "Missing description";
        goto LABEL_52;
      }
      uint64_t v107 = v123[4];
      unint64_t v108 = v123[5];
      sub_1832E5D6C(v107, v108);
      swift_bridgeObjectRelease();
      sub_183D44B4C();
      uint64_t v124 = sub_183D44B1C();
      if (!v125)
      {
LABEL_49:
        sub_183559CE0();
        swift_allocError();
        void *v136 = 0xD000000000000027;
        v136[1] = 0x8000000183E27470;
        swift_willThrow();
        sub_1832E5E9C(v107, v108);
        goto LABEL_55;
      }
      uint64_t v126 = v124;
      uint64_t v127 = v125;
      unint64_t v70 = v150;
      sub_1832E5E9C(v107, v108);
      v113 = &v78[*((int *)v148 + 6)];
      *(void *)v113 = v126;
      *((void *)v113 + 1) = v127;
      *((_OWORD *)v113 + 1) = xmmword_183D584F0;
LABEL_44:
      v113[32] = 0;
      uint64_t v71 = v170;
      goto LABEL_14;
    case 5:
      uint64_t v103 = v157;
      sub_183138900((uint64_t)v146, v157, &qword_1E8F63248);
      if (v75(v103, 1, v171) == 1)
      {
        uint64_t v104 = v103;
        v105 = v161;
        void *v161 = 0;
        *((unsigned char *)v105 + 8) = 1;
        v105[2] = MEMORY[0x1E4FBC860];
        sub_183D446AC();
        sub_183138A24(v104, &qword_1E8F63248);
      }
      else
      {
        uint64_t v131 = v103;
        v105 = v161;
        sub_1835BE770(v131, (uint64_t)v161, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      }
      v132 = (void *)v105[2];
      swift_bridgeObjectRetain();
      sub_1835BE7D8((uint64_t)v105, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      if (v132[2])
      {
        unint64_t v70 = v150;
        uint64_t v133 = v132[4];
        unint64_t v134 = v132[5];
        sub_1832E5D6C(v133, v134);
        swift_bridgeObjectRelease();
        v135 = &v78[*((int *)v148 + 6)];
        *(void *)v135 = v133;
        *((void *)v135 + 1) = v134;
        uint64_t v81 = v180;
        *((_OWORD *)v135 + 1) = xmmword_183D5B990;
        v135[32] = 0;
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      sub_183559CE0();
      swift_allocError();
      unint64_t v129 = 0xD000000000000011;
      v130 = "Missing errorData";
LABEL_52:
      unint64_t *v128 = v129;
      v128[1] = (unint64_t)(v130 - 32) | 0x8000000000000000;
      swift_willThrow();
LABEL_55:
      sub_1832E5E9C(v151, v150);
      sub_1835BE7D8((uint64_t)v172, type metadata accessor for NWActorSystemProtobuf_Reply);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v78, v145);
      return sub_1832E5E9C(*v144, v144[1]);
    default:
      unint64_t v70 = v150;
      uint64_t v82 = &v78[*((int *)v148 + 6)];
      *(_OWORD *)uint64_t v82 = 0u;
      *((_OWORD *)v82 + 1) = 0u;
      v82[32] = 1;
      goto LABEL_15;
  }
}

uint64_t sub_1835BB358()
{
  uint64_t v71 = (void *)sub_183D44B6C();
  uint64_t v70 = *(v71 - 1);
  MEMORY[0x1F4188790](v71);
  uint64_t v69 = (char *)&v68 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v75 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v82 = (char *)&v68 - v6;
  uint64_t v7 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v72 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (unint64_t *)((char *)&v68 - v11);
  uint64_t v13 = type metadata accessor for NWActorSystemProtobuf_Reply(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)((char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_183D446AC();
  uint64_t v16 = *(void (**)(void))(v3 + 56);
  uint64_t v73 = (uint64_t)v15 + *(int *)(v13 + 28);
  uint64_t v77 = v2;
  uint64_t v76 = v3 + 56;
  uint64_t v74 = v16;
  v16();
  uint64_t v78 = v13;
  uint64_t v17 = (uint64_t)v15 + *(int *)(v13 + 32);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v18(v17, 1, 1, v7);
  *uint64_t v15 = sub_183D445AC();
  v15[1] = v19;
  uint64_t v20 = (int *)type metadata accessor for ReplyEnvelope();
  uint64_t v21 = (uint64_t *)(v0 + v20[5]);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  void v15[2] = *v21;
  v15[3] = v23;
  uint64_t v79 = v15;
  uint64_t v24 = (uint64_t *)(v0 + v20[7]);
  if (v24[1])
  {
    sub_1832E5D6C(v22, v23);
  }
  else
  {
    uint64_t v25 = *v24;
    uint64_t v26 = v18;
    sub_1832E5D6C(v22, v23);
    sub_183D446AC();
    void *v12 = v25;
    uint64_t v27 = v72;
    sub_1835BE708((uint64_t)v12, v72, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
    sub_183138A24(v17, &qword_1E8F63240);
    sub_1835BE770(v27, v17, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
    v26(v17, 0, 1, v7);
    sub_1835BE7D8((uint64_t)v12, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
  }
  uint64_t v28 = v0 + v20[6];
  uint64_t v29 = *(void *)v28;
  unint64_t v30 = *(void *)(v28 + 8);
  uint64_t v31 = *(void *)(v28 + 16);
  unint64_t v32 = *(void *)(v28 + 24);
  int v33 = *(unsigned __int8 *)(v28 + 32);
  uint64_t v34 = (uint64_t)v82;
  if ((~v32 & 0x3000000000000000) != 0 || v33 != 255)
  {
    *((void *)v82 + 2) = MEMORY[0x1E4FBC860];
    uint64_t v72 = v31;
    sub_18353673C(v29, v30, v31, v32, v33 & 1);
    sub_183D446AC();
    switch((v32 >> 60) & 3 | (4 * (v33 & 1u)))
    {
      case 1uLL:
        *(void *)uint64_t v34 = 3;
        *(unsigned char *)(v34 + 8) = 1;
        long long v80 = xmmword_183D55BD0;
        uint64_t v35 = v72;
        sub_1832E5D6C(v72, v32 & 0xCFFFFFFFFFFFFFFFLL);
        uint64_t v36 = v69;
        sub_183D44B4C();
        uint64_t v37 = sub_183D44B0C();
        unint64_t v39 = v38;
        (*(void (**)(char *, void *))(v70 + 8))(v36, v71);
        v81[0] = v37;
        v81[1] = v39;
        v81[2] = v35;
        v81[3] = v32 & 0xCFFFFFFFFFFFFFFFLL;
        sub_1832E5D6C(v35, v32 & 0xCFFFFFFFFFFFFFFFLL);
        unint64_t v68 = v30;
        if (v39 >> 60 == 15)
        {
          uint64_t v40 = (void *)MEMORY[0x1E4FBC860];
          uint64_t v41 = v72;
        }
        else
        {
          uint64_t v54 = v29;
          sub_1834D7FF8(v37, v39);
          uint64_t v40 = sub_1834B4488(0, 1, 1, MEMORY[0x1E4FBC860]);
          unint64_t v56 = v40[2];
          unint64_t v55 = v40[3];
          if (v56 >= v55 >> 1) {
            uint64_t v40 = sub_1834B4488((void *)(v55 > 1), v56 + 1, 1, v40);
          }
          uint64_t v41 = v72;
          v40[2] = v56 + 1;
          uint64_t v57 = &v40[2 * v56];
          v57[4] = v37;
          v57[5] = v39;
          uint64_t v29 = v54;
        }
        uint64_t v71 = v81;
        sub_1832E5D6C(v41, v32 & 0xCFFFFFFFFFFFFFFFLL);
        uint64_t v58 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v40 = sub_1834B4488(0, v40[2] + 1, 1, v40);
        }
        uint64_t v34 = (uint64_t)v82;
        unint64_t v60 = v40[2];
        unint64_t v59 = v40[3];
        uint64_t v43 = v72;
        if (v60 >= v59 >> 1)
        {
          uint64_t v67 = sub_1834B4488((void *)(v59 > 1), v60 + 1, 1, v40);
          uint64_t v43 = v72;
          uint64_t v40 = v67;
        }
        v40[2] = v60 + 1;
        uint64_t v61 = &v40[2 * v60];
        v61[4] = v43;
        v61[5] = v32 & 0xCFFFFFFFFFFFFFFFLL;
        sub_1832E5E9C(v43, v32 & 0xCFFFFFFFFFFFFFFFLL);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E48);
        swift_arrayDestroy();
        swift_bridgeObjectRelease();
        *(void *)(v34 + 16) = v40;
        uint64_t v29 = v58;
        unint64_t v30 = v68;
        goto LABEL_30;
      case 2uLL:
        *(void *)uint64_t v34 = 5;
        *(unsigned char *)(v34 + 8) = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F62AF0);
        uint64_t v42 = swift_allocObject();
        *(_OWORD *)(v42 + 16) = xmmword_183D53660;
        *(void *)(v42 + 32) = v29;
        *(void *)(v42 + 40) = v30;
        *(void *)(v34 + 16) = v42;
        uint64_t v43 = v72;
        sub_18353673C(v29, v30, v72, v32, v33 & 1);
        goto LABEL_30;
      case 3uLL:
        *(void *)uint64_t v34 = 4;
        *(unsigned char *)(v34 + 8) = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E40);
        goto LABEL_12;
      case 4uLL:
        if (v72 | v30 | v29 | v32) {
          *(void *)uint64_t v34 = 1;
        }
        else {
          *(void *)uint64_t v34 = 0;
        }
        *(unsigned char *)(v34 + 8) = 1;
        uint64_t v43 = v72;
LABEL_30:
        uint64_t v50 = v77;
        break;
      default:
        *(void *)uint64_t v34 = 2;
        *(unsigned char *)(v34 + 8) = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E40);
LABEL_12:
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183D53660;
        uint64_t v45 = v69;
        sub_183D44B4C();
        unint64_t v68 = v30;
        uint64_t v46 = sub_183D44B0C();
        unint64_t v48 = v47;
        (*(void (**)(char *, void *))(v70 + 8))(v45, v71);
        *(void *)(inited + 32) = v46;
        *(void *)(inited + 40) = v48;
        if (v48 >> 60 == 15)
        {
          uint64_t v49 = (void *)MEMORY[0x1E4FBC860];
          uint64_t v50 = v77;
        }
        else
        {
          uint64_t v71 = (void *)v29;
          sub_1832E5D6C(v46, v48);
          uint64_t v49 = sub_1834B4488(0, 1, 1, MEMORY[0x1E4FBC860]);
          unint64_t v52 = v49[2];
          unint64_t v51 = v49[3];
          if (v52 >= v51 >> 1) {
            uint64_t v49 = sub_1834B4488((void *)(v51 > 1), v52 + 1, 1, v49);
          }
          v49[2] = v52 + 1;
          long long v53 = &v49[2 * v52];
          v53[4] = v46;
          v53[5] = v48;
          uint64_t v50 = v77;
          uint64_t v29 = (uint64_t)v71;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v34 + 16) = v49;
        unint64_t v30 = v68;
        uint64_t v43 = v72;
        break;
    }
    uint64_t v62 = v75;
    sub_1835BE708(v34, v75, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
    uint64_t v63 = v73;
    sub_183138A24(v73, &qword_1E8F63248);
    sub_1835BE770(v62, v63, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v74)(v63, 0, 1, v50);
    sub_183553D90(v29, v30, v43, v32, v33);
    sub_1835BE7D8(v34, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
  }
  sub_1835BE6C0(&qword_1E8F631A8, (void (*)(uint64_t))type metadata accessor for NWActorSystemProtobuf_Reply);
  uint64_t v64 = (uint64_t)v79;
  uint64_t v65 = sub_183D447BC();
  sub_1835BE7D8(v64, type metadata accessor for NWActorSystemProtobuf_Reply);
  return v65;
}

uint64_t sub_1835BBD60(void *a1)
{
  uint64_t v2 = v1;
  sub_1835BE45C(v2, (uint64_t)v67);
  uint64_t v51 = v67[0];
  unint64_t v50 = v67[1];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E08);
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v54 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E10);
  uint64_t v55 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  unint64_t v52 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E18);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  long long v53 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E20);
  uint64_t v48 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E28);
  uint64_t v46 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E30);
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64E38);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v62 = v15;
  uint64_t v63 = v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835BE474();
  uint64_t v61 = v18;
  sub_183D45C0C();
  sub_1835BE45C(v2, (uint64_t)&v68);
  uint64_t v19 = v68;
  unint64_t v20 = v71;
  if (v72) {
    int v21 = 4;
  }
  else {
    int v21 = 0;
  }
  switch((v71 >> 60) & 3 | v21)
  {
    case 1uLL:
      unint64_t v25 = v71 & 0xCFFFFFFFFFFFFFFFLL;
      v71 &= 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v26 = v70;
      LOBYTE(v65) = 3;
      sub_1832E5D6C(v70, v20 & 0xCFFFFFFFFFFFFFFFLL);
      sub_1835BE570();
      uint64_t v27 = v53;
      uint64_t v28 = v61;
      uint64_t v29 = v62;
      sub_183D4581C();
      LOBYTE(v65) = 0;
      uint64_t v30 = v58;
      uint64_t v31 = v64;
      sub_183D4584C();
      if (v31)
      {
        sub_1832E5E9C(v26, v25);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v30);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v28, v29);
      }
      else
      {
        uint64_t v65 = v26;
        unint64_t v66 = v25;
        char v73 = 1;
        sub_1832E478C();
        sub_183D4586C();
        (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v30);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v28, v29);
        uint64_t result = sub_1832E5E9C(v26, v25);
      }
      break;
    case 2uLL:
      v71 &= 0xCFFFFFFFFFFFFFFFLL;
      unint64_t v33 = v69;
      LOBYTE(v65) = 4;
      sub_1832E5D6C(v51, v50);
      sub_1835BE51C();
      uint64_t v34 = v52;
      uint64_t v36 = v61;
      uint64_t v35 = v62;
      sub_183D4581C();
      uint64_t v65 = v19;
      unint64_t v66 = v33;
      sub_1832E478C();
      uint64_t v37 = v57;
      sub_183D4586C();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v37);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v35);
      uint64_t result = sub_1835B97F0((uint64_t)v2);
      break;
    case 3uLL:
      v71 &= 0xCFFFFFFFFFFFFFFFLL;
      LOBYTE(v65) = 5;
      sub_1835BE4C8();
      unint64_t v38 = v54;
      unint64_t v23 = v61;
      uint64_t v22 = v62;
      sub_183D4581C();
      uint64_t v39 = v60;
      sub_183D4584C();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v39);
      goto LABEL_10;
    case 4uLL:
      if (v71 | v68 | v70 | v69)
      {
        LOBYTE(v65) = 1;
        sub_1835BE618();
        uint64_t v41 = v61;
        uint64_t v40 = v62;
        sub_183D4581C();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v41, v40);
      }
      else
      {
        LOBYTE(v65) = 0;
        sub_1835BE66C();
        uint64_t v42 = v61;
        uint64_t v43 = v62;
        sub_183D4581C();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v12);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v42, v43);
      }
      break;
    default:
      v71 &= 0xCFFFFFFFFFFFFFFFLL;
      LOBYTE(v65) = 2;
      sub_1835BE5C4();
      unint64_t v23 = v61;
      uint64_t v22 = v62;
      sub_183D4581C();
      uint64_t v24 = v49;
      sub_183D4584C();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v24);
LABEL_10:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v23, v22);
      break;
  }
  return result;
}

uint64_t sub_1835BC614()
{
  return 0;
}

uint64_t sub_1835BC620(uint64_t a1)
{
  unint64_t v2 = sub_1835BE66C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BC65C(uint64_t a1)
{
  unint64_t v2 = sub_1835BE66C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BC6A0()
{
  return 12383;
}

uint64_t sub_1835BC6B0(uint64_t a1)
{
  unint64_t v2 = sub_1835BE4C8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BC6EC(uint64_t a1)
{
  unint64_t v2 = sub_1835BE4C8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BC728()
{
  if (*v0) {
    return 0x566465646F636E65;
  }
  else {
    return 0x4E64656C676E616DLL;
  }
}

uint64_t sub_1835BC774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1835BF390(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1835BC79C(uint64_t a1)
{
  unint64_t v2 = sub_1835BE570();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BC7D8(uint64_t a1)
{
  unint64_t v2 = sub_1835BE570();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t sub_1835BC814()
{
  unint64_t result = 0xD000000000000015;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6F5464656C696166;
      break;
    case 2:
      unint64_t result = 0x69796C7265646E75;
      break;
    case 3:
      unint64_t result = 0x43656C6261646F63;
      break;
    case 4:
      unint64_t result = 0x726F727245736ELL;
      break;
    case 5:
      unint64_t result = 0x746E65696C63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1835BC8F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1835BF4B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1835BC920(uint64_t a1)
{
  unint64_t v2 = sub_1835BE474();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BC95C(uint64_t a1)
{
  unint64_t v2 = sub_1835BE474();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BC998@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1835BC9C8(uint64_t a1)
{
  unint64_t v2 = sub_1835BE618();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BCA04(uint64_t a1)
{
  unint64_t v2 = sub_1835BE618();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BCA40()
{
  return 0x6465766968637261;
}

uint64_t sub_1835BCA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6465766968637261 && a2 == 0xEC00000061746144)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_183D4592C();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1835BCB10(uint64_t a1)
{
  unint64_t v2 = sub_1835BE51C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BCB4C(uint64_t a1)
{
  unint64_t v2 = sub_1835BE51C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BCB88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_183D4592C();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1835BCC08(uint64_t a1)
{
  unint64_t v2 = sub_1835BE5C4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BCC44(uint64_t a1)
{
  unint64_t v2 = sub_1835BE5C4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BCC80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1835BD9D8(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1835BE45C(v5, a2);
  }
  return result;
}

uint64_t sub_1835BCCC8(void *a1)
{
  sub_1835BE45C(v1, (uint64_t)v4);
  return sub_1835BBD60(a1);
}

uint64_t sub_1835BCD18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D88);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835BD8DC();
  sub_183D45C0C();
  LOBYTE(v16[0]) = 0;
  sub_183D445FC();
  sub_1835BE6C0(&qword_1E8F63E88, MEMORY[0x1E4F27990]);
  sub_183D4586C();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ReplyEnvelope();
    v16[0] = *(_OWORD *)(v3 + v9[5]);
    char v18 = 1;
    sub_1832E478C();
    sub_183D4586C();
    uint64_t v10 = v3 + v9[6];
    char v11 = *(unsigned char *)(v10 + 32);
    long long v12 = *(_OWORD *)(v10 + 16);
    v16[0] = *(_OWORD *)v10;
    v16[1] = v12;
    char v17 = v11;
    char v18 = 2;
    sub_1835BD984();
    sub_183D4583C();
    uint64_t v13 = (uint64_t *)(v3 + v9[7]);
    uint64_t v14 = *v13;
    LOBYTE(v13) = *((unsigned char *)v13 + 8);
    *(void *)&v16[0] = v14;
    BYTE8(v16[0]) = (_BYTE)v13;
    char v18 = 3;
    sub_183524958();
    sub_183D4583C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1835BCF88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = sub_183D445FC();
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v26 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D70);
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ReplyEnvelope();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835BD8DC();
  uint64_t v28 = v7;
  sub_183D45BCC();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v22 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v25;
  LOBYTE(v29) = 0;
  sub_1835BE6C0(&qword_1E8F63E98, MEMORY[0x1E4F27990]);
  uint64_t v13 = v26;
  uint64_t v14 = v27;
  sub_183D457DC();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v13, v4);
  char v32 = 1;
  sub_1832E5D18();
  sub_183D457DC();
  *(_OWORD *)(v11 + v8[5]) = v29;
  char v32 = 2;
  sub_1835BD930();
  sub_183D4579C();
  char v15 = v31;
  uint64_t v16 = v11 + v8[6];
  long long v17 = v30;
  *(_OWORD *)uint64_t v16 = v29;
  *(_OWORD *)(v16 + 16) = v17;
  *(unsigned char *)(v16 + 32) = v15;
  char v32 = 3;
  sub_183524904();
  sub_183D4579C();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v14);
  char v18 = BYTE8(v29);
  uint64_t v19 = v11 + v8[7];
  *(void *)uint64_t v19 = v29;
  *(unsigned char *)(v19 + 8) = v18;
  sub_1835BE708(v11, v23, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
  return sub_1835BE7D8(v11, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
}

unint64_t sub_1835BD42C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1835BD448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1835BF780(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1835BD474(uint64_t a1)
{
  unint64_t v2 = sub_1835BF33C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BD4B0(uint64_t a1)
{
  unint64_t v2 = sub_1835BF33C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BD4EC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64F00);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835BF33C();
  sub_183D45BCC();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v9 = sub_183D457EC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  *a2 = v9;
  return result;
}

uint64_t sub_1835BD648(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64F10);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835BF33C();
  sub_183D45C0C();
  sub_183D4587C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1835BD77C()
{
  uint64_t result = 0x44496C6C6163;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65756C6176;
      break;
    case 2:
      uint64_t result = 0x726F727265;
      break;
    case 3:
      uint64_t result = 0x7363697274656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1835BD800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1835BF808(a1, a2);
  *a3 = result;
  return result;
}

void sub_1835BD828(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1835BD834(uint64_t a1)
{
  unint64_t v2 = sub_1835BD8DC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835BD870(uint64_t a1)
{
  unint64_t v2 = sub_1835BD8DC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1835BD8AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1835BCF88(a1, a2);
}

uint64_t sub_1835BD8C4(void *a1)
{
  return sub_1835BCD18(a1);
}

unint64_t sub_1835BD8DC()
{
  unint64_t result = qword_1E8F64D78;
  if (!qword_1E8F64D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64D78);
  }
  return result;
}

unint64_t sub_1835BD930()
{
  unint64_t result = qword_1E8F64D80;
  if (!qword_1E8F64D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64D80);
  }
  return result;
}

unint64_t sub_1835BD984()
{
  unint64_t result = qword_1E8F64D90;
  if (!qword_1E8F64D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64D90);
  }
  return result;
}

uint64_t sub_1835BD9D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64D98);
  uint64_t v61 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  unint64_t v66 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64DA0);
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v65 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64DA8);
  uint64_t v60 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v62 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64DB0);
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v64 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64DB8);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64DC0);
  uint64_t v51 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64DC8);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  uint64_t v67 = a1;
  __swift_project_boxed_opaque_existential_2(a1, v19);
  sub_1835BE474();
  uint64_t v20 = v68;
  sub_183D45BCC();
  char v21 = v20;
  if (v20) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)v67);
  }
  unint64_t v50 = v14;
  uint64_t v49 = v12;
  uint64_t v22 = v11;
  uint64_t v23 = v64;
  uint64_t v24 = v65;
  uint64_t v25 = v66;
  uint64_t v68 = v16;
  uint64_t v26 = sub_183D457FC();
  if (*(void *)(v26 + 16) != 1)
  {
    uint64_t v32 = sub_183D4554C();
    swift_allocError();
    uint64_t v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63D38);
    *uint64_t v34 = &type metadata for ReplyEnvelope.Error;
    sub_183D4577C();
    sub_183D4553C();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x1E4FBBA70], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v15);
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)v67);
  }
  switch(*(unsigned char *)(v26 + 32))
  {
    case 1:
      LOBYTE(v69) = 1;
      sub_1835BE618();
      sub_183D4576C();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v15);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v28 = 1;
      goto LABEL_8;
    case 2:
      LOBYTE(v69) = 2;
      sub_1835BE5C4();
      uint64_t v37 = v23;
      sub_183D4576C();
      uint64_t v38 = v56;
      char v21 = 0;
      uint64_t v28 = sub_183D457BC();
      uint64_t v29 = v44;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v37, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v15);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      break;
    case 3:
      LOBYTE(v69) = 3;
      sub_1835BE570();
      uint64_t v39 = v62;
      sub_183D4576C();
      LOBYTE(v69) = 0;
      uint64_t v40 = v57;
      char v21 = 0;
      uint64_t v28 = sub_183D457BC();
      uint64_t v29 = v45;
      char v71 = 1;
      sub_1832E5D18();
      sub_183D457DC();
      uint64_t v46 = v68;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v15);
      uint64_t v30 = v69;
      uint64_t v31 = v70 | 0x1000000000000000;
      break;
    case 4:
      LOBYTE(v69) = 4;
      sub_1835BE51C();
      sub_183D4576C();
      sub_1832E5D18();
      uint64_t v41 = v59;
      sub_183D457DC();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v24, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v15);
      uint64_t v30 = 0;
      uint64_t v28 = v69;
      uint64_t v29 = v70;
      uint64_t v31 = 0x2000000000000000;
      break;
    case 5:
      LOBYTE(v69) = 5;
      sub_1835BE4C8();
      uint64_t v42 = v25;
      sub_183D4576C();
      uint64_t v43 = v54;
      char v21 = 0;
      uint64_t v28 = sub_183D457BC();
      uint64_t v29 = v47;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v42, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v15);
      uint64_t v30 = 0;
      uint64_t v31 = 0x3000000000000000;
      break;
    default:
      LOBYTE(v69) = 0;
      sub_1835BE66C();
      uint64_t v27 = v50;
      sub_183D4576C();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v15);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
LABEL_8:
      char v21 = 1;
      break;
  }
  uint64_t v36 = v63;
  uint64_t result = __swift_destroy_boxed_opaque_existential_2((uint64_t)v67);
  *(void *)uint64_t v36 = v28;
  *(void *)(v36 + 8) = v29;
  *(void *)(v36 + 16) = v30;
  *(void *)(v36 + 24) = v31;
  *(unsigned char *)(v36 + 32) = v21;
  return result;
}

uint64_t sub_1835BE45C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_1835BE474()
{
  unint64_t result = qword_1E8F64DD0;
  if (!qword_1E8F64DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64DD0);
  }
  return result;
}

unint64_t sub_1835BE4C8()
{
  unint64_t result = qword_1E8F64DD8;
  if (!qword_1E8F64DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64DD8);
  }
  return result;
}

unint64_t sub_1835BE51C()
{
  unint64_t result = qword_1E8F64DE0;
  if (!qword_1E8F64DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64DE0);
  }
  return result;
}

unint64_t sub_1835BE570()
{
  unint64_t result = qword_1E8F64DE8;
  if (!qword_1E8F64DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64DE8);
  }
  return result;
}

unint64_t sub_1835BE5C4()
{
  unint64_t result = qword_1E8F64DF0;
  if (!qword_1E8F64DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64DF0);
  }
  return result;
}

unint64_t sub_1835BE618()
{
  unint64_t result = qword_1E8F64DF8;
  if (!qword_1E8F64DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64DF8);
  }
  return result;
}

unint64_t sub_1835BE66C()
{
  unint64_t result = qword_1E8F64E00;
  if (!qword_1E8F64E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E00);
  }
  return result;
}

uint64_t sub_1835BE6C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1835BE708(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1835BE770(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1835BE7D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for ReplyEnvelope.Error.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835BE904);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.CodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.FailedToExecuteCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.UnderlyingCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ReplyEnvelope.Error.CodableClientCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835BEA40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.CodableClientCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.CodableClientCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.NsErrorCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.NsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.ClientCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.ClientCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ReplyEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835BEB64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.CodingKeys()
{
  return &type metadata for ReplyEnvelope.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Metrics()
{
  return &type metadata for ReplyEnvelope.Metrics;
}

unint64_t sub_1835BEBB0()
{
  unint64_t result = qword_1E8F64E50;
  if (!qword_1E8F64E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E50);
  }
  return result;
}

unint64_t sub_1835BEC08()
{
  unint64_t result = qword_1E8F64E58;
  if (!qword_1E8F64E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E58);
  }
  return result;
}

unint64_t sub_1835BEC60()
{
  unint64_t result = qword_1E8F64E60;
  if (!qword_1E8F64E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E60);
  }
  return result;
}

unint64_t sub_1835BECB8()
{
  unint64_t result = qword_1E8F64E68;
  if (!qword_1E8F64E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E68);
  }
  return result;
}

unint64_t sub_1835BED10()
{
  unint64_t result = qword_1E8F64E70;
  if (!qword_1E8F64E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E70);
  }
  return result;
}

unint64_t sub_1835BED68()
{
  unint64_t result = qword_1E8F64E78;
  if (!qword_1E8F64E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E78);
  }
  return result;
}

unint64_t sub_1835BEDC0()
{
  unint64_t result = qword_1E8F64E80;
  if (!qword_1E8F64E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E80);
  }
  return result;
}

unint64_t sub_1835BEE18()
{
  unint64_t result = qword_1E8F64E88;
  if (!qword_1E8F64E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E88);
  }
  return result;
}

unint64_t sub_1835BEE70()
{
  unint64_t result = qword_1E8F64E90;
  if (!qword_1E8F64E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E90);
  }
  return result;
}

unint64_t sub_1835BEEC8()
{
  unint64_t result = qword_1E8F64E98;
  if (!qword_1E8F64E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64E98);
  }
  return result;
}

unint64_t sub_1835BEF20()
{
  unint64_t result = qword_1E8F64EA0;
  if (!qword_1E8F64EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EA0);
  }
  return result;
}

unint64_t sub_1835BEF78()
{
  unint64_t result = qword_1E8F64EA8;
  if (!qword_1E8F64EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EA8);
  }
  return result;
}

unint64_t sub_1835BEFD0()
{
  unint64_t result = qword_1E8F64EB0;
  if (!qword_1E8F64EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EB0);
  }
  return result;
}

unint64_t sub_1835BF028()
{
  unint64_t result = qword_1E8F64EB8;
  if (!qword_1E8F64EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EB8);
  }
  return result;
}

unint64_t sub_1835BF080()
{
  unint64_t result = qword_1E8F64EC0;
  if (!qword_1E8F64EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EC0);
  }
  return result;
}

unint64_t sub_1835BF0D8()
{
  unint64_t result = qword_1E8F64EC8;
  if (!qword_1E8F64EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EC8);
  }
  return result;
}

unint64_t sub_1835BF130()
{
  unint64_t result = qword_1E8F64ED0;
  if (!qword_1E8F64ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64ED0);
  }
  return result;
}

unint64_t sub_1835BF188()
{
  unint64_t result = qword_1E8F64ED8;
  if (!qword_1E8F64ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64ED8);
  }
  return result;
}

unint64_t sub_1835BF1E0()
{
  unint64_t result = qword_1E8F64EE0;
  if (!qword_1E8F64EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EE0);
  }
  return result;
}

unint64_t sub_1835BF238()
{
  unint64_t result = qword_1E8F64EE8;
  if (!qword_1E8F64EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EE8);
  }
  return result;
}

unint64_t sub_1835BF290()
{
  unint64_t result = qword_1E8F64EF0;
  if (!qword_1E8F64EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EF0);
  }
  return result;
}

unint64_t sub_1835BF2E8()
{
  unint64_t result = qword_1E8F64EF8;
  if (!qword_1E8F64EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64EF8);
  }
  return result;
}

unint64_t sub_1835BF33C()
{
  unint64_t result = qword_1E8F64F08;
  if (!qword_1E8F64F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F08);
  }
  return result;
}

uint64_t sub_1835BF390(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E64656C676E616DLL && a2 == 0xEB00000000656D61;
  if (v2 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x566465646F636E65 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_183D4592C();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1835BF4B4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x8000000183E27510 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5464656C696166 && a2 == 0xEF65747563657845 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69796C7265646E75 && a2 == 0xEA0000000000676ELL || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x43656C6261646F63 && a2 == 0xED0000746E65696CLL || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F727245736ELL && a2 == 0xE700000000000000 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E65696C63 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = sub_183D4592C();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1835BF780(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000183E27530)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_183D4592C();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1835BF808(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44496C6C6163 && a2 == 0xE600000000000000;
  if (v2 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 || (sub_183D4592C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_183D4592C();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unsigned char *_s7Network13ReplyEnvelopeV5ErrorO20UnderlyingCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1835BFA48);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Metrics.CodingKeys()
{
  return &type metadata for ReplyEnvelope.Metrics.CodingKeys;
}

unint64_t sub_1835BFA84()
{
  unint64_t result = qword_1E8F64F18;
  if (!qword_1E8F64F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F18);
  }
  return result;
}

unint64_t sub_1835BFADC()
{
  unint64_t result = qword_1E8F64F20;
  if (!qword_1E8F64F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F20);
  }
  return result;
}

unint64_t sub_1835BFB34()
{
  unint64_t result = qword_1E8F64F28;
  if (!qword_1E8F64F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F28);
  }
  return result;
}

uint64_t sub_1835BFB90(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_183D44B9C();
}

uint64_t sub_1835BFC48()
{
  uint64_t v0 = sub_183D4498C();
  __swift_allocate_value_buffer(v0, qword_1E8F7A940);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E8F7A940);
  return sub_183D4497C();
}

void *NWActorSystemInvocationDecoder.decodeGenericSubstitutions()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NWActorSystemInvocationDecoder() + 20);
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for RemoteCallEnvelope(0) + 28));
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_183D4549C();
    swift_bridgeObjectRelease();
    if (v6)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_1834B53F0(0, v5[2] + 1, 1, v5);
      }
      unint64_t v8 = v5[2];
      unint64_t v7 = v5[3];
      if (v8 >= v7 >> 1) {
        uint64_t v5 = sub_1834B53F0((void *)(v7 > 1), v8 + 1, 1, v5);
      }
      long long v5[2] = v8 + 1;
      v5[v8 + 4] = v6;
    }
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t type metadata accessor for NWActorSystemInvocationDecoder()
{
  uint64_t result = qword_1E8F64F30;
  if (!qword_1E8F64F30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t NWActorSystemInvocationDecoder.decodeNextArgument<A>()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  swift_conformsToProtocol();
  swift_conformsToProtocol();
  uint64_t v5 = sub_183D4536C();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = type metadata accessor for NWActorSystemInvocationDecoder();
  uint64_t v14 = (void *)(v2 + *(int *)(result + 24));
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  unint64_t v17 = *(void *)(*v14 + 16);
  if (v15 == v17)
  {
    sub_1834F0498();
    swift_allocError();
    *(void *)uint64_t v18 = a1;
    *(_OWORD *)(v18 + 8) = xmmword_183D5C470;
    return swift_willThrow();
  }
  if (v15 < v17)
  {
    uint64_t v42 = v6;
    uint64_t v43 = v10;
    uint64_t v19 = v16 + 16 * v15;
    uint64_t v21 = *(void *)(v19 + 32);
    unint64_t v20 = *(void *)(v19 + 40);
    uint64_t v44 = v21;
    unint64_t v45 = v20;
    v14[1] = v15 + 1;
    if (*(unsigned char *)(v2 + *(int *)(result + 28)) == 1
      && ((uint64_t v22 = swift_conformsToProtocol2()) != 0 ? (v23 = v22) : (v23 = 0), v22 ? (v24 = a1) : (v24 = 0), v24))
    {
      uint64_t v39 = a2;
      uint64_t v41 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v23 + 24);
      uint64_t v48 = v24;
      uint64_t v49 = v23;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v47);
      uint64_t v26 = v44;
      unint64_t v25 = v45;
      sub_1832E5D6C(v44, v45);
      sub_1832E5D6C(v26, v25);
      uint64_t v27 = v50;
      v41(v26, v25, v24, v23);
      if (v27)
      {
        __swift_deallocate_boxed_opaque_existential_1Tm((uint64_t)v47);
      }
      else
      {
        sub_1834BDE24((uint64_t)v47, (uint64_t)v46);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63D30);
        int v31 = swift_dynamicCast();
        uint64_t v32 = v43;
        unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
        if (v31)
        {
          v33(v9, 0, 1, a1);
          sub_1832E5E9C(v44, v45);
          uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
          v34(v12, v9, a1);
          v34(v39, v12, a1);
          return __swift_destroy_boxed_opaque_existential_2((uint64_t)v47);
        }
        v33(v9, 1, 1, a1);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v5);
        uint64_t v35 = sub_183D4554C();
        swift_allocError();
        uint64_t v37 = v36;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63D38);
        __swift_project_boxed_opaque_existential_2(v47, v48);
        *uint64_t v37 = swift_getDynamicType();
        sub_183D4553C();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x1E4FBBA70], v35);
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v47);
      }
      uint64_t v29 = v44;
      unint64_t v28 = v45;
    }
    else
    {
      uint64_t v29 = v44;
      unint64_t v28 = v45;
      sub_1832E5D6C(v44, v45);
      uint64_t v30 = v50;
      sub_183D4423C();
      if (!v30) {
        return sub_1832E5E9C(v29, v28);
      }
    }
    swift_willThrow();
    return sub_1832E5E9C(v29, v28);
  }
  __break(1u);
  return result;
}

uint64_t NWActorSystemInvocationDecoder.decodeErrorType()()
{
  return 0;
}

uint64_t NWActorSystemInvocationDecoder.decodeReturnType()()
{
  return 0;
}

void *sub_1835C02E0()
{
  return NWActorSystemInvocationDecoder.decodeGenericSubstitutions()();
}

uint64_t sub_1835C02F8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return NWActorSystemInvocationDecoder.decodeNextArgument<A>()(a1, a2);
}

void *initializeBufferWithCopyOfBuffer for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_183D445FC();
    int v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v31(v9, v10, v11);
    uint64_t v12 = (int *)type metadata accessor for RemoteCallEnvelope(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &v9[v13];
    unint64_t v15 = &v10[v13];
    uint64_t v16 = *(void *)&v10[v13 + 8];
    *(void *)uint64_t v14 = *(void *)&v10[v13];
    *((void *)v14 + 1) = v16;
    uint64_t v17 = *(int *)(type metadata accessor for NWActorID() + 20);
    uint64_t v18 = &v14[v17];
    uint64_t v19 = &v15[v17];
    swift_bridgeObjectRetain();
    v31(v18, v19, v11);
    uint64_t v20 = v12[6];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    *(void *)&v9[v12[7]] = *(void *)&v10[v12[7]];
    *(void *)&v9[v12[8]] = *(void *)&v10[v12[8]];
    *(void *)&v9[v12[9]] = *(void *)&v10[v12[9]];
    uint64_t v24 = a3[6];
    uint64_t v25 = a3[7];
    uint64_t v26 = (void *)((char *)v7 + v24);
    uint64_t v27 = (void *)((char *)a2 + v24);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    *uint64_t v26 = v29;
    v26[1] = v28;
    *((unsigned char *)v7 + v25) = *((unsigned char *)a2 + v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for NWActorSystemInvocationDecoder(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_183D445FC();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = v4 + *(int *)(type metadata accessor for RemoteCallEnvelope(0) + 20);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for NWActorID();
  v6(v7 + *(int *)(v8 + 20), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_183D445FC();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_retain();
  v28(v6, v7, v8);
  uint64_t v9 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v6[v10];
  uint64_t v12 = &v7[v10];
  uint64_t v13 = *(void *)&v7[v10 + 8];
  *(void *)uint64_t v11 = *(void *)&v7[v10];
  *((void *)v11 + 1) = v13;
  uint64_t v14 = *(int *)(type metadata accessor for NWActorID() + 20);
  unint64_t v15 = &v11[v14];
  uint64_t v16 = &v12[v14];
  swift_bridgeObjectRetain();
  v28(v15, v16, v8);
  uint64_t v17 = v9[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  *(void *)&v6[v9[7]] = *(void *)&v7[v9[7]];
  *(void *)&v6[v9[8]] = *(void *)&v7[v9[8]];
  *(void *)&v6[v9[9]] = *(void *)&v7[v9[9]];
  uint64_t v21 = a3[6];
  uint64_t v22 = a3[7];
  uint64_t v23 = (void *)((char *)a1 + v21);
  uint64_t v24 = (void *)((char *)a2 + v21);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_183D445FC();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  uint64_t v11 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  *(void *)uint64_t v13 = *(void *)&v8[v12];
  *((void *)v13 + 1) = *(void *)&v8[v12 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
  uint64_t v16 = v11[6];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[7]] = *(void *)&v8[v11[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[8]] = *(void *)&v8[v11[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[9]] = *(void *)&v8[v11[9]];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v20 + 1) = *((void *)v21 + 1);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void *initializeWithTake for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_183D445FC();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  uint64_t v10 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v6[v11];
  uint64_t v13 = &v7[v11];
  *(_OWORD *)&v6[v11] = *(_OWORD *)&v7[v11];
  uint64_t v14 = type metadata accessor for NWActorID();
  v9(&v12[*(int *)(v14 + 20)], &v13[*(int *)(v14 + 20)], v8);
  *(_OWORD *)&v6[v10[6]] = *(_OWORD *)&v7[v10[6]];
  *(void *)&v6[v10[7]] = *(void *)&v7[v10[7]];
  *(void *)&v6[v10[8]] = *(void *)&v7[v10[8]];
  *(void *)&v6[v10[9]] = *(void *)&v7[v10[9]];
  uint64_t v15 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

void *assignWithTake for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_183D445FC();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  uint64_t v11 = (int *)type metadata accessor for RemoteCallEnvelope(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v15 = *(void *)&v8[v12 + 8];
  *(void *)uint64_t v13 = *(void *)&v8[v12];
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v16 + 20)], &v14[*(int *)(v16 + 20)], v9);
  uint64_t v17 = v11[6];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[7]] = *(void *)&v8[v11[7]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[8]] = *(void *)&v8[v11[8]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[9]] = *(void *)&v8[v11[9]];
  uint64_t v22 = a3[6];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  swift_bridgeObjectRelease();
  *((void *)v23 + 1) = *((void *)v24 + 1);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemInvocationDecoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1835C0C30);
}

uint64_t sub_1835C0C30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RemoteCallEnvelope(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NWActorSystemInvocationDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835C0CF4);
}

void *sub_1835C0CF4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for RemoteCallEnvelope(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1835C0D9C()
{
  uint64_t result = type metadata accessor for RemoteCallEnvelope(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1835C0E50(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x65756C6176;
    }
    else {
      unint64_t v3 = 0xD000000000000010;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0x8000000183E23820;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0x65756C6176;
      }
      else {
        unint64_t v6 = 0xD000000000000010;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0x8000000183E23820;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    unint64_t v3 = 1701667182;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701667182)
  {
LABEL_21:
    char v8 = sub_183D4592C();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1835C0F54(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x8000000183E23840;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x6946726564616568;
    }
    else {
      unint64_t v5 = 0x68506E6F73616572;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEC00000073646C65;
    }
    else {
      unint64_t v6 = 0xEC00000065736172;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000012;
  unint64_t v6 = 0x8000000183E23840;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0x6946726564616568;
    }
    else {
      unint64_t v2 = 0x68506E6F73616572;
    }
    if (v7 == 1) {
      unint64_t v3 = 0xEC00000073646C65;
    }
    else {
      unint64_t v3 = 0xEC00000065736172;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = sub_183D4592C();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1835C1084(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x6946726564616568;
  }
  else {
    unint64_t v3 = 0xD000000000000012;
  }
  if (v2) {
    unint64_t v4 = 0x8000000183E23840;
  }
  else {
    unint64_t v4 = 0xEC00000073646C65;
  }
  if (a2) {
    unint64_t v5 = 0x6946726564616568;
  }
  else {
    unint64_t v5 = 0xD000000000000012;
  }
  if (a2) {
    unint64_t v6 = 0xEC00000073646C65;
  }
  else {
    unint64_t v6 = 0x8000000183E23840;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_183D4592C();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1835C1138(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 0x646F70656D6F68;
    }
    else {
      uint64_t v2 = 0x72656B61657073;
    }
    unint64_t v3 = 0xE700000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 0x646F70656D6F68;
      }
      else {
        uint64_t v5 = 0x72656B61657073;
      }
      unint64_t v6 = 0xE700000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v2 = 7496035;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE300000000000000;
  if (v2 != 7496035)
  {
LABEL_15:
    char v7 = sub_183D4592C();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1835C1244(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xE900000000000079;
  uint64_t v3 = 0x74696D69786F7270;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x73646E65697266;
    }
    else {
      uint64_t v5 = 0x656E6F7972657665;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE700000000000000;
    }
    else {
      unint64_t v6 = 0xE800000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x74696D69786F7270;
  unint64_t v6 = 0xE900000000000079;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x73646E65697266;
    }
    else {
      uint64_t v3 = 0x656E6F7972657665;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE700000000000000;
    }
    else {
      unint64_t v2 = 0xE800000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_183D4592C();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t HTTPRequest.scheme.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_1834BFA48(*(void *)(v2 + 56), *(void *)(v2 + 64));
    *(void *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    return result;
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[8];
  if (v6)
  {
    uint64_t v7 = v3[7];
    uint64_t v17 = v3[9];
    uint64_t v15 = v3[10];
    uint64_t v16 = v3[11];
    if (sub_1834BF534(a1, a2))
    {
      sub_1834BF9F8(v7, v6);
    }
    else
    {
      sub_1834BF9F8(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x656D656863733ALL && v15 == 0xE700000000000000)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
    }
    else
    {
      char v14 = sub_183D4592C();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[7] = v7;
    v3[8] = v6;
    v3[9] = v17;
    v3[10] = v15;
    v3[11] = v13;
  }
  else
  {
    if ((sub_1834BF534(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(v3 + 7) = xmmword_183D5A630;
    *(_OWORD *)(v3 + 9) = xmmword_183D5A630;
    v3[11] = 0;
  }
  v3[12] = v9;
  v3[13] = v11;
  return result;
}

uint64_t HTTPRequest.authority.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_1834BFA48(*(void *)(v2 + 112), *(void *)(v2 + 120));
    *(void *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    return result;
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[15];
  if (v6)
  {
    uint64_t v7 = v3[14];
    uint64_t v17 = v3[16];
    uint64_t v15 = v3[17];
    uint64_t v16 = v3[18];
    if (sub_1834BF534(a1, a2))
    {
      sub_1834BF9F8(v7, v6);
    }
    else
    {
      sub_1834BF9F8(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x69726F687475613ALL && v15 == 0xEA00000000007974)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
    }
    else
    {
      char v14 = sub_183D4592C();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[14] = v7;
    v3[15] = v6;
    v3[16] = v17;
    v3[17] = v15;
    v3[18] = v13;
  }
  else
  {
    if ((sub_1834BF534(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *((_OWORD *)v3 + 7) = xmmword_183D5A640;
    *((_OWORD *)v3 + 8) = xmmword_183D5A640;
    v3[18] = 0;
  }
  v3[19] = v9;
  v3[20] = v11;
  return result;
}

uint64_t HTTPRequest.path.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_1834BFA48(*(void *)(v2 + 168), *(void *)(v2 + 176));
    *(void *)(v2 + 216) = 0;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    return result;
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[22];
  if (v6)
  {
    uint64_t v7 = v3[21];
    uint64_t v17 = v3[23];
    uint64_t v15 = v3[24];
    uint64_t v16 = v3[25];
    if (sub_1834BF534(a1, a2))
    {
      sub_1834BF9F8(v7, v6);
    }
    else
    {
      sub_1834BF9F8(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x687461703ALL && v15 == 0xE500000000000000)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
    }
    else
    {
      char v14 = sub_183D4592C();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[21] = v7;
    v3[22] = v6;
    v3[23] = v17;
    v3[24] = v15;
    v3[25] = v13;
  }
  else
  {
    if ((sub_1834BF534(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(v3 + 21) = xmmword_183D5A650;
    *(_OWORD *)(v3 + 23) = xmmword_183D5A650;
    v3[25] = 0;
  }
  v3[26] = v9;
  v3[27] = v11;
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.scheme.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x656D656863733ALL ? (BOOL v9 = v5 == 0xE700000000000000) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_183D4592C(), (result & 1) != 0)))
  {
    uint64_t result = sub_1834BFA48(v1[7], v1[8]);
    v1[7] = v3;
    v1[8] = v2;
    v1[9] = v4;
    v1[10] = v5;
    v1[11] = v6;
    v1[12] = v7;
    v1[13] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.authority.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x69726F687475613ALL ? (BOOL v9 = v5 == 0xEA00000000007974) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_183D4592C(), (result & 1) != 0)))
  {
    uint64_t result = sub_1834BFA48(v1[14], v1[15]);
    v1[14] = v3;
    v1[15] = v2;
    v1[16] = v4;
    v1[17] = v5;
    v1[18] = v6;
    v1[19] = v7;
    v1[20] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.path.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x687461703ALL ? (BOOL v9 = v5 == 0xE500000000000000) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_183D4592C(), (result & 1) != 0)))
  {
    uint64_t result = sub_1834BFA48(v1[21], v1[22]);
    v1[21] = v3;
    v1[22] = v2;
    v1[23] = v4;
    v1[24] = v5;
    v1[25] = v6;
    v1[26] = v7;
    v1[27] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static HTTPRequest.Method.get.getter(void *a1@<X8>)
{
  *a1 = 5522759;
  a1[1] = 0xE300000000000000;
}

double HTTPRequest.init(method:scheme:authority:path:headerFields:)@<D0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v10 = a5;
  uint64_t v40 = a1[1];
  uint64_t v41 = *a1;
  uint64_t v42 = *a8;
  if (a3)
  {
    uint64_t v14 = a2;
    if (sub_1834BF534(a2, a3))
    {
      swift_bridgeObjectRetain();
      unint64_t v15 = a3;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
    }
    uint64_t v25 = sub_1834FBAD4(v14, v15);
    uint64_t v38 = v26;
    uint64_t v39 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v17 = 0xE700000000000000;
    uint64_t v16 = 0x656D656863733ALL;
    if (v10)
    {
LABEL_9:
      if (sub_1834BF534(a4, v10))
      {
        swift_bridgeObjectRetain();
        unint64_t v27 = v10;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
        sub_1835C2568();
        sub_183D44C0C();
        a4 = 0;
        unint64_t v27 = 0xE000000000000000;
      }
      uint64_t v19 = sub_1834FBAD4(a4, v27);
      uint64_t v20 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xEA00000000007974;
      uint64_t v18 = 0x69726F687475613ALL;
      if (a7) {
        goto LABEL_13;
      }
LABEL_6:
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    if (a5) {
      goto LABEL_9;
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (!a7) {
    goto LABEL_6;
  }
LABEL_13:
  uint64_t v36 = v16;
  unint64_t v29 = v17;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  if (sub_1834BF534(a6, a7))
  {
    swift_bridgeObjectRetain();
    unint64_t v32 = a7;
    uint64_t v33 = a6;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
    sub_1835C2568();
    sub_183D44C0C();
    uint64_t v33 = 0;
    unint64_t v32 = 0xE000000000000000;
  }
  uint64_t v23 = sub_1834FBAD4(v33, v32);
  uint64_t v24 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v22 = 0xE500000000000000;
  uint64_t v21 = 0x687461703ALL;
  uint64_t v19 = v31;
  uint64_t v20 = v30;
  unint64_t v17 = v29;
  uint64_t v16 = v36;
LABEL_17:
  *(void *)a9 = 0x646F6874656D3ALL;
  *(void *)(a9 + 8) = 0xE700000000000000;
  *(void *)(a9 + 16) = 0x646F6874656D3ALL;
  *(void *)(a9 + 24) = 0xE700000000000000;
  *(unsigned char *)(a9 + 32) = 0;
  *(void *)(a9 + 40) = v41;
  *(void *)(a9 + 48) = v40;
  *(void *)(a9 + 56) = v16;
  *(void *)(a9 + 64) = v17;
  *(void *)(a9 + 72) = v16;
  *(void *)(a9 + 80) = v17;
  *(void *)(a9 + 88) = 0;
  *(void *)(a9 + 96) = v39;
  *(void *)(a9 + 104) = v38;
  *(void *)(a9 + 112) = v18;
  *(void *)(a9 + 120) = v10;
  *(void *)(a9 + 128) = v18;
  *(void *)(a9 + 136) = v10;
  *(void *)(a9 + 144) = 0;
  *(void *)(a9 + 152) = v19;
  *(void *)(a9 + 160) = v20;
  *(void *)(a9 + 168) = v21;
  *(void *)(a9 + 176) = v22;
  *(void *)(a9 + 184) = v21;
  *(void *)(a9 + 192) = v22;
  *(void *)(a9 + 200) = 0;
  *(void *)(a9 + 208) = v23;
  *(void *)(a9 + 216) = v24;
  double result = 0.0;
  *(_OWORD *)(a9 + 240) = 0u;
  *(_OWORD *)(a9 + 256) = 0u;
  *(_OWORD *)(a9 + 224) = 0u;
  *(void *)(a9 + 272) = 0;
  *(void *)(a9 + 280) = v42;
  return result;
}

uint64_t HTTPRequest.method.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  *a1 = *(void *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void static HTTPRequest.Method.connect.getter(void *a1@<X8>)
{
  *a1 = 0x5443454E4E4F43;
  a1[1] = 0xE700000000000000;
}

Network::HTTPRequest::Method_optional __swiftcall HTTPRequest.Method.init(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t v3 = v1;
  uint64_t v4 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0) {
    uint64_t v4 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v4
    && (uint64_t countAndFlagsBits = a1._countAndFlagsBits,
        uint64_t v6 = sub_183529FF8(a1._countAndFlagsBits, (unint64_t)a1._object),
        (v6 & 1) != 0))
  {
    *uint64_t v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }
  else
  {
    uint64_t v6 = swift_bridgeObjectRelease();
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  result.value.rawValue._object = v7;
  result.value.rawValue._uint64_t countAndFlagsBits = v6;
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x6F636F746F72703ALL ? (BOOL v9 = v5 == 0xE90000000000006CLL) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_183D4592C(), (result & 1) != 0)))
  {
    uint64_t result = sub_1834BFA48(v1[28], v1[29]);
    v1[28] = v3;
    v1[29] = v2;
    v1[30] = v4;
    v1[31] = v5;
    v1[32] = v6;
    v1[33] = v7;
    v1[34] = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static HTTPRequest.Method.head.getter(void *a1@<X8>)
{
  *a1 = 1145128264;
  a1[1] = 0xE400000000000000;
}

void static HTTPRequest.Method.post.getter(void *a1@<X8>)
{
  *a1 = 1414745936;
  a1[1] = 0xE400000000000000;
}

void static HTTPRequest.Method.put.getter(void *a1@<X8>)
{
  *a1 = 5526864;
  a1[1] = 0xE300000000000000;
}

void static HTTPRequest.Method.delete.getter(void *a1@<X8>)
{
  *a1 = 0x4554454C4544;
  a1[1] = 0xE600000000000000;
}

void static HTTPRequest.Method.options.getter(void *a1@<X8>)
{
  *a1 = 0x534E4F4954504FLL;
  a1[1] = 0xE700000000000000;
}

void static HTTPRequest.Method.trace.getter(void *a1@<X8>)
{
  *a1 = 0x4543415254;
  a1[1] = 0xE500000000000000;
}

void static HTTPRequest.Method.patch.getter(void *a1@<X8>)
{
  *a1 = 0x4843544150;
  a1[1] = 0xE500000000000000;
}

uint64_t HTTPRequest.method.setter(unint64_t *a1)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  char v8 = *((unsigned char *)v1 + 32);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  BOOL v10 = v6 == 0x646F6874656D3ALL && v7 == 0xE700000000000000;
  if (v10 || (uint64_t result = sub_183D4592C(), (result & 1) != 0))
  {
    uint64_t v11 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      char v12 = sub_183529FF8(v2, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v12)
      {
        *uint64_t v1 = v5;
        v1[1] = v4;
        v1[2] = v6;
        v1[3] = v7;
        *((unsigned char *)v1 + 32) = v8;
        v1[5] = v2;
        v1[6] = v3;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.method.setter(uint64_t result)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)(result + 24);
  char v6 = *(unsigned char *)(result + 32);
  unint64_t v7 = *(void *)(result + 40);
  unint64_t v8 = *(void *)(result + 48);
  BOOL v9 = v4 == 0x646F6874656D3ALL && v5 == 0xE700000000000000;
  if (v9 || (uint64_t result = sub_183D4592C(), (result & 1) != 0))
  {
    uint64_t v10 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      uint64_t result = sub_183529FF8(v7, v8);
      if (result)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)uint64_t v1 = v2;
        *(void *)(v1 + 8) = v3;
        *(void *)(v1 + 16) = v4;
        *(void *)(v1 + 24) = v5;
        *(unsigned char *)(v1 + 32) = v6;
        *(void *)(v1 + 40) = v7;
        *(void *)(v1 + 48) = v8;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1835C2568()
{
  unint64_t result = qword_1E8F630E8;
  if (!qword_1E8F630E8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F630E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F630E8);
  }
  return result;
}

Network::HTTPRequest::Method_optional __swiftcall HTTPRequest.Method.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  uint64_t v3 = v1;
  uint64_t v4 = HIBYTE(rawValue._object) & 0xF;
  if (((uint64_t)rawValue._object & 0x2000000000000000) == 0) {
    uint64_t v4 = rawValue._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v4
    && (uint64_t countAndFlagsBits = rawValue._countAndFlagsBits,
        uint64_t v6 = sub_183529FF8(rawValue._countAndFlagsBits, (unint64_t)rawValue._object),
        (v6 & 1) != 0))
  {
    *uint64_t v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }
  else
  {
    uint64_t v6 = swift_bridgeObjectRelease();
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  result.value.rawValue._object = v7;
  result.value.rawValue._uint64_t countAndFlagsBits = v6;
  return result;
}

uint64_t HTTPRequest.Method.description.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1835C2664()
{
  return sub_183D45B4C();
}

uint64_t sub_1835C26C0()
{
  swift_bridgeObjectRetain();
  sub_183D44C4C();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1835C2718()
{
  return sub_183D45B4C();
}

uint64_t sub_1835C2770(Swift::String *a1)
{
  return HTTPRequest.Method.init(rawValue:)(*a1).value.rawValue._countAndFlagsBits;
}

uint64_t sub_1835C277C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1835C278C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  char v9 = *((unsigned char *)a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11[0] = v6;
  v11[1] = v5;
  v11[2] = v8;
  _OWORD v11[3] = v7;
  char v12 = v9;
  uint64_t v13 = v4;
  uint64_t v14 = v3;
  sub_1835C3B6C(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  a2[1] = v5;
  a2[2] = v8;
  a2[3] = v7;
  *((unsigned char *)a2 + 32) = v9;
  a2[5] = v4;
  a2[6] = v3;
  return result;
}

uint64_t (*HTTPRequest.method.modify(void *a1))(unint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 48);
  *a1 = *(void *)(v1 + 40);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return sub_1835C2890;
}

uint64_t sub_1835C2890(unint64_t *a1, char a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v4 = *a1;
  uint64_t v6 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  char v9 = *(unsigned char *)(v3 + 32);
  BOOL v11 = v7 == 0x646F6874656D3ALL && v8 == 0xE700000000000000;
  if ((a2 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v11)
    {
      uint64_t result = sub_183D4592C();
      if ((result & 1) == 0) {
        goto LABEL_29;
      }
    }
    uint64_t v15 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      uint64_t v15 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
      char v16 = sub_183529FF8(v4, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16)
      {
        *(void *)unint64_t v3 = v6;
        *(void *)(v3 + 8) = v5;
        *(void *)(v3 + 16) = v7;
        *(void *)(v3 + 24) = v8;
        *(unsigned char *)(v3 + 32) = v9;
        *(void *)(v3 + 40) = v4;
        *(void *)(v3 + 48) = v2;
        return result;
      }
      goto LABEL_27;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (!v11)
  {
    uint64_t result = sub_183D4592C();
    if ((result & 1) == 0) {
      goto LABEL_28;
    }
  }
  uint64_t v13 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v13 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {
    __break(1u);
    goto LABEL_25;
  }
  char v14 = sub_183529FF8(v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)unint64_t v3 = v6;
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = v7;
  *(void *)(v3 + 24) = v8;
  *(unsigned char *)(v3 + 32) = v9;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = v2;

  return swift_bridgeObjectRelease();
}

unint64_t HTTPRequest.scheme.getter()
{
  uint64_t v1 = v0[8];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0[7];
  unint64_t v3 = v0[12];
  unint64_t v4 = v0[13];
  if (sub_1834BF534(v3, v4))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1834BF9F8(v2, v1);
    unint64_t v5 = sub_1835A378C(v3, v4);
    sub_1834BFA48(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_1835C2B70@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[8];
  if (__dst[8])
  {
    uint64_t v5 = __dst[7];
    unint64_t v6 = __dst[12];
    unint64_t v7 = __dst[13];
    if (sub_1834BF534(__dst[12], __dst[13]))
    {
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18350BA8C(__dst);
      sub_1834BF9F8(v5, v4);
      unint64_t v8 = sub_1835A378C(v6, v7);
      unint64_t v10 = v9;
      sub_1834BFA48(v5, v4);
      uint64_t result = (uint64_t)sub_18356D810(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.scheme.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[8];
  if (v3)
  {
    uint64_t v4 = v1[7];
    unint64_t v5 = v1[12];
    unint64_t v6 = v1[13];
    if (sub_1834BF534(v5, v6))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1834BF9F8(v4, v3);
      unint64_t v7 = sub_1835A378C(v5, v6);
      unint64_t v9 = v8;
      sub_1834BFA48(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1835C2D88;
}

uint64_t sub_1835C2D88(uint64_t *a1, char a2)
{
  return sub_1835C39D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.scheme.setter);
}

unint64_t HTTPRequest.authority.getter()
{
  uint64_t v1 = v0[15];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0[14];
  unint64_t v3 = v0[19];
  unint64_t v4 = v0[20];
  if (sub_1834BF534(v3, v4))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1834BF9F8(v2, v1);
    unint64_t v5 = sub_1835A378C(v3, v4);
    sub_1834BFA48(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_1835C2E8C@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[15];
  if (__dst[15])
  {
    uint64_t v5 = __dst[14];
    unint64_t v6 = __dst[19];
    unint64_t v7 = __dst[20];
    if (sub_1834BF534(__dst[19], __dst[20]))
    {
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18350BA8C(__dst);
      sub_1834BF9F8(v5, v4);
      unint64_t v8 = sub_1835A378C(v6, v7);
      unint64_t v10 = v9;
      sub_1834BFA48(v5, v4);
      uint64_t result = (uint64_t)sub_18356D810(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.authority.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[15];
  if (v3)
  {
    uint64_t v4 = v1[14];
    unint64_t v5 = v1[19];
    unint64_t v6 = v1[20];
    if (sub_1834BF534(v5, v6))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1834BF9F8(v4, v3);
      unint64_t v7 = sub_1835A378C(v5, v6);
      unint64_t v9 = v8;
      sub_1834BFA48(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1835C30A4;
}

uint64_t sub_1835C30A4(uint64_t *a1, char a2)
{
  return sub_1835C39D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.authority.setter);
}

unint64_t HTTPRequest.path.getter()
{
  uint64_t v1 = v0[22];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0[21];
  unint64_t v3 = v0[26];
  unint64_t v4 = v0[27];
  if (sub_1834BF534(v3, v4))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1834BF9F8(v2, v1);
    unint64_t v5 = sub_1835A378C(v3, v4);
    sub_1834BFA48(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_1835C31A8@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[22];
  if (__dst[22])
  {
    uint64_t v5 = __dst[21];
    unint64_t v6 = __dst[26];
    unint64_t v7 = __dst[27];
    if (sub_1834BF534(__dst[26], __dst[27]))
    {
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18350BA8C(__dst);
      sub_1834BF9F8(v5, v4);
      unint64_t v8 = sub_1835A378C(v6, v7);
      unint64_t v10 = v9;
      sub_1834BFA48(v5, v4);
      uint64_t result = (uint64_t)sub_18356D810(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.path.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[22];
  if (v3)
  {
    uint64_t v4 = v1[21];
    unint64_t v5 = v1[26];
    unint64_t v6 = v1[27];
    if (sub_1834BF534(v5, v6))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1834BF9F8(v4, v3);
      unint64_t v7 = sub_1835A378C(v5, v6);
      unint64_t v9 = v8;
      sub_1834BFA48(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1835C33C0;
}

uint64_t sub_1835C33C0(uint64_t *a1, char a2)
{
  return sub_1835C39D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.path.setter);
}

unint64_t HTTPRequest.extendedConnectProtocol.getter()
{
  uint64_t v1 = v0[29];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0[28];
  unint64_t v3 = v0[33];
  unint64_t v4 = v0[34];
  if (sub_1834BF534(v3, v4))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1834BF9F8(v2, v1);
    unint64_t v5 = sub_1835A378C(v3, v4);
    sub_1834BFA48(v2, v1);
    return v5;
  }
  return v3;
}

uint64_t sub_1835C34C4@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[29];
  if (__dst[29])
  {
    uint64_t v5 = __dst[28];
    unint64_t v6 = __dst[33];
    unint64_t v7 = __dst[34];
    if (sub_1834BF534(__dst[33], __dst[34]))
    {
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      sub_18350BA8C(__dst);
      sub_1834BF9F8(v5, v4);
      unint64_t v8 = sub_1835A378C(v6, v7);
      unint64_t v10 = v9;
      sub_1834BFA48(v5, v4);
      uint64_t result = (uint64_t)sub_18356D810(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t HTTPRequest.extendedConnectProtocol.setter(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_1834BFA48(*(void *)(v2 + 224), *(void *)(v2 + 232));
    *(void *)(v2 + 272) = 0;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    return result;
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[29];
  if (v6)
  {
    uint64_t v7 = v3[28];
    uint64_t v17 = v3[30];
    uint64_t v15 = v3[31];
    uint64_t v16 = v3[32];
    if (sub_1834BF534(a1, a2))
    {
      sub_1834BF9F8(v7, v6);
    }
    else
    {
      sub_1834BF9F8(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x6F636F746F72703ALL && v15 == 0xE90000000000006CLL)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
    }
    else
    {
      char v14 = sub_183D4592C();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_1834BFA48(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
    v3[28] = v7;
    v3[29] = v6;
    v3[30] = v17;
    v3[31] = v15;
    v3[32] = v13;
  }
  else
  {
    if ((sub_1834BF534(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F630E0);
      sub_1835C2568();
      sub_183D44C0C();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    uint64_t v9 = sub_1834FBAD4(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *((_OWORD *)v3 + 14) = xmmword_183D5A660;
    *((_OWORD *)v3 + 15) = xmmword_183D5A660;
    v3[32] = 0;
  }
  v3[33] = v9;
  v3[34] = v11;
  return result;
}

uint64_t (*HTTPRequest.extendedConnectProtocol.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[29];
  if (v3)
  {
    uint64_t v4 = v1[28];
    unint64_t v5 = v1[33];
    unint64_t v6 = v1[34];
    if (sub_1834BF534(v5, v6))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1834BF9F8(v4, v3);
      unint64_t v7 = sub_1835A378C(v5, v6);
      unint64_t v9 = v8;
      sub_1834BFA48(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1835C39B8;
}

uint64_t sub_1835C39B8(uint64_t *a1, char a2)
{
  return sub_1835C39D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.extendedConnectProtocol.setter);
}

uint64_t sub_1835C39D0(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v4);
  }
  swift_bridgeObjectRetain();
  a3(v5, v4);

  return swift_bridgeObjectRelease();
}

uint64_t HTTPRequest.PseudoHeaderFields.method.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((unsigned char *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1835C3AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  v11[0] = *(void *)a1;
  uint64_t v4 = v11[0];
  v11[1] = v3;
  v11[2] = v6;
  _OWORD v11[3] = v5;
  char v12 = v7;
  uint64_t v13 = v9;
  uint64_t v14 = v8;
  sub_1835C3B6C(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_1835C3B6C(void *a1)
{
  uint64_t result = a1[2];
  unint64_t v3 = a1[5];
  unint64_t v4 = a1[6];
  if (result != 0x646F6874656D3ALL || a1[3] != 0xE700000000000000)
  {
    uint64_t result = sub_183D4592C();
    if ((result & 1) == 0) {
      goto LABEL_13;
    }
  }
  uint64_t v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = sub_183529FF8(v3, v4);
  if ((result & 1) == 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.method.modify(void *a1))(uint64_t **a1, char a2)
{
  unint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  char v8 = *((unsigned char *)v1 + 32);
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  *unint64_t v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  *((unsigned char *)v3 + 32) = v8;
  v3[5] = v9;
  v3[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1835C3CAC;
}

void sub_1835C3CAC(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  char v15 = *((unsigned char *)*a1 + 32);
  unint64_t v7 = (*a1)[5];
  unint64_t v8 = (*a1)[6];
  BOOL v10 = v5 == 0x646F6874656D3ALL && v6 == 0xE700000000000000;
  if ((a2 & 1) == 0)
  {
    if (!v10 && (sub_183D4592C() & 1) == 0) {
      goto LABEL_30;
    }
    uint64_t v13 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v13 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v13)
    {
      if (sub_183529FF8(v7, v8))
      {
        uint64_t v14 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v14 = v4;
        *(void *)(v14 + 8) = v3;
        *(void *)(v14 + 16) = v5;
        *(void *)(v14 + 24) = v6;
        *(unsigned char *)(v14 + 32) = v15;
        *(void *)(v14 + 40) = v7;
        *(void *)(v14 + 48) = v8;
        goto LABEL_22;
      }
      goto LABEL_28;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return;
  }
  if (!v10 && (sub_183D4592C() & 1) == 0) {
    goto LABEL_29;
  }
  uint64_t v11 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    __break(1u);
    goto LABEL_26;
  }
  if ((sub_183529FF8(v7, v8) & 1) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v12 = v2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v12 = v4;
  *(void *)(v12 + 8) = v3;
  *(void *)(v12 + 16) = v5;
  *(void *)(v12 + 24) = v6;
  *(unsigned char *)(v12 + 32) = v15;
  *(void *)(v12 + 40) = v7;
  *(void *)(v12 + 48) = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_22:

  free(v2);
}

uint64_t HTTPRequest.PseudoHeaderFields.scheme.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  uint64_t v5 = v1[10];
  uint64_t v6 = v1[11];
  uint64_t v7 = v1[12];
  uint64_t v8 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_1834BF9F8(v2, v3);
}

uint64_t sub_1835C3EE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[7];
  uint64_t v2 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_1834BF9F8(v3, v2);
}

uint64_t sub_1835C3F08(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x656D656863733ALL && v6 == 0xE700000000000000) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_183D4592C();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if (result)
  {
LABEL_7:
    uint64_t v17 = a2[7];
    uint64_t v18 = a2[8];
    uint64_t v27 = v3;
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_1834BF9F8(v19, v20);
    uint64_t result = sub_1834BFA48(v17, v18);
    a2[7] = v21;
    a2[8] = v27;
    a2[9] = v22;
    a2[10] = v23;
    a2[11] = v24;
    a2[12] = v25;
    a2[13] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.scheme.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = v1[13];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_1834BF9F8(v4, v5);
  return sub_1835C40D8;
}

void sub_1835C40D8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) == 0)
  {
    if (!v3
      || (v5 == 0x656D656863733ALL ? (BOOL v13 = v6 == 0xE700000000000000) : (BOOL v13 = 0), v13 || (sub_183D4592C() & 1) != 0))
    {
      uint64_t v14 = (uint64_t *)v2[7];
      sub_1834BFA48(v14[7], v14[8]);
      v14[7] = v4;
      v14[8] = v3;
      v14[9] = v5;
      v14[10] = v6;
      v14[11] = v8;
      v14[12] = v7;
      v14[13] = v9;
      goto LABEL_16;
    }
LABEL_20:
    __break(1u);
    return;
  }
  if (v3)
  {
    BOOL v10 = v5 == 0x656D656863733ALL && v6 == 0xE700000000000000;
    if (!v10 && (sub_183D4592C() & 1) == 0)
    {
      __break(1u);
      goto LABEL_20;
    }
  }
  uint64_t v11 = (void *)v2[7];
  uint64_t v12 = v11[8];
  uint64_t v15 = v11[7];
  sub_1834BF9F8(v4, v3);
  sub_1834BFA48(v15, v12);
  v11[7] = v4;
  v11[8] = v3;
  v11[9] = v5;
  v11[10] = v6;
  v11[11] = v8;
  v11[12] = v7;
  v11[13] = v9;
  sub_1834BFA48(*v2, v2[1]);
LABEL_16:

  free(v2);
}

uint64_t HTTPRequest.PseudoHeaderFields.authority.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[14];
  uint64_t v3 = v1[15];
  uint64_t v4 = v1[16];
  uint64_t v5 = v1[17];
  uint64_t v6 = v1[18];
  uint64_t v7 = v1[19];
  uint64_t v8 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_1834BF9F8(v2, v3);
}

uint64_t sub_1835C42B8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[14];
  uint64_t v2 = a1[15];
  uint64_t v4 = a1[16];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[18];
  uint64_t v7 = a1[19];
  uint64_t v8 = a1[20];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_1834BF9F8(v3, v2);
}

uint64_t sub_1835C42E0(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x69726F687475613ALL && v6 == 0xEA00000000007974) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_183D4592C();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if (result)
  {
LABEL_7:
    uint64_t v17 = a2[14];
    uint64_t v18 = a2[15];
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v27 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_1834BF9F8(v19, v20);
    uint64_t result = sub_1834BFA48(v17, v18);
    a2[14] = v21;
    a2[15] = v27;
    a2[16] = v22;
    a2[17] = v23;
    a2[18] = v24;
    a2[19] = v25;
    a2[20] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.authority.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[14];
  uint64_t v5 = v1[15];
  uint64_t v6 = v1[16];
  uint64_t v7 = v1[17];
  uint64_t v8 = v1[18];
  uint64_t v9 = v1[19];
  uint64_t v10 = v1[20];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_1834BF9F8(v4, v5);
  return sub_1835C44B4;
}

void sub_1835C44B4(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) == 0)
  {
    if (!v3
      || (v5 == 0x69726F687475613ALL ? (BOOL v13 = v6 == 0xEA00000000007974) : (BOOL v13 = 0), v13 || (sub_183D4592C() & 1) != 0))
    {
      uint64_t v14 = (uint64_t *)v2[7];
      sub_1834BFA48(v14[14], v14[15]);
      v14[14] = v4;
      v14[15] = v3;
      v14[16] = v5;
      v14[17] = v6;
      v14[18] = v8;
      v14[19] = v7;
      v14[20] = v9;
      goto LABEL_16;
    }
LABEL_20:
    __break(1u);
    return;
  }
  if (v3)
  {
    BOOL v10 = v5 == 0x69726F687475613ALL && v6 == 0xEA00000000007974;
    if (!v10 && (sub_183D4592C() & 1) == 0)
    {
      __break(1u);
      goto LABEL_20;
    }
  }
  uint64_t v11 = (void *)v2[7];
  uint64_t v12 = v11[15];
  uint64_t v15 = v11[14];
  sub_1834BF9F8(v4, v3);
  sub_1834BFA48(v15, v12);
  v11[14] = v4;
  v11[15] = v3;
  unsigned char v11[16] = v5;
  v11[17] = v6;
  v11[18] = v8;
  v11[19] = v7;
  v11[20] = v9;
  sub_1834BFA48(*v2, v2[1]);
LABEL_16:

  free(v2);
}

uint64_t HTTPRequest.PseudoHeaderFields.path.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[21];
  uint64_t v3 = v1[22];
  uint64_t v4 = v1[23];
  uint64_t v5 = v1[24];
  uint64_t v6 = v1[25];
  uint64_t v7 = v1[26];
  uint64_t v8 = v1[27];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_1834BF9F8(v2, v3);
}

uint64_t sub_1835C46A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[21];
  uint64_t v2 = a1[22];
  uint64_t v4 = a1[23];
  uint64_t v5 = a1[24];
  uint64_t v6 = a1[25];
  uint64_t v7 = a1[26];
  uint64_t v8 = a1[27];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_1834BF9F8(v3, v2);
}

uint64_t sub_1835C46CC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x687461703ALL && v6 == 0xE500000000000000) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_183D4592C();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if (result)
  {
LABEL_7:
    uint64_t v17 = a2[21];
    uint64_t v18 = a2[22];
    uint64_t v27 = v3;
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_1834BF9F8(v19, v20);
    uint64_t result = sub_1834BFA48(v17, v18);
    a2[21] = v21;
    a2[22] = v27;
    a2[23] = v22;
    a2[24] = v23;
    a2[25] = v24;
    a2[26] = v25;
    a2[27] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.path.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[21];
  uint64_t v5 = v1[22];
  uint64_t v6 = v1[23];
  uint64_t v7 = v1[24];
  uint64_t v8 = v1[25];
  uint64_t v9 = v1[26];
  uint64_t v10 = v1[27];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_1834BF9F8(v4, v5);
  return sub_1835C4894;
}

void sub_1835C4894(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) == 0)
  {
    if (!v3
      || (v5 == 0x687461703ALL ? (BOOL v13 = v6 == 0xE500000000000000) : (BOOL v13 = 0), v13 || (sub_183D4592C() & 1) != 0))
    {
      uint64_t v14 = (uint64_t *)v2[7];
      sub_1834BFA48(v14[21], v14[22]);
      v14[21] = v4;
      v14[22] = v3;
      v14[23] = v5;
      v14[24] = v6;
      v14[25] = v8;
      v14[26] = v7;
      v14[27] = v9;
      goto LABEL_16;
    }
LABEL_20:
    __break(1u);
    return;
  }
  if (v3)
  {
    BOOL v10 = v5 == 0x687461703ALL && v6 == 0xE500000000000000;
    if (!v10 && (sub_183D4592C() & 1) == 0)
    {
      __break(1u);
      goto LABEL_20;
    }
  }
  uint64_t v11 = (void *)v2[7];
  uint64_t v12 = v11[22];
  uint64_t v15 = v11[21];
  sub_1834BF9F8(v4, v3);
  sub_1834BFA48(v15, v12);
  v11[21] = v4;
  v11[22] = v3;
  v11[23] = v5;
  v11[24] = v6;
  v11[25] = v8;
  v11[26] = v7;
  v11[27] = v9;
  sub_1834BFA48(*v2, v2[1]);
LABEL_16:

  free(v2);
}

uint64_t HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[28];
  uint64_t v3 = v1[29];
  uint64_t v4 = v1[30];
  uint64_t v5 = v1[31];
  uint64_t v6 = v1[32];
  uint64_t v7 = v1[33];
  uint64_t v8 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_1834BF9F8(v2, v3);
}

uint64_t sub_1835C4A64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[28];
  uint64_t v2 = a1[29];
  uint64_t v4 = a1[30];
  uint64_t v5 = a1[31];
  uint64_t v6 = a1[32];
  uint64_t v7 = a1[33];
  uint64_t v8 = a1[34];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_1834BF9F8(v3, v2);
}

uint64_t sub_1835C4A8C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x6F636F746F72703ALL && v6 == 0xE90000000000006CLL) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_183D4592C();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if (result)
  {
LABEL_7:
    uint64_t v17 = a2[28];
    uint64_t v18 = a2[29];
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v27 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_1834BF9F8(v19, v20);
    uint64_t result = sub_1834BFA48(v17, v18);
    a2[28] = v21;
    a2[29] = v27;
    a2[30] = v22;
    a2[31] = v23;
    a2[32] = v24;
    a2[33] = v25;
    a2[34] = v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  uint64_t v6 = v1[30];
  uint64_t v7 = v1[31];
  uint64_t v8 = v1[32];
  uint64_t v9 = v1[33];
  uint64_t v10 = v1[34];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_1834BF9F8(v4, v5);
  return sub_1835C4C60;
}

void sub_1835C4C60(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) == 0)
  {
    if (!v3
      || (v5 == 0x6F636F746F72703ALL ? (BOOL v13 = v6 == 0xE90000000000006CLL) : (BOOL v13 = 0), v13 || (sub_183D4592C() & 1) != 0))
    {
      uint64_t v14 = (uint64_t *)v2[7];
      sub_1834BFA48(v14[28], v14[29]);
      v14[28] = v4;
      v14[29] = v3;
      v14[30] = v5;
      v14[31] = v6;
      v14[32] = v8;
      v14[33] = v7;
      v14[34] = v9;
      goto LABEL_16;
    }
LABEL_20:
    __break(1u);
    return;
  }
  if (v3)
  {
    BOOL v10 = v5 == 0x6F636F746F72703ALL && v6 == 0xE90000000000006CLL;
    if (!v10 && (sub_183D4592C() & 1) == 0)
    {
      __break(1u);
      goto LABEL_20;
    }
  }
  uint64_t v11 = (void *)v2[7];
  uint64_t v12 = v11[29];
  uint64_t v15 = v11[28];
  sub_1834BF9F8(v4, v3);
  sub_1834BFA48(v15, v12);
  v11[28] = v4;
  v11[29] = v3;
  v11[30] = v5;
  v11[31] = v6;
  v11[32] = v8;
  v11[33] = v7;
  v11[34] = v9;
  sub_1834BFA48(*v2, v2[1]);
LABEL_16:

  free(v2);
}

uint64_t HTTPRequest.PseudoHeaderFields.hash(into:)()
{
  uint64_t v1 = v0[8];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v8 = v0[21];
  uint64_t v11 = v0[22];
  uint64_t v12 = v0[29];
  uint64_t v9 = v0[28];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183D45B1C();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v1)
  {
    sub_183D45B1C();
    sub_1834BF9F8(v6, v1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_183D44C4C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183D45B1C();
    swift_bridgeObjectRetain();
    sub_183D44C4C();
    swift_bridgeObjectRelease();
    sub_1834BFA48(v6, v1);
    uint64_t v3 = v10;
    uint64_t v2 = v11;
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_183D45B1C();
    uint64_t v3 = v10;
    uint64_t v2 = v11;
    if (v10)
    {
LABEL_3:
      sub_183D45B1C();
      sub_1834BF9F8(v7, v3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183D45B1C();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      sub_1834BFA48(v7, v3);
      if (v2) {
        goto LABEL_4;
      }
LABEL_10:
      sub_183D45B1C();
      uint64_t v4 = v12;
      if (v12) {
        goto LABEL_5;
      }
      return sub_183D45B1C();
    }
  }
  sub_183D45B1C();
  if (!v2) {
    goto LABEL_10;
  }
LABEL_4:
  sub_183D45B1C();
  sub_1834BF9F8(v8, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183D45B1C();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  sub_1834BFA48(v8, v2);
  uint64_t v4 = v12;
  if (!v12) {
    return sub_183D45B1C();
  }
LABEL_5:
  sub_183D45B1C();
  sub_1834BF9F8(v9, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183D45B1C();
  swift_bridgeObjectRetain();
  sub_183D44C4C();
  swift_bridgeObjectRelease();

  return sub_1834BFA48(v9, v4);
}

uint64_t HTTPRequest.PseudoHeaderFields.hashValue.getter()
{
  return sub_183D45B4C();
}

uint64_t sub_1835C5338()
{
  return sub_183D45B4C();
}

uint64_t sub_1835C537C()
{
  return sub_183D45B4C();
}

void *HTTPRequest.pseudoHeaderFields.getter@<X0>(void *a1@<X8>)
{
  memcpy(v4, v1, 0x118uLL);
  memcpy(a1, v1, 0x118uLL);
  return sub_1835C7C20(v4);
}

void *HTTPRequest.pseudoHeaderFields.setter(const void *a1)
{
  memcpy(v4, v1, 0x118uLL);
  sub_1835C7D78(v4);
  return memcpy(v1, a1, 0x118uLL);
}

uint64_t (*HTTPRequest.pseudoHeaderFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPRequest.headerFields.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 280);
  return swift_retain();
}

uint64_t HTTPRequest.headerFields.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 280) = v2;
  return result;
}

uint64_t (*HTTPRequest.headerFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPRequest.hash(into:)()
{
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  swift_retain();
  sub_18351A6A8();

  return swift_release();
}

uint64_t HTTPRequest.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 280);
  sub_183D45AFC();
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183D45B1C();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return sub_183D45B4C();
}

uint64_t sub_1835C5664()
{
  uint64_t v1 = *(void *)(v0 + 280);
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183D45B1C();
      swift_bridgeObjectRetain();
      sub_183D44C4C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1835C5784()
{
  return sub_183D45B4C();
}

uint64_t HTTPRequest.debugDescription.getter()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  unint64_t v4 = v0[12];
  unint64_t v3 = v0[13];
  uint64_t v11 = v0[14];
  unint64_t v5 = v0[20];
  unint64_t v14 = v0[19];
  uint64_t v15 = v0[15];
  uint64_t v16 = v0[22];
  uint64_t v12 = v0[21];
  unint64_t v6 = v0[27];
  unint64_t v13 = v0[26];
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  sub_183D44C8C();
  if (v2)
  {
    if (sub_1834BF534(v4, v3))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1834BF9F8(v1, v2);
      sub_1835A378C(v4, v3);
      sub_1834BFA48(v1, v2);
    }
    uint64_t v8 = v15;
    uint64_t v7 = v16;
    unint64_t v9 = v14;
    swift_bridgeObjectRetain();
    sub_183D44C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v15;
    uint64_t v7 = v16;
    unint64_t v9 = v14;
  }
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (sub_1834BF534(v9, v5))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1834BF9F8(v11, v8);
      sub_1835A378C(v9, v5);
      uint64_t v7 = v16;
      sub_1834BFA48(v11, v8);
    }
  }
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (sub_1834BF534(v13, v6))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1834BF9F8(v12, v7);
      sub_1835A378C(v13, v6);
      sub_1834BFA48(v12, v7);
    }
  }
  sub_183D44C8C();
  swift_bridgeObjectRelease();
  return 40;
}

uint64_t HTTPRequest.PseudoHeaderFields.encode(to:)(void *a1)
{
  uint64_t v9 = v1[8];
  uint64_t v6 = v1[15];
  uint64_t v5 = v1[22];
  uint64_t v4 = v1[29];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183D45BDC();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_183521EA8();
  sub_183D458EC();
  if (!v2)
  {
    if (v9)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183D458EC();
    }
    if (v6)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183D458EC();
    }
    if (v5)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183D458EC();
    }
    if (v4)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_183D458EC();
    }
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v7);
}

uint64_t HTTPRequest.PseudoHeaderFields.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183D45B9C();
  if (v2) {
    goto LABEL_68;
  }
  __swift_project_boxed_opaque_existential_2(v63, v64);
  if (sub_183D458CC())
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v66 = 0;
    uint64_t v44 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
LABEL_4:
    sub_1834BFA48(v9, v8);
    sub_1834BFA48(v7, v6);
    sub_1834BFA48(v5, v44);
    sub_1834BFA48(v49, v50);
    sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
    sub_183D4554C();
    swift_allocError();
    sub_183D4551C();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
    goto LABEL_68;
  }
  uint64_t v21 = (uint64_t)v3;
  unint64_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v39 = 0;
  unsigned __int8 v40 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v43 = 0;
  unint64_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  unint64_t v10 = 0;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v44 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
LABEL_6:
  unint64_t v66 = v10;
  do
  {
    while (1)
    {
      while (1)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v63, v64);
        sub_183521EFC();
        sub_183D458BC();
        unint64_t v11 = v59;
        unint64_t v13 = v61;
        unint64_t v12 = v62;
        if (v58 != 0x646F6874656D3ALL || v59 != 0xE700000000000000) {
          break;
        }
        unint64_t v11 = 0xE700000000000000;
LABEL_28:
        sub_1834BFA48(v37, v43);
        if (v43)
        {
          sub_1834BFA48(v22, v23);
          sub_1834BFA48(v29, v30);
          sub_1834BFA48(v36, v44);
          sub_1834BFA48(v49, v50);
          sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
          sub_183D4554C();
          swift_allocError();
          goto LABEL_65;
        }
        __swift_project_boxed_opaque_existential_2(v63, v64);
        unint64_t v41 = v61;
        unint64_t v42 = v62;
        unint64_t v39 = v11;
        unsigned __int8 v40 = v60;
        uint64_t v37 = v56;
        uint64_t v38 = v58;
        uint64_t v43 = v57;
        if (sub_183D458CC())
        {
          uint64_t v37 = v56;
          uint64_t v38 = v58;
          unint64_t v42 = v62;
          uint64_t v43 = v57;
          unint64_t v39 = v11;
          unsigned __int8 v40 = v60;
          unint64_t v41 = v61;
          goto LABEL_53;
        }
      }
      if (sub_183D4592C()) {
        goto LABEL_28;
      }
      if (v58 == 0x656D656863733ALL && v59 == 0xE700000000000000) {
        break;
      }
      if (sub_183D4592C()) {
        goto LABEL_32;
      }
      if (v58 == 0x69726F687475613ALL && v59 == 0xEA00000000007974)
      {
        unint64_t v11 = 0xEA00000000007974;
LABEL_36:
        sub_1834BFA48(v36, v44);
        if (v44)
        {
          sub_1834BFA48(v22, v23);
          sub_1834BFA48(v29, v30);
          sub_1834BFA48(v49, v50);
          sub_1834BFA48(v37, v43);
          sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
          sub_183D4554C();
          swift_allocError();
          goto LABEL_65;
        }
        unint64_t v66 = v65;
        __swift_project_boxed_opaque_existential_2(v63, v64);
        uint64_t v47 = v60;
        unint64_t v48 = v62;
        unint64_t v10 = v61;
        uint64_t v45 = v58;
        unint64_t v46 = v11;
        uint64_t v44 = v57;
        uint64_t v36 = v56;
        if ((sub_183D458CC() & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v36 = v56;
        uint64_t v44 = v57;
        uint64_t v45 = v58;
        unint64_t v46 = v11;
        uint64_t v47 = v60;
        unint64_t v10 = v61;
        unint64_t v48 = v62;
        goto LABEL_54;
      }
      if (sub_183D4592C()) {
        goto LABEL_36;
      }
      if (v58 == 0x687461703ALL && v59 == 0xE500000000000000)
      {
        unint64_t v11 = 0xE500000000000000;
LABEL_40:
        sub_1834BFA48(v29, v30);
        if (v30)
        {
          sub_1834BFA48(v22, v23);
          sub_1834BFA48(v36, v44);
          sub_1834BFA48(v49, v50);
          sub_1834BFA48(v37, v43);
          sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
          sub_183D4554C();
          swift_allocError();
          goto LABEL_65;
        }
        __swift_project_boxed_opaque_existential_2(v63, v64);
        char v16 = sub_183D458CC();
        unint64_t v34 = v61;
        unint64_t v35 = v62;
        unint64_t v32 = v11;
        uint64_t v33 = v60;
        uint64_t v30 = v57;
        uint64_t v31 = v58;
        uint64_t v29 = v56;
        unint64_t v10 = v66;
        if ((v16 & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v29 = v56;
        uint64_t v30 = v57;
        uint64_t v31 = v58;
        unint64_t v32 = v11;
        uint64_t v33 = v60;
        unint64_t v34 = v61;
        unint64_t v35 = v62;
        goto LABEL_54;
      }
      if (sub_183D4592C()) {
        goto LABEL_40;
      }
      if (v58 == 0x6F636F746F72703ALL && v59 == 0xE90000000000006CLL)
      {
        unint64_t v11 = 0xE90000000000006CLL;
LABEL_44:
        sub_1834BFA48(v22, v23);
        if (!v23)
        {
          __swift_project_boxed_opaque_existential_2(v63, v64);
          char v17 = sub_183D458CC();
          unint64_t v27 = v61;
          unint64_t v28 = v62;
          unint64_t v25 = v11;
          uint64_t v26 = v60;
          uint64_t v23 = v57;
          uint64_t v24 = v58;
          uint64_t v22 = v56;
          unint64_t v10 = v66;
          if ((v17 & 1) == 0) {
            goto LABEL_6;
          }
          goto LABEL_54;
        }
        sub_1834BFA48(v29, v30);
        sub_1834BFA48(v36, v44);
        sub_1834BFA48(v49, v50);
        sub_1834BFA48(v37, v43);
        sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
        sub_183D4554C();
        swift_allocError();
LABEL_65:
        sub_183D4551C();
LABEL_66:
        __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
      if (sub_183D4592C()) {
        goto LABEL_44;
      }
      swift_bridgeObjectRetain();
      char v15 = sub_183D44D1C();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        sub_1834BFA48(v22, v23);
        sub_1834BFA48(v29, v30);
        sub_1834BFA48(v36, v44);
        sub_1834BFA48(v49, v50);
        sub_1834BFA48(v37, v43);
        sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
        sub_183D4547C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_183D44C8C();
        if (sub_1834BF534(v13, v12))
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1835A378C(v13, v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_183D44C8C();
        swift_bridgeObjectRelease();
        sub_183D44C8C();
        swift_bridgeObjectRelease();
        sub_183D44C8C();
        sub_183D4554C();
        swift_allocError();
        sub_183D4551C();
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_2(v63, v64);
      if (sub_183D458CC()) {
        goto LABEL_53;
      }
    }
    unint64_t v11 = 0xE700000000000000;
LABEL_32:
    sub_1834BFA48(v49, v50);
    if (v50)
    {
      sub_1834BFA48(v22, v23);
      sub_1834BFA48(v29, v30);
      sub_1834BFA48(v36, v44);
      sub_1834BFA48(v37, v43);
      sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
      sub_183D4554C();
      swift_allocError();
      goto LABEL_65;
    }
    __swift_project_boxed_opaque_existential_2(v63, v64);
    unint64_t v54 = v61;
    unint64_t v55 = v62;
    uint64_t v53 = v60;
    uint64_t v51 = v58;
    unint64_t v52 = v11;
    uint64_t v49 = v56;
    uint64_t v50 = v57;
  }
  while ((sub_183D458CC() & 1) == 0);
  uint64_t v49 = v56;
  uint64_t v50 = v57;
  uint64_t v51 = v58;
  unint64_t v52 = v11;
  uint64_t v53 = v60;
  unint64_t v54 = v61;
  unint64_t v55 = v62;
LABEL_53:
  unint64_t v10 = v66;
LABEL_54:
  if (!v43)
  {
    unint64_t v3 = (void *)v21;
    unint64_t v66 = v10;
    uint64_t v5 = v36;
    uint64_t v7 = v29;
    uint64_t v6 = v30;
    uint64_t v8 = v23;
    uint64_t v9 = v22;
    goto LABEL_4;
  }
  uint64_t v18 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) == 0) {
    uint64_t v18 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (v18 && (sub_183529FF8(v41, v42) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v43;
    *(void *)(a2 + 16) = v38;
    *(void *)(a2 + 24) = v39;
    *(unsigned char *)(a2 + 32) = v40;
    *(void *)(a2 + 40) = v41;
    *(void *)(a2 + 48) = v42;
    *(void *)(a2 + 56) = v49;
    *(void *)(a2 + 64) = v50;
    *(void *)(a2 + 72) = v51;
    *(void *)(a2 + 80) = v52;
    *(void *)(a2 + 88) = v53;
    *(void *)(a2 + 96) = v54;
    *(void *)(a2 + 104) = v55;
    *(void *)(a2 + 112) = v36;
    *(void *)(a2 + 120) = v44;
    *(void *)(a2 + 128) = v45;
    *(void *)(a2 + 136) = v46;
    *(void *)(a2 + 144) = v47;
    *(void *)(a2 + 152) = v10;
    *(void *)(a2 + 160) = v48;
    *(void *)(a2 + 168) = v29;
    *(void *)(a2 + 176) = v30;
    *(void *)(a2 + 184) = v31;
    *(void *)(a2 + 192) = v32;
    *(void *)(a2 + 200) = v33;
    *(void *)(a2 + 208) = v34;
    uint64_t v19 = v21;
    *(void *)(a2 + 216) = v35;
    *(void *)(a2 + 224) = v22;
    *(void *)(a2 + 232) = v23;
    *(void *)(a2 + 240) = v24;
    *(void *)(a2 + 248) = v25;
    *(void *)(a2 + 256) = v26;
    *(void *)(a2 + 264) = v27;
    *(void *)(a2 + 272) = v28;
    return __swift_destroy_boxed_opaque_existential_2(v19);
  }
  sub_1834BFA48(v22, v23);
  sub_1834BFA48(v29, v30);
  sub_1834BFA48(v36, v44);
  sub_1834BFA48(v49, v50);
  sub_1834BDE24((uint64_t)v63, (uint64_t)&v56);
  sub_183D4547C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_183D44C8C();
  sub_1834BFA48(v37, v43);
  swift_bridgeObjectRelease();
  sub_183D44C8C();
  sub_183D4554C();
  swift_allocError();
  sub_183D4551C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
  swift_willThrow();
LABEL_67:
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
  unint64_t v3 = (void *)v21;
LABEL_68:
  uint64_t v19 = (uint64_t)v3;
  return __swift_destroy_boxed_opaque_existential_2(v19);
}

uint64_t sub_1835C6CB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPRequest.PseudoHeaderFields.init(from:)(a1, a2);
}

uint64_t sub_1835C6CC8(void *a1)
{
  return HTTPRequest.PseudoHeaderFields.encode(to:)(a1);
}

uint64_t sub_1835C6CE0(char *a1, char *a2)
{
  return sub_1835C1084(*a1, *a2);
}

uint64_t sub_1835C6CEC()
{
  return sub_183D45B4C();
}

uint64_t sub_1835C6D7C()
{
  sub_183D44C4C();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1835C6DF8()
{
  return sub_183D45B4C();
}

uint64_t sub_1835C6E84@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_183D4575C();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1835C6EE4(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000012;
  if (*v1) {
    unint64_t v2 = 0x6946726564616568;
  }
  unint64_t v3 = 0x8000000183E23840;
  if (*v1) {
    unint64_t v3 = 0xEC00000073646C65;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1835C6F30()
{
  if (*v0) {
    return 0x6946726564616568;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t sub_1835C6F78@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_183D4575C();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1835C6FDC(uint64_t a1)
{
  unint64_t v2 = sub_1835C7ED0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1835C7018(uint64_t a1)
{
  unint64_t v2 = sub_1835C7ED0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t HTTPRequest.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64F40);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v3[35];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835C7ED0();
  sub_183D45C0C();
  memcpy(v12, v3, sizeof(v12));
  char v13 = 0;
  sub_1835C7F24();
  sub_183D4586C();
  if (!v2)
  {
    v12[0] = v11;
    char v13 = 1;
    sub_18357E298();
    sub_183D4586C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *HTTPRequest.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F64F58);
  uint64_t v5 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1835C7ED0();
  sub_183D45BCC();
  if (v2) {
    return (void *)__swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v8 = a2;
  v18[303] = 0;
  sub_1835C7F78();
  uint64_t v9 = v12;
  sub_183D457DC();
  memcpy(v16, v17, sizeof(v16));
  memcpy(v18, v17, 0x118uLL);
  v18[302] = 1;
  sub_1835C7C20(v16);
  sub_18357E394();
  sub_183D457DC();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v9);
  uint64_t v10 = v15;
  memcpy(v13, v16, 0x118uLL);
  v13[35] = v15;
  sub_18350BA8C(v13);
  sub_1835C7D78(v16);
  memcpy(v8, v13, 0x120uLL);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  memcpy(v14, v18, 0x118uLL);
  v14[35] = v10;
  return sub_18356D810(v14);
}

void *sub_1835C7498@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return HTTPRequest.init(from:)(a1, a2);
}

uint64_t sub_1835C74B0(void *a1)
{
  return HTTPRequest.encode(to:)(a1);
}

BOOL _s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v70 = *(void *)(a1 + 56);
  uint64_t v76 = *(void *)(a1 + 72);
  uint64_t v78 = *(void *)(a1 + 80);
  uint64_t v79 = *(void *)(a1 + 64);
  uint64_t v74 = *(void *)(a1 + 96);
  uint64_t v75 = *(void *)(a1 + 88);
  uint64_t v77 = *(void *)(a1 + 104);
  uint64_t v56 = *(void *)(a1 + 112);
  uint64_t v71 = *(void *)(a1 + 120);
  uint64_t v67 = *(void *)(a1 + 136);
  uint64_t v64 = *(void *)(a1 + 144);
  uint64_t v65 = *(void *)(a1 + 128);
  uint64_t v60 = *(void *)(a1 + 152);
  uint64_t v66 = *(void *)(a1 + 160);
  uint64_t v43 = *(void *)(a1 + 168);
  uint64_t v57 = *(void *)(a1 + 176);
  uint64_t v53 = *(void *)(a1 + 192);
  uint64_t v50 = *(void *)(a1 + 200);
  uint64_t v51 = *(void *)(a1 + 184);
  uint64_t v46 = *(void *)(a1 + 208);
  uint64_t v52 = *(void *)(a1 + 216);
  uint64_t v29 = *(void *)(a1 + 224);
  uint64_t v38 = *(void *)(a1 + 240);
  uint64_t v40 = *(void *)(a1 + 232);
  uint64_t v41 = *(void *)(a1 + 248);
  uint64_t v37 = *(void *)(a1 + 256);
  uint64_t v32 = *(void *)(a1 + 264);
  uint64_t v33 = *(void *)(a1 + 272);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v69 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v72 = *(void *)(a2 + 104);
  uint64_t v73 = *(void *)(a2 + 96);
  uint64_t v55 = *(void *)(a2 + 112);
  uint64_t v68 = *(void *)(a2 + 120);
  uint64_t v62 = *(void *)(a2 + 128);
  uint64_t v63 = *(void *)(a2 + 136);
  uint64_t v61 = *(void *)(a2 + 144);
  uint64_t v58 = *(void *)(a2 + 160);
  uint64_t v59 = *(void *)(a2 + 152);
  uint64_t v42 = *(void *)(a2 + 168);
  uint64_t v54 = *(void *)(a2 + 176);
  uint64_t v48 = *(void *)(a2 + 184);
  uint64_t v49 = *(void *)(a2 + 192);
  uint64_t v47 = *(void *)(a2 + 200);
  uint64_t v44 = *(void *)(a2 + 216);
  uint64_t v45 = *(void *)(a2 + 208);
  uint64_t v28 = *(void *)(a2 + 224);
  uint64_t v39 = *(void *)(a2 + 232);
  uint64_t v35 = *(void *)(a2 + 240);
  uint64_t v36 = *(void *)(a2 + 248);
  uint64_t v34 = *(void *)(a2 + 256);
  uint64_t v30 = *(void *)(a2 + 264);
  uint64_t v31 = *(void *)(a2 + 272);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    if (v2 != v5) {
      return 0;
    }
  }
  else
  {
    char v12 = sub_183D4592C();
    BOOL result = 0;
    if ((v12 & 1) == 0 || v2 != v5) {
      return result;
    }
  }
  if (v3 != v6 || v4 != v7)
  {
    char v14 = sub_183D4592C();
    BOOL result = 0;
    if ((v14 & 1) == 0) {
      return result;
    }
  }
  if (!v79)
  {
    if (!v8) {
      goto LABEL_25;
    }
LABEL_19:
    sub_1834BF9F8(v69, v8);
    sub_1834BFA48(v70, v79);
    uint64_t v15 = v69;
    uint64_t v16 = v8;
LABEL_51:
    sub_1834BFA48(v15, v16);
    return 0;
  }
  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  if (v76 == v10 && v78 == v9)
  {
    if (v75 != v11) {
      return 0;
    }
  }
  else
  {
    char v17 = sub_183D4592C();
    BOOL result = 0;
    if ((v17 & 1) == 0 || v75 != v11) {
      return result;
    }
  }
  if (v74 != v73 || v77 != v72)
  {
    char v18 = sub_183D4592C();
    BOOL result = 0;
    if ((v18 & 1) == 0) {
      return result;
    }
  }
LABEL_25:
  if (!v71)
  {
    if (!v68)
    {
LABEL_40:
      if (v57)
      {
        if (v54)
        {
          if (v51 == v48 && v53 == v49)
          {
            if (v50 != v47) {
              return 0;
            }
          }
          else
          {
            char v25 = sub_183D4592C();
            BOOL result = 0;
            if ((v25 & 1) == 0 || v50 != v47) {
              return result;
            }
          }
          if (v46 == v45 && v52 == v44) {
            goto LABEL_59;
          }
          char v26 = sub_183D4592C();
          BOOL result = 0;
          if (v26) {
            goto LABEL_59;
          }
          return result;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else if (!v54)
      {
LABEL_59:
        if (v40)
        {
          uint64_t v27 = v39;
          if (v39) {
            return (v38 == v35 && v41 == v36 || (sub_183D4592C() & 1) != 0)
          }
                && v37 == v34
                && (v32 == v30 && v33 == v31 || (sub_183D4592C() & 1) != 0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v27 = v39;
          if (!v39) {
            return 1;
          }
        }
        sub_1834BF9F8(v28, v27);
        sub_1834BFA48(v29, v40);
        uint64_t v15 = v28;
        uint64_t v16 = v27;
        goto LABEL_51;
      }
      uint64_t v19 = v42;
      uint64_t v20 = v54;
      sub_1834BF9F8(v42, v54);
      uint64_t v21 = v43;
      uint64_t v22 = v57;
      goto LABEL_50;
    }
LABEL_34:
    uint64_t v19 = v55;
    uint64_t v20 = v68;
    sub_1834BF9F8(v55, v68);
    uint64_t v21 = v56;
    uint64_t v22 = v71;
LABEL_50:
    sub_1834BFA48(v21, v22);
    uint64_t v15 = v19;
    uint64_t v16 = v20;
    goto LABEL_51;
  }
  if (!v68)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  if (v65 == v62 && v67 == v63)
  {
    if (v64 != v61) {
      return 0;
    }
  }
  else
  {
    char v23 = sub_183D4592C();
    BOOL result = 0;
    if ((v23 & 1) == 0 || v64 != v61) {
      return result;
    }
  }
  if (v60 == v59 && v66 == v58) {
    goto LABEL_40;
  }
  char v24 = sub_183D4592C();
  BOOL result = 0;
  if (v24) {
    goto LABEL_40;
  }
  return result;
}

uint64_t _s7Network11HTTPRequestV2eeoiySbAC_ACtFZ_0(uint64_t *__src, void *a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v4 = __src[35];
  memcpy(v8, a2, sizeof(v8));
  uint64_t v5 = a2[35];
  if (!_s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0((uint64_t)__dst, (uint64_t)v8)) {
    return 0;
  }
  swift_retain();
  swift_retain();
  char v6 = sub_183521734(v4, v5);
  swift_release();
  swift_release();
  return v6 & 1;
}

void *sub_1835C7C20(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[21];
  uint64_t v9 = a1[29];
  uint64_t v10 = a1[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1834BF9F8(v2, v3);
  sub_1834BF9F8(v6, v5);
  sub_1834BF9F8(v8, v7);
  sub_1834BF9F8(v10, v9);
  return a1;
}

void *sub_1835C7D78(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[21];
  uint64_t v9 = a1[29];
  uint64_t v10 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1834BFA48(v2, v3);
  sub_1834BFA48(v6, v5);
  sub_1834BFA48(v8, v7);
  sub_1834BFA48(v10, v9);
  return a1;
}

unint64_t sub_1835C7ED0()
{
  unint64_t result = qword_1E8F64F48;
  if (!qword_1E8F64F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F48);
  }
  return result;
}

unint64_t sub_1835C7F24()
{
  unint64_t result = qword_1E8F64F50;
  if (!qword_1E8F64F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F50);
  }
  return result;
}

unint64_t sub_1835C7F78()
{
  unint64_t result = qword_1E8F64F60;
  if (!qword_1E8F64F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F60);
  }
  return result;
}

unint64_t sub_1835C7FD0()
{
  unint64_t result = qword_1E8F64F68;
  if (!qword_1E8F64F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F68);
  }
  return result;
}

unint64_t sub_1835C8028()
{
  unint64_t result = qword_1E8F64F70;
  if (!qword_1E8F64F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F70);
  }
  return result;
}

unint64_t sub_1835C8080()
{
  unint64_t result = qword_1E8F64F78;
  if (!qword_1E8F64F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F78);
  }
  return result;
}

unint64_t sub_1835C80D8()
{
  unint64_t result = qword_1E8F64F80;
  if (!qword_1E8F64F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F80);
  }
  return result;
}

uint64_t sub_1835C812C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1835C8140(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.scheme.setter);
}

uint64_t sub_1835C815C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.authority.setter);
}

uint64_t sub_1835C8178(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.path.setter);
}

uint64_t sub_1835C8194(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.extendedConnectProtocol.setter);
}

uint64_t keypath_set_8Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t destroy for HTTPRequest(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[15])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[29])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for HTTPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v7;
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v8;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10)
    {
LABEL_3:
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v10;
      uint64_t v11 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v11;
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      uint64_t v12 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = *(void *)(a2 + 176);
      if (v13) {
        goto LABEL_4;
      }
LABEL_8:
      long long v21 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v21;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      uint64_t v16 = *(void *)(a2 + 232);
      if (v16) {
        goto LABEL_5;
      }
LABEL_9:
      long long v22 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v22;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      goto LABEL_10;
    }
  }
  long long v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v13 = *(void *)(a2 + 176);
  if (!v13) {
    goto LABEL_8;
  }
LABEL_4:
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v13;
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = *(void *)(a2 + 232);
  if (!v16) {
    goto LABEL_9;
  }
LABEL_5:
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v17;
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  uint64_t v18 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HTTPRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 56);
  uint64_t v5 = (long long *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 56);
      long long v8 = *(_OWORD *)(a2 + 72);
      long long v7 = *(_OWORD *)(a2 + 88);
      long long v9 = *v5;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v8;
      *(_OWORD *)(a1 + 88) = v7;
      *uint64_t v4 = v9;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 72);
    long long v12 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = v12;
    *uint64_t v4 = v10;
  }
  uint64_t v13 = (_OWORD *)(a1 + 112);
  uint64_t v14 = (long long *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v15)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 112);
      long long v17 = *(_OWORD *)(a2 + 128);
      long long v16 = *(_OWORD *)(a2 + 144);
      long long v18 = *v14;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v16;
      *uint64_t v13 = v18;
    }
  }
  else if (v15)
  {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *v14;
    long long v20 = *(_OWORD *)(a2 + 128);
    long long v21 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = v21;
    *uint64_t v13 = v19;
  }
  long long v22 = (_OWORD *)(a1 + 168);
  char v23 = (long long *)(a2 + 168);
  uint64_t v24 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v24)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 168);
      long long v26 = *(_OWORD *)(a2 + 184);
      long long v25 = *(_OWORD *)(a2 + 200);
      long long v27 = *v23;
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v26;
      *(_OWORD *)(a1 + 200) = v25;
      *long long v22 = v27;
    }
  }
  else if (v24)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v28 = *v23;
    long long v29 = *(_OWORD *)(a2 + 184);
    long long v30 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 200) = v30;
    *long long v22 = v28;
  }
  uint64_t v31 = (_OWORD *)(a1 + 224);
  uint64_t v32 = (long long *)(a2 + 224);
  uint64_t v33 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v33)
    {
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 224);
      long long v35 = *(_OWORD *)(a2 + 240);
      long long v34 = *(_OWORD *)(a2 + 256);
      long long v36 = *v32;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v34;
      *uint64_t v31 = v36;
    }
  }
  else if (v33)
  {
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v37 = *v32;
    long long v38 = *(_OWORD *)(a2 + 240);
    long long v39 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 256) = v39;
    *uint64_t v31 = v37;
  }
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1835C89D8(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for HTTPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a2 + 64);
    if (v7)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v8;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      uint64_t v9 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1835C89D8(a1 + 56);
  }
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
LABEL_6:
  if (*(void *)(a1 + 120))
  {
    uint64_t v11 = *(void *)(a2 + 120);
    if (v11)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v12;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      uint64_t v13 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1835C89D8(a1 + 112);
  }
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
LABEL_11:
  if (*(void *)(a1 + 176))
  {
    uint64_t v15 = *(void *)(a2 + 176);
    if (v15)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v16;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      uint64_t v17 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1835C89D8(a1 + 168);
  }
  long long v18 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
LABEL_16:
  if (!*(void *)(a1 + 232))
  {
LABEL_20:
    long long v22 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v22;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(a2 + 232);
  if (!v19)
  {
    sub_1835C89D8(a1 + 224);
    goto LABEL_20;
  }
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v20;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  uint64_t v21 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v21;
  swift_bridgeObjectRelease();
LABEL_21:
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 288)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 288) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest()
{
  return &type metadata for HTTPRequest;
}

ValueMetadata *type metadata accessor for HTTPRequest.Method()
{
  return &type metadata for HTTPRequest.Method;
}

uint64_t destroy for HTTPRequest.PseudoHeaderFields(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[15])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = a1[29];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v7;
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v8;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v20;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10)
    {
LABEL_3:
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v10;
      uint64_t v11 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v11;
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      uint64_t v12 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = *(void *)(a2 + 176);
      if (v13) {
        goto LABEL_4;
      }
LABEL_8:
      long long v22 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v22;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      uint64_t v16 = *(void *)(a2 + 232);
      if (v16) {
        goto LABEL_5;
      }
LABEL_9:
      long long v23 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v23;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      return a1;
    }
  }
  long long v21 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v21;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v13 = *(void *)(a2 + 176);
  if (!v13) {
    goto LABEL_8;
  }
LABEL_4:
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v13;
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = *(void *)(a2 + 232);
  if (!v16) {
    goto LABEL_9;
  }
LABEL_5:
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v17;
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  uint64_t v18 = *(void *)(a2 + 264);
  uint64_t v19 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v18;
  *(void *)(a1 + 272) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 56);
  uint64_t v5 = (long long *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 56);
      long long v8 = *(_OWORD *)(a2 + 72);
      long long v7 = *(_OWORD *)(a2 + 88);
      long long v9 = *v5;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v8;
      *(_OWORD *)(a1 + 88) = v7;
      *uint64_t v4 = v9;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 72);
    long long v12 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = v12;
    *uint64_t v4 = v10;
  }
  uint64_t v13 = (_OWORD *)(a1 + 112);
  uint64_t v14 = (long long *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v15)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 112);
      long long v17 = *(_OWORD *)(a2 + 128);
      long long v16 = *(_OWORD *)(a2 + 144);
      long long v18 = *v14;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v16;
      *uint64_t v13 = v18;
    }
  }
  else if (v15)
  {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *v14;
    long long v20 = *(_OWORD *)(a2 + 128);
    long long v21 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = v21;
    *uint64_t v13 = v19;
  }
  long long v22 = (_OWORD *)(a1 + 168);
  long long v23 = (long long *)(a2 + 168);
  uint64_t v24 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v24)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 168);
      long long v26 = *(_OWORD *)(a2 + 184);
      long long v25 = *(_OWORD *)(a2 + 200);
      long long v27 = *v23;
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v26;
      *(_OWORD *)(a1 + 200) = v25;
      *long long v22 = v27;
    }
  }
  else if (v24)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v28 = *v23;
    long long v29 = *(_OWORD *)(a2 + 184);
    long long v30 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 200) = v30;
    *long long v22 = v28;
  }
  uint64_t v31 = (_OWORD *)(a1 + 224);
  uint64_t v32 = (long long *)(a2 + 224);
  uint64_t v33 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v33)
    {
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1835C89D8(a1 + 224);
      long long v35 = *(_OWORD *)(a2 + 240);
      long long v34 = *(_OWORD *)(a2 + 256);
      long long v36 = *v32;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v34;
      *uint64_t v31 = v36;
    }
  }
  else if (v33)
  {
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v37 = *v32;
    long long v38 = *(_OWORD *)(a2 + 240);
    long long v39 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 256) = v39;
    *uint64_t v31 = v37;
  }
  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a2 + 64);
    if (v7)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v8;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      uint64_t v9 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1835C89D8(a1 + 56);
  }
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
LABEL_6:
  if (*(void *)(a1 + 120))
  {
    uint64_t v11 = *(void *)(a2 + 120);
    if (v11)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v12;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      uint64_t v13 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1835C89D8(a1 + 112);
  }
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
LABEL_11:
  if (*(void *)(a1 + 176))
  {
    uint64_t v15 = *(void *)(a2 + 176);
    if (v15)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v16;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      uint64_t v17 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1835C89D8(a1 + 168);
  }
  long long v18 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
LABEL_16:
  if (!*(void *)(a1 + 232))
  {
LABEL_20:
    long long v22 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v22;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    return a1;
  }
  uint64_t v19 = *(void *)(a2 + 232);
  if (!v19)
  {
    sub_1835C89D8(a1 + 224);
    goto LABEL_20;
  }
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v20;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  uint64_t v21 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPRequest.PseudoHeaderFields(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 280)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPRequest.PseudoHeaderFields(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 280) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest.PseudoHeaderFields()
{
  return &type metadata for HTTPRequest.PseudoHeaderFields;
}

unsigned char *storeEnumTagSinglePayload for HTTPRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1835C98D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest.CodingKeys()
{
  return &type metadata for HTTPRequest.CodingKeys;
}

unint64_t sub_1835C990C()
{
  unint64_t result = qword_1E8F64F88;
  if (!qword_1E8F64F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F88);
  }
  return result;
}

unint64_t sub_1835C9964()
{
  unint64_t result = qword_1E8F64F90;
  if (!qword_1E8F64F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F90);
  }
  return result;
}

unint64_t sub_1835C99BC()
{
  unint64_t result = qword_1E8F64F98;
  if (!qword_1E8F64F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F64F98);
  }
  return result;
}

uint64_t NWActorDiscoveryMechanism.init(browseDescriptor:browseParameters:connectionParameters:target:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v14 = *a1;
  uint64_t v8 = *((void *)a1 + 2);
  uint64_t v9 = *((void *)a1 + 3);
  char v10 = *((unsigned char *)a1 + 32);
  sub_1835C9AC0(a4, a5);
  uint64_t result = type metadata accessor for NWActorDiscoveryMechanism(0);
  uint64_t v12 = result;
  uint64_t v13 = a5 + *(int *)(result + 20);
  *(_OWORD *)uint64_t v13 = v14;
  *(void *)(v13 + 16) = v8;
  *(void *)(v13 + 24) = v9;
  *(unsigned char *)(v13 + 32) = v10;
  *(void *)(a5 + *(int *)(result + 24)) = a2;
  if (a3) {
    a2 = a3;
  }
  else {
    uint64_t result = swift_retain();
  }
  *(void *)(a5 + *(int *)(v12 + 28)) = a2;
  return result;
}

uint64_t sub_1835C9AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NWActorDiscoveryMechanism.Target(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F64FB0);
}

uint64_t type metadata accessor for NWActorDiscoveryMechanism(uint64_t a1)
{
  return sub_18315A7F8(a1, (uint64_t *)&unk_1E8F64FA0);
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorDiscoveryMechanism(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for NWActorDiscoveryMechanism.Target(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v15 = *(void *)(a2 + 8);
          *uint64_t v4 = *(void *)a2;
          v4[1] = v15;
          uint64_t v16 = *(void *)(a2 + 24);
          void v4[2] = *(void *)(a2 + 16);
          v4[3] = v16;
          uint64_t v17 = *(void *)(a2 + 40);
          void v4[4] = *(void *)(a2 + 32);
          v4[5] = v17;
          uint64_t v18 = *(void *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v18 != 1) {
            swift_unknownObjectRetain();
          }
          v4[6] = v18;
          break;
        case 2u:
          uint64_t v13 = *(void *)(a2 + 8);
          *uint64_t v4 = *(void *)a2;
          v4[1] = v13;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v14 = sub_183D4447C();
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v4, a2, v14);
          break;
        case 4u:
          *uint64_t v4 = *(void *)a2;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v7 = *(void *)a2;
          uint64_t v8 = *(void *)(a2 + 8);
          uint64_t v9 = *(void *)(a2 + 16);
          char v10 = *(unsigned char *)(a2 + 24);
          sub_18315E9E4(*(void *)a2, v8, v9, v10);
          *uint64_t v4 = v7;
          v4[1] = v8;
          void v4[2] = v9;
          *((unsigned char *)v4 + 24) = v10;
          *((_WORD *)v4 + 13) = *(_WORD *)(a2 + 26);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      *uint64_t v4 = *(void *)a2;
      v4[1] = v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[5];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = a2 + v19;
    unsigned int v22 = *(unsigned __int8 *)(v21 + 32);
    if (v22 <= 0xFD)
    {
      uint64_t v24 = *(void *)v21;
      uint64_t v25 = *(void *)(v21 + 8);
      uint64_t v26 = *(void *)(v21 + 16);
      uint64_t v27 = *(void *)(v21 + 24);
      sub_1834C8208(*(void *)v21, v25, v26, v27, *(unsigned char *)(v21 + 32));
      *(void *)uint64_t v20 = v24;
      *((void *)v20 + 1) = v25;
      *((void *)v20 + 2) = v26;
      *((void *)v20 + 3) = v27;
      v20[32] = v22;
    }
    else
    {
      long long v23 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v23;
      v20[32] = *(unsigned char *)(v21 + 32);
    }
    uint64_t v28 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(void *)(a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v28) = *(void *)(a2 + v28);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for NWActorDiscoveryMechanism(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_18315E658(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 48) != 1) {
          goto LABEL_9;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v4 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        break;
      case 4u:
LABEL_9:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  unsigned int v6 = *(unsigned __int8 *)(v5 + 32);
  if (v6 <= 0xFD) {
    sub_1834C829C(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), v6);
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for NWActorDiscoveryMechanism(uint64_t a1, uint64_t *a2, int *a3)
{
  type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v13 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v13;
        uint64_t v14 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v14;
        uint64_t v15 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v15;
        uint64_t v16 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v16 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(a1 + 48) = v16;
        break;
      case 2u:
        uint64_t v11 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v11;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v12 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        break;
      case 4u:
        *(void *)a1 = *a2;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v8 = a2[2];
        char v9 = *((unsigned char *)a2 + 24);
        sub_18315E9E4(*a2, v7, v8, v9);
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = v8;
        *(unsigned char *)(a1 + 24) = v9;
        *(_WORD *)(a1 + 26) = *((_WORD *)a2 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v10 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[5];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t)a2 + v17;
  unsigned int v20 = *(unsigned __int8 *)(v19 + 32);
  if (v20 <= 0xFD)
  {
    uint64_t v22 = *(void *)v19;
    uint64_t v23 = *(void *)(v19 + 8);
    uint64_t v24 = *(void *)(v19 + 16);
    uint64_t v25 = *(void *)(v19 + 24);
    sub_1834C8208(*(void *)v19, v23, v24, v25, *(unsigned char *)(v19 + 32));
    *(void *)uint64_t v18 = v22;
    *(void *)(v18 + 8) = v23;
    *(void *)(v18 + 16) = v24;
    *(void *)(v18 + 24) = v25;
    *(unsigned char *)(v18 + 32) = v20;
  }
  else
  {
    long long v21 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v21;
    *(unsigned char *)(v18 + 32) = *(unsigned char *)(v19 + 32);
  }
  uint64_t v26 = a3[7];
  *(void *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(void *)(a1 + v26) = *(uint64_t *)((char *)a2 + v26);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NWActorDiscoveryMechanism(uint64_t a1, uint64_t *a2, int *a3)
{
  if ((uint64_t *)a1 != a2)
  {
    sub_1835CA54C(a1);
    type metadata accessor for NWActorDiscoveryMechanism.Target(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = a2[3];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = a2[5];
          uint64_t v12 = a2[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v12 != 1) {
            swift_unknownObjectRetain();
          }
          *(void *)(a1 + 48) = v12;
          break;
        case 2u:
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v11 = sub_183D4447C();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
          break;
        case 4u:
          *(void *)a1 = *a2;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v6 = *a2;
          uint64_t v7 = a2[1];
          uint64_t v8 = a2[2];
          char v9 = *((unsigned char *)a2 + 24);
          sub_18315E9E4(*a2, v7, v8, v9);
          *(void *)a1 = v6;
          *(void *)(a1 + 8) = v7;
          *(void *)(a1 + 16) = v8;
          *(unsigned char *)(a1 + 24) = v9;
          *(_WORD *)(a1 + 26) = *((_WORD *)a2 + 13);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v10 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = a3[5];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (long long *)((char *)a2 + v13);
  unsigned int v16 = *((unsigned __int8 *)a2 + v13 + 32);
  if (*(unsigned __int8 *)(a1 + v13 + 32) <= 0xFDu)
  {
    if (v16 <= 0xFD)
    {
      uint64_t v25 = *(void *)v15;
      uint64_t v26 = *((void *)v15 + 1);
      uint64_t v27 = *((void *)v15 + 2);
      uint64_t v28 = *((void *)v15 + 3);
      sub_1834C8208(v25, v26, v27, v28, v16);
      uint64_t v29 = *(void *)v14;
      uint64_t v30 = *(void *)(v14 + 8);
      uint64_t v31 = *(void *)(v14 + 16);
      uint64_t v32 = *(void *)(v14 + 24);
      *(void *)uint64_t v14 = v25;
      *(void *)(v14 + 8) = v26;
      *(void *)(v14 + 16) = v27;
      *(void *)(v14 + 24) = v28;
      unsigned __int8 v33 = *(unsigned char *)(v14 + 32);
      *(unsigned char *)(v14 + 32) = v16;
      sub_1834C829C(v29, v30, v31, v32, v33);
    }
    else
    {
      sub_1835CA5A8(v14);
      char v19 = *((unsigned char *)v15 + 32);
      long long v20 = v15[1];
      *(_OWORD *)uint64_t v14 = *v15;
      *(_OWORD *)(v14 + 16) = v20;
      *(unsigned char *)(v14 + 32) = v19;
    }
  }
  else if (v16 <= 0xFD)
  {
    uint64_t v21 = *(void *)v15;
    uint64_t v22 = *((void *)v15 + 1);
    uint64_t v23 = *((void *)v15 + 2);
    uint64_t v24 = *((void *)v15 + 3);
    sub_1834C8208(v21, v22, v23, v24, v16);
    *(void *)uint64_t v14 = v21;
    *(void *)(v14 + 8) = v22;
    *(void *)(v14 + 16) = v23;
    *(void *)(v14 + 24) = v24;
    *(unsigned char *)(v14 + 32) = v16;
  }
  else
  {
    long long v17 = *v15;
    long long v18 = v15[1];
    *(unsigned char *)(v14 + 32) = *((unsigned char *)v15 + 32);
    *(_OWORD *)uint64_t v14 = v17;
    *(_OWORD *)(v14 + 16) = v18;
  }
  *(void *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1835CA54C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1835CA5A8(uint64_t a1)
{
  return a1;
}

char *initializeWithTake for NWActorDiscoveryMechanism(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v8 = sub_183D4447C();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  long long v13 = *(_OWORD *)v12;
  long long v14 = *((_OWORD *)v12 + 1);
  v11[32] = v12[32];
  *(_OWORD *)uint64_t v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *(void *)&a1[v10] = *(void *)&a2[v10];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

unsigned __int8 *assignWithTake for NWActorDiscoveryMechanism(unsigned __int8 *a1, char *a2, int *a3)
{
  if (a1 != (unsigned __int8 *)a2)
  {
    sub_1835CA54C((uint64_t)a1);
    uint64_t v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v8 = sub_183D4447C();
        (*(void (**)(unsigned __int8 *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = (uint64_t)&a1[v9];
  uint64_t v11 = &a2[v9];
  unsigned int v12 = a1[v9 + 32];
  if (v12 <= 0xFD)
  {
    unsigned int v13 = v11[32];
    if (v13 <= 0xFD)
    {
      uint64_t v15 = *(void *)v10;
      uint64_t v16 = *(void *)(v10 + 8);
      uint64_t v17 = *(void *)(v10 + 16);
      uint64_t v18 = *(void *)(v10 + 24);
      long long v19 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v19;
      *(unsigned char *)(v10 + 32) = v13;
      sub_1834C829C(v15, v16, v17, v18, v12);
      goto LABEL_13;
    }
    sub_1835CA5A8(v10);
  }
  long long v14 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v14;
  *(unsigned char *)(v10 + 32) = v11[32];
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorDiscoveryMechanism(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1835CA910);
}

uint64_t sub_1835CA910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NWActorDiscoveryMechanism(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1835CA9E4);
}

uint64_t sub_1835CA9E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1835CAAA0()
{
  uint64_t result = type metadata accessor for NWActorDiscoveryMechanism.Target(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for NWActorDiscoveryMechanism.Target(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v14 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v14;
          uint64_t v15 = *(void *)(a2 + 24);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = v15;
          uint64_t v16 = *(void *)(a2 + 40);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = v16;
          uint64_t v17 = *(void *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v17 != 1) {
            swift_unknownObjectRetain();
          }
          *(void *)(a1 + 48) = v17;
          break;
        case 2u:
          uint64_t v12 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v12;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v13 = sub_183D4447C();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
          break;
        case 4u:
          *(void *)a1 = *(void *)a2;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v6 = *(void *)a2;
          uint64_t v7 = *(void *)(a2 + 8);
          uint64_t v8 = *(void *)(a2 + 16);
          char v9 = *(unsigned char *)(a2 + 24);
          sub_18315E9E4(*(void *)a2, v7, v8, v9);
          *(void *)a1 = v6;
          *(void *)(a1 + 8) = v7;
          *(void *)(a1 + 16) = v8;
          *(unsigned char *)(a1 + 24) = v9;
          *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v11 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for NWActorDiscoveryMechanism.Target(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v2 = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 8);
        uint64_t v4 = *(void *)(a1 + 16);
        char v5 = *(unsigned char *)(a1 + 24);
        sub_18315E658(v2, v3, v4, v5);
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 48) != 1) {
          goto LABEL_17;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v6 = sub_183D4447C();
        uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
        v7(a1, v6);
        break;
      case 4u:
LABEL_17:
        swift_unknownObjectRelease();
        break;
      default:
        return;
    }
  }
  else
  {
    swift_release();
  }
}

uint64_t initializeWithCopy for NWActorDiscoveryMechanism.Target(uint64_t a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v11 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v11;
        uint64_t v12 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v12;
        uint64_t v13 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v13;
        uint64_t v14 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(a1 + 48) = v14;
        break;
      case 2u:
        uint64_t v9 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v9;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v10 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        break;
      case 4u:
        *(void *)a1 = *a2;
        swift_unknownObjectRetain();
        break;
      default:
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        uint64_t v6 = a2[2];
        char v7 = *((unsigned char *)a2 + 24);
        sub_18315E9E4(*a2, v5, v6, v7);
        *(void *)a1 = v4;
        *(void *)(a1 + 8) = v5;
        *(void *)(a1 + 16) = v6;
        *(unsigned char *)(a1 + 24) = v7;
        *(_WORD *)(a1 + 26) = *((_WORD *)a2 + 13);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v8 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NWActorDiscoveryMechanism.Target(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    sub_1835CA54C(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = a2[3];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = a2[5];
          uint64_t v10 = a2[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v10 != 1) {
            swift_unknownObjectRetain();
          }
          *(void *)(a1 + 48) = v10;
          break;
        case 2u:
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v9 = sub_183D4447C();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
          break;
        case 4u:
          *(void *)a1 = *a2;
          swift_unknownObjectRetain();
          break;
        default:
          uint64_t v4 = *a2;
          uint64_t v5 = a2[1];
          uint64_t v6 = a2[2];
          char v7 = *((unsigned char *)a2 + 24);
          sub_18315E9E4(*a2, v5, v6, v7);
          *(void *)a1 = v4;
          *(void *)(a1 + 8) = v5;
          *(void *)(a1 + 16) = v6;
          *(unsigned char *)(a1 + 24) = v7;
          *(_WORD *)(a1 + 26) = *((_WORD *)a2 + 13);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v8 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for NWActorDiscoveryMechanism.Target(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v7 = sub_183D4447C();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for NWActorDiscoveryMechanism.Target(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1835CA54C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v7 = sub_183D4447C();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1835CB540()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_1835CBEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1835CC554(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1835CC9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1835CCBC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1835CCD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_1835CD45C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1835CD618(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1835CDB08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1835CDD50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1835CE644(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v5 - 160));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 != (char *)a1[3])
  {
LABEL_24:
    *(void *)uint64_t v4 = *a2;
    a1[2] += 8;
    return;
  }
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = (uint64_t)&v5[-*a1];
  if ((unint64_t)v5 > *a1)
  {
    uint64_t v7 = v6 >> 3;
    BOOL v8 = v6 >> 3 < -1;
    uint64_t v9 = (v6 >> 3) + 2;
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = v7 + 1;
    }
    uint64_t v11 = v10 >> 1;
    uint64_t v12 = -v11;
    uint64_t v13 = &v5[-8 * v11];
    int64_t v14 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v11], v5, v4 - v5);
      uint64_t v4 = (char *)a1[1];
    }
    uint64_t v15 = &v4[8 * v12];
    uint64_t v4 = &v13[v14];
    a1[1] = v15;
    a1[2] = &v13[v14];
    goto LABEL_24;
  }
  if (v4 == (char *)*a1) {
    size_t v16 = 1;
  }
  else {
    size_t v16 = (uint64_t)&v4[-*a1] >> 2;
  }
  uint64_t v17 = (char *)malloc_type_calloc(v16, 8uLL, 0x80040B8603338uLL);
  if (v17)
  {
    uint64_t v18 = &v17[8 * (v16 >> 2)];
    long long v19 = (uint64_t *)a1[1];
    uint64_t v4 = v18;
    uint64_t v20 = a1[2] - (void)v19;
    if (!v20) {
      goto LABEL_22;
    }
    uint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if (v21 >= 0x38)
    {
      uint64_t v23 = &v17[8 * (v16 >> 2)];
      uint64_t v22 = v23;
      if ((unint64_t)(v23 - (char *)v19) >= 0x20)
      {
        uint64_t v24 = (v21 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v22 = &v18[v25];
        uint64_t v26 = (long long *)(v19 + 2);
        uint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          uint64_t v31 = (char *)*a1;
          *a1 = v17;
          a1[1] = v18;
          a1[2] = v4;
          a1[3] = &v17[8 * v16];
          if (v31)
          {
            free(v31);
            uint64_t v4 = (char *)a1[2];
          }
          goto LABEL_24;
        }
        long long v19 = (uint64_t *)((char *)v19 + v25);
      }
    }
    else
    {
      uint64_t v22 = &v17[8 * (v16 >> 2)];
    }
    do
    {
      uint64_t v30 = *v19++;
      *(void *)uint64_t v22 = v30;
      v22 += 8;
    }
    while (v22 != v4);
    goto LABEL_22;
  }
  __break(1u);
}

void std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_front(const void **a1, void *a2)
{
  uint64_t v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    uint64_t v5 = (char *)a1[1];
LABEL_25:
    *((void *)v5 - 1) = *a2;
    a1[1] = (char *)a1[1] - 8;
    return;
  }
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  if (v6 < v7)
  {
    uint64_t v8 = (v7 - v6) >> 3;
    if (v8 >= -1) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = v8 + 2;
    }
    uint64_t v10 = v9 >> 1;
    uint64_t v5 = &v4[8 * (v9 >> 1)];
    if (v6 != v4)
    {
      memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
      uint64_t v4 = (char *)a1[2];
    }
    a1[1] = v5;
    a1[2] = &v4[8 * v10];
    goto LABEL_25;
  }
  if (v7 == v4) {
    size_t v11 = 1;
  }
  else {
    size_t v11 = (v7 - v4) >> 2;
  }
  uint64_t v12 = (char *)malloc_type_calloc(v11, 8uLL, 0x80040B8603338uLL);
  if (v12)
  {
    unint64_t v13 = (v11 + 3) >> 2;
    uint64_t v5 = &v12[8 * v13];
    int64_t v14 = (uint64_t *)a1[1];
    uint64_t v15 = v5;
    int64_t v16 = (unsigned char *)a1[2] - (unsigned char *)v14;
    if (!v16) {
      goto LABEL_23;
    }
    uint64_t v15 = &v5[v16 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v17 = v16 - 8;
    if (v17 >= 0x38)
    {
      uint64_t v18 = &v12[8 * v13];
      long long v19 = v18;
      if ((unint64_t)(v18 - (char *)v14) >= 0x20)
      {
        uint64_t v20 = (v17 >> 3) + 1;
        uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v18 = &v5[v21];
        uint64_t v22 = (long long *)(v14 + 2);
        uint64_t v23 = v19 + 16;
        uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 4;
        }
        while (v24);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          uint64_t v27 = (void *)*a1;
          *a1 = v12;
          a1[1] = v5;
          a1[2] = v15;
          a1[3] = &v12[8 * v11];
          if (v27)
          {
            free(v27);
            uint64_t v5 = (char *)a1[1];
          }
          goto LABEL_25;
        }
        int64_t v14 = (uint64_t *)((char *)v14 + v21);
      }
    }
    else
    {
      uint64_t v18 = &v12[8 * v13];
    }
    do
    {
      uint64_t v26 = *v14++;
      *(void *)uint64_t v18 = v26;
      v18 += 8;
    }
    while (v18 != v15);
    goto LABEL_23;
  }
  __break(1u);
}

void nw::object::_destroy(nw::object *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  int64_t v14 = "_destroy";
  unint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v1, &type, &v11)) {
    goto LABEL_14;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136446210;
    int64_t v14 = "_destroy";
    uint64_t v4 = "%{public}s nw::object::_destroy should never be called";
LABEL_12:
    uint64_t v9 = v2;
    os_log_type_t v10 = v3;
LABEL_13:
    _os_log_impl(&dword_1830D4000, v9, v10, v4, buf, 0xCu);
    goto LABEL_14;
  }
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136446210;
    int64_t v14 = "_destroy";
    uint64_t v4 = "%{public}s nw::object::_destroy should never be called, backtrace limit exceeded";
    goto LABEL_12;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v6 = gLogObj;
  os_log_type_t v7 = type;
  BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (backtrace_string)
  {
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      int64_t v14 = "_destroy";
      __int16 v15 = 2082;
      int64_t v16 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s nw::object::_destroy should never be called, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
  }
  else if (v8)
  {
    *(_DWORD *)buf = 136446210;
    int64_t v14 = "_destroy";
    uint64_t v4 = "%{public}s nw::object::_destroy should never be called, no backtrace";
    uint64_t v9 = v6;
    os_log_type_t v10 = v7;
    goto LABEL_13;
  }
LABEL_14:
  if (v1) {
    free(v1);
  }
}

uint64_t nw::object::_redacted_description(uint64_t **this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = nw::object::cls(this[2]);
  uint64_t v4 = nw::object::class_def::lookup_method(v2, nw::object::__description_def_instance, qword_1EB267950);
  if (v3) {
    BOOL v5 = (v3 & 1 | v4) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  if (v4) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7)
  {
    BOOL v8 = (uint64_t **)((char *)this + (v3 >> 1));
    if (v3) {
      uint64_t v4 = *(void *)(*v8 + v4);
    }
    return ((uint64_t (*)(void *))v4)(v8);
  }
  nw::object::cls(this[2]);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  long long v19 = "bad_method_lookup";
  __int16 v20 = 2080;
  uint64_t v21 = "object::description";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        long long v19 = "bad_method_lookup";
        __int16 v20 = 2080;
        uint64_t v21 = "object::description";
        uint64_t v12 = "%{public}s unable to lookup %s";
LABEL_30:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0x16u);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      os_log_type_t v11 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          long long v19 = "bad_method_lookup";
          __int16 v20 = 2080;
          uint64_t v21 = "object::description";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s unable to lookup %s, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
        goto LABEL_31;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        long long v19 = "bad_method_lookup";
        __int16 v20 = 2080;
        uint64_t v21 = "object::description";
        uint64_t v12 = "%{public}s unable to lookup %s, no backtrace";
        goto LABEL_30;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        long long v19 = "bad_method_lookup";
        __int16 v20 = 2080;
        uint64_t v21 = "object::description";
        uint64_t v12 = "%{public}s unable to lookup %s, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
  }
LABEL_31:
  if (v9) {
    free(v9);
  }
  return 0;
}

uint64_t *nw::object::cls(uint64_t *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (this) {
    return this;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v10 = "cls";
  unint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  uint64_t v2 = __nwlog_fault(v1, &type, &v7);
  if (v2)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      uint64_t v2 = os_log_type_enabled(v3, type);
      if (v2)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v10 = "cls";
        BOOL v5 = "%{public}s called with null m_cls";
LABEL_15:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v7)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      uint64_t v2 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v2)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v10 = "cls";
          __int16 v11 = 2082;
          uint64_t v12 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null m_cls, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_16;
      }
      if (v2)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v10 = "cls";
        BOOL v5 = "%{public}s called with null m_cls, no backtrace";
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      uint64_t v2 = os_log_type_enabled(v3, type);
      if (v2)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v10 = "cls";
        BOOL v5 = "%{public}s called with null m_cls, backtrace limit exceeded";
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  if (v1) {
    free(v1);
  }
  nw::object::_class((nw::object *)v2);
  return &nw::object::_class(void)::instance;
}

uint64_t nw::object::class_def::lookup_method(void *a1, unint64_t a2, char a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (a1[13] > a2) {
      return *(void *)(*(void *)(a1[9] + (((a1[12] + a2) >> 5) & 0x7FFFFFFFFFFFFF8))
    }
                       + 16 * (*((unsigned char *)a1 + 96) + a2));
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "lookup_method";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (__nwlog_fault(v4, &type, &v12))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "lookup_method";
        char v7 = "%{public}s called with null (def.slot().value() < m_method_table.size())";
        goto LABEL_31;
      }
      if (!v12)
      {
        BOOL v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "lookup_method";
        char v7 = "%{public}s called with null (def.slot().value() < m_method_table.size()), backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "lookup_method";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null (def.slot().value() < m_method_table.size()), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v4) {
          return 0;
        }
        goto LABEL_33;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "lookup_method";
        char v7 = "%{public}s called with null (def.slot().value() < m_method_table.size()), no backtrace";
LABEL_31:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "lookup_method";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "lookup_method";
      char v7 = "%{public}s called with null (def.slot())";
      goto LABEL_31;
    }
    if (!v12)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "lookup_method";
      char v7 = "%{public}s called with null (def.slot()), backtrace limit exceeded";
      goto LABEL_31;
    }
    BOOL v8 = (char *)__nw_create_backtrace_string();
    BOOL v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "lookup_method";
      char v7 = "%{public}s called with null (def.slot()), no backtrace";
      goto LABEL_31;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "lookup_method";
      __int16 v16 = 2082;
      uint64_t v17 = v8;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null (def.slot()), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v8);
  }
LABEL_32:
  if (v4) {
LABEL_33:
  }
    free(v4);
  return 0;
}

void nw::object::_class(nw::object *this)
{
  {
    nw::object::_class(void)::instance = (uint64_t)"object";
    *(void *)algn_1EB267848 = 6;
    xmmword_1EB267850 = 0u;
    unk_1EB267860 = 0u;
    xmmword_1EB267870 = 0u;
    *(_OWORD *)&qword_1EB267880 = 0u;
    *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
    *(_OWORD *)&qword_1EB2678A0 = 0u;
    xmmword_1EB2678B0 = 0u;
    unk_1EB2678C0 = 0u;
    qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
    unk_1EB2678D8 = &qword_1EB2678D0;
    qword_1EB2678E0 = 0;
    dword_1EB2678E8 = 0;
  }
}

CFStringRef nw::object::_description(nw::object *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  v28[0] = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = (uint64_t *)MEMORY[0x1E4FBA418];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v20 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v4;
  BOOL v5 = (std::ios_base *)((char *)&v20 + *(void *)(v20 - 24));
  std::ios_base::init(v5, &v21);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  uint64_t v20 = v1;
  v28[0] = v2;
  std::streambuf::basic_streambuf();
  uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  uint64_t v21 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)long long v25 = 0u;
  long long v26 = 0u;
  int v27 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"<nw::object ", 12);
  char v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)">", 1);
  if ((v27 & 0x10) != 0)
  {
    unint64_t v10 = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1) < v24)
    {
      *((void *)&v26 + 1) = v24;
      unint64_t v10 = v24;
    }
    BOOL v11 = (const void **)&v23;
  }
  else
  {
    if ((v27 & 8) == 0)
    {
      size_t v8 = 0;
      HIBYTE(v19) = 0;
      BOOL v9 = __p;
      goto LABEL_16;
    }
    BOOL v11 = (const void **)v22;
    unint64_t v10 = v22[2];
  }
  char v12 = *v11;
  size_t v8 = v10 - (void)*v11;
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v8 >= 0x17)
  {
    uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v13 = v8 | 7;
    }
    uint64_t v14 = v13 + 1;
    BOOL v9 = operator new(v13 + 1);
    __p[1] = (void *)v8;
    int64_t v19 = v14 | 0x8000000000000000;
    __p[0] = v9;
    goto LABEL_15;
  }
  HIBYTE(v19) = v10 - *(unsigned char *)v11;
  BOOL v9 = __p;
  if (v8) {
LABEL_15:
  }
    memmove(v9, v12, v8);
LABEL_16:
  *((unsigned char *)v9 + v8) = 0;
  if (v19 >= 0) {
    BOOL v15 = __p;
  }
  else {
    BOOL v15 = (void **)__p[0];
  }
  CFStringRef v16 = CFStringCreateWithCString(0, (const char *)v15, 0x8000100u);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = *v3;
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v3[3];
  uint64_t v21 = v6;
  if (SBYTE7(v26) < 0) {
    operator delete(v25[0]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x185316200](v28);
  return v16;
}

void nw_protocol_udp_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_udp_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_udp_error";
      CFStringRef v16 = "%{public}s called with null protocol";
      goto LABEL_45;
    }
    if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v46 = "nw_protocol_udp_error";
        __int16 v47 = 2082;
        uint64_t v48 = backtrace_string;
        long long v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v37) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_udp_error";
      CFStringRef v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_udp_error";
      CFStringRef v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    long long v25 = v14;
    os_log_type_t v26 = v15;
LABEL_46:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_47;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_udp_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_udp_error";
      CFStringRef v16 = "%{public}s called with null udp";
      goto LABEL_45;
    }
    if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v39 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v39) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v46 = "nw_protocol_udp_error";
        __int16 v47 = 2082;
        uint64_t v48 = backtrace_string;
        long long v38 = "%{public}s called with null udp, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v39) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_udp_error";
      CFStringRef v16 = "%{public}s called with null udp, no backtrace";
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_udp_error";
      CFStringRef v16 = "%{public}s called with null udp, backtrace limit exceeded";
    }
    goto LABEL_45;
  }
  if (a2)
  {
    uint64_t default_input_handler = (uint64_t)a1->default_input_handler;
    if (default_input_handler)
    {
      uint64_t v4 = *(void **)(default_input_handler + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(default_input_handler + 88);
        if (v5) {
          *(void *)(default_input_handler + 88) = v5 + 1;
        }
      }
      handle = a2->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }
      uint64_t v8 = *(void *)(default_input_handler + 24);
      if (v8)
      {
        BOOL v9 = *(void (**)(uint64_t, nw_protocol *))(v8 + 56);
        if (v9)
        {
          v9(default_input_handler, a2);
          goto LABEL_14;
        }
      }
      __nwlog_obj();
      int v27 = *(const char **)(default_input_handler + 16);
      *(_DWORD *)buf = 136446722;
      uint64_t v46 = "__nw_protocol_error";
      if (!v27) {
        int v27 = "invalid";
      }
      __int16 v47 = 2082;
      uint64_t v48 = (void *)v27;
      __int16 v49 = 2048;
      uint64_t v50 = default_input_handler;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v28, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          long long v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_109;
          }
          uint64_t v31 = *(const char **)(default_input_handler + 16);
          if (!v31) {
            uint64_t v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          uint64_t v48 = (void *)v31;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_108;
        }
        if (!v43)
        {
          long long v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_109;
          }
          uint64_t v41 = *(const char **)(default_input_handler + 16);
          if (!v41) {
            uint64_t v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          uint64_t v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_108;
        }
        unsigned __int8 v33 = (char *)__nw_create_backtrace_string();
        long long v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            long long v35 = *(const char **)(default_input_handler + 16);
            if (!v35) {
              long long v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v46 = "__nw_protocol_error";
            __int16 v47 = 2082;
            uint64_t v48 = (void *)v35;
            __int16 v49 = 2048;
            uint64_t v50 = default_input_handler;
            __int16 v51 = 2082;
            uint64_t v52 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_109;
        }
        if (v34)
        {
          uint64_t v42 = *(const char **)(default_input_handler + 16);
          if (!v42) {
            uint64_t v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          uint64_t v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_108:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_109:
      if (v28) {
        free(v28);
      }
LABEL_14:
      if (handle == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = a2[1].callbacks;
        if (v21)
        {
          __int16 v22 = (nw_protocol_callbacks *)((char *)v21 - 1);
          a2[1].callbacks = v22;
          if (!v22)
          {
            uint64_t v23 = *(void (***)(void))a2[1].flow_id;
            if (v23)
            {
              *(void *)a2[1].flow_id = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (a2[1].flow_id[8])
            {
              unint64_t v24 = *(const void **)a2[1].flow_id;
              if (v24) {
                _Block_release(v24);
              }
            }
            free(a2);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle
        && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(default_input_handler + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(default_input_handler + 88) = v11;
          if (!v11)
          {
            char v12 = *(void (***)(void))(default_input_handler + 64);
            if (v12)
            {
              *(void *)(default_input_handler + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(default_input_handler + 72))
            {
              uint64_t v13 = *(const void **)(default_input_handler + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_48;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_udp_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault((const char *)default_input_handler, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_udp_error";
        CFStringRef v16 = "%{public}s udp_error requires a default input handler";
        goto LABEL_45;
      }
      if (!v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_udp_error";
        CFStringRef v16 = "%{public}s udp_error requires a default input handler, backtrace limit exceeded";
        goto LABEL_45;
      }
      uint64_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v46 = "nw_protocol_udp_error";
          __int16 v47 = 2082;
          uint64_t v48 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s udp_error requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (default_input_handler) {
          goto LABEL_48;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_udp_error";
        CFStringRef v16 = "%{public}s udp_error requires a default input handler, no backtrace";
        long long v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_46;
      }
    }
LABEL_47:
    if (!default_input_handler) {
      return;
    }
    goto LABEL_48;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v46 = "nw_protocol_udp_error";
  uint64_t default_input_handler = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
    goto LABEL_47;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_udp_error";
    CFStringRef v16 = "%{public}s called with null other_protocol";
    goto LABEL_45;
  }
  if (!v43)
  {
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_udp_error";
    CFStringRef v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_45;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  uint64_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v40 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v40) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_udp_error";
    CFStringRef v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_45;
  }
  if (!v40) {
    goto LABEL_92;
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v46 = "nw_protocol_udp_error";
  __int16 v47 = 2082;
  uint64_t v48 = backtrace_string;
  long long v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_91:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_92:
  free(backtrace_string);
  if (default_input_handler) {
LABEL_48:
  }
    free((void *)default_input_handler);
}

void nw_protocol_udp_get_message_properties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    CFStringRef v16 = "nw_protocol_udp_get_message_properties";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v16 = "nw_protocol_udp_get_message_properties";
      uint64_t v8 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          CFStringRef v16 = "nw_protocol_udp_get_message_properties";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v5) {
          return;
        }
LABEL_37:
        free(v5);
        return;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v16 = "nw_protocol_udp_get_message_properties";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v16 = "nw_protocol_udp_get_message_properties";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    if (a3)
    {
      int v3 = *(_DWORD *)(a1 + 180);
      if (!v3) {
        int v3 = 4000;
      }
      unsigned int v4 = a3[1] & 0xFFFFFFF8 | 1;
      *a3 = v3;
      a3[1] = v4;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  CFStringRef v16 = "nw_protocol_udp_get_message_properties";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    CFStringRef v16 = "nw_protocol_udp_get_message_properties";
    uint64_t v8 = "%{public}s called with null udp";
    goto LABEL_35;
  }
  if (!v13)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    CFStringRef v16 = "nw_protocol_udp_get_message_properties";
    uint64_t v8 = "%{public}s called with null udp, backtrace limit exceeded";
    goto LABEL_35;
  }
  uint64_t v11 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    CFStringRef v16 = "nw_protocol_udp_get_message_properties";
    uint64_t v8 = "%{public}s called with null udp, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    CFStringRef v16 = "nw_protocol_udp_get_message_properties";
    __int16 v17 = 2082;
    uint64_t v18 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null udp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
    goto LABEL_37;
  }
}

uint64_t nw_protocol_udp_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *object)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v108 = "nw_protocol_udp_updated_path";
    uint64_t v63 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v103) = 0;
    if (!__nwlog_fault(v63, type, &v103)) {
      goto LABEL_194;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (!os_log_type_enabled(v64, type[0])) {
        goto LABEL_194;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v108 = "nw_protocol_udp_updated_path";
      uint64_t v66 = "%{public}s called with null protocol";
LABEL_193:
      _os_log_impl(&dword_1830D4000, v64, v65, v66, buf, 0xCu);
      goto LABEL_194;
    }
    if (!(_BYTE)v103)
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v64, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v108 = "nw_protocol_udp_updated_path";
        uint64_t v66 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_193;
      }
      goto LABEL_194;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v64 = __nwlog_obj();
    os_log_type_t v65 = type[0];
    BOOL v79 = os_log_type_enabled(v64, type[0]);
    if (!backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v108 = "nw_protocol_udp_updated_path";
        uint64_t v66 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_193;
      }
      goto LABEL_194;
    }
    if (!v79) {
      goto LABEL_157;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v108 = "nw_protocol_udp_updated_path";
    __int16 v109 = 2082;
    uint64_t v110 = (nw_protocol *)backtrace_string;
    long long v80 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_156:
    _os_log_impl(&dword_1830D4000, v64, v65, v80, buf, 0x16u);
    goto LABEL_157;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v108 = "nw_protocol_udp_updated_path";
    uint64_t v63 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v103) = 0;
    if (!__nwlog_fault(v63, type, &v103)) {
      goto LABEL_194;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (!os_log_type_enabled(v64, type[0])) {
        goto LABEL_194;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v108 = "nw_protocol_udp_updated_path";
      uint64_t v66 = "%{public}s called with null udp";
      goto LABEL_193;
    }
    if (!(_BYTE)v103)
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v64, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v108 = "nw_protocol_udp_updated_path";
        uint64_t v66 = "%{public}s called with null udp, backtrace limit exceeded";
        goto LABEL_193;
      }
      goto LABEL_194;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v64 = __nwlog_obj();
    os_log_type_t v65 = type[0];
    BOOL v81 = os_log_type_enabled(v64, type[0]);
    if (!backtrace_string)
    {
      if (v81)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v108 = "nw_protocol_udp_updated_path";
        uint64_t v66 = "%{public}s called with null udp, no backtrace";
        goto LABEL_193;
      }
      goto LABEL_194;
    }
    if (!v81) {
      goto LABEL_157;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v108 = "nw_protocol_udp_updated_path";
    __int16 v109 = 2082;
    uint64_t v110 = (nw_protocol *)backtrace_string;
    long long v80 = "%{public}s called with null udp, dumping backtrace:%{public}s";
    goto LABEL_156;
  }
  if (object)
  {
    if (gLogDatapath)
    {
      uint64_t v67 = __nwlog_obj();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        int output_handler_context_low = LOWORD(a1[2].output_handler_context);
        int v69 = WORD1(a1[2].output_handler_context);
        *(_DWORD *)buf = 136446978;
        unint64_t v108 = "nw_protocol_udp_updated_path";
        __int16 v109 = 2082;
        uint64_t v110 = a1 + 3;
        __int16 v111 = 1024;
        *(_DWORD *)uint64_t v112 = output_handler_context_low;
        *(_WORD *)&v112[4] = 1024;
        *(_DWORD *)&v112[6] = v69;
        _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s udp[%u,%u]", buf, 0x22u);
      }
    }
    uint64_t default_input_handler = a1[1].default_input_handler;
    a1[1].uint64_t default_input_handler = (nw_protocol *)os_retain(object);
    if (default_input_handler) {
      os_release(default_input_handler);
    }
    output_handler_context = a1[1].output_handler_context;
    if (a2)
    {
      handle = a2->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }
      BOOL v10 = a2->callbacks;
      if (v10)
      {
        get_nw_parameters_t parameters = (uint64_t (*)(nw_protocol *))v10->get_parameters;
        if (get_parameters)
        {
          BOOL v12 = (void *)get_parameters(a2);
          if (handle != &nw_protocol_ref_counted_handle) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }
      __nwlog_obj();
      identifier = a2->identifier;
      *(_DWORD *)buf = 136446722;
      unint64_t v108 = "__nw_protocol_get_parameters";
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      __int16 v109 = 2082;
      uint64_t v110 = (nw_protocol *)identifier;
      __int16 v111 = 2048;
      *(void *)uint64_t v112 = a2;
      uint64_t v58 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v103) = 0;
      if (!__nwlog_fault(v58, type, &v103)) {
        goto LABEL_169;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v59 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_169;
        }
        uint64_t v61 = a2->identifier;
        if (!v61) {
          uint64_t v61 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        unint64_t v108 = "__nw_protocol_get_parameters";
        __int16 v109 = 2082;
        uint64_t v110 = (nw_protocol *)v61;
        __int16 v111 = 2048;
        *(void *)uint64_t v112 = a2;
        uint64_t v62 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
      }
      else
      {
        if ((_BYTE)v103)
        {
          uint64_t v74 = (char *)__nw_create_backtrace_string();
          uint64_t v75 = __nwlog_obj();
          os_log_type_t v60 = type[0];
          log = v75;
          BOOL v76 = os_log_type_enabled(v75, type[0]);
          if (v74)
          {
            if (v76)
            {
              uint64_t v77 = a2->identifier;
              if (!v77) {
                uint64_t v77 = (nw_protocol_identifier *)"invalid";
              }
              *(_DWORD *)buf = 136446978;
              unint64_t v108 = "__nw_protocol_get_parameters";
              __int16 v109 = 2082;
              uint64_t v110 = (nw_protocol *)v77;
              __int16 v111 = 2048;
              *(void *)uint64_t v112 = a2;
              *(_WORD *)&v112[8] = 2082;
              v113 = v74;
              _os_log_impl(&dword_1830D4000, log, v60, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(v74);
          }
          else if (v76)
          {
            long long v90 = a2->identifier;
            if (!v90) {
              long long v90 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            unint64_t v108 = "__nw_protocol_get_parameters";
            __int16 v109 = 2082;
            uint64_t v110 = (nw_protocol *)v90;
            __int16 v111 = 2048;
            *(void *)uint64_t v112 = a2;
            uint64_t v62 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
            uint64_t v86 = log;
            goto LABEL_168;
          }
LABEL_169:
          if (v58) {
            free(v58);
          }
          BOOL v12 = 0;
          if (handle == &nw_protocol_ref_counted_handle)
          {
LABEL_14:
            if (a2->handle == &nw_protocol_ref_counted_handle)
            {
              unsigned __int8 v33 = a2[1].callbacks;
              if (v33)
              {
                BOOL v34 = (nw_protocol_callbacks *)((char *)v33 - 1);
                a2[1].callbacks = v34;
                if (!v34)
                {
                  long long v35 = *(void (***)(void))a2[1].flow_id;
                  if (v35)
                  {
                    *(void *)a2[1].flow_id = 0;
                    v35[2](v35);
                    _Block_release(v35);
                  }
                  if (a2[1].flow_id[8])
                  {
                    long long v36 = *(const void **)a2[1].flow_id;
                    if (v36) {
                      _Block_release(v36);
                    }
                  }
                  free(a2);
                }
              }
            }
          }
LABEL_15:
          id v13 = nw_parameters_copy_context(v12);
          a1[1].output_handler_context = nw_path_copy_flow_registration(v13, (uint64_t)a1);
          if (output_handler_context) {
            os_release(output_handler_context);
          }
          if (v13) {
            os_release(v13);
          }
          uint64_t v14 = a1[1].output_handler_context;
          if (!v14) {
            goto LABEL_72;
          }
          int v103 = 0;
          *(_DWORD *)os_log_type_t type = 0;
          if (!nw_path_flow_registration_get_ctl_command(a1[1].default_input_handler, v14, type, &v103, 0))goto LABEL_72; {
          if (gLogDatapath)
          }
          {
            uint64_t v87 = __nwlog_obj();
            if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
            {
              int v88 = LOWORD(a1[2].output_handler_context);
              int v89 = WORD1(a1[2].output_handler_context);
              *(_DWORD *)buf = 136447490;
              unint64_t v108 = "nw_protocol_udp_updated_path";
              __int16 v109 = 2082;
              uint64_t v110 = a1 + 3;
              __int16 v111 = 1024;
              *(_DWORD *)uint64_t v112 = v88;
              *(_WORD *)&v112[4] = 1024;
              *(_DWORD *)&v112[6] = v89;
              LOWORD(v113) = 1024;
              *(_DWORD *)((char *)&v113 + 2) = *(_DWORD *)type;
              HIWORD(v113) = 1024;
              int v114 = v103;
              _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s udp[%u,%u] Protocol event %d=%d", buf, 0x2Eu);
            }
          }
          uint64_t v15 = *(unsigned int *)type;
          __int16 output_handler_context_high = HIWORD(a1[2].output_handler_context);
          if ((output_handler_context_high & 4) != 0)
          {
            if (LODWORD(a1[2].identifier)) {
              goto LABEL_31;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v18 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_72;
            }
            *(_DWORD *)buf = 136446466;
            unint64_t v108 = "udp_ctlinput";
            __int16 v109 = 2082;
            uint64_t v110 = a1 + 3;
            uint64_t v19 = "%{public}s %{public}s Protocol event reported for socket with faddr INADDR_ANY";
          }
          else
          {
            if (a1[2].identifier != (nw_protocol_identifier *)*MEMORY[0x1E4F148B8]
              || a1[2].callbacks != *(nw_protocol_callbacks **)(MEMORY[0x1E4F148B8] + 8))
            {
LABEL_31:
              if (*(_DWORD *)type <= 0x15u
                && (*(_DWORD *)type - 14) >= 4
                && ((0xFC01FuLL >> type[0]) & 1) == 0
                && ((output_handler_context_high & 0x80) == 0 || *(_DWORD *)type != 5 && *(_DWORD *)type != 12))
              {
                BOOL v20 = a1->default_input_handler;
                if (v20)
                {
                  uint64_t v21 = v20->callbacks;
                  if (v21)
                  {
                    if (v21->error)
                    {
                      HIWORD(a1[2].output_handler_context) = output_handler_context_high | 0x200;
                      uint64_t v22 = udpctlerrmap[v15];
                      uint64_t v23 = v20->handle;
                      if (v23 == &nw_protocol_ref_counted_handle)
                      {
                        unint64_t v24 = v20[1].callbacks;
                        if (v24) {
                          v20[1].callbacks = (nw_protocol_callbacks *)((char *)&v24->add_input_handler + 1);
                        }
                      }
                      long long v25 = a1->handle;
                      if (v25 == &nw_protocol_ref_counted_handle)
                      {
                        os_log_type_t v26 = a1[1].callbacks;
                        if (v26) {
                          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v26->add_input_handler + 1);
                        }
                      }
                      int v27 = v20->callbacks;
                      if (v27)
                      {
                        error = (void (*)(nw_protocol *, nw_protocol *, uint64_t))v27->error;
                        if (error)
                        {
                          error(v20, a1, v22);
LABEL_49:
                          if (v25 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
                          {
                            uint64_t v53 = a1[1].callbacks;
                            if (v53)
                            {
                              uint64_t v54 = (nw_protocol_callbacks *)((char *)v53 - 1);
                              a1[1].callbacks = v54;
                              if (!v54)
                              {
                                uint64_t v55 = *(void (***)(void))a1[1].flow_id;
                                if (v55)
                                {
                                  *(void *)a1[1].flow_id = 0;
                                  v55[2](v55);
                                  _Block_release(v55);
                                }
                                if (a1[1].flow_id[8])
                                {
                                  uint64_t v56 = *(const void **)a1[1].flow_id;
                                  if (v56) {
                                    _Block_release(v56);
                                  }
                                }
                                free(a1);
                              }
                            }
                          }
                          if (v23 == &nw_protocol_ref_counted_handle && v20->handle == &nw_protocol_ref_counted_handle)
                          {
                            long long v29 = v20[1].callbacks;
                            if (v29)
                            {
                              os_log_type_t v30 = (nw_protocol_callbacks *)((char *)v29 - 1);
                              v20[1].callbacks = v30;
                              if (!v30)
                              {
                                uint64_t v31 = *(void (***)(void))v20[1].flow_id;
                                if (v31)
                                {
                                  *(void *)v20[1].flow_id = 0;
                                  v31[2](v31);
                                  _Block_release(v31);
                                }
                                if (v20[1].flow_id[8])
                                {
                                  uint64_t v32 = *(const void **)v20[1].flow_id;
                                  if (v32) {
                                    _Block_release(v32);
                                  }
                                }
                                free(v20);
                              }
                            }
                          }
                          goto LABEL_72;
                        }
                      }
                      __nwlog_obj();
                      name = v20->identifier->name;
                      *(_DWORD *)buf = 136446722;
                      unint64_t v108 = "__nw_protocol_error";
                      if (!name) {
                        name = "invalid";
                      }
                      __int16 v109 = 2082;
                      uint64_t v110 = (nw_protocol *)name;
                      __int16 v111 = 2048;
                      *(void *)uint64_t v112 = v20;
                      uint64_t v92 = (char *)_os_log_send_and_compose_impl();
                      os_log_type_t v106 = OS_LOG_TYPE_ERROR;
                      char v105 = 0;
                      if (__nwlog_fault(v92, &v106, &v105))
                      {
                        if (v106 == OS_LOG_TYPE_FAULT)
                        {
                          v93 = __nwlog_obj();
                          os_log_type_t v94 = v106;
                          if (!os_log_type_enabled(v93, v106)) {
                            goto LABEL_227;
                          }
                          v95 = v20->identifier->name;
                          if (!v95) {
                            v95 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          unint64_t v108 = "__nw_protocol_error";
                          __int16 v109 = 2082;
                          uint64_t v110 = (nw_protocol *)v95;
                          __int16 v111 = 2048;
                          *(void *)uint64_t v112 = v20;
                          uint64_t v96 = "%{public}s protocol %{public}s (%p) has invalid error callback";
                          goto LABEL_226;
                        }
                        if (!v105)
                        {
                          v93 = __nwlog_obj();
                          os_log_type_t v94 = v106;
                          if (!os_log_type_enabled(v93, v106)) {
                            goto LABEL_227;
                          }
                          v100 = v20->identifier->name;
                          if (!v100) {
                            v100 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          unint64_t v108 = "__nw_protocol_error";
                          __int16 v109 = 2082;
                          uint64_t v110 = (nw_protocol *)v100;
                          __int16 v111 = 2048;
                          *(void *)uint64_t v112 = v20;
                          uint64_t v96 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
                          goto LABEL_226;
                        }
                        v97 = (char *)__nw_create_backtrace_string();
                        v93 = __nwlog_obj();
                        os_log_type_t v94 = v106;
                        BOOL v98 = os_log_type_enabled(v93, v106);
                        if (v97)
                        {
                          if (v98)
                          {
                            uint64_t v99 = v20->identifier->name;
                            if (!v99) {
                              uint64_t v99 = "invalid";
                            }
                            *(_DWORD *)buf = 136446978;
                            unint64_t v108 = "__nw_protocol_error";
                            __int16 v109 = 2082;
                            uint64_t v110 = (nw_protocol *)v99;
                            __int16 v111 = 2048;
                            *(void *)uint64_t v112 = v20;
                            *(_WORD *)&v112[8] = 2082;
                            v113 = v97;
                            _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
                          }
                          free(v97);
                          goto LABEL_227;
                        }
                        if (v98)
                        {
                          uint64_t v101 = v20->identifier->name;
                          if (!v101) {
                            uint64_t v101 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          unint64_t v108 = "__nw_protocol_error";
                          __int16 v109 = 2082;
                          uint64_t v110 = (nw_protocol *)v101;
                          __int16 v111 = 2048;
                          *(void *)uint64_t v112 = v20;
                          uint64_t v96 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_226:
                          _os_log_impl(&dword_1830D4000, v93, v94, v96, buf, 0x20u);
                        }
                      }
LABEL_227:
                      if (v92) {
                        free(v92);
                      }
                      goto LABEL_49;
                    }
                  }
                }
              }
LABEL_72:
              LODWORD(a1[2].default_input_handler) = nw_path_get_effective_traffic_class(a1[1].default_input_handler);
              output_handler = a1->output_handler;
              if (!output_handler) {
                return 1;
              }
              long long v38 = output_handler->callbacks;
              if (!v38) {
                return 1;
              }
              updated_path = (uint64_t (*)(nw_protocol *, nw_protocol *, nw_path *))v38->updated_path;
              if (!updated_path) {
                return 1;
              }
              BOOL v40 = output_handler->handle;
              if (v40 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v41 = output_handler[1].callbacks;
                if (v41) {
                  output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v41->add_input_handler + 1);
                }
              }
              if (a1->handle == &nw_protocol_ref_counted_handle)
              {
                char v43 = a1[1].callbacks;
                if (v43) {
                  a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v43->add_input_handler + 1);
                }
                uint64_t v42 = updated_path(output_handler, a1, object);
                if (a1->handle == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v45 = a1[1].callbacks;
                  if (v45)
                  {
                    uint64_t v46 = (nw_protocol_callbacks *)((char *)v45 - 1);
                    a1[1].callbacks = v46;
                    if (!v46)
                    {
                      __int16 v47 = *(void (***)(void))a1[1].flow_id;
                      if (v47)
                      {
                        *(void *)a1[1].flow_id = 0;
                        v47[2](v47);
                        _Block_release(v47);
                      }
                      if (a1[1].flow_id[8])
                      {
                        uint64_t v48 = *(const void **)a1[1].flow_id;
                        if (v48) {
                          _Block_release(v48);
                        }
                      }
                      free(a1);
                    }
                  }
                }
              }
              else
              {
                uint64_t v42 = updated_path(output_handler, a1, object);
              }
              if (v40 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
              {
                __int16 v49 = output_handler[1].callbacks;
                if (v49)
                {
                  uint64_t v50 = (nw_protocol_callbacks *)((char *)v49 - 1);
                  output_handler[1].callbacks = v50;
                  if (!v50)
                  {
                    __int16 v51 = *(void (***)(void))output_handler[1].flow_id;
                    if (v51)
                    {
                      *(void *)output_handler[1].flow_id = 0;
                      v51[2](v51);
                      _Block_release(v51);
                    }
                    if (output_handler[1].flow_id[8])
                    {
                      uint64_t v52 = *(const void **)output_handler[1].flow_id;
                      if (v52) {
                        _Block_release(v52);
                      }
                    }
                    free(output_handler);
                  }
                }
              }
              return v42;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v18 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_72;
            }
            *(_DWORD *)buf = 136446466;
            unint64_t v108 = "udp_ctlinput";
            __int16 v109 = 2082;
            uint64_t v110 = a1 + 3;
            uint64_t v19 = "%{public}s %{public}s Protocol event reported for socket with faddr IN6ADDR_ANY";
          }
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x16u);
          goto LABEL_72;
        }
        uint64_t v59 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_169;
        }
        uint64_t v85 = a2->identifier;
        if (!v85) {
          uint64_t v85 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        unint64_t v108 = "__nw_protocol_get_parameters";
        __int16 v109 = 2082;
        uint64_t v110 = (nw_protocol *)v85;
        __int16 v111 = 2048;
        *(void *)uint64_t v112 = a2;
        uint64_t v62 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
      }
      uint64_t v86 = v59;
LABEL_168:
      _os_log_impl(&dword_1830D4000, v86, v60, v62, buf, 0x20u);
      goto LABEL_169;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v108 = "__nw_protocol_get_parameters";
    uint64_t v70 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v103) = 0;
    if (__nwlog_fault(v70, type, &v103))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v72 = type[0];
        if (os_log_type_enabled(v71, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v108 = "__nw_protocol_get_parameters";
          uint64_t v73 = "%{public}s called with null protocol";
LABEL_199:
          _os_log_impl(&dword_1830D4000, v71, v72, v73, buf, 0xCu);
        }
      }
      else if ((_BYTE)v103)
      {
        uint64_t v83 = (char *)__nw_create_backtrace_string();
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v72 = type[0];
        BOOL v84 = os_log_type_enabled(v71, type[0]);
        if (v83)
        {
          if (v84)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v108 = "__nw_protocol_get_parameters";
            __int16 v109 = 2082;
            uint64_t v110 = (nw_protocol *)v83;
            _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v83);
          goto LABEL_200;
        }
        if (v84)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v108 = "__nw_protocol_get_parameters";
          uint64_t v73 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_199;
        }
      }
      else
      {
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v72 = type[0];
        if (os_log_type_enabled(v71, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v108 = "__nw_protocol_get_parameters";
          uint64_t v73 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_199;
        }
      }
    }
LABEL_200:
    if (v70) {
      free(v70);
    }
    BOOL v12 = 0;
    goto LABEL_15;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v108 = "nw_protocol_udp_updated_path";
  uint64_t v63 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v103) = 0;
  if (!__nwlog_fault(v63, type, &v103)) {
    goto LABEL_194;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!(_BYTE)v103)
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v64, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v108 = "nw_protocol_udp_updated_path";
        uint64_t v66 = "%{public}s called with null path, backtrace limit exceeded";
        goto LABEL_193;
      }
      goto LABEL_194;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v64 = __nwlog_obj();
    os_log_type_t v65 = type[0];
    BOOL v82 = os_log_type_enabled(v64, type[0]);
    if (!backtrace_string)
    {
      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v108 = "nw_protocol_udp_updated_path";
        uint64_t v66 = "%{public}s called with null path, no backtrace";
        goto LABEL_193;
      }
      goto LABEL_194;
    }
    if (v82)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v108 = "nw_protocol_udp_updated_path";
      __int16 v109 = 2082;
      uint64_t v110 = (nw_protocol *)backtrace_string;
      long long v80 = "%{public}s called with null path, dumping backtrace:%{public}s";
      goto LABEL_156;
    }
LABEL_157:
    free(backtrace_string);
    goto LABEL_194;
  }
  uint64_t v64 = __nwlog_obj();
  os_log_type_t v65 = type[0];
  if (os_log_type_enabled(v64, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    unint64_t v108 = "nw_protocol_udp_updated_path";
    uint64_t v66 = "%{public}s called with null path";
    goto LABEL_193;
  }
LABEL_194:
  if (v63) {
    free(v63);
  }
  return 0;
}

void nw_protocol_udp_link_state(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v53 = "nw_protocol_udp_link_state";
    long long v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v38, &type, &v50)) {
      goto LABEL_118;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_protocol_udp_link_state";
      uint64_t v41 = "%{public}s called with null link_info";
    }
    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v43 = os_log_type_enabled(v39, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v53 = "nw_protocol_udp_link_state";
          __int16 v54 = 2082;
          uint64_t v55 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_118:
        if (!v38) {
          return;
        }
        goto LABEL_119;
      }
      if (!v43) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_protocol_udp_link_state";
      uint64_t v41 = "%{public}s called with null link_info, no backtrace";
    }
    else
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_protocol_udp_link_state";
      uint64_t v41 = "%{public}s called with null link_info, backtrace limit exceeded";
    }
    goto LABEL_117;
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v53 = "nw_protocol_udp_link_state";
    long long v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v38, &type, &v50)) {
      goto LABEL_118;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        BOOL v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v53 = "nw_protocol_udp_link_state";
        uint64_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_117;
      }
      uint64_t v44 = (char *)__nw_create_backtrace_string();
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v45 = os_log_type_enabled(v39, type);
      if (!v44)
      {
        if (!v45) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v53 = "nw_protocol_udp_link_state";
        uint64_t v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_117;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v53 = "nw_protocol_udp_link_state";
        __int16 v54 = 2082;
        uint64_t v55 = v44;
        uint64_t v46 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_98:
        _os_log_impl(&dword_1830D4000, v39, v40, v46, buf, 0x16u);
      }
LABEL_99:
      free(v44);
      if (!v38) {
        return;
      }
LABEL_119:
      long long v29 = (char *)v38;
LABEL_56:
      free(v29);
      return;
    }
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    if (!os_log_type_enabled(v39, type)) {
      goto LABEL_118;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v53 = "nw_protocol_udp_link_state";
    uint64_t v41 = "%{public}s called with null protocol";
LABEL_117:
    _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
    goto LABEL_118;
  }
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v53 = "nw_protocol_udp_link_state";
    long long v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v38, &type, &v50)) {
      goto LABEL_118;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_protocol_udp_link_state";
      uint64_t v41 = "%{public}s called with null udp";
      goto LABEL_117;
    }
    if (!v50)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_protocol_udp_link_state";
      uint64_t v41 = "%{public}s called with null udp, backtrace limit exceeded";
      goto LABEL_117;
    }
    uint64_t v44 = (char *)__nw_create_backtrace_string();
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v47 = os_log_type_enabled(v39, type);
    if (!v44)
    {
      if (!v47) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_protocol_udp_link_state";
      uint64_t v41 = "%{public}s called with null udp, no backtrace";
      goto LABEL_117;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v53 = "nw_protocol_udp_link_state";
      __int16 v54 = 2082;
      uint64_t v55 = v44;
      uint64_t v46 = "%{public}s called with null udp, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    goto LABEL_99;
  }
  unsigned int v4 = a3;
  int v5 = v4[2];

  if (v5 == 1)
  {
    if (gLogDatapath)
    {
      __int16 v49 = __nwlog_obj();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v53 = "nw_protocol_udp_link_state";
        __int16 v54 = 2082;
        uint64_t v55 = (char *)(a1 + 192);
        _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s udp flow controlled", buf, 0x16u);
      }
    }
    __int16 v13 = *(_WORD *)(a1 + 190) | 1;
    goto LABEL_25;
  }
  if (!v5)
  {
    if (gLogDatapath)
    {
      uint64_t v48 = __nwlog_obj();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v53 = "nw_protocol_udp_link_state";
        __int16 v54 = 2082;
        uint64_t v55 = (char *)(a1 + 192);
        _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s udp flow resumed", buf, 0x16u);
      }
    }
    __int16 v6 = *(_WORD *)(a1 + 190);
    __int16 v7 = v6 & 0xFFFE;
    *(_WORD *)(a1 + 190) = v6 & 0xFFFE;
    if ((v6 & 2) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        if (v9)
        {
          BOOL v10 = *(void (**)(uint64_t, uint64_t))(v9 + 72);
          if (v10)
          {
            uint64_t v11 = *(void **)(v8 + 40);
            if (v11 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v12 = *(void *)(v8 + 88);
              if (v12) {
                *(void *)(v8 + 88) = v12 + 1;
              }
            }
            if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v14 = *(void *)(a1 + 88);
              if (v14) {
                *(void *)(a1 + 88) = v14 + 1;
              }
              v10(v8, a1);
              if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v30 = *(void *)(a1 + 88);
                if (v30)
                {
                  uint64_t v31 = v30 - 1;
                  *(void *)(a1 + 88) = v31;
                  if (!v31)
                  {
                    uint64_t v32 = *(void (***)(void))(a1 + 64);
                    if (v32)
                    {
                      *(void *)(a1 + 64) = 0;
                      v32[2](v32);
                      _Block_release(v32);
                    }
                    if (*(unsigned char *)(a1 + 72))
                    {
                      unsigned __int8 v33 = *(const void **)(a1 + 64);
                      if (v33) {
                        _Block_release(v33);
                      }
                    }
                    free((void *)a1);
                  }
                }
              }
            }
            else
            {
              v10(v8, a1);
            }
            if (v11 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v8 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v34 = *(void *)(v8 + 88);
              if (v34)
              {
                uint64_t v35 = v34 - 1;
                *(void *)(v8 + 88) = v35;
                if (!v35)
                {
                  long long v36 = *(void (***)(void))(v8 + 64);
                  if (v36)
                  {
                    *(void *)(v8 + 64) = 0;
                    v36[2](v36);
                    _Block_release(v36);
                  }
                  if (*(unsigned char *)(v8 + 72))
                  {
                    BOOL v37 = *(const void **)(v8 + 64);
                    if (v37) {
                      _Block_release(v37);
                    }
                  }
                  free((void *)v8);
                }
              }
            }
            __int16 v7 = *(_WORD *)(a1 + 190);
          }
        }
      }
      __int16 v13 = v7 & 0xFFFD;
LABEL_25:
      *(_WORD *)(a1 + 190) = v13;
    }
  }
  uint64_t v15 = *(void *)(a1 + 48);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 24);
    if (v16)
    {
      __int16 v17 = *(void (**)(uint64_t, uint64_t, _DWORD *))(v16 + 104);
      if (v17)
      {
        uint64_t v18 = *(void **)(v15 + 40);
        if (v18 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v19 = *(void *)(v15 + 88);
          if (v19) {
            *(void *)(v15 + 88) = v19 + 1;
          }
        }
        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v20 = *(void *)(a1 + 88);
          if (v20) {
            *(void *)(a1 + 88) = v20 + 1;
          }
          v17(v15, a1, v4);
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v21 = *(void *)(a1 + 88);
            if (v21)
            {
              uint64_t v22 = v21 - 1;
              *(void *)(a1 + 88) = v22;
              if (!v22)
              {
                uint64_t v23 = *(void (***)(void))(a1 + 64);
                if (v23)
                {
                  *(void *)(a1 + 64) = 0;
                  v23[2](v23);
                  _Block_release(v23);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  unint64_t v24 = *(const void **)(a1 + 64);
                  if (v24) {
                    _Block_release(v24);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
        else
        {
          v17(v15, a1, v4);
        }
        if (v18 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v15 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v25 = *(void *)(v15 + 88);
          if (v25)
          {
            uint64_t v26 = v25 - 1;
            *(void *)(v15 + 88) = v26;
            if (!v26)
            {
              int v27 = *(void (***)(void))(v15 + 64);
              if (v27)
              {
                *(void *)(v15 + 64) = 0;
                v27[2](v27);
                _Block_release(v27);
              }
              if (*(unsigned char *)(v15 + 72))
              {
                uint64_t v28 = *(const void **)(v15 + 64);
                if (v28) {
                  _Block_release(v28);
                }
              }
              long long v29 = (char *)v15;
              goto LABEL_56;
            }
          }
        }
      }
    }
  }
}

void nw_protocol_udp_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v29 = "nw_protocol_udp_disconnected";
    uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v18, &type, &v26)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      long long v29 = "nw_protocol_udp_disconnected";
      uint64_t v21 = "%{public}s called with null protocol";
      goto LABEL_66;
    }
    if (!v26)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      long long v29 = "nw_protocol_udp_disconnected";
      uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v23 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (!v23) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      long long v29 = "nw_protocol_udp_disconnected";
      uint64_t v21 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_66;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      long long v29 = "nw_protocol_udp_disconnected";
      __int16 v30 = 2082;
      uint64_t v31 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_67:
    if (!v18) {
      return;
    }
    goto LABEL_68;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v29 = "nw_protocol_udp_disconnected";
    uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v18, &type, &v26)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      long long v29 = "nw_protocol_udp_disconnected";
      uint64_t v21 = "%{public}s called with null udp";
      goto LABEL_66;
    }
    if (!v26)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      long long v29 = "nw_protocol_udp_disconnected";
      uint64_t v21 = "%{public}s called with null udp, backtrace limit exceeded";
      goto LABEL_66;
    }
    unint64_t v24 = (char *)__nw_create_backtrace_string();
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v25 = os_log_type_enabled(v19, type);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        long long v29 = "nw_protocol_udp_disconnected";
        __int16 v30 = 2082;
        uint64_t v31 = v24;
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null udp, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v24);
      if (!v18) {
        return;
      }
LABEL_68:
      __int16 v17 = (nw_protocol *)v18;
LABEL_38:
      free(v17);
      return;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      long long v29 = "nw_protocol_udp_disconnected";
      uint64_t v21 = "%{public}s called with null udp, no backtrace";
LABEL_66:
      _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
      goto LABEL_67;
    }
    goto LABEL_67;
  }
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_17);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  a1[2].output_handler = 0;
  a1[2].handle = 0;
  uint64_t default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
      if (disconnected)
      {
        handle = default_input_handler->handle;
        if (handle == &nw_protocol_ref_counted_handle)
        {
          __int16 v7 = default_input_handler[1].callbacks;
          if (v7) {
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
          }
        }
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v8 = a1[1].callbacks;
          if (v8) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
          }
          disconnected(default_input_handler, a1);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            uint64_t v9 = a1[1].callbacks;
            if (v9)
            {
              BOOL v10 = (nw_protocol_callbacks *)((char *)v9 - 1);
              a1[1].callbacks = v10;
              if (!v10)
              {
                uint64_t v11 = *(void (***)(void))a1[1].flow_id;
                if (v11)
                {
                  *(void *)a1[1].flow_id = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if (a1[1].flow_id[8])
                {
                  uint64_t v12 = *(const void **)a1[1].flow_id;
                  if (v12) {
                    _Block_release(v12);
                  }
                }
                free(a1);
              }
            }
          }
        }
        else
        {
          disconnected(default_input_handler, a1);
        }
        if (handle == &nw_protocol_ref_counted_handle
          && default_input_handler->handle == &nw_protocol_ref_counted_handle)
        {
          __int16 v13 = default_input_handler[1].callbacks;
          if (v13)
          {
            uint64_t v14 = (nw_protocol_callbacks *)((char *)v13 - 1);
            default_input_handler[1].callbacks = v14;
            if (!v14)
            {
              uint64_t v15 = *(void (***)(void))default_input_handler[1].flow_id;
              if (v15)
              {
                *(void *)default_input_handler[1].flow_id = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if (default_input_handler[1].flow_id[8])
              {
                uint64_t v16 = *(const void **)default_input_handler[1].flow_id;
                if (v16) {
                  _Block_release(v16);
                }
              }
              __int16 v17 = default_input_handler;
              goto LABEL_38;
            }
          }
        }
      }
    }
  }
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

int *nw_protocol_udp_identifier()
{
  if (nw_protocol_udp_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
  }
  return &nw_protocol_udp_identifier::identifier;
}

uint64_t udp_validate_cksum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a3 + 1);
  if (v4 == 2) {
    int v5 = (unsigned __int16 *)(a3 + 4);
  }
  else {
    int v5 = (unsigned __int16 *)(a3 + 8);
  }
  if (*(unsigned char *)(a4 + 1) == 2) {
    __int16 v6 = (unsigned __int16 *)(a4 + 4);
  }
  else {
    __int16 v6 = (unsigned __int16 *)(a4 + 8);
  }
  return udp_validate_cksum_internal(a1, a2, v5, v6, v4 == 30, 0);
}

uint64_t nw::zlib_encoder::encode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v9 = (z_stream *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, a3);
  if (v10)
  {
    uint64_t v11 = 0;
    *(void *)(a1 + 32) = v10;
    if (a4) {
      int v12 = 4;
    }
    else {
      int v12 = 0;
    }
    while (1)
    {
      *(_DWORD *)(a1 + 40) = a3;
      int v13 = deflate(v9, v12);
      if (v13)
      {
        int v14 = v13;
        if (v13 != -5)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v18 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = zError(v14);
            *(_DWORD *)buf = 136446466;
            uint64_t v32 = "encode";
            __int16 v33 = 2080;
            uint64_t v34 = (void *)v19;
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s deflate returned %s", buf, 0x16u);
          }
          return -1;
        }
      }
      uint64_t v15 = *(unsigned int *)(a1 + 40);
      uint64_t v16 = (void *)(a3 - v15);
      if (gLogDatapath)
      {
        log = __nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v32 = "encode";
          __int16 v33 = 2048;
          uint64_t v34 = v16;
          _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s writing %zu bytes of compressed data", buf, 0x16u);
        }
        v11 += (uint64_t)v16;
        if (*(_DWORD *)(a1 + 40)) {
          return v11;
        }
      }
      else
      {
        v11 += (uint64_t)v16;
        if (v15) {
          return v11;
        }
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, a3);
      if (!v17) {
        break;
      }
      *(void *)(a1 + 32) = v17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v21, &type, &v29)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "encode";
      unint64_t v24 = "%{public}s called with null out_bytes";
LABEL_33:
      _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
      goto LABEL_34;
    }
    if (!v29)
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "encode";
      unint64_t v24 = "%{public}s called with null out_bytes, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v26 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "encode";
      unint64_t v24 = "%{public}s called with null out_bytes, no backtrace";
      goto LABEL_33;
    }
    if (!v26) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v32 = "encode";
    __int16 v33 = 2082;
    uint64_t v34 = backtrace_string;
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v32 = "encode";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v21, &type, &v29)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    unint64_t v24 = "%{public}s called with null out_bytes";
    goto LABEL_33;
  }
  if (!v29)
  {
    uint64_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    unint64_t v24 = "%{public}s called with null out_bytes, backtrace limit exceeded";
    goto LABEL_33;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  uint64_t v22 = __nwlog_obj();
  os_log_type_t v23 = type;
  BOOL v27 = os_log_type_enabled(v22, type);
  if (!backtrace_string)
  {
    if (!v27) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    unint64_t v24 = "%{public}s called with null out_bytes, no backtrace";
    goto LABEL_33;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v32 = "encode";
    __int16 v33 = 2082;
    uint64_t v34 = backtrace_string;
LABEL_27:
    _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null out_bytes, dumping backtrace:%{public}s", buf, 0x16u);
  }
LABEL_28:
  free(backtrace_string);
LABEL_34:
  if (v21) {
    free(v21);
  }
  return 0;
}

void nw::zlib_encoder::~zlib_encoder(nw::zlib_encoder *this)
{
  *(void *)this = &unk_1ECF609F0;
  deflateEnd((z_streamp)((char *)this + 8));

  JUMPOUT(0x185316230);
}

{
  *(void *)this = &unk_1ECF609F0;
  deflateEnd((z_streamp)((char *)this + 8));
}

uint64_t nw::brotli_encoder::encode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 16) = 0x4000;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, 0x4000);
  if (v8)
  {
    for (uint64_t i = 0; ; i += 0x4000)
    {
      *(void *)(a1 + 8) = v8;
      compression_status v10 = compression_stream_process((compression_stream *)(a1 + 8), a4);
      if (v10)
      {
        if (v10 == COMPRESSION_STATUS_ERROR) {
          return -1;
        }
        uint64_t v11 = *(void *)(a1 + 16);
        return i - v11 + 0x4000;
      }
      uint64_t v11 = *(void *)(a1 + 16);
      if (v11) {
        return i - v11 + 0x4000;
      }
      *(void *)(a1 + 16) = 0x4000;
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, 0x4000);
      if (!v8) {
        break;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136446210;
      uint64_t v15 = "encode";
      goto LABEL_14;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v12 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136446210;
      uint64_t v15 = "encode";
LABEL_14:
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s allocation failed", (uint8_t *)&v14, 0xCu);
    }
  }
  return -1;
}

void nw::brotli_encoder::~brotli_encoder(nw::brotli_encoder *this)
{
  *(void *)this = &unk_1ECF60A40;
  compression_stream_destroy((compression_stream *)((char *)this + 8));

  JUMPOUT(0x185316230);
}

{
  *(void *)this = &unk_1ECF60A40;
  compression_stream_destroy((compression_stream *)((char *)this + 8));
}

uint64_t nw::zlib_decoder::decode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  compression_status v10 = (z_stream *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v11 = 0;
  for (*(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000);
        ;
        *(void *)(a1 + 32) = v14)
  {
    *(_DWORD *)(a1 + 40) = 0x4000;
    int v12 = inflate(v10, 0);
    int v13 = v12;
    if (v12 != -5 && v12)
    {
      if (v12 != 1) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 40)) {
      break;
    }
    if (gLogDatapath)
    {
      log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v33 = "decode";
        __int16 v34 = 2048;
        uint64_t v35 = 0x4000;
        __int16 v36 = 1024;
        int v37 = v13;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s delivering %zu bytes of uncompressed data %d", buf, 0x1Cu);
      }
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000);
    if (!v14)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      __int16 v33 = "decode";
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v30 = 0;
      if (!__nwlog_fault(v21, &type, &v30)) {
        goto LABEL_40;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v33 = "decode";
          unint64_t v24 = "%{public}s called with null out_bytes";
          goto LABEL_39;
        }
        goto LABEL_40;
      }
      if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v33 = "decode";
            __int16 v34 = 2082;
            uint64_t v35 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null out_bytes, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_40;
        }
        if (!v26)
        {
LABEL_40:
          if (v21) {
            free(v21);
          }
          return 0;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "decode";
        unint64_t v24 = "%{public}s called with null out_bytes, no backtrace";
      }
      else
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "decode";
        unint64_t v24 = "%{public}s called with null out_bytes, backtrace limit exceeded";
      }
LABEL_39:
      _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
      goto LABEL_40;
    }
    v11 += 0x4000;
  }
  if (*(_DWORD *)(a1 + 16))
  {
LABEL_13:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = zError(v13);
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "decode";
      __int16 v34 = 2080;
      uint64_t v35 = (uint64_t)v16;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s inflate returned %s", buf, 0x16u);
    }
    uint64_t v17 = -1;
LABEL_22:
    if (a4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "decode";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s truncated data", buf, 0xCu);
      }
    }
    return v17;
  }
LABEL_16:
  if (gLogDatapath)
  {
    BOOL v27 = __nwlog_obj();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "decode";
      __int16 v34 = 2048;
      uint64_t v35 = a3;
      _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s finished processing %zu bytes of compressed data", buf, 0x16u);
    }
  }
  uint64_t v17 = v11 - *(unsigned int *)(a1 + 40) + 0x4000;
  if (v13 != 1) {
    goto LABEL_22;
  }
  if (*(_DWORD *)(a1 + 16))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v33 = "decode";
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s extra data", buf, 0xCu);
    }
  }
  *a5 = 1;
  return v17;
}

void nw::zlib_decoder::~zlib_decoder(nw::zlib_decoder *this)
{
  *(void *)this = &unk_1ECF609C8;
  inflateEnd((z_streamp)((char *)this + 8));

  JUMPOUT(0x185316230);
}

{
  *(void *)this = &unk_1ECF609C8;
  inflateEnd((z_streamp)((char *)this + 8));
}

uint64_t nw::brotli_decoder::decode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 16) = 0x4000;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000);
  if (v10)
  {
    for (uint64_t i = 0; ; i += 0x4000)
    {
      *(void *)(a1 + 8) = v10;
      compression_status v12 = compression_stream_process((compression_stream *)(a1 + 8), 0);
      if (v12) {
        break;
      }
      if (*(void *)(a1 + 16))
      {
        if (a4)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v14 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v16 = 136446210;
            uint64_t v17 = "decode";
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s truncated data", (uint8_t *)&v16, 0xCu);
          }
        }
        return i - *(void *)(a1 + 16) + 0x4000;
      }
      *(void *)(a1 + 16) = 0x4000;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000);
      if (!v10)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v16 = 136446210;
          uint64_t v17 = "decode";
LABEL_18:
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s allocation failed", (uint8_t *)&v16, 0xCu);
        }
        return -1;
      }
    }
    if (v12 == COMPRESSION_STATUS_ERROR) {
      return -1;
    }
    if (v12 == COMPRESSION_STATUS_END) {
      *a5 = 1;
    }
    return i - *(void *)(a1 + 16) + 0x4000;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v13 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    int v16 = 136446210;
    uint64_t v17 = "decode";
    goto LABEL_18;
  }
  return -1;
}

void nw::brotli_decoder::~brotli_decoder(nw::brotli_decoder *this)
{
  *(void *)this = &unk_1ECF60A18;
  compression_stream_destroy((compression_stream *)((char *)this + 8));

  JUMPOUT(0x185316230);
}

{
  *(void *)this = &unk_1ECF60A18;
  compression_stream_destroy((compression_stream *)((char *)this + 8));
}

BOOL nw_decoder_create_gzip()
{
  uint64_t v0 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0xEAFB8F1AuLL);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  int v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(void *)uint64_t v0 = &unk_1ECF609C8;
    *((_DWORD *)v0 + 30) = 31;
    inflateInit2_((z_streamp)(v0 + 8), 31, "1.2.12", 112);
    return (BOOL)v0;
  }
  __break(1u);
  return result;
}

BOOL nw_decoder_create_deflate()
{
  uint64_t v0 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0xEAFB8F1AuLL);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  int v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(void *)uint64_t v0 = &unk_1ECF609C8;
    *((_DWORD *)v0 + 30) = 15;
    inflateInit2_((z_streamp)(v0 + 8), 15, "1.2.12", 112);
    return (BOOL)v0;
  }
  __break(1u);
  return result;
}

BOOL nw_decoder_create_raw_deflate()
{
  uint64_t v0 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0xEAFB8F1AuLL);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  int v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(void *)uint64_t v0 = &unk_1ECF609C8;
    *((_DWORD *)v0 + 30) = -15;
    inflateInit2_((z_streamp)(v0 + 8), -15, "1.2.12", 112);
    return (BOOL)v0;
  }
  __break(1u);
  return result;
}

char *nw_decoder_create_brotli()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (!v0)
  {
    int v3 = __nwlog_obj();
    os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    __int16 v6 = "strict_calloc";
    __int16 v7 = 2048;
    uint64_t v8 = 1;
    __int16 v9 = 2048;
    uint64_t v10 = 48;
    int v4 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v4))
    {
      __break(1u);
      JUMPOUT(0x1835D4538);
    }
    free(v4);
  }
  *(void *)uint64_t v0 = &unk_1ECF60A18;
  if (compression_stream_init((compression_stream *)(v0 + 8), COMPRESSION_STREAM_DECODE, COMPRESSION_BROTLI))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v6 = "brotli_decoder";
      _os_log_impl(&dword_1830D4000, v1, OS_LOG_TYPE_ERROR, "%{public}s init failed", buf, 0xCu);
    }
  }
  return v0;
}

const char *nw_browse_result_get_description(void *a1, int a2)
{
  int v3 = a1;
  int v4 = v3;
  if (v3)
  {
    os_unfair_lock_lock(v3 + 12);
    if (a2)
    {
      int v5 = (const char **)&v4[10];
      if (!*(void *)&v4[10]._os_unfair_lock_opaque)
      {
        BOOL interfaces_description_locked = nw_browse_result_get_interfaces_description_locked((NWConcrete_nw_browse_result *)v4);
        id v7 = *(id *)&v4[2]._os_unfair_lock_opaque;
        logging_description = nw_endpoint_get_logging_description(v7);
        asprintf((char **)&v4[10], "%s@%s", logging_description, (const char *)interfaces_description_locked);
LABEL_8:
        if (interfaces_description_locked) {
          free((void *)interfaces_description_locked);
        }
      }
    }
    else
    {
      int v5 = (const char **)&v4[8];
      if (!*(void *)&v4[8]._os_unfair_lock_opaque)
      {
        BOOL interfaces_description_locked = nw_browse_result_get_interfaces_description_locked((NWConcrete_nw_browse_result *)v4);
        id v7 = *(id *)&v4[2]._os_unfair_lock_opaque;
        description = nw_endpoint_get_description(v7);
        asprintf((char **)&v4[8], "%s@%s", description, (const char *)interfaces_description_locked);
        goto LABEL_8;
      }
    }
    os_unfair_lock_unlock(v4 + 12);
    __int16 v9 = *v5;
    goto LABEL_12;
  }
  __int16 v9 = "<NULL>";
LABEL_12:

  return v9;
}

void sub_1835D4780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_browse_result_get_interfaces_description_locked(NWConcrete_nw_browse_result *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 3;
  uint64_t v2 = *((void *)v1 + 2);
  if (v2) {
    uint64_t v3 = (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 3;
  }
  else {
    uint64_t v3 = 0;
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke;
  void v14[3] = &unk_1E524BAD0;
  v14[4] = &v15;
  v14[5] = v3;
  nw_array_apply((atomic_uchar *)v2, (uint64_t)v14);
  size_t v4 = v16[3];
  if (!v4)
  {
    __int16 v9 = __nwlog_obj();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    int v19 = 136446210;
    os_log_type_t v20 = "strict_malloc";
    uint64_t v10 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v10);
    if (result) {
      goto LABEL_11;
    }
    free(v10);
  }
  int v5 = malloc_type_malloc(v4, 0xF2B69DE5uLL);
  if (v5)
  {
LABEL_6:
    *int v5 = 91;
    __int16 v6 = (atomic_uchar *)*((void *)v1 + 2);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke_2;
    void v13[3] = &unk_1E523D430;
    void v13[4] = &v15;
    v13[5] = v5;
    void v13[6] = v3;
    nw_array_apply(v6, (uint64_t)v13);
    id v7 = v16;
    *((unsigned char *)v5 + v16[3] - 2) = 93;
    *((unsigned char *)v5 + v7[3] - 1) = 0;
    _Block_object_dispose(&v15, 8);

    return (BOOL)v5;
  }
  uint64_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  int v19 = 136446466;
  os_log_type_t v20 = "strict_malloc";
  __int16 v21 = 2048;
  size_t v22 = v4;
  compression_status v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_6;
  }
LABEL_11:
  __break(1u);
  return result;
}

void sub_1835D4A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3) {
    int v5 = (const char *)(a3 + 104);
  }
  else {
    int v5 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += strlen(v5);
  if (*(void *)(a1 + 40) - 1 > a2) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 2;
  }
  return 1;
}

BOOL ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke_2(void *a1, unint64_t a2, void *a3)
{
  int v5 = a3;
  __int16 v6 = v5;
  if (v5) {
    id v7 = v5 + 104;
  }
  else {
    id v7 = 0;
  }
  uint64_t v8 = (unsigned char *)a1[5];
  unint64_t v9 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (v8)
  {
    if (v5) {
      goto LABEL_6;
    }
  }
  else
  {
    __int16 v21 = __nwlog_obj();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    size_t v22 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v22);
    if (result) {
      goto LABEL_52;
    }
    free(v22);
    if (v6)
    {
LABEL_6:
      if (v9) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  uint64_t v23 = __nwlog_obj();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  unint64_t v24 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v24);
  if (result) {
    goto LABEL_52;
  }
  free(v24);
  if (v9)
  {
LABEL_7:
    uint64_t v10 = &v8[v9];
    while (*v8)
    {
      ++v8;
      if (!--v9)
      {
        uint64_t v8 = v10;
        goto LABEL_11;
      }
    }
    if (v6)
    {
      if (v9 >= 2)
      {
LABEL_17:
        uint64_t v14 = 0;
        while (1)
        {
          int v15 = v7[v14];
          v8[v14] = v15;
          if (!v15) {
            goto LABEL_22;
          }
          --v9;
          ++v14;
          if (v9 <= 1)
          {
            v8 += v14;
            break;
          }
        }
      }
    }
    else
    {
      char v29 = __nwlog_obj();
      os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
      char v30 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v30);
      if (result) {
        goto LABEL_52;
      }
      free(v30);
      if (v9 >= 2) {
        goto LABEL_17;
      }
    }
    *uint64_t v8 = 0;
    goto LABEL_22;
  }
LABEL_11:
  if (v8)
  {
    if (v6) {
      goto LABEL_22;
    }
  }
  else
  {
    BOOL v25 = __nwlog_obj();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    BOOL v26 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v26);
    if (result) {
      goto LABEL_52;
    }
    free(v26);
    if (v6) {
      goto LABEL_22;
    }
  }
  uint64_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  compression_status v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (result) {
    goto LABEL_52;
  }
  free(v12);
LABEL_22:
  if (a1[6] - 1 <= a2) {
    goto LABEL_37;
  }
  int v16 = (unsigned char *)a1[5];
  unint64_t v17 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (v16)
  {
    if (v17) {
      goto LABEL_25;
    }
  }
  else
  {
    BOOL v27 = __nwlog_obj();
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    uint64_t v28 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v28);
    if (result) {
      goto LABEL_52;
    }
    free(v28);
    if (v17)
    {
LABEL_25:
      uint64_t v18 = &v16[v17];
      while (*v16)
      {
        ++v16;
        if (!--v17)
        {
          int v16 = v18;
          goto LABEL_29;
        }
      }
      if (v17 >= 2)
      {
        *int v16 = 44;
        if (&asc_183E53265[v17 - 2] == ", ")
        {
          ++v16;
        }
        else
        {
          v16[1] = 32;
          v16 += 2;
        }
      }
      *int v16 = 0;
      goto LABEL_37;
    }
  }
LABEL_29:
  if (v16)
  {
LABEL_37:

    return 1;
  }
  int v19 = __nwlog_obj();
  os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
  os_log_type_t v20 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v20);
  if (!result)
  {
    free(v20);
    goto LABEL_37;
  }
LABEL_52:
  __break(1u);
  return result;
}

NWConcrete_nw_browse_result *nw_browse_result_create(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v2 = a1;
  if (v2)
  {
    uint64_t v3 = [NWConcrete_nw_browse_result alloc];
    id v4 = v2;
    if (!v3)
    {
LABEL_7:

      goto LABEL_8;
    }
    v30.os_log_type_t receiver = v3;
    v30.super_class = (Class)NWConcrete_nw_browse_result;
    id v5 = objc_msgSendSuper2(&v30, sel_init);
    __int16 v6 = (uint64_t *)v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a1);
      BOOL v7 = nw_array_create();
      uint64_t v8 = (void *)v6[2];
      _OWORD v6[2] = v7;

      unint64_t v9 = (void *)v6[3];
      v6[3] = 0;

      id v10 = nw_endpoint_copy_interface(v4);
      if (v10)
      {
        nw_array_append(v6[2], v10);
        nw_endpoint_set_interface(v4, 0);
      }
      uint64_t v3 = v6;

      goto LABEL_7;
    }
    int v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v17, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
            __int16 v33 = 2082;
            __int16 v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
          _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
          _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_44:
    if (v17) {
      free(v17);
    }
    uint64_t v3 = 0;
    goto LABEL_7;
  }
  compression_status v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v32 = "nw_browse_result_create";
  int v13 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v30.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v13, &v30, &type))
  {
    if (LOBYTE(v30.receiver) == 17)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v30.receiver;
      if (os_log_type_enabled(v14, (os_log_type_t)v30.receiver))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_browse_result_create";
        _os_log_impl(&dword_1830D4000, v14, receiver, "%{public}s called with null _endpoint", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v21 = (os_log_type_t)v30.receiver;
      BOOL v22 = os_log_type_enabled(v14, (os_log_type_t)v30.receiver);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v32 = "nw_browse_result_create";
          __int16 v33 = 2082;
          __int16 v34 = v20;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null _endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_38;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_browse_result_create";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null _endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v26 = (os_log_type_t)v30.receiver;
      if (os_log_type_enabled(v14, (os_log_type_t)v30.receiver))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_browse_result_create";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null _endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v13) {
    free(v13);
  }
  uint64_t v3 = 0;
LABEL_8:

  return v3;
}

void sub_1835D56D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_browse_result_get_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_browse_result_get_endpoint";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browse_result_get_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_browse_result_get_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browse_result_get_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browse_result_get_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

nw_endpoint_t nw_browse_result_copy_endpoint(nw_browse_result_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    Class isa = result[1].isa;
    return (nw_endpoint_t)nw_endpoint_copy(isa);
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_browse_result_copy_endpoint";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_browse_result_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_browse_result_copy_endpoint";
          __int16 v15 = 2082;
          int v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_browse_result_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_browse_result_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
  return 0;
}

NWConcrete_nw_browse_result *nw_browse_result_create_mutable_copy(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_endpoint_copy(*((void **)v1 + 1));
    id v4 = nw_browse_result_create(v3);

    uint64_t v5 = v2[2];
    if (!v5 || *(void *)(v5 + 16) == *(void *)(v5 + 24))
    {
      uint64_t v5 = nw_array_create();
    }
    else
    {
      uint64_t v6 = nw_array_create();
      if (v6 != v5)
      {
        uint64_t v7 = v6;
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v6 + 16, *(void ***)(v5 + 16), *(void ***)(v5 + 24), (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 3);
        uint64_t v5 = v7;
      }
    }
    os_log_type_t v8 = (void *)*((void *)v4 + 2);
    *((void *)v4 + 2) = v5;

    uint64_t v9 = v2[3];
    if (v9) {
      nw_txt_record_t v10 = nw_txt_record_create_with_bytes(*(const uint8_t **)(v9 + 8), *(void *)(v9 + 16));
    }
    else {
      nw_txt_record_t v10 = 0;
    }
    char v11 = (void *)*((void *)v4 + 3);
    *((void *)v4 + 3) = v10;

    *((unsigned char *)v4 + 52) &= ~1u;
    goto LABEL_11;
  }
  char v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_28:
  if (v14) {
    free(v14);
  }
  id v4 = 0;
LABEL_11:

  return v4;
}

void sub_1835D5F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browse_result_set_txt_record_object(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (*((unsigned char *)v3 + 52))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s browse_result was marked immutable", buf, 0xCu);
      }
    }
    else
    {
      objc_storeStrong(v3 + 3, a2);
    }
    goto LABEL_7;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_browse_result_set_txt_record_object";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_browse_result_set_txt_record_object";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v7) {
    free(v7);
  }
LABEL_7:
}

nw_txt_record_t nw_browse_result_copy_txt_record_object(nw_browse_result_t result)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_result_t v1 = result;
  nw_browse_result_t v2 = v1;
  if (v1)
  {
    id v3 = v1[3].isa;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

size_t nw_browse_result_get_interfaces_count(nw_browse_result_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    id v3 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_browse_result_get_interfaces_count";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v4, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          char v14 = "nw_browse_result_get_interfaces_count";
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null result", buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_browse_result_get_interfaces_count";
            __int16 v15 = 2082;
            os_log_type_t v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v9)
        {
          *(_DWORD *)buf = 136446210;
          char v14 = "nw_browse_result_get_interfaces_count";
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          char v14 = "nw_browse_result_get_interfaces_count";
          _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  Class isa = result[2].isa;
  if (isa) {
    return (uint64_t)(*((void *)isa + 3) - *((void *)isa + 2)) >> 3;
  }
  return 0;
}

BOOL nw_browse_result_remove_interface(void *a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __int16 v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v16, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null result", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (!v38)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_1830D4000, v17, v33, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_1830D4000, v17, v29, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v29, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    goto LABEL_36;
  }
  if (!v4)
  {
    uint64_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v16, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null interface", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (!v38)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_1830D4000, v17, v34, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_1830D4000, v17, v31, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v31, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
LABEL_36:
    if (!v16)
    {
LABEL_38:
      BOOL v10 = 0;
      goto LABEL_39;
    }
LABEL_37:
    free(v16);
    goto LABEL_38;
  }
  if (*((unsigned char *)v3 + 52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v16, &type, &v38)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = (id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s browse_result was marked immutable", buf, 0xCu);
      }
LABEL_35:

      goto LABEL_36;
    }
    if (!v38)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = (id)gLogObj;
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
        _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s browse_result was marked immutable, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = (id)gLogObj;
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s browse_result was marked immutable, no backtrace", buf, 0xCu);
      }
      goto LABEL_35;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s browse_result was marked immutable, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    if (!v16) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 12);
  os_log_type_t v6 = (void *)*((void *)v3 + 4);
  if (v6)
  {
    free(v6);
    *((void *)v3 + 4) = 0;
  }
  uint64_t v7 = (void *)*((void *)v3 + 5);
  if (v7)
  {
    free(v7);
    *((void *)v3 + 5) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v3 + 12);
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  uint64_t v41 = __Block_byref_object_copy_;
  uint64_t v42 = __Block_byref_object_dispose_;
  id v43 = 0;
  os_log_type_t v8 = (atomic_uchar *)*((void *)v3 + 2);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  _OWORD v35[2] = __nw_browse_result_remove_interface_block_invoke;
  v35[3] = &unk_1E524A2E8;
  id v36 = v5;
  int v37 = buf;
  nw_array_apply(v8, (uint64_t)v35);
  BOOL v9 = *(void **)(*(void *)&buf[8] + 40);
  BOOL v10 = v9 != 0;
  if (v9)
  {
    uint64_t v11 = *((void *)v3 + 2);
    if (!v11 || *(void *)(v11 + 16) == *(void *)(v11 + 24))
    {
      BOOL v12 = nw_array_create();
    }
    else
    {
      BOOL v12 = nw_array_create();
      std::vector<nw_object_wrapper_t>::reserve(v12 + 16, ((uint64_t)(*(void *)(v11 + 24) - *(void *)(v11 + 16)) >> 3) - 1);
      char v14 = *(void ***)(v11 + 16);
      char v13 = *(void ***)(v11 + 24);
      while (v14 != v13)
      {
        if (*v14 != v9) {
          nw_array_append(v12, *v14);
        }
        ++v14;
      }
    }
    BOOL v22 = (void *)*((void *)v3 + 2);
    *((void *)v3 + 2) = v12;
  }
  _Block_object_dispose(buf, 8);

LABEL_39:
  return v10;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

BOOL __nw_browse_result_remove_interface_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = nw_interface_shallow_compare(v5, *(void **)(a1 + 32));
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }

  return !v6;
}

BOOL nw_browse_result_insert_interface(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_browse_result_insert_interface";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v14, &type, &v28)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null result", buf, 0xCu);
      }
      goto LABEL_47;
    }
    if (!v28)
    {
      id v15 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v15 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
      goto LABEL_47;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_browse_result_insert_interface";
      __int16 v32 = 2082;
      os_log_type_t v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v4)
  {
    uint64_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_browse_result_insert_interface";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v14, &type, &v28)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null interface", buf, 0xCu);
      }
LABEL_47:

LABEL_48:
      if (v14) {
        free(v14);
      }
      goto LABEL_14;
    }
    if (!v28)
    {
      id v15 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v15 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
      goto LABEL_47;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_browse_result_insert_interface";
      __int16 v32 = 2082;
      os_log_type_t v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(backtrace_string);
    goto LABEL_48;
  }
  if (*((unsigned char *)v3 + 52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v31 = "nw_browse_result_insert_interface";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s browse_result was marked immutable", buf, 0xCu);
    }

LABEL_14:
    BOOL v10 = 0;
    goto LABEL_15;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 12);
  BOOL v6 = (void *)*((void *)v3 + 4);
  if (v6)
  {
    free(v6);
    *((void *)v3 + 4) = 0;
  }
  uint64_t v7 = (void *)*((void *)v3 + 5);
  if (v7)
  {
    free(v7);
    *((void *)v3 + 5) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v3 + 12);
  os_log_type_t v8 = (atomic_uchar *)*((void *)v3 + 2);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __nw_browse_result_insert_interface_block_invoke;
  v26[3] = &unk_1E524AE18;
  id v9 = v5;
  id v27 = v9;
  BOOL v10 = nw_array_apply(v8, (uint64_t)v26);
  if (v10) {
    nw_array_append(*((void *)v3 + 2), v9);
  }

LABEL_15:
  return v10;
}

BOOL __nw_browse_result_insert_interface_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return !nw_interface_shallow_compare(a3, *(void **)(a1 + 32));
}

nw_browse_result_change_t nw_browse_result_get_changes(nw_browse_result_t old_result, nw_browse_result_t new_result)
{
  unint64_t v3 = old_result;
  unint64_t v4 = new_result;
  id v5 = (void *)v4;
  if (v3 | v4)
  {
    if (v3 || !v4)
    {
      if (!v3 || v4)
      {
        uint64_t v7 = (id)v3;
        os_log_type_t v8 = v5;
        interfaces_size_t count = nw_browse_result_get_interfaces_count(v7);
        size_t v10 = nw_browse_result_get_interfaces_count(v8);
        if (interfaces_count >= v10)
        {
          if (interfaces_count <= v10)
          {
            if (interfaces_count == v10)
            {
              nw_browse_result_copy_interfaces((NWConcrete_nw_browse_result *)v7);
              BOOL v12 = (atomic_uchar *)objc_claimAutoreleasedReturnValue();
              v21[0] = MEMORY[0x1E4F143A8];
              v21[1] = 3221225472;
              void v21[2] = __nw_browse_result_get_changes_block_invoke;
              v21[3] = &unk_1E524AE18;
              os_log_type_t v22 = v8;
              BOOL v13 = nw_array_apply(v12, (uint64_t)v21);

              if (v13) {
                uint64_t v11 = 0;
              }
              else {
                uint64_t v11 = 24;
              }
            }
            else
            {
              uint64_t v11 = 0;
            }
          }
          else
          {
            uint64_t v11 = 16;
          }
        }
        else
        {
          uint64_t v11 = 8;
        }
        char v14 = nw_browse_result_copy_txt_record_object(v7);
        id v15 = nw_browse_result_copy_txt_record_object(v8);
        BOOL is_equal = nw_txt_record_is_equal(v14, v15);
        endpoint = nw_browse_result_get_endpoint(v7);
        nw_endpoint_type_t type = nw_endpoint_get_type(endpoint);
        unint64_t v19 = v11 | 0x20;
        if (is_equal) {
          unint64_t v19 = v11;
        }
        if (type == (nw_endpoint_type_url|nw_endpoint_type_host)) {
          v19 |= 0x22uLL;
        }
        if (v19 <= 1) {
          nw_browse_result_change_t v6 = 1;
        }
        else {
          nw_browse_result_change_t v6 = v19;
        }
      }
      else
      {
        nw_browse_result_change_t v6 = 4;
      }
    }
    else
    {
      nw_browse_result_change_t v6 = 2;
    }
  }
  else
  {
    nw_browse_result_change_t v6 = 1;
  }

  return v6;
}

void sub_1835D78FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_browse_result_copy_interfaces(NWConcrete_nw_browse_result *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_result_t v1 = a1;
  nw_browse_result_t v2 = v1;
  if (v1)
  {
    id v3 = *((id *)v1 + 2);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_result_copy_interfaces";
  nw_browse_result_change_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_interfaces";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_result_copy_interfaces";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_interfaces";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_interfaces";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

BOOL __nw_browse_result_get_changes_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_browse_result_copy_interfaces(*(NWConcrete_nw_browse_result **)(a1 + 32));
  id v5 = (atomic_uchar *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __nw_browse_result_get_changes_block_invoke_2;
  void v9[3] = &unk_1E524AE18;
  id v6 = v4;
  id v10 = v6;
  BOOL v7 = !nw_array_apply(v5, (uint64_t)v9);

  return v7;
}

BOOL __nw_browse_result_get_changes_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return !nw_interface_shallow_compare(*(void **)(a1 + 32), a3);
}

void nw_browse_result_enumerate_interfaces(nw_browse_result_t result, nw_browse_result_enumerate_interface_t enumerator)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nw_browse_result_t v3 = result;
  nw_browse_result_enumerate_interface_t v4 = enumerator;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_browse_result_enumerate_interfaces";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_browse_result_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_browse_result_enumerate_interfaces";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_browse_result_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_browse_result_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    Class isa = v3[2].isa;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    void v22[2] = __nw_browse_result_enumerate_interfaces_block_invoke;
    void v22[3] = &unk_1E524AE90;
    id v23 = v4;
    BOOL v7 = isa;
    nw_array_apply(v7, (uint64_t)v22);

    goto LABEL_4;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v27 = "nw_browse_result_enumerate_interfaces";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_browse_result_enumerate_interfaces";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    id v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_browse_result_enumerate_interfaces";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  id v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_browse_result_enumerate_interfaces";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    id v27 = "nw_browse_result_enumerate_interfaces";
    __int16 v28 = 2082;
    os_log_type_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_browse_result_enumerate_interfaces_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t nw_browse_result_mark_immutable(uint64_t result)
{
  if (result) {
    *(unsigned char *)(result + 52) |= 1u;
  }
  return result;
}

void nw_browse_result_set_discovered_from_path(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_browse_result_enumerate_interface_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 52) = *((unsigned char *)v3 + 52) & 0xFD | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_browse_result_set_discovered_from_path";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_discovered_from_path";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_browse_result_set_discovered_from_path";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_discovered_from_path";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_discovered_from_path";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_browse_result_get_discovered_from_path(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_result_t v1 = a1;
  nw_browse_result_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[52] >> 1) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_browse_result_get_discovered_from_path";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_browse_result_get_discovered_from_path";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_browse_result_get_discovered_from_path";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_browse_result_get_discovered_from_path";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_browse_result_get_discovered_from_path";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_browse_result_get_change_description(uint64_t a1)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  nw_browse_result_t v2 = (char *)malloc_type_calloc(0x6BuLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2)
  {
    if (a1)
    {
      if ((a1 & 1) == 0)
      {
        if ((a1 & 2) == 0) {
          goto LABEL_5;
        }
        goto LABEL_16;
      }
LABEL_224:
      uint64_t v104 = 0;
      unint64_t v105 = 107;
      while (1)
      {
        os_log_type_t v106 = &v2[v104];
        if (!v2[v104]) {
          break;
        }
        ++v104;
        if (!--v105) {
          goto LABEL_235;
        }
      }
      if (v105 < 2)
      {
LABEL_234:
        char *v106 = 0;
      }
      else
      {
        unint64_t v107 = v105 - 2;
        uint64_t v108 = 106 - v104;
        unint64_t v109 = 105 - v104;
        if (v109 >= 0xB) {
          unint64_t v109 = 11;
        }
        memcpy(v106, "<identical>", v109 + 1);
        os_log_type_t v106 = v2 + 106;
        while (v107 <= 0xA)
        {
          if (!--v108) {
            goto LABEL_234;
          }
        }
      }
LABEL_235:
      if (a1 != 1)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v110 = (id)gLogObj;
        if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v140 = "nw_browse_result_get_change_description";
          __int16 v141 = 2048;
          uint64_t v142 = a1;
          _os_log_impl(&dword_1830D4000, v110, OS_LOG_TYPE_ERROR, "%{public}s unexpected value for change %llu", buf, 0x16u);
        }
      }
      return (BOOL)v2;
    }
LABEL_211:
    uint64_t v97 = 0;
    unint64_t v98 = 107;
    while (1)
    {
      uint64_t v91 = &v2[v97];
      if (!v2[v97]) {
        break;
      }
      ++v97;
      if (!--v98) {
        return (BOOL)v2;
      }
    }
    if (v98 >= 2)
    {
      unint64_t v99 = v98 - 2;
      uint64_t v100 = 106 - v97;
      unint64_t v101 = 105 - v97;
      if (v101 >= 9) {
        unint64_t v101 = 9;
      }
      memcpy(v91, "<invalid>", v101 + 1);
      uint64_t v91 = v2 + 106;
      while (v99 <= 8)
      {
        if (!--v100) {
          goto LABEL_221;
        }
      }
      return (BOOL)v2;
    }
    goto LABEL_221;
  }
  nw_browse_result_enumerate_interface_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v140 = "strict_calloc";
  __int16 v141 = 2048;
  uint64_t v142 = 107;
  __int16 v143 = 2048;
  uint64_t v144 = 1;
  char v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (result) {
    goto LABEL_268;
  }
  free(v5);
  if (!a1)
  {
    v95 = __nwlog_obj();
    os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    uint64_t v96 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v96);
    if (result) {
      goto LABEL_268;
    }
    free(v96);
    goto LABEL_211;
  }
  if (a1)
  {
    v102 = __nwlog_obj();
    os_log_type_enabled(v102, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    int v103 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v103);
    if (result) {
      goto LABEL_268;
    }
    free(v103);
    goto LABEL_224;
  }
  if ((a1 & 2) == 0)
  {
LABEL_5:
    char v3 = 0;
    if ((a1 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
  BOOL v7 = __nwlog_obj();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v140 = "_strict_strlcat";
  os_log_type_t v8 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v8);
  if (result) {
    goto LABEL_268;
  }
  free(v8);
LABEL_16:
  uint64_t v9 = 0;
  unint64_t v10 = 107;
  while (1)
  {
    BOOL v11 = &v2[v9];
    if (!v2[v9]) {
      break;
    }
    ++v9;
    if (!--v10) {
      goto LABEL_28;
    }
  }
  if (v10 < 2)
  {
LABEL_27:
    *BOOL v11 = 0;
  }
  else
  {
    unint64_t v12 = v10 - 2;
    uint64_t v13 = 106 - v9;
    if (v9 == 105) {
      size_t v14 = 1;
    }
    else {
      size_t v14 = 2;
    }
    memcpy(v11, "<", v14);
    BOOL v11 = v2 + 106;
    while (!v12)
    {
      if (!--v13) {
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  if (!v2)
  {
    v113 = __nwlog_obj();
    os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    int v114 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v114);
    if (result) {
      goto LABEL_268;
    }
    free(v114);
  }
  uint64_t v15 = 0;
  unint64_t v16 = 107;
  while (1)
  {
    __int16 v17 = &v2[v15];
    if (!v2[v15]) {
      break;
    }
    ++v15;
    if (!--v16) {
      goto LABEL_40;
    }
  }
  if (v16 < 2)
  {
LABEL_39:
    *__int16 v17 = 0;
  }
  else
  {
    unint64_t v18 = v16 - 2;
    uint64_t v19 = 106 - v15;
    unint64_t v20 = 105 - v15;
    if (v20 >= 0xC) {
      unint64_t v20 = 12;
    }
    memcpy(v17, "result_added", v20 + 1);
    __int16 v17 = v2 + 106;
    while (v18 <= 0xB)
    {
      if (!--v19) {
        goto LABEL_39;
      }
    }
  }
LABEL_40:
  char v3 = 1;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_80;
  }
LABEL_41:
  if (v3)
  {
    if (!v2)
    {
      v123 = __nwlog_obj();
      os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      uint64_t v140 = "_strict_strlcat";
      uint64_t v124 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v124);
      if (result) {
        goto LABEL_268;
      }
      free(v124);
    }
    uint64_t v21 = 0;
    unint64_t v22 = 107;
    while (1)
    {
      id v23 = &v2[v21];
      if (!v2[v21]) {
        break;
      }
      ++v21;
      if (!--v22) {
        goto LABEL_67;
      }
    }
    if (v22 >= 2)
    {
      unint64_t v26 = v22 - 2;
      uint64_t v27 = 106 - v21;
      unint64_t v28 = 105 - v21;
      if (v28 >= 2) {
        unint64_t v28 = 2;
      }
      memcpy(v23, ", ", v28 + 1);
      id v23 = v2 + 106;
      while (v26 <= 1)
      {
        if (!--v27) {
          goto LABEL_66;
        }
      }
      goto LABEL_67;
    }
LABEL_66:
    *id v23 = 0;
    goto LABEL_67;
  }
  if (!v2)
  {
    uint64_t v125 = __nwlog_obj();
    os_log_type_enabled(v125, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    uint64_t v126 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v126);
    if (result) {
      goto LABEL_268;
    }
    free(v126);
  }
  uint64_t v24 = 0;
  unint64_t v25 = 107;
  while (1)
  {
    id v23 = &v2[v24];
    if (!v2[v24]) {
      break;
    }
    ++v24;
    if (!--v25) {
      goto LABEL_67;
    }
  }
  if (v25 < 2) {
    goto LABEL_66;
  }
  unint64_t v29 = v25 - 2;
  uint64_t v30 = 106 - v24;
  if (v24 == 105) {
    size_t v31 = 1;
  }
  else {
    size_t v31 = 2;
  }
  memcpy(v23, "<", v31);
  id v23 = v2 + 106;
  while (!v29)
  {
    if (!--v30) {
      goto LABEL_66;
    }
  }
LABEL_67:
  if (!v2)
  {
    uint64_t v115 = __nwlog_obj();
    os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    unint64_t v116 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v116);
    if (result) {
      goto LABEL_268;
    }
    free(v116);
  }
  uint64_t v32 = 0;
  unint64_t v33 = 107;
  while (1)
  {
    uint64_t v34 = &v2[v32];
    if (!v2[v32]) {
      break;
    }
    ++v32;
    if (!--v33) {
      goto LABEL_79;
    }
  }
  if (v33 < 2)
  {
LABEL_78:
    *uint64_t v34 = 0;
  }
  else
  {
    unint64_t v35 = v33 - 2;
    uint64_t v36 = 106 - v32;
    unint64_t v37 = 105 - v32;
    if (v37 >= 0xE) {
      unint64_t v37 = 14;
    }
    memcpy(v34, "result_removed", v37 + 1);
    uint64_t v34 = v2 + 106;
    while (v35 <= 0xD)
    {
      if (!--v36) {
        goto LABEL_78;
      }
    }
  }
LABEL_79:
  char v3 = 1;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_119:
    if (v3)
    {
      if (!v2)
      {
        uint64_t v131 = __nwlog_obj();
        os_log_type_enabled(v131, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        uint64_t v140 = "_strict_strlcat";
        v132 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v132);
        if (result) {
          goto LABEL_268;
        }
        free(v132);
      }
      uint64_t v55 = 0;
      unint64_t v56 = 107;
      while (1)
      {
        uint64_t v57 = &v2[v55];
        if (!v2[v55]) {
          break;
        }
        ++v55;
        if (!--v56) {
          goto LABEL_145;
        }
      }
      if (v56 >= 2)
      {
        unint64_t v60 = v56 - 2;
        uint64_t v61 = 106 - v55;
        unint64_t v62 = 105 - v55;
        if (v62 >= 2) {
          unint64_t v62 = 2;
        }
        memcpy(v57, ", ", v62 + 1);
        uint64_t v57 = v2 + 106;
        while (v60 <= 1)
        {
          if (!--v61) {
            goto LABEL_144;
          }
        }
        goto LABEL_145;
      }
    }
    else
    {
      if (!v2)
      {
        uint64_t v133 = __nwlog_obj();
        os_log_type_enabled(v133, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        uint64_t v140 = "_strict_strlcat";
        unint64_t v134 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v134);
        if (result) {
          goto LABEL_268;
        }
        free(v134);
      }
      uint64_t v58 = 0;
      unint64_t v59 = 107;
      while (1)
      {
        uint64_t v57 = &v2[v58];
        if (!v2[v58]) {
          break;
        }
        ++v58;
        if (!--v59) {
          goto LABEL_145;
        }
      }
      if (v59 >= 2)
      {
        unint64_t v63 = v59 - 2;
        uint64_t v64 = 106 - v58;
        if (v58 == 105) {
          size_t v65 = 1;
        }
        else {
          size_t v65 = 2;
        }
        memcpy(v57, "<", v65);
        uint64_t v57 = v2 + 106;
        while (!v63)
        {
          if (!--v64) {
            goto LABEL_144;
          }
        }
LABEL_145:
        if (!v2)
        {
          uint64_t v119 = __nwlog_obj();
          os_log_type_enabled(v119, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          uint64_t v140 = "_strict_strlcat";
          uint64_t v120 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v120);
          if (result) {
            goto LABEL_268;
          }
          free(v120);
        }
        uint64_t v66 = 0;
        unint64_t v67 = 107;
        while (1)
        {
          uint64_t v68 = &v2[v66];
          if (!v2[v66]) {
            break;
          }
          ++v66;
          if (!--v67) {
            goto LABEL_157;
          }
        }
        if (v67 < 2)
        {
LABEL_156:
          *uint64_t v68 = 0;
        }
        else
        {
          unint64_t v69 = v67 - 2;
          uint64_t v70 = 106 - v66;
          unint64_t v71 = 105 - v66;
          if (v71 >= 0x11) {
            unint64_t v71 = 17;
          }
          memcpy(v68, "interface_removed", v71 + 1);
          uint64_t v68 = v2 + 106;
          while (v69 <= 0x10)
          {
            if (!--v70) {
              goto LABEL_156;
            }
          }
        }
LABEL_157:
        char v3 = 1;
        if ((a1 & 0x20) == 0) {
          goto LABEL_196;
        }
LABEL_158:
        if (v3)
        {
          if (!v2)
          {
            v135 = __nwlog_obj();
            os_log_type_enabled(v135, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            uint64_t v140 = "_strict_strlcat";
            v136 = (void *)_os_log_send_and_compose_impl();

            BOOL result = __nwlog_abort((uint64_t)v136);
            if (result) {
              goto LABEL_268;
            }
            free(v136);
          }
          uint64_t v72 = 0;
          unint64_t v73 = 107;
          while (1)
          {
            uint64_t v74 = &v2[v72];
            if (!v2[v72]) {
              break;
            }
            ++v72;
            if (!--v73) {
              goto LABEL_184;
            }
          }
          if (v73 >= 2)
          {
            unint64_t v77 = v73 - 2;
            uint64_t v78 = 106 - v72;
            unint64_t v79 = 105 - v72;
            if (v79 >= 2) {
              unint64_t v79 = 2;
            }
            memcpy(v74, ", ", v79 + 1);
            uint64_t v74 = v2 + 106;
            while (v77 <= 1)
            {
              if (!--v78) {
                goto LABEL_183;
              }
            }
            goto LABEL_184;
          }
        }
        else
        {
          if (!v2)
          {
            v137 = __nwlog_obj();
            os_log_type_enabled(v137, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            uint64_t v140 = "_strict_strlcat";
            v138 = (void *)_os_log_send_and_compose_impl();

            BOOL result = __nwlog_abort((uint64_t)v138);
            if (result) {
              goto LABEL_268;
            }
            free(v138);
          }
          uint64_t v75 = 0;
          unint64_t v76 = 107;
          while (1)
          {
            uint64_t v74 = &v2[v75];
            if (!v2[v75]) {
              break;
            }
            ++v75;
            if (!--v76) {
              goto LABEL_184;
            }
          }
          if (v76 >= 2)
          {
            unint64_t v80 = v76 - 2;
            uint64_t v81 = 106 - v75;
            if (v75 == 105) {
              size_t v82 = 1;
            }
            else {
              size_t v82 = 2;
            }
            memcpy(v74, "<", v82);
            uint64_t v74 = v2 + 106;
            while (!v80)
            {
              if (!--v81) {
                goto LABEL_183;
              }
            }
            goto LABEL_184;
          }
        }
LABEL_183:
        *uint64_t v74 = 0;
LABEL_184:
        if (!v2)
        {
          uint64_t v121 = __nwlog_obj();
          os_log_type_enabled(v121, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          uint64_t v140 = "_strict_strlcat";
          v122 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v122);
          if (result) {
            goto LABEL_268;
          }
          free(v122);
        }
        uint64_t v83 = 0;
        unint64_t v84 = 107;
        while (1)
        {
          uint64_t v85 = &v2[v83];
          if (!v2[v83]) {
            break;
          }
          ++v83;
          if (!--v84) {
            goto LABEL_196;
          }
        }
        if (v84 < 2)
        {
LABEL_195:
          *uint64_t v85 = 0;
        }
        else
        {
          unint64_t v86 = v84 - 2;
          uint64_t v87 = 106 - v83;
          unint64_t v88 = 105 - v83;
          if (v88 >= 0x12) {
            unint64_t v88 = 18;
          }
          memcpy(v85, "txt_record_changed", v88 + 1);
          uint64_t v85 = v2 + 106;
          while (v86 <= 0x11)
          {
            if (!--v87) {
              goto LABEL_195;
            }
          }
        }
        goto LABEL_196;
      }
    }
LABEL_144:
    *uint64_t v57 = 0;
    goto LABEL_145;
  }
LABEL_80:
  if (v3)
  {
    if (!v2)
    {
      uint64_t v127 = __nwlog_obj();
      os_log_type_enabled(v127, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      uint64_t v140 = "_strict_strlcat";
      v128 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v128);
      if (result) {
        goto LABEL_268;
      }
      free(v128);
    }
    uint64_t v38 = 0;
    unint64_t v39 = 107;
    while (1)
    {
      os_log_type_t v40 = &v2[v38];
      if (!v2[v38]) {
        break;
      }
      ++v38;
      if (!--v39) {
        goto LABEL_106;
      }
    }
    if (v39 >= 2)
    {
      unint64_t v43 = v39 - 2;
      uint64_t v44 = 106 - v38;
      unint64_t v45 = 105 - v38;
      if (v45 >= 2) {
        unint64_t v45 = 2;
      }
      memcpy(v40, ", ", v45 + 1);
      os_log_type_t v40 = v2 + 106;
      while (v43 <= 1)
      {
        if (!--v44) {
          goto LABEL_105;
        }
      }
      goto LABEL_106;
    }
LABEL_105:
    *os_log_type_t v40 = 0;
    goto LABEL_106;
  }
  if (!v2)
  {
    unint64_t v129 = __nwlog_obj();
    os_log_type_enabled(v129, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    v130 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v130);
    if (result) {
      goto LABEL_268;
    }
    free(v130);
  }
  uint64_t v41 = 0;
  unint64_t v42 = 107;
  while (1)
  {
    os_log_type_t v40 = &v2[v41];
    if (!v2[v41]) {
      break;
    }
    ++v41;
    if (!--v42) {
      goto LABEL_106;
    }
  }
  if (v42 < 2) {
    goto LABEL_105;
  }
  unint64_t v46 = v42 - 2;
  uint64_t v47 = 106 - v41;
  if (v41 == 105) {
    size_t v48 = 1;
  }
  else {
    size_t v48 = 2;
  }
  memcpy(v40, "<", v48);
  os_log_type_t v40 = v2 + 106;
  while (!v46)
  {
    if (!--v47) {
      goto LABEL_105;
    }
  }
LABEL_106:
  if (!v2)
  {
    uint64_t v117 = __nwlog_obj();
    os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    uint64_t v118 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v118);
    if (result) {
      goto LABEL_268;
    }
    free(v118);
  }
  uint64_t v49 = 0;
  unint64_t v50 = 107;
  while (1)
  {
    __int16 v51 = &v2[v49];
    if (!v2[v49]) {
      break;
    }
    ++v49;
    if (!--v50) {
      goto LABEL_118;
    }
  }
  if (v50 < 2)
  {
LABEL_117:
    *__int16 v51 = 0;
  }
  else
  {
    unint64_t v52 = v50 - 2;
    uint64_t v53 = 106 - v49;
    unint64_t v54 = 105 - v49;
    if (v54 >= 0xF) {
      unint64_t v54 = 15;
    }
    memcpy(v51, "interface_added", v54 + 1);
    __int16 v51 = v2 + 106;
    while (v52 <= 0xE)
    {
      if (!--v53) {
        goto LABEL_117;
      }
    }
  }
LABEL_118:
  char v3 = 1;
  if ((a1 & 0x10) != 0) {
    goto LABEL_119;
  }
LABEL_8:
  if ((a1 & 0x20) != 0) {
    goto LABEL_158;
  }
LABEL_196:
  if (v2)
  {
LABEL_197:
    uint64_t v89 = 0;
    unint64_t v90 = 107;
    while (1)
    {
      uint64_t v91 = &v2[v89];
      if (!v2[v89]) {
        break;
      }
      ++v89;
      if (!--v90) {
        return (BOOL)v2;
      }
    }
    if (v90 >= 2)
    {
      unint64_t v92 = v90 - 2;
      uint64_t v93 = 106 - v89;
      if (v89 == 105) {
        size_t v94 = 1;
      }
      else {
        size_t v94 = 2;
      }
      memcpy(v91, ">", v94);
      uint64_t v91 = v2 + 106;
      while (!v92)
      {
        if (!--v93) {
          goto LABEL_221;
        }
      }
      return (BOOL)v2;
    }
LABEL_221:
    *uint64_t v91 = 0;
    return (BOOL)v2;
  }
  __int16 v111 = __nwlog_obj();
  os_log_type_enabled(v111, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v140 = "_strict_strlcat";
  uint64_t v112 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v112);
  if (!result)
  {
    free(v112);
    goto LABEL_197;
  }
LABEL_268:
  __break(1u);
  return result;
}

void sub_1835DAA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_ws_ping_request *nw_ws_ping_request_create(void *a1, void *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  if (v6)
  {
    uint64_t v9 = [NWConcrete_nw_ws_ping_request alloc];
    id v10 = v6;
    id v11 = v7;
    id v12 = v8;
    if (!v9)
    {
LABEL_5:

      goto LABEL_6;
    }
    v35.os_log_type_t receiver = v9;
    v35.super_class = (Class)NWConcrete_nw_ws_ping_request;
    uint64_t v13 = (NWConcrete_nw_ws_ping_request *)objc_msgSendSuper2(&v35, sel_init);
    uint64_t v9 = v13;
    if (v13)
    {
      objc_storeStrong((id *)&v13->contents, a1);
      objc_storeStrong((id *)&v9->client_queue, a2);
      size_t v14 = _Block_copy(v12);
      id pong_handler = v9->pong_handler;
      v9->id pong_handler = v14;

      goto LABEL_5;
    }
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
    unint64_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v22, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v23 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
            __int16 v38 = 2082;
            unint64_t v39 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v29, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
          _os_log_impl(&dword_1830D4000, v23, v29, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v23 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
          _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (v22) {
      free(v22);
    }
    uint64_t v9 = 0;
    goto LABEL_5;
  }
  __int16 v17 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v37 = "nw_ws_ping_request_create";
  unint64_t v18 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v35.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v18, &v35, &type))
  {
    if (LOBYTE(v35.receiver) == 17)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v35.receiver;
      if (os_log_type_enabled(v19, (os_log_type_t)v35.receiver))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v37 = "nw_ws_ping_request_create";
        _os_log_impl(&dword_1830D4000, v19, receiver, "%{public}s called with null contents", buf, 0xCu);
      }
    }
    else if (type)
    {
      unint64_t v25 = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v26 = (os_log_type_t)v35.receiver;
      BOOL v27 = os_log_type_enabled(v19, (os_log_type_t)v35.receiver);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v37 = "nw_ws_ping_request_create";
          __int16 v38 = 2082;
          unint64_t v39 = v25;
          _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null contents, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
        goto LABEL_36;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v37 = "nw_ws_ping_request_create";
        _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null contents, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v31 = (os_log_type_t)v35.receiver;
      if (os_log_type_enabled(v19, (os_log_type_t)v35.receiver))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v37 = "nw_ws_ping_request_create";
        _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null contents, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_36:
  if (v18) {
    free(v18);
  }
  uint64_t v9 = 0;
LABEL_6:

  return v9;
}

void sub_1835DB440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_ws_ping_request_copy_client_queue(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_result_t v1 = a1;
  nw_browse_result_t v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null ping_request", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null ping_request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null ping_request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null ping_request, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void *nw_ws_ping_request_copy_pong_handler(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_result_t v1 = a1;
  nw_browse_result_t v2 = v1;
  if (v1)
  {
    id v3 = _Block_copy(v1[3]);
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null ping_request", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null ping_request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null ping_request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null ping_request, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_shoes_metadata_copy_remote_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = *((id *)v1 + 1);

    if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
    }
    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_shoes_get_definition(void)::proxy_definition))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      uint64_t v18 = 0;
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      void v14[2] = __nw_shoes_metadata_copy_remote_endpoint_block_invoke;
      void v14[3] = &unk_1E523A300;
      v14[4] = buf;
      id v3 = (void **)*((void *)v1 + 4);
      if (v3)
      {
        __nw_shoes_metadata_copy_remote_endpoint_block_invoke((uint64_t)v14, v3);
        uint64_t v4 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v4 = 0;
      }
      _Block_object_dispose(buf, 8);
      return v4;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s metadata must be shoes";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s metadata must be shoes, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s metadata must be shoes, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v12 = "%{public}s metadata must be shoes, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v6, &type, &v15)) {
    goto LABEL_37;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v12 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  id v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
    uint64_t v9 = "%{public}s called with null metadata";
LABEL_36:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t __nw_shoes_metadata_copy_remote_endpoint_block_invoke(uint64_t a1, void **a2)
{
  if (*a2) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = os_retain(*a2);
  }
  return 1;
}

BOOL ___ZL32nw_protocol_shoes_get_definitionv_block_invoke()
{
  if (nw_protocol_shoes_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_shoes_identifier::onceToken, &__block_literal_global_325);
  }
  nw_protocol_shoes_get_definition(void)::proxy_definition = (uint64_t)nw_protocol_definition_create_with_identifier((long long *)&g_shoes_protocol_identifier);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_shoes_get_definition(void)::proxy_definition, (uint64_t)nw_shoes_allocate_metadata, (uint64_t)nw_shoes_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator((void *)nw_protocol_shoes_get_definition(void)::proxy_definition, (uint64_t)nw_shoes_compare_metadata);
  nw_protocol_definition_set_is_proxy((void *)nw_protocol_shoes_get_definition(void)::proxy_definition);
  uint64_t v0 = (void *)nw_protocol_shoes_get_definition(void)::proxy_definition;

  return nw_protocol_register_handle((uint64_t)&g_shoes_protocol_identifier, v0, (uint64_t)nw_protocol_shoes_create, 0);
}

BOOL nw_protocol_shoes_create(const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  char v5 = malloc_type_calloc(1uLL, 0xF0uLL, 0xEAFB8F1AuLL);
  if (!v5)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    uint64_t v9 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v9);
  }
  long long v5[2] = &g_shoes_protocol_identifier;
  v5[3] = &g_shoes_protocol_callbacks;
  v5[5] = v5;
  if (a3) {
    id v6 = os_retain(a3);
  }
  else {
    id v6 = 0;
  }
  v5[13] = v6;
  return (BOOL)v5;
}

uint64_t nw_shoes_compare_metadata(uint64_t a1, void **a2, void **a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_shoes_compare_metadata";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_shoes_compare_metadata";
      uint64_t v9 = "%{public}s called with null handle1";
      goto LABEL_33;
    }
    if (!v14)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_shoes_compare_metadata";
      uint64_t v9 = "%{public}s called with null handle1, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_shoes_compare_metadata";
      uint64_t v9 = "%{public}s called with null handle1, no backtrace";
      goto LABEL_33;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v17 = "nw_shoes_compare_metadata";
      __int16 v18 = 2082;
      uint64_t v19 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handle1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v6) {
      return 0;
    }
LABEL_35:
    free(v6);
    return 0;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_shoes_compare_metadata";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_shoes_compare_metadata";
      uint64_t v9 = "%{public}s called with null handle2";
      goto LABEL_33;
    }
    if (!v14)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_shoes_compare_metadata";
      uint64_t v9 = "%{public}s called with null handle2, backtrace limit exceeded";
      goto LABEL_33;
    }
    os_log_type_t v12 = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v17 = "nw_shoes_compare_metadata";
        __int16 v18 = 2082;
        uint64_t v19 = v12;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handle2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v12);
      if (!v6) {
        return 0;
      }
      goto LABEL_35;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_shoes_compare_metadata";
      uint64_t v9 = "%{public}s called with null handle2, no backtrace";
LABEL_33:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  id v3 = *a2;
  uint64_t v4 = *a3;

  return nw_endpoint_is_equal(v3, v4, 31);
}

void nw_shoes_deallocate_metadata(nw_protocol_definition *a1, void **a2)
{
  if (*a2)
  {
    os_release(*a2);
    *a2 = 0;
  }
  id v3 = a2[1];
  if (v3) {
    os_release(v3);
  }

  free(a2);
}

BOOL nw_shoes_allocate_metadata(nw_protocol_definition *a1)
{
  id v1 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v1) {
    return (BOOL)v1;
  }
  id v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

double __nw_protocol_shoes_identifier_block_invoke()
{
  unk_1E8F78F26 = 0;
  unk_1E8F78F1E = 0;
  word_1E8F78F36 = 0;
  unk_1E8F78F2E = 0;
  strcpy((char *)&g_shoes_protocol_identifier, "shoes");
  *(void *)&double result = 0x100000005;
  qword_1E8F78F38 = 0x100000005;
  qword_1E8F78F50 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F78F88 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F78FF8 = (uint64_t)nw_protocol_default_input_finished;
  qword_1E8F79000 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F79048 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F79038 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F78FA8 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F78FE8 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F79008 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79010 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F78F60 = (uint64_t)nw_protocol_default_disconnect;
  qword_1E8F78F70 = (uint64_t)nw_protocol_default_disconnected;
  qword_1E8F79040 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F78FF0 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F78FD0 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F78FD8 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F78FE0 = (uint64_t)nw_protocol_default_notify;
  qword_1E8F79028 = (uint64_t)nw_protocol_default_add_listen_handler;
  qword_1E8F79030 = (uint64_t)nw_protocol_default_remove_listen_handler;
  g_shoes_protocol_callbacks = (uint64_t)nw_protocol_shoes_add_input_handler;
  qword_1E8F78F48 = (uint64_t)nw_protocol_shoes_remove_input_handler;
  qword_1E8F78F80 = (uint64_t)nw_protocol_shoes_input_available;
  qword_1E8F78F90 = (uint64_t)nw_protocol_shoes_get_input_frames;
  qword_1E8F78F98 = (uint64_t)nw_protocol_shoes_get_output_frames;
  qword_1E8F78FA0 = (uint64_t)nw_protocol_shoes_finalize_output_frames;
  qword_1E8F79018 = (uint64_t)nw_protocol_shoes_waiting_for_output;
  qword_1E8F78F58 = (uint64_t)nw_protocol_shoes_connect;
  qword_1E8F78F68 = (uint64_t)nw_protocol_shoes_connected;
  qword_1E8F78F78 = (uint64_t)nw_protocol_shoes_error;
  qword_1E8F78FB0 = (uint64_t)nw_protocol_shoes_get_parameters;
  qword_1E8F78FB8 = (uint64_t)nw_protocol_shoes_get_path;
  qword_1E8F79020 = (uint64_t)nw_protocol_shoes_copy_info;
  qword_1E8F78FC8 = (uint64_t)nw_protocol_shoes_get_remote_endpoint;
  qword_1E8F78FC0 = (uint64_t)nw_protocol_shoes_get_local_endpoint;
  return result;
}

uint64_t nw_protocol_shoes_get_local_endpoint(nw_protocol *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
        BOOL v11 = "%{public}s called with null protocol";
LABEL_46:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
LABEL_47:
      if (v8) {
        free(v8);
      }
      return 0;
    }
    if (!v16)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
        BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
        BOOL v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      char v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_36:
      _os_log_impl(&dword_1830D4000, v9, v10, v14, buf, 0x16u);
    }
LABEL_37:
    free(backtrace_string);
    goto LABEL_47;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
        BOOL v11 = "%{public}s called with null shoes";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v16)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
        BOOL v11 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
        BOOL v11 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_shoes_get_local_endpoint";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      char v14 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  char v3 = handle[235];
  if ((v3 & 0x20) == 0)
  {
    handle[235] = v3 | 0x20;
    if (*((void *)handle + 9))
    {
      output_handler = a1->output_handler;
      if (!output_handler
        || (get_output_local_endpoint = (uint64_t (*)(void))output_handler->callbacks->get_output_local_endpoint) == 0
        || (uint64_t result = get_output_local_endpoint()) == 0)
      {
        uint64_t result = (uint64_t)a1->default_input_handler;
        if (result)
        {
          id v7 = *(uint64_t (**)(void))(*(void *)(result + 24) + 128);
          if (v7) {
            uint64_t result = v7();
          }
          else {
            uint64_t result = 0;
          }
        }
      }
      goto LABEL_15;
    }
  }
  uint64_t result = (uint64_t)a1->default_input_handler;
  if (!result)
  {
LABEL_14:
    if ((v3 & 0x20) != 0) {
      return result;
    }
    goto LABEL_15;
  }
  if (*(void *)(*(void *)(result + 24) + 128))
  {
    uint64_t result = nw_protocol_get_local_endpoint(result);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if ((v3 & 0x20) == 0) {
LABEL_15:
  }
    handle[235] &= ~0x20u;
  return result;
}

uint64_t nw_protocol_shoes_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[13];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_shoes_get_remote_endpoint";
    char v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_shoes_get_remote_endpoint";
        id v6 = "%{public}s called with null shoes";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_shoes_get_remote_endpoint";
        id v6 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_shoes_get_remote_endpoint";
        id v6 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_shoes_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_shoes_get_remote_endpoint";
  char v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_shoes_get_remote_endpoint";
        id v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_shoes_get_remote_endpoint";
        id v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_shoes_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_shoes_get_remote_endpoint";
    id v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_shoes_copy_info(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_copy_info";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null protocol";
LABEL_40:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
LABEL_41:
      if (v9) {
        free(v9);
      }
      return 0;
    }
    if (!v17)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v20 = "nw_protocol_shoes_copy_info";
      __int16 v21 = 2082;
      uint64_t v22 = backtrace_string;
      __int16 v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
      _os_log_impl(&dword_1830D4000, v10, v11, v15, buf, 0x16u);
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_41;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_copy_info";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null shoes";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (!v17)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v20 = "nw_protocol_shoes_copy_info";
      __int16 v21 = 2082;
      uint64_t v22 = backtrace_string;
      __int16 v15 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 24)) != 0 && *(void *)(v5 + 224))
  {
    uint64_t v6 = nw_protocol_copy_info(v4, a2);
    if (a2 != 255) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (a2 != 255) {
      return v6;
    }
  }
  id v7 = *(void **)(v2 + 88);
  if (v7)
  {
    if (v6 || (uint64_t v6 = nw_array_create(), (v7 = *(void **)(v2 + 88)) != 0)) {
      nw_array_append(v6, v7);
    }
  }
  return v6;
}

void *nw_protocol_shoes_get_path(nw_protocol *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_get_path";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_shoes_get_path";
      os_log_type_t v11 = "%{public}s called with null protocol";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      goto LABEL_52;
    }
    if (!v17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v13) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v20 = "nw_protocol_shoes_get_path";
    __int16 v21 = 2082;
    uint64_t v22 = backtrace_string;
    BOOL v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_1830D4000, v9, v10, v14, buf, 0x16u);
    goto LABEL_38;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_get_path";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_shoes_get_path";
      os_log_type_t v11 = "%{public}s called with null shoes";
      goto LABEL_51;
    }
    if (!v17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        os_log_type_t v11 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        os_log_type_t v11 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v15) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v20 = "nw_protocol_shoes_get_path";
    __int16 v21 = 2082;
    uint64_t v22 = backtrace_string;
    BOOL v14 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
    goto LABEL_37;
  }
  uint64_t default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    char v3 = (void *)((uint64_t (*)(void))default_input_handler->callbacks->get_path)();
    id v4 = nw_path_copy_parameters(v3);
    uint64_t v5 = v4;
    if (handle[235])
    {
      if (!nw_parameters_get_tfo(v4))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v20 = "nw_protocol_shoes_get_path";
          __int16 v21 = 2082;
          uint64_t v22 = handle + 151;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s SHOES enabling TFO on path parameters since we are using TLS", buf, 0x16u);
        }
        nw_parameters_set_tfo(v5, 1);
      }
      nw_parameters_set_fast_open_force_enable(v5, 1);
    }
    if (v5) {
      os_release(v5);
    }
    return v3;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v20 = "nw_protocol_shoes_get_path";
  BOOL v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v8, &type, &v17)) {
    goto LABEL_52;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        os_log_type_t v11 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        os_log_type_t v11 = "%{public}s called with null protocol->default_input_handler, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v20 = "nw_protocol_shoes_get_path";
      __int16 v21 = 2082;
      uint64_t v22 = backtrace_string;
      BOOL v14 = "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s";
      goto LABEL_37;
    }
LABEL_38:
    free(backtrace_string);
    goto LABEL_52;
  }
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_get_path";
    os_log_type_t v11 = "%{public}s called with null protocol->default_input_handler";
    goto LABEL_51;
  }
LABEL_52:
  if (v8) {
    free(v8);
  }
  return 0;
}

void *nw_protocol_shoes_get_parameters(nw_protocol *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_shoes_get_parameters";
    id v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v7, &type, &v16)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_shoes_get_parameters";
      os_log_type_t v10 = "%{public}s called with null protocol";
LABEL_50:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      goto LABEL_51;
    }
    if (!v16)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_parameters";
        os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_parameters";
        os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    if (!v12) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v19 = "nw_protocol_shoes_get_parameters";
    __int16 v20 = 2082;
    __int16 v21 = backtrace_string;
    BOOL v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_36:
    _os_log_impl(&dword_1830D4000, v8, v9, v13, buf, 0x16u);
    goto LABEL_37;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_shoes_get_parameters";
    id v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v7, &type, &v16)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_shoes_get_parameters";
      os_log_type_t v10 = "%{public}s called with null shoes";
      goto LABEL_50;
    }
    if (!v16)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_parameters";
        os_log_type_t v10 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_parameters";
        os_log_type_t v10 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v19 = "nw_protocol_shoes_get_parameters";
    __int16 v20 = 2082;
    __int16 v21 = backtrace_string;
    BOOL v13 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
    goto LABEL_36;
  }
  uint64_t default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    char v3 = (void *)handle[9];
    if (!v3)
    {
      id v4 = (void *)((uint64_t (*)(void))default_input_handler->callbacks->get_parameters)();
      char v3 = v4;
      if (*((unsigned char *)handle + 235))
      {
        if (!nw_parameters_get_tfo(v4))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v5 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v19 = "nw_protocol_shoes_get_parameters";
            __int16 v20 = 2082;
            __int16 v21 = (char *)handle + 151;
            _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s SHOES enabling TFO on parameters since we are using TLS", buf, 0x16u);
          }
          nw_parameters_set_tfo(v3, 1);
        }
        nw_parameters_set_fast_open_force_enable(v3, 1);
      }
    }
    return v3;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_protocol_shoes_get_parameters";
  id v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v7, &type, &v16)) {
    goto LABEL_51;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_parameters";
        os_log_type_t v10 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v15 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_shoes_get_parameters";
        os_log_type_t v10 = "%{public}s called with null protocol->default_input_handler, no backtrace";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_shoes_get_parameters";
      __int16 v20 = 2082;
      __int16 v21 = backtrace_string;
      BOOL v13 = "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
LABEL_37:
    free(backtrace_string);
    goto LABEL_51;
  }
  BOOL v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_shoes_get_parameters";
    os_log_type_t v10 = "%{public}s called with null protocol->default_input_handler";
    goto LABEL_50;
  }
LABEL_51:
  if (v7) {
    free(v7);
  }
  return 0;
}

void nw_protocol_shoes_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_shoes_error";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v11, &type, &v19)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_shoes_error";
      BOOL v14 = "%{public}s called with null protocol";
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_protocol_shoes_error";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v11) {
          return;
        }
LABEL_41:
        free(v11);
        return;
      }
      if (!v16) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_shoes_error";
      BOOL v14 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_shoes_error";
      BOOL v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
    goto LABEL_40;
  }
  handle = a1->handle;
  if (handle)
  {
    char v6 = handle[235];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = gLogObj;
    BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    if ((v6 & 0x10) != 0)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v22 = "nw_protocol_shoes_error";
        __int16 v23 = 2082;
        os_log_type_t v24 = handle + 151;
        __int16 v25 = 1024;
        int v26 = a3;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}s not sending error %d", buf, 0x1Cu);
      }
    }
    else
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v22 = "nw_protocol_shoes_error";
        __int16 v23 = 2082;
        os_log_type_t v24 = handle + 151;
        __int16 v25 = 1024;
        int v26 = a3;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}s sending error %d", buf, 0x1Cu);
      }
      uint64_t default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        error = (void (*)(void))default_input_handler->callbacks->error;
        if (error) {
          error();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_protocol_shoes_error";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v11, &type, &v19)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_shoes_error";
    BOOL v14 = "%{public}s called with null shoes";
    goto LABEL_39;
  }
  if (!v19)
  {
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_shoes_error";
    BOOL v14 = "%{public}s called with null shoes, backtrace limit exceeded";
    goto LABEL_39;
  }
  char v17 = (char *)__nw_create_backtrace_string();
  BOOL v12 = __nwlog_obj();
  os_log_type_t v13 = type;
  BOOL v18 = os_log_type_enabled(v12, type);
  if (!v17)
  {
    if (!v18) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_shoes_error";
    BOOL v14 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_39;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v22 = "nw_protocol_shoes_error";
    __int16 v23 = 2082;
    os_log_type_t v24 = v17;
    _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null shoes, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v17);
  if (v11) {
    goto LABEL_41;
  }
}

void nw_protocol_shoes_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v91 = "nw_protocol_shoes_connected";
    unint64_t v52 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v102) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v52, &v102, &type)) {
      goto LABEL_106;
    }
    if (v102 == 17)
    {
      uint64_t v53 = __nwlog_obj();
      os_log_type_t v54 = v102;
      if (!os_log_type_enabled(v53, (os_log_type_t)v102)) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v91 = "nw_protocol_shoes_connected";
      uint64_t v55 = "%{public}s called with null protocol";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v53 = __nwlog_obj();
      os_log_type_t v54 = v102;
      BOOL v57 = os_log_type_enabled(v53, (os_log_type_t)v102);
      if (backtrace_string)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v91 = "nw_protocol_shoes_connected";
          __int16 v92 = 2082;
          uint64_t v93 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_106:
        if (!v52) {
          return;
        }
LABEL_107:
        free(v52);
        return;
      }
      if (!v57) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v91 = "nw_protocol_shoes_connected";
      uint64_t v55 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v53 = __nwlog_obj();
      os_log_type_t v54 = v102;
      if (!os_log_type_enabled(v53, (os_log_type_t)v102)) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v91 = "nw_protocol_shoes_connected";
      uint64_t v55 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_105:
    _os_log_impl(&dword_1830D4000, v53, v54, v55, buf, 0xCu);
    goto LABEL_106;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if ((handle[235] & 0xE) == 6 && handle[150] == 3)
    {
      if (*((nw_protocol **)handle + 8) != a2) {
        return;
      }
      output_handler = a1->output_handler;
      if (!output_handler) {
        return;
      }
      callbacks = output_handler->callbacks;
      if (!callbacks) {
        return;
      }
      get_output_local_endpoint = (uint64_t (*)(void))callbacks->get_output_local_endpoint;
      if (!get_output_local_endpoint) {
        return;
      }
      BOOL v8 = (void *)get_output_local_endpoint();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = gLogObj;
      if (v8)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v91 = "nw_protocol_shoes_connected";
          __int16 v92 = 2082;
          uint64_t v93 = handle + 151;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s udp-associate tcp connected", buf, 0x16u);
        }
        id v10 = v8;
        unsigned int v11 = [v10 port];

        *((_WORD *)handle + 72) = __rev16(v11);
        BOOL v12 = a1->output_handler;
        nw_protocol_set_output_handler((uint64_t)a1, *((void *)handle + 8));
        nw_protocol_set_output_handler((uint64_t)handle, *((void *)handle + 8));
        *((void *)handle + 8) = v12;
        nw_protocol_shoes_send_request_inner(a1);
        return;
      }
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v91 = "nw_protocol_shoes_connected";
        __int16 v92 = 2082;
        uint64_t v93 = handle + 151;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s udp-associate no local endpoint for udp", buf, 0x16u);
      }
      nw_protocol_shoes_error((nw_protocol *)handle, (nw_protocol *)handle, 57);
      handle[235] |= 0x10u;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v30 = gLogObj;
      os_log_type_t v31 = gLogObj;
      goto LABEL_74;
    }
    os_log_type_t v13 = a1->output_handler;
    if (v13)
    {
      BOOL v14 = v13->callbacks;
      if (v14)
      {
        if (v14->get_output_local_endpoint)
        {
          BOOL v15 = (void *)((uint64_t (*)(void))v14->get_remote_endpoint)();
          if (v15)
          {
            BOOL v16 = v15;
            int v17 = [(nw_protocol_identifier *)v16 type];

            if (v17 == 1 && nw_endpoint_get_type(*((nw_endpoint_t *)handle + 13)) != nw_endpoint_type_address)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v18 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
              {
                char v19 = (nw_protocol *)*((void *)handle + 13);
                *(_DWORD *)buf = 136446978;
                uint64_t v91 = "nw_protocol_shoes_connected";
                __int16 v92 = 2082;
                uint64_t v93 = handle + 151;
                __int16 v94 = 2112;
                v95 = v19;
                __int16 v96 = 2112;
                uint64_t v97 = v16;
                _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Updating peer endpoint from %@ to %@", buf, 0x2Au);
              }
              __int16 v20 = (void *)*((void *)handle + 13);
              *((void *)handle + 13) = os_retain(v16);
              if (v20) {
                os_release(v20);
              }
            }
          }
        }
      }
    }
    ((void (*)(void))a1->default_input_handler->callbacks->connected)();
    __int16 v21 = a1->output_handler;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = gLogObj;
    if (v21 != a2)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        identifier = a2->identifier;
        os_log_type_t v24 = a1->output_handler;
        __int16 v25 = a1->identifier;
        *(_DWORD *)buf = 136447490;
        uint64_t v91 = "nw_protocol_shoes_connected";
        __int16 v92 = 2082;
        uint64_t v93 = handle + 151;
        __int16 v94 = 2048;
        v95 = a2;
        __int16 v96 = 2080;
        uint64_t v97 = identifier;
        __int16 v98 = 2048;
        unint64_t v99 = v24;
        __int16 v100 = 2080;
        unint64_t v101 = v25;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s connected protocol %p (%s) is not our output_handler %p (%s), ignoring", buf, 0x3Eu);
      }
      return;
    }
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = a1->output_handler;
      if (!v26
        || (uint64_t v27 = (uint64_t (*)(void))v26->callbacks->get_output_local_endpoint) == 0
        || (uint64_t default_input_handler = (nw_protocol *)v27()) == 0)
      {
        uint64_t default_input_handler = a1->default_input_handler;
        if (default_input_handler)
        {
          get_local_endpoint = (uint64_t (*)(void))default_input_handler->callbacks->get_local_endpoint;
          if (get_local_endpoint) {
            uint64_t default_input_handler = (nw_protocol *)get_local_endpoint();
          }
          else {
            uint64_t default_input_handler = 0;
          }
        }
      }
      os_log_type_t v32 = "with";
      uint64_t v91 = "nw_protocol_shoes_connected";
      char v33 = handle[235];
      *(_DWORD *)buf = 136446978;
      __int16 v92 = 2082;
      if ((v33 & 1) == 0) {
        os_log_type_t v32 = "no";
      }
      uint64_t v93 = handle + 151;
      __int16 v94 = 2114;
      v95 = default_input_handler;
      __int16 v96 = 2082;
      uint64_t v97 = (nw_protocol_identifier *)v32;
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s local address %{public}@ %{public}s TFO", buf, 0x2Au);
    }
    int v34 = handle[150];
    if (v34 != 6)
    {
      if (v34 != 1) {
        return;
      }
      *((_DWORD *)handle + 34) = 0;
      char v35 = handle[235];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v36 = gLogObj;
      BOOL v37 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
      if ((v35 & 1) == 0)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v91 = "nw_protocol_shoes_connected";
          __int16 v92 = 2082;
          uint64_t v93 = handle + 151;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s send request without TFO data from above", buf, 0x16u);
        }
        __int16 v38 = (char *)a1->handle;
        if (v38)
        {
          if ((~v38[235] & 6) == 0)
          {
            if (gLogDatapath)
            {
              uint64_t v74 = __nwlog_obj();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = v38 + 151;
                _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s udp-associate creating output handler for udp", buf, 0x16u);
              }
            }
            id v39 = (id)(*(uint64_t (**)(void))(*(void *)(*((void *)v38 + 6) + 24) + 112))();
            BOOL v40 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v39, 0, 0);

            uint64_t v41 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v40);
            if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
              dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
            }
            options = nw_protocol_create_options((void *)g_tcp_definition);
            nw_tcp_options_set_reset_local_port(options, 1);
            nw_protocol_options_set_log_id(options, "C", v38 + 151, 101);
            nw_protocol_stack_set_transport_protocol(v41, &options->super);
            if (v41) {
              os_release(v41);
            }
            if (options) {
              os_release(options);
            }
            id v43 = nw_parameters_copy_context(v39);
            id v44 = nw_path_copy_flow_registration(v43, (uint64_t)v38);
            if (v43) {
              os_release(v43);
            }
            ip_nw_report_resolution_protocol_t protocol = nw_parameters_get_ip_protocol((void *)v40);
            new_flow = nw_path_flow_registration_create_new_flow(v44, 1, 0, 0, 0, 0, 0, ip_protocol);
            *((void *)v38 + 10) = new_flow;
            nw_path_flow_registration_set_specific_use_only(new_flow, 1);
            if (v44) {
              os_release(v44);
            }
            long long v102 = *(_OWORD *)v38;
            nw_path_flow_registration_get_id(*((void **)v38 + 10), v38);
            BOOL v47 = nw_endpoint_copy_original_endpoint(*((void **)v38 + 12), 1);
            if (nw_socket_protocol_identifier::onceToken != -1) {
              dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_65117);
            }
            uint64_t internal = nw_protocol_create_internal((uint64_t)&nw_socket_protocol_identifier::identifier, (void *)v47, (const char *)v40, 1);
            if (v47) {
              os_release((void *)v47);
            }
            *((void *)v38 + 9) = v40;
            (**(void (***)(uint64_t, nw_protocol *))(internal + 24))(internal, a1);
            *((void *)v38 + 8) = internal;
            v38[150] = 3;
            uint64_t v49 = *(void *)(internal + 24);
            if (v49)
            {
              unint64_t v50 = *(void (**)(uint64_t, nw_protocol *))(v49 + 24);
              if (v50)
              {
                v50(internal, a1);
LABEL_65:
                __int16 v51 = (void *)*((void *)v38 + 9);
                if (v51)
                {
                  os_release(v51);
                  *((void *)v38 + 9) = 0;
                }
                *(_OWORD *)__int16 v38 = v102;
                return;
              }
            }
            __nwlog_obj();
            uint64_t v64 = *((void *)v38 + 8);
            size_t v65 = "invalid";
            if (v64)
            {
              uint64_t v66 = *(const char **)(v64 + 16);
              if (v66) {
                size_t v65 = v66;
              }
            }
            *(_DWORD *)buf = 136446466;
            uint64_t v91 = "nw_protocol_shoes_send_request";
            __int16 v92 = 2082;
            uint64_t v93 = (char *)v65;
            unint64_t v67 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v88 = 0;
            if (__nwlog_fault(v67, &type, &v88))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                uint64_t v68 = __nwlog_obj();
                os_log_type_t v69 = type;
                if (!os_log_type_enabled(v68, type)) {
                  goto LABEL_155;
                }
                uint64_t v70 = *((void *)v38 + 8);
                unint64_t v71 = "invalid";
                if (v70)
                {
                  uint64_t v72 = *(const char **)(v70 + 16);
                  if (v72) {
                    unint64_t v71 = v72;
                  }
                }
                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = (char *)v71;
                unint64_t v73 = "%{public}s protocol %{public}s has invalid connect callback";
                goto LABEL_154;
              }
              if (!v88)
              {
                uint64_t v68 = __nwlog_obj();
                os_log_type_t v69 = type;
                if (!os_log_type_enabled(v68, type)) {
                  goto LABEL_155;
                }
                uint64_t v82 = *((void *)v38 + 8);
                uint64_t v83 = "invalid";
                if (v82)
                {
                  unint64_t v84 = *(const char **)(v82 + 16);
                  if (v84) {
                    uint64_t v83 = v84;
                  }
                }
                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = (char *)v83;
                unint64_t v73 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
                goto LABEL_154;
              }
              unint64_t v77 = (char *)__nw_create_backtrace_string();
              uint64_t v68 = __nwlog_obj();
              os_log_type_t v69 = type;
              BOOL v78 = os_log_type_enabled(v68, type);
              if (v77)
              {
                if (v78)
                {
                  uint64_t v79 = *((void *)v38 + 8);
                  unint64_t v80 = "invalid";
                  if (v79)
                  {
                    uint64_t v81 = *(const char **)(v79 + 16);
                    if (v81) {
                      unint64_t v80 = v81;
                    }
                  }
                  *(_DWORD *)buf = 136446722;
                  uint64_t v91 = "nw_protocol_shoes_send_request";
                  __int16 v92 = 2082;
                  uint64_t v93 = (char *)v80;
                  __int16 v94 = 2082;
                  v95 = (nw_protocol *)v77;
                  _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v77);
                goto LABEL_155;
              }
              if (v78)
              {
                uint64_t v85 = *((void *)v38 + 8);
                unint64_t v86 = "invalid";
                if (v85)
                {
                  uint64_t v87 = *(const char **)(v85 + 16);
                  if (v87) {
                    unint64_t v86 = v87;
                  }
                }
                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = (char *)v86;
                unint64_t v73 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
LABEL_154:
                _os_log_impl(&dword_1830D4000, v68, v69, v73, buf, 0x16u);
              }
            }
LABEL_155:
            if (v67) {
              free(v67);
            }
            goto LABEL_65;
          }
          if (nw_protocol_shoes_send_request_inner(a1)) {
            return;
          }
LABEL_73:
          os_log_type_t v31 = __nwlog_obj();
          BOOL v30 = v31;
LABEL_74:
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v91 = "nw_shoes_internal_disconnect";
            __int16 v92 = 2082;
            uint64_t v93 = handle + 151;
            _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s ", buf, 0x16u);
          }
          handle[150] = 7;
          (*(void (**)(char *, void))(*((void *)handle + 3) + 48))(handle, 0);
          return;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        uint64_t v91 = "nw_protocol_shoes_send_request";
        unint64_t v60 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v102) = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v60, &v102, &type))
        {
          if (v102 == 17)
          {
            uint64_t v61 = __nwlog_obj();
            os_log_type_t v62 = v102;
            if (!os_log_type_enabled(v61, (os_log_type_t)v102)) {
              goto LABEL_147;
            }
            *(_DWORD *)buf = 136446210;
            uint64_t v91 = "nw_protocol_shoes_send_request";
            unint64_t v63 = "%{public}s called with null shoes";
            goto LABEL_146;
          }
          if (type == OS_LOG_TYPE_DEFAULT)
          {
            uint64_t v61 = __nwlog_obj();
            os_log_type_t v62 = v102;
            if (!os_log_type_enabled(v61, (os_log_type_t)v102)) {
              goto LABEL_147;
            }
            *(_DWORD *)buf = 136446210;
            uint64_t v91 = "nw_protocol_shoes_send_request";
            unint64_t v63 = "%{public}s called with null shoes, backtrace limit exceeded";
            goto LABEL_146;
          }
          uint64_t v75 = (char *)__nw_create_backtrace_string();
          uint64_t v61 = __nwlog_obj();
          os_log_type_t v62 = v102;
          BOOL v76 = os_log_type_enabled(v61, (os_log_type_t)v102);
          if (v75)
          {
            if (v76)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v91 = "nw_protocol_shoes_send_request";
              __int16 v92 = 2082;
              uint64_t v93 = v75;
              _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s called with null shoes, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v75);
            goto LABEL_147;
          }
          if (v76)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v91 = "nw_protocol_shoes_send_request";
            unint64_t v63 = "%{public}s called with null shoes, no backtrace";
LABEL_146:
            _os_log_impl(&dword_1830D4000, v61, v62, v63, buf, 0xCu);
          }
        }
LABEL_147:
        if (v60) {
          free(v60);
        }
        goto LABEL_73;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v91 = "nw_protocol_shoes_connected";
        __int16 v92 = 2082;
        uint64_t v93 = handle + 151;
        _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s start waiting for TFO", buf, 0x16u);
      }
      handle[150] = 2;
    }
    ((void (*)(nw_protocol *, nw_protocol *))a1->default_input_handler->callbacks->connected)(a1->default_input_handler, a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v91 = "nw_protocol_shoes_connected";
  unint64_t v52 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v102) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v52, &v102, &type)) {
    goto LABEL_106;
  }
  if (v102 == 17)
  {
    uint64_t v53 = __nwlog_obj();
    os_log_type_t v54 = v102;
    if (!os_log_type_enabled(v53, (os_log_type_t)v102)) {
      goto LABEL_106;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v91 = "nw_protocol_shoes_connected";
    uint64_t v55 = "%{public}s called with null shoes";
    goto LABEL_105;
  }
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    uint64_t v53 = __nwlog_obj();
    os_log_type_t v54 = v102;
    if (!os_log_type_enabled(v53, (os_log_type_t)v102)) {
      goto LABEL_106;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v91 = "nw_protocol_shoes_connected";
    uint64_t v55 = "%{public}s called with null shoes, backtrace limit exceeded";
    goto LABEL_105;
  }
  uint64_t v58 = (char *)__nw_create_backtrace_string();
  uint64_t v53 = __nwlog_obj();
  os_log_type_t v54 = v102;
  BOOL v59 = os_log_type_enabled(v53, (os_log_type_t)v102);
  if (!v58)
  {
    if (!v59) {
      goto LABEL_106;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v91 = "nw_protocol_shoes_connected";
    uint64_t v55 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_105;
  }
  if (v59)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v91 = "nw_protocol_shoes_connected";
    __int16 v92 = 2082;
    uint64_t v93 = v58;
    _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null shoes, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v58);
  if (v52) {
    goto LABEL_107;
  }
}

void sub_1835DFBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1835DFC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_shoes_send_request_inner(nw_protocol *a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)uint64_t v55 = 136446210;
    *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v58[0] = 0;
    if (__nwlog_fault(v37, buf, v58))
    {
      if (buf[0] == 17)
      {
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = buf[0];
        if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v55 = 136446210;
          *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
          BOOL v40 = "%{public}s called with null shoes";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v38, v39, v40, v55, 0xCu);
        }
      }
      else if (v58[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = buf[0];
        BOOL v46 = os_log_type_enabled(v38, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)uint64_t v55 = 136446466;
            *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
            *(_WORD *)&v55[12] = 2082;
            *(void *)&v55[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null shoes, dumping backtrace:%{public}s", v55, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v46)
        {
          *(_DWORD *)uint64_t v55 = 136446210;
          *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
          BOOL v40 = "%{public}s called with null shoes, no backtrace";
          goto LABEL_76;
        }
      }
      else
      {
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = buf[0];
        if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v55 = 136446210;
          *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
          BOOL v40 = "%{public}s called with null shoes, backtrace limit exceeded";
          goto LABEL_76;
        }
      }
    }
LABEL_77:
    if (v37) {
      free(v37);
    }
    return 0;
  }
  uint64_t result = nw_shoes_create_request((uint64_t)a1->handle);
  if (!result) {
    return result;
  }
  id v4 = (unsigned __int8 *)result;
  unsigned int v5 = bswap32(*(unsigned __int16 *)result) >> 16;
  char v6 = (char *)a1->handle;
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_shoes_send";
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();
    v58[0] = 16;
    LOBYTE(v53) = 0;
    if (!__nwlog_fault(v41, v58, &v53)) {
      goto LABEL_85;
    }
    if (v58[0] == 17)
    {
      unint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = v58[0];
      if (!os_log_type_enabled(v42, (os_log_type_t)v58[0])) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_shoes_send";
      id v44 = "%{public}s called with null shoes";
    }
    else if ((_BYTE)v53)
    {
      BOOL v47 = (char *)__nw_create_backtrace_string();
      unint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = v58[0];
      BOOL v48 = os_log_type_enabled(v42, (os_log_type_t)v58[0]);
      if (v47)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_shoes_send";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null shoes, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v47);
        goto LABEL_85;
      }
      if (!v48)
      {
LABEL_85:
        if (v41) {
          free(v41);
        }
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_shoes_send";
      id v44 = "%{public}s called with null shoes, no backtrace";
    }
    else
    {
      unint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = v58[0];
      if (!os_log_type_enabled(v42, (os_log_type_t)v58[0])) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_shoes_send";
      id v44 = "%{public}s called with null shoes, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v42, v43, v44, buf, 0xCu);
    goto LABEL_85;
  }
  unsigned int v7 = v5 + 2;
  uint64_t v53 = 0;
  os_log_type_t v54 = &v53;
  uint64_t v51 = 0;
  unint64_t v52 = &v51;
  int v8 = ((uint64_t (*)(void))a1->output_handler->callbacks->get_output_frames)();
  int v9 = v8;
  uint64_t v10 = v53;
  if (!v53 || !v8)
  {
    if (v8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_shoes_send";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v6 + 151;
        *(_WORD *)&buf[22] = 1024;
        int v65 = v9;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Output handler reported %u frames to write, but array is empty", buf, 0x1Cu);
      }
    }
LABEL_32:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v23 = gLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v24 = v4[2];
      *(_DWORD *)uint64_t v55 = 136446978;
      *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
      *(_WORD *)&v55[12] = 2082;
      *(void *)&v55[14] = handle + 151;
      *(_WORD *)&v55[22] = 1024;
      LODWORD(v56) = v24;
      WORD2(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 6) = v5;
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Failed to send shoes request (type %u inner length %u)", v55, 0x22u);
      return 0;
    }
    return result;
  }
  uint64_t v49 = v6;
  unsigned int v50 = v5;
  unsigned int v11 = v4;
  while (1)
  {
    uint64_t v12 = *(void *)(v10 + 32);
    if (v12 || *(void *)(v10 + 40))
    {
      uint64_t v13 = *(void *)(v10 + 112);
      if (!v13) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(v10 + 112);
      if (!v13) {
        goto LABEL_17;
      }
    }
    if ((*(_WORD *)(v10 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(v10, *(void *)(v10 + 88)))
    {
      LODWORD(v13) = 0;
LABEL_17:
      BOOL v15 = 0;
      goto LABEL_18;
    }
    LODWORD(v13) = *(_DWORD *)(v10 + 52);
    uint64_t v14 = *(unsigned int *)(v10 + 56);
    if (v13) {
      LODWORD(v13) = v13 - (v14 + *(_DWORD *)(v10 + 60));
    }
    BOOL v15 = (void *)(*(void *)(v10 + 112) + v14);
LABEL_18:
    size_t v16 = v13 >= v7 ? v7 : v13;
    memcpy(v15, v11, v16);
    if (!nw_frame_claim(v10, v17, v16, 0)) {
      break;
    }
    nw_frame_collapse(v10);
    nw_frame_unclaim(v10, v18, v16, 0);
    uint64_t v19 = *(void *)(v10 + 32);
    __int16 v20 = *(void **)(v10 + 40);
    if (v19)
    {
      *(void *)(v19 + 40) = v20;
      __int16 v20 = *(void **)(v10 + 40);
    }
    else
    {
      os_log_type_t v54 = *(uint64_t **)(v10 + 40);
    }
    void *v20 = v19;
    __int16 v21 = v52;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = v21;
    *__int16 v21 = v10;
    unint64_t v52 = (uint64_t *)(v10 + 32);
    if (v12)
    {
      v11 += v16;
      uint64_t v10 = v12;
      v7 -= v16;
      if (v7) {
        continue;
      }
    }
    goto LABEL_36;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v25 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_shoes_send";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v49 + 151;
    *(_WORD *)&buf[22] = 1024;
    int v65 = v16;
    _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Claiming frame with %u bytes failed", buf, 0x1Cu);
  }
LABEL_36:
  ((void (*)(void))a1->output_handler->callbacks->finalize_output_frames)();
  uint64_t v26 = v53;
  if (v53)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v65 = 0;
    *(void *)&buf[16] = 0x2000000000;
    *(void *)uint64_t v55 = MEMORY[0x1E4F143A8];
    *(void *)&v55[8] = 0x40000000;
    *(void *)&v55[16] = ___ZL22nw_protocol_shoes_sendP11nw_protocolPhj_block_invoke;
    *(void *)&long long v56 = &unk_1E523A4A0;
    *((void *)&v56 + 1) = buf;
    do
    {
      if (!v26) {
        break;
      }
      uint64_t v27 = *(void *)(v26 + 32);
      char v28 = (*(uint64_t (**)(unsigned char *))&v55[16])(v55);
      uint64_t v26 = v27;
    }
    while ((v28 & 1) != 0);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v30 = *(_DWORD *)(*(void *)&buf[8] + 24);
      *(_DWORD *)uint64_t v58 = 136446722;
      BOOL v59 = "nw_protocol_shoes_send";
      __int16 v60 = 2082;
      uint64_t v61 = v49 + 151;
      __int16 v62 = 1024;
      int v63 = v30;
      _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Failed to use %u frames, marking as failed", v58, 0x1Cu);
    }
    _Block_object_dispose(buf, 8);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v31 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    output_handler = a1->output_handler;
    if (!output_handler
      || (get_output_local_endpoint = (uint64_t (*)(void))output_handler->callbacks->get_output_local_endpoint) == 0
      || (uint64_t default_input_handler = (nw_protocol *)get_output_local_endpoint()) == 0)
    {
      uint64_t default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        get_local_endpoint = (uint64_t (*)(void))default_input_handler->callbacks->get_local_endpoint;
        if (get_local_endpoint) {
          uint64_t default_input_handler = (nw_protocol *)get_local_endpoint();
        }
        else {
          uint64_t default_input_handler = 0;
        }
      }
    }
    int v36 = v4[2];
    *(_DWORD *)uint64_t v55 = 136447234;
    *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
    *(_WORD *)&v55[12] = 2082;
    *(void *)&v55[14] = handle + 151;
    *(_WORD *)&v55[22] = 2114;
    *(void *)&long long v56 = default_input_handler;
    WORD4(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 10) = v36;
    HIWORD(v56) = 1024;
    unsigned int v57 = v50;
    _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Sent shoes request: local address %{public}@ type %u inner length %u no TFO", v55, 0x2Cu);
  }
  handle[150] = 5;
  free(v4);
  return 1;
}

BOOL nw_shoes_create_request(uint64_t a1)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  nw_endpoint_t v2 = (nw_endpoint_t)nw_endpoint_copy_proxy_original_endpoint(*(void **)(a1 + 96));
  if (!v2) {
    nw_endpoint_t v2 = *(nw_endpoint_t *)(a1 + 96);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v3 = &unk_1EB267000;
  id v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    __int16 v100 = "nw_shoes_create_request";
    __int16 v101 = 2082;
    uint64_t v102 = a1 + 151;
    __int16 v103 = 2112;
    uint64_t v104 = (const char *)v2;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Sending request for endpoint %@", buf, 0x20u);
  }
  nw_endpoint_type_t type = nw_endpoint_get_type(v2);
  uint64_t v95 = 0;
  __int16 v96 = &v95;
  uint64_t v97 = 0x2000000000;
  char v98 = 0;
  int v94 = 0;
  __int16 v93 = 0;
  char v6 = (void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 48) + 24) + 112))();
  nw_endpoint_type_t v90 = type;
  if (!v6)
  {
    unsigned int v22 = 0;
    __int16 v23 = *(void **)(a1 + 112);
    char v24 = 1;
    int v25 = 261;
    if (!v23)
    {
      __s = 0;
      unsigned int v26 = 0;
      unsigned int alternate_port = 0;
      int v86 = 0;
      char v87 = 1;
      int v21 = 0;
      goto LABEL_53;
    }
    int v21 = 0;
    unsigned int v26 = 0;
    int v86 = 0;
    unsigned int alternate_port = 0;
    string_ptr = xpc_string_get_string_ptr(v23);
    if (string_ptr) {
      goto LABEL_51;
    }
    goto LABEL_43;
  }
  unsigned int v7 = v6;
  unsigned int v8 = *(_DWORD *)(v7[13] + 72);

  if (v8) {
    int v9 = 268;
  }
  else {
    int v9 = 261;
  }
  uint64_t v10 = v7;
  BOOL v11 = (*(_WORD *)(v7[13] + 108) & 0x200) == 0;

  if (!v11)
  {
    unsigned int v17 = 0;
    goto LABEL_25;
  }
  uint64_t v12 = v10;
  BOOL v13 = (*(_WORD *)(v7[13] + 100) & 1) == 0;

  if (!v13) {
    *((unsigned char *)v96 + 24) |= 0x80u;
  }
  uint64_t v14 = v12;
  BOOL v15 = (*(_WORD *)(v7[13] + 100) & 2) == 0;

  if (!v15) {
    *((unsigned char *)v96 + 24) |= 0x10u;
  }
  iterate_block[0] = MEMORY[0x1E4F143A8];
  iterate_block[1] = 0x40000000;
  iterate_block[2] = ___ZL23nw_shoes_create_requestP18_nw_protocol_shoes_block_invoke;
  iterate_block[3] = &unk_1E523A458;
  iterate_block[4] = &v95;
  nw_parameters_iterate_prohibited_interface_types(v14, iterate_block);
  unsigned int v16 = *(unsigned __int16 *)(a1 + 144);
  unsigned int v17 = __rev16(v16);
  __int16 v93 = v17;
  if (v16) {
    *((unsigned char *)v96 + 24) |= 6u;
  }
  uint64_t v18 = v14;
  int v19 = *(_DWORD *)(v7[13] + 92);

  if (!v19) {
    goto LABEL_25;
  }
  next_hop_required_interface_nw_endpoint_type_t type = nw_parameters_get_next_hop_required_interface_type(v18);
  if (next_hop_required_interface_type == 3)
  {
    int v21 = 4;
    goto LABEL_31;
  }
  if (next_hop_required_interface_type == 2)
  {
    int v21 = 2;
    goto LABEL_31;
  }
  if (next_hop_required_interface_type != 1)
  {
LABEL_25:
    int v21 = 0;
    if (*((unsigned char *)v96 + 24)) {
      int v25 = v9 + 4;
    }
    else {
      int v25 = v9;
    }
    goto LABEL_35;
  }
  int v21 = 1;
LABEL_31:
  int v94 = v21;
  if (*((unsigned char *)v96 + 24)) {
    int v29 = v9 + 4;
  }
  else {
    int v29 = v9;
  }
  int v25 = v29 + 7;
LABEL_35:
  int v30 = v10;
  BOOL v31 = *(_DWORD *)(v7[13] + 103) == 0;

  if (v31)
  {
    unsigned int alternate_port = 0;
    int v86 = 0;
    char v24 = 1;
    unsigned int v26 = v8;
    os_log_type_t v32 = *(void **)(a1 + 112);
    if (!v32) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  if (nw_shoes_is_multipath_allowed(void)::onceToken != -1) {
    dispatch_once(&nw_shoes_is_multipath_allowed(void)::onceToken, &__block_literal_global_50);
  }
  unsigned int v26 = v8;
  if (nw_shoes_is_multipath_allowed(void)::isAllowed != 1)
  {
    unsigned int alternate_port = 0;
    int v86 = 0;
    char v24 = 1;
    os_log_type_t v32 = *(void **)(a1 + 112);
    if (!v32) {
      goto LABEL_46;
    }
LABEL_42:
    unsigned int v22 = v17;
    char v3 = &unk_1EB267000;
    nw_endpoint_type_t type = v90;
    string_ptr = xpc_string_get_string_ptr(v32);
    if (string_ptr) {
      goto LABEL_51;
    }
    goto LABEL_43;
  }
  unsigned int alternate_port = nw_endpoint_get_alternate_port(v2);
  char v24 = 0;
  v25 += 6;
  int v86 = 2;
  os_log_type_t v32 = *(void **)(a1 + 112);
  if (v32) {
    goto LABEL_42;
  }
LABEL_46:
  char v33 = v30;
  int v34 = (const char *)v33[14];

  if (v34)
  {
    string_ptr = v34;
    unsigned int v22 = v17;
    char v3 = &unk_1EB267000;
    unsigned int v26 = v8;
    nw_endpoint_type_t type = v90;
    goto LABEL_51;
  }
  unsigned int v26 = v8;
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_9);
  }
  unsigned int v22 = v17;
  nw_endpoint_type_t type = v90;
  string_ptr = (const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
  char v3 = &unk_1EB267000;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
LABEL_51:
    __s = (char *)string_ptr;
    char v87 = 0;
    v25 += strlen(string_ptr) + 3;
    if (!v22) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
LABEL_43:
  __s = 0;
  char v87 = 1;
  if (v22) {
LABEL_52:
  }
    LOWORD(v25) = v25 + 5;
LABEL_53:
  if (!(_WORD)v25)
  {
    int v81 = v21;
    __int16 v60 = __nwlog_obj();
    os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    __int16 v100 = "strict_calloc";
    uint64_t v61 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v61);
    if (result) {
      goto LABEL_151;
    }
    free(v61);
    int v21 = v81;
  }
  char v88 = v24;
  char v35 = malloc_type_calloc(1uLL, (unsigned __int16)v25, 0xEAFB8F1AuLL);
  if (v35)
  {
    if (type != nw_endpoint_type_address) {
      goto LABEL_56;
    }
    goto LABEL_107;
  }
  int v82 = v21;
  __int16 v62 = __nwlog_obj();
  os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  __int16 v100 = "strict_calloc";
  __int16 v101 = 2048;
  uint64_t v102 = 1;
  __int16 v103 = 2048;
  uint64_t v104 = (const char *)(unsigned __int16)v25;
  int v63 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v63);
  if (!result)
  {
    free(v63);
    int v21 = v82;
    if (type != nw_endpoint_type_address)
    {
LABEL_56:
      if (type != nw_endpoint_type_bonjour_service)
      {
        if (type != nw_endpoint_type_host)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v52 = *((void *)v3 + 237);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            __int16 v100 = "nw_shoes_create_request";
            __int16 v101 = 2082;
            uint64_t v102 = a1 + 151;
            __int16 v103 = 1024;
            LODWORD(v104) = type;
            _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Invalid endpoint type %u", buf, 0x1Cu);
          }
          if (!v35)
          {
LABEL_98:
            if (!v2)
            {
LABEL_100:
              _Block_object_dispose(&v95, 8);
              return (BOOL)v35;
            }
LABEL_99:
            os_release(v2);
            goto LABEL_100;
          }
          goto LABEL_97;
        }
        int v36 = v21;
        if ((*(unsigned char *)(a1 + 235) & 2) != 0) {
          char v37 = 4;
        }
        else {
          char v37 = 1;
        }
        *((unsigned char *)v35 + 2) = v37;
        hostname = nw_endpoint_get_hostname(v2);
        if (!hostname)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v58 = *((void *)v3 + 237);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            __int16 v100 = "nw_shoes_create_request";
            __int16 v101 = 2082;
            uint64_t v102 = a1 + 151;
            os_log_type_t v43 = "%{public}s %{public}s hostname is NULL";
            id v44 = v58;
            uint32_t v56 = 22;
            goto LABEL_96;
          }
          goto LABEL_97;
        }
        os_log_type_t v39 = hostname;
        unsigned int v79 = alternate_port;
        size_t v40 = strlen(hostname);
        size_t v41 = v40;
        if (v40 >= 0x100)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v42 = *((void *)v3 + 237);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136447234;
            __int16 v100 = "nw_shoes_create_request";
            __int16 v101 = 2082;
            uint64_t v102 = a1 + 151;
            __int16 v103 = 2082;
            uint64_t v104 = v39;
            __int16 v105 = 2048;
            *(void *)os_log_type_t v106 = v41;
            *(_WORD *)&v106[8] = 2048;
            uint64_t v107 = 255;
            os_log_type_t v43 = "%{public}s %{public}s Hostname too long: \"%{public}s\" %zu > %zu";
            id v44 = v42;
LABEL_82:
            uint32_t v56 = 52;
LABEL_96:
            _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, v43, buf, v56);
            goto LABEL_97;
          }
          goto LABEL_97;
        }
        *((unsigned char *)v35 + 5) = v40;
        memcpy(v35 + 3, v39, v40);
        unsigned int v57 = v41 + 4;
        int v21 = v36;
        nw_endpoint_type_t type = nw_endpoint_type_host;
        if (!v26) {
          goto LABEL_121;
        }
        goto LABEL_117;
      }
      unsigned int v79 = alternate_port;
      if ((*(unsigned char *)(a1 + 235) & 2) != 0) {
        char v45 = 8;
      }
      else {
        char v45 = 7;
      }
      *((unsigned char *)v35 + 2) = v45;
      bonjour_service_name = nw_endpoint_get_bonjour_service_name(v2);
      bonjour_service_nw_endpoint_type_t type = nw_endpoint_get_bonjour_service_type(v2);
      nw_endpoint_t endpoint = v2;
      bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(v2);
      if (bonjour_service_name)
      {
        size_t v49 = strlen(bonjour_service_name) + 1;
        int v80 = v21;
        if (bonjour_service_type) {
          goto LABEL_70;
        }
      }
      else
      {
        size_t v49 = 1;
        int v80 = v21;
        if (bonjour_service_type)
        {
LABEL_70:
          size_t v50 = strlen(bonjour_service_type) + 1;
          unsigned int v77 = v26;
          unsigned int v78 = v22;
          if (bonjour_service_domain)
          {
LABEL_71:
            size_t v51 = strlen(bonjour_service_domain) + 1;
            goto LABEL_79;
          }
LABEL_78:
          size_t v51 = 1;
LABEL_79:
          unint64_t v53 = v50 + v49 + v51;
          if (v53 >= 0x100)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v54 = gLogObj;
            nw_endpoint_t v2 = endpoint;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t bonjour_fullname = nw_endpoint_get_bonjour_fullname(endpoint);
              *(_DWORD *)buf = 136447234;
              __int16 v100 = "nw_shoes_create_request";
              __int16 v101 = 2082;
              uint64_t v102 = a1 + 151;
              __int16 v103 = 2082;
              uint64_t v104 = (const char *)bonjour_fullname;
              __int16 v105 = 2048;
              *(void *)os_log_type_t v106 = v53;
              *(_WORD *)&v106[8] = 2048;
              uint64_t v107 = 255;
              os_log_type_t v43 = "%{public}s %{public}s Bonjour service too long: \"%{public}s\" %zu > %zu";
              id v44 = v54;
              goto LABEL_82;
            }
LABEL_97:
            free(v35);
            char v35 = 0;
            goto LABEL_98;
          }
          *((unsigned char *)v35 + 5) = v53;
          if (bonjour_service_name && v49) {
            memcpy(v35 + 3, bonjour_service_name, v49);
          }
          if (bonjour_service_type && v50) {
            memcpy((char *)v35 + v49 + 6, bonjour_service_type, v50);
          }
          if (bonjour_service_domain && v51) {
            memcpy((char *)v35 + v49 + v50 + 6, bonjour_service_domain, v51);
          }
          unsigned int v57 = v53 + 4;
          nw_endpoint_t v2 = endpoint;
          nw_endpoint_type_t type = v90;
          char v3 = &unk_1EB267000;
          unsigned int v26 = v77;
          unsigned int v22 = v78;
          int v21 = v80;
          if (!v77)
          {
LABEL_121:
            if (*((unsigned char *)v96 + 24) && (unsigned __int16)v25 > (unsigned __int16)(v57 + 2))
            {
              int v84 = v21;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v68 = *((void *)v3 + 237);
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                int v69 = *((unsigned __int8 *)v96 + 24);
                *(_DWORD *)buf = 136446978;
                __int16 v100 = "nw_shoes_create_request";
                __int16 v101 = 2082;
                uint64_t v102 = a1 + 151;
                __int16 v103 = 2082;
                uint64_t v104 = "flags";
                __int16 v105 = 1024;
                *(_DWORD *)os_log_type_t v106 = v69;
                _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s sending tlv: %{public}s(%#x)", buf, 0x26u);
              }
              v57 += nw_shoes_add_tlv((uint64_t)v35 + (unsigned __int16)(v57 + 2), (unsigned __int16)(v25 - (v57 + 2)), 2u, 1uLL, v96 + 3);
              int v21 = v84;
            }
            if (v21 && (unsigned __int16)v25 > (unsigned __int16)(v57 + 2))
            {
              int v70 = v21;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unint64_t v71 = *((void *)v3 + 237);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446978;
                __int16 v100 = "nw_shoes_create_request";
                __int16 v101 = 2082;
                uint64_t v102 = a1 + 151;
                __int16 v103 = 2082;
                uint64_t v104 = "extended_flags";
                __int16 v105 = 1024;
                *(_DWORD *)os_log_type_t v106 = v70;
                _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s sending tlv: %{public}s(%#x)", buf, 0x26u);
              }
              v57 += nw_shoes_add_tlv((uint64_t)v35 + (unsigned __int16)(v57 + 2), (unsigned __int16)(v25 - (v57 + 2)), 9u, 4uLL, &v94);
              nw_endpoint_type_t type = v90;
            }
            if ((v87 & 1) == 0 && (unsigned __int16)v25 > (unsigned __int16)(v57 + 2))
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v72 = *((void *)v3 + 237);
              if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446978;
                __int16 v100 = "nw_shoes_create_request";
                __int16 v101 = 2082;
                uint64_t v102 = a1 + 151;
                __int16 v103 = 2082;
                uint64_t v104 = "bundle_id";
                __int16 v105 = 2080;
                *(void *)os_log_type_t v106 = __s;
                _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s sending tlv: %{public}s(%s)", buf, 0x2Au);
              }
              unsigned __int16 v73 = strlen(__s);
              v57 += nw_shoes_add_tlv((uint64_t)v35 + (unsigned __int16)(v57 + 2), (unsigned __int16)(v25 - (v57 + 2)), 3u, v73, __s);
            }
            if ((v88 & 1) == 0)
            {
              LOBYTE(__src) = v86;
              *(_WORD *)((char *)&__src + 1) = v79;
              if ((unsigned __int16)v25 > (unsigned __int16)(v57 + 2))
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v74 = *((void *)v3 + 237);
                if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136447234;
                  __int16 v100 = "nw_shoes_create_request";
                  __int16 v101 = 2082;
                  uint64_t v102 = a1 + 151;
                  __int16 v103 = 2082;
                  uint64_t v104 = "multipath";
                  __int16 v105 = 1024;
                  *(_DWORD *)os_log_type_t v106 = v86;
                  *(_WORD *)&v106[4] = 1024;
                  *(_DWORD *)&v106[6] = __rev16(v79);
                  _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s sending tlv: %{public}s(%u/%u)", buf, 0x2Cu);
                }
                v57 += nw_shoes_add_tlv((uint64_t)v35 + (unsigned __int16)(v57 + 2), (unsigned __int16)(v25 - (v57 + 2)), 5u, 3uLL, &__src);
              }
            }
            if (v22 && (unsigned __int16)v25 > (unsigned __int16)(v57 + 2))
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v75 = *((void *)v3 + 237);
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446978;
                __int16 v100 = "nw_shoes_create_request";
                __int16 v101 = 2082;
                uint64_t v102 = a1 + 151;
                __int16 v103 = 2082;
                uint64_t v104 = "udp_associate";
                __int16 v105 = 1024;
                *(_DWORD *)os_log_type_t v106 = __rev16(v22);
                _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s sending tlv: %{public}s(%u)", buf, 0x26u);
              }
              v57 += nw_shoes_add_tlv((uint64_t)v35 + (unsigned __int16)(v57 + 2), (unsigned __int16)(v25 - (v57 + 2)), 6u, 2uLL, &v93);
            }
            *char v35 = bswap32(v57) >> 16;
            if (type == nw_endpoint_type_bonjour_service) {
              __int16 v76 = 0;
            }
            else {
              __int16 v76 = __rev16(nw_endpoint_get_port(v2));
            }
            *(_WORD *)((char *)v35 + 3) = v76;
            if (!v2) {
              goto LABEL_100;
            }
            goto LABEL_99;
          }
LABEL_117:
          unsigned int __src = bswap32(v26);
          if ((unsigned __int16)v25 > (unsigned __int16)(v57 + 2))
          {
            int v83 = v21;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v67 = *((void *)v3 + 237);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446978;
              __int16 v100 = "nw_shoes_create_request";
              __int16 v101 = 2082;
              uint64_t v102 = a1 + 151;
              __int16 v103 = 2082;
              uint64_t v104 = "traffic_class";
              __int16 v105 = 1024;
              *(_DWORD *)os_log_type_t v106 = v26;
              _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s sending tlv: %{public}s(%u)", buf, 0x26u);
            }
            v57 += nw_shoes_add_tlv((uint64_t)v35 + (unsigned __int16)(v57 + 2), (unsigned __int16)(v25 - (v57 + 2)), 1u, 4uLL, &__src);
            int v21 = v83;
          }
          goto LABEL_121;
        }
      }
      size_t v50 = 1;
      unsigned int v77 = v26;
      unsigned int v78 = v22;
      if (bonjour_service_domain) {
        goto LABEL_71;
      }
      goto LABEL_78;
    }
LABEL_107:
    unsigned int v79 = alternate_port;
    address = nw_endpoint_get_address(v2);
    if (address->sa_family == 30)
    {
      if ((*(unsigned char *)(a1 + 235) & 2) != 0) {
        char v65 = 5;
      }
      else {
        char v65 = 2;
      }
      *((unsigned char *)v35 + 2) = v65;
      *(sockaddr *)((char *)v35 + 5) = *(sockaddr *)&address->sa_data[6];
      unsigned int v57 = 19;
      if (!v26) {
        goto LABEL_121;
      }
    }
    else
    {
      if ((*(unsigned char *)(a1 + 235) & 2) != 0) {
        char v66 = 6;
      }
      else {
        char v66 = 3;
      }
      *((unsigned char *)v35 + 2) = v66;
      *(_DWORD *)((char *)v35 + 5) = *(_DWORD *)&address->sa_data[2];
      unsigned int v57 = 7;
      if (!v26) {
        goto LABEL_121;
      }
    }
    goto LABEL_117;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t ___ZL22nw_protocol_shoes_sendP11nw_protocolPhj_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL23nw_shoes_create_requestP18_nw_protocol_shoes_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    char v2 = 32;
    goto LABEL_5;
  }
  if (a2 == 2)
  {
    char v2 = 64;
LABEL_5:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= v2;
  }
  return 1;
}

void ___ZL29nw_shoes_is_multipath_allowedv_block_invoke()
{
  uint64_t v0 = (void *)nw_utilities_copy_local_entitlement_value("com.apple.developer.networking.multipath_extended");
  if (v0)
  {
    id v1 = v0;
    if (object_getClass(v0) == (Class)MEMORY[0x1E4F14570] && xpc_BOOL_get_value(v1)) {
      nw_shoes_is_multipath_allowed(void)::isAllowed = 1;
    }
    xpc_release(v1);
  }
}

uint64_t nw_protocol_shoes_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v17 = "nw_protocol_shoes_connect";
    char v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v17 = "nw_protocol_shoes_connect";
      int v9 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v14)
      {
        unsigned int v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v17 = "nw_protocol_shoes_connect";
        int v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v17 = "nw_protocol_shoes_connect";
          __int16 v18 = 2082;
          int v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v6) {
          return 0;
        }
        goto LABEL_39;
      }
      if (!v11) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v17 = "nw_protocol_shoes_connect";
      int v9 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_38;
  }
  if (!a1->handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v17 = "nw_protocol_shoes_connect";
    char v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v17 = "nw_protocol_shoes_connect";
      int v9 = "%{public}s called with null shoes";
      goto LABEL_37;
    }
    if (!v14)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v17 = "nw_protocol_shoes_connect";
      int v9 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_37;
    }
    uint64_t v12 = (char *)__nw_create_backtrace_string();
    unsigned int v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v17 = "nw_protocol_shoes_connect";
      int v9 = "%{public}s called with null shoes, no backtrace";
      goto LABEL_37;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v17 = "nw_protocol_shoes_connect";
      __int16 v18 = 2082;
      int v19 = v12;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null shoes, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
LABEL_38:
    if (!v6) {
      return 0;
    }
LABEL_39:
    free(v6);
    return 0;
  }
  output_handler = a1->output_handler;
  if (!output_handler) {
    return 1;
  }
  callbacks = output_handler->callbacks;
  if (!callbacks) {
    return 0;
  }
  connect = (uint64_t (*)(void))callbacks->connect;
  if (!connect) {
    return 0;
  }

  return connect();
}

BOOL nw_protocol_shoes_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[150] == 2;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_shoes_waiting_for_output";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null shoes";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      unsigned int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_protocol_shoes_waiting_for_output";
      __int16 v16 = 2082;
      unsigned int v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_protocol_shoes_waiting_for_output";
  id v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      unsigned int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_protocol_shoes_waiting_for_output";
      __int16 v16 = 2082;
      unsigned int v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  unsigned int v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_shoes_waiting_for_output";
    unsigned int v7 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_shoes_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v24 = "nw_protocol_shoes_finalize_output_frames";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v16 = "%{public}s called with null protocol";
      goto LABEL_53;
    }
    if (!v21)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_53;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      char v24 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v25 = 2082;
      unsigned int v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_54:
    if (!v13) {
      return 0;
    }
LABEL_55:
    free(v13);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v24 = "nw_protocol_shoes_finalize_output_frames";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v16 = "%{public}s called with null shoes";
      goto LABEL_53;
    }
    if (!v21)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v16 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_53;
    }
    int v19 = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        char v24 = "nw_protocol_shoes_finalize_output_frames";
        __int16 v25 = 2082;
        unsigned int v26 = v19;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null shoes, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      if (!v13) {
        return 0;
      }
      goto LABEL_55;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v16 = "%{public}s called with null shoes, no backtrace";
LABEL_53:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  int v3 = *((unsigned __int8 *)handle + 150);
  if (v3 == 6) {
    goto LABEL_8;
  }
  if (v3 != 4) {
    return 0;
  }
  tqh_first = a2->tqh_first;
  unsigned int v5 = handle[35];
  if (a2->tqh_first)
  {
    while (v5)
    {
      uint64_t v9 = (uint64_t)tqh_first;
      tqh_first = (nw_frame *)*((void *)tqh_first + 4);
      if (!tqh_first && !*(void *)(v9 + 40)) {
        tqh_first = 0;
      }
      int v10 = *(_DWORD *)(v9 + 52);
      if (v10)
      {
        unsigned int v11 = v10 - (*(_DWORD *)(v9 + 56) + *(_DWORD *)(v9 + 60));
        if (v11 < v5) {
          unsigned int v8 = 0;
        }
        else {
          unsigned int v8 = v5;
        }
        if (v11 < v5 && v10 != 0) {
          unsigned int v8 = v10 - (*(_DWORD *)(v9 + 56) + *(_DWORD *)(v9 + 60));
        }
      }
      else
      {
        unsigned int v8 = 0;
      }
      nw_frame_unclaim(v9, (uint64_t)a2, v8, 0);
      unsigned int v5 = handle[35] - v8;
      handle[35] = v5;
      if (!tqh_first) {
        goto LABEL_6;
      }
    }
    goto LABEL_7;
  }
LABEL_6:
  if (!v5) {
LABEL_7:
  }
    *((unsigned char *)handle + 150) = 5;
LABEL_8:
  os_log_type_t v6 = *(uint64_t (**)(void))(*(void *)(*((void *)handle + 4) + 24) + 96);

  return v6();
}

uint64_t nw_protocol_shoes_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v56 = "nw_protocol_shoes_get_output_frames";
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v38, &type, &v53)) {
      goto LABEL_84;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v53)
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_84;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v56 = "nw_protocol_shoes_get_output_frames";
        size_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v43 = os_log_type_enabled(v39, type);
      if (!backtrace_string)
      {
        if (!v43) {
          goto LABEL_84;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v56 = "nw_protocol_shoes_get_output_frames";
        size_t v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_83;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v56 = "nw_protocol_shoes_get_output_frames";
        __int16 v57 = 2082;
        uint64_t v58 = backtrace_string;
        id v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_69:
        _os_log_impl(&dword_1830D4000, v39, v40, v44, buf, 0x16u);
      }
LABEL_70:
      free(backtrace_string);
      goto LABEL_84;
    }
    os_log_type_t v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    if (!os_log_type_enabled(v39, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    uint32_t v56 = "nw_protocol_shoes_get_output_frames";
    size_t v41 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
LABEL_84:
    if (v38) {
      free(v38);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v56 = "nw_protocol_shoes_get_output_frames";
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v38, &type, &v53)) {
      goto LABEL_84;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v56 = "nw_protocol_shoes_get_output_frames";
      size_t v41 = "%{public}s called with null shoes";
      goto LABEL_83;
    }
    if (!v53)
    {
      os_log_type_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v56 = "nw_protocol_shoes_get_output_frames";
      size_t v41 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v45 = os_log_type_enabled(v39, type);
    if (backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v56 = "nw_protocol_shoes_get_output_frames";
        __int16 v57 = 2082;
        uint64_t v58 = backtrace_string;
        id v44 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
        goto LABEL_69;
      }
      goto LABEL_70;
    }
    if (!v45) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    uint32_t v56 = "nw_protocol_shoes_get_output_frames";
    size_t v41 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_83;
  }
  int v9 = *((unsigned __int8 *)handle + 150);
  if (v9 == 6)
  {
    __int16 v25 = *(uint64_t (**)(void))(*(void *)(handle[4] + 24) + 88);
    return v25();
  }
  if (v9 != 2) {
    return 0;
  }
  request = (unsigned __int8 *)nw_shoes_create_request((uint64_t)a1->handle);
  if (!request)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v27 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint32_t v56 = "nw_shoes_internal_disconnect";
      __int16 v57 = 2082;
      uint64_t v58 = (char *)handle + 151;
      _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s ", buf, 0x16u);
    }
    *((unsigned char *)handle + 150) = 7;
    (*(void (**)(void *, void))(handle[3] + 48))(handle, 0);
    return 0;
  }
  unsigned int v11 = request;
  unsigned int v12 = bswap32(*(unsigned __int16 *)request) >> 16;
  BOOL v13 = a1->handle;
  if (!v13)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v56 = "nw_protocol_add_buffer_to_output_frames";
    BOOL v46 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v46, &type, &v53)) {
      goto LABEL_97;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v56 = "nw_protocol_add_buffer_to_output_frames";
      size_t v49 = "%{public}s called with null shoes";
    }
    else if (v53)
    {
      size_t v50 = (char *)__nw_create_backtrace_string();
      BOOL v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v51 = os_log_type_enabled(v47, type);
      if (v50)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v56 = "nw_protocol_add_buffer_to_output_frames";
          __int16 v57 = 2082;
          uint64_t v58 = v50;
          _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null shoes, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v50);
        goto LABEL_97;
      }
      if (!v51)
      {
LABEL_97:
        if (v46) {
          free(v46);
        }
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v56 = "nw_protocol_add_buffer_to_output_frames";
      size_t v49 = "%{public}s called with null shoes, no backtrace";
    }
    else
    {
      BOOL v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v56 = "nw_protocol_add_buffer_to_output_frames";
      size_t v49 = "%{public}s called with null shoes, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v47, v48, v49, buf, 0xCu);
    goto LABEL_97;
  }
  unsigned int v14 = v12 + 2;
  int v15 = ((uint64_t (*)(void))a1->output_handler->callbacks->get_output_frames)();
  int v16 = v15;
  tqh_first = a6->tqh_first;
  if (!a6->tqh_first || !v15)
  {
    if (v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v28 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint32_t v56 = "nw_protocol_add_buffer_to_output_frames";
        __int16 v57 = 2082;
        uint64_t v58 = (char *)v13 + 151;
        __int16 v59 = 1024;
        *(_DWORD *)__int16 v60 = v16;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Output handler reported %u frames to write, but array is empty", buf, 0x1Cu);
      }
    }
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v29 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v30 = v11[2];
      *(_DWORD *)buf = 136446978;
      uint32_t v56 = "nw_protocol_shoes_add_request_to_output_frames";
      __int16 v57 = 2082;
      uint64_t v58 = (char *)handle + 151;
      __int16 v59 = 1024;
      *(_DWORD *)__int16 v60 = v30;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v12;
      _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Failed to send shoes request (type %u inner length %u)", buf, 0x22u);
    }
    free(v11);
    return 0;
  }
  unsigned int v52 = v12;
  BOOL v18 = v11;
  while (1)
  {
    int v19 = (nw_frame *)*((void *)tqh_first + 4);
    if (v19 || *((void *)tqh_first + 5))
    {
      uint64_t v20 = *((void *)tqh_first + 14);
      if (!v20) {
        goto LABEL_20;
      }
    }
    else
    {
      int v19 = 0;
      uint64_t v20 = *((void *)tqh_first + 14);
      if (!v20) {
        goto LABEL_20;
      }
    }
    if ((*((_WORD *)tqh_first + 102) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(tqh_first, *((void *)tqh_first + 11)))
    {
      LODWORD(v20) = 0;
LABEL_20:
      unsigned int v22 = 0;
      goto LABEL_21;
    }
    LODWORD(v20) = *((_DWORD *)tqh_first + 13);
    uint64_t v21 = *((unsigned int *)tqh_first + 14);
    if (v20) {
      LODWORD(v20) = v20 - (v21 + *((_DWORD *)tqh_first + 15));
    }
    unsigned int v22 = (void *)(*((void *)tqh_first + 14) + v21);
LABEL_21:
    size_t v23 = v20 >= v14 ? v14 : v20;
    memcpy(v22, v18, v23);
    if (!nw_frame_claim((uint64_t)tqh_first, v24, v23, 0)) {
      break;
    }
    v13[35] += v23;
    if (v19)
    {
      v18 += v23;
      tqh_first = v19;
      v14 -= v23;
      if (v14) {
        continue;
      }
    }
    goto LABEL_43;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v31 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    uint32_t v56 = "nw_protocol_add_buffer_to_output_frames";
    __int16 v57 = 2082;
    uint64_t v58 = (char *)v13 + 151;
    __int16 v59 = 1024;
    *(_DWORD *)__int16 v60 = v23;
    _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Claiming frame with %u bytes failed", buf, 0x1Cu);
  }
LABEL_43:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v32 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    output_handler = a1->output_handler;
    if (!output_handler
      || (get_output_local_nw_endpoint_t endpoint = (uint64_t (*)(void))output_handler->callbacks->get_output_local_endpoint) == 0
      || (uint64_t default_input_handler = (nw_protocol *)get_output_local_endpoint()) == 0)
    {
      uint64_t default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        get_local_nw_endpoint_t endpoint = (uint64_t (*)(void))default_input_handler->callbacks->get_local_endpoint;
        if (get_local_endpoint) {
          uint64_t default_input_handler = (nw_protocol *)get_local_endpoint();
        }
        else {
          uint64_t default_input_handler = 0;
        }
      }
    }
    int v37 = v11[2];
    *(_DWORD *)buf = 136447234;
    uint32_t v56 = "nw_protocol_shoes_add_request_to_output_frames";
    __int16 v57 = 2082;
    uint64_t v58 = (char *)handle + 151;
    __int16 v59 = 2114;
    *(void *)__int16 v60 = default_input_handler;
    *(_WORD *)&v60[8] = 1024;
    int v61 = v37;
    __int16 v62 = 1024;
    unsigned int v63 = v52;
    _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Sent shoes request: local address %{public}@ type %u inner length %u with TFO", buf, 0x2Cu);
  }
  free(v11);
  *((unsigned char *)handle + 150) = 4;
  return 1;
}

uint64_t nw_protocol_shoes_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v26 = "nw_protocol_shoes_get_input_frames";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v15, &type, &v23)) {
      goto LABEL_43;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        int v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_43;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v26 = "nw_protocol_shoes_get_input_frames";
        BOOL v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (!v20) {
          goto LABEL_43;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v26 = "nw_protocol_shoes_get_input_frames";
        BOOL v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_42;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v26 = "nw_protocol_shoes_get_input_frames";
        __int16 v27 = 2082;
        char v28 = backtrace_string;
        uint64_t v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v16, v17, v21, buf, 0x16u);
      }
LABEL_33:
      free(backtrace_string);
      goto LABEL_43;
    }
    int v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v26 = "nw_protocol_shoes_get_input_frames";
    BOOL v18 = "%{public}s called with null protocol";
LABEL_42:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
LABEL_43:
    if (v15) {
      free(v15);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v26 = "nw_protocol_shoes_get_input_frames";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v15, &type, &v23)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v26 = "nw_protocol_shoes_get_input_frames";
      BOOL v18 = "%{public}s called with null shoes";
      goto LABEL_42;
    }
    if (!v23)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v26 = "nw_protocol_shoes_get_input_frames";
      BOOL v18 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v22 = os_log_type_enabled(v16, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v26 = "nw_protocol_shoes_get_input_frames";
        __int16 v27 = 2082;
        char v28 = backtrace_string;
        uint64_t v21 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v22) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v26 = "nw_protocol_shoes_get_input_frames";
    BOOL v18 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_42;
  }
  if (handle[150] != 6) {
    return 0;
  }
  uint64_t v7 = *((void *)handle + 15);
  if (v7)
  {
    if (a5)
    {
      int v8 = 1;
      while (1)
      {
        uint64_t v10 = *(void *)(v7 + 32);
        unsigned int v11 = *(void **)(v7 + 40);
        int v9 = (nw_frame **)(v7 + 32);
        if (v10)
        {
          *(void *)(v10 + 40) = v11;
          unsigned int v11 = *(void **)(v7 + 40);
        }
        else
        {
          *((void *)handle + 16) = v11;
        }
        *unsigned int v11 = v10;
        *int v9 = 0;
        *(void *)(v7 + 40) = 0;
        tqh_last = a6->tqh_last;
        *(void *)(v7 + 40) = tqh_last;
        *tqh_last = (nw_frame *)v7;
        a6->tqh_last = v9;
        if (a5 == v8) {
          break;
        }
        uint64_t v7 = *((void *)handle + 15);
        ++v8;
        if (!v7) {
          return (v8 - 1);
        }
      }
    }
    return a5;
  }
  BOOL v13 = *(uint64_t (**)(void))(*(void *)(*((void *)handle + 4) + 24) + 80);

  return v13();
}

BOOL nw_shoes_read_into_buffer(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    return 0;
  }
  unsigned int v7 = 0;
  if (a2)
  {
    uint64_t v8 = a2 + a4;
    while (1)
    {
      if (!v4) {
        goto LABEL_44;
      }
      uint64_t v9 = *(void *)(v4 + 32);
      if (v9 || *(void *)(v4 + 40))
      {
        if (*(void *)(v4 + 112)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v9 = 0;
        if (*(void *)(v4 + 112))
        {
LABEL_10:
          if ((*(_WORD *)(v4 + 204) & 0x100) == 0
            || !g_channel_check_validity
            || g_channel_check_validity(v4, *(void *)(v4 + 88)))
          {
            int v10 = *(_DWORD *)(v4 + 52);
            if (v10)
            {
              uint64_t v11 = *(unsigned int *)(v4 + 56);
              unsigned int v12 = v10 - (v11 + *(_DWORD *)(v4 + 60));
              if (v12)
              {
                if (v12 >= a3 - v7) {
                  size_t v13 = a3 - v7;
                }
                else {
                  size_t v13 = v12;
                }
                memcpy((void *)(v8 + v7), (const void *)(*(void *)(v4 + 112) + v11), v13);
                *(_DWORD *)(a1 + 136) += v13;
                v7 += v13;
                nw_frame_claim(v4, v14, v13, 0);
              }
            }
          }
        }
      }
      int v15 = *(_DWORD *)(v4 + 52);
      if (!v15 || v15 == *(_DWORD *)(v4 + 56) + *(_DWORD *)(v4 + 60)) {
        uint64_t v4 = v9;
      }
      if (v7 == a3) {
        goto LABEL_43;
      }
    }
  }
  while (v4)
  {
    uint64_t v16 = *(void *)(v4 + 32);
    if (v16 || *(void *)(v4 + 40))
    {
      if (*(void *)(v4 + 112)) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (*(void *)(v4 + 112))
      {
LABEL_30:
        if ((*(_WORD *)(v4 + 204) & 0x100) == 0
          || !g_channel_check_validity
          || g_channel_check_validity(v4, *(void *)(v4 + 88)))
        {
          int v17 = *(_DWORD *)(v4 + 52);
          if (v17)
          {
            unsigned int v18 = v17 - (*(_DWORD *)(v4 + 56) + *(_DWORD *)(v4 + 60));
            if (v18)
            {
              if (v18 >= a3 - v7) {
                int v19 = a3 - v7;
              }
              else {
                int v19 = v18;
              }
              *(_DWORD *)(a1 + 136) += v19;
              v7 += v19;
              nw_frame_claim(v4, a2, v19, 0);
            }
          }
        }
      }
    }
    int v20 = *(_DWORD *)(v4 + 52);
    if (!v20 || v20 == *(_DWORD *)(v4 + 56) + *(_DWORD *)(v4 + 60)) {
      uint64_t v4 = v16;
    }
    if (v7 == a3)
    {
LABEL_43:
      unsigned int v7 = a3;
      break;
    }
  }
LABEL_44:
  for (uint64_t i = *(void *)(a1 + 120); v4 != i; uint64_t i = *(void *)(a1 + 120))
  {
    if (gLogDatapath)
    {
      log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        char v28 = "nw_shoes_read_into_buffer";
        __int16 v29 = 2082;
        uint64_t v30 = a1 + 151;
        __int16 v31 = 2048;
        v32[0] = i;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Finished reading from frame %p", buf, 0x20u);
      }
    }
    uint64_t v22 = *(void *)(i + 32);
    char v23 = *(void **)(i + 40);
    if (v22)
    {
      *(void *)(v22 + 40) = v23;
      char v23 = *(void **)(i + 40);
    }
    else
    {
      *(void *)(a1 + 128) = v23;
    }
    *char v23 = v22;
    *(void *)(i + 32) = 0;
    *(void *)(i + 40) = 0;
    nw_frame_finalize(i);
  }
  if (v7 >= a3) {
    return 1;
  }
  if (!gLogDatapath) {
    return 0;
  }
  __int16 v25 = __nwlog_obj();
  BOOL result = os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)buf = 136446978;
    char v28 = "nw_shoes_read_into_buffer";
    __int16 v29 = 2082;
    uint64_t v30 = a1 + 151;
    __int16 v31 = 1024;
    LODWORD(v32[0]) = v7;
    WORD2(v32[0]) = 1024;
    *(_DWORD *)((char *)v32 + 6) = a3;
    _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Read incomplete (%u < %u)", buf, 0x22u);
    return 0;
  }
  return result;
}

void nw_shoes_read_reply_tlvs(uint64_t a1, unsigned __int8 *a2, unsigned int a3, char a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v12 = "nw_shoes_read_reply_tlvs";
      __int16 v13 = 2082;
      uint64_t v14 = a1 + 151;
      __int16 v15 = 1024;
      unsigned int v16 = a3;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s received shoes tlv(s) with total tlv buffer length %u", buf, 0x1Cu);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = ___ZL24nw_shoes_read_reply_tlvsP18_nw_protocol_shoesPhtb_block_invoke;
    void v9[3] = &__block_descriptor_tmp_36;
    void v9[4] = a1;
    char v10 = a4;
    nw_shoes_tlv_parser(a2, a3, v9);
  }
}

void ___ZL24nw_shoes_read_reply_tlvsP18_nw_protocol_shoesPhtb_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      os_log_type_t v6 = (const char *)(v5 + 151);
    }
    else {
      os_log_type_t v6 = "";
    }
    unint64_t v7 = *a2;
    if (v7 > 9) {
      uint64_t v8 = "unknown";
    }
    else {
      uint64_t v8 = off_1E523A4C0[v7];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2082;
    *(void *)&long long v87 = v8;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s processing shoes tlv: %{public}s", buf, 0x20u);
  }
  int v9 = *a2;
  if (v9 == 8)
  {
    unsigned int v36 = *(unsigned __int16 *)(a2 + 1);
    unsigned int v37 = __rev16(v36);
    int v38 = a2[4];
    if (v38 == 2 && v36 != 4096)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v39 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      uint64_t v40 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v40) {
        size_t v41 = (const char *)(v40 + 151);
      }
      else {
        size_t v41 = "";
      }
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v87) = v37;
      WORD2(v87) = 2048;
      *(void *)((char *)&v87 + 6) = 16;
      unint64_t v42 = "%{public}s %{public}s Invalid TLV length (%u != %zu)";
      goto LABEL_86;
    }
    if (v38 == 30 && v36 != 7168)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v39 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      uint64_t v48 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v48) {
        size_t v49 = (const char *)(v48 + 151);
      }
      else {
        size_t v49 = "";
      }
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v49;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v87) = v37;
      WORD2(v87) = 2048;
      *(void *)((char *)&v87 + 6) = 28;
      unint64_t v42 = "%{public}s %{public}s Invalid TLV length (%u != %zu)";
      goto LABEL_86;
    }
    nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)(a2 + 3));
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v55 = gLogObj;
    if (address)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v56 = *(void *)(a1 + 32);
        if (v56) {
          __int16 v57 = (const char *)(v56 + 151);
        }
        else {
          __int16 v57 = "";
        }
        description = nw_endpoint_get_description(address);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v57;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&long long v87 = description;
        _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s detected resolved_endpoint endpoint for outer connection: %s", buf, 0x20u);
      }
      __int16 v59 = *(void **)(*(void *)(a1 + 32) + 88);
      if (!v59)
      {
        *(void *)(*(void *)(a1 + 32) + 88) = nw_shoes_create_metadata();
        __int16 v59 = *(void **)(*(void *)(a1 + 32) + 88);
        if (!v59)
        {
          __nwlog_obj();
          *(_DWORD *)char v88 = 136446210;
          uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
          unsigned __int16 v73 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v84 = 0;
          if (!__nwlog_fault(v73, &type, &v84)) {
            goto LABEL_178;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v74 = __nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v76 = "%{public}s called with null metadata";
            goto LABEL_177;
          }
          if (!v84)
          {
            uint64_t v74 = __nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v76 = "%{public}s called with null metadata, backtrace limit exceeded";
            goto LABEL_177;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v74 = __nwlog_obj();
          os_log_type_t v75 = type;
          BOOL v81 = os_log_type_enabled(v74, type);
          if (!backtrace_string)
          {
            if (!v81) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v76 = "%{public}s called with null metadata, no backtrace";
            goto LABEL_177;
          }
          if (v81)
          {
            *(_DWORD *)char v88 = 136446466;
            uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v90 = 2082;
            uint64_t v91 = backtrace_string;
            unsigned int v79 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
            goto LABEL_153;
          }
          goto LABEL_154;
        }
      }
      id v60 = v59;
      id v61 = *((id *)v60 + 1);

      if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
        dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
      }
      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v61, nw_protocol_shoes_get_definition(void)::proxy_definition))
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL39nw_shoes_metadata_add_resolved_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke;
        *(void *)&long long v87 = &__block_descriptor_tmp_45;
        *((void *)&v87 + 1) = address;
        uint64_t v62 = *((void *)v60 + 4);
        if (v62) {
          ___ZL39nw_shoes_metadata_add_resolved_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke((uint64_t)buf, v62);
        }
        goto LABEL_113;
      }
      __nwlog_obj();
      *(_DWORD *)char v88 = 136446210;
      uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
      unsigned __int16 v73 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v84 = 0;
      if (__nwlog_fault(v73, &type, &v84))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v74 = __nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v76 = "%{public}s metadata must be shoes";
LABEL_177:
          _os_log_impl(&dword_1830D4000, v74, v75, v76, v88, 0xCu);
          goto LABEL_178;
        }
        if (!v84)
        {
          uint64_t v74 = __nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v76 = "%{public}s metadata must be shoes, backtrace limit exceeded";
          goto LABEL_177;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v74 = __nwlog_obj();
        os_log_type_t v75 = type;
        BOOL v78 = os_log_type_enabled(v74, type);
        if (!backtrace_string)
        {
          if (!v78) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v76 = "%{public}s metadata must be shoes, no backtrace";
          goto LABEL_177;
        }
        if (v78)
        {
          *(_DWORD *)char v88 = 136446466;
          uint64_t v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v90 = 2082;
          uint64_t v91 = backtrace_string;
          unsigned int v79 = "%{public}s metadata must be shoes, dumping backtrace:%{public}s";
LABEL_153:
          _os_log_impl(&dword_1830D4000, v74, v75, v79, v88, 0x16u);
        }
LABEL_154:
        free(backtrace_string);
        if (!v73) {
          goto LABEL_113;
        }
        goto LABEL_179;
      }
LABEL_178:
      if (!v73)
      {
LABEL_113:
        nw_endpoint_t v35 = address;
LABEL_114:
        os_release(v35);
        return;
      }
LABEL_179:
      free(v73);
      goto LABEL_113;
    }
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v70 = *(void *)(a1 + 32);
    if (v70) {
      unint64_t v71 = (const char *)(v70 + 151);
    }
    else {
      unint64_t v71 = "";
    }
LABEL_124:
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v71;
    _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_ERROR, "%{public}s %{public}s failed to create endpoint", buf, 0x16u);
    return;
  }
  if (v9 == 7)
  {
    unsigned int v43 = *(unsigned __int16 *)(a2 + 1);
    unsigned int v44 = __rev16(v43);
    int v45 = a2[4];
    if (v45 == 2 && v43 != 4096)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v39 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      uint64_t v46 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v46) {
        BOOL v47 = (const char *)(v46 + 151);
      }
      else {
        BOOL v47 = "";
      }
LABEL_67:
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v47;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v87) = v44;
      WORD2(v87) = 2048;
      *(void *)((char *)&v87 + 6) = 8;
      unint64_t v42 = "%{public}s %{public}s Invalid TLV length (%u != %zu)";
      goto LABEL_86;
    }
    if (v45 == 30 && v43 != 7168)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v39 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      uint64_t v50 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v50) {
        BOOL v47 = (const char *)(v50 + 151);
      }
      else {
        BOOL v47 = "";
      }
      goto LABEL_67;
    }
    nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)(a2 + 3));
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v55 = gLogObj;
    if (address)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v63 = *(void *)(a1 + 32);
        if (v63) {
          uint64_t v64 = (const char *)(v63 + 151);
        }
        else {
          uint64_t v64 = "";
        }
        char v65 = nw_endpoint_get_description(address);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v64;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&long long v87 = v65;
        _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s detected remote endpoint from outer connection: %s", buf, 0x20u);
      }
      char v66 = *(void **)(*(void *)(a1 + 32) + 88);
      if (v66
        || (*(void *)(*(void *)(a1 + 32) + 88) = nw_shoes_create_metadata(),
            (char v66 = *(void **)(*(void *)(a1 + 32) + 88)) != 0))
      {
        unint64_t v67 = v66;
        id v68 = v67[1];

        if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
        }
        if (nw_protocol_definition_is_equal_unsafe((uint64_t)v68, nw_protocol_shoes_get_definition(void)::proxy_definition))
        {
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL37nw_shoes_metadata_set_remote_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke;
          *(void *)&long long v87 = &__block_descriptor_tmp_44;
          *((void *)&v87 + 1) = address;
          int v69 = v67[4];
          if (v69) {
            ___ZL37nw_shoes_metadata_set_remote_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke((uint64_t)buf, v69);
          }
          goto LABEL_113;
        }
        __nwlog_obj();
        *(_DWORD *)char v88 = 136446210;
        uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
        unsigned __int16 v73 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v84 = 0;
        if (__nwlog_fault(v73, &type, &v84))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v74 = __nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            __int16 v76 = "%{public}s metadata must be shoes";
            goto LABEL_177;
          }
          if (!v84)
          {
            uint64_t v74 = __nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            __int16 v76 = "%{public}s metadata must be shoes, backtrace limit exceeded";
            goto LABEL_177;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v74 = __nwlog_obj();
          os_log_type_t v75 = type;
          BOOL v80 = os_log_type_enabled(v74, type);
          if (!backtrace_string)
          {
            if (!v80) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            __int16 v76 = "%{public}s metadata must be shoes, no backtrace";
            goto LABEL_177;
          }
          if (v80)
          {
            *(_DWORD *)char v88 = 136446466;
            uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            __int16 v90 = 2082;
            uint64_t v91 = backtrace_string;
            unsigned int v79 = "%{public}s metadata must be shoes, dumping backtrace:%{public}s";
            goto LABEL_153;
          }
          goto LABEL_154;
        }
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)char v88 = 136446210;
        uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
        unsigned __int16 v73 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v84 = 0;
        if (!__nwlog_fault(v73, &type, &v84)) {
          goto LABEL_178;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v74 = __nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          __int16 v76 = "%{public}s called with null metadata";
          goto LABEL_177;
        }
        if (!v84)
        {
          uint64_t v74 = __nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          __int16 v76 = "%{public}s called with null metadata, backtrace limit exceeded";
          goto LABEL_177;
        }
        int v82 = (char *)__nw_create_backtrace_string();
        uint64_t v74 = __nwlog_obj();
        os_log_type_t v75 = type;
        BOOL v83 = os_log_type_enabled(v74, type);
        if (!v82)
        {
          if (!v83) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          __int16 v76 = "%{public}s called with null metadata, no backtrace";
          goto LABEL_177;
        }
        if (v83)
        {
          *(_DWORD *)char v88 = 136446466;
          uint64_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          __int16 v90 = 2082;
          uint64_t v91 = v82;
          _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s called with null metadata, dumping backtrace:%{public}s", v88, 0x16u);
        }
        free(v82);
      }
      goto LABEL_178;
    }
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v72 = *(void *)(a1 + 32);
    if (v72) {
      unint64_t v71 = (const char *)(v72 + 151);
    }
    else {
      unint64_t v71 = "";
    }
    goto LABEL_124;
  }
  if (v9 != 4) {
    return;
  }
  unsigned int v10 = *(unsigned __int16 *)(a2 + 1);
  if (!*(_WORD *)(a2 + 1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v39 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    unsigned int v51 = __rev16(v10);
    uint64_t v52 = *(void *)(a1 + 32);
    *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
    *(_DWORD *)buf = 136446978;
    *(_WORD *)&buf[12] = 2082;
    if (v52) {
      char v53 = (const char *)(v52 + 151);
    }
    else {
      char v53 = "";
    }
    *(void *)&buf[14] = v53;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v87) = v51;
    WORD2(v87) = 2048;
    *(void *)((char *)&v87 + 6) = 1;
    unint64_t v42 = "%{public}s %{public}s Invalid TLV length (%u < %zu)";
LABEL_86:
    _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, v42, buf, 0x26u);
    return;
  }
  if (a2[3])
  {
    uint64_t v11 = (void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 24) + 112))();
    if (v11)
    {
      unsigned int v12 = v11;
      id v13 = *(id *)(v12[13] + 136);

      id v14 = nw_path_copy_flow_registration(v13, *(void *)(a1 + 32));
      if (v13) {
        os_release(v13);
      }
      if (v14)
      {
        if ((char)a2[3] < 0)
        {
          __int16 v15 = __nwlog_obj();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = *(void *)(a1 + 32);
            if (v16) {
              uint64_t v17 = (const char *)(v16 + 151);
            }
            else {
              uint64_t v17 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v17;
            _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s detected expensive network from outer connection", buf, 0x16u);
          }
        }
        if ((a2[3] & 0x20) != 0)
        {
          unsigned int v18 = __nwlog_obj();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = *(void *)(a1 + 32);
            if (v19) {
              int v20 = (const char *)(v19 + 151);
            }
            else {
              int v20 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v20;
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s detected wifi network from outer connection", buf, 0x16u);
          }
        }
        if ((a2[3] & 0x40) != 0)
        {
          uint64_t v21 = __nwlog_obj();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *(void *)(a1 + 32);
            if (v22) {
              char v23 = (const char *)(v22 + 151);
            }
            else {
              char v23 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v23;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s detected cellular network from outer connection", buf, 0x16u);
          }
        }
        if ((a2[3] & 0x10) != 0)
        {
          uint64_t v24 = __nwlog_obj();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = *(void *)(a1 + 32);
            if (v25) {
              unsigned int v26 = (const char *)(v25 + 151);
            }
            else {
              unsigned int v26 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v26;
            _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s detected constrained network from outer connection", buf, 0x16u);
          }
        }
        unsigned int v27 = a2[3];
        if ((v27 & 8) != 0)
        {
          char v28 = __nwlog_obj();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = *(void *)(a1 + 32);
            if (v29) {
              uint64_t v30 = (const char *)(v29 + 151);
            }
            else {
              uint64_t v30 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v30;
            _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s detected denied interface from outer connection", buf, 0x16u);
          }
          effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v12);
          if (!effective_bundle_id)
          {
            if (nw_utilities_get_self_bundle_id::onceToken != -1) {
              dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_9);
            }
            effective_bundle_id = (const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
          }
          nw_shoes_notify_interface_denied(effective_bundle_id, v32);
          unsigned int v27 = a2[3];
        }
        char v33 = *(unsigned char *)(a1 + 40) == 0;
        int v34 = v14;
        BYTE4(v34[18].isa) = v27 & 0x70 | (v27 >> 4) & 8 | (v33 << 7) | BYTE4(v34[18].isa) & 7;

        nw_endpoint_t v35 = v34;
        goto LABEL_114;
      }
    }
  }
}

void nw_shoes_notify_interface_denied(const char *a1, double a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  double client = gotLoadHelper_x8__network_usage_policy_create_client(a2);
  if (!*(void *)(v3 + 1464))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_shoes_notify_interface_denied";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_shoes_notify_interface_denied";
      unint64_t v7 = "%{public}s called with null is_network_usage_policy_available()";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v15 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_shoes_notify_interface_denied";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null is_network_usage_policy_available(), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (!v15) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_shoes_notify_interface_denied";
      unint64_t v7 = "%{public}s called with null is_network_usage_policy_available(), no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_shoes_notify_interface_denied";
      unint64_t v7 = "%{public}s called with null is_network_usage_policy_available(), backtrace limit exceeded";
    }
LABEL_18:
    unsigned int v12 = v5;
    os_log_type_t v13 = v6;
LABEL_19:
    _os_log_impl(&dword_1830D4000, v12, v13, v7, buf, 0xCu);
    goto LABEL_20;
  }
  if (nw_shoes_get_network_usage_policy_client(void)::onceToken != -1) {
    dispatch_once(&nw_shoes_get_network_usage_policy_client(void)::onceToken, &__block_literal_global_43);
  }
  if (nw_shoes_get_network_usage_policy_client(void)::shared_policy_client)
  {
    perform_first_network_use_flow_delayInitStub(client);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_shoes_notify_interface_denied";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16))
  {
LABEL_20:
    if (!v4) {
      return;
    }
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    os_log_type_t v6 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_shoes_notify_interface_denied";
    unint64_t v7 = "%{public}s network_usage_policy_create_client failed";
    goto LABEL_18;
  }
  if (!v16)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    os_log_type_t v6 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_shoes_notify_interface_denied";
    unint64_t v7 = "%{public}s network_usage_policy_create_client failed, backtrace limit exceeded";
    goto LABEL_18;
  }
  uint64_t v8 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v9 = gLogObj;
  os_log_type_t v10 = type;
  BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v8)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_shoes_notify_interface_denied";
      unint64_t v7 = "%{public}s network_usage_policy_create_client failed, no backtrace";
      unsigned int v12 = v9;
      os_log_type_t v13 = v10;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v19 = "nw_shoes_notify_interface_denied";
    __int16 v20 = 2082;
    uint64_t v21 = v8;
    _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s network_usage_policy_create_client failed, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v8);
  if (v4) {
LABEL_21:
  }
    free(v4);
}

id *nw_shoes_create_metadata(void)
{
  if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
  }
  uint64_t v0 = (void *)nw_protocol_shoes_get_definition(void)::proxy_definition;

  return nw_protocol_metadata_create_singleton(v0);
}

uint64_t ___ZL37nw_shoes_metadata_set_remote_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    uint64_t v3 = os_retain(v3);
  }
  *a2 = v3;
  return 1;
}

uint64_t ___ZL39nw_shoes_metadata_add_resolved_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3)
  {
    uint64_t v3 = nw_array_create();
    *(void *)(a2 + 8) = v3;
  }
  nw_array_append(v3, *(void **)(a1 + 32));
  return 1;
}

uint64_t ___ZL40nw_shoes_get_network_usage_policy_clientv_block_invoke(double a1)
{
  uint64_t result = network_usage_policy_create_client_delayInitStub(a1);
  nw_shoes_get_network_usage_policy_client(void)::shared_policy_double client = result;
  return result;
}

uint64_t nw_protocol_shoes_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
    char v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v16, &type, &v24)) {
      goto LABEL_53;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
        uint64_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
        uint64_t v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
        __int16 v28 = 2082;
        uint64_t v29 = backtrace_string;
        uint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_42:
        _os_log_impl(&dword_1830D4000, v17, v18, v22, buf, 0x16u);
      }
LABEL_43:
      free(backtrace_string);
      goto LABEL_53;
    }
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_53;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
    uint64_t v19 = "%{public}s called with null protocol";
LABEL_52:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
LABEL_53:
    if (v16) {
      free(v16);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
    char v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v16, &type, &v24)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
      uint64_t v19 = "%{public}s called with null shoes";
      goto LABEL_52;
    }
    if (!v24)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
      uint64_t v19 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
        __int16 v28 = 2082;
        uint64_t v29 = backtrace_string;
        uint64_t v22 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (!v23) {
      goto LABEL_53;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v27 = "nw_protocol_shoes_remove_input_handler";
    uint64_t v19 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_52;
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2) {
    return 0;
  }
  output_handler = a1->output_handler;
  if (output_handler) {
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  }
  uint64_t v9 = handle[8];
  if (v9)
  {
    (*(void (**)(void))(*(void *)(v9 + 24) + 8))();
    handle[8] = 0;
  }
  os_log_type_t v10 = (void *)handle[10];
  if (v10)
  {
    nw_path_flow_registration_close(v10);
    BOOL v11 = (void *)handle[10];
    if (v11)
    {
      os_release(v11);
      handle[10] = 0;
    }
  }
  unsigned int v12 = (void *)handle[9];
  if (v12)
  {
    os_release(v12);
    handle[9] = 0;
  }
  os_log_type_t v13 = (void *)handle[11];
  if (v13)
  {
    os_release(v13);
    handle[11] = 0;
  }
  id v14 = (void *)handle[13];
  if (v14)
  {
    os_release(v14);
    handle[13] = 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  if (a3)
  {
    a1->handle = 0;
    BOOL v15 = (void *)handle[14];
    if (v15) {
      xpc_release(v15);
    }
    free(handle);
  }
  return 1;
}

BOOL nw_protocol_shoes_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v36 = "nw_protocol_shoes_add_input_handler";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v25, &type, &v33)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v36 = "nw_protocol_shoes_add_input_handler";
        __int16 v28 = "%{public}s called with null protocol";
LABEL_56:
        _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0xCu);
      }
LABEL_57:
      if (v25) {
        free(v25);
      }
      return 0;
    }
    if (!v33)
    {
      unsigned int v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v36 = "nw_protocol_shoes_add_input_handler";
        __int16 v28 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v26 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v30 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v36 = "nw_protocol_shoes_add_input_handler";
        __int16 v28 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v36 = "nw_protocol_shoes_add_input_handler";
      __int16 v37 = 2082;
      int v38 = backtrace_string;
      __int16 v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
      _os_log_impl(&dword_1830D4000, v26, v27, v31, buf, 0x16u);
    }
LABEL_47:
    free(backtrace_string);
    goto LABEL_57;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v36 = "nw_protocol_shoes_add_input_handler";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v25, &type, &v33)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v36 = "nw_protocol_shoes_add_input_handler";
        __int16 v28 = "%{public}s called with null shoes";
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if (!v33)
    {
      unsigned int v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v36 = "nw_protocol_shoes_add_input_handler";
        __int16 v28 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v26 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v32 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v36 = "nw_protocol_shoes_add_input_handler";
        __int16 v28 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v36 = "nw_protocol_shoes_add_input_handler";
      __int16 v37 = 2082;
      int v38 = backtrace_string;
      __int16 v31 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  uint64_t v5 = ((uint64_t (*)(nw_protocol *))a2->callbacks->get_remote_endpoint)(a2);
  nw_endpoint_type_t v6 = nw_endpoint_get_type(v5);
  if (v6 - 1 < 2)
  {
    nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    if (a2->output_handler)
    {
      if (v5)
      {
LABEL_6:
        unint64_t v7 = os_retain(v5);
LABEL_11:
        handle[15] = 0;
        handle[12] = v7;
        char tls = 1;
        *((unsigned char *)handle + 150) = 1;
        handle[16] = handle + 15;
        unsigned int v12 = (void *)((uint64_t (*)(void))a1->default_input_handler->callbacks->get_parameters)();
        if (!nw_parameters_get_tfo(v12)) {
          char tls = nw_parameters_get_tls(v12);
        }
        *((unsigned char *)handle + 235) = *((unsigned char *)handle + 235) & 0xFE | tls;
        id v13 = nw_parameters_copy_protocol_value(v12, (uint64_t)a1, "UDP");
        if (v13)
        {
          id v14 = v13;
          BOOL value = xpc_BOOL_get_value(v13);
          xpc_release(v14);
          if (value) {
            char v16 = 2;
          }
          else {
            char v16 = 0;
          }
        }
        else
        {
          char v16 = 0;
        }
        *((unsigned char *)handle + 235) = *((unsigned char *)handle + 235) & 0xFD | v16;
        id v17 = nw_parameters_copy_protocol_value(v12, (uint64_t)a1, "UDPAssociateSupported");
        if (v17)
        {
          os_log_type_t v18 = v17;
          BOOL v19 = xpc_BOOL_get_value(v17);
          xpc_release(v18);
          if (v19) {
            char v20 = 4;
          }
          else {
            char v20 = 0;
          }
        }
        else
        {
          char v20 = 0;
        }
        *((unsigned char *)handle + 235) = *((unsigned char *)handle + 235) & 0xFB | v20;
        id v21 = nw_parameters_copy_protocol_value(v12, (uint64_t)a1, "FixedBundleID");
        if (v21)
        {
          uint64_t v22 = v21;
          string_ptr = xpc_string_get_string_ptr(v21);
          xpc_release(v22);
          if (string_ptr) {
            handle[14] = xpc_string_create(string_ptr);
          }
        }
        char v24 = nw_parameters_copy_protocol_options_legacy(v12, a1);
        nw_protocol_options_get_log_id_str(v24, (unsigned char *)handle + 151, 84);
        if (v24) {
          os_release(v24);
        }
        return 1;
      }
    }
    else
    {
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      if (v5) {
        goto LABEL_6;
      }
    }
    unint64_t v7 = 0;
    goto LABEL_11;
  }
  nw_endpoint_type_t v8 = v6;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v9 = gLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446722;
    unsigned int v36 = "nw_protocol_shoes_add_input_handler";
    __int16 v37 = 2082;
    int v38 = (char *)handle + 151;
    __int16 v39 = 1024;
    nw_endpoint_type_t v40 = v8;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s protocol_shoes does not support endpoint type %u", buf, 0x1Cu);
    return 0;
  }
  return result;
}

void nw_shoes_metadata_enumerate_resolved_endpoints(void *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v7, &v18, &v17)) {
      goto LABEL_38;
    }
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (!os_log_type_enabled(v8, v18)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
      os_log_type_t v10 = "%{public}s called with null metadata";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v7) {
          return;
        }
LABEL_39:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
      os_log_type_t v10 = "%{public}s called with null metadata, no backtrace";
    }
    else
    {
      nw_endpoint_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (!os_log_type_enabled(v8, v18)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
      os_log_type_t v10 = "%{public}s called with null metadata, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }
  id v3 = a1;
  id v4 = *((id *)v3 + 1);

  if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
  }
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_shoes_get_definition(void)::proxy_definition))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v20 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    _OWORD v16[2] = __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke;
    v16[3] = &unk_1E523A328;
    v16[4] = buf;
    uint64_t v5 = *((void *)v3 + 4);
    if (v5)
    {
      __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke((uint64_t)v16, v5);
      nw_endpoint_type_t v6 = *(atomic_uchar **)(*(void *)&buf[8] + 24);
      if (v6)
      {
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 0x40000000;
        void v15[2] = __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke_2;
        v15[3] = &unk_1E523A350;
        v15[4] = a2;
        nw_array_apply(v6, (uint64_t)v15);
      }
    }
    _Block_object_dispose(buf, 8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v7, &v18, &v17)) {
    goto LABEL_38;
  }
  if (v18 == OS_LOG_TYPE_FAULT)
  {
    nw_endpoint_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v18;
    if (!os_log_type_enabled(v8, v18)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    os_log_type_t v10 = "%{public}s metadata must be shoes";
    goto LABEL_37;
  }
  if (!v17)
  {
    nw_endpoint_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v18;
    if (!os_log_type_enabled(v8, v18)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    os_log_type_t v10 = "%{public}s metadata must be shoes, backtrace limit exceeded";
    goto LABEL_37;
  }
  id v13 = (char *)__nw_create_backtrace_string();
  nw_endpoint_type_t v8 = __nwlog_obj();
  os_log_type_t v9 = v18;
  BOOL v14 = os_log_type_enabled(v8, v18);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    os_log_type_t v10 = "%{public}s metadata must be shoes, no backtrace";
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s metadata must be shoes, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_39;
  }
}

uint64_t __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 8);
  if (v3) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = os_retain(v3);
  }
  return 1;
}

uint64_t __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_protocol_shoes_parameters_set_udp(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v2 = xpc_BOOL_create(1);
    nw_parameters_set_protocol_value(a1, "UDP", v2);
    if (v2)
    {
      xpc_release(v2);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v12 = "nw_protocol_shoes_parameters_set_udp";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v12 = "nw_protocol_shoes_parameters_set_udp";
      nw_endpoint_type_t v6 = "%{public}s called with null protocol_parameters";
      goto LABEL_19;
    }
    if (!v9)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v12 = "nw_protocol_shoes_parameters_set_udp";
      nw_endpoint_type_t v6 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v12 = "nw_protocol_shoes_parameters_set_udp";
        __int16 v13 = 2082;
        BOOL v14 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v12 = "nw_protocol_shoes_parameters_set_udp";
      nw_endpoint_type_t v6 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_19:
      _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    }
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

void nw_protocol_shoes_parameters_set_udp_associate_supported(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v2 = xpc_BOOL_create(1);
    nw_parameters_set_protocol_value(a1, "UDPAssociateSupported", v2);
    if (v2)
    {
      xpc_release(v2);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
      nw_endpoint_type_t v6 = "%{public}s called with null protocol_parameters";
      goto LABEL_19;
    }
    if (!v9)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
      nw_endpoint_type_t v6 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
        __int16 v13 = 2082;
        BOOL v14 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
      nw_endpoint_type_t v6 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_19:
      _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    }
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

void nw_protocol_shoes_parameters_set_fixed_bundle_id(void *a1, char *string)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v3 = xpc_string_create(string);
    nw_parameters_set_protocol_value(a1, "FixedBundleID", v3);
    if (v3)
    {
      xpc_release(v3);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
  id v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
      unint64_t v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_19;
    }
    if (!v10)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
      unint64_t v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
        __int16 v14 = 2082;
        uint64_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
      unint64_t v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_19:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
}

void *nw_protocol_shoes_copy_definition()
{
  if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
  }
  BOOL result = (void *)nw_protocol_shoes_get_definition(void)::proxy_definition;
  if (nw_protocol_shoes_get_definition(void)::proxy_definition)
  {
    return os_retain(result);
  }
  return result;
}

BOOL nw_protocol_http_sniffing_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  os_log_type_t v6 = (char *)malloc_type_calloc(1uLL, 0x228uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    uint64_t v15 = __nwlog_obj();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    BOOL v19 = "strict_calloc";
    __int16 v20 = 2048;
    uint64_t v21 = 1;
    __int16 v22 = 2048;
    uint64_t v23 = 552;
    uint64_t v16 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v16);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v16);
  }
  bzero(v6, 0x228uLL);
  if (gLogDatapath)
  {
    char v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v19 = "nw_protocol_http_sniffing_create";
      __int16 v20 = 2082;
      uint64_t v21 = (uint64_t)(v6 + 114);
      __int16 v22 = 2080;
      uint64_t v23 = (uint64_t)" ";
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_sniffing_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_485);
  }
  *((void *)v6 + 2) = &nw_protocol_http_sniffing_identifier::protocol_identifier;
  if (nw_protocol_http_sniffing_get_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_http_sniffing_get_callbacks(void)::onceToken, &__block_literal_global_16);
  }
  *((void *)v6 + 3) = &nw_protocol_http_sniffing_get_callbacks(void)::protocol_callbacks;
  *((void *)v6 + 5) = v6;
  if (a3) {
    a3 = os_retain(a3);
  }
  char v7 = v6[472];
  if (v7)
  {
    BOOL v8 = (void *)*((void *)v6 + 58);
    if (v8)
    {
      os_release(v8);
      char v7 = v6[472];
    }
  }
  *((void *)v6 + 58) = a3;
  v6[472] = v7 | 1;
  if (a4)
  {
    BOOL v9 = os_retain(a4);
    char v10 = v6[488];
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_16:
    BOOL v11 = (void *)*((void *)v6 + 60);
    if (v11)
    {
      os_release(v11);
      char v10 = v6[488];
    }
    goto LABEL_18;
  }
  BOOL v9 = 0;
  char v10 = v6[488];
  if (v10) {
    goto LABEL_16;
  }
LABEL_18:
  *((void *)v6 + 60) = v9;
  v6[488] = v10 | 1;
  v6[548] |= 1u;
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 55) = v6 + 432;
  if (nw_protocol_copy_http_sniffing_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_48_75140);
  }
  id v12 = (id)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;
  __int16 v13 = nw_parameters_copy_protocol_options_for_definition(a4, v12);
  *((void *)v6 + 8) = v6 + 104;
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_sniffing_create::$_0::__invoke);
  *((void *)v6 + 10) = v6 + 200;
  nw_protocol_plugin_reset_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_sniffing_create::$_1::__invoke);
  *((void *)v6 + 11) = v6 + 216;
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_sniffing_create::$_2::__invoke, (uint64_t)nw_protocol_http_sniffing_create::$_3::__invoke, (uint64_t)nw_protocol_http_sniffing_create::$_4::__invoke, (uint64_t)nw_protocol_http_sniffing_create::$_5::__invoke);
  if (v13) {
    os_release(v13);
  }
  if (v12) {
    os_release(v12);
  }
  return (BOOL)v6;
}

uint64_t nw_protocol_http_sniffing_create::$_5::__invoke(nw_protocol_http_sniffing_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_sniffing_create::$_4::__invoke(nw_protocol_http_sniffing_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_sniffing_create::$_3::__invoke(nw_protocol_http_sniffing_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_sniffing_create::$_2::__invoke(nw_protocol_http_sniffing_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3)
    {
      uint64_t result = 0;
      *(unsigned char *)(v3 + 548) |= 2u;
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "operator()";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        BOOL v8 = "%{public}s called with null http_sniffing";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v13)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        BOOL v8 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        BOOL v8 = "%{public}s called with null http_sniffing, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "operator()";
      __int16 v17 = 2082;
      os_log_type_t v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null http_sniffing, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "operator()";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        BOOL v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "operator()";
      __int16 v17 = 2082;
      os_log_type_t v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "operator()";
    BOOL v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5) {
    free(v5);
  }
  return 1;
}

void nw_protocol_http_sniffing_create::$_1::__invoke(nw_protocol_http_sniffing_create::$_1 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "operator()";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "operator()";
      BOOL v9 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "operator()";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v6) {
          return;
        }
LABEL_37:
        free(v6);
        return;
      }
      if (!v11) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "operator()";
      BOOL v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "operator()";
      BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_36;
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    char v4 = *(unsigned char *)(v3 + 456);
    if (v4)
    {
      os_log_type_t v5 = *(void **)(v3 + 448);
      if (v5)
      {
        os_release(v5);
        char v4 = *(unsigned char *)(v3 + 456);
      }
    }
    *(void *)(v3 + 448) = 0;
    *(unsigned char *)(v3 + 456) = v4 | 1;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "operator()";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "operator()";
    BOOL v9 = "%{public}s called with null http_sniffing";
    goto LABEL_35;
  }
  if (!v14)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "operator()";
    BOOL v9 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
    goto LABEL_35;
  }
  BOOL v12 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  BOOL v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "operator()";
    BOOL v9 = "%{public}s called with null http_sniffing, no backtrace";
    goto LABEL_35;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v17 = "operator()";
    __int16 v18 = 2082;
    uint64_t v19 = v12;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null http_sniffing, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6) {
    goto LABEL_37;
  }
}

uint64_t nw_protocol_http_sniffing_create::$_0::__invoke(nw_protocol_http_sniffing_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

void ___ZL39nw_protocol_http_sniffing_get_callbacksv_block_invoke()
{
  nw_protocol_http_sniffing_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F69ED0 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F69F18 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F69F20 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F69F30 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F69F38 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F69F48 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F69F40 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F69F88 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F69F90 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F69ED8 = (uint64_t)nw_protocol_common_connect;
  qword_1E8F69EE8 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F69EE0 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F69EF0 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F69F00 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F69F08 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F69F78 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F69F80 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F69FC8 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F69EF8 = (uint64_t)nw_protocol_common_error;
  qword_1E8F69FC0 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F69FB8 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F69FA0 = (uint64_t)nw_protocol_common_copy_info;
  qword_1E8F69F70 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F69F98 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F69F50 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F69F58 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F69F60 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F69F68 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F69F28 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F69F10 = (uint64_t)nw_protocol_http_sniffing_get_input_frames;
  qword_1E8F69EC8 = (uint64_t)nw_protocol_http_sniffing_remove_input_handler;
}

uint64_t nw_protocol_http_sniffing_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      void v15[2] = ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v15[3] = &__block_descriptor_tmp_150;
      v15[4] = handle;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      void v13[2] = ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke_151;
      void v13[3] = &__block_descriptor_tmp_152;
      char v14 = a3;
      void v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &v17, &v16)) {
      goto LABEL_32;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null http_sniffing";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v16)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null http_sniffing, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      BOOL v11 = "%{public}s called with null http_sniffing, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v5, &v17, &v16)) {
    goto LABEL_32;
  }
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      BOOL v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_t v7 = v17;
  if (os_log_type_enabled(v6, v17))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
    os_log_type_t v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5) {
    free(v5);
  }
  return 0;
}

void ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(v2 + 336);
  if (v3)
  {
    char v4 = *(const void **)(v2 + 328);
    if (v4)
    {
      _Block_release(v4);
      char v3 = *(unsigned char *)(v2 + 336);
    }
  }
  *(void *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 336) = v3 | 1;
  char v5 = *(unsigned char *)(v2 + 384);
  if (v5)
  {
    os_log_type_t v6 = *(const void **)(v2 + 376);
    if (v6)
    {
      _Block_release(v6);
      char v5 = *(unsigned char *)(v2 + 384);
    }
  }
  *(void *)(v2 + 376) = 0;
  *(unsigned char *)(v2 + 384) = v5 | 1;
  uint64_t v7 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v7 + 198) & 1) == 0)
  {
    if (!gLogDatapath) {
      goto LABEL_9;
    }
    BOOL v11 = __nwlog_obj();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    uint64_t v7 = *(void *)(a1 + 32);
    if (v12)
    {
      *(_DWORD *)char v14 = 136446722;
      *(void *)&v14[4] = "nw_protocol_http_sniffing_remove_input_handler_block_invoke";
      *(_WORD *)&v14[12] = 2082;
      *(void *)&v14[14] = v7 + 114;
      *(_WORD *)&v14[22] = 2080;
      uint64_t v15 = " ";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sfinalizing pending input frames", v14, 0x20u);
      uint64_t v7 = *(void *)(a1 + 32);
    }
  }
  if (gLogDatapath)
  {
    BOOL v13 = __nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
LABEL_9:
  *(void *)char v14 = MEMORY[0x1E4F143A8];
  *(void *)&v14[8] = 0x40000000;
  *(void *)&v14[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke;
  uint64_t v15 = (const char *)&__block_descriptor_tmp_153;
  uint64_t v16 = v7 + 432;
  char v17 = 0;
  uint64_t v8 = *(void *)(v7 + 432);
  do
  {
    if (!v8) {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 32);
    char v10 = (*(uint64_t (**)(unsigned char *))&v14[16])(v14);
    uint64_t v8 = v9;
  }
  while ((v10 & 1) != 0);
}

void ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke_151(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 40)) {
    return;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136446722;
        uint64_t v8 = "nw_http_sniffing_destroy";
        __int16 v9 = 2082;
        uint64_t v10 = v1 + 114;
        __int16 v11 = 2080;
        BOOL v12 = " ";
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v7, 0x20u);
      }
    }
  }
  uint64_t v2 = *(void **)(v1 + 520);
  if (v2)
  {
    *(void *)(v1 + 528) = v2;
    operator delete(v2);
  }
  if (*(char *)(v1 + 519) < 0)
  {
    operator delete(*(void **)(v1 + 496));
    if ((*(unsigned char *)(v1 + 488) & 1) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    char v3 = *(void **)(v1 + 480);
    if (v3) {
      os_release(v3);
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(v1 + 488)) {
    goto LABEL_10;
  }
LABEL_12:
  *(void *)(v1 + 480) = 0;
  if (*(unsigned char *)(v1 + 472))
  {
    char v4 = *(void **)(v1 + 464);
    if (v4) {
      os_release(v4);
    }
  }
  *(void *)(v1 + 464) = 0;
  if (*(unsigned char *)(v1 + 456))
  {
    char v5 = *(void **)(v1 + 448);
    if (v5) {
      os_release(v5);
    }
  }
  *(void *)(v1 + 448) = 0;
  nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(v1 + 216));
  free((void *)v1);
}

void nw_protocol_plugin_retry::~nw_protocol_plugin_retry(nw_protocol_plugin_retry *this)
{
  if (*((unsigned char *)this + 168))
  {
    uint64_t v2 = (const void *)*((void *)this + 20);
    if (v2) {
      _Block_release(v2);
    }
  }
  *((void *)this + 20) = 0;
  if (*((unsigned char *)this + 120))
  {
    char v3 = (const void *)*((void *)this + 14);
    if (v3) {
      _Block_release(v3);
    }
  }
  *((void *)this + 14) = 0;
  if (*((unsigned char *)this + 104))
  {
    char v4 = (void *)*((void *)this + 12);
    if (v4) {
      os_release(v4);
    }
  }
  *((void *)this + 12) = 0;
  if (*((unsigned char *)this + 88))
  {
    char v5 = (void *)*((void *)this + 10);
    if (v5) {
      os_release(v5);
    }
  }
  *((void *)this + 10) = 0;
  if (*((unsigned char *)this + 72))
  {
    os_log_type_t v6 = (void *)*((void *)this + 8);
    if (v6) {
      os_release(v6);
    }
  }
  *((void *)this + 8) = 0;
  if (*((unsigned char *)this + 56))
  {
    int v7 = (void *)*((void *)this + 6);
    if (v7) {
      os_release(v7);
    }
  }
  *((void *)this + 6) = 0;
  if (*((unsigned char *)this + 40))
  {
    uint64_t v8 = (void *)*((void *)this + 4);
    if (v8) {
      os_release(v8);
    }
  }
  *((void *)this + 4) = 0;
  if (*((unsigned char *)this + 24))
  {
    __int16 v9 = (void *)*((void *)this + 2);
    if (v9) {
      os_release(v9);
    }
  }
  *((void *)this + 2) = 0;
  if ((*((unsigned char *)this + 8) & 1) != 0 && *(void *)this) {
    os_release(*(void **)this);
  }
  *(void *)this = 0;
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  char v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    char v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  *char v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t nw_protocol_http_sniffing_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
    unsigned int v44 = (char *)_os_log_send_and_compose_impl();
    v63[0] = 16;
    LOBYTE(__p[0]) = 0;
    if (!__nwlog_fault(v44, v63, __p)) {
      goto LABEL_105;
    }
    if (v63[0] != 17)
    {
      if (!LOBYTE(__p[0]))
      {
        int v45 = __nwlog_obj();
        os_log_type_t v46 = v63[0];
        if (!os_log_type_enabled(v45, (os_log_type_t)v63[0])) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        BOOL v47 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_104;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = __nwlog_obj();
      os_log_type_t v46 = v63[0];
      BOOL v50 = os_log_type_enabled(v45, (os_log_type_t)v63[0]);
      if (!backtrace_string)
      {
        if (!v50) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        BOOL v47 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_104;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        unsigned int v51 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_92:
        _os_log_impl(&dword_1830D4000, v45, v46, v51, buf, 0x16u);
      }
LABEL_93:
      free(backtrace_string);
      goto LABEL_105;
    }
    int v45 = __nwlog_obj();
    os_log_type_t v46 = v63[0];
    if (!os_log_type_enabled(v45, (os_log_type_t)v63[0])) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
    BOOL v47 = "%{public}s called with null protocol";
LABEL_104:
    _os_log_impl(&dword_1830D4000, v45, v46, v47, buf, 0xCu);
LABEL_105:
    if (v44) {
      free(v44);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
    unsigned int v44 = (char *)_os_log_send_and_compose_impl();
    v63[0] = 16;
    LOBYTE(__p[0]) = 0;
    if (!__nwlog_fault(v44, v63, __p)) {
      goto LABEL_105;
    }
    if (v63[0] == 17)
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = v63[0];
      if (!os_log_type_enabled(v45, (os_log_type_t)v63[0])) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
      BOOL v47 = "%{public}s called with null http_sniffing";
      goto LABEL_104;
    }
    if (!LOBYTE(__p[0]))
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = v63[0];
      if (!os_log_type_enabled(v45, (os_log_type_t)v63[0])) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
      BOOL v47 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v45 = __nwlog_obj();
    os_log_type_t v46 = v63[0];
    BOOL v52 = os_log_type_enabled(v45, (os_log_type_t)v63[0]);
    if (backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        unsigned int v51 = "%{public}s called with null http_sniffing, dumping backtrace:%{public}s";
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    if (!v52) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
    BOOL v47 = "%{public}s called with null http_sniffing, no backtrace";
    goto LABEL_104;
  }
  if ((handle[198] & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v48 = __nwlog_obj();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 114;
        *(_WORD *)&buf[22] = 2080;
        id v68 = (__n128 (*)(uint64_t, uint64_t))" ";
        *(_WORD *)int v69 = 1024;
        *(_DWORD *)&v69[2] = a3;
        *(_WORD *)&v69[6] = 1024;
        *(_DWORD *)&v69[8] = a4;
        *(_WORD *)&v69[12] = 1024;
        *(_DWORD *)&v69[14] = a5;
        _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sminimum bytes %u, maximum bytes %u, maximum frame count %u", buf, 0x32u);
      }
    }
  }
  if (handle[428])
  {
    uint64_t input_frames = 0;
    if ((handle[198] & 1) != 0 || !gLogDatapath) {
      return input_frames;
    }
    uint64_t v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 114;
      *(_WORD *)&buf[22] = 2080;
      id v68 = (__n128 (*)(uint64_t, uint64_t))" ";
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%salready getting input frames, returning 0", buf, 0x20u);
      return 0;
    }
    return 0;
  }
  handle[428] |= 1u;
  char v12 = handle[548];
  if (v12)
  {
    do
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      id v68 = __Block_byref_object_copy__504;
      *(void *)int v69 = __Block_byref_object_dispose__505;
      *(void *)&v69[8] = 0;
      *(void *)&v69[16] = &v69[8];
      uint64_t v24 = a3;
      uint64_t v25 = a4;
      uint64_t v26 = a5;
      if (*((void *)handle + 56))
      {
        unsigned int v27 = *((_DWORD *)handle + 136);
        if (a3 <= v27) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = a3 - v27;
        }
        BOOL v15 = a4 >= v27;
        unsigned int v28 = a4 - v27;
        if (v28 != 0 && v15)
        {
          unsigned int v29 = *((_DWORD *)handle + 130) - *((_DWORD *)handle + 132) + 512;
          if (v28 <= v29) {
            uint64_t v25 = v29;
          }
          else {
            uint64_t v25 = v28;
          }
        }
        else
        {
          uint64_t v25 = (*((_DWORD *)handle + 130) - *((_DWORD *)handle + 132) + 512);
        }
        uint64_t v26 = 0xFFFFFFFFLL;
      }
      if (nw_protocol_get_input_frames((uint64_t)a1->output_handler, (uint64_t)a1, v24, v25, v26, (uint64_t)&v69[8])&& *(void *)(*(void *)&buf[8] + 40))
      {
        *(void *)uint64_t v63 = 0;
        *(void *)&v63[8] = v63;
        *(void *)&v63[16] = 0x3802000000;
        uint64_t v64 = __Block_byref_object_copy__17;
        *(void *)&long long v65 = __Block_byref_object_dispose__18;
        if (nw_protocol_copy_http_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
        }
        *((void *)&v65 + 1) = (id)nw_protocol_copy_http_definition_http_definition;
        v66 |= 1u;
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 0x40000000;
        uint64_t v56 = (uint64_t (*)(void *))___ZL42nw_protocol_http_sniffing_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
        __int16 v57 = &unk_1E523A558;
        uint64_t v58 = v63;
        __int16 v59 = buf;
        id v60 = handle;
        uint64_t v30 = *(void *)(*(void *)&buf[8] + 40);
        do
        {
          if (!v30) {
            break;
          }
          uint64_t v31 = *(void *)(v30 + 32);
          char v32 = v56(v55);
          uint64_t v30 = v31;
        }
        while ((v32 & 1) != 0);
        _Block_object_dispose(v63, 8);
        if ((v66 & 1) != 0 && *((void *)&v65 + 1)) {
          os_release(*((void **)&v65 + 1));
        }
        int v33 = 1;
      }
      else
      {
        int v34 = handle[548];
        if ((~v34 & 3) == 0)
        {
          handle[548] = v34 & 0xFE;
          nw_http_sniffing_guess_media_type((uint64_t)__p, (uint64_t)handle);
          unint64_t v35 = v62;
          unsigned __int8 v36 = v62;
          if ((v62 & 0x80u) != 0) {
            unint64_t v35 = (unint64_t)__p[1];
          }
          if (v35)
          {
            if ((handle[198] & 1) == 0)
            {
              if (gLogDatapath)
              {
                nw_endpoint_type_t v40 = __nwlog_obj();
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v41 = __p;
                  if ((v62 & 0x80u) != 0) {
                    uint64_t v41 = (void **)__p[0];
                  }
                  *(_DWORD *)uint64_t v63 = 136446978;
                  *(void *)&v63[4] = "nw_http_sniffing_stop";
                  *(_WORD *)&v63[12] = 2082;
                  *(void *)&v63[14] = handle + 114;
                  *(_WORD *)&v63[22] = 2080;
                  uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  LOWORD(v65) = 2080;
                  *(void *)((char *)&v65 + 2) = v41;
                  _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%smedia type %s", v63, 0x2Au);
                }
              }
            }
            client_metadata_in_nw_parameters_t parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*((void **)handle + 60), (uint64_t)handle);
            unsigned __int8 v36 = v62;
            if (client_metadata_in_parameters)
            {
              int v38 = client_metadata_in_parameters;
              if ((v62 & 0x80u) == 0) {
                __int16 v39 = __p;
              }
              else {
                __int16 v39 = (void **)__p[0];
              }
              nw_http_client_metadata_set_sniffed_media_type(client_metadata_in_parameters, (uint64_t)v39);
              os_release(v38);
              unsigned __int8 v36 = v62;
            }
          }
          if ((v36 & 0x80) != 0) {
            operator delete(__p[0]);
          }
        }
        int v33 = 0;
      }
      _Block_object_dispose(buf, 8);
      char v12 = handle[548];
    }
    while (v33 && (handle[548] & 1) != 0);
  }
  if (v12)
  {
    if (*((void *)handle + 56))
    {
      uint64_t input_frames = 0;
      p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
    }
    else
    {
      *(_DWORD *)uint64_t v63 = 0;
      LOBYTE(__p[0]) = 0;
      uint64_t input_frames = nw_protocol_fulfill_frame_request((void *)handle + 54, (uint64_t)a6, a3, a4, a5, (unsigned int *)v63, __p);
      unsigned int v42 = *((_DWORD *)handle + 136);
      BOOL v15 = v42 >= *(_DWORD *)v63;
      *((_DWORD *)handle + 136) = v42 - *(_DWORD *)v63;
      p_cache = NWConcrete_nw_resolution_report.cache;
      if (!v15)
      {
        if (!gLogDatapath) {
          goto LABEL_70;
        }
        uint64_t v22 = __nwlog_obj();
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_70;
        }
        goto LABEL_109;
      }
    }
  }
  else
  {
    if (*((void *)handle + 54))
    {
      unsigned int v13 = *((_DWORD *)handle + 136);
      uint64_t v14 = a4 - v13;
      if (a4 > v13)
      {
        BOOL v15 = a3 >= v13;
        unsigned int v16 = a3 - v13;
        uint64_t v17 = v15 ? v16 : 1;
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        nw_protocol_get_input_frames((uint64_t)a1->output_handler, (uint64_t)a1, v17, v14, a5, (uint64_t)buf);
        if (*(void *)buf)
        {
          **((void **)handle + 55) = *(void *)buf;
          uint64_t v18 = *(void *)&buf[8];
          *(void *)(*(void *)buf + 40) = *((void *)handle + 55);
          *((void *)handle + 55) = v18;
        }
      }
      *(_DWORD *)uint64_t v63 = 0;
      LOBYTE(__p[0]) = 0;
      uint64_t input_frames = nw_protocol_fulfill_frame_request((void *)handle + 54, (uint64_t)a6, a3, a4, a5, (unsigned int *)v63, __p);
      unsigned int v20 = *((_DWORD *)handle + 136);
      BOOL v15 = v20 >= *(_DWORD *)v63;
      *((_DWORD *)handle + 136) = v20 - *(_DWORD *)v63;
      p_cache = NWConcrete_nw_resolution_report.cache;
      if (v15) {
        goto LABEL_71;
      }
      if (!gLogDatapath) {
        goto LABEL_70;
      }
      uint64_t v22 = __nwlog_obj();
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_70;
      }
LABEL_109:
      uint64_t v54 = *((unsigned int *)handle + 136);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "http_sniffing->pending_input_frames_byte_count";
      *(_WORD *)&buf[22] = 2048;
      id v68 = (__n128 (*)(uint64_t, uint64_t))*(unsigned int *)v63;
      *(_WORD *)int v69 = 2048;
      *(void *)&v69[2] = v54;
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
LABEL_70:
      *((_DWORD *)handle + 136) = 0;
      goto LABEL_71;
    }
    uint64_t input_frames = nw_protocol_get_input_frames((uint64_t)a1->output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
    p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
  }
LABEL_71:
  nw_protocol_plugin_retry_set_getting_input_frames((uint64_t)(handle + 216), (uint64_t)a1, 0);
  if ((handle[198] & 1) == 0)
  {
    if (*((unsigned char *)p_cache + 3665))
    {
      char v53 = __nwlog_obj();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 114;
        *(_WORD *)&buf[22] = 2080;
        id v68 = (__n128 (*)(uint64_t, uint64_t))" ";
        *(_WORD *)int v69 = 1024;
        *(_DWORD *)&v69[2] = input_frames;
        _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreturning %u frames", buf, 0x26u);
      }
    }
  }
  return input_frames;
}

__n128 __Block_byref_object_copy__504(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

BOOL ___ZL42nw_protocol_http_sniffing_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    char v4 = nw_frame_copy_metadata_for_protocol(a2, *(void *)(*(void *)(a1[4] + 8) + 40));
    char v5 = v4;
    if (*(void **)(a1[6] + 448) == v4 || nw_http_metadata_get_type(v4) == 3) {
      goto LABEL_64;
    }
    uint64_t v6 = a1[6];
    char v7 = *(unsigned char *)(v6 + 456);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 448);
      if (v8)
      {
        os_release(v8);
        char v7 = *(unsigned char *)(v6 + 456);
      }
    }
    *(void *)(v6 + 448) = v5;
    *(unsigned char *)(v6 + 456) = v7 | 1;
    uint64_t v9 = a1[6];
    if (v9)
    {
      client_metadata_in_nw_parameters_t parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(v9 + 480), v9);
      if (client_metadata_in_parameters)
      {
        __int16 v11 = client_metadata_in_parameters;
        nw_http_client_metadata_set_sniffed_media_type(client_metadata_in_parameters, 0);
        os_release(v11);
      }
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
    uint64_t v102 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v144[0]) = 0;
    if (__nwlog_fault(v102, type, v144))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v103 = __nwlog_obj();
        os_log_type_t v104 = type[0];
        if (!os_log_type_enabled(v103, type[0])) {
          goto LABEL_254;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
        __int16 v105 = "%{public}s called with null http_sniffing";
        goto LABEL_253;
      }
      if (!LOBYTE(v144[0]))
      {
        __int16 v103 = __nwlog_obj();
        os_log_type_t v104 = type[0];
        if (!os_log_type_enabled(v103, type[0])) {
          goto LABEL_254;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
        __int16 v105 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
        goto LABEL_253;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v103 = __nwlog_obj();
      os_log_type_t v104 = type[0];
      BOOL v111 = os_log_type_enabled(v103, type[0]);
      if (backtrace_string)
      {
        if (v111)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v103, v104, "%{public}s called with null http_sniffing, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_254;
      }
      if (v111)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
        __int16 v105 = "%{public}s called with null http_sniffing, no backtrace";
LABEL_253:
        _os_log_impl(&dword_1830D4000, v103, v104, v105, buf, 0xCu);
      }
    }
LABEL_254:
    if (v102) {
      free(v102);
    }
LABEL_10:
    char v12 = *(void **)(a1[6] + 448);
    if (v12)
    {
      id v13 = nw_http_metadata_copy_header_fields(v12);
      if (v13)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x4002000000;
        uint64_t v155 = __Block_byref_object_copy__22;
        *(void *)&long long v156 = __Block_byref_object_dispose__23;
        *((void *)&v156 + 1) = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        v143[0] = MEMORY[0x1E4F143A8];
        v143[1] = 0x40000000;
        v143[2] = ___ZL31nw_http_sniffing_get_media_typeP25nw_protocol_http_sniffingP20nw_protocol_metadata_block_invoke;
        v143[3] = &unk_1E523A580;
        v143[4] = buf;
        id v14 = v13;
        BOOL v15 = v143;
        _nw_http_fields_enumerate_by_name((uint64_t)v14, (unint64_t)"Content-Type", v15);

        uint64_t v16 = *(void *)&buf[8];
        uint64_t v17 = (_OWORD *)(*(void *)&buf[8] + 40);
        char v18 = *(unsigned char *)(*(void *)&buf[8] + 63);
        if (v18 < 0)
        {
          uint64_t v19 = *(void **)(*(void *)&buf[8] + 40);
          size_t v20 = *(void *)(*(void *)&buf[8] + 48);
          if (!v20) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v19 = (void *)(*(void *)&buf[8] + 40);
          size_t v20 = *(unsigned __int8 *)(*(void *)&buf[8] + 63);
          if (!*(unsigned char *)(*(void *)&buf[8] + 63)) {
            goto LABEL_20;
          }
        }
        uint64_t v21 = memchr(v19, 47, v20);
        if (v21 && v21 - (unsigned char *)v19 != -1)
        {
          if (v18 < 0)
          {
            std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(v16 + 40), *(void *)(v16 + 48));
          }
          else
          {
            *(_OWORD *)&v142.__r_.__value_.__l.__data_ = *v17;
            v142.__r_.__value_.__r.__words[2] = *(void *)(v16 + 56);
          }
LABEL_21:
          _Block_object_dispose(buf, 8);
          if (SHIBYTE(v158) < 0) {
            operator delete(*((void **)&v156 + 1));
          }
          os_release(v14);
          uint64_t v22 = a1[6];
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v141, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
            uint64_t v23 = a1[6];
            if (v22) {
              goto LABEL_25;
            }
            goto LABEL_32;
          }
LABEL_24:
          std::string v141 = v142;
          uint64_t v23 = v22;
          if (v22)
          {
LABEL_25:
            uint64_t v24 = *(void **)(v23 + 448);
            if (v24)
            {
              if (nw_http_metadata_get_type(*(void **)(v23 + 448)) == 3)
              {
LABEL_27:
                LOBYTE(v25) = 0;
                goto LABEL_47;
              }
              id v26 = nw_http_metadata_copy_header_fields(v24);
              if (v26)
              {
                uint64_t v150 = 0;
                uint64_t v151 = &v150;
                uint64_t v152 = 0x2000000000;
                char v153 = 0;
                *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                uint64_t v146 = 0x40000000;
                uint64_t v147 = ___ZL29nw_http_sniffing_should_sniffP25nw_protocol_http_sniffingNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP20nw_protocol_metadata_block_invoke;
                v148 = &unk_1E523A5A8;
                v149 = &v150;
                id v27 = v26;
                unsigned int v28 = type;
                _nw_http_fields_access_value_by_name((uint64_t)v27, (unint64_t)"X-Content-Type-Options", v28);

                if (*((unsigned char *)v151 + 24))
                {
                  LOBYTE(v25) = 0;
LABEL_46:
                  _Block_object_dispose(&v150, 8);
                  os_release(v27);
LABEL_47:
                  *(unsigned char *)(a1[6] + 548) = *(unsigned char *)(a1[6] + 548) & 0xFE | v25;
                  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v141.__r_.__value_.__l.__data_);
                  }
                  uint64_t v34 = a1[6];
                  if (*(unsigned char *)(v34 + 548))
                  {
                    unint64_t v35 = (void **)(v34 + 496);
                    if (*(char *)(v34 + 519) < 0)
                    {
                      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        unsigned __int8 v36 = &v142;
                      }
                      else {
                        unsigned __int8 v36 = (std::string *)v142.__r_.__value_.__r.__words[0];
                      }
                      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t size = HIBYTE(v142.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        size_t size = v142.__r_.__value_.__l.__size_;
                      }
                      std::string::__assign_no_alias<false>(v35, v36, size);
                    }
                    else
                    {
                      if ((*((unsigned char *)&v142.__r_.__value_.__s + 23) & 0x80) == 0)
                      {
                        *(_OWORD *)unint64_t v35 = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
                        *(void *)(v34 + 512) = *((void *)&v142.__r_.__value_.__l + 2);
                        *(void *)(a1[6] + 528) = *(void *)(a1[6] + 520);
LABEL_63:
                        char v5 = 0;
LABEL_64:
                        uint64_t v39 = *(void *)(a2 + 64);
                        if (v39) {
                          int v40 = (*(unsigned __int8 *)(v39 + 66) >> 6) & 1;
                        }
                        else {
                          int v40 = 0;
                        }
                        uint64_t v41 = a1[6];
                        if (!*(void *)(v41 + 448) || (*(unsigned char *)(v41 + 548) & 1) == 0) {
                          goto LABEL_135;
                        }
                        if (!*(void *)(a2 + 112)
                          || (*(_WORD *)(a2 + 204) & 0x100) != 0
                          && g_channel_check_validity
                          && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
                        {
                          goto LABEL_110;
                        }
                        int v42 = *(_DWORD *)(a2 + 52);
                        if (!v42) {
                          goto LABEL_110;
                        }
                        uint64_t v43 = *(unsigned int *)(a2 + 56);
                        unsigned int v44 = v42 - (v43 + *(_DWORD *)(a2 + 60));
                        if (!v44) {
                          goto LABEL_110;
                        }
                        int v45 = (void *)a1[6];
                        os_log_type_t v46 = (char *)v45[66];
                        BOOL v47 = (char *)v45[65];
                        unsigned int v48 = v47 - v46 + 512;
                        int64_t v49 = v48 >= v44 ? v44 : v48;
                        if (!v49)
                        {
LABEL_110:
                          uint64_t v73 = a1[6];
                          if (*(void *)(v73 + 528) - *(void *)(v73 + 520) > 0x1FFuLL) {
                            int v74 = 1;
                          }
                          else {
                            int v74 = v40;
                          }
                          if (v74 == 1)
                          {
                            if (*(unsigned char *)(v73 + 548))
                            {
                              *(unsigned char *)(v73 + 548) &= ~1u;
                              nw_http_sniffing_guess_media_type((uint64_t)type, v73);
                              uint64_t v75 = HIBYTE(v147);
                              char v76 = HIBYTE(v147);
                              if (SHIBYTE(v147) < 0) {
                                uint64_t v75 = v146;
                              }
                              if (v75)
                              {
                                if ((*(unsigned char *)(v73 + 198) & 1) == 0)
                                {
                                  if (gLogDatapath)
                                  {
                                    v128 = __nwlog_obj();
                                    if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
                                    {
                                      unint64_t v129 = type;
                                      if (SHIBYTE(v147) < 0) {
                                        unint64_t v129 = *(os_log_type_t **)type;
                                      }
                                      *(_DWORD *)buf = 136446978;
                                      *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                                      *(_WORD *)&buf[12] = 2082;
                                      *(void *)&buf[14] = v73 + 114;
                                      *(_WORD *)&buf[22] = 2080;
                                      uint64_t v155 = (__n128 (*)(uint64_t, uint64_t))" ";
                                      LOWORD(v156) = 2080;
                                      *(void *)((char *)&v156 + 2) = v129;
                                      _os_log_impl(&dword_1830D4000, v128, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%smedia type %s", buf, 0x2Au);
                                    }
                                  }
                                }
                                unsigned int v77 = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(v73 + 480), v73);
                                char v76 = HIBYTE(v147);
                                if (v77)
                                {
                                  BOOL v78 = v77;
                                  if (SHIBYTE(v147) >= 0) {
                                    unsigned int v79 = type;
                                  }
                                  else {
                                    unsigned int v79 = *(os_log_type_t **)type;
                                  }
                                  nw_http_client_metadata_set_sniffed_media_type(v77, (uint64_t)v79);
                                  os_release(v78);
                                  char v76 = HIBYTE(v147);
                                }
                              }
                              if (v76 < 0) {
                                operator delete(*(void **)type);
                              }
                              goto LABEL_134;
                            }
                            __nwlog_obj();
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                            uint64_t v120 = (char *)_os_log_send_and_compose_impl();
                            type[0] = OS_LOG_TYPE_ERROR;
                            LOBYTE(v144[0]) = 0;
                            if (__nwlog_fault(v120, type, v144))
                            {
                              if (type[0] == OS_LOG_TYPE_FAULT)
                              {
                                uint64_t v121 = __nwlog_obj();
                                os_log_type_t v122 = type[0];
                                if (!os_log_type_enabled(v121, type[0])) {
                                  goto LABEL_280;
                                }
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                                v123 = "%{public}s called with null http_sniffing->active";
                                goto LABEL_279;
                              }
                              if (!LOBYTE(v144[0]))
                              {
                                uint64_t v121 = __nwlog_obj();
                                os_log_type_t v122 = type[0];
                                if (!os_log_type_enabled(v121, type[0])) {
                                  goto LABEL_280;
                                }
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                                v123 = "%{public}s called with null http_sniffing->active, backtrace limit exceeded";
                                goto LABEL_279;
                              }
                              v132 = (char *)__nw_create_backtrace_string();
                              uint64_t v121 = __nwlog_obj();
                              os_log_type_t v122 = type[0];
                              BOOL v133 = os_log_type_enabled(v121, type[0]);
                              if (v132)
                              {
                                if (v133)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = v132;
                                  _os_log_impl(&dword_1830D4000, v121, v122, "%{public}s called with null http_sniffing->active, dumping backtrace:%{public}s", buf, 0x16u);
                                }
                                free(v132);
                                goto LABEL_280;
                              }
                              if (v133)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                                v123 = "%{public}s called with null http_sniffing->active, no backtrace";
LABEL_279:
                                _os_log_impl(&dword_1830D4000, v121, v122, v123, buf, 0xCu);
                              }
                            }
LABEL_280:
                            if (v120) {
                              free(v120);
                            }
                            goto LABEL_134;
                          }
                          BOOL v80 = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(v73 + 480), a1[6]);
                          if (!v80)
                          {
LABEL_134:
                            uint64_t v41 = a1[6];
LABEL_135:
                            int v85 = *(_DWORD *)(v41 + 544);
                            int v86 = *(_DWORD *)(a2 + 52);
                            if (v86) {
                              v86 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
                            }
                            *(_DWORD *)(v41 + 544) = v85 + v86;
                            if (__CFADD__(v85, v86))
                            {
                              if (gLogDatapath)
                              {
                                unint64_t v99 = __nwlog_obj();
                                if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
                                {
                                  int v100 = *(_DWORD *)(a2 + 52);
                                  if (v100) {
                                    __int16 v101 = (__n128 (*)(uint64_t, uint64_t))(v100
                                  }
                                                                                                 - (*(_DWORD *)(a2 + 56)
                                                                                                  + *(_DWORD *)(a2 + 60)));
                                  else {
                                    __int16 v101 = 0;
                                  }
                                  uint64_t v130 = *(unsigned int *)(a1[6] + 544);
                                  *(_DWORD *)buf = 136446978;
                                  *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = "http_sniffing->pending_input_frames_byte_count";
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v155 = v101;
                                  LOWORD(v156) = 2048;
                                  *(void *)((char *)&v156 + 2) = v130;
                                  _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
                                }
                              }
                              *(_DWORD *)(a1[6] + 544) = -1;
                            }
                            uint64_t v88 = *(void *)(a2 + 32);
                            uint64_t v89 = *(void **)(a2 + 40);
                            long long v87 = (void *)(a2 + 32);
                            if (v88)
                            {
                              *(void *)(v88 + 40) = v89;
                              uint64_t v89 = *(void **)(a2 + 40);
                            }
                            else
                            {
                              *(void *)(*(void *)(a1[5] + 8) + 48) = v89;
                            }
                            *uint64_t v89 = v88;
                            *long long v87 = 0;
                            *(void *)(a2 + 40) = 0;
                            uint64_t v90 = a1[6];
                            uint64_t v91 = *(uint64_t **)(v90 + 440);
                            *(void *)(a2 + 40) = v91;
                            *uint64_t v91 = a2;
                            *(void *)(v90 + 440) = v87;
                            if (v5) {
                              os_release(v5);
                            }
                            return a2 != 0;
                          }
                          id v81 = v80;
                          id v82 = *((id *)v81 + 1);

                          if (nw_protocol_copy_http_client_definition_onceToken != -1) {
                            dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
                          }
                          BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v82, nw_protocol_copy_http_client_definition_definition);

                          if (is_equal_unsafe)
                          {
                            uint64_t v84 = *((void *)v81 + 4);
                            if (v84) {
                              __nw_http_client_metadata_call_prevent_timeout_callback_block_invoke((uint64_t)&__block_literal_global_75_76021, v84);
                            }
LABEL_133:

                            os_release(v81);
                            goto LABEL_134;
                          }
                          uint64_t v124 = __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                          uint64_t v125 = (char *)_os_log_send_and_compose_impl();

                          type[0] = OS_LOG_TYPE_ERROR;
                          LOBYTE(v144[0]) = 0;
                          if (__nwlog_fault(v125, type, v144))
                          {
                            if (type[0] == OS_LOG_TYPE_FAULT)
                            {
                              uint64_t v126 = __nwlog_obj();
                              os_log_type_t v127 = type[0];
                              if (os_log_type_enabled(v126, type[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                                _os_log_impl(&dword_1830D4000, v126, v127, "%{public}s metadata must be http_client", buf, 0xCu);
                              }
                            }
                            else if (LOBYTE(v144[0]))
                            {
                              unint64_t v134 = (char *)__nw_create_backtrace_string();
                              uint64_t v126 = __nwlog_obj();
                              os_log_type_t v135 = type[0];
                              BOOL v136 = os_log_type_enabled(v126, type[0]);
                              if (v134)
                              {
                                if (v136)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = v134;
                                  _os_log_impl(&dword_1830D4000, v126, v135, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
                                }

                                free(v134);
                                goto LABEL_288;
                              }
                              if (v136)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                                _os_log_impl(&dword_1830D4000, v126, v135, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
                              }
                            }
                            else
                            {
                              uint64_t v126 = __nwlog_obj();
                              os_log_type_t v137 = type[0];
                              if (os_log_type_enabled(v126, type[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                                _os_log_impl(&dword_1830D4000, v126, v137, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
                              }
                            }
                          }
LABEL_288:
                          if (v125) {
                            free(v125);
                          }
                          goto LABEL_133;
                        }
                        BOOL v50 = (const void *)(*(void *)(a2 + 112) + v43);
                        uint64_t v51 = v45[67];
                        if (v51 - (uint64_t)v46 >= v49)
                        {
                          memmove(v46, v50, v49);
                          v45[66] = &v46[v49];
                          goto LABEL_110;
                        }
                        unint64_t v52 = v46 - v47;
                        uint64_t v53 = v46 - v47 + v49;
                        if (v53 < 0) {
                          abort();
                        }
                        unint64_t v54 = v51 - (void)v47;
                        if (2 * v54 > v53) {
                          uint64_t v53 = 2 * v54;
                        }
                        if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v55 = v53;
                        }
                        size_t __src = v55;
                        v138 = (void *)a1[6];
                        if (v55) {
                          size_t v55 = (size_t)operator new(v55);
                        }
                        size_t v139 = v55;
                        size_t v56 = v55 + v52;
                        memcpy((void *)(v55 + v52), v50, v49);
                        if (v47 == v46)
                        {
                          uint64_t v63 = v46;
                          size_t v60 = v56;
                          size_t v61 = v139;
                          size_t v57 = __src;
                          size_t v59 = v56;
                          unsigned __int8 v62 = v138;
LABEL_99:
                          int v69 = (char *)(v59 + v49);
                          size_t v70 = v61 + v57;
                          uint64_t v71 = v63 - v46;
                          if (v63 != v46) {
                            memmove(v69, v46, v63 - v46);
                          }
                          uint64_t v72 = (void *)v62[65];
                          v62[65] = v60;
                          v62[66] = &v69[v71];
                          v62[67] = v70;
                          if (v72) {
                            operator delete(v72);
                          }
                          goto LABEL_110;
                        }
                        size_t v57 = __src;
                        if (v52 >= 0x20)
                        {
                          size_t v61 = v139;
                          uint64_t v58 = v46;
                          size_t v59 = v56;
                          size_t v60 = v56;
                          unsigned __int8 v62 = v138;
                          if ((unint64_t)&v47[-v139] >= 0x20)
                          {
                            uint64_t v58 = &v46[-(v52 & 0xFFFFFFFFFFFFFFE0)];
                            uint64_t v64 = v46 - 16;
                            long long v65 = (_OWORD *)(v139 + v46 - 16 - v47);
                            unint64_t v66 = v52 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              long long v67 = *(_OWORD *)v64;
                              *(v65 - 1) = *((_OWORD *)v64 - 1);
                              *long long v65 = v67;
                              v64 -= 32;
                              v65 -= 2;
                              v66 -= 32;
                            }
                            while (v66);
                            size_t v60 = v59 - (v52 & 0xFFFFFFFFFFFFFFE0);
                            if (v52 == (v52 & 0xFFFFFFFFFFFFFFE0)) {
                              goto LABEL_98;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v58 = v46;
                          size_t v59 = v56;
                          size_t v60 = v56;
                          unsigned __int8 v62 = v138;
                          size_t v61 = v139;
                        }
                        do
                        {
                          char v68 = *--v58;
                          *(unsigned char *)--size_t v60 = v68;
                        }
                        while (v58 != v47);
LABEL_98:
                        uint64_t v63 = (unsigned char *)v62[66];
                        goto LABEL_99;
                      }
                      std::string::__assign_no_alias<true>(v35, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
                    }
                  }
                  int v38 = SHIBYTE(v142.__r_.__value_.__r.__words[2]);
                  *(void *)(a1[6] + 528) = *(void *)(a1[6] + 520);
                  if (v38 < 0) {
                    operator delete(v142.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_63;
                }
                std::string::size_type v33 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
                if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v33 = v141.__r_.__value_.__l.__size_;
                }
                if (!v33) {
                  goto LABEL_45;
                }
                mime_type_to_class();
                uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::find<std::string>((uint64_t)&v141);
                mime_type_to_class();
                if (!v25) {
                  goto LABEL_46;
                }
                if (*((_DWORD *)v25 + 10) != 1)
                {
LABEL_45:
                  LOBYTE(v25) = 1;
                  goto LABEL_46;
                }
                *(void *)buf = 0;
                *(void *)&buf[8] = buf;
                *(void *)&buf[16] = 0x4002000000;
                uint64_t v155 = __Block_byref_object_copy__22;
                *(void *)&long long v156 = __Block_byref_object_dispose__23;
                *((void *)&v156 + 1) = 0;
                uint64_t v157 = 0;
                uint64_t v158 = 0;
                v144[0] = MEMORY[0x1E4F143A8];
                v144[1] = 0x40000000;
                v144[2] = ___ZL29nw_http_sniffing_should_sniffP25nw_protocol_http_sniffingNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP20nw_protocol_metadata_block_invoke_2;
                v144[3] = &unk_1E523A5D0;
                v144[4] = buf;
                nw_http_fields_enumerate_by_name(v27, (unint64_t)"Content-Type", v144);
                uint64_t v25 = (uint64_t *)(*(void *)&buf[8] + 40);
                if (*(char *)(*(void *)&buf[8] + 63) < 0)
                {
                  if (!*(void *)(*(void *)&buf[8] + 48)) {
                    goto LABEL_107;
                  }
                  uint64_t v25 = (uint64_t *)*v25;
                }
                else if (!*(unsigned char *)(*(void *)&buf[8] + 63))
                {
                  goto LABEL_107;
                }
                if (strcasecmp((const char *)v25, "utf-8"))
                {
                  LOBYTE(v25) = strcasecmp((const char *)v25, "iso-8859-1") == 0;
                  goto LABEL_108;
                }
LABEL_107:
                LOBYTE(v25) = 1;
LABEL_108:
                _Block_object_dispose(buf, 8);
                if (SHIBYTE(v158) < 0) {
                  operator delete(*((void **)&v156 + 1));
                }
                goto LABEL_46;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
              unsigned int v29 = (void *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v144[0]) = 0;
              if (!__nwlog_fault((const char *)v29, type, v144))
              {
LABEL_275:
                if (v29) {
                  free(v29);
                }
                goto LABEL_27;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                uint64_t v30 = __nwlog_obj();
                os_log_type_t v31 = type[0];
                if (!os_log_type_enabled(v30, type[0])) {
                  goto LABEL_275;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
                char v32 = "%{public}s called with null header_fields";
                goto LABEL_274;
              }
              if (!LOBYTE(v144[0]))
              {
                uint64_t v30 = __nwlog_obj();
                os_log_type_t v31 = type[0];
                if (!os_log_type_enabled(v30, type[0])) {
                  goto LABEL_275;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
                char v32 = "%{public}s called with null header_fields, backtrace limit exceeded";
                goto LABEL_274;
              }
              int v114 = (char *)__nw_create_backtrace_string();
              uint64_t v30 = __nwlog_obj();
              os_log_type_t v31 = type[0];
              BOOL v131 = os_log_type_enabled(v30, type[0]);
              if (!v114)
              {
                if (!v131) {
                  goto LABEL_275;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
                char v32 = "%{public}s called with null header_fields, no backtrace";
                goto LABEL_274;
              }
              if (v131)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v114;
                unint64_t v116 = "%{public}s called with null header_fields, dumping backtrace:%{public}s";
                goto LABEL_229;
              }
LABEL_230:
              free(v114);
              goto LABEL_275;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
            unsigned int v29 = (void *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v144[0]) = 0;
            if (!__nwlog_fault((const char *)v29, type, v144)) {
              goto LABEL_275;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v30 = __nwlog_obj();
              os_log_type_t v31 = type[0];
              if (!os_log_type_enabled(v30, type[0])) {
                goto LABEL_275;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
              char v32 = "%{public}s called with null http_metadata";
              goto LABEL_274;
            }
            if (!LOBYTE(v144[0]))
            {
              uint64_t v30 = __nwlog_obj();
              os_log_type_t v31 = type[0];
              if (!os_log_type_enabled(v30, type[0])) {
                goto LABEL_275;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
              char v32 = "%{public}s called with null http_metadata, backtrace limit exceeded";
              goto LABEL_274;
            }
            int v114 = (char *)__nw_create_backtrace_string();
            uint64_t v30 = __nwlog_obj();
            os_log_type_t v31 = type[0];
            BOOL v119 = os_log_type_enabled(v30, type[0]);
            if (!v114)
            {
              if (!v119) {
                goto LABEL_275;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
              char v32 = "%{public}s called with null http_metadata, no backtrace";
              goto LABEL_274;
            }
            if (!v119) {
              goto LABEL_230;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v114;
            unint64_t v116 = "%{public}s called with null http_metadata, dumping backtrace:%{public}s";
            goto LABEL_229;
          }
LABEL_32:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
          unsigned int v29 = (void *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v144[0]) = 0;
          if (!__nwlog_fault((const char *)v29, type, v144)) {
            goto LABEL_275;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v30 = __nwlog_obj();
            os_log_type_t v31 = type[0];
            if (!os_log_type_enabled(v30, type[0])) {
              goto LABEL_275;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
            char v32 = "%{public}s called with null http_sniffing";
LABEL_274:
            _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
            goto LABEL_275;
          }
          if (!LOBYTE(v144[0]))
          {
            uint64_t v30 = __nwlog_obj();
            os_log_type_t v31 = type[0];
            if (!os_log_type_enabled(v30, type[0])) {
              goto LABEL_275;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
            char v32 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
            goto LABEL_274;
          }
          int v114 = (char *)__nw_create_backtrace_string();
          uint64_t v30 = __nwlog_obj();
          os_log_type_t v31 = type[0];
          BOOL v115 = os_log_type_enabled(v30, type[0]);
          if (!v114)
          {
            if (!v115) {
              goto LABEL_275;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
            char v32 = "%{public}s called with null http_sniffing, no backtrace";
            goto LABEL_274;
          }
          if (!v115) {
            goto LABEL_230;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v114;
          unint64_t v116 = "%{public}s called with null http_sniffing, dumping backtrace:%{public}s";
LABEL_229:
          _os_log_impl(&dword_1830D4000, v30, v31, v116, buf, 0x16u);
          goto LABEL_230;
        }
LABEL_20:
        *((unsigned char *)&v142.__r_.__value_.__s + 23) = 0;
        v142.__r_.__value_.__s.__data_[0] = 0;
        goto LABEL_21;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
      os_log_type_t v106 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v144[0]) = 0;
      if (__nwlog_fault(v106, type, v144))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v107 = __nwlog_obj();
          os_log_type_t v108 = type[0];
          if (!os_log_type_enabled(v107, type[0])) {
            goto LABEL_263;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
          unint64_t v109 = "%{public}s called with null header_fields";
          goto LABEL_262;
        }
        if (!LOBYTE(v144[0]))
        {
          uint64_t v107 = __nwlog_obj();
          os_log_type_t v108 = type[0];
          if (!os_log_type_enabled(v107, type[0])) {
            goto LABEL_263;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
          unint64_t v109 = "%{public}s called with null header_fields, backtrace limit exceeded";
          goto LABEL_262;
        }
        uint64_t v117 = (char *)__nw_create_backtrace_string();
        uint64_t v107 = __nwlog_obj();
        os_log_type_t v108 = type[0];
        BOOL v118 = os_log_type_enabled(v107, type[0]);
        if (v117)
        {
          if (v118)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v117;
            _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v117);
          if (!v106) {
            goto LABEL_265;
          }
          goto LABEL_264;
        }
        if (v118)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
          unint64_t v109 = "%{public}s called with null header_fields, no backtrace";
LABEL_262:
          _os_log_impl(&dword_1830D4000, v107, v108, v109, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
      os_log_type_t v106 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v144[0]) = 0;
      if (!__nwlog_fault(v106, type, v144)) {
        goto LABEL_263;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v107 = __nwlog_obj();
        os_log_type_t v108 = type[0];
        if (!os_log_type_enabled(v107, type[0])) {
          goto LABEL_263;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
        unint64_t v109 = "%{public}s called with null http_metadata";
        goto LABEL_262;
      }
      if (!LOBYTE(v144[0]))
      {
        uint64_t v107 = __nwlog_obj();
        os_log_type_t v108 = type[0];
        if (!os_log_type_enabled(v107, type[0])) {
          goto LABEL_263;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
        unint64_t v109 = "%{public}s called with null http_metadata, backtrace limit exceeded";
        goto LABEL_262;
      }
      uint64_t v112 = (char *)__nw_create_backtrace_string();
      uint64_t v107 = __nwlog_obj();
      os_log_type_t v108 = type[0];
      BOOL v113 = os_log_type_enabled(v107, type[0]);
      if (!v112)
      {
        if (!v113) {
          goto LABEL_263;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
        unint64_t v109 = "%{public}s called with null http_metadata, no backtrace";
        goto LABEL_262;
      }
      if (v113)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_get_media_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v112;
        _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s called with null http_metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v112);
    }
LABEL_263:
    if (!v106)
    {
LABEL_265:
      memset(&v142, 0, sizeof(v142));
      uint64_t v22 = a1[6];
      goto LABEL_24;
    }
LABEL_264:
    free(v106);
    goto LABEL_265;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
  __int16 v93 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v144[0]) = 0;
  if (__nwlog_fault(v93, type, v144))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v94 = __nwlog_obj();
      os_log_type_t v95 = type[0];
      if (!os_log_type_enabled(v94, type[0])) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
      __int16 v96 = "%{public}s called with null frame";
      goto LABEL_211;
    }
    if (!LOBYTE(v144[0]))
    {
      int v94 = __nwlog_obj();
      os_log_type_t v95 = type[0];
      if (!os_log_type_enabled(v94, type[0])) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
      __int16 v96 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_211;
    }
    uint64_t v97 = (char *)__nw_create_backtrace_string();
    int v94 = __nwlog_obj();
    os_log_type_t v95 = type[0];
    BOOL v98 = os_log_type_enabled(v94, type[0]);
    if (v97)
    {
      if (v98)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v97;
        _os_log_impl(&dword_1830D4000, v94, v95, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v97);
      goto LABEL_212;
    }
    if (v98)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
      __int16 v96 = "%{public}s called with null frame, no backtrace";
LABEL_211:
      _os_log_impl(&dword_1830D4000, v94, v95, v96, buf, 0xCu);
    }
  }
LABEL_212:
  if (v93) {
    free(v93);
  }
  return a2 != 0;
}

void nw_http_sniffing_guess_media_type(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (!*(void *)(a2 + 448)) {
      return;
    }
    char v4 = (std::string *)(a2 + 496);
    if (*(char *)(a2 + 519) < 0)
    {
      if (!*(void *)(a2 + 504)) {
        goto LABEL_11;
      }
    }
    else if (!*(unsigned char *)(a2 + 519))
    {
LABEL_11:
      nw_http_sniffing_copy_mime_type_for_unknown(&buf, a2);
LABEL_12:
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      std::string::size_type v6 = buf.__r_.__value_.__r.__words[2];
      goto LABEL_15;
    }
    mime_type_to_class();
    char v5 = std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::find<std::string>(a2 + 496);
    mime_type_to_class();
    if (!v5)
    {
      if (v4 != (std::string *)a1)
      {
        char v8 = *(unsigned char *)(a2 + 519);
        if (*(char *)(a1 + 23) < 0)
        {
          if (v8 >= 0) {
            unsigned __int8 v36 = (void *)(a2 + 496);
          }
          else {
            unsigned __int8 v36 = *(void **)(a2 + 496);
          }
          if (v8 >= 0) {
            size_t v37 = *(unsigned __int8 *)(a2 + 519);
          }
          else {
            size_t v37 = *(void *)(a2 + 504);
          }
          std::string::__assign_no_alias<false>((void **)a1, v36, v37);
        }
        else
        {
          if ((*(unsigned char *)(a2 + 519) & 0x80) == 0)
          {
            *(_OWORD *)a1 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
            std::string::size_type v6 = *(void *)(a2 + 512);
LABEL_15:
            *(void *)(a1 + 16) = v6;
            goto LABEL_16;
          }
          std::string::__assign_no_alias<true>((void *)a1, *(void **)(a2 + 496), *(void *)(a2 + 504));
        }
      }
LABEL_16:
      if (*(char *)(a1 + 23) < 0)
      {
        if (*(void *)(a1 + 8)) {
          return;
        }
      }
      else if (*(unsigned char *)(a1 + 23))
      {
        return;
      }
      char v7 = *(unsigned char *)(a2 + 519);
      if (v7 < 0)
      {
        if (*(void *)(a2 + 504))
        {
LABEL_22:
          if (v4 != (std::string *)a1)
          {
            if ((*(unsigned char *)(a1 + 23) & 0x80) != 0)
            {
              if (v7 >= 0) {
                int v38 = (void *)(a2 + 496);
              }
              else {
                int v38 = *(void **)(a2 + 496);
              }
              if (v7 >= 0) {
                size_t v39 = *(unsigned __int8 *)(a2 + 519);
              }
              else {
                size_t v39 = *(void *)(a2 + 504);
              }
              std::string::__assign_no_alias<false>((void **)a1, v38, v39);
            }
            else if ((*(unsigned char *)(a2 + 519) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a1, *(void **)(a2 + 496), *(void *)(a2 + 504));
            }
            else
            {
              *(_OWORD *)a1 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
              *(void *)(a1 + 16) = *(void *)(a2 + 512);
            }
          }
          return;
        }
      }
      else if (*(unsigned char *)(a2 + 519))
      {
        goto LABEL_22;
      }
      std::string::__assign_external((std::string *)a1, "application/octet-stream", 0x18uLL);
      return;
    }
    switch(*((_DWORD *)v5 + 10))
    {
      case 0:
        if (*(char *)(a2 + 519) < 0)
        {
          std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(a2 + 496), *(void *)(a2 + 504));
        }
        else
        {
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
          v78.__r_.__value_.__r.__words[2] = *(void *)(a2 + 512);
        }
        std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v78.__r_.__value_.__l.__size_;
        }
        if (!size) {
          std::string::__assign_external(&v78, (const std::string::value_type *)kNWMIMETypeTextHTML);
        }
        uint64_t v41 = *(unsigned __int8 **)(a2 + 520);
        int v42 = *(unsigned __int8 **)(a2 + 528);
        if (v41 == v42)
        {
          std::string buf = v78;
          memset(&v78, 0, sizeof(v78));
          goto LABEL_191;
        }
        unint64_t v43 = 0;
        memset(&buf, 0, sizeof(buf));
        unint64_t v44 = v42 - v41;
        if (v44 >= 0x200) {
          unint64_t v44 = 512;
        }
        if (v44 >= 3)
        {
          if (*v41 == 239 && v41[1] == 187)
          {
            if (v41[2] == 191) {
              unint64_t v43 = 3;
            }
            else {
              unint64_t v43 = 0;
            }
          }
          else
          {
            unint64_t v43 = 0;
          }
        }
        if (v43 >= v44) {
          goto LABEL_188;
        }
        int64_t v49 = v41 + 2;
        while (2)
        {
          while (2)
          {
            if ((char)v41[v43] <= 0x20 && ((1 << v41[v43]) & 0x100002600) != 0)
            {
              unint64_t v51 = v43 + 1;
              goto LABEL_147;
            }
            if (v41[v43] != 60 || v43 + 3 >= v44) {
              goto LABEL_188;
            }
            unint64_t v51 = v43 + 1;
            uint64_t v53 = &v41[v43 + 1];
            if (*(_WORD *)v53 == 11553 && v53[2] == 45)
            {
              if (v43 + 6 >= v44) {
                goto LABEL_188;
              }
              unint64_t v58 = v43 + 4;
              while (*(_WORD *)&v41[v58] != 11565 || v41[v58 + 2] != 62)
              {
                unint64_t v60 = v58 + 3;
                ++v58;
                if (v60 >= v44) {
                  goto LABEL_188;
                }
              }
              unint64_t v43 = v58 + 3;
LABEL_187:
              if (v43 >= v44) {
                goto LABEL_188;
              }
              continue;
            }
            break;
          }
          int v55 = *v53;
          if (v55 == 33)
          {
            while (v43 + 2 < v44)
            {
              int v57 = v49[v43++];
              if (v57 == 62)
              {
                v43 += 2;
                goto LABEL_187;
              }
            }
          }
          else
          {
            if (v55 == 63)
            {
              while (v43 + 3 < v44)
              {
                int v56 = *(unsigned __int16 *)&v49[v43++];
                if (v56 == 15935)
                {
                  v43 += 3;
                  goto LABEL_187;
                }
              }
              break;
            }
            if (*(_WORD *)v53 == 29554 && v53[2] == 115)
            {
LABEL_234:
              *((unsigned char *)&buf.__r_.__value_.__s + 23) = 19;
              strcpy((char *)&buf, "application/rss+xml");
              goto LABEL_191;
            }
            if (v43 + 4 < v44)
            {
              if (*(_DWORD *)v53 == 1684366694)
              {
                *((unsigned char *)&buf.__r_.__value_.__s + 23) = 20;
                strcpy((char *)&buf, "application/atom+xml");
                goto LABEL_191;
              }
              if (v43 + 7 < v44)
              {
                int v62 = *(_DWORD *)v53;
                int v63 = *(_DWORD *)(v53 + 3);
                if (v62 != 979788914 || v63 != 1178882618)
                {
LABEL_147:
                  unint64_t v43 = v51;
                  if (v51 >= v44) {
                    break;
                  }
                  continue;
                }
                LOBYTE(v75) = 0;
                LOBYTE(v76) = 0;
                while (1)
                {
                  if (v76)
                  {
                    BOOL v76 = 1;
                  }
                  else
                  {
                    if (v51 + 23 >= v44) {
                      goto LABEL_188;
                    }
                    BOOL v76 = (*(void *)&v41[v51] ^ 0x702F2F3A70747468 | *(void *)&v41[v51 + 8] ^ 0x2F67726F2E6C7275 | *(void *)&v41[v51 + 16] ^ 0x2F302E312F737372) == 0;
                    if (!(*(void *)&v41[v51] ^ 0x702F2F3A70747468 | *(void *)&v41[v51 + 8] ^ 0x2F67726F2E6C7275 | *(void *)&v41[v51 + 16] ^ 0x2F302E312F737372)) {
                      v51 += 23;
                    }
                  }
                  if (v75)
                  {
                    BOOL v75 = 1;
                  }
                  else
                  {
                    if (v51 + 42 >= v44) {
                      goto LABEL_188;
                    }
                    BOOL v75 = (*(void *)&v41[v51] ^ 0x772F2F3A70747468 | *(void *)&v41[v51 + 8] ^ 0x726F2E33772E7777 | *(void *)&v41[v51 + 16] ^ 0x302F393939312F67 | *(void *)&v41[v51 + 24] ^ 0x6664722D32322F32 | *(void *)&v41[v51 + 32] ^ 0x2D7861746E79732DLL | *(void *)&v41[v51 + 35] ^ 0x23736E2D7861746ELL) == 0;
                    if (!(*(void *)&v41[v51] ^ 0x772F2F3A70747468 | *(void *)&v41[v51 + 8] ^ 0x726F2E33772E7777 | *(void *)&v41[v51 + 16] ^ 0x302F393939312F67 | *(void *)&v41[v51 + 24] ^ 0x6664722D32322F32 | *(void *)&v41[v51 + 32] ^ 0x2D7861746E79732DLL | *(void *)&v41[v51 + 35] ^ 0x23736E2D7861746ELL)) {
                      v51 += 42;
                    }
                  }
                  if (v76 && v75) {
                    goto LABEL_234;
                  }
                  if (++v51 >= v44) {
                    goto LABEL_188;
                  }
                }
              }
            }
          }
          break;
        }
LABEL_188:
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__assign_no_alias<true>(&buf, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
        }
        else {
          std::string buf = v78;
        }
LABEL_191:
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *(std::string *)a1 = buf;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
        buf.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        goto LABEL_16;
      case 1:
        uint64_t v9 = *(__int16 **)(a2 + 520);
        uint64_t v10 = *(unsigned __int16 **)(a2 + 528);
        if (v9 != (__int16 *)v10)
        {
          memset(&__dst, 0, sizeof(__dst));
          unint64_t v11 = (char *)v10 - (char *)v9;
          if (v11 >= 0x200) {
            unint64_t v11 = 512;
          }
          if (v11 < 3) {
            goto LABEL_46;
          }
          if (*v9 != -2 && *v9 != -257)
          {
            int v12 = (unsigned __int16)*v9;
            int v13 = *((unsigned __int8 *)v9 + 2);
            if (v12 != 48111 || v13 != 191) {
              goto LABEL_46;
            }
          }
          std::string::__assign_external(&__dst, (const std::string::value_type *)kNWMIMETypeTextPlain);
          std::string::size_type v15 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v15 = __dst.__r_.__value_.__l.__size_;
          }
          if (!v15)
          {
LABEL_46:
            uint64_t v16 = *(void *)(a2 + 520);
            uint64_t v17 = *(void *)(a2 + 528);
            if (v16 == v17) {
              goto LABEL_67;
            }
            unint64_t v18 = v17 - v16;
            if (v18 >= 0x200) {
              unint64_t v18 = 512;
            }
            if (!v18) {
              goto LABEL_67;
            }
            unint64_t v19 = v18 + v16 - 1;
            unint64_t v20 = v16 + 1;
            do
            {
              unsigned int v21 = *(unsigned __int8 *)(v20 - 1);
              BOOL v23 = v21 >= 9 && v21 != 11 && v21 - 14 >= 0xD;
              int v24 = v21 & 0xFC;
              BOOL v25 = !v23 || v24 == 28;
              char v26 = v25;
              if (v25) {
                break;
              }
            }
            while (v20++ <= v19);
            if ((v26 & 1) == 0) {
LABEL_67:
            }
              std::string::__assign_external(&__dst, (const std::string::value_type *)kNWMIMETypeTextPlain);
          }
          std::string::size_type v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          LOBYTE(v29) = *((unsigned char *)&__dst.__r_.__value_.__s + 23);
          std::string::size_type v30 = __dst.__r_.__value_.__l.__size_;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v31 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v31 = __dst.__r_.__value_.__l.__size_;
          }
          if (!v31)
          {
            {
              sNonScriptableTypeRules(void)::rules = 0;
              *(void *)algn_1E8F68DC8 = "%!PS-Adobe-";
              qword_1E8F68DD0 = 11;
              unk_1E8F68DD8 = "application/postscript";
              qword_1E8F68DE0 = (uint64_t)&unk_183D5CE76;
              unk_1E8F68DE8 = &unk_183D5CE7B;
              qword_1E8F68DF0 = 4;
              unk_1E8F68DF8 = kNWMIMETypeTextPlain;
              qword_1E8F68E00 = (uint64_t)&unk_183D5CE76;
              unk_1E8F68E08 = &unk_183D5CE80;
              qword_1E8F68E10 = 4;
              unk_1E8F68E18 = kNWMIMETypeTextPlain;
              qword_1E8F68E20 = (uint64_t)&unk_183D5CE85;
              unk_1E8F68E28 = &unk_183D5CE8A;
              qword_1E8F68E30 = 4;
              unk_1E8F68E38 = kNWMIMETypeTextPlain;
              qword_1E8F68E40 = 0;
              unk_1E8F68E48 = &unk_183D5CD38;
              qword_1E8F68E50 = 7;
              unk_1E8F68E58 = "application/x-rar-compressed";
              qword_1E8F68E60 = 0;
              unk_1E8F68E68 = "PK\x03\x04";
              qword_1E8F68E70 = 4;
              unk_1E8F68E78 = "application/zip";
              qword_1E8F68E80 = 0;
              unk_1E8F68E88 = "\x1F\x8B\b";
              qword_1E8F68E90 = 3;
              unk_1E8F68E98 = "application/x-gzip";
              qword_1E8F68EA0 = 0;
              unk_1E8F68EA8 = 0;
              qword_1E8F68EB0 = 0;
              unk_1E8F68EB8 = "";
            }
            nw_http_sniffing_get_mime_type_for_rule_array(&buf, *(void *)(a2 + 520), *(void *)(a2 + 528), &sNonScriptableTypeRules(void)::rules, 0);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            std::string __dst = buf;
            std::string::size_type v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            std::string::size_type v30 = buf.__r_.__value_.__l.__size_;
            std::string::size_type v29 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          if ((v29 & 0x80u) == 0) {
            std::string::size_type v32 = v28;
          }
          else {
            std::string::size_type v32 = v30;
          }
          if (!v32)
          {
            {
              sImageTypeRules(void)::rules = 0;
              unk_1E8F697C0 = "GIF87a";
              qword_1E8F697C8 = 6;
              unk_1E8F697D0 = kNWMIMETypeImageGIF;
              qword_1E8F697D8 = 0;
              unk_1E8F697E0 = "GIF89a";
              qword_1E8F697E8 = 6;
              unk_1E8F697F0 = kNWMIMETypeImageGIF;
              qword_1E8F697F8 = 0;
              unk_1E8F69800 = "\x89PNG\r\n\x1A\n";
              qword_1E8F69808 = 8;
              unk_1E8F69810 = kNWMIMETypeImagePNG;
              qword_1E8F69818 = 0;
              unk_1E8F69820 = "\xFF\xD8\xFF";
              qword_1E8F69828 = 3;
              unk_1E8F69830 = kNWMIMETypeImageJPEG;
              qword_1E8F69838 = 0;
              unk_1E8F69840 = "BM";
              qword_1E8F69848 = 2;
              unk_1E8F69850 = kNWMIMETypeImageBMP;
              qword_1E8F69858 = 0;
              unk_1E8F69860 = &unk_183D5CE8F;
              qword_1E8F69868 = 4;
              unk_1E8F69870 = kNWMIMETypeImageICO;
              qword_1E8F69878 = 0;
              unk_1E8F69880 = 0;
              qword_1E8F69888 = 0;
              unk_1E8F69890 = "";
            }
            nw_http_sniffing_get_mime_type_for_rule_array(&buf, *(void *)(a2 + 520), *(void *)(a2 + 528), &sImageTypeRules(void)::rules, 0);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            std::string __dst = buf;
            std::string::size_type v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            std::string::size_type v30 = buf.__r_.__value_.__l.__size_;
            std::string::size_type v29 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          if ((v29 & 0x80u) == 0) {
            std::string::size_type v33 = v28;
          }
          else {
            std::string::size_type v33 = v30;
          }
          if (!v33)
          {
            nw_http_sniffing_get_mime_type_for_complex_nonscriptable_type_rules((uint64_t)&buf, a2);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            std::string __dst = buf;
            std::string::size_type v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            std::string::size_type v30 = buf.__r_.__value_.__l.__size_;
            std::string::size_type v29 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          if ((v29 & 0x80u) != 0) {
            std::string::size_type v28 = v30;
          }
          if (!v28) {
            std::string::__assign_external(&__dst, "application/octet-stream", 0x18uLL);
          }
LABEL_207:
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          *(_OWORD *)a1 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          std::string::size_type v6 = __dst.__r_.__value_.__r.__words[2];
          goto LABEL_15;
        }
        int v45 = (const void *)kNWMIMETypeTextPlain;
        size_t v46 = strlen((const char *)kNWMIMETypeTextPlain);
        if (v46 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        std::string::size_type v47 = v46;
        if (v46 >= 0x17)
        {
          uint64_t v67 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17) {
            uint64_t v67 = v46 | 7;
          }
          uint64_t v68 = v67 + 1;
          p_dst = operator new(v67 + 1);
          __dst.__r_.__value_.__l.__size_ = v47;
          __dst.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v46;
          p_dst = &__dst;
          if (!v46) {
            goto LABEL_206;
          }
        }
        memmove(p_dst, v45, v47);
LABEL_206:
        *((unsigned char *)p_dst + v47) = 0;
        goto LABEL_207;
      case 2:
        {
          sImageTypeRules(void)::rules = 0;
          unk_1E8F697C0 = "GIF87a";
          qword_1E8F697C8 = 6;
          unk_1E8F697D0 = kNWMIMETypeImageGIF;
          qword_1E8F697D8 = 0;
          unk_1E8F697E0 = "GIF89a";
          qword_1E8F697E8 = 6;
          unk_1E8F697F0 = kNWMIMETypeImageGIF;
          qword_1E8F697F8 = 0;
          unk_1E8F69800 = "\x89PNG\r\n\x1A\n";
          qword_1E8F69808 = 8;
          unk_1E8F69810 = kNWMIMETypeImagePNG;
          qword_1E8F69818 = 0;
          unk_1E8F69820 = "\xFF\xD8\xFF";
          qword_1E8F69828 = 3;
          unk_1E8F69830 = kNWMIMETypeImageJPEG;
          qword_1E8F69838 = 0;
          unk_1E8F69840 = "BM";
          qword_1E8F69848 = 2;
          unk_1E8F69850 = kNWMIMETypeImageBMP;
          qword_1E8F69858 = 0;
          unk_1E8F69860 = &unk_183D5CE8F;
          qword_1E8F69868 = 4;
          unk_1E8F69870 = kNWMIMETypeImageICO;
          qword_1E8F69878 = 0;
          unk_1E8F69880 = 0;
          qword_1E8F69888 = 0;
          unk_1E8F69890 = "";
        }
        nw_http_sniffing_get_mime_type_for_rule_array(&buf, *(void *)(a2 + 520), *(void *)(a2 + 528), &sImageTypeRules(void)::rules, 0);
        std::string::size_type v34 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v34 = buf.__r_.__value_.__l.__size_;
        }
        if (v4 != &buf && !v34)
        {
          char v35 = *(unsigned char *)(a2 + 519);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v35 >= 0) {
              long long v65 = (void *)(a2 + 496);
            }
            else {
              long long v65 = *(void **)(a2 + 496);
            }
            if (v35 >= 0) {
              size_t v66 = *(unsigned __int8 *)(a2 + 519);
            }
            else {
              size_t v66 = *(void *)(a2 + 504);
            }
            std::string::__assign_no_alias<false>((void **)&buf.__r_.__value_.__l.__data_, v65, v66);
          }
          else if ((*(unsigned char *)(a2 + 519) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(&buf, *(void **)(a2 + 496), *(void *)(a2 + 504));
          }
          else
          {
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = *(void *)(a2 + 512);
          }
        }
        goto LABEL_12;
      case 3:
        goto LABEL_11;
      default:
        goto LABEL_16;
    }
  }
  __nwlog_obj();
  LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nw_http_sniffing_guess_media_type";
  int v69 = (char *)_os_log_send_and_compose_impl();
  __dst.__r_.__value_.__s.__data_[0] = 16;
  char v79 = 0;
  if (__nwlog_fault(v69, &__dst, &v79))
  {
    if (__dst.__r_.__value_.__s.__data_[0] == 17)
    {
      size_t v70 = __nwlog_obj();
      os_log_type_t v71 = __dst.__r_.__value_.__s.__data_[0];
      if (os_log_type_enabled(v70, (os_log_type_t)__dst.__r_.__value_.__s.__data_[0]))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nw_http_sniffing_guess_media_type";
        uint64_t v72 = "%{public}s called with null http_sniffing";
LABEL_239:
        _os_log_impl(&dword_1830D4000, v70, v71, v72, (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v79)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v70 = __nwlog_obj();
      os_log_type_t v71 = __dst.__r_.__value_.__s.__data_[0];
      BOOL v74 = os_log_type_enabled(v70, (os_log_type_t)__dst.__r_.__value_.__s.__data_[0]);
      if (backtrace_string)
      {
        if (v74)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nw_http_sniffing_guess_media_type";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)backtrace_string;
          _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s called with null http_sniffing, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_240;
      }
      if (v74)
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nw_http_sniffing_guess_media_type";
        uint64_t v72 = "%{public}s called with null http_sniffing, no backtrace";
        goto LABEL_239;
      }
    }
    else
    {
      size_t v70 = __nwlog_obj();
      os_log_type_t v71 = __dst.__r_.__value_.__s.__data_[0];
      if (os_log_type_enabled(v70, (os_log_type_t)__dst.__r_.__value_.__s.__data_[0]))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nw_http_sniffing_guess_media_type";
        uint64_t v72 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
        goto LABEL_239;
      }
    }
  }
LABEL_240:
  if (v69) {
    free(v69);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

void nw_http_sniffing_copy_mime_type_for_unknown(std::string *a1, uint64_t a2)
{
  if (*(void *)(a2 + 520) == *(void *)(a2 + 528))
  {
    char v5 = (const void *)kNWMIMETypeTextPlain;
    size_t v6 = strlen((const char *)kNWMIMETypeTextPlain);
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v23 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v23 = v6 | 7;
      }
      uint64_t v24 = v23 + 1;
      BOOL v25 = (std::string *)operator new(v23 + 1);
      a1->__r_.__value_.__l.__size_ = v7;
      a1->__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
      a1->__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      a1 = v25;
    }
    else
    {
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = v6;
      if (!v6) {
        goto LABEL_62;
      }
    }
    memmove(a1, v5, v7);
LABEL_62:
    a1->__r_.__value_.__s.__data_[v7] = 0;
    return;
  }
  {
    sScriptableTypeRules(void)::rules = (uint64_t)"\xFF\xFF\xDF\xDF\xDF\xDF\xDF\xDF\xDF\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68B20 = "<!DOCTYPE HTML ";
    qword_1E8F68B28 = 15;
    unk_1E8F68B30 = kNWMIMETypeTextHTML;
    qword_1E8F68B38 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68B40 = "<HTML ";
    qword_1E8F68B48 = 6;
    unk_1E8F68B50 = kNWMIMETypeTextHTML;
    qword_1E8F68B58 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68B60 = "<HEAD ";
    qword_1E8F68B68 = 6;
    unk_1E8F68B70 = kNWMIMETypeTextHTML;
    qword_1E8F68B78 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68B80 = "<SCRIPT ";
    qword_1E8F68B88 = 8;
    unk_1E8F68B90 = kNWMIMETypeTextHTML;
    qword_1E8F68B98 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68BA0 = "<IFRAME ";
    qword_1E8F68BA8 = 8;
    unk_1E8F68BB0 = kNWMIMETypeTextHTML;
    qword_1E8F68BB8 = (uint64_t)"\xFF\xDF\xDF\xFF";
    unk_1E8F68BC0 = "<H1 ";
    qword_1E8F68BC8 = 4;
    unk_1E8F68BD0 = kNWMIMETypeTextHTML;
    qword_1E8F68BD8 = (uint64_t)"\xFF\xDF\xDF\xDF\xFF";
    unk_1E8F68BE0 = "<DIV ";
    qword_1E8F68BE8 = 5;
    unk_1E8F68BF0 = kNWMIMETypeTextHTML;
    qword_1E8F68BF8 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68C00 = "<FONT ";
    qword_1E8F68C08 = 6;
    unk_1E8F68C10 = kNWMIMETypeTextHTML;
    qword_1E8F68C18 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68C20 = "<TABLE ";
    qword_1E8F68C28 = 7;
    unk_1E8F68C30 = kNWMIMETypeTextHTML;
    qword_1E8F68C38 = (uint64_t)"\xFF\xDF\xFF";
    unk_1E8F68C40 = "<A ";
    qword_1E8F68C48 = 3;
    unk_1E8F68C50 = kNWMIMETypeTextHTML;
    qword_1E8F68C58 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68C60 = "<STYLE ";
    qword_1E8F68C68 = 7;
    unk_1E8F68C70 = kNWMIMETypeTextHTML;
    qword_1E8F68C78 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68C80 = "<TITLE ";
    qword_1E8F68C88 = 7;
    unk_1E8F68C90 = kNWMIMETypeTextHTML;
    qword_1E8F68C98 = (uint64_t)"\xFF\xDF\xFF";
    unk_1E8F68CA0 = "<B ";
    qword_1E8F68CA8 = 3;
    unk_1E8F68CB0 = kNWMIMETypeTextHTML;
    qword_1E8F68CB8 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_1E8F68CC0 = "<BODY ";
    qword_1E8F68CC8 = 6;
    unk_1E8F68CD0 = kNWMIMETypeTextHTML;
    qword_1E8F68CD8 = (uint64_t)"\xFF\xDF\xDF\xFF";
    unk_1E8F68CE0 = "<BR ";
    qword_1E8F68CE8 = 4;
    unk_1E8F68CF0 = kNWMIMETypeTextHTML;
    qword_1E8F68CF8 = (uint64_t)"\xFF\xDF\xFF";
    unk_1E8F68D00 = "<P ";
    qword_1E8F68D08 = 3;
    unk_1E8F68D10 = kNWMIMETypeTextHTML;
    qword_1E8F68D18 = 0;
    qword_1E8F68D20 = (uint64_t)"<!--";
    qword_1E8F68D28 = 4;
    qword_1E8F68D30 = kNWMIMETypeTextHTML;
    qword_1E8F68D38 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    qword_1E8F68D40 = (uint64_t)"<META ";
    qword_1E8F68D48 = 6;
    qword_1E8F68D50 = kNWMIMETypeTextHTML;
    qword_1E8F68D58 = 0;
    qword_1E8F68D60 = (uint64_t)"<?xml";
    qword_1E8F68D68 = 5;
    qword_1E8F68D70 = (uint64_t)"text/xml";
    qword_1E8F68D78 = 0;
    qword_1E8F68D80 = (uint64_t)"%PDF-";
    qword_1E8F68D88 = 5;
    qword_1E8F68D90 = (uint64_t)"application/pdf";
    qword_1E8F68DA8 = 0;
    xmmword_1E8F68D98 = 0u;
    qword_1E8F68DB0 = (uint64_t)"";
  }
  nw_http_sniffing_get_mime_type_for_rule_array(a1, *(void *)(a2 + 520), *(void *)(a2 + 528), &sScriptableTypeRules(void)::rules, 1);
  LODWORD(v4) = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80000000) != 0)
  {
    if (a1->__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((v4 & 0x80) == 0) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)&a1->__r_.__value_.__s + 23))
  {
    goto LABEL_5;
  }
  {
    sNonScriptableTypeRules(void)::rules = 0;
    *(void *)algn_1E8F68DC8 = "%!PS-Adobe-";
    qword_1E8F68DD0 = 11;
    unk_1E8F68DD8 = "application/postscript";
    qword_1E8F68DE0 = (uint64_t)&unk_183D5CE76;
    unk_1E8F68DE8 = &unk_183D5CE7B;
    qword_1E8F68DF0 = 4;
    unk_1E8F68DF8 = kNWMIMETypeTextPlain;
    qword_1E8F68E00 = (uint64_t)&unk_183D5CE76;
    unk_1E8F68E08 = &unk_183D5CE80;
    qword_1E8F68E10 = 4;
    unk_1E8F68E18 = kNWMIMETypeTextPlain;
    qword_1E8F68E20 = (uint64_t)&unk_183D5CE85;
    unk_1E8F68E28 = &unk_183D5CE8A;
    qword_1E8F68E30 = 4;
    unk_1E8F68E38 = kNWMIMETypeTextPlain;
    qword_1E8F68E40 = 0;
    unk_1E8F68E48 = &unk_183D5CD38;
    qword_1E8F68E50 = 7;
    unk_1E8F68E58 = "application/x-rar-compressed";
    qword_1E8F68E60 = 0;
    unk_1E8F68E68 = "PK\x03\x04";
    qword_1E8F68E70 = 4;
    unk_1E8F68E78 = "application/zip";
    qword_1E8F68E80 = 0;
    unk_1E8F68E88 = "\x1F\x8B\b";
    qword_1E8F68E90 = 3;
    unk_1E8F68E98 = "application/x-gzip";
    qword_1E8F68EA0 = 0;
    unk_1E8F68EA8 = 0;
    qword_1E8F68EB0 = 0;
    unk_1E8F68EB8 = "";
  }
  nw_http_sniffing_get_mime_type_for_rule_array(&v26, *(void *)(a2 + 520), *(void *)(a2 + 528), &sNonScriptableTypeRules(void)::rules, 1);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a1->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v8 = v26.__r_.__value_.__r.__words[2];
  a1->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
  unint64_t v4 = HIBYTE(v8);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((_BYTE)v4) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  if (a1->__r_.__value_.__l.__size_)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_22:
  {
    sImageTypeRules(void)::rules = 0;
    unk_1E8F697C0 = "GIF87a";
    qword_1E8F697C8 = 6;
    unk_1E8F697D0 = kNWMIMETypeImageGIF;
    qword_1E8F697D8 = 0;
    unk_1E8F697E0 = "GIF89a";
    qword_1E8F697E8 = 6;
    unk_1E8F697F0 = kNWMIMETypeImageGIF;
    qword_1E8F697F8 = 0;
    unk_1E8F69800 = "\x89PNG\r\n\x1A\n";
    qword_1E8F69808 = 8;
    unk_1E8F69810 = kNWMIMETypeImagePNG;
    qword_1E8F69818 = 0;
    unk_1E8F69820 = "\xFF\xD8\xFF";
    qword_1E8F69828 = 3;
    unk_1E8F69830 = kNWMIMETypeImageJPEG;
    qword_1E8F69838 = 0;
    unk_1E8F69840 = "BM";
    qword_1E8F69848 = 2;
    unk_1E8F69850 = kNWMIMETypeImageBMP;
    qword_1E8F69858 = 0;
    unk_1E8F69860 = &unk_183D5CE8F;
    qword_1E8F69868 = 4;
    unk_1E8F69870 = kNWMIMETypeImageICO;
    qword_1E8F69878 = 0;
    unk_1E8F69880 = 0;
    qword_1E8F69888 = 0;
    unk_1E8F69890 = "";
  }
  nw_http_sniffing_get_mime_type_for_rule_array(&v26, *(void *)(a2 + 520), *(void *)(a2 + 528), &sImageTypeRules(void)::rules, 1);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a1->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v9 = v26.__r_.__value_.__r.__words[2];
  a1->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
  unint64_t v4 = HIBYTE(v9);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((_BYTE)v4) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  if (a1->__r_.__value_.__l.__size_)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_30:
    if (a1->__r_.__value_.__l.__size_) {
      goto LABEL_53;
    }
    goto LABEL_31;
  }
LABEL_27:
  nw_http_sniffing_get_mime_type_for_complex_nonscriptable_type_rules((uint64_t)&v26, a2);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a1->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v10 = v26.__r_.__value_.__r.__words[2];
  a1->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
  unint64_t v4 = HIBYTE(v10);
  if ((v4 & 0x80) != 0) {
    goto LABEL_30;
  }
LABEL_10:
  if ((_BYTE)v4) {
    goto LABEL_53;
  }
LABEL_31:
  uint64_t v11 = *(void *)(a2 + 520);
  uint64_t v12 = *(void *)(a2 + 528);
  if (v11 == v12) {
    goto LABEL_52;
  }
  unint64_t v13 = v12 - v11;
  if (v13 >= 0x200) {
    unint64_t v13 = 512;
  }
  if (!v13) {
    goto LABEL_52;
  }
  unint64_t v14 = v13 + v11 - 1;
  unint64_t v15 = v11 + 1;
  do
  {
    unsigned int v16 = *(unsigned __int8 *)(v15 - 1);
    BOOL v18 = v16 >= 9 && v16 != 11 && v16 - 14 >= 0xD;
    int v19 = v16 & 0xFC;
    BOOL v20 = !v18 || v19 == 28;
    char v21 = v20;
    if (v20) {
      break;
    }
  }
  while (v15++ <= v14);
  if ((v21 & 1) == 0)
  {
LABEL_52:
    std::string::__assign_external(a1, (const std::string::value_type *)kNWMIMETypeTextPlain);
    LOBYTE(v4) = *((unsigned char *)&a1->__r_.__value_.__s + 23);
  }
LABEL_53:
  if ((v4 & 0x80) != 0)
  {
    if (!a1->__r_.__value_.__l.__size_) {
LABEL_57:
    }
      std::string::__assign_external(a1, "application/octet-stream", 0x18uLL);
  }
  else if (!(_BYTE)v4)
  {
    goto LABEL_57;
  }
}

void mime_type_to_class(void)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  {
    int v11 = 0;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v12, (char *)kNWMIMETypeTextHTML, &v11);
    int v10 = 0;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v14, (char *)kNWMIMETypeApplicationXML, &v10);
    int v9 = 0;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v16, (char *)kNWMIMETypeApplicationXML, &v9);
    int v8 = 1;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v18, (char *)kNWMIMETypeTextPlain, &v8);
    int v7 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v20, (char *)kNWMIMETypeImageJPEG, &v7);
    int v6 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v22, (char *)kNWMIMETypeImageGIF, &v6);
    int v5 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v24, (char *)kNWMIMETypeImagePNG, &v5);
    int v4 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v26, (char *)kNWMIMETypeImageICO, &v4);
    int v3 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v28, (char *)kNWMIMETypeImageBMP, &v3);
    int v2 = 3;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v30, (char *)kNWMIMETypeUnknownUnknown, &v2);
    int v1 = 3;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(v32, (char *)kNWMIMETypeApplicationUnknown, &v1);
    int v0 = 3;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(__p, (char *)kNWMIMETypeAsteriskAsterisk, &v0);
    mime_type_to_class(void)::instance = 0u;
    *(_OWORD *)&qword_1E8F69C48 = 0u;
    dword_1E8F69C58 = 1065353216;
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v12, (uint64_t)v12);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v14, (uint64_t)v14);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v16, (uint64_t)v16);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v18, (uint64_t)v18);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v20, (uint64_t)v20);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v22, (uint64_t)v22);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v24, (uint64_t)v24);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v26, (uint64_t)v26);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v28, (uint64_t)v28);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v30, (uint64_t)v30);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)v32, (uint64_t)v32);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>((uint64_t)__p, (uint64_t)__p);
    if (v35 < 0)
    {
      operator delete(__p[0]);
      if ((v33 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v31 & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_19;
      }
    }
    else if ((v33 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v32[0]);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v30[0]);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
LABEL_20:
    operator delete(v28[0]);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete(v26[0]);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_10:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_23;
    }
LABEL_22:
    operator delete(v24[0]);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_24;
    }
LABEL_23:
    operator delete(v22[0]);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_25;
    }
LABEL_24:
    operator delete(v20[0]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_26;
    }
LABEL_25:
    operator delete(v18[0]);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v16[0]);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v13 & 0x80000000) == 0)
      {
LABEL_16:
        return;
      }
LABEL_28:
      operator delete(v12[0]);
      goto LABEL_16;
    }
LABEL_27:
    operator delete(v14[0]);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::find<std::string>(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    int v2 = (uint64_t *)a1;
  }
  else {
    int v2 = *(uint64_t **)a1;
  }
  if (v1 >= 0) {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v3 = *(void *)(a1 + 8);
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v2, v3);
  unint64_t v5 = *((void *)&mime_type_to_class(void)::instance + 1);
  if (*((void *)&mime_type_to_class(void)::instance + 1))
  {
    unint64_t v6 = v4;
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&mime_type_to_class(void)::instance + 8));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = v4;
      if (v4 >= *((void *)&mime_type_to_class(void)::instance + 1)) {
        unint64_t v8 = v4 % *((void *)&mime_type_to_class(void)::instance + 1);
      }
    }
    else
    {
      unint64_t v8 = (*((void *)&mime_type_to_class(void)::instance + 1) - 1) & v4;
    }
    int v9 = *(uint64_t ***)(mime_type_to_class(void)::instance + 8 * v8);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          uint64_t v11 = *((void *)&mime_type_to_class(void)::instance + 1) - 1;
          while (1)
          {
            uint64_t v17 = v10[1];
            if (v6 == v17)
            {
              uint64_t v18 = *((unsigned __int8 *)v10 + 39);
              if ((v18 & 0x80u) == 0) {
                uint64_t v19 = *((unsigned __int8 *)v10 + 39);
              }
              else {
                uint64_t v19 = v10[3];
              }
              if (v19 == v3)
              {
                if ((v18 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v10[2], v2, v10[3])) {
                    return v10;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v10 + 39)) {
                    return v10;
                  }
                  uint64_t v20 = 0;
                  while (*((unsigned __int8 *)v10 + v20 + 16) == *((unsigned __int8 *)v2 + v20))
                  {
                    if (v18 == ++v20) {
                      return v10;
                    }
                  }
                }
              }
            }
            else if ((v17 & v11) != v8)
            {
              return 0;
            }
            __n128 result = 0;
            int v10 = (uint64_t *)*v10;
            if (!v10) {
              return result;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v10[1];
          if (v6 == v13)
          {
            uint64_t v14 = *((unsigned __int8 *)v10 + 39);
            if ((v14 & 0x80u) == 0) {
              uint64_t v15 = *((unsigned __int8 *)v10 + 39);
            }
            else {
              uint64_t v15 = v10[3];
            }
            if (v15 == v3)
            {
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp((const void *)v10[2], v2, v10[3])) {
                  return v10;
                }
              }
              else
              {
                if (!*((unsigned char *)v10 + 39)) {
                  return v10;
                }
                uint64_t v16 = 0;
                while (*((unsigned __int8 *)v10 + v16 + 16) == *((unsigned __int8 *)v2 + v16))
                {
                  if (v14 == ++v16) {
                    return v10;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 >= v5) {
              v13 %= v5;
            }
            if (v13 != v8) {
              return 0;
            }
          }
          __n128 result = 0;
          int v10 = (uint64_t *)*v10;
          if (!v10) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      abort();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    std::string::size_type v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    std::string::size_type v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      std::string::size_type v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

std::string *nw_http_sniffing_get_mime_type_for_rule_array(std::string *result, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  result->__r_.__value_.__r.__words[0] = 0;
  result->__r_.__value_.__l.__size_ = 0;
  result->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    unint64_t v5 = 512;
    if ((unint64_t)(a3 - a2) < 0x200) {
      unint64_t v5 = a3 - a2;
    }
    std::string::size_type v6 = (unsigned char *)a4[1];
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      if (a5)
      {
        char v10 = 0;
        uint64_t v11 = a4;
        while (1)
        {
          unint64_t v14 = a4[4 * v7 + 2];
          if (v5 >= v14)
          {
            int v15 = *v6;
            if (v15 != 60)
            {
              uint64_t v16 = a2;
              if (!v14) {
                goto LABEL_8;
              }
              goto LABEL_19;
            }
            if (v10)
            {
              if (!v9) {
                goto LABEL_37;
              }
            }
            else
            {
              if (!v5) {
                goto LABEL_36;
              }
              uint64_t v20 = 0;
              while (1)
              {
                uint64_t v9 = a2 + v20;
                if (*(char *)(a2 + v20) > 0x20 || ((1 << *(unsigned char *)(a2 + v20)) & 0x100003600) == 0) {
                  break;
                }
                if (v5 == ++v20) {
                  goto LABEL_36;
                }
              }
              if (*(unsigned char *)(a2 + v20) != 60)
              {
LABEL_36:
                uint64_t v9 = 0;
LABEL_37:
                char v10 = 1;
                goto LABEL_10;
              }
              unint64_t v8 = v5 - v20;
            }
            char v10 = 1;
            uint64_t v16 = v9;
            if (v8 >= v14)
            {
              if (!v14)
              {
LABEL_8:
                uint64_t v13 = 0;
                goto LABEL_9;
              }
LABEL_19:
              uint64_t v17 = *v11;
              if (*v11)
              {
                if (v15 == 60)
                {
                  uint64_t v13 = 0;
                  while (1)
                  {
                    int v18 = (*(unsigned char *)(v17 + v13) & *(unsigned char *)(v16 + v13));
                    int v19 = v6[v13];
                    if (v18 != v19 && (v14 - 1 != v13 || v19 != 32 || v18 != 62 && v18 != 32)) {
                      break;
                    }
                    if (v14 == ++v13) {
                      return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                    }
                  }
                }
                else
                {
                  uint64_t v13 = 0;
                  while ((*(unsigned char *)(v17 + v13) & *(unsigned char *)(v16 + v13)) == v6[v13])
                  {
                    if (v14 == ++v13) {
                      return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                    }
                  }
                }
              }
              else if (v15 == 60)
              {
                uint64_t v13 = 0;
                while (1)
                {
                  int v22 = *(unsigned __int8 *)(v16 + v13);
                  int v23 = v6[v13];
                  if (v22 != v23 && (v14 - 1 != v13 || v23 != 32 || v22 != 62 && v22 != 32)) {
                    break;
                  }
                  if (v14 == ++v13) {
                    return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                  }
                }
              }
              else
              {
                uint64_t v13 = 0;
                while (*(unsigned __int8 *)(v16 + v13) == v6[v13])
                {
                  if (v14 == ++v13) {
                    return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                  }
                }
              }
LABEL_9:
              if (v13 == v14) {
                return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
              }
            }
          }
LABEL_10:
          ++v7;
          uint64_t v11 = &a4[4 * v7];
          std::string::size_type v6 = (unsigned char *)v11[1];
          if (!v6) {
            return result;
          }
        }
      }
      char v12 = 0;
      do
      {
        unint64_t v24 = a4[4 * v7 + 2];
        if (v5 >= v24)
        {
          if (*v6 == 60)
          {
            if (v12)
            {
              if (!v9 || v8 < v24) {
                goto LABEL_86;
              }
            }
            else
            {
              if (!v5) {
                goto LABEL_85;
              }
              uint64_t v28 = 0;
              while (1)
              {
                uint64_t v9 = a2 + v28;
                if (*(char *)(a2 + v28) > 0x20 || ((1 << *(unsigned char *)(a2 + v28)) & 0x100003600) == 0) {
                  break;
                }
                if (v5 == ++v28) {
                  goto LABEL_85;
                }
              }
              if (*(unsigned char *)(a2 + v28) != 60)
              {
LABEL_85:
                uint64_t v9 = 0;
LABEL_86:
                char v12 = 1;
                goto LABEL_59;
              }
              unint64_t v8 = v5 - v28;
              if (v5 - v28 < v24) {
                goto LABEL_86;
              }
            }
            uint64_t v25 = 0;
            if (v24)
            {
              while (1)
              {
                int v26 = *(unsigned __int8 *)(v9 + v25);
                int v27 = v6[v25];
                if (v26 != v27)
                {
                  char v12 = 1;
                  if (v24 - 1 != v25 || v27 != 32 || v26 != 62 && v26 != 32) {
                    break;
                  }
                }
                if (v24 == ++v25) {
                  return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                }
              }
            }
            else
            {
              char v12 = 1;
            }
          }
          else
          {
            uint64_t v25 = 0;
            if (v24)
            {
              while (*(unsigned __int8 *)(a2 + v25) == v6[v25])
              {
                if (v24 == ++v25) {
                  return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                }
              }
            }
          }
          if (v25 == v24) {
            return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
          }
        }
LABEL_59:
        ++v7;
        std::string::size_type v6 = (unsigned char *)a4[4 * v7 + 1];
      }
      while (v6);
    }
  }
  return result;
}

uint64_t nw_http_sniffing_get_mime_type_for_complex_nonscriptable_type_rules(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  int v2 = *(unsigned __int16 **)(a2 + 520);
  unint64_t v3 = *(unsigned __int16 **)(a2 + 528);
  if (v2 == v3) {
    return result;
  }
  unint64_t v4 = (char *)v3 - (char *)v2;
  if (v4 >= 0x200) {
    unint64_t v4 = 512;
  }
  if (v4 < 4)
  {
    int v6 = 0;
    goto LABEL_13;
  }
  BOOL v5 = *v2 == 17481 && *((unsigned char *)v2 + 2) == 51;
  if (v5 && *((char *)v2 + 3) <= 31)
  {
    int v6 = 10;
    *(unsigned char *)(result + 23) = 10;
    *(_WORD *)(result + 8) = 26469;
    *(void *)__n128 result = *(void *)"audio/mpeg";
LABEL_13:
    BOOL v7 = v4 > 7;
    goto LABEL_14;
  }
  if (v4 < 8)
  {
    BOOL v7 = 0;
    int v6 = 0;
    goto LABEL_42;
  }
  if (*((_DWORD *)v2 + 1) == 1987014509 || *((_DWORD *)v2 + 1) == 1952539757 || *((_DWORD *)v2 + 1) == 1701079415)
  {
    int v6 = 15;
    *(unsigned char *)(result + 23) = 15;
    qmemcpy((void *)result, "video/quicktime", 15);
    goto LABEL_66;
  }
  int v6 = 0;
  BOOL v7 = 1;
LABEL_14:
  BOOL v8 = v4 > 0xB;
  int v9 = v6;
  if (v6 || v4 < 0xC) {
    goto LABEL_20;
  }
  if (*(unsigned char *)v2 || *((unsigned char *)v2 + 1) || *((_DWORD *)v2 + 1) != 1887007846) {
    goto LABEL_19;
  }
  if (v2[4] == 28781 && *((unsigned char *)v2 + 10) == 52)
  {
    if (*((unsigned __int8 *)v2 + 11) - 49 <= 1)
    {
LABEL_107:
      int v6 = 9;
      *(unsigned char *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 52;
      unint64_t v14 = "video/mp4";
      goto LABEL_65;
    }
LABEL_19:
    int v9 = 0;
    BOOL v8 = 1;
    goto LABEL_20;
  }
  if (v2[4] == 29545 && *((unsigned char *)v2 + 10) == 111)
  {
    int v19 = *((unsigned __int8 *)v2 + 11);
    if (v19 == 109 || v19 == 50) {
      goto LABEL_107;
    }
    goto LABEL_19;
  }
  if (v2[4] != 13389 || *((unsigned char *)v2 + 10) != 86)
  {
    if (*((_DWORD *)v2 + 2) == 541144141)
    {
      int v6 = 9;
      *(unsigned char *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 52;
      unint64_t v14 = "audio/mp4";
      goto LABEL_65;
    }
    if (v2[4] == 26419)
    {
      if (v2[5] == 24882)
      {
        int v6 = 11;
        *(unsigned char *)(result + 23) = 11;
        *(_DWORD *)(result + 7) = 846229607;
        int v15 = "video/3gpp2";
        goto LABEL_75;
      }
      if (*((unsigned __int8 *)v2 + 10) - 101 <= 0xE
        && (*((unsigned char *)v2 + 11) & 0xFC) == 0x34
        && (v2[5] == 13925
         || v2[5] == 14181
         || v2[5] == 13927
         || v2[5] == 13424
         || v2[5] == 13680
         || v2[5] == 13936
         || v2[5] == 13938
         || v2[5] == 13939
         || v2[5] == 14195))
      {
        int v6 = 10;
        *(unsigned char *)(result + 23) = 10;
        *(_WORD *)(result + 8) = 28784;
        char v12 = "video/3gpp";
        goto LABEL_35;
      }
    }
    goto LABEL_19;
  }
  int v9 = 0;
  BOOL v8 = 1;
  unsigned int v20 = *((unsigned __int8 *)v2 + 11) - 32;
  if (v20 <= 0x30 && ((1 << v20) & 0x1010000000001) != 0)
  {
    int v6 = 9;
    *(unsigned char *)(result + 23) = 9;
    *(_WORD *)(result + 8) = 118;
    unint64_t v14 = "video/m4v";
    goto LABEL_65;
  }
LABEL_20:
  if (v9 || !v8) {
    goto LABEL_24;
  }
  if (*(_DWORD *)v2 == 1179011410)
  {
    if (*((_DWORD *)v2 + 2) == 1163280727)
    {
      int v6 = 9;
      *(unsigned char *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 118;
      unint64_t v14 = "audio/wav";
    }
    else
    {
      if (*((_DWORD *)v2 + 2) != 541677121) {
        goto LABEL_23;
      }
      int v6 = 9;
      *(unsigned char *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 105;
      unint64_t v14 = "video/avi";
    }
LABEL_65:
    *(void *)__n128 result = *(void *)v14;
    goto LABEL_66;
  }
LABEL_23:
  BOOL v8 = 1;
LABEL_24:
  if (v6
    || !v8
    || *(_DWORD *)v2 != 1297239878
    || (v2[4] == 18753 ? (BOOL v10 = *((unsigned char *)v2 + 10) == 70) : (BOOL v10 = 0),
        !v10 || (int v11 = *((unsigned __int8 *)v2 + 11), v11 != 70) && v11 != 67))
  {
LABEL_42:
    if (v6 || v4 < 5 || *((unsigned char *)v2 + 3) || *((unsigned char *)v2 + 4)) {
      goto LABEL_46;
    }
    if (*((unsigned char *)v2 + 1))
    {
      if (*((unsigned char *)v2 + 1) == 1 && (v2[1] & 0xF7) == 1) {
        goto LABEL_74;
      }
    }
    else if ((v2[1] & 0xF6) == 2)
    {
LABEL_74:
      int v6 = 11;
      *(unsigned char *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1634169441;
      int v15 = "image/targa";
LABEL_75:
      *(void *)__n128 result = *(void *)v15;
      *(unsigned char *)(result + 11) = 0;
      goto LABEL_66;
    }
LABEL_46:
    char v13 = !v7;
    if (v6) {
      char v13 = 1;
    }
    if ((v13 & 1) == 0 && (*((_DWORD *)v2 + 1) == 1668506729 || *((_DWORD *)v2 + 1) == 1952539753))
    {
      int v6 = 17;
      *(unsigned char *)(result + 23) = 17;
      strcpy((char *)result, "image/x-quicktime");
    }
    else if (!v6 && v4 >= 2 && *v2 == 759)
    {
      int v6 = 17;
      *(unsigned char *)(result + 23) = 17;
      strcpy((char *)result, "application/x-dvi");
    }
    goto LABEL_66;
  }
  int v6 = 10;
  *(unsigned char *)(result + 23) = 10;
  *(_WORD *)(result + 8) = 26214;
  char v12 = "audio/aiff";
LABEL_35:
  *(void *)__n128 result = *(void *)v12;
  *(unsigned char *)(result + 10) = 0;
LABEL_66:
  if (!v6
    && v4 >= 4
    && *v2 == 55809
    && *((unsigned __int8 *)v2 + 2) <= 1u
    && *((unsigned __int8 *)v2 + 3) - 1 <= 0xE)
  {
    *(unsigned char *)(result + 23) = 9;
    strcpy((char *)result, "image/sgi");
  }
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        int v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          BOOL v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      abort();
    }
    unint64_t v6 = HIBYTE(v10);
    BOOL v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    BOOL v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        int v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    size_t v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
      abort();
    }
    unint64_t v10 = v7 - 1;
    size_t v11 = a1;
    if ((v6 & 0x8000000000000000) != 0) {
      size_t v11 = *a1;
    }
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v12 = 2 * v10;
      if (__len > 2 * v10) {
        unint64_t v12 = __len;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v13 = v12 | 7;
      }
      if (v12 >= 0x17) {
        size_t v9 = v13 + 1;
      }
      else {
        size_t v9 = 23;
      }
    }
    unint64_t v14 = operator new(v9);
    unint64_t v8 = v14;
    if (__len) {
      memcpy(v14, __src, __len);
    }
    if (v10 != 22) {
      operator delete(v11);
    }
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    unint64_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
  }
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      uint64_t v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      uint64_t v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      uint64_t v8 = a1[2];
      uint64_t v7 = a1[3];
      uint64_t v9 = __ROR8__(v6 + v7, 52);
      uint64_t v10 = v6 + a1[1];
      uint64_t v11 = __ROR8__(v10, 7);
      uint64_t v12 = v10 + v8;
      uint64_t v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      uint64_t v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      uint64_t v15 = __ROR8__(v14 + v13, 52);
      uint64_t v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      uint64_t v17 = __ROR8__(v13, 37);
      uint64_t v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      uint64_t v19 = __ROR8__(v18, 7);
      uint64_t v20 = v16 + __ROR8__(v12, 31);
      uint64_t v21 = v18 + v5;
      uint64_t v22 = v21 + v14;
      unint64_t v23 = 0x9AE16A3B2F90404FLL;
      unint64_t v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      unint64_t v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    unint64_t v32 = 0x9DDFEA08EB382D69;
    uint64_t v33 = *(uint64_t *)((char *)a1 + a2 - 48);
    uint64_t v34 = *(uint64_t *)((char *)a1 + a2 - 40);
    uint64_t v35 = *(uint64_t *)((char *)a1 + a2 - 24);
    uint64_t v37 = *(uint64_t *)((char *)a1 + a2 - 64);
    uint64_t v36 = *(uint64_t *)((char *)a1 + a2 - 56);
    uint64_t v38 = *(uint64_t *)((char *)a1 + a2 - 16);
    uint64_t v39 = *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v40 = v36 + v38;
    unint64_t v41 = 0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))));
    unint64_t v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
    unint64_t v43 = v37 + a2 + v36 + v33;
    uint64_t v44 = v43 + v34;
    unint64_t v45 = __ROR8__(v43, 44) + v37 + a2 + __ROR8__(v34 + v37 + a2 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 21);
    uint64_t v46 = v36 + v38 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v47 = v46 + v35 + v38;
    uint64_t v48 = __ROR8__(v47, 44);
    uint64_t v49 = v47 + v39;
    uint64_t v50 = v48 + v46 + __ROR8__(v46 + v34 + v39, 21);
    uint64_t v52 = *a1;
    unint64_t v51 = a1 + 4;
    unint64_t v53 = v52 - 0x4B6D499041670D8DLL * v34;
    uint64_t v54 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v55 = *(v51 - 3);
      uint64_t v56 = v53 + v44 + v40 + v55;
      uint64_t v57 = v51[2];
      uint64_t v58 = v51[3];
      uint64_t v59 = v51[1];
      unint64_t v40 = v59 + v44 - 0x4B6D499041670D8DLL * __ROR8__(v40 + v45 + v57, 42);
      uint64_t v60 = v42 + v49;
      uint64_t v61 = *(v51 - 2);
      uint64_t v62 = *(v51 - 1);
      uint64_t v63 = *(v51 - 4) - 0x4B6D499041670D8DLL * v45;
      uint64_t v64 = v63 + v49 + v62;
      uint64_t v65 = v63 + v55 + v61;
      uint64_t v44 = v65 + v62;
      uint64_t v66 = __ROR8__(v65, 44) + v63;
      unint64_t v67 = (0xB492B66FBE98F273 * __ROR8__(v56, 37)) ^ v50;
      unint64_t v53 = 0xB492B66FBE98F273 * __ROR8__(v60, 33);
      unint64_t v45 = v66 + __ROR8__(v64 + v67, 21);
      unint64_t v68 = v53 + v50 + *v51;
      uint64_t v49 = v68 + v59 + v57 + v58;
      uint64_t v50 = __ROR8__(v68 + v59 + v57, 44) + v68 + __ROR8__(v40 + v61 + v68 + v58, 21);
      v51 += 8;
      unint64_t v42 = v67;
      v54 += 64;
    }
    while (v54);
    unint64_t v69 = v53
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) ^ ((0x9DDFEA08EB382D69 * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) >> 47));
    unint64_t v70 = 0x9DDFEA08EB382D69
        * (v69 ^ (v67
                - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47))));
    unint64_t v71 = 0x9DDFEA08EB382D69 * (v69 ^ (v70 >> 47) ^ v70);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    uint64_t v26 = a1[1];
    unint64_t v27 = 0xB492B66FBE98F273 * *a1;
    uint64_t v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    unint64_t v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v23 = 0x9DDFEA08EB382D69;
    unint64_t v30 = 0x9DDFEA08EB382D69 * ((v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v29);
    unint64_t v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    unint64_t v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 >= 9)
  {
    uint64_t v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    uint64_t v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
  }
  if (a2 >= 4)
  {
    uint64_t v72 = *(unsigned int *)((char *)a1 + a2 - 4);
    unint64_t v23 = 0x9DDFEA08EB382D69;
    unint64_t v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
    unint64_t v31 = v72 ^ (v73 >> 47) ^ v73;
    goto LABEL_8;
  }
  unint64_t v32 = 0x9AE16A3B2F90404FLL;
  if (a2)
  {
    unint64_t v71 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v32 *= v71 ^ (v71 >> 47);
  }
  return v32;
}

_DWORD *std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>(_DWORD *a1, char *__s, _DWORD *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v6;
    uint64_t v8 = a1;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v8, __s, v7);
LABEL_9:
  *((unsigned char *)v8 + v7) = 0;
  a1[6] = *a3;
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>(uint64_t a1, uint64_t a2)
{
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (uint64_t *)a1;
  }
  else {
    uint64_t v5 = *(uint64_t **)a1;
  }
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v6 = *(void *)(a1 + 8);
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  unint64_t v8 = v7;
  unint64_t v9 = *((void *)&mime_type_to_class(void)::instance + 1);
  if (*((void *)&mime_type_to_class(void)::instance + 1))
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&mime_type_to_class(void)::instance + 8));
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= *((void *)&mime_type_to_class(void)::instance + 1)) {
        unint64_t v2 = v7 % *((void *)&mime_type_to_class(void)::instance + 1);
      }
    }
    else
    {
      unint64_t v2 = (*((void *)&mime_type_to_class(void)::instance + 1) - 1) & v7;
    }
    uint64_t v11 = *(uint64_t ***)(mime_type_to_class(void)::instance + 8 * v2);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v12[1];
            if (v18 == v8)
            {
              uint64_t v19 = *((unsigned __int8 *)v12 + 39);
              if ((v19 & 0x80u) == 0) {
                uint64_t v20 = *((unsigned __int8 *)v12 + 39);
              }
              else {
                uint64_t v20 = v12[3];
              }
              if (v20 == v6)
              {
                uint64_t v21 = (const void **)(v12 + 2);
                if ((v19 & 0x80) != 0)
                {
                  if (!memcmp(*v21, v5, v12[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v12 + 39)) {
                    return;
                  }
                  for (uint64_t i = v5; *(unsigned __int8 *)v21 == *(unsigned __int8 *)i; uint64_t i = (uint64_t *)((char *)i + 1))
                  {
                    uint64_t v21 = (const void **)((char *)v21 + 1);
                    if (!--v19) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v18 & (v9 - 1)) != v2)
            {
              goto LABEL_49;
            }
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            uint64_t v14 = *((unsigned __int8 *)v12 + 39);
            if ((v14 & 0x80u) == 0) {
              uint64_t v15 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v15 = v12[3];
            }
            if (v15 == v6)
            {
              uint64_t v16 = (const void **)(v12 + 2);
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*v16, v5, v12[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return;
                }
                for (j = v5; *(unsigned __int8 *)v16 == *(unsigned __int8 *)j; j = (uint64_t *)((char *)j + 1))
                {
                  uint64_t v16 = (const void **)((char *)v16 + 1);
                  if (!--v14) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v2) {
              break;
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_49:
  unint64_t v23 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v23 = 0;
  *((void *)v23 + 1) = v8;
  unint64_t v24 = (std::string *)(v23 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v23 + 4) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v23 + 10) = *(_DWORD *)(a2 + 24);
  float v25 = (float)(unint64_t)(qword_1E8F69C50 + 1);
  if (!v9 || (float)(*(float *)&dword_1E8F69C58 * (float)v9) < v25)
  {
    BOOL v26 = 1;
    if (v9 >= 3) {
      BOOL v26 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v9);
    unint64_t v28 = vcvtps_u32_f32(v25 / *(float *)&dword_1E8F69C58);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v9 = *((void *)&mime_type_to_class(void)::instance + 1);
    if (prime <= *((void *)&mime_type_to_class(void)::instance + 1))
    {
      if (prime >= *((void *)&mime_type_to_class(void)::instance + 1)) {
        goto LABEL_89;
      }
      unint64_t v40 = vcvtps_u32_f32((float)(unint64_t)qword_1E8F69C50 / *(float *)&dword_1E8F69C58);
      if (*((void *)&mime_type_to_class(void)::instance + 1) < 3uLL
        || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&mime_type_to_class(void)::instance + 8)),
            v41.i16[0] = vaddlv_u8(v41),
            v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)&mime_type_to_class(void)::instance + 1);
LABEL_89:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        uint64_t v50 = (void *)mime_type_to_class(void)::instance;
        *(void *)&mime_type_to_class(void)::instance = 0;
        if (v50) {
          operator delete(v50);
        }
        unint64_t v9 = 0;
        *((void *)&mime_type_to_class(void)::instance + 1) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v30 = operator new(8 * prime);
    unint64_t v31 = (void *)mime_type_to_class(void)::instance;
    *(void *)&mime_type_to_class(void)::instance = v30;
    if (v31) {
      operator delete(v31);
    }
    uint64_t v32 = 0;
    *((void *)&mime_type_to_class(void)::instance + 1) = prime;
    do
      *(void *)(mime_type_to_class(void)::instance + 8 * v32++) = 0;
    while (prime != v32);
    uint64_t v33 = (void **)qword_1E8F69C48;
    if (!qword_1E8F69C48)
    {
LABEL_88:
      unint64_t v9 = prime;
      goto LABEL_89;
    }
    size_t v34 = *(void *)(qword_1E8F69C48 + 8);
    size_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v36 = v34 & v35;
      *(void *)(mime_type_to_class(void)::instance + 8 * v36) = &qword_1E8F69C48;
      for (k = *v33; *v33; k = *v33)
      {
        size_t v38 = k[1] & v35;
        if (v38 == v36)
        {
          uint64_t v33 = (void **)k;
        }
        else if (*(void *)(mime_type_to_class(void)::instance + 8 * v38))
        {
          *uint64_t v33 = (void *)*k;
          uint64_t v39 = 8 * v38;
          void *k = **(void **)(mime_type_to_class(void)::instance + v39);
          **(void **)(mime_type_to_class(void)::instance + v39) = k;
        }
        else
        {
          *(void *)(mime_type_to_class(void)::instance + 8 * v38) = v33;
          uint64_t v33 = (void **)k;
          size_t v36 = v38;
        }
      }
      goto LABEL_88;
    }
    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(mime_type_to_class(void)::instance + 8 * v34) = &qword_1E8F69C48;
    unint64_t v43 = *v33;
    if (!*v33) {
      goto LABEL_88;
    }
    while (1)
    {
      size_t v45 = v43[1];
      if (v45 >= prime) {
        v45 %= prime;
      }
      if (v45 != v34)
      {
        if (!*(void *)(mime_type_to_class(void)::instance + 8 * v45))
        {
          *(void *)(mime_type_to_class(void)::instance + 8 * v45) = v33;
          goto LABEL_93;
        }
        *uint64_t v33 = (void *)*v43;
        uint64_t v44 = 8 * v45;
        *unint64_t v43 = **(void **)(mime_type_to_class(void)::instance + v44);
        **(void **)(mime_type_to_class(void)::instance + v44) = v43;
        unint64_t v43 = v33;
      }
      size_t v45 = v34;
LABEL_93:
      uint64_t v33 = (void **)v43;
      unint64_t v43 = (void *)*v43;
      size_t v34 = v45;
      if (!v43) {
        goto LABEL_88;
      }
    }
  }
LABEL_102:
  uint64_t v46 = mime_type_to_class(void)::instance;
  uint64_t v47 = *(void **)(mime_type_to_class(void)::instance + 8 * v2);
  if (v47)
  {
    *(void *)unint64_t v23 = *v47;
LABEL_110:
    *uint64_t v47 = v23;
    goto LABEL_111;
  }
  uint64_t v48 = qword_1E8F69C48;
  *(void *)unint64_t v23 = qword_1E8F69C48;
  qword_1E8F69C48 = (uint64_t)v23;
  *(void *)(v46 + 8 * v2) = &qword_1E8F69C48;
  if (v48)
  {
    unint64_t v49 = *(void *)(v48 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v49 >= v9) {
        v49 %= v9;
      }
    }
    else
    {
      v49 &= v9 - 1;
    }
    uint64_t v47 = (void *)(mime_type_to_class(void)::instance + 8 * v49);
    goto LABEL_110;
  }
LABEL_111:
  ++qword_1E8F69C50;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

__n128 __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t ___ZL31nw_http_sniffing_get_media_typeP25nw_protocol_http_sniffingP20nw_protocol_metadata_block_invoke(uint64_t a1, int a2, int a3, char *__s, uint64_t a5)
{
  if (a5)
  {
    unint64_t v8 = strchr(__s, 59);
    uint64_t v9 = v8 - __s;
    if (!v8) {
      uint64_t v9 = a5;
    }
    uint64_t v10 = v9 - 1;
    uint64_t v11 = MEMORY[0x1E4F14390];
    do
    {
      while (1)
      {
        if (v10 == -1)
        {
          size_t v15 = 0;
          HIBYTE(v26) = 0;
          p_dst = &__dst;
          goto LABEL_17;
        }
        uint64_t v13 = v10;
        unsigned int v14 = __s[v10];
        if ((v14 & 0x80000000) == 0) {
          break;
        }
        int v12 = __maskrune(v14, 0x4000uLL);
        uint64_t v10 = v13 - 1;
        if (!v12) {
          goto LABEL_9;
        }
      }
      --v10;
    }
    while ((*(_DWORD *)(v11 + 4 * v14 + 60) & 0x4000) != 0);
LABEL_9:
    size_t v15 = v13 + 1;
    if ((unint64_t)(v13 + 1) >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v15 >= 0x17)
    {
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (long long *)operator new(v17 + 1);
      *((void *)&__dst + 1) = v15;
      int64_t v26 = v18 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v26) = v13 + 1;
      p_dst = &__dst;
    }
    memcpy(p_dst, __s, v15);
LABEL_17:
    *((unsigned char *)p_dst + v15) = 0;
    size_t v19 = HIBYTE(v26);
    int v20 = SHIBYTE(v26);
    if (v26 < 0) {
      size_t v19 = *((void *)&__dst + 1);
    }
    if (v19)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v22 = (void **)(v21 + 40);
      if ((*(char *)(v21 + 63) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v26) & 0x80000000) == 0)
        {
          *(_OWORD *)uint64_t v22 = __dst;
          *(void *)(v21 + 56) = v26;
          return 1;
        }
        std::string::__assign_no_alias<true>(v22, (void *)__dst, *((size_t *)&__dst + 1));
LABEL_30:
        operator delete((void *)__dst);
        return 1;
      }
      if (v26 >= 0) {
        unint64_t v23 = &__dst;
      }
      else {
        unint64_t v23 = (long long *)__dst;
      }
      std::string::__assign_no_alias<false>(v22, v23, v19);
    }
    if ((v20 & 0x80000000) == 0) {
      return 1;
    }
    goto LABEL_30;
  }
  return 1;
}

uint64_t ___ZL29nw_http_sniffing_should_sniffP25nw_protocol_http_sniffingNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP20nw_protocol_metadata_block_invoke(uint64_t result, char *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    __n128 result = strcasecmp(a2, "nosniff");
    if (!result) {
      *(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

uint64_t ___ZL29nw_http_sniffing_should_sniffP25nw_protocol_http_sniffingNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP20nw_protocol_metadata_block_invoke_2(uint64_t a1, int a2, int a3, char *__big)
{
  uint64_t v5 = strcasestr(__big, "charset=");
  if (!v5) {
    return 1;
  }
  unint64_t v6 = v5;
  unint64_t v7 = v5 + 8;
  uint64_t v8 = 8;
  do
  {
    uint64_t v9 = v8;
    char is_valid_token_char = nw_http_is_valid_token_char(v6[v8]);
    uint64_t v8 = v9 + 1;
  }
  while ((is_valid_token_char & 1) != 0);
  size_t v11 = v9 - 8;
  if ((unint64_t)(v9 - 8) >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v11;
    unint64_t v19 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v19) = v9 - 8;
    p_dst = &__dst;
    if (!v11) {
      goto LABEL_12;
    }
  }
  memmove(p_dst, v7, v11);
LABEL_12:
  *((unsigned char *)p_dst + v11) = 0;
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v16 = v15 + 40;
  if (*(char *)(v15 + 63) < 0) {
    operator delete(*(void **)v16);
  }
  *(_OWORD *)uint64_t v16 = __dst;
  *(void *)(v16 + 16) = v19;
  return 1;
}

double __nw_protocol_http_sniffing_identifier_block_invoke()
{
  strcpy((char *)&nw_protocol_http_sniffing_identifier::protocol_identifier, "http_sniffing");
  *(void *)&double result = 0x100000005;
  qword_1E8F6A260 = 0x100000005;
  return result;
}

uint64_t networkd_privileged_get_kernel_socket_internal(uint64_t a1)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_uint64(v2, (const char *)networkd_privileged_key_type, a1);
    xpc_object_t v4 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_get_kernel_socket_internal", v3);
    uint64_t v5 = v4;
    if (!v4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v94 = 0;
      if (!__nwlog_fault(v7, &type, &v94)) {
        goto LABEL_68;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s received NULL response", buf, 0xCu);
        }
        goto LABEL_175;
      }
      if (!v94)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v13, v31, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_175;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (id)gLogObj;
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s received NULL response, no backtrace", buf, 0xCu);
        }
        goto LABEL_175;
      }
      if (v23)
      {
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 2082;
        *(void *)unint64_t v99 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
    Class Class = object_getClass(v4);
    if (Class != (Class)MEMORY[0x1E4F14590])
    {
      if (Class != (Class)MEMORY[0x1E4F145A8])
      {
        unint64_t v7 = (char *)MEMORY[0x185319370](v5);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 2082;
        *(void *)unint64_t v99 = v7;
        uint64_t v9 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v94 = 0;
        if (!__nwlog_fault(v9, &type, &v94)) {
          goto LABEL_65;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = (id)gLogObj;
          os_log_type_t v11 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)std::string buf = 136446466;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            __int16 v98 = 2082;
            *(void *)unint64_t v99 = v7;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
          }
LABEL_64:

LABEL_65:
          if (!v9) {
            goto LABEL_68;
          }
          goto LABEL_66;
        }
        if (!v94)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = (id)gLogObj;
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)std::string buf = 136446466;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            __int16 v98 = 2082;
            *(void *)unint64_t v99 = v7;
            _os_log_impl(&dword_1830D4000, v10, v40, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_64;
        }
        int64_t v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v10, type);
        if (!v26)
        {
          if (v28)
          {
            *(_DWORD *)std::string buf = 136446466;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            __int16 v98 = 2082;
            *(void *)unint64_t v99 = v7;
            _os_log_impl(&dword_1830D4000, v10, v27, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_64;
        }
        if (v28)
        {
          *(_DWORD *)std::string buf = 136446722;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 2082;
          *(void *)unint64_t v99 = v7;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v26;
          _os_log_impl(&dword_1830D4000, v10, v27, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v26);
        if (!v9)
        {
LABEL_68:
          if (!v7)
          {
LABEL_141:
            uint64_t v52 = 0xFFFFFFFFLL;
            goto LABEL_142;
          }
LABEL_69:
          free(v7);
          goto LABEL_141;
        }
LABEL_66:
        uint8x8_t v41 = (char *)v9;
LABEL_67:
        free(v41);
        goto LABEL_68;
      }
      if (v5 != (void *)MEMORY[0x1E4F14520])
      {
        if (v5 == (void *)MEMORY[0x1E4F14528])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v47 = (id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136446210;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
          }

          goto LABEL_141;
        }
        if (v5 != (void *)MEMORY[0x1E4F14550])
        {
          unint64_t v7 = (char *)MEMORY[0x185319370](v5);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v24 = (id)gLogObj;
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 2082;
          *(void *)unint64_t v99 = v7;
          uint64_t v9 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v94 = 0;
          if (!__nwlog_fault(v9, &type, &v94)) {
            goto LABEL_65;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v10 = __nwlog_obj();
            os_log_type_t v25 = type;
            if (os_log_type_enabled(v10, type))
            {
              *(_DWORD *)std::string buf = 136446466;
              uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
              __int16 v98 = 2082;
              *(void *)unint64_t v99 = v7;
              _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
            }
            goto LABEL_64;
          }
          if (!v94)
          {
            uint64_t v10 = __nwlog_obj();
            os_log_type_t v78 = type;
            if (os_log_type_enabled(v10, type))
            {
              *(_DWORD *)std::string buf = 136446466;
              uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
              __int16 v98 = 2082;
              *(void *)unint64_t v99 = v7;
              _os_log_impl(&dword_1830D4000, v10, v78, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
            }
            goto LABEL_64;
          }
          uint64_t v57 = (char *)__nw_create_backtrace_string();
          uint64_t v10 = __nwlog_obj();
          os_log_type_t v58 = type;
          BOOL v59 = os_log_type_enabled(v10, type);
          if (!v57)
          {
            if (v59)
            {
              *(_DWORD *)std::string buf = 136446466;
              uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
              __int16 v98 = 2082;
              *(void *)unint64_t v99 = v7;
              _os_log_impl(&dword_1830D4000, v10, v58, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
            }
            goto LABEL_64;
          }
          if (v59)
          {
            *(_DWORD *)std::string buf = 136446722;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            __int16 v98 = 2082;
            *(void *)unint64_t v99 = v7;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = v57;
            _os_log_impl(&dword_1830D4000, v10, v58, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v57);
          if (!v9) {
            goto LABEL_68;
          }
          goto LABEL_66;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v50 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        unint64_t v7 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v94 = 0;
        if (!__nwlog_fault(v7, &type, &v94)) {
          goto LABEL_68;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v13 = __nwlog_obj();
          os_log_type_t v51 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl(&dword_1830D4000, v13, v51, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
          }
        }
        else if (v94)
        {
          uint64_t v66 = __nw_create_backtrace_string();
          uint64_t v13 = __nwlog_obj();
          os_log_type_t v67 = type;
          BOOL v68 = os_log_type_enabled(v13, type);
          if (v66)
          {
            if (v68)
            {
              *(_DWORD *)std::string buf = 136446466;
              uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
              __int16 v98 = 2082;
              *(void *)unint64_t v99 = v66;
              _os_log_impl(&dword_1830D4000, v13, v67, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
            }

            uint8x8_t v41 = (char *)v66;
            goto LABEL_67;
          }
          if (v68)
          {
            *(_DWORD *)std::string buf = 136446210;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl(&dword_1830D4000, v13, v67, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v13 = __nwlog_obj();
          os_log_type_t v79 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl(&dword_1830D4000, v13, v79, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_175:

        goto LABEL_68;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v32 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v94 = 0;
      if (!__nwlog_fault(v7, &type, &v94)) {
        goto LABEL_68;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_175;
      }
      if (!v94)
      {
        uint64_t v13 = __nwlog_obj();
        os_log_type_t v69 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v13, v69, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_175;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v13, v48, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_175;
      }
      if (v49)
      {
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 2082;
        *(void *)unint64_t v99 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v48, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
      if (!v7) {
        goto LABEL_141;
      }
      goto LABEL_69;
    }
    uint64_t v15 = xpc_dictionary_get_value(v5, (const char *)networkd_privileged_key_result);
    uint64_t v16 = v15;
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v29 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
      uint64_t v18 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v94 = 0;
      if (!__nwlog_fault(v18, &type, &v94)) {
        goto LABEL_137;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v19 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (!v94)
      {
        unint64_t v19 = __nwlog_obj();
        os_log_type_t v65 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v19, v65, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_136;
      }
      uint64_t v42 = (char *)__nw_create_backtrace_string();
      unint64_t v19 = __nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v19, type);
      if (!v42)
      {
        if (v46)
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v19, v45, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (v46)
      {
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 2082;
        *(void *)unint64_t v99 = v42;
        _os_log_impl(&dword_1830D4000, v19, v45, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_82;
    }
    if (object_getClass(v15) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v17 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
      uint64_t v18 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v94 = 0;
      if (!__nwlog_fault(v18, &type, &v94)) {
        goto LABEL_137;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_136:

LABEL_137:
        if (!v18)
        {
LABEL_140:

          goto LABEL_141;
        }
        goto LABEL_138;
      }
      if (!v94)
      {
        unint64_t v19 = __nwlog_obj();
        os_log_type_t v64 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v19, v64, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_136;
      }
      uint64_t v42 = (char *)__nw_create_backtrace_string();
      unint64_t v19 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v44 = os_log_type_enabled(v19, type);
      if (!v42)
      {
        if (v44)
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_1830D4000, v19, v43, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (v44)
      {
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 2082;
        *(void *)unint64_t v99 = v42;
        _os_log_impl(&dword_1830D4000, v19, v43, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_82:

      free(v42);
      if (!v18) {
        goto LABEL_140;
      }
LABEL_138:
      unint64_t v70 = (char *)v18;
LABEL_139:
      free(v70);
      goto LABEL_140;
    }
    unint64_t value = xpc_int64_get_value(v16);
    uint64_t v35 = value;
    if (value)
    {
      if (!(value >> 31))
      {
        size_t v36 = __nwlog_obj();
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 1024;
        *(_DWORD *)unint64_t v99 = v35;
        uint64_t v37 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v94 = 0;
        if (__nwlog_fault(v37, &type, &v94))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            size_t v38 = __nwlog_obj();
            os_log_type_t v39 = type;
            if (os_log_type_enabled(v38, type))
            {
              *(_DWORD *)std::string buf = 136446466;
              uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
              __int16 v98 = 1024;
              *(_DWORD *)unint64_t v99 = v35;
              _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
            }
          }
          else if (v94)
          {
            uint64_t v72 = (char *)__nw_create_backtrace_string();
            size_t v38 = __nwlog_obj();
            os_log_type_t v73 = type;
            BOOL v74 = os_log_type_enabled(v38, type);
            if (v72)
            {
              if (v74)
              {
                *(_DWORD *)std::string buf = 136446722;
                uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
                __int16 v98 = 1024;
                *(_DWORD *)unint64_t v99 = v35;
                *(_WORD *)&v99[4] = 2082;
                *(void *)&v99[6] = v72;
                _os_log_impl(&dword_1830D4000, v38, v73, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v72);
              if (!v37) {
                goto LABEL_140;
              }
LABEL_183:
              unint64_t v70 = (char *)v37;
              goto LABEL_139;
            }
            if (v74)
            {
              *(_DWORD *)std::string buf = 136446466;
              uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
              __int16 v98 = 1024;
              *(_DWORD *)unint64_t v99 = v35;
              _os_log_impl(&dword_1830D4000, v38, v73, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            size_t v38 = __nwlog_obj();
            os_log_type_t v80 = type;
            if (os_log_type_enabled(v38, type))
            {
              *(_DWORD *)std::string buf = 136446466;
              uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
              __int16 v98 = 1024;
              *(_DWORD *)unint64_t v99 = v35;
              _os_log_impl(&dword_1830D4000, v38, v80, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
            }
          }
        }
LABEL_182:
        if (!v37) {
          goto LABEL_140;
        }
        goto LABEL_183;
      }
      uint64_t v60 = __nwlog_obj();
      uint64_t v61 = networkd_privileged_result_to_string(v35);
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
      __int16 v98 = 2048;
      *(void *)unint64_t v99 = v35;
      *(_WORD *)&v99[8] = 2082;
      *(void *)&v99[10] = v61;
      uint64_t v37 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v94 = 0;
      if (!__nwlog_fault(v37, &type, &v94)) {
        goto LABEL_182;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v62 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)std::string buf = 136446722;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 2048;
          *(void *)unint64_t v99 = v35;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v61;
          _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
        }
      }
      else if (v94)
      {
        BOOL v75 = (char *)__nw_create_backtrace_string();
        uint64_t v62 = __nwlog_obj();
        os_log_type_t v76 = type;
        BOOL v77 = os_log_type_enabled(v62, type);
        if (v75)
        {
          if (v77)
          {
            *(_DWORD *)std::string buf = 136446978;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            __int16 v98 = 2048;
            *(void *)unint64_t v99 = v35;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = v61;
            __int16 v100 = 2082;
            __int16 v101 = v75;
            _os_log_impl(&dword_1830D4000, v62, v76, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v75);
          goto LABEL_182;
        }
        if (v77)
        {
          *(_DWORD *)std::string buf = 136446722;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 2048;
          *(void *)unint64_t v99 = v35;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v61;
          _os_log_impl(&dword_1830D4000, v62, v76, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        uint64_t v62 = __nwlog_obj();
        os_log_type_t v81 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)std::string buf = 136446722;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 2048;
          *(void *)unint64_t v99 = v35;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v61;
          _os_log_impl(&dword_1830D4000, v62, v81, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

      goto LABEL_182;
    }

    uint64_t v52 = xpc_dictionary_dup_fd(v5, (const char *)networkd_privileged_key_kernel_socket_fd);
    if ((v52 & 0x80000000) == 0)
    {
LABEL_142:

      goto LABEL_143;
    }
    unint64_t v53 = __nwlog_obj();
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
    __int16 v98 = 1024;
    *(_DWORD *)unint64_t v99 = v52;
    uint64_t v54 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v94 = 0;
    if (__nwlog_fault(v54, &type, &v94))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v55 = __nwlog_obj();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 1024;
          *(_DWORD *)unint64_t v99 = v52;
          _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s received invalid fd %d", buf, 0x12u);
        }
      }
      else if (v94)
      {
        uint64_t v90 = (char *)__nw_create_backtrace_string();
        uint64_t v55 = __nwlog_obj();
        os_log_type_t v91 = type;
        BOOL v92 = os_log_type_enabled(v55, type);
        if (v90)
        {
          if (v92)
          {
            *(_DWORD *)std::string buf = 136446722;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            __int16 v98 = 1024;
            *(_DWORD *)unint64_t v99 = v52;
            *(_WORD *)&v99[4] = 2082;
            *(void *)&v99[6] = v90;
            _os_log_impl(&dword_1830D4000, v55, v91, "%{public}s received invalid fd %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v90);
          goto LABEL_214;
        }
        if (v92)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 1024;
          *(_DWORD *)unint64_t v99 = v52;
          _os_log_impl(&dword_1830D4000, v55, v91, "%{public}s received invalid fd %d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        uint64_t v55 = __nwlog_obj();
        os_log_type_t v93 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 1024;
          *(_DWORD *)unint64_t v99 = v52;
          _os_log_impl(&dword_1830D4000, v55, v93, "%{public}s received invalid fd %d, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
LABEL_214:
    if (v54) {
      free(v54);
    }
    goto LABEL_142;
  }
  id v82 = __nwlog_obj();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
  BOOL v83 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v94 = 0;
  if (__nwlog_fault(v83, &type, &v94))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v84 = __nwlog_obj();
      os_log_type_t v85 = type;
      if (os_log_type_enabled(v84, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        _os_log_impl(&dword_1830D4000, v84, v85, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
      }
    }
    else if (v94)
    {
      int v86 = (char *)__nw_create_backtrace_string();
      uint64_t v84 = __nwlog_obj();
      os_log_type_t v87 = type;
      BOOL v88 = os_log_type_enabled(v84, type);
      if (v86)
      {
        if (v88)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          __int16 v98 = 2082;
          *(void *)unint64_t v99 = v86;
          _os_log_impl(&dword_1830D4000, v84, v87, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v86);
        goto LABEL_200;
      }
      if (v88)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        _os_log_impl(&dword_1830D4000, v84, v87, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v84 = __nwlog_obj();
      os_log_type_t v89 = type;
      if (os_log_type_enabled(v84, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        _os_log_impl(&dword_1830D4000, v84, v89, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_200:
  if (v83) {
    free(v83);
  }
  uint64_t v52 = 0xFFFFFFFFLL;
LABEL_143:

  return v52;
}

void sub_1835EF708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t networkd_privileged_send_sync_inner(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  xpc_object_t v4 = (_xpc_connection_s *)networkd_privileged_copy_connection();
  uint64_t v5 = v4;
  if (v4)
  {
    xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v4, v3);
    if (v6 == (xpc_object_t)MEMORY[0x1E4F14520])
    {
      id v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136446722;
        uint64_t v15 = "networkd_privileged_send_sync_inner";
        __int16 v16 = 2082;
        uint64_t v17 = a1;
        __int16 v18 = 1024;
        int v19 = 1;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)", (uint8_t *)&v14, 0x1Cu);
      }

      xpc_object_t v9 = (xpc_object_t)MEMORY[0x1E4F14520];
      xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);

      if (v6 == v9)
      {
        uint64_t v10 = __nwlog_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int v14 = 136446722;
          uint64_t v15 = "networkd_privileged_send_sync_inner";
          __int16 v16 = 2082;
          uint64_t v17 = a1;
          __int16 v18 = 1024;
          int v19 = 2;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)", (uint8_t *)&v14, 0x1Cu);
        }

        xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);
        if (v6 == v9)
        {
          os_log_type_t v11 = __nwlog_obj();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            int v14 = 136446722;
            uint64_t v15 = "networkd_privileged_send_sync_inner";
            __int16 v16 = 2082;
            uint64_t v17 = a1;
            __int16 v18 = 1024;
            int v19 = 3;
            _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)", (uint8_t *)&v14, 0x1Cu);
          }

          xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);
          if (v6 == v9)
          {
            id v12 = __nwlog_obj();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              int v14 = 136446722;
              uint64_t v15 = "networkd_privileged_send_sync_inner";
              __int16 v16 = 2082;
              uint64_t v17 = a1;
              __int16 v18 = 1024;
              int v19 = 4;
              _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)", (uint8_t *)&v14, 0x1Cu);
            }

            xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);
            if (v6 == v9)
            {
              uint64_t v13 = __nwlog_obj();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
              {
                int v14 = 136446722;
                uint64_t v15 = "networkd_privileged_send_sync_inner";
                __int16 v16 = 2082;
                uint64_t v17 = a1;
                __int16 v18 = 1024;
                int v19 = 5;
                _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)", (uint8_t *)&v14, 0x1Cu);
              }

              xpc_object_t v6 = (xpc_object_t)MEMORY[0x1E4F14520];
            }
          }
        }
      }
    }
  }
  else
  {
    xpc_object_t v6 = 0;
  }

  return v6;
}

void sub_1835EFAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *networkd_privileged_result_to_string(uint64_t a1)
{
  if (a1 != (int)a1) {
    return "Unknown";
  }
  switch(a1)
  {
    case 0xFFFFFC12:
      double result = "FailureParseAgent";
      break;
    case 0xFFFFFC13:
      double result = "FailureCreateXPCFD";
      break;
    case 0xFFFFFC14:
      double result = "FailureCreateKernelSocket";
      break;
    case 0xFFFFFC15:
      double result = "FailureInvalidType";
      break;
    case 0xFFFFFC16:
      double result = "FailureMissingEntitlement";
      break;
    case 0xFFFFFC17:
      double result = "FailureUnknown";
      break;
    default:
      if (a1) {
        return "Unknown";
      }
      double result = "Success";
      break;
  }
  return result;
}

id networkd_privileged_copy_connection(void)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (networkd_privileged_copy_queue(void)::onceToken != -1) {
    dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
  }
  id v0 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
  int v1 = v0;
  if (!v0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
    xpc_object_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v4, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s networkd_privileged_copy_queue failed", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (id)gLogObj;
        os_log_type_t v9 = type;
        BOOL v10 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)std::string buf = 136446466;
            *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s networkd_privileged_copy_queue failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v4) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
        if (v10)
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
          _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s networkd_privileged_copy_queue failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
          _os_log_impl(&dword_1830D4000, v5, v11, "%{public}s networkd_privileged_copy_queue failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v4)
    {
LABEL_12:
      id v2 = 0;
      goto LABEL_13;
    }
LABEL_11:
    free(v4);
    goto LABEL_12;
  }
  *(void *)std::string buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  __int16 v18 = __Block_byref_object_copy__627;
  int v19 = __Block_byref_object_dispose__628;
  id v20 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZL35networkd_privileged_copy_connectionv_block_invoke;
  block[3] = &unk_1E524B978;
  uint64_t v13 = v0;
  int v14 = buf;
  dispatch_sync(v13, block);
  id v2 = *(id *)(*(void *)&buf[8] + 40);

  _Block_object_dispose(buf, 8);
LABEL_13:

  return v2;
}

uint64_t __Block_byref_object_copy__627(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__628(uint64_t a1)
{
}

void ___ZL35networkd_privileged_copy_connectionv_block_invoke(uint64_t a1)
{
  id v2 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
  if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection) {
    goto LABEL_2;
  }
  xpc_connection_t mach_service = xpc_connection_create_mach_service((const char *)networkd_privileged_service, *(dispatch_queue_t *)(a1 + 32), 2uLL);
  xpc_object_t v4 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
  _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection = (uint64_t)mach_service;

  if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection)
  {
    Class Class = object_getClass((id)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection);
    os_log_type_t v6 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
    if (Class == (Class)MEMORY[0x1E4F14578])
    {
      id v7 = (id)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      id v8 = (_xpc_connection_s *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = ___ZL35networkd_privileged_copy_connectionv_block_invoke_2;
      handler[3] = &unk_1E523A680;
      id v9 = v7;
      id v11 = v9;
      xpc_connection_set_event_handler(v8, handler);
      xpc_connection_resume((xpc_connection_t)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection);

      id v2 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      if (!_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection) {
        return;
      }
      goto LABEL_2;
    }
    if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection)
    {
      _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection = 0;

      id v2 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection) {
LABEL_2:
      }
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v2);
    }
  }
}

void sub_1835F00D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL35networkd_privileged_copy_connectionv_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  Class Class = object_getClass(v3);
  BOOL v5 = Class != (Class)MEMORY[0x1E4F145A8]
    || _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection == 0;
  if (!v5 && *(void *)(a1 + 32) == _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection)
  {
    xpc_connection_cancel((xpc_connection_t)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection);
    id v8 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
    _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection = 0;
  }
  else if (Class == (Class)MEMORY[0x1E4F14590])
  {
    os_log_type_t v6 = (void *)MEMORY[0x185319370](v3);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136446722;
      BOOL v10 = "networkd_privileged_copy_connection_block_invoke_2";
      __int16 v11 = 2082;
      uint64_t v12 = networkd_privileged_service;
      __int16 v13 = 2082;
      int v14 = v6;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s unexpected message from %{public}s: %{public}s", (uint8_t *)&v9, 0x20u);
    }

    if (v6) {
      free(v6);
    }
  }
}

void sub_1835F025C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30networkd_privileged_copy_queuev_block_invoke()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.network.xpc_to_privileged_helper", v2);
  int v1 = (void *)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
  networkd_privileged_copy_queue(void)::networkdPrivilegedQueue = (uint64_t)v0;
}

BOOL networkd_privileged_set_agent_on_interface_internal(const char *a1, const unsigned __int8 *a2, BOOL a3, int a4)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    int v9 = v8;
    if (v8)
    {
      if (a4) {
        uint64_t v10 = 14;
      }
      else {
        uint64_t v10 = 8;
      }
      xpc_dictionary_set_uint64(v8, (const char *)networkd_privileged_key_type, v10);
      xpc_dictionary_set_string(v9, (const char *)networkd_privileged_key_interface_name, a1);
      xpc_dictionary_set_uuid(v9, (const char *)networkd_privileged_key_agent_uuid, a2);
      xpc_dictionary_set_BOOL(v9, (const char *)networkd_privileged_key_remove, a3);
      xpc_object_t v11 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_set_agent_on_interface_internal", v9);
      uint64_t v12 = v11;
      if (v11)
      {
        Class Class = object_getClass(v11);
        if (Class != (Class)MEMORY[0x1E4F14590])
        {
          if (Class != (Class)MEMORY[0x1E4F145A8])
          {
            int v14 = (void *)MEMORY[0x185319370](v12);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v15 = (id)gLogObj;
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v14;
            __int16 v16 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v106 = 0;
            if (!__nwlog_fault(v16, &type, &v106)) {
              goto LABEL_68;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v17 = (id)gLogObj;
              os_log_type_t v18 = type;
              if (os_log_type_enabled(v17, type))
              {
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 2082;
                *(void *)BOOL v111 = v14;
                _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
              }
LABEL_67:

LABEL_68:
              if (!v16) {
                goto LABEL_70;
              }
              goto LABEL_69;
            }
            if (!v106)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v17 = (id)gLogObj;
              os_log_type_t v48 = type;
              if (os_log_type_enabled(v17, type))
              {
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 2082;
                *(void *)BOOL v111 = v14;
                _os_log_impl(&dword_1830D4000, v17, v48, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_67;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v17 = (id)gLogObj;
            os_log_type_t v35 = type;
            BOOL v36 = os_log_type_enabled(v17, type);
            if (!backtrace_string)
            {
              if (v36)
              {
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 2082;
                *(void *)BOOL v111 = v14;
                _os_log_impl(&dword_1830D4000, v17, v35, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
              }
              goto LABEL_67;
            }
            if (v36)
            {
              *(_DWORD *)std::string buf = 136446722;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v14;
              *(_WORD *)&v111[8] = 2082;
              *(void *)&v111[10] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v17, v35, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            if (!v16)
            {
LABEL_70:
              if (v14)
              {
                free(v14);
                int v49 = 1;
LABEL_180:
                BOOL v53 = v49 == 0;
                goto LABEL_181;
              }
LABEL_179:
              int v49 = 1;
              goto LABEL_180;
            }
LABEL_69:
            free(v16);
            goto LABEL_70;
          }
          if (v12 == (void *)MEMORY[0x1E4F14520])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v40 = (id)gLogObj;
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            uint8x8_t v41 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v106 = 0;
            if (!__nwlog_fault(v41, &type, &v106)) {
              goto LABEL_177;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v42 = (id)gLogObj;
              os_log_type_t v43 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)std::string buf = 136446210;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
              }
            }
            else if (v106)
            {
              uint64_t v57 = (char *)__nw_create_backtrace_string();
              uint64_t v42 = __nwlog_obj();
              os_log_type_t v58 = type;
              BOOL v59 = os_log_type_enabled(v42, type);
              if (v57)
              {
                if (v59)
                {
                  *(_DWORD *)std::string buf = 136446466;
                  unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  __int16 v110 = 2082;
                  *(void *)BOOL v111 = v57;
                  _os_log_impl(&dword_1830D4000, v42, v58, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v57);
                if (!v41) {
                  goto LABEL_179;
                }
                goto LABEL_178;
              }
              if (v59)
              {
                *(_DWORD *)std::string buf = 136446210;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl(&dword_1830D4000, v42, v58, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              uint64_t v42 = __nwlog_obj();
              os_log_type_t v75 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)std::string buf = 136446210;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl(&dword_1830D4000, v42, v75, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
          else
          {
            if (v12 == (void *)MEMORY[0x1E4F14528])
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v56 = (id)gLogObj;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string buf = 136446210;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
              }

              goto LABEL_179;
            }
            if (v12 != (void *)MEMORY[0x1E4F14550])
            {
              int v14 = (void *)MEMORY[0x185319370](v12);
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v32 = (id)gLogObj;
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v14;
              __int16 v16 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v106 = 0;
              if (!__nwlog_fault(v16, &type, &v106)) {
                goto LABEL_68;
              }
              if (type == OS_LOG_TYPE_FAULT)
              {
                uint64_t v17 = __nwlog_obj();
                os_log_type_t v33 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)std::string buf = 136446466;
                  unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  __int16 v110 = 2082;
                  *(void *)BOOL v111 = v14;
                  _os_log_impl(&dword_1830D4000, v17, v33, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
                }
                goto LABEL_67;
              }
              if (!v106)
              {
                uint64_t v17 = __nwlog_obj();
                os_log_type_t v82 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)std::string buf = 136446466;
                  unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  __int16 v110 = 2082;
                  *(void *)BOOL v111 = v14;
                  _os_log_impl(&dword_1830D4000, v17, v82, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
                }
                goto LABEL_67;
              }
              uint64_t v62 = (char *)__nw_create_backtrace_string();
              uint64_t v17 = __nwlog_obj();
              os_log_type_t v63 = type;
              BOOL v64 = os_log_type_enabled(v17, type);
              if (!v62)
              {
                if (v64)
                {
                  *(_DWORD *)std::string buf = 136446466;
                  unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  __int16 v110 = 2082;
                  *(void *)BOOL v111 = v14;
                  _os_log_impl(&dword_1830D4000, v17, v63, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
                }
                goto LABEL_67;
              }
              if (v64)
              {
                *(_DWORD *)std::string buf = 136446722;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 2082;
                *(void *)BOOL v111 = v14;
                *(_WORD *)&v111[8] = 2082;
                *(void *)&v111[10] = v62;
                _os_log_impl(&dword_1830D4000, v17, v63, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v62);
              if (!v16) {
                goto LABEL_70;
              }
              goto LABEL_69;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v60 = (id)gLogObj;
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            uint8x8_t v41 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v106 = 0;
            if (!__nwlog_fault(v41, &type, &v106)) {
              goto LABEL_177;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v42 = __nwlog_obj();
              os_log_type_t v61 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)std::string buf = 136446210;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl(&dword_1830D4000, v42, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
              }
            }
            else if (v106)
            {
              uint64_t v72 = (char *)__nw_create_backtrace_string();
              uint64_t v42 = __nwlog_obj();
              os_log_type_t v73 = type;
              BOOL v74 = os_log_type_enabled(v42, type);
              if (v72)
              {
                if (v74)
                {
                  *(_DWORD *)std::string buf = 136446466;
                  unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  __int16 v110 = 2082;
                  *(void *)BOOL v111 = v72;
                  _os_log_impl(&dword_1830D4000, v42, v73, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v72);
LABEL_177:
                if (!v41) {
                  goto LABEL_179;
                }
LABEL_178:
                free(v41);
                goto LABEL_179;
              }
              if (v74)
              {
                *(_DWORD *)std::string buf = 136446210;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl(&dword_1830D4000, v42, v73, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              uint64_t v42 = __nwlog_obj();
              os_log_type_t v86 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)std::string buf = 136446210;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl(&dword_1830D4000, v42, v86, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }

          goto LABEL_177;
        }
        BOOL v23 = xpc_dictionary_get_value(v12, (const char *)networkd_privileged_key_result);
        id v24 = v23;
        if (!v23)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v37 = (id)gLogObj;
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          int64_t v26 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v106 = 0;
          if (!__nwlog_fault(v26, &type, &v106)) {
            goto LABEL_138;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (id)gLogObj;
            os_log_type_t v38 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_1830D4000, v27, v38, "%{public}s received response without result code", buf, 0xCu);
            }
            goto LABEL_137;
          }
          if (!v106)
          {
            os_log_type_t v27 = __nwlog_obj();
            os_log_type_t v71 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_1830D4000, v27, v71, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_137;
          }
          id v50 = (char *)__nw_create_backtrace_string();
          os_log_type_t v27 = __nwlog_obj();
          os_log_type_t v54 = type;
          BOOL v55 = os_log_type_enabled(v27, type);
          if (!v50)
          {
            if (v55)
            {
              *(_DWORD *)std::string buf = 136446210;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_1830D4000, v27, v54, "%{public}s received response without result code, no backtrace", buf, 0xCu);
            }
            goto LABEL_137;
          }
          if (v55)
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v50;
            _os_log_impl(&dword_1830D4000, v27, v54, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_87;
        }
        if (object_getClass(v23) != (Class)MEMORY[0x1E4F145C0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v25 = (id)gLogObj;
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          int64_t v26 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v106 = 0;
          if (!__nwlog_fault(v26, &type, &v106)) {
            goto LABEL_138;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (id)gLogObj;
            os_log_type_t v28 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s received invalid result type", buf, 0xCu);
            }
LABEL_137:

LABEL_138:
            if (!v26)
            {
LABEL_141:
              int v49 = 1;
              goto LABEL_142;
            }
            goto LABEL_139;
          }
          if (!v106)
          {
            os_log_type_t v27 = __nwlog_obj();
            os_log_type_t v70 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_1830D4000, v27, v70, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_137;
          }
          id v50 = (char *)__nw_create_backtrace_string();
          os_log_type_t v27 = __nwlog_obj();
          os_log_type_t v51 = type;
          BOOL v52 = os_log_type_enabled(v27, type);
          if (!v50)
          {
            if (v52)
            {
              *(_DWORD *)std::string buf = 136446210;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_1830D4000, v27, v51, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
            }
            goto LABEL_137;
          }
          if (v52)
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v50;
            _os_log_impl(&dword_1830D4000, v27, v51, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
          }
LABEL_87:

          free(v50);
          if (!v26) {
            goto LABEL_141;
          }
LABEL_139:
          os_log_type_t v76 = (char *)v26;
LABEL_140:
          free(v76);
          goto LABEL_141;
        }
        unint64_t value = xpc_int64_get_value(v24);
        uint64_t v45 = value;
        if (!value)
        {
          int v49 = 0;
LABEL_142:

          goto LABEL_180;
        }
        if (!(value >> 31))
        {
          BOOL v46 = __nwlog_obj();
          uint64_t v47 = v46;
          if (v45 == 6)
          {
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              __int16 v110 = 1024;
              *(_DWORD *)BOOL v111 = 6;
              _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
            }

            goto LABEL_141;
          }
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          __int16 v110 = 1024;
          *(_DWORD *)BOOL v111 = v45;
          os_log_type_t v67 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v106 = 0;
          if (__nwlog_fault(v67, &type, &v106))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              BOOL v77 = __nwlog_obj();
              os_log_type_t v78 = type;
              if (os_log_type_enabled(v77, type))
              {
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 1024;
                *(_DWORD *)BOOL v111 = v45;
                _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
              }
            }
            else if (v106)
            {
              BOOL v83 = (char *)__nw_create_backtrace_string();
              BOOL v77 = __nwlog_obj();
              os_log_type_t v84 = type;
              BOOL v85 = os_log_type_enabled(v77, type);
              if (v83)
              {
                if (v85)
                {
                  *(_DWORD *)std::string buf = 136446722;
                  unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  __int16 v110 = 1024;
                  *(_DWORD *)BOOL v111 = v45;
                  *(_WORD *)&v111[4] = 2082;
                  *(void *)&v111[6] = v83;
                  _os_log_impl(&dword_1830D4000, v77, v84, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v83);
                if (!v67) {
                  goto LABEL_141;
                }
LABEL_194:
                os_log_type_t v76 = (char *)v67;
                goto LABEL_140;
              }
              if (v85)
              {
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 1024;
                *(_DWORD *)BOOL v111 = v45;
                _os_log_impl(&dword_1830D4000, v77, v84, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              BOOL v77 = __nwlog_obj();
              os_log_type_t v89 = type;
              if (os_log_type_enabled(v77, type))
              {
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 1024;
                *(_DWORD *)BOOL v111 = v45;
                _os_log_impl(&dword_1830D4000, v77, v89, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
              }
            }
          }
LABEL_193:
          if (!v67) {
            goto LABEL_141;
          }
          goto LABEL_194;
        }
        os_log_type_t v65 = __nwlog_obj();
        uint64_t v66 = networkd_privileged_result_to_string(v45);
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
        __int16 v110 = 2048;
        *(void *)BOOL v111 = v45;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = v66;
        os_log_type_t v67 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v106 = 0;
        if (!__nwlog_fault(v67, &type, &v106)) {
          goto LABEL_193;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v68 = __nwlog_obj();
          os_log_type_t v69 = type;
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)std::string buf = 136446722;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2048;
            *(void *)BOOL v111 = v45;
            *(_WORD *)&v111[8] = 2082;
            *(void *)&v111[10] = v66;
            _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
          }
        }
        else if (v106)
        {
          os_log_type_t v79 = (char *)__nw_create_backtrace_string();
          BOOL v68 = __nwlog_obj();
          os_log_type_t v80 = type;
          BOOL v81 = os_log_type_enabled(v68, type);
          if (v79)
          {
            if (v81)
            {
              *(_DWORD *)std::string buf = 136446978;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              __int16 v110 = 2048;
              *(void *)BOOL v111 = v45;
              *(_WORD *)&v111[8] = 2082;
              *(void *)&v111[10] = v66;
              __int16 v112 = 2082;
              BOOL v113 = v79;
              _os_log_impl(&dword_1830D4000, v68, v80, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v79);
            goto LABEL_193;
          }
          if (v81)
          {
            *(_DWORD *)std::string buf = 136446722;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2048;
            *(void *)BOOL v111 = v45;
            *(_WORD *)&v111[8] = 2082;
            *(void *)&v111[10] = v66;
            _os_log_impl(&dword_1830D4000, v68, v80, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          BOOL v68 = __nwlog_obj();
          os_log_type_t v87 = type;
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)std::string buf = 136446722;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2048;
            *(void *)BOOL v111 = v45;
            *(_WORD *)&v111[8] = 2082;
            *(void *)&v111[10] = v66;
            _os_log_impl(&dword_1830D4000, v68, v87, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
          }
        }

        goto LABEL_193;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v19 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
      id v20 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v106 = 0;
      if (__nwlog_fault(v20, &type, &v106))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (id)gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s received NULL response", buf, 0xCu);
          }
        }
        else if (v106)
        {
          id v29 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (id)gLogObj;
          os_log_type_t v30 = type;
          BOOL v31 = os_log_type_enabled(v21, type);
          if (v29)
          {
            if (v31)
            {
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v29;
              _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v29);
            if (!v20) {
              goto LABEL_82;
            }
            goto LABEL_81;
          }
          if (v31)
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s received NULL response, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (id)gLogObj;
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            _os_log_impl(&dword_1830D4000, v21, v39, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v20)
      {
LABEL_82:
        BOOL v53 = 0;
LABEL_181:

LABEL_182:
        return v53;
      }
LABEL_81:
      free(v20);
      goto LABEL_82;
    }
    char v94 = __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
    os_log_type_t v95 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (__nwlog_fault(v95, &type, &v106))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v96 = __nwlog_obj();
        os_log_type_t v97 = type;
        if (os_log_type_enabled(v96, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          _os_log_impl(&dword_1830D4000, v96, v97, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v106)
      {
        __int16 v101 = (char *)__nw_create_backtrace_string();
        __int16 v96 = __nwlog_obj();
        os_log_type_t v102 = type;
        BOOL v103 = os_log_type_enabled(v96, type);
        if (v101)
        {
          if (v103)
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v101;
            _os_log_impl(&dword_1830D4000, v96, v102, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v101);
          goto LABEL_230;
        }
        if (v103)
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          _os_log_impl(&dword_1830D4000, v96, v102, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v96 = __nwlog_obj();
        os_log_type_t v105 = type;
        if (os_log_type_enabled(v96, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          _os_log_impl(&dword_1830D4000, v96, v105, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_230:
    if (v95) {
      free(v95);
    }
    BOOL v53 = 0;
    goto LABEL_182;
  }
  uint64_t v90 = __nwlog_obj();
  *(_DWORD *)std::string buf = 136446210;
  unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
  os_log_type_t v91 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v106 = 0;
  if (__nwlog_fault(v91, &type, &v106))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v92 = __nwlog_obj();
      os_log_type_t v93 = type;
      if (os_log_type_enabled(v92, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
        _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s called with null interface_name", buf, 0xCu);
      }
    }
    else if (v106)
    {
      __int16 v98 = (char *)__nw_create_backtrace_string();
      BOOL v92 = __nwlog_obj();
      os_log_type_t v99 = type;
      BOOL v100 = os_log_type_enabled(v92, type);
      if (v98)
      {
        if (v100)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          __int16 v110 = 2082;
          *(void *)BOOL v111 = v98;
          _os_log_impl(&dword_1830D4000, v92, v99, "%{public}s called with null interface_name, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v98);
        goto LABEL_224;
      }
      if (v100)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
        _os_log_impl(&dword_1830D4000, v92, v99, "%{public}s called with null interface_name, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v92 = __nwlog_obj();
      os_log_type_t v104 = type;
      if (os_log_type_enabled(v92, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
        _os_log_impl(&dword_1830D4000, v92, v104, "%{public}s called with null interface_name, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_224:
  if (v91) {
    free(v91);
  }
  return 0;
}

void sub_1835F1EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL networkd_privileged_setup_feth_pair(const char *a1, const char *a2)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v84 = __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v109 = "networkd_privileged_setup_feth_pair";
    BOOL v85 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (!__nwlog_fault(v85, &type, &v106)) {
      goto LABEL_235;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v86 = __nwlog_obj();
      os_log_type_t v87 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s called with null ifname1", buf, 0xCu);
      }
    }
    else if (v106)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v86 = __nwlog_obj();
      os_log_type_t v95 = type;
      BOOL v96 = os_log_type_enabled(v86, type);
      if (backtrace_string)
      {
        if (v96)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)BOOL v111 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v86, v95, "%{public}s called with null ifname1, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v85) {
          return 0;
        }
        goto LABEL_236;
      }
      if (v96)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v86, v95, "%{public}s called with null ifname1, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v86 = __nwlog_obj();
      os_log_type_t v103 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v86, v103, "%{public}s called with null ifname1, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_234;
  }
  if (!a2)
  {
    BOOL v88 = __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v109 = "networkd_privileged_setup_feth_pair";
    BOOL v85 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (!__nwlog_fault(v85, &type, &v106)) {
      goto LABEL_235;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v86 = __nwlog_obj();
      os_log_type_t v89 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v86, v89, "%{public}s called with null ifname2", buf, 0xCu);
      }
    }
    else if (v106)
    {
      os_log_type_t v97 = (char *)__nw_create_backtrace_string();
      os_log_type_t v86 = __nwlog_obj();
      os_log_type_t v98 = type;
      BOOL v99 = os_log_type_enabled(v86, type);
      if (v97)
      {
        if (v99)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)BOOL v111 = v97;
          _os_log_impl(&dword_1830D4000, v86, v98, "%{public}s called with null ifname2, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v97);
LABEL_235:
        if (!v85) {
          return 0;
        }
LABEL_236:
        free(v85);
        return 0;
      }
      if (v99)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v86, v98, "%{public}s called with null ifname2, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v86 = __nwlog_obj();
      os_log_type_t v104 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v86, v104, "%{public}s called with null ifname2, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_234:

    goto LABEL_235;
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  BOOL v5 = v4;
  if (!v4)
  {
    uint64_t v90 = __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v109 = "networkd_privileged_setup_feth_pair";
    os_log_type_t v91 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (__nwlog_fault(v91, &type, &v106))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v92 = __nwlog_obj();
        os_log_type_t v93 = type;
        if (os_log_type_enabled(v92, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v106)
      {
        BOOL v100 = (char *)__nw_create_backtrace_string();
        BOOL v92 = __nwlog_obj();
        os_log_type_t v101 = type;
        BOOL v102 = os_log_type_enabled(v92, type);
        if (v100)
        {
          if (v102)
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v100;
            _os_log_impl(&dword_1830D4000, v92, v101, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v100);
          goto LABEL_241;
        }
        if (v102)
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v92, v101, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v92 = __nwlog_obj();
        os_log_type_t v105 = type;
        if (os_log_type_enabled(v92, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v92, v105, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_241:
    if (v91) {
      free(v91);
    }
    BOOL v50 = 0;
    goto LABEL_179;
  }
  xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0x11uLL);
  xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
  xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_second_interface_name, a2);
  xpc_object_t v6 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_setup_feth_pair", v5);
  id v7 = v6;
  if (v6)
  {
    Class Class = object_getClass(v6);
    if (Class != (Class)MEMORY[0x1E4F14590])
    {
      if (Class != (Class)MEMORY[0x1E4F145A8])
      {
        int v9 = (void *)MEMORY[0x185319370](v7);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2082;
        *(void *)BOOL v111 = v9;
        xpc_object_t v11 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v106 = 0;
        if (!__nwlog_fault(v11, &type, &v106)) {
          goto LABEL_67;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v12 = (id)gLogObj;
          os_log_type_t v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v9;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
          }
LABEL_66:

LABEL_67:
          if (!v11) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        if (!v106)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v12 = (id)gLogObj;
          os_log_type_t v45 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v9;
            _os_log_impl(&dword_1830D4000, v12, v45, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_66;
        }
        id v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = (id)gLogObj;
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled(v12, type);
        if (!v29)
        {
          if (v31)
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v9;
            _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_66;
        }
        if (v31)
        {
          *(_DWORD *)std::string buf = 136446722;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)BOOL v111 = v9;
          *(_WORD *)&v111[8] = 2082;
          *(void *)&v111[10] = v29;
          _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v29);
        if (!v11)
        {
LABEL_69:
          if (v9)
          {
            free(v9);
            int v46 = 1;
LABEL_177:
            BOOL v50 = v46 == 0;
            goto LABEL_178;
          }
LABEL_176:
          int v46 = 1;
          goto LABEL_177;
        }
LABEL_68:
        free(v11);
        goto LABEL_69;
      }
      if (v7 == (void *)MEMORY[0x1E4F14520])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v35 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        BOOL v36 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v106 = 0;
        if (!__nwlog_fault(v36, &type, &v106)) {
          goto LABEL_174;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v37 = (id)gLogObj;
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
          }
        }
        else if (v106)
        {
          os_log_type_t v54 = (char *)__nw_create_backtrace_string();
          id v37 = __nwlog_obj();
          os_log_type_t v55 = type;
          BOOL v56 = os_log_type_enabled(v37, type);
          if (v54)
          {
            if (v56)
            {
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_setup_feth_pair";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v54;
              _os_log_impl(&dword_1830D4000, v37, v55, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v54);
            if (!v36) {
              goto LABEL_176;
            }
            goto LABEL_175;
          }
          if (v56)
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_1830D4000, v37, v55, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          id v37 = __nwlog_obj();
          os_log_type_t v71 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_1830D4000, v37, v71, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      else
      {
        if (v7 == (void *)MEMORY[0x1E4F14528])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v53 = (id)gLogObj;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
          }

          goto LABEL_176;
        }
        if (v7 != (void *)MEMORY[0x1E4F14550])
        {
          int v9 = (void *)MEMORY[0x185319370](v7);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v27 = (id)gLogObj;
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)BOOL v111 = v9;
          xpc_object_t v11 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v106 = 0;
          if (!__nwlog_fault(v11, &type, &v106)) {
            goto LABEL_67;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v12 = __nwlog_obj();
            os_log_type_t v28 = type;
            if (os_log_type_enabled(v12, type))
            {
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_setup_feth_pair";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v9;
              _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
            }
            goto LABEL_66;
          }
          if (!v106)
          {
            uint64_t v12 = __nwlog_obj();
            os_log_type_t v79 = type;
            if (os_log_type_enabled(v12, type))
            {
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_setup_feth_pair";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v9;
              _os_log_impl(&dword_1830D4000, v12, v79, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
            }
            goto LABEL_66;
          }
          BOOL v59 = (char *)__nw_create_backtrace_string();
          uint64_t v12 = __nwlog_obj();
          os_log_type_t v60 = type;
          BOOL v61 = os_log_type_enabled(v12, type);
          if (!v59)
          {
            if (v61)
            {
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_setup_feth_pair";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v9;
              _os_log_impl(&dword_1830D4000, v12, v60, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
            }
            goto LABEL_66;
          }
          if (v61)
          {
            *(_DWORD *)std::string buf = 136446722;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 2082;
            *(void *)BOOL v111 = v9;
            *(_WORD *)&v111[8] = 2082;
            *(void *)&v111[10] = v59;
            _os_log_impl(&dword_1830D4000, v12, v60, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v59);
          if (!v11) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v57 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        BOOL v36 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v106 = 0;
        if (!__nwlog_fault(v36, &type, &v106)) {
          goto LABEL_174;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v37 = __nwlog_obj();
          os_log_type_t v58 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_1830D4000, v37, v58, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
          }
        }
        else if (v106)
        {
          BOOL v68 = (char *)__nw_create_backtrace_string();
          id v37 = __nwlog_obj();
          os_log_type_t v69 = type;
          BOOL v70 = os_log_type_enabled(v37, type);
          if (v68)
          {
            if (v70)
            {
              *(_DWORD *)std::string buf = 136446466;
              unint64_t v109 = "networkd_privileged_setup_feth_pair";
              __int16 v110 = 2082;
              *(void *)BOOL v111 = v68;
              _os_log_impl(&dword_1830D4000, v37, v69, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v68);
LABEL_174:
            if (!v36) {
              goto LABEL_176;
            }
LABEL_175:
            free(v36);
            goto LABEL_176;
          }
          if (v70)
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_1830D4000, v37, v69, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          id v37 = __nwlog_obj();
          os_log_type_t v80 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_1830D4000, v37, v80, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }

      goto LABEL_174;
    }
    os_log_type_t v18 = xpc_dictionary_get_value(v7, (const char *)networkd_privileged_key_result);
    id v19 = v18;
    if (!v18)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v32 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v109 = "networkd_privileged_setup_feth_pair";
      uint64_t v21 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v106 = 0;
      if (!__nwlog_fault(v21, &type, &v106)) {
        goto LABEL_137;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v22, v33, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (!v106)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v67 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v22, v67, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_136;
      }
      uint64_t v47 = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v51 = type;
      BOOL v52 = os_log_type_enabled(v22, type);
      if (!v47)
      {
        if (v52)
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v22, v51, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (v52)
      {
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2082;
        *(void *)BOOL v111 = v47;
        _os_log_impl(&dword_1830D4000, v22, v51, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_86;
    }
    if (object_getClass(v18) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v20 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v109 = "networkd_privileged_setup_feth_pair";
      uint64_t v21 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v106 = 0;
      if (!__nwlog_fault(v21, &type, &v106)) {
        goto LABEL_137;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_136:

LABEL_137:
        if (!v21)
        {
LABEL_140:
          int v46 = 1;
          goto LABEL_141;
        }
        goto LABEL_138;
      }
      if (!v106)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v66 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v22, v66, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_136;
      }
      uint64_t v47 = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v22, type);
      if (!v47)
      {
        if (v49)
        {
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_1830D4000, v22, v48, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_136;
      }
      if (v49)
      {
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2082;
        *(void *)BOOL v111 = v47;
        _os_log_impl(&dword_1830D4000, v22, v48, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_86:

      free(v47);
      if (!v21) {
        goto LABEL_140;
      }
LABEL_138:
      uint64_t v72 = (char *)v21;
LABEL_139:
      free(v72);
      goto LABEL_140;
    }
    unint64_t value = xpc_int64_get_value(v19);
    uint64_t v40 = value;
    if (!value)
    {
      int v46 = 0;
LABEL_141:

      goto LABEL_177;
    }
    if (!(value >> 31))
    {
      uint8x8_t v41 = __nwlog_obj();
      *(_DWORD *)std::string buf = 136446466;
      unint64_t v109 = "networkd_privileged_setup_feth_pair";
      __int16 v110 = 1024;
      *(_DWORD *)BOOL v111 = v40;
      uint64_t v42 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v106 = 0;
      if (__nwlog_fault(v42, &type, &v106))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 1024;
            *(_DWORD *)BOOL v111 = v40;
            _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v106)
        {
          os_log_type_t v73 = (char *)__nw_create_backtrace_string();
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v74 = type;
          BOOL v75 = os_log_type_enabled(v43, type);
          if (v73)
          {
            if (v75)
            {
              *(_DWORD *)std::string buf = 136446722;
              unint64_t v109 = "networkd_privileged_setup_feth_pair";
              __int16 v110 = 1024;
              *(_DWORD *)BOOL v111 = v40;
              *(_WORD *)&v111[4] = 2082;
              *(void *)&v111[6] = v73;
              _os_log_impl(&dword_1830D4000, v43, v74, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v73);
            if (!v42) {
              goto LABEL_140;
            }
LABEL_188:
            uint64_t v72 = (char *)v42;
            goto LABEL_139;
          }
          if (v75)
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 1024;
            *(_DWORD *)BOOL v111 = v40;
            _os_log_impl(&dword_1830D4000, v43, v74, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v81 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 1024;
            *(_DWORD *)BOOL v111 = v40;
            _os_log_impl(&dword_1830D4000, v43, v81, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_187:
      if (!v42) {
        goto LABEL_140;
      }
      goto LABEL_188;
    }
    uint64_t v62 = __nwlog_obj();
    os_log_type_t v63 = networkd_privileged_result_to_string(v40);
    *(_DWORD *)std::string buf = 136446722;
    unint64_t v109 = "networkd_privileged_setup_feth_pair";
    __int16 v110 = 2048;
    *(void *)BOOL v111 = v40;
    *(_WORD *)&v111[8] = 2082;
    *(void *)&v111[10] = v63;
    uint64_t v42 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (!__nwlog_fault(v42, &type, &v106)) {
      goto LABEL_187;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v64 = __nwlog_obj();
      os_log_type_t v65 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2048;
        *(void *)BOOL v111 = v40;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = v63;
        _os_log_impl(&dword_1830D4000, v64, v65, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v106)
    {
      os_log_type_t v76 = (char *)__nw_create_backtrace_string();
      BOOL v64 = __nwlog_obj();
      os_log_type_t v77 = type;
      BOOL v78 = os_log_type_enabled(v64, type);
      if (v76)
      {
        if (v78)
        {
          *(_DWORD *)std::string buf = 136446978;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2048;
          *(void *)BOOL v111 = v40;
          *(_WORD *)&v111[8] = 2082;
          *(void *)&v111[10] = v63;
          __int16 v112 = 2082;
          BOOL v113 = v76;
          _os_log_impl(&dword_1830D4000, v64, v77, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v76);
        goto LABEL_187;
      }
      if (v78)
      {
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2048;
        *(void *)BOOL v111 = v40;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = v63;
        _os_log_impl(&dword_1830D4000, v64, v77, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      BOOL v64 = __nwlog_obj();
      os_log_type_t v82 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2048;
        *(void *)BOOL v111 = v40;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = v63;
        _os_log_impl(&dword_1830D4000, v64, v82, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_187;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v14 = (id)gLogObj;
  *(_DWORD *)std::string buf = 136446210;
  unint64_t v109 = "networkd_privileged_setup_feth_pair";
  id v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v106 = 0;
  if (__nwlog_fault(v15, &type, &v106))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s received NULL response", buf, 0xCu);
      }
    }
    else if (v106)
    {
      id v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (id)gLogObj;
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)BOOL v111 = v24;
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        if (!v15) {
          goto LABEL_81;
        }
        goto LABEL_80;
      }
      if (v26)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (id)gLogObj;
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_1830D4000, v16, v34, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v15) {
LABEL_80:
  }
    free(v15);
LABEL_81:
  BOOL v50 = 0;
LABEL_178:

LABEL_179:
  return v50;
}