void sub_183BBC5F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_uses_nexus(NWConcrete_nw_path *a1)
{
  return nw_path_uses_nexus_internal(a1, 0);
}

BOOL nw_path_flow_registration_get_tfo_cookie(void *a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  v7 = a1;
  v8 = a2;
  if (!a3)
  {
    v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_path_flow_registration_get_tfo_cookie";
    v29 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null cookie", buf, 0xCu);
        }
        goto LABEL_65;
      }
      if (!v44)
      {
        v30 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_1830D4000, v30, v42, "%{public}s called with null cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_65;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_65;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_path_flow_registration_get_tfo_cookie";
        __int16 v48 = 2082;
        *(void *)v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_51:

      free(backtrace_string);
    }
LABEL_66:
    if (!v29) {
      goto LABEL_30;
    }
    v26 = (char *)v29;
    goto LABEL_29;
  }
  if (!a4)
  {
    v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_path_flow_registration_get_tfo_cookie";
    v29 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v30 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null len", buf, 0xCu);
        }
LABEL_65:

        goto LABEL_66;
      }
      if (!v44)
      {
        v30 = __nwlog_obj();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_1830D4000, v30, v43, "%{public}s called with null len, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_65;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_1830D4000, v30, v37, "%{public}s called with null len, no backtrace", buf, 0xCu);
        }
        goto LABEL_65;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_path_flow_registration_get_tfo_cookie";
        __int16 v48 = 2082;
        *(void *)v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v37, "%{public}s called with null len, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_51;
    }
    goto LABEL_66;
  }
  if (*a4 <= 0xFu)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    int v10 = *a4;
    *(_DWORD *)buf = 136446722;
    v47 = "nw_path_flow_registration_get_tfo_cookie";
    __int16 v48 = 1024;
    *(_DWORD *)v49 = v10;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = 16;
    v11 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v11, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          int v14 = *a4;
          *(_DWORD *)buf = 136446722;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          __int16 v48 = 1024;
          *(_DWORD *)v49 = v14;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = 16;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s cookie buffer invalid, length is %u expected %d", buf, 0x18u);
        }
      }
      else if (v44)
      {
        v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v12, type);
        if (v19)
        {
          if (v21)
          {
            int v22 = *a4;
            *(_DWORD *)buf = 136446978;
            v47 = "nw_path_flow_registration_get_tfo_cookie";
            __int16 v48 = 1024;
            *(_DWORD *)v49 = v22;
            *(_WORD *)&v49[4] = 1024;
            *(_DWORD *)&v49[6] = 16;
            __int16 v50 = 2082;
            v51 = v19;
            _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s cookie buffer invalid, length is %u expected %d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(v19);
          if (!v11) {
            goto LABEL_30;
          }
LABEL_28:
          v26 = (char *)v11;
LABEL_29:
          free(v26);
          goto LABEL_30;
        }
        if (v21)
        {
          int v25 = *a4;
          *(_DWORD *)buf = 136446722;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          __int16 v48 = 1024;
          *(_DWORD *)v49 = v25;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = 16;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s cookie buffer invalid, length is %u expected %d, no backtrace", buf, 0x18u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v12, type))
        {
          int v24 = *a4;
          *(_DWORD *)buf = 136446722;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          __int16 v48 = 1024;
          *(_DWORD *)v49 = v24;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = 16;
          _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s cookie buffer invalid, length is %u expected %d, backtrace limit exceeded", buf, 0x18u);
        }
      }
    }
    if (!v11)
    {
LABEL_30:
      uint64_t v18 = 0;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  v15 = nw_path_copy_flow_for_registration(v7, v8);
  v16 = v15;
  if (!v15 || (unsigned int v17 = v15[184], !v15[184]))
  {
    uint64_t v18 = 0;
    goto LABEL_14;
  }
  if (v17 < 0x11)
  {
LABEL_12:
    memcpy(a3, v16 + 108, v17);
    *a4 = v16[184];
    uint64_t v18 = 1;
LABEL_14:

LABEL_31:
    return v18;
  }
  v39 = __nwlog_obj();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  int v40 = v16[184];
  *(_DWORD *)buf = 136446466;
  v47 = "nw_path_flow_registration_get_tfo_cookie";
  __int16 v48 = 1024;
  *(_DWORD *)v49 = v40;
  v41 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v41);
  if (!result)
  {
    free(v41);
    unsigned int v17 = v16[184];
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t nw_path_flow_registration_get_tfo_cookie_len(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2) {
    uint64_t v3 = v2[184];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t nw_path_get_recommended_mss(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    int v3 = v1[472];
    if (v3 == 2) {
      int v4 = 512;
    }
    else {
      int v4 = v1[472];
    }
    if (v3 == 4) {
      unsigned int v5 = 1200;
    }
    else {
      unsigned int v5 = v4;
    }
    if (v3 == 1) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    goto LABEL_11;
  }
  v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_path_get_recommended_mss";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_path_get_recommended_mss";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_28:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_11:

  return v6;
}

BOOL nw_path_get_private_dns_config_id(void *a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    v7 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v8, type, &v25)) {
      goto LABEL_37;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null path", applier, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v25)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null path, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v14 = type[0];
    BOOL v15 = os_log_type_enabled(v9, type[0]);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null path, no backtrace", applier, 0xCu);
      }
      goto LABEL_36;
    }
    if (v15)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null path, dumping backtrace:%{public}s", applier, 0x16u);
    }
    goto LABEL_24;
  }
  if (!a2)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v8, type, &v25)) {
      goto LABEL_37;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null out_uuid", applier, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (v8) {
        free(v8);
      }
      goto LABEL_39;
    }
    if (!v25)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null out_uuid, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v16 = type[0];
    BOOL v17 = os_log_type_enabled(v9, type[0]);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null out_uuid, no backtrace", applier, 0xCu);
      }
      goto LABEL_36;
    }
    if (v17)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", applier, 0x16u);
    }
LABEL_24:

    free(backtrace_string);
    goto LABEL_37;
  }
  unsigned int v5 = (void *)*((void *)v3 + 28);
  if (!v5)
  {
LABEL_39:
    BOOL v6 = 0;
    goto LABEL_40;
  }
  *(void *)os_log_type_t type = 0;
  uint64_t v22 = type;
  uint64_t v23 = 0x2020000000;
  char v24 = 0;
  *(void *)applier = MEMORY[0x1E4F143A8];
  *(void *)&applier[8] = 3221225472;
  *(void *)&applier[16] = ___ZL35nw_path_get_private_dns_config_uuidP18NWConcrete_nw_pathPA16_hPi_block_invoke;
  v27 = &unk_1E5248398;
  uint64_t v29 = a2;
  uint64_t v30 = 0;
  v28 = type;
  xpc_dictionary_apply(v5, applier);
  BOOL v6 = *((unsigned char *)v22 + 24) != 0;
  _Block_object_dispose(type, 8);
LABEL_40:

  return v6;
}

void sub_183BBD6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_path_get_private_dns_config_uuidP18NWConcrete_nw_pathPA16_hPi_block_invoke(int a1, int a2, xpc_object_t xdict)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  length[0] = 0;
  if (xdict)
  {
    data = (unsigned int *)xpc_dictionary_get_data(xdict, "data", length);
    if (data)
    {
      if (length[0] >= 0xD8 && length[0] == data[53] + 216)
      {
        length[0] = 0;
        length[1] = 0;
        ne_session_get_config_id_from_network_agent();
      }
    }
  }
  return 1;
}

uint64_t nw_path_copy_flow_divert_token(void *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    v41 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_path_copy_flow_divert_token";
    os_log_type_t v42 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v42, uu, &type))
    {
      if (uu[0] == 17)
      {
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v44 = uu[0];
        if (os_log_type_enabled(v43, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v46 = uu[0];
        BOOL v47 = os_log_type_enabled(v43, (os_log_type_t)uu[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_path_copy_flow_divert_token";
            __int16 v54 = 2082;
            v55 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_101;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v43 = __nwlog_obj();
        os_log_type_t v48 = uu[0];
        if (os_log_type_enabled(v43, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_1830D4000, v43, v48, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_101:
    if (v42) {
      free(v42);
    }
    goto LABEL_6;
  }
  if (v1[66] == 4) {
    int v3 = v1[67];
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = v1[88];
  if (v3 | v4)
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6)
    {
      memset(uu, 0, sizeof(uu));
      if (!nw_path_get_vpn_config_uuid((NWConcrete_nw_path *)v2, (unsigned __int8 (*)[16])uu, 0, 0, 0)) {
        uuid_clear(uu);
      }
      v7 = (void *)*((void *)v2 + 3);
      if (!v7) {
        goto LABEL_78;
      }
      id v8 = v7;
      int v9 = [v8 type];

      if ((v9 - 1) > 1) {
        goto LABEL_78;
      }
      if (v9 != 2)
      {
        if (v9 == 1)
        {
          address = nw_endpoint_get_address(*((nw_endpoint_t *)v2 + 3));
          if (address)
          {
            xpc_dictionary_set_data(v6, "flow-host-address", address, address->sa_len);
LABEL_69:
            BOOL parent_endpoint_domain = nw_endpoint_get_parent_endpoint_domain(*((void *)v2 + 3));
            if (parent_endpoint_domain) {
              xpc_dictionary_set_string(v6, "flow-host-name", (const char *)parent_endpoint_domain);
            }
            goto LABEL_76;
          }
          __int16 v20 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          BOOL v21 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v49 = 0;
          if (__nwlog_fault(v21, &type, &v49))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v22 = __nwlog_obj();
              os_log_type_t v23 = type;
              if (os_log_type_enabled(v22, type))
              {
                *(_DWORD *)buf = 136446210;
                v53 = "nw_path_copy_flow_divert_token";
                _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_endpoint_get_address failed", buf, 0xCu);
              }
            }
            else if (v49)
            {
              v28 = (char *)__nw_create_backtrace_string();
              uint64_t v22 = __nwlog_obj();
              os_log_type_t v29 = type;
              BOOL v30 = os_log_type_enabled(v22, type);
              if (v28)
              {
                if (v30)
                {
                  *(_DWORD *)buf = 136446466;
                  v53 = "nw_path_copy_flow_divert_token";
                  __int16 v54 = 2082;
                  v55 = v28;
                  _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s nw_endpoint_get_address failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v28);
                goto LABEL_67;
              }
              if (v30)
              {
                *(_DWORD *)buf = 136446210;
                v53 = "nw_path_copy_flow_divert_token";
                _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s nw_endpoint_get_address failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              uint64_t v22 = __nwlog_obj();
              os_log_type_t v34 = type;
              if (os_log_type_enabled(v22, type))
              {
                *(_DWORD *)buf = 136446210;
                v53 = "nw_path_copy_flow_divert_token";
                _os_log_impl(&dword_1830D4000, v22, v34, "%{public}s nw_endpoint_get_address failed, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_67:
          if (v21) {
            free(v21);
          }
          goto LABEL_69;
        }
LABEL_76:
        unsigned int port = nw_endpoint_get_port(*((nw_endpoint_t *)v2 + 3));
        if (port) {
          xpc_dictionary_set_int64(v6, "flow-host-port", port);
        }
LABEL_78:
        nw_parameters_get_effective_bundle_id(*((void **)v2 + 2));
        BOOL multipath = nw_parameters_get_multipath(*((void **)v2 + 2));
        xpc_dictionary_set_BOOL(v6, "flow-multipath-requested", multipath);
        id v39 = nw_parameters_copy_metadata(*((void **)v2 + 2));
        if (v39) {
          xpc_dictionary_set_value(v6, "app-data", v39);
        }
        if (v4) {
          xpc_dictionary_set_uint64(v6, "aggregate_unit", v4);
        }
        uint64_t v5 = ne_session_policy_copy_flow_divert_token();

        goto LABEL_83;
      }
      hostname = nw_endpoint_get_hostname(*((nw_endpoint_t *)v2 + 3));
      if (hostname)
      {
        xpc_dictionary_set_string(v6, "flow-host-name", hostname);
        goto LABEL_76;
      }
      char v24 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v53 = "nw_path_copy_flow_divert_token";
      char v25 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v49 = 0;
      if (__nwlog_fault(v25, &type, &v49))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v26 = __nwlog_obj();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s nw_endpoint_get_hostname failed", buf, 0xCu);
          }
        }
        else if (v49)
        {
          uint64_t v31 = (char *)__nw_create_backtrace_string();
          v26 = __nwlog_obj();
          os_log_type_t v32 = type;
          BOOL v33 = os_log_type_enabled(v26, type);
          if (v31)
          {
            if (v33)
            {
              *(_DWORD *)buf = 136446466;
              v53 = "nw_path_copy_flow_divert_token";
              __int16 v54 = 2082;
              v55 = v31;
              _os_log_impl(&dword_1830D4000, v26, v32, "%{public}s nw_endpoint_get_hostname failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v31);
            goto LABEL_74;
          }
          if (v33)
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl(&dword_1830D4000, v26, v32, "%{public}s nw_endpoint_get_hostname failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          v26 = __nwlog_obj();
          os_log_type_t v35 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl(&dword_1830D4000, v26, v35, "%{public}s nw_endpoint_get_hostname failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_74:
      if (v25) {
        free(v25);
      }
      goto LABEL_76;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_path_copy_flow_divert_token";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v12, uu, &type))
    {
      if (uu[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (id)gLogObj;
        os_log_type_t v14 = uu[0];
        if (os_log_type_enabled(v13, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        BOOL v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (id)gLogObj;
        os_log_type_t v16 = uu[0];
        BOOL v17 = os_log_type_enabled(v13, (os_log_type_t)uu[0]);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_path_copy_flow_divert_token";
            __int16 v54 = 2082;
            v55 = v15;
            _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v15);
          if (!v12) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (id)gLogObj;
        os_log_type_t v18 = uu[0];
        if (os_log_type_enabled(v13, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v12)
    {
LABEL_23:
      uint64_t v5 = 0;
LABEL_83:

      goto LABEL_84;
    }
LABEL_22:
    free(v12);
    goto LABEL_23;
  }
LABEL_6:
  uint64_t v5 = 0;
LABEL_84:

  return v5;
}

void sub_183BBE30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_has_unsatisfied_fallback_agent(NWConcrete_nw_path *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 0;
  memset(v3, 0, sizeof(v3));
  return nw_path_get_vpn_config_uuid(a1, (unsigned __int8 (*)[16])v3, &v2, 1, 1);
}

uint64_t nw_path_voluntary_agent_matches_address(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
    id v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, type, &v23)) {
      goto LABEL_43;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v15 = os_log_type_enabled(v9, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_42;
  }
  if (!a2)
  {
    id v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
    id v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, type, &v23)) {
      goto LABEL_43;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null address", buf, 0xCu);
      }
    }
    else if (v23)
    {
      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      BOOL v18 = os_log_type_enabled(v9, type[0]);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v16;
          _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null address, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
LABEL_43:
        if (!v8)
        {
LABEL_45:
          uint64_t v6 = 0;
          goto LABEL_46;
        }
LABEL_44:
        free(v8);
        goto LABEL_45;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null address, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null address, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (nw_endpoint_get_type(v3[3]) != nw_endpoint_type_host) {
    goto LABEL_45;
  }
  if (!nw_endpoint_get_hostname(v4[3])) {
    goto LABEL_45;
  }
  *(_DWORD *)os_log_type_t type = 0;
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  if (!nw_path_get_vpn_config_uuid((NWConcrete_nw_path *)v4, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1)) {
    goto LABEL_45;
  }
  uint64_t v5 = v4[12];
  if (v5) {
    uint64_t v6 = ne_session_service_matches_address_for_interface();
  }
  else {
    uint64_t v6 = 0;
  }

LABEL_46:
  return v6;
}

void sub_183BBE8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_update_parameters_for_fallback(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (!v24)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
      __int16 v28 = 2082;
      os_log_type_t v29 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_28;
  }
  if (!v4)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters_to_update", buf, 0xCu);
      }
LABEL_40:

LABEL_41:
      if (v11) {
        free(v11);
      }
      goto LABEL_43;
    }
    if (!v24)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null parameters_to_update, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters_to_update, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
      __int16 v28 = 2082;
      os_log_type_t v29 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters_to_update, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_28:

    free(backtrace_string);
    goto LABEL_41;
  }
  uint64_t v6 = v3[14];
  if (!v6)
  {
    id v8 = (void *)v3[21];
    if (v8)
    {
      int v9 = (void *)v3[22];
      if (v9)
      {
        nw_parameters_set_required_netagent_classes(v4, v8, v9);
        goto LABEL_5;
      }
    }
LABEL_43:
    uint64_t v7 = 0;
    goto LABEL_44;
  }
  nw_parameters_require_interface(v4, v6);
LABEL_5:
  uint64_t v7 = 1;
LABEL_44:

  return v7;
}

void sub_183BBEDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_fallback_interface_index(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v3 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v14 = "nw_path_get_fallback_interface_index";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v4, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v14 = "nw_path_get_fallback_interface_index";
            __int16 v15 = 2082;
            os_log_type_t v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v9)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 112);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  return 0;
}

uint64_t nw_path_get_fallback_agent(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "nw_path_get_fallback_agent";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "nw_path_get_fallback_agent";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_22:
    if (v9) {
      free(v9);
    }
    goto LABEL_3;
  }
  uint64_t v5 = v3 + 152;
  if (!uuid_is_null((const unsigned __int8 *)v3 + 152))
  {
    *a2 = *v5;
    uint64_t v6 = 1;
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = 0;
LABEL_5:

  return v6;
}

void sub_183BBF34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_fallback_generation(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[93];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_get_fallback_generation";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_get_fallback_generation";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_is_weak(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 473) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_fallback_is_weak";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_fallback_is_weak";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_should_not_use_timer(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_fallback_should_not_use_timer";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_fallback_should_not_use_timer";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_is_forced(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 2) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_fallback_is_forced";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_fallback_is_forced";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_is_preferred(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 3) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_fallback_is_preferred";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_fallback_is_preferred";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_path_copy_proxy_configs_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = config_agent_update_proxy_information();
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = v5;

    id v4 = v7;
  }
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14568])
  {
    id v8 = nw_proxy_configs_create_with_schema_array(v4);
    combined_array = nw_array_create_combined_array(v8, *(void **)(*(void *)(a1 + 32) + 232));
    uint64_t v10 = *(void *)(a1 + 32);
    BOOL v11 = *(void **)(v10 + 232);
    *(void *)(v10 + 232) = combined_array;
  }
  return 1;
}

void sub_183BC0108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

atomic_uchar *nw_path_has_proxy_config(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = (atomic_uchar *)v3[29];
      if (v6)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000;
        char v27 = 0;
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        v21[2] = __nw_path_has_proxy_config_block_invoke;
        v21[3] = &unk_1E524A2E8;
        id v22 = v4;
        char v23 = buf;
        nw_array_apply(v6, (uint64_t)v21);
        uint64_t v6 = (atomic_uchar *)(*(unsigned char *)(*(void *)&buf[8] + 24) != 0);

        _Block_object_dispose(buf, 8);
      }
      goto LABEL_5;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null proxy_config", buf, 0xCu);
        }
LABEL_37:

        goto LABEL_38;
      }
      if (!v24)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null proxy_config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null proxy_config, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v24)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
    }
  }
LABEL_38:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_5:

  return v6;
}

uint64_t __nw_path_has_proxy_config_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int is_equal = nw_proxy_config_is_equal(*(void **)(a1 + 32), a3);
  if (is_equal) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return is_equal ^ 1u;
}

BOOL nw_path_has_proxy_settings(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    if (*((void *)v1 + 30)) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = *((void *)v1 + 29) != 0;
    }
    goto LABEL_5;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_path_has_proxy_settings";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_path_has_proxy_settings";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_5:

  return v3;
}

id nw_path_copy_legacy_proxy_settings(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[30];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_path_copy_legacy_proxy_settings";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_path_copy_legacy_proxy_settings";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_path_set_proxy_settings(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = (void *)*((void *)v3 + 30);
    *((void *)v3 + 30) = 0;

    *((unsigned char *)v3 + 476) &= ~4u;
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E4F14568])
    {
      xpc_object_t v6 = xpc_copy(v4);
      id v7 = (void *)*((void *)v3 + 30);
      *((void *)v3 + 30) = v6;
    }
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_path_set_proxy_settings_block_invoke;
    v16[3] = &unk_1E524BAA8;
    id v17 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 3);
    __nw_path_set_proxy_settings_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 3);

    goto LABEL_6;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v21 = "nw_path_set_proxy_settings";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v21 = "nw_path_set_proxy_settings";
          __int16 v22 = 2082;
          char v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v9) {
    free(v9);
  }
LABEL_6:
}

void sub_183BC0F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_path_set_proxy_settings_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(void **)(v1 + 256);
  *(void *)(v1 + 256) = 0;
}

id nw_path_copy_gateways(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[26];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_path_copy_gateways";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_path_copy_gateways";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_has_gateways(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_path_has_gateways";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_path_has_gateways";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = *((void *)v1 + 26);
  if (!v3)
  {
LABEL_22:
    BOOL v4 = 0;
    goto LABEL_23;
  }
  BOOL v4 = *(void *)(v3 + 16) != *(void *)(v3 + 24);
LABEL_23:

  return v4;
}

id nw_path_copy_group_members(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[27];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_path_copy_group_members";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_path_copy_group_members";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_copy_resolver_configs(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  p_isa = (id *)&v1->super.isa;
  if (v1)
  {
    nw_path_update_dns(v1);
    id v3 = p_isa[23];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_path_copy_resolver_configs";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_path_copy_resolver_configs";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void sub_183BC1A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_override_resolver_configs(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[24];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_path_copy_override_resolver_configs";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_path_copy_override_resolver_configs";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

NWConcrete_nw_resolver_config *nw_path_copy_resolver_config_for_identifier(uint64_t a1)
{
  *(void *)&v38[13] = *MEMORY[0x1E4F143B8];
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v2 = (id)nw_context_copy_implicit_context::implicit_context;
  int v3 = nw_path_shared_necp_fd(v2);

  if ((v3 & 0x80000000) == 0)
  {
    xpc_object_t v4 = nw_network_agent_copy_dictionary_from_necp();
    uint64_t v5 = v4;
    if (!v4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
        __int16 v37 = 1042;
        *(_DWORD *)BOOL v38 = 16;
        v38[2] = 2098;
        *(void *)&v38[3] = a1;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Agent %{public,uuid_t}.16P is not present", length, 0x1Cu);
      }

      goto LABEL_35;
    }
    *(void *)length = 0;
    data = (unsigned int *)xpc_dictionary_get_data(v4, "data", (size_t *)length);
    if (!data || *(void *)length < 0xD8uLL || *(void *)length != data[53] + 216)
    {
      os_log_type_t v10 = __nwlog_obj();
      *(_DWORD *)length = 136446210;
      *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (!__nwlog_fault(v11, &type, &v34)) {
        goto LABEL_33;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null agent", length, 0xCu);
        }
      }
      else if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)length = 136446466;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            __int16 v37 = 2082;
            *(void *)BOOL v38 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s called with null agent, dumping backtrace:%{public}s", length, 0x16u);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_35;
          }
          goto LABEL_34;
        }
        if (v17)
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s called with null agent, no backtrace", length, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s called with null agent, backtrace limit exceeded", length, 0xCu);
        }
      }
      goto LABEL_32;
    }
    if (is_config_agent_type_dns())
    {
      id v7 = config_agent_copy_dns_information();
      os_log_type_t v8 = v7;
      if (v7)
      {
        BOOL v9 = nw_resolver_config_create_with_dictionary(v7);
        config_agent_free_dns_information();
LABEL_11:

LABEL_36:
        return v9;
      }
      __int16 v22 = __nwlog_obj();
      *(_DWORD *)length = 136446210;
      *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
      char v23 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v23, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v24 = __nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)length = 136446210;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null resolver_dictionary", length, 0xCu);
          }
        }
        else if (v34)
        {
          os_log_type_t v29 = (char *)__nw_create_backtrace_string();
          uint64_t v24 = __nwlog_obj();
          os_log_type_t v30 = type;
          BOOL v31 = os_log_type_enabled(v24, type);
          if (v29)
          {
            if (v31)
            {
              *(_DWORD *)length = 136446466;
              *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
              __int16 v37 = 2082;
              *(void *)BOOL v38 = v29;
              _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s called with null resolver_dictionary, dumping backtrace:%{public}s", length, 0x16u);
            }

            free(v29);
            goto LABEL_70;
          }
          if (v31)
          {
            *(_DWORD *)length = 136446210;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s called with null resolver_dictionary, no backtrace", length, 0xCu);
          }
        }
        else
        {
          uint64_t v24 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)length = 136446210;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null resolver_dictionary, backtrace limit exceeded", length, 0xCu);
          }
        }
      }
LABEL_70:
      if (v23) {
        free(v23);
      }
      BOOL v9 = 0;
      goto LABEL_11;
    }
    uint64_t v20 = __nwlog_obj();
    *(_DWORD *)length = 136446210;
    *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v11, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null is_config_agent_type_dns(agent)", length, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v34)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_1830D4000, v12, v32, "%{public}s called with null is_config_agent_type_dns(agent), backtrace limit exceeded", length, 0xCu);
        }
        goto LABEL_32;
      }
      v26 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v12, type);
      if (!v26)
      {
        if (v28)
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null is_config_agent_type_dns(agent), no backtrace", length, 0xCu);
        }
        goto LABEL_32;
      }
      if (v28)
      {
        *(_DWORD *)length = 136446466;
        *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
        __int16 v37 = 2082;
        *(void *)BOOL v38 = v26;
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null is_config_agent_type_dns(agent), dumping backtrace:%{public}s", length, 0x16u);
      }

      free(v26);
    }
LABEL_33:
    if (!v11)
    {
LABEL_35:
      BOOL v9 = 0;
      goto LABEL_36;
    }
LABEL_34:
    free(v11);
    goto LABEL_35;
  }
  return 0;
}

void sub_183BC24BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_has_browse_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 5) != 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_path_has_browse_descriptor";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_path_has_browse_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_has_advertise_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 6) != 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_path_has_advertise_descriptor";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_path_has_advertise_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_copy_discovered_endpoints(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[7];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_supports_browse(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_32:
    if (v9) {
      free(v9);
    }
    BOOL v5 = 0;
    goto LABEL_15;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v20 = 0;
  if ((v1[5] || v1[6]) && *((_DWORD *)v1 + 86))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      if (!uuid_is_null((const unsigned __int8 *)(v2[38] + v4)))
      {
        BOOL v5 = 1;
        *(unsigned char *)(*(void *)&buf[8] + 24) = 1;
        goto LABEL_14;
      }
      ++v3;
      v4 += 24;
    }
    while (v3 < *((unsigned int *)v2 + 86));
    if (!*(unsigned char *)(*(void *)&buf[8] + 24)) {
      goto LABEL_10;
    }
    BOOL v5 = 1;
  }
  else
  {
LABEL_10:
    xpc_object_t v6 = (void *)v2[28];
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_path_supports_browse_block_invoke;
      applier[3] = &unk_1E5249BA8;
      applier[4] = buf;
      xpc_dictionary_apply(v6, applier);
      BOOL v5 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    }
    else
    {
      BOOL v5 = 0;
    }
  }
LABEL_14:
  _Block_object_dispose(buf, 8);
LABEL_15:

  return v5;
}

void sub_183BC3070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_path_supports_browse_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0;
  if (!xdict) {
    return 1;
  }
  data = xpc_dictionary_get_data(xdict, "data", &length);
  if (!data || length < 0xD8 || length != data[53] + 216) {
    return 1;
  }
  int v5 = data[52];
  uint64_t result = 1;
  if ((v5 & 0x100) != 0 && (v5 & 0x13) != 1)
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void nw_path_enumerate_browse_options(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1;
  id v4 = a2;
  int v5 = (void (**)(void, void))v4;
  if (!v3)
  {
    BOOL v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_path_enumerate_browse_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v28 = "nw_path_enumerate_browse_options";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v10) {
          goto LABEL_11;
        }
LABEL_46:
        free(v10);
        goto LABEL_11;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (v4)
  {
    if ((v3[5] || v3[6]) && *((_DWORD *)v3 + 86))
    {
      unint64_t v6 = 0;
      uint64_t v7 = 8;
      do
      {
        v5[2](v5, v3[38] + v7);
        ++v6;
        v7 += 24;
      }
      while (v6 < *((unsigned int *)v3 + 86));
    }
    else
    {
      os_log_type_t v8 = (void *)v3[28];
      if (v8)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_path_enumerate_browse_options_block_invoke;
        applier[3] = &unk_1E5248170;
        id v24 = v4;
        xpc_dictionary_apply(v8, applier);
      }
    }
    goto LABEL_11;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v28 = "nw_path_enumerate_browse_options";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25)) {
    goto LABEL_45;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v25)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_44;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v28 = "nw_path_enumerate_browse_options";
    __int16 v29 = 2082;
    os_log_type_t v30 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_46;
  }
LABEL_11:
}

void sub_183BC369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_browse_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = v4;
  size_t length = 0;
  if (v4)
  {
    data = xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8
        && length == data[53] + 216
        && (data[52] & 0x100) != 0
        && (data[52] & 0x13) != 1)
      {
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
    }
  }

  return 1;
}

void sub_183BC3768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_enumerate_group_options(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_enumerate_group_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_enumerate_group_options";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    unint64_t v6 = (void *)v3[28];
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_path_enumerate_group_options_block_invoke;
      applier[3] = &unk_1E5248170;
      id v22 = v4;
      xpc_dictionary_apply(v6, applier);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_path_enumerate_group_options";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_group_options";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_group_options";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  BOOL v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_group_options";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_path_enumerate_group_options";
    __int16 v27 = 2082;
    BOOL v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_183BC3C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_group_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = v4;
  size_t length = 0;
  if (v4)
  {
    data = xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8
        && length == data[53] + 216
        && (data[52] & 0x20000) != 0
        && (data[52] & 0x13) != 1)
      {
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
    }
  }

  return 1;
}

void sub_183BC3D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_interfaces_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3 || v3 == *(void *)(*(void *)(a1 + 32) + 96)) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

BOOL nw_path_has_flows(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    int v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_path_has_flows";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_path_has_flows";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v17 = "nw_path_has_flows";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_path_has_flows";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_path_has_flows";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = *((void *)v1 + 9);
  if (!v3)
  {
LABEL_22:
    BOOL v4 = 0;
    goto LABEL_23;
  }
  BOOL v4 = *(void *)(v3 + 16) != *(void *)(v3 + 24);
LABEL_23:

  return v4;
}

BOOL nw_path_has_flow_for_nexus_agent(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v17 = 0;
    id v2 = *(atomic_uchar **)(a1 + 72);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_path_has_flow_for_nexus_agent_block_invoke;
    v13[3] = &unk_1E524BAD0;
    v13[4] = buf;
    v13[5] = a2;
    nw_array_apply(v2, (uint64_t)v13);
    BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    return v3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &v15, &v14))
  {
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v15;
      if (os_log_type_enabled(v7, v15))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = v15;
      BOOL v11 = os_log_type_enabled(v7, v15);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = v15;
      if (os_log_type_enabled(v7, v15))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL __nw_path_has_flow_for_nexus_agent_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = uuid_compare((const unsigned __int8 *)(a3 + 84), *(const unsigned __int8 **)(a1 + 40));
  if (!v4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v4 != 0;
}

BOOL __nw_path_interface_prohibited_by_parameters_block_invoke(uint64_t a1, int a2, xpc_object_t xuint)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int value = xpc_uint64_get_value(xuint);
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 == value)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 136446722;
      BOOL v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      __int16 v12 = 1024;
      int v13 = v7;
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Interface type %u prohibited, cannot use interface option %@", (uint8_t *)&v10, 0x1Cu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return v5 != value;
}

BOOL __nw_path_interface_prohibited_by_parameters_block_invoke_397(uint64_t a1, int a2, xpc_object_t xuint)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int value = xpc_uint64_get_value(xuint);
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 == value)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 136446722;
      BOOL v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      __int16 v12 = 1024;
      int v13 = v7;
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Interface subtype %u prohibited, cannot use interface option %@", (uint8_t *)&v10, 0x1Cu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return v5 != value;
}

uint64_t __nw_path_interface_prohibited_by_parameters_block_invoke_398(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = nw_interface_create_from_dictionary(a3);
  int v5 = v4;
  if (v4 && nw_interface_shallow_compare(v4, *(void **)(a1 + 32)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v10 = 136446466;
      BOOL v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Interface %@ prohibited, cannot use interface option", (uint8_t *)&v10, 0x16u);
    }

    uint64_t v8 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

uint64_t __nw_path_enumerate_interface_options_with_details_block_invoke(uint64_t a1)
{
  return 1;
}

uint64_t nw_path_get_estimated_upload_throughput_internal(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v1 = *(unsigned __int8 *)(a1 + 387);
    uint64_t v2 = 0x8000 << v1;
    if (v1 > 0x30) {
      uint64_t v2 = -1;
    }
    if (*(unsigned char *)(a1 + 387)) {
      return v2;
    }
    else {
      return 0;
    }
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v5) {
    free(v5);
  }
  return 0;
}

uint64_t nw_path_get_estimated_download_throughput_internal(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v1 = *(unsigned __int8 *)(a1 + 388);
    uint64_t v2 = 0x8000 << v1;
    if (v1 > 0x30) {
      uint64_t v2 = -1;
    }
    if (*(unsigned char *)(a1 + 388)) {
      return v2;
    }
    else {
      return 0;
    }
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v5) {
    free(v5);
  }
  return 0;
}

uint64_t nw_path_get_estimated_upload_throughput(void *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (id *)v1;
    if (nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count > 0x3E7)
    {
      if (!gLogDatapath)
      {
LABEL_63:

        unsigned int v35 = *((unsigned __int8 *)v3 + 387);
        uint64_t v36 = 0x8000 << v35;
        if (v35 > 0x30) {
          uint64_t v36 = -1;
        }
        if (*((unsigned char *)v3 + 387)) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        goto LABEL_68;
      }
      int v4 = __nwlog_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_report_estimated_throughput_usage";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput usage exceeded cap, ignoring", buf, 0xCu);
      }
LABEL_62:

      goto LABEL_63;
    }
    ++nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count;
    int v4 = xpc_dictionary_create(0, 0, 0);
    if (v4)
    {
      id v5 = nw_path_copy_interface(v3);
      unint64_t v6 = v5;
      if (!v5) {
        goto LABEL_41;
      }
      os_log_type_t v7 = (unsigned int *)v5;
      uint64_t v8 = v7[24];

      if (v8 > 4) {
        os_log_type_t v9 = "unknown";
      }
      else {
        os_log_type_t v9 = off_1E524BC28[v8];
      }
      uint64_t v14 = v7;
      int v15 = v14[25];

      if (v15 <= 1001)
      {
        if (!v15)
        {
          __int16 v16 = "other";
          goto LABEL_40;
        }
        if (v15 == 1001)
        {
          __int16 v16 = "wifi_infrastructure";
          goto LABEL_40;
        }
      }
      else
      {
        switch(v15)
        {
          case 1002:
            __int16 v16 = "wifi_awdl";
            goto LABEL_40;
          case 4001:
            __int16 v16 = "coprocessor";
            goto LABEL_40;
          case 5001:
            __int16 v16 = "companion";
LABEL_40:
            os_log_type_t v21 = v14;
            int v22 = *((unsigned __int8 *)v21 + 84);

            char v23 = nw_interface_radio_type_to_string(v22);
            xpc_dictionary_set_string(v4, "interface_type", v9);
            xpc_dictionary_set_string(v4, "interface_subtype", v16);
            xpc_dictionary_set_string(v4, "interface_radio_type", v23);
LABEL_41:
            id v24 = v3[2];
            char v25 = v24;
            if (v24)
            {
              effective_process_name = (const char *)nw_parameters_get_effective_process_name(v24);
              if (effective_process_name) {
                xpc_dictionary_set_string(v4, "effective_bundle_id", effective_process_name);
              }
            }
            if (nw_utilities_get_self_name::onceToken != -1) {
              dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_11_44681);
            }
            if (nw_utilities_get_self_name::name) {
              xpc_dictionary_set_string(v4, "bundle_id", (const char *)nw_utilities_get_self_name::name);
            }
            unsigned int v27 = *((unsigned __int8 *)v3 + 388);
            uint64_t v28 = 0x8000 << v27;
            if (v27 > 0x30) {
              uint64_t v28 = -1;
            }
            if (*((unsigned char *)v3 + 388)) {
              uint64_t v29 = v28;
            }
            else {
              uint64_t v29 = 0;
            }
            xpc_dictionary_set_uint64(v4, "download_estimate", v29);
            unsigned int v30 = *((unsigned __int8 *)v3 + 387);
            uint64_t v31 = 0x8000 << v30;
            if (v30 > 0x30) {
              uint64_t v31 = -1;
            }
            if (*((unsigned char *)v3 + 387)) {
              uint64_t v32 = v31;
            }
            else {
              uint64_t v32 = 0;
            }
            xpc_dictionary_set_uint64(v4, "upload_estimate", v32);
            xpc_dictionary_set_string(v4, "direction", "upload");
            os_log_type_t v33 = (char *)xpc_dictionary_copy_basic_description();
            if (gLogDatapath)
            {
              os_log_type_t v46 = __nwlog_obj();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                v51 = "nw_path_report_estimated_throughput_usage";
                __int16 v52 = 2080;
                v53 = v33;
                _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput: %s", buf, 0x16u);
              }
            }
            if (v33) {
              free(v33);
            }
            analytics_send_event_delayInitStub(v34);

            goto LABEL_62;
        }
      }
      __int16 v16 = "unknown";
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_path_report_estimated_throughput_usage";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v11, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v48)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_path_report_estimated_throughput_usage";
            __int16 v52 = 2082;
            v53 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v11)
    {
LABEL_17:
      int v4 = 0;
      goto LABEL_62;
    }
LABEL_16:
    free(v11);
    goto LABEL_17;
  }
  id v39 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_path_get_estimated_upload_throughput";
  int v40 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v48 = 0;
  if (__nwlog_fault(v40, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_upload_throughput";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v48)
    {
      os_log_type_t v43 = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v41, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_path_get_estimated_upload_throughput";
          __int16 v52 = 2082;
          v53 = v43;
          _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_91;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_upload_throughput";
        _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v41 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_upload_throughput";
        _os_log_impl(&dword_1830D4000, v41, v47, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_91:
  if (v40) {
    free(v40);
  }
  uint64_t v37 = 0;
LABEL_68:

  return v37;
}

void sub_183BC54EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_estimated_download_throughput(void *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (id *)v1;
    if (nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count > 0x3E7)
    {
      if (!gLogDatapath)
      {
LABEL_63:

        unsigned int v35 = *((unsigned __int8 *)v3 + 388);
        uint64_t v36 = 0x8000 << v35;
        if (v35 > 0x30) {
          uint64_t v36 = -1;
        }
        if (*((unsigned char *)v3 + 388)) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        goto LABEL_68;
      }
      int v4 = __nwlog_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_report_estimated_throughput_usage";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput usage exceeded cap, ignoring", buf, 0xCu);
      }
LABEL_62:

      goto LABEL_63;
    }
    ++nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count;
    int v4 = xpc_dictionary_create(0, 0, 0);
    if (v4)
    {
      id v5 = nw_path_copy_interface(v3);
      unint64_t v6 = v5;
      if (!v5) {
        goto LABEL_41;
      }
      os_log_type_t v7 = (unsigned int *)v5;
      uint64_t v8 = v7[24];

      if (v8 > 4) {
        os_log_type_t v9 = "unknown";
      }
      else {
        os_log_type_t v9 = off_1E524BC28[v8];
      }
      uint64_t v14 = v7;
      int v15 = v14[25];

      if (v15 <= 1001)
      {
        if (!v15)
        {
          __int16 v16 = "other";
          goto LABEL_40;
        }
        if (v15 == 1001)
        {
          __int16 v16 = "wifi_infrastructure";
          goto LABEL_40;
        }
      }
      else
      {
        switch(v15)
        {
          case 1002:
            __int16 v16 = "wifi_awdl";
            goto LABEL_40;
          case 4001:
            __int16 v16 = "coprocessor";
            goto LABEL_40;
          case 5001:
            __int16 v16 = "companion";
LABEL_40:
            os_log_type_t v21 = v14;
            int v22 = *((unsigned __int8 *)v21 + 84);

            char v23 = nw_interface_radio_type_to_string(v22);
            xpc_dictionary_set_string(v4, "interface_type", v9);
            xpc_dictionary_set_string(v4, "interface_subtype", v16);
            xpc_dictionary_set_string(v4, "interface_radio_type", v23);
LABEL_41:
            id v24 = v3[2];
            char v25 = v24;
            if (v24)
            {
              effective_process_name = (const char *)nw_parameters_get_effective_process_name(v24);
              if (effective_process_name) {
                xpc_dictionary_set_string(v4, "effective_bundle_id", effective_process_name);
              }
            }
            if (nw_utilities_get_self_name::onceToken != -1) {
              dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_11_44681);
            }
            if (nw_utilities_get_self_name::name) {
              xpc_dictionary_set_string(v4, "bundle_id", (const char *)nw_utilities_get_self_name::name);
            }
            unsigned int v27 = *((unsigned __int8 *)v3 + 388);
            uint64_t v28 = 0x8000 << v27;
            if (v27 > 0x30) {
              uint64_t v28 = -1;
            }
            if (*((unsigned char *)v3 + 388)) {
              uint64_t v29 = v28;
            }
            else {
              uint64_t v29 = 0;
            }
            xpc_dictionary_set_uint64(v4, "download_estimate", v29);
            unsigned int v30 = *((unsigned __int8 *)v3 + 387);
            uint64_t v31 = 0x8000 << v30;
            if (v30 > 0x30) {
              uint64_t v31 = -1;
            }
            if (*((unsigned char *)v3 + 387)) {
              uint64_t v32 = v31;
            }
            else {
              uint64_t v32 = 0;
            }
            xpc_dictionary_set_uint64(v4, "upload_estimate", v32);
            xpc_dictionary_set_string(v4, "direction", "download");
            os_log_type_t v33 = (char *)xpc_dictionary_copy_basic_description();
            if (gLogDatapath)
            {
              os_log_type_t v46 = __nwlog_obj();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                v51 = "nw_path_report_estimated_throughput_usage";
                __int16 v52 = 2080;
                v53 = v33;
                _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput: %s", buf, 0x16u);
              }
            }
            if (v33) {
              free(v33);
            }
            analytics_send_event_delayInitStub(v34);

            goto LABEL_62;
        }
      }
      __int16 v16 = "unknown";
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_path_report_estimated_throughput_usage";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v11, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v48)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_path_report_estimated_throughput_usage";
            __int16 v52 = 2082;
            v53 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v11)
    {
LABEL_17:
      int v4 = 0;
      goto LABEL_62;
    }
LABEL_16:
    free(v11);
    goto LABEL_17;
  }
  id v39 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_path_get_estimated_download_throughput";
  int v40 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v48 = 0;
  if (__nwlog_fault(v40, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_download_throughput";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v48)
    {
      os_log_type_t v43 = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v41, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_path_get_estimated_download_throughput";
          __int16 v52 = 2082;
          v53 = v43;
          _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_91;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_download_throughput";
        _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v41 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_download_throughput";
        _os_log_impl(&dword_1830D4000, v41, v47, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_91:
  if (v40) {
    free(v40);
  }
  uint64_t v37 = 0;
LABEL_68:

  return v37;
}

void sub_183BC5DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_flow_copy_local_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_path_flow_copy_local_endpoint";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_path_flow_copy_local_endpoint";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_flow_copy_remote_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_path_flow_copy_remote_endpoint";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_path_flow_copy_remote_endpoint";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_flow_copy_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_path_flow_copy_interface";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_path_flow_copy_interface";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_get_nexus_agent_uuid(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_path_flow_get_nexus_agent_uuid";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null flow", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v19 = "nw_path_flow_get_nexus_agent_uuid";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_22:
    if (v9) {
      free(v9);
    }
    goto LABEL_3;
  }
  id v5 = v3 + 84;
  if (!uuid_is_null((const unsigned __int8 *)v3 + 84))
  {
    *a2 = *v5;
    uint64_t v6 = 1;
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = 0;
LABEL_5:

  return v6;
}

void sub_183BC688C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_is_viable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 185) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_is_viable";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_is_viable";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_ecn_enabled(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 2) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_ecn_enabled";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_ecn_enabled";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_fast_open_blocked(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 3) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_fast_open_blocked";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_fast_open_blocked";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_is_local(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 4) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_is_local";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_is_local";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_is_direct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 5) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_is_direct";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_is_direct";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_has_ipv4(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 6) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_has_ipv4";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_has_ipv4";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_flow_has_ipv6(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[185] < 0;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_has_ipv6";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_has_ipv6";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_flow_ids_are_equal(void *a1, void *a2)
{
  BOOL v3 = a1;
  int v4 = a2;
  BOOL v5 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    BOOL v5 = v3[18] == v4[18] && v3[19] == v4[19];
  }

  return v5;
}

id nw_path_flow_copy_error(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_copy_error";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_copy_error";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_path_flow_registration_set_advisory_region(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *((void *)v3 + 10) = a2;
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_flow_registration_set_advisory_region";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_flow_registration_set_advisory_region";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

NWConcrete_nw_path_override_info *nw_path_override_info_create()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v0 = objc_alloc_init(NWConcrete_nw_path_override_info);
  id v1 = v0;
  if (v0)
  {
    uint64_t v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_path_override_info_create";
  int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_8;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = (id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_path_override_info_create";
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4) {
      goto LABEL_10;
    }
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = (id)gLogObj;
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_path_override_info_create";
      _os_log_impl(&dword_1830D4000, v5, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v5 = (id)gLogObj;
  os_log_type_t v9 = type;
  BOOL v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_path_override_info_create";
      _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v15 = "nw_path_override_info_create";
    __int16 v16 = 2082;
    __int16 v17 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:

  return v1;
}

void nw_path_override_info_set_uses_wifi(void *a1, int a2)
{
}

void nw_path_override_info_update_flag(void *a1, uint64_t a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  os_log_type_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = *((void *)v5 + 1);
    if (a3) {
      uint64_t v8 = v7 | a2;
    }
    else {
      uint64_t v8 = v7 & ~a2;
    }
    *((void *)v5 + 1) = v8;
    goto LABEL_6;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v20 = "nw_path_override_info_update_flag";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null override_info", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v20 = "nw_path_override_info_update_flag";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null override_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null override_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v10) {
    free(v10);
  }
LABEL_6:
}

void nw_path_override_info_set_uses_cellular(void *a1, int a2)
{
}

void nw_path_override_info_set_expensive(void *a1, int a2)
{
}

void nw_path_override_info_set_constrained(void *a1, int a2)
{
}

void nw_path_override_info_set_roaming(void *a1, int a2)
{
}

void nw_path_override_info_add_resolver_config(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_override_info_add_resolver_config";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null override_info", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_override_info_add_resolver_config";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null override_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_41:
        free(v10);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null override_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    uint64_t v6 = v3[2];
    if (!v6)
    {
      BOOL v7 = nw_array_create();
      uint64_t v8 = (void *)v3[2];
      v3[2] = v7;

      uint64_t v6 = v3[2];
    }
    nw_array_append(v6, v5);
    goto LABEL_6;
  }
  char v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_path_override_info_add_resolver_config";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null resolver_config", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null resolver_config, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  uint64_t v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null resolver_config, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_path_override_info_add_resolver_config";
    __int16 v27 = 2082;
    uint64_t v28 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null resolver_config, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_41;
  }
LABEL_6:
}

BOOL nw_path_override_info_copy_data(void *a1)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_path_override_info_copy_data";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58) = 0;
    if (__nwlog_fault(v21, type, &v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null override_info", buf, 0xCu);
        }
      }
      else if ((_BYTE)v58)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v35 = type[0];
        BOOL v36 = os_log_type_enabled(v22, type[0]);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v65 = "nw_path_override_info_copy_data";
            __int16 v66 = 2082;
            size_t v67 = (size_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v22, v35, "%{public}s called with null override_info, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_78;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_1830D4000, v22, v35, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v43 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_1830D4000, v22, v43, "%{public}s called with null override_info, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_78:
    if (v21) {
      free(v21);
    }
    dispatch_data_t v14 = 0;
    goto LABEL_32;
  }
  uint64_t v58 = 0;
  v59 = &v58;
  uint64_t v60 = 0x2020000000;
  size_t v3 = 13;
  uint64_t v61 = 13;
  *(void *)os_log_type_t type = 0;
  v53 = type;
  uint64_t v54 = 0x3032000000;
  v55 = __Block_byref_object_copy__68682;
  uint64_t v56 = __Block_byref_object_dispose__68683;
  id v57 = 0;
  id v4 = (atomic_uchar *)*((void *)v1 + 2);
  if (v4)
  {
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 3221225472;
    v51[2] = __nw_path_override_info_copy_data_block_invoke;
    v51[3] = &unk_1E5248260;
    v51[4] = type;
    v51[5] = &v58;
    nw_array_apply(v4, (uint64_t)v51);
    size_t v3 = v59[3];
    if (!v3)
    {
      id v24 = __nwlog_obj();
      os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v65 = "strict_malloc";
      char v25 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v25);
      if (result) {
        goto LABEL_90;
      }
      free(v25);
      size_t v3 = 0;
    }
  }
  id v5 = (char *)malloc_type_malloc(v3, 0xF2B69DE5uLL);
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v47 = 0;
    char v48 = &v47;
    uint64_t v49 = 0x2020000000;
    __int16 v50 = v5;
    uint64_t v7 = v59[3];
    uint64_t v8 = &v5[v7];
    if (v7 > 0)
    {
      if ((unint64_t)v7 > 0xC)
      {
        *id v5 = 1;
        *(_DWORD *)(v5 + 1) = 8;
        *(void *)(v5 + 5) = v2[1];
        v48[3] = (uint64_t)(v5 + 13);
        char v13 = (atomic_uchar *)*((void *)v53 + 5);
        if (!v13) {
          goto LABEL_14;
        }
        v46[0] = MEMORY[0x1E4F143A8];
        v46[1] = 3221225472;
        v46[2] = __nw_path_override_info_copy_data_block_invoke_2;
        v46[3] = &unk_1E5248288;
        v46[4] = &v47;
        v46[5] = &v58;
        v46[6] = v6;
        nw_array_apply(v13, (uint64_t)v46);
        if (v48[3])
        {
LABEL_14:
          dispatch_data_t v14 = dispatch_data_create(v6, v59[3], 0, 0);
          free(v6);
LABEL_31:
          _Block_object_dispose(&v47, 8);
          _Block_object_dispose(type, 8);

          _Block_object_dispose(&v58, 8);
LABEL_32:

          return (BOOL)v14;
        }
LABEL_30:
        free(v6);
        dispatch_data_t v14 = 0;
        goto LABEL_31;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      *(_DWORD *)buf = 136447490;
      v65 = "nw_necp_append_tlv";
      __int16 v66 = 2048;
      size_t v67 = (size_t)v6;
      __int16 v68 = 2048;
      uint64_t v69 = 13;
      __int16 v70 = 2048;
      *(void *)v71 = v8;
      *(_WORD *)&v71[8] = 1024;
      *(_DWORD *)v72 = 1;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = 8;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v63 = OS_LOG_TYPE_ERROR;
      char v62 = 0;
      if (__nwlog_fault(v10, &v63, &v62))
      {
        if (v63 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v12 = v63;
          if (os_log_type_enabled(v11, v63))
          {
            *(_DWORD *)buf = 136447490;
            v65 = "nw_necp_append_tlv";
            __int16 v66 = 2048;
            size_t v67 = (size_t)v6;
            __int16 v68 = 2048;
            uint64_t v69 = 13;
            __int16 v70 = 2048;
            *(void *)v71 = v8;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)v72 = 1;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = 8;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
          }
        }
        else if (v62)
        {
          BOOL v15 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v16 = v63;
          BOOL v17 = os_log_type_enabled(v11, v63);
          if (v15)
          {
            if (v17)
            {
              *(_DWORD *)buf = 136447746;
              v65 = "nw_necp_append_tlv";
              __int16 v66 = 2048;
              size_t v67 = (size_t)v6;
              __int16 v68 = 2048;
              uint64_t v69 = 13;
              __int16 v70 = 2048;
              *(void *)v71 = v8;
              *(_WORD *)&v71[8] = 1024;
              *(_DWORD *)v72 = 1;
              *(_WORD *)&v72[4] = 1024;
              *(_DWORD *)&v72[6] = 8;
              __int16 v73 = 2082;
              v74 = v15;
              _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
            }

            free(v15);
            if (!v10) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
          if (v17)
          {
            *(_DWORD *)buf = 136447490;
            v65 = "nw_necp_append_tlv";
            __int16 v66 = 2048;
            size_t v67 = (size_t)v6;
            __int16 v68 = 2048;
            uint64_t v69 = 13;
            __int16 v70 = 2048;
            *(void *)v71 = v8;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)v72 = 1;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = 8;
            _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v18 = v63;
          if (os_log_type_enabled(v11, v63))
          {
            *(_DWORD *)buf = 136447490;
            v65 = "nw_necp_append_tlv";
            __int16 v66 = 2048;
            size_t v67 = (size_t)v6;
            __int16 v68 = 2048;
            uint64_t v69 = 13;
            __int16 v70 = 2048;
            *(void *)v71 = v8;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)v72 = 1;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = 8;
            _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
          }
        }
        goto LABEL_26;
      }
LABEL_27:
      if (!v10)
      {
LABEL_29:
        v48[3] = 0;
        goto LABEL_30;
      }
LABEL_28:
      free(v10);
      goto LABEL_29;
    }
    uint64_t v32 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    v65 = "nw_necp_append_tlv";
    __int16 v66 = 2048;
    size_t v67 = (size_t)v6;
    __int16 v68 = 2048;
    uint64_t v69 = (uint64_t)v8;
    __int16 v70 = 1024;
    *(_DWORD *)v71 = 1;
    *(_WORD *)&v71[4] = 1024;
    *(_DWORD *)&v71[6] = 8;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v63 = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v10, &v63, &v62)) {
      goto LABEL_27;
    }
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v33 = v63;
      if (os_log_type_enabled(v11, v63))
      {
        *(_DWORD *)buf = 136447234;
        v65 = "nw_necp_append_tlv";
        __int16 v66 = 2048;
        size_t v67 = (size_t)v6;
        __int16 v68 = 2048;
        uint64_t v69 = (uint64_t)v8;
        __int16 v70 = 1024;
        *(_DWORD *)v71 = 1;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = 8;
        _os_log_impl(&dword_1830D4000, v11, v33, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
    }
    else if (v62)
    {
      int v40 = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v41 = v63;
      BOOL v42 = os_log_type_enabled(v11, v63);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136447490;
          v65 = "nw_necp_append_tlv";
          __int16 v66 = 2048;
          size_t v67 = (size_t)v6;
          __int16 v68 = 2048;
          uint64_t v69 = (uint64_t)v8;
          __int16 v70 = 1024;
          *(_DWORD *)v71 = 1;
          *(_WORD *)&v71[4] = 1024;
          *(_DWORD *)&v71[6] = 8;
          *(_WORD *)v72 = 2082;
          *(void *)&v72[2] = v40;
          _os_log_impl(&dword_1830D4000, v11, v41, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
        }

        free(v40);
        goto LABEL_27;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136447234;
        v65 = "nw_necp_append_tlv";
        __int16 v66 = 2048;
        size_t v67 = (size_t)v6;
        __int16 v68 = 2048;
        uint64_t v69 = (uint64_t)v8;
        __int16 v70 = 1024;
        *(_DWORD *)v71 = 1;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = 8;
        _os_log_impl(&dword_1830D4000, v11, v41, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v45 = v63;
      if (os_log_type_enabled(v11, v63))
      {
        *(_DWORD *)buf = 136447234;
        v65 = "nw_necp_append_tlv";
        __int16 v66 = 2048;
        size_t v67 = (size_t)v6;
        __int16 v68 = 2048;
        uint64_t v69 = (uint64_t)v8;
        __int16 v70 = 1024;
        *(_DWORD *)v71 = 1;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = 8;
        _os_log_impl(&dword_1830D4000, v11, v45, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
    }
LABEL_26:

    goto LABEL_27;
  }
  v26 = __nwlog_obj();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v65 = "strict_malloc";
  __int16 v66 = 2048;
  size_t v67 = v3;
  __int16 v27 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v27);
  if (!result)
  {
    free(v27);
    uint64_t v47 = 0;
    char v48 = &v47;
    uint64_t v49 = 0x2020000000;
    __int16 v50 = 0;
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_necp_append_tlv";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v63 = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (__nwlog_fault(v29, &v63, &v62))
    {
      if (v63 == OS_LOG_TYPE_FAULT)
      {
        unsigned int v30 = __nwlog_obj();
        os_log_type_t v31 = v63;
        if (os_log_type_enabled(v30, v63))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }
      else if (v62)
      {
        uint64_t v37 = (char *)__nw_create_backtrace_string();
        unsigned int v30 = __nwlog_obj();
        os_log_type_t v38 = v63;
        BOOL v39 = os_log_type_enabled(v30, v63);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v65 = "nw_necp_append_tlv";
            __int16 v66 = 2082;
            size_t v67 = (size_t)v37;
            _os_log_impl(&dword_1830D4000, v30, v38, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_84;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v30, v38, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unsigned int v30 = __nwlog_obj();
        os_log_type_t v44 = v63;
        if (os_log_type_enabled(v30, v63))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v30, v44, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_84:
    if (v29) {
      free(v29);
    }
    dispatch_data_t v14 = 0;
    v48[3] = 0;
    goto LABEL_31;
  }
LABEL_90:
  __break(1u);
  return result;
}

void sub_183BC99F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  _Block_object_dispose(&a32, 8);

  _Block_object_dispose((const void *)(v38 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_path_override_info_copy_data_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  dispatch_data_t v4 = nw_resolver_config_copy_plist_data(a3);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (!v5)
    {
      BOOL v6 = nw_array_create();
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    nw_array_append(v5, v4);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += dispatch_data_get_size(v4) + 5;
  }

  return 1;
}

BOOL __nw_path_override_info_copy_data_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  dispatch_data_t v4 = a3;
  size_t size = dispatch_data_get_size(v4);
  if (!size)
  {
    os_log_type_t v22 = a1;
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "strict_malloc";
    id v24 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v24);
    if (result) {
      goto LABEL_113;
    }
    free(v24);
    a1 = v22;
  }
  BOOL v6 = malloc_type_malloc(size, 0xF2B69DE5uLL);
  if (v6) {
    goto LABEL_3;
  }
  char v25 = a1;
  v26 = __nwlog_obj();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(void *)&void applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = size;
  __int16 v27 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v27);
  if (result)
  {
LABEL_113:
    __break(1u);
    return result;
  }
  free(v27);
  a1 = v25;
LABEL_3:
  *(void *)os_log_type_t type = 0;
  uint64_t v60 = type;
  uint64_t v61 = 0x2000000000;
  uint64_t v62 = 0;
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x2000000000;
  v58[3] = v6;
  if (v4)
  {
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)v64 = &unk_1E5242B60;
    *(void *)&v64[16] = v58;
    *(void *)&v64[24] = size;
    *(void *)&v64[8] = type;
    dispatch_data_apply(v4, applier);
    uint64_t v7 = *((void *)v60 + 3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  _Block_object_dispose(v58, 8);
  _Block_object_dispose(type, 8);
  if (v7 != size) {
    goto LABEL_36;
  }
  unint64_t v8 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (!v8)
  {
    uint64_t v28 = a1;
    uint64_t v29 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_necp_append_tlv";
    unsigned int v30 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v30, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null tlv_start", applier, 0xCu);
        }
        goto LABEL_97;
      }
      if (!LOBYTE(v58[0]))
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v50 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v31, v50, "%{public}s called with null tlv_start, backtrace limit exceeded", applier, 0xCu);
        }
        goto LABEL_97;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v39 = os_log_type_enabled(v31, type[0]);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v31, v38, "%{public}s called with null tlv_start, no backtrace", applier, 0xCu);
        }
        goto LABEL_97;
      }
      if (v39)
      {
        *(_DWORD *)applier = 136446466;
        *(void *)&void applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v31, v38, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", applier, 0x16u);
      }
LABEL_67:

      free(backtrace_string);
    }
LABEL_98:
    a1 = v28;
    if (v30) {
      free(v30);
    }
    unint64_t v16 = 0;
    goto LABEL_35;
  }
  uint64_t v9 = a1[6];
  if (!v9)
  {
    uint64_t v28 = a1;
    os_log_type_t v33 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_necp_append_tlv";
    unsigned int v30 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v30, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v34 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null beyond", applier, 0xCu);
        }
LABEL_97:

        goto LABEL_98;
      }
      if (!LOBYTE(v58[0]))
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v51 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v31, v51, "%{public}s called with null beyond, backtrace limit exceeded", applier, 0xCu);
        }
        goto LABEL_97;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v40 = type[0];
      BOOL v41 = os_log_type_enabled(v31, type[0]);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v31, v40, "%{public}s called with null beyond, no backtrace", applier, 0xCu);
        }
        goto LABEL_97;
      }
      if (v41)
      {
        *(_DWORD *)applier = 136446466;
        *(void *)&void applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v31, v40, "%{public}s called with null beyond, dumping backtrace:%{public}s", applier, 0x16u);
      }
      goto LABEL_67;
    }
    goto LABEL_98;
  }
  unint64_t v10 = v9 + *(void *)(*(void *)(a1[5] + 8) + 24);
  if (v8 >= v10)
  {
    id v57 = a1;
    os_log_type_t v35 = __nwlog_obj();
    *(_DWORD *)applier = 136447234;
    *(void *)&void applier[4] = "nw_necp_append_tlv";
    *(_WORD *)&applier[12] = 2048;
    *(void *)&applier[14] = v8;
    *(_WORD *)&applier[22] = 2048;
    *(void *)v64 = v10;
    *(_WORD *)&v64[8] = 1024;
    *(_DWORD *)&v64[10] = 2;
    *(_WORD *)&v64[14] = 1024;
    *(_DWORD *)&v64[16] = size;
    char v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v13, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        dispatch_data_t v14 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)applier = 136447234;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(void *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(void *)v64 = v10;
          *(_WORD *)&v64[8] = 1024;
          *(_DWORD *)&v64[10] = 2;
          *(_WORD *)&v64[14] = 1024;
          *(_DWORD *)&v64[16] = size;
          _os_log_impl(&dword_1830D4000, v14, v36, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", applier, 0x2Cu);
        }
LABEL_31:

        goto LABEL_32;
      }
      if (!LOBYTE(v58[0]))
      {
        dispatch_data_t v14 = __nwlog_obj();
        os_log_type_t v52 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)applier = 136447234;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(void *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(void *)v64 = v10;
          *(_WORD *)&v64[8] = 1024;
          *(_DWORD *)&v64[10] = 2;
          *(_WORD *)&v64[14] = 1024;
          *(_DWORD *)&v64[16] = size;
          _os_log_impl(&dword_1830D4000, v14, v52, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", applier, 0x2Cu);
        }
        goto LABEL_31;
      }
      BOOL v42 = (char *)__nw_create_backtrace_string();
      dispatch_data_t v14 = __nwlog_obj();
      os_log_type_t v43 = type[0];
      BOOL v44 = os_log_type_enabled(v14, type[0]);
      if (!v42)
      {
        if (v44)
        {
          *(_DWORD *)applier = 136447234;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(void *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(void *)v64 = v10;
          *(_WORD *)&v64[8] = 1024;
          *(_DWORD *)&v64[10] = 2;
          *(_WORD *)&v64[14] = 1024;
          *(_DWORD *)&v64[16] = size;
          _os_log_impl(&dword_1830D4000, v14, v43, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", applier, 0x2Cu);
        }
        goto LABEL_31;
      }
      if (v44)
      {
        *(_DWORD *)applier = 136447490;
        *(void *)&void applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(void *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(void *)v64 = v10;
        *(_WORD *)&v64[8] = 1024;
        *(_DWORD *)&v64[10] = 2;
        *(_WORD *)&v64[14] = 1024;
        *(_DWORD *)&v64[16] = size;
        *(_WORD *)&v64[20] = 2082;
        *(void *)&v64[22] = v42;
        _os_log_impl(&dword_1830D4000, v14, v43, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", applier, 0x36u);
      }

      free(v42);
    }
LABEL_32:
    if (!v13)
    {
LABEL_34:
      unint64_t v16 = 0;
      a1 = v57;
      goto LABEL_35;
    }
LABEL_33:
    free(v13);
    goto LABEL_34;
  }
  unint64_t v11 = size + 5;
  if (v10 - v8 < v11)
  {
    id v57 = a1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)applier = 136447490;
    *(void *)&void applier[4] = "nw_necp_append_tlv";
    *(_WORD *)&applier[12] = 2048;
    *(void *)&applier[14] = v8;
    *(_WORD *)&applier[22] = 2048;
    *(void *)v64 = size + 5;
    *(_WORD *)&v64[8] = 2048;
    *(void *)&v64[10] = v10;
    *(_WORD *)&v64[18] = 1024;
    *(_DWORD *)&v64[20] = 2;
    *(_WORD *)&v64[24] = 1024;
    *(_DWORD *)&v64[26] = size;
    char v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (!__nwlog_fault(v13, type, v58)) {
      goto LABEL_32;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      dispatch_data_t v14 = (id)gLogObj;
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)applier = 136447490;
        *(void *)&void applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(void *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(void *)v64 = size + 5;
        *(_WORD *)&v64[8] = 2048;
        *(void *)&v64[10] = v10;
        *(_WORD *)&v64[18] = 1024;
        *(_DWORD *)&v64[20] = 2;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = size;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", applier, 0x36u);
      }
    }
    else if (LOBYTE(v58[0]))
    {
      BOOL v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      dispatch_data_t v14 = (id)gLogObj;
      os_log_type_t v18 = type[0];
      BOOL v19 = os_log_type_enabled(v14, type[0]);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)applier = 136447746;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(void *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(void *)v64 = size + 5;
          *(_WORD *)&v64[8] = 2048;
          *(void *)&v64[10] = v10;
          *(_WORD *)&v64[18] = 1024;
          *(_DWORD *)&v64[20] = 2;
          *(_WORD *)&v64[24] = 1024;
          *(_DWORD *)&v64[26] = size;
          *(_WORD *)&v64[30] = 2082;
          v65 = v17;
          _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", applier, 0x40u);
        }

        free(v17);
        if (!v13) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (v19)
      {
        *(_DWORD *)applier = 136447490;
        *(void *)&void applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(void *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(void *)v64 = size + 5;
        *(_WORD *)&v64[8] = 2048;
        *(void *)&v64[10] = v10;
        *(_WORD *)&v64[18] = 1024;
        *(_DWORD *)&v64[20] = 2;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = size;
        _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", applier, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      dispatch_data_t v14 = (id)gLogObj;
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)applier = 136447490;
        *(void *)&void applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(void *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(void *)v64 = size + 5;
        *(_WORD *)&v64[8] = 2048;
        *(void *)&v64[10] = v10;
        *(_WORD *)&v64[18] = 1024;
        *(_DWORD *)&v64[20] = 2;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = size;
        _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", applier, 0x36u);
      }
    }
    goto LABEL_31;
  }
  *(unsigned char *)unint64_t v8 = 2;
  *(_DWORD *)(v8 + 1) = size;
  if (size)
  {
    if (v6)
    {
      memcpy((void *)(v8 + 5), v6, size);
      goto LABEL_19;
    }
    os_log_type_t v45 = a1;
    os_log_type_t v46 = __nwlog_obj();
    *(_DWORD *)applier = 136446722;
    *(void *)&void applier[4] = "nw_necp_append_tlv";
    *(_WORD *)&applier[12] = 1024;
    *(_DWORD *)&applier[14] = 2;
    *(_WORD *)&applier[18] = 1024;
    *(_DWORD *)&applier[20] = size;
    uint64_t v47 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v47, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v48 = __nwlog_obj();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = 2;
          *(_WORD *)&applier[18] = 1024;
          *(_DWORD *)&applier[20] = size;
          _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s type=%u length=%u but value is NULL", applier, 0x18u);
        }
      }
      else if (LOBYTE(v58[0]))
      {
        v53 = (char *)__nw_create_backtrace_string();
        char v48 = __nwlog_obj();
        os_log_type_t v54 = type[0];
        BOOL v55 = os_log_type_enabled(v48, type[0]);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)applier = 136446978;
            *(void *)&void applier[4] = "nw_necp_append_tlv";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = 2;
            *(_WORD *)&applier[18] = 1024;
            *(_DWORD *)&applier[20] = size;
            *(_WORD *)v64 = 2082;
            *(void *)&v64[2] = v53;
            _os_log_impl(&dword_1830D4000, v48, v54, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", applier, 0x22u);
          }

          free(v53);
          goto LABEL_110;
        }
        if (v55)
        {
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = 2;
          *(_WORD *)&applier[18] = 1024;
          *(_DWORD *)&applier[20] = size;
          _os_log_impl(&dword_1830D4000, v48, v54, "%{public}s type=%u length=%u but value is NULL, no backtrace", applier, 0x18u);
        }
      }
      else
      {
        char v48 = __nwlog_obj();
        os_log_type_t v56 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = 2;
          *(_WORD *)&applier[18] = 1024;
          *(_DWORD *)&applier[20] = size;
          _os_log_impl(&dword_1830D4000, v48, v56, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", applier, 0x18u);
        }
      }
    }
LABEL_110:
    if (v47) {
      free(v47);
    }
    unint64_t v16 = 0;
    a1 = v45;
    goto LABEL_35;
  }
LABEL_19:
  unint64_t v16 = v8 + v11;
LABEL_35:
  *(void *)(*(void *)(a1[4] + 8) + 24) = v16;
LABEL_36:
  if (v6) {
    free(v6);
  }

  return 1;
}

void sub_183BCAB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NWPBPathReadFrom(uint64_t a1, uint64_t a2)
{
  size_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  unint64_t v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 >= v7) {
    return *(unsigned char *)(a2 + *v8) == 0;
  }
  unint64_t v10 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    unint64_t v11 = (unsigned char *)(a2 + *v8);
    if (*v11) {
      return *(unsigned char *)(a2 + *v8) == 0;
    }
    if (v5 >= v7)
    {
      unint64_t v13 = 0;
LABEL_39:
      unsigned char *v11 = 1;
LABEL_40:
      int v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(unsigned char *)(a2 + *v8)) {
        unint64_t v13 = 0;
      }
      goto LABEL_42;
    }
    char v12 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
    *(void *)(a2 + (int)v4) = v5 + 1;
    unint64_t v13 = v12 & 0x7F;
    if ((v12 & 0x80) == 0) {
      goto LABEL_40;
    }
    uint64_t v14 = *v3;
    unint64_t v15 = *(void *)(a2 + v14);
    if (v15 == -1 || v15 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v16 = v15 + 1;
    int v17 = *(char *)(*(void *)(a2 + *v10) + v15);
    *(void *)(a2 + v14) = v16;
    v13 |= (unint64_t)(v17 & 0x7F) << 7;
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v18 = *v3;
    unint64_t v19 = *(void *)(a2 + v18);
    if (v19 == -1 || v19 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v20 = v19 + 1;
    int v21 = *(char *)(*(void *)(a2 + *v10) + v19);
    *(void *)(a2 + v18) = v20;
    v13 |= (unint64_t)(v21 & 0x7F) << 14;
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v22 = *v3;
    unint64_t v23 = *(void *)(a2 + v22);
    if (v23 == -1 || v23 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v24 = v23 + 1;
    int v25 = *(char *)(*(void *)(a2 + *v10) + v23);
    *(void *)(a2 + v22) = v24;
    v13 |= (unint64_t)(v25 & 0x7F) << 21;
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v26 = *v3;
    unint64_t v27 = *(void *)(a2 + v26);
    if (v27 == -1 || v27 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v28 = v27 + 1;
    int v29 = *(char *)(*(void *)(a2 + *v10) + v27);
    *(void *)(a2 + v26) = v28;
    v13 |= (unint64_t)(v29 & 0x7F) << 28;
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v30 = *v3;
    unint64_t v31 = *(void *)(a2 + v30);
    if (v31 == -1 || v31 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v32 = v31 + 1;
    int v33 = *(char *)(*(void *)(a2 + *v10) + v31);
    *(void *)(a2 + v30) = v32;
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v34 = *v3;
    unint64_t v35 = *(void *)(a2 + v34);
    if (v35 == -1 || v35 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v36 = v35 + 1;
    int v37 = *(char *)(*(void *)(a2 + *v10) + v35);
    *(void *)(a2 + v34) = v36;
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v38 = *v3;
    unint64_t v39 = *(void *)(a2 + v38);
    if (v39 == -1 || v39 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v40 = v39 + 1;
    int v41 = *(char *)(*(void *)(a2 + *v10) + v39);
    *(void *)(a2 + v38) = v40;
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v42 = *v3;
    unint64_t v43 = *(void *)(a2 + v42);
    if (v43 == -1 || v43 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v44 = v43 + 1;
    int v45 = *(char *)(*(void *)(a2 + *v10) + v43);
    *(void *)(a2 + v42) = v44;
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v46 = *v3;
    unint64_t v47 = *(void *)(a2 + v46);
    if (v47 == -1 || v47 >= *(void *)(a2 + *v6))
    {
LABEL_38:
      unint64_t v11 = (unsigned char *)(a2 + *v8);
      goto LABEL_39;
    }
    unint64_t v48 = v47 + 1;
    int v49 = *(char *)(*(void *)(a2 + *v10) + v47);
    *(void *)(a2 + v46) = v48;
    if ((v49 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    unint64_t v13 = 0;
    int v50 = *(unsigned __int8 *)(a2 + *v8);
LABEL_42:
    if (v50) {
      BOOL v51 = 1;
    }
    else {
      BOOL v51 = (v13 & 7) == 4;
    }
    if (v51) {
      return *(unsigned char *)(a2 + *v8) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        os_log_type_t v52 = objc_alloc_init(NWPBEndpoint);
        objc_storeStrong((id *)(a1 + 40), v52);
        uint64_t v262 = 0;
        uint64_t v263 = 0;
        if (PBReaderPlaceMark() && NWPBEndpointReadFrom((uint64_t)v52, a2)) {
          goto LABEL_3;
        }
        goto LABEL_271;
      case 2u:
        os_log_type_t v52 = objc_alloc_init(NWPBParameters);
        objc_storeStrong((id *)(a1 + 48), v52);
        uint64_t v262 = 0;
        uint64_t v263 = 0;
        if (!PBReaderPlaceMark() || (NWPBParametersReadFrom((uint64_t)v52, a2) & 1) == 0) {
          goto LABEL_271;
        }
        goto LABEL_3;
      case 3u:
        uint64_t v75 = PBReaderReadString();
        v76 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v75;

        goto LABEL_4;
      case 4u:
        *(unsigned char *)(a1 + 64) |= 1u;
        uint64_t v77 = *v3;
        unint64_t v78 = *(void *)(a2 + v77);
        if (v78 == -1 || v78 >= *(void *)(a2 + *v6))
        {
          unsigned int v81 = 0;
LABEL_154:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_155;
        }
        unint64_t v79 = v78 + 1;
        char v80 = *(unsigned char *)(*(void *)(a2 + *v10) + v78);
        *(void *)(a2 + v77) = v79;
        unsigned int v81 = v80 & 0x7F;
        if ((v80 & 0x80) == 0) {
          goto LABEL_155;
        }
        uint64_t v82 = *v3;
        unint64_t v83 = *(void *)(a2 + v82);
        if (v83 == -1 || v83 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        int v84 = *(char *)(*(void *)(a2 + *v10) + v83);
        *(void *)(a2 + v82) = v83 + 1;
        unsigned int v81 = v81 & 0xFFFFC07F | ((v84 & 0x7F) << 7);
        if ((v84 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v85 = *v3;
        unint64_t v86 = *(void *)(a2 + v85);
        if (v86 == -1 || v86 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        int v87 = *(char *)(*(void *)(a2 + *v10) + v86);
        *(void *)(a2 + v85) = v86 + 1;
        unsigned int v81 = v81 & 0xFFE03FFF | ((v87 & 0x7F) << 14);
        if ((v87 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v88 = *v3;
        unint64_t v89 = *(void *)(a2 + v88);
        if (v89 == -1 || v89 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        int v90 = *(char *)(*(void *)(a2 + *v10) + v89);
        *(void *)(a2 + v88) = v89 + 1;
        unsigned int v81 = v81 & 0xF01FFFFF | ((v90 & 0x7F) << 21);
        if ((v90 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v91 = *v3;
        unint64_t v92 = *(void *)(a2 + v91);
        if (v92 == -1 || v92 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        unint64_t v93 = v92 + 1;
        int v94 = *(char *)(*(void *)(a2 + *v10) + v92);
        *(void *)(a2 + v91) = v93;
        v81 |= v94 << 28;
        if ((v94 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v166 = *v3;
        unint64_t v167 = *(void *)(a2 + v166);
        if (v167 == -1 || v167 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        unint64_t v168 = v167 + 1;
        int v169 = *(char *)(*(void *)(a2 + *v10) + v167);
        *(void *)(a2 + v166) = v168;
        if (v169 < 0)
        {
          uint64_t v170 = *v3;
          unint64_t v171 = *(void *)(a2 + v170);
          if (v171 == -1 || v171 >= *(void *)(a2 + *v6)) {
            goto LABEL_154;
          }
          unint64_t v172 = v171 + 1;
          int v173 = *(char *)(*(void *)(a2 + *v10) + v171);
          *(void *)(a2 + v170) = v172;
          if (v173 < 0)
          {
            uint64_t v174 = *v3;
            unint64_t v175 = *(void *)(a2 + v174);
            if (v175 == -1 || v175 >= *(void *)(a2 + *v6)) {
              goto LABEL_154;
            }
            unint64_t v176 = v175 + 1;
            int v177 = *(char *)(*(void *)(a2 + *v10) + v175);
            *(void *)(a2 + v174) = v176;
            if (v177 < 0)
            {
              uint64_t v178 = *v3;
              unint64_t v179 = *(void *)(a2 + v178);
              if (v179 == -1 || v179 >= *(void *)(a2 + *v6)) {
                goto LABEL_154;
              }
              unint64_t v180 = v179 + 1;
              int v181 = *(char *)(*(void *)(a2 + *v10) + v179);
              *(void *)(a2 + v178) = v180;
              if (v181 < 0)
              {
                uint64_t v182 = *v3;
                unint64_t v183 = *(void *)(a2 + v182);
                if (v183 == -1 || v183 >= *(void *)(a2 + *v6)) {
                  goto LABEL_154;
                }
                unint64_t v184 = v183 + 1;
                int v185 = *(char *)(*(void *)(a2 + *v10) + v183);
                *(void *)(a2 + v182) = v184;
                if (v185 < 0)
                {
                  unsigned int v81 = 0;
                  goto LABEL_157;
                }
              }
            }
          }
        }
LABEL_155:
        if (*(unsigned char *)(a2 + *v8)) {
          unsigned int v81 = 0;
        }
LABEL_157:
        *(_DWORD *)(a1 + 56) = v81;
        goto LABEL_4;
      case 5u:
        os_log_type_t v52 = objc_alloc_init(NWPBInterface);
        uint64_t v53 = 32;
        goto LABEL_104;
      case 6u:
        os_log_type_t v52 = objc_alloc_init(NWPBInterface);
        uint64_t v53 = 24;
LABEL_104:
        objc_storeStrong((id *)(a1 + v53), v52);
        uint64_t v262 = 0;
        uint64_t v263 = 0;
        if (!PBReaderPlaceMark() || (NWPBInterfaceReadFrom((uint64_t)v52, a2) & 1) == 0) {
          goto LABEL_271;
        }
        goto LABEL_3;
      case 7u:
        os_log_type_t v52 = objc_alloc_init(NWPBAgent);
        if (a1)
        {
          v116 = *(void **)(a1 + 8);
          if (!v116)
          {
            id v117 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            v118 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v117;

            v116 = *(void **)(a1 + 8);
          }
          objc_msgSend(v116, "addObject:", v52, v262, v263);
        }

        uint64_t v262 = 0;
        uint64_t v263 = 0;
        if PBReaderPlaceMark() && (NWPBAgentReadFrom((uint64_t)v52, a2))
        {
LABEL_3:
          PBReaderRecallMark();

LABEL_4:
          uint64_t v4 = *v3;
          unint64_t v5 = *(void *)(a2 + v4);
          unint64_t v7 = *(void *)(a2 + *v6);
          if (v5 >= v7) {
            return *(unsigned char *)(a2 + *v8) == 0;
          }
          continue;
        }
LABEL_271:

        return 0;
      case 8u:
        *(unsigned char *)(a1 + 64) |= 4u;
        uint64_t v95 = *v3;
        unint64_t v96 = *(void *)(a2 + v95);
        if (v96 == -1 || v96 >= *(void *)(a2 + *v6))
        {
          uint64_t v99 = 0;
LABEL_159:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_160;
        }
        unint64_t v97 = v96 + 1;
        char v98 = *(unsigned char *)(*(void *)(a2 + *v10) + v96);
        *(void *)(a2 + v95) = v97;
        uint64_t v99 = v98 & 0x7F;
        if ((v98 & 0x80) == 0) {
          goto LABEL_160;
        }
        uint64_t v100 = *v3;
        unint64_t v101 = *(void *)(a2 + v100);
        if (v101 == -1 || v101 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        unint64_t v102 = v101 + 1;
        int v103 = *(char *)(*(void *)(a2 + *v10) + v101);
        *(void *)(a2 + v100) = v102;
        v99 |= (unint64_t)(v103 & 0x7F) << 7;
        if ((v103 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        uint64_t v104 = *v3;
        unint64_t v105 = *(void *)(a2 + v104);
        if (v105 == -1 || v105 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        unint64_t v106 = v105 + 1;
        int v107 = *(char *)(*(void *)(a2 + *v10) + v105);
        *(void *)(a2 + v104) = v106;
        v99 |= (unint64_t)(v107 & 0x7F) << 14;
        if ((v107 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        uint64_t v108 = *v3;
        unint64_t v109 = *(void *)(a2 + v108);
        if (v109 == -1 || v109 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        unint64_t v110 = v109 + 1;
        int v111 = *(char *)(*(void *)(a2 + *v10) + v109);
        *(void *)(a2 + v108) = v110;
        v99 |= (unint64_t)(v111 & 0x7F) << 21;
        if ((v111 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        uint64_t v112 = *v3;
        unint64_t v113 = *(void *)(a2 + v112);
        if (v113 == -1 || v113 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        unint64_t v114 = v113 + 1;
        int v115 = *(char *)(*(void *)(a2 + *v10) + v113);
        *(void *)(a2 + v112) = v114;
        v99 |= (unint64_t)(v115 & 0x7F) << 28;
        if ((v115 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        uint64_t v186 = *v3;
        unint64_t v187 = *(void *)(a2 + v186);
        if (v187 == -1 || v187 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        unint64_t v188 = v187 + 1;
        int v189 = *(char *)(*(void *)(a2 + *v10) + v187);
        *(void *)(a2 + v186) = v188;
        v99 |= (unint64_t)(v189 & 0x7F) << 35;
        if (v189 < 0)
        {
          uint64_t v214 = *v3;
          unint64_t v215 = *(void *)(a2 + v214);
          if (v215 == -1 || v215 >= *(void *)(a2 + *v6)) {
            goto LABEL_159;
          }
          unint64_t v216 = v215 + 1;
          int v217 = *(char *)(*(void *)(a2 + *v10) + v215);
          *(void *)(a2 + v214) = v216;
          v99 |= (unint64_t)(v217 & 0x7F) << 42;
          if (v217 < 0)
          {
            uint64_t v218 = *v3;
            unint64_t v219 = *(void *)(a2 + v218);
            if (v219 == -1 || v219 >= *(void *)(a2 + *v6)) {
              goto LABEL_159;
            }
            unint64_t v220 = v219 + 1;
            int v221 = *(char *)(*(void *)(a2 + *v10) + v219);
            *(void *)(a2 + v218) = v220;
            v99 |= (unint64_t)(v221 & 0x7F) << 49;
            if (v221 < 0)
            {
              uint64_t v222 = *v3;
              unint64_t v223 = *(void *)(a2 + v222);
              if (v223 == -1 || v223 >= *(void *)(a2 + *v6)) {
                goto LABEL_159;
              }
              unint64_t v224 = v223 + 1;
              int v225 = *(char *)(*(void *)(a2 + *v10) + v223);
              *(void *)(a2 + v222) = v224;
              v99 |= (unint64_t)(v225 & 0x7F) << 56;
              if (v225 < 0)
              {
                uint64_t v226 = *v3;
                unint64_t v227 = *(void *)(a2 + v226);
                if (v227 == -1 || v227 >= *(void *)(a2 + *v6)) {
                  goto LABEL_159;
                }
                unint64_t v228 = v227 + 1;
                uint64_t v229 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v227);
                *(void *)(a2 + v226) = v228;
                if ((v229 & 0x80) != 0)
                {
                  uint64_t v99 = 0;
                  goto LABEL_162;
                }
                v99 |= v229 << 63;
              }
            }
          }
        }
LABEL_160:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v99 = 0;
        }
LABEL_162:
        *(unsigned char *)(a1 + 61) = v99 != 0;
        goto LABEL_4;
      case 9u:
        *(unsigned char *)(a1 + 64) |= 8u;
        uint64_t v119 = *v3;
        unint64_t v120 = *(void *)(a2 + v119);
        if (v120 == -1 || v120 >= *(void *)(a2 + *v6))
        {
          uint64_t v123 = 0;
LABEL_164:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_165;
        }
        unint64_t v121 = v120 + 1;
        char v122 = *(unsigned char *)(*(void *)(a2 + *v10) + v120);
        *(void *)(a2 + v119) = v121;
        uint64_t v123 = v122 & 0x7F;
        if ((v122 & 0x80) == 0) {
          goto LABEL_165;
        }
        uint64_t v124 = *v3;
        unint64_t v125 = *(void *)(a2 + v124);
        if (v125 == -1 || v125 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        unint64_t v126 = v125 + 1;
        int v127 = *(char *)(*(void *)(a2 + *v10) + v125);
        *(void *)(a2 + v124) = v126;
        v123 |= (unint64_t)(v127 & 0x7F) << 7;
        if ((v127 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        uint64_t v128 = *v3;
        unint64_t v129 = *(void *)(a2 + v128);
        if (v129 == -1 || v129 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        unint64_t v130 = v129 + 1;
        int v131 = *(char *)(*(void *)(a2 + *v10) + v129);
        *(void *)(a2 + v128) = v130;
        v123 |= (unint64_t)(v131 & 0x7F) << 14;
        if ((v131 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        uint64_t v132 = *v3;
        unint64_t v133 = *(void *)(a2 + v132);
        if (v133 == -1 || v133 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        unint64_t v134 = v133 + 1;
        int v135 = *(char *)(*(void *)(a2 + *v10) + v133);
        *(void *)(a2 + v132) = v134;
        v123 |= (unint64_t)(v135 & 0x7F) << 21;
        if ((v135 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        uint64_t v136 = *v3;
        unint64_t v137 = *(void *)(a2 + v136);
        if (v137 == -1 || v137 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        unint64_t v138 = v137 + 1;
        int v139 = *(char *)(*(void *)(a2 + *v10) + v137);
        *(void *)(a2 + v136) = v138;
        v123 |= (unint64_t)(v139 & 0x7F) << 28;
        if ((v139 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        uint64_t v190 = *v3;
        unint64_t v191 = *(void *)(a2 + v190);
        if (v191 == -1 || v191 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        unint64_t v192 = v191 + 1;
        int v193 = *(char *)(*(void *)(a2 + *v10) + v191);
        *(void *)(a2 + v190) = v192;
        v123 |= (unint64_t)(v193 & 0x7F) << 35;
        if (v193 < 0)
        {
          uint64_t v230 = *v3;
          unint64_t v231 = *(void *)(a2 + v230);
          if (v231 == -1 || v231 >= *(void *)(a2 + *v6)) {
            goto LABEL_164;
          }
          unint64_t v232 = v231 + 1;
          int v233 = *(char *)(*(void *)(a2 + *v10) + v231);
          *(void *)(a2 + v230) = v232;
          v123 |= (unint64_t)(v233 & 0x7F) << 42;
          if (v233 < 0)
          {
            uint64_t v234 = *v3;
            unint64_t v235 = *(void *)(a2 + v234);
            if (v235 == -1 || v235 >= *(void *)(a2 + *v6)) {
              goto LABEL_164;
            }
            unint64_t v236 = v235 + 1;
            int v237 = *(char *)(*(void *)(a2 + *v10) + v235);
            *(void *)(a2 + v234) = v236;
            v123 |= (unint64_t)(v237 & 0x7F) << 49;
            if (v237 < 0)
            {
              uint64_t v238 = *v3;
              unint64_t v239 = *(void *)(a2 + v238);
              if (v239 == -1 || v239 >= *(void *)(a2 + *v6)) {
                goto LABEL_164;
              }
              unint64_t v240 = v239 + 1;
              int v241 = *(char *)(*(void *)(a2 + *v10) + v239);
              *(void *)(a2 + v238) = v240;
              v123 |= (unint64_t)(v241 & 0x7F) << 56;
              if (v241 < 0)
              {
                uint64_t v242 = *v3;
                unint64_t v243 = *(void *)(a2 + v242);
                if (v243 == -1 || v243 >= *(void *)(a2 + *v6)) {
                  goto LABEL_164;
                }
                unint64_t v244 = v243 + 1;
                uint64_t v245 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v243);
                *(void *)(a2 + v242) = v244;
                if ((v245 & 0x80) != 0)
                {
                  uint64_t v123 = 0;
                  goto LABEL_167;
                }
                v123 |= v245 << 63;
              }
            }
          }
        }
LABEL_165:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v123 = 0;
        }
LABEL_167:
        *(unsigned char *)(a1 + 62) = v123 != 0;
        goto LABEL_4;
      case 0xAu:
        *(unsigned char *)(a1 + 64) |= 0x10u;
        uint64_t v54 = *v3;
        unint64_t v55 = *(void *)(a2 + v54);
        if (v55 == -1 || v55 >= *(void *)(a2 + *v6))
        {
          uint64_t v58 = 0;
LABEL_149:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_150;
        }
        unint64_t v56 = v55 + 1;
        char v57 = *(unsigned char *)(*(void *)(a2 + *v10) + v55);
        *(void *)(a2 + v54) = v56;
        uint64_t v58 = v57 & 0x7F;
        if ((v57 & 0x80) == 0) {
          goto LABEL_150;
        }
        uint64_t v59 = *v3;
        unint64_t v60 = *(void *)(a2 + v59);
        if (v60 == -1 || v60 >= *(void *)(a2 + *v6)) {
          goto LABEL_149;
        }
        unint64_t v61 = v60 + 1;
        int v62 = *(char *)(*(void *)(a2 + *v10) + v60);
        *(void *)(a2 + v59) = v61;
        v58 |= (unint64_t)(v62 & 0x7F) << 7;
        if ((v62 & 0x80000000) == 0) {
          goto LABEL_150;
        }
        uint64_t v63 = *v3;
        unint64_t v64 = *(void *)(a2 + v63);
        if (v64 == -1 || v64 >= *(void *)(a2 + *v6)) {
          goto LABEL_149;
        }
        unint64_t v65 = v64 + 1;
        int v66 = *(char *)(*(void *)(a2 + *v10) + v64);
        *(void *)(a2 + v63) = v65;
        v58 |= (unint64_t)(v66 & 0x7F) << 14;
        if ((v66 & 0x80000000) == 0) {
          goto LABEL_150;
        }
        uint64_t v67 = *v3;
        unint64_t v68 = *(void *)(a2 + v67);
        if (v68 == -1 || v68 >= *(void *)(a2 + *v6)) {
          goto LABEL_149;
        }
        unint64_t v69 = v68 + 1;
        int v70 = *(char *)(*(void *)(a2 + *v10) + v68);
        *(void *)(a2 + v67) = v69;
        v58 |= (unint64_t)(v70 & 0x7F) << 21;
        if ((v70 & 0x80000000) == 0) {
          goto LABEL_150;
        }
        uint64_t v71 = *v3;
        unint64_t v72 = *(void *)(a2 + v71);
        if (v72 == -1 || v72 >= *(void *)(a2 + *v6)) {
          goto LABEL_149;
        }
        unint64_t v73 = v72 + 1;
        int v74 = *(char *)(*(void *)(a2 + *v10) + v72);
        *(void *)(a2 + v71) = v73;
        v58 |= (unint64_t)(v74 & 0x7F) << 28;
        if ((v74 & 0x80000000) == 0) {
          goto LABEL_150;
        }
        uint64_t v162 = *v3;
        unint64_t v163 = *(void *)(a2 + v162);
        if (v163 == -1 || v163 >= *(void *)(a2 + *v6)) {
          goto LABEL_149;
        }
        unint64_t v164 = v163 + 1;
        int v165 = *(char *)(*(void *)(a2 + *v10) + v163);
        *(void *)(a2 + v162) = v164;
        v58 |= (unint64_t)(v165 & 0x7F) << 35;
        if (v165 < 0)
        {
          uint64_t v198 = *v3;
          unint64_t v199 = *(void *)(a2 + v198);
          if (v199 == -1 || v199 >= *(void *)(a2 + *v6)) {
            goto LABEL_149;
          }
          unint64_t v200 = v199 + 1;
          int v201 = *(char *)(*(void *)(a2 + *v10) + v199);
          *(void *)(a2 + v198) = v200;
          v58 |= (unint64_t)(v201 & 0x7F) << 42;
          if (v201 < 0)
          {
            uint64_t v202 = *v3;
            unint64_t v203 = *(void *)(a2 + v202);
            if (v203 == -1 || v203 >= *(void *)(a2 + *v6)) {
              goto LABEL_149;
            }
            unint64_t v204 = v203 + 1;
            int v205 = *(char *)(*(void *)(a2 + *v10) + v203);
            *(void *)(a2 + v202) = v204;
            v58 |= (unint64_t)(v205 & 0x7F) << 49;
            if (v205 < 0)
            {
              uint64_t v206 = *v3;
              unint64_t v207 = *(void *)(a2 + v206);
              if (v207 == -1 || v207 >= *(void *)(a2 + *v6)) {
                goto LABEL_149;
              }
              unint64_t v208 = v207 + 1;
              int v209 = *(char *)(*(void *)(a2 + *v10) + v207);
              *(void *)(a2 + v206) = v208;
              v58 |= (unint64_t)(v209 & 0x7F) << 56;
              if (v209 < 0)
              {
                uint64_t v210 = *v3;
                unint64_t v211 = *(void *)(a2 + v210);
                if (v211 == -1 || v211 >= *(void *)(a2 + *v6)) {
                  goto LABEL_149;
                }
                unint64_t v212 = v211 + 1;
                uint64_t v213 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v211);
                *(void *)(a2 + v210) = v212;
                if ((v213 & 0x80) != 0)
                {
                  uint64_t v58 = 0;
                  goto LABEL_152;
                }
                v58 |= v213 << 63;
              }
            }
          }
        }
LABEL_150:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v58 = 0;
        }
LABEL_152:
        *(unsigned char *)(a1 + 63) = v58 != 0;
        goto LABEL_4;
      case 0xBu:
        *(unsigned char *)(a1 + 64) |= 2u;
        uint64_t v140 = *v3;
        unint64_t v141 = *(void *)(a2 + v140);
        if (v141 == -1 || v141 >= *(void *)(a2 + *v6))
        {
          uint64_t v144 = 0;
LABEL_169:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_170;
        }
        unint64_t v142 = v141 + 1;
        char v143 = *(unsigned char *)(*(void *)(a2 + *v10) + v141);
        *(void *)(a2 + v140) = v142;
        uint64_t v144 = v143 & 0x7F;
        if ((v143 & 0x80) == 0) {
          goto LABEL_170;
        }
        uint64_t v145 = *v3;
        unint64_t v146 = *(void *)(a2 + v145);
        if (v146 == -1 || v146 >= *(void *)(a2 + *v6)) {
          goto LABEL_169;
        }
        unint64_t v147 = v146 + 1;
        int v148 = *(char *)(*(void *)(a2 + *v10) + v146);
        *(void *)(a2 + v145) = v147;
        v144 |= (unint64_t)(v148 & 0x7F) << 7;
        if ((v148 & 0x80000000) == 0) {
          goto LABEL_170;
        }
        uint64_t v149 = *v3;
        unint64_t v150 = *(void *)(a2 + v149);
        if (v150 == -1 || v150 >= *(void *)(a2 + *v6)) {
          goto LABEL_169;
        }
        unint64_t v151 = v150 + 1;
        int v152 = *(char *)(*(void *)(a2 + *v10) + v150);
        *(void *)(a2 + v149) = v151;
        v144 |= (unint64_t)(v152 & 0x7F) << 14;
        if ((v152 & 0x80000000) == 0) {
          goto LABEL_170;
        }
        uint64_t v153 = *v3;
        unint64_t v154 = *(void *)(a2 + v153);
        if (v154 == -1 || v154 >= *(void *)(a2 + *v6)) {
          goto LABEL_169;
        }
        unint64_t v155 = v154 + 1;
        int v156 = *(char *)(*(void *)(a2 + *v10) + v154);
        *(void *)(a2 + v153) = v155;
        v144 |= (unint64_t)(v156 & 0x7F) << 21;
        if ((v156 & 0x80000000) == 0) {
          goto LABEL_170;
        }
        uint64_t v157 = *v3;
        unint64_t v158 = *(void *)(a2 + v157);
        if (v158 == -1 || v158 >= *(void *)(a2 + *v6)) {
          goto LABEL_169;
        }
        unint64_t v159 = v158 + 1;
        int v160 = *(char *)(*(void *)(a2 + *v10) + v158);
        *(void *)(a2 + v157) = v159;
        v144 |= (unint64_t)(v160 & 0x7F) << 28;
        if ((v160 & 0x80000000) == 0) {
          goto LABEL_170;
        }
        uint64_t v194 = *v3;
        unint64_t v195 = *(void *)(a2 + v194);
        if (v195 == -1 || v195 >= *(void *)(a2 + *v6)) {
          goto LABEL_169;
        }
        unint64_t v196 = v195 + 1;
        int v197 = *(char *)(*(void *)(a2 + *v10) + v195);
        *(void *)(a2 + v194) = v196;
        v144 |= (unint64_t)(v197 & 0x7F) << 35;
        if (v197 < 0)
        {
          uint64_t v246 = *v3;
          unint64_t v247 = *(void *)(a2 + v246);
          if (v247 == -1 || v247 >= *(void *)(a2 + *v6)) {
            goto LABEL_169;
          }
          unint64_t v248 = v247 + 1;
          int v249 = *(char *)(*(void *)(a2 + *v10) + v247);
          *(void *)(a2 + v246) = v248;
          v144 |= (unint64_t)(v249 & 0x7F) << 42;
          if (v249 < 0)
          {
            uint64_t v250 = *v3;
            unint64_t v251 = *(void *)(a2 + v250);
            if (v251 == -1 || v251 >= *(void *)(a2 + *v6)) {
              goto LABEL_169;
            }
            unint64_t v252 = v251 + 1;
            int v253 = *(char *)(*(void *)(a2 + *v10) + v251);
            *(void *)(a2 + v250) = v252;
            v144 |= (unint64_t)(v253 & 0x7F) << 49;
            if (v253 < 0)
            {
              uint64_t v254 = *v3;
              unint64_t v255 = *(void *)(a2 + v254);
              if (v255 == -1 || v255 >= *(void *)(a2 + *v6)) {
                goto LABEL_169;
              }
              unint64_t v256 = v255 + 1;
              int v257 = *(char *)(*(void *)(a2 + *v10) + v255);
              *(void *)(a2 + v254) = v256;
              v144 |= (unint64_t)(v257 & 0x7F) << 56;
              if (v257 < 0)
              {
                uint64_t v258 = *v3;
                unint64_t v259 = *(void *)(a2 + v258);
                if (v259 == -1 || v259 >= *(void *)(a2 + *v6)) {
                  goto LABEL_169;
                }
                unint64_t v260 = v259 + 1;
                uint64_t v261 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v259);
                *(void *)(a2 + v258) = v260;
                if ((v261 & 0x80) != 0)
                {
                  uint64_t v144 = 0;
                  goto LABEL_172;
                }
                v144 |= v261 << 63;
              }
            }
          }
        }
LABEL_170:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v144 = 0;
        }
LABEL_172:
        *(unsigned char *)(a1 + 60) = v144 != 0;
        goto LABEL_4;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_4;
    }
  }
}

BOOL nw_protocol_http_alt_svc_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v24 = "nw_protocol_http_alt_svc_create";
    char v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v24 = "nw_protocol_http_alt_svc_create";
          unint64_t v15 = "%{public}s called with null parameters";
LABEL_30:
          _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v24 = "nw_protocol_http_alt_svc_create";
            __int16 v25 = 2082;
            uint64_t v26 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_31;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v24 = "nw_protocol_http_alt_svc_create";
          unint64_t v15 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v24 = "nw_protocol_http_alt_svc_create";
          unint64_t v15 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_30;
        }
      }
    }
LABEL_31:
    if (v12) {
      free(v12);
    }
    return 0;
  }
  unint64_t v5 = malloc_type_calloc(1uLL, 0x100uLL, 0xEAFB8F1AuLL);
  if (v5) {
    goto LABEL_3;
  }
  unint64_t v16 = __nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  unint64_t v24 = "strict_calloc";
  __int16 v25 = 2048;
  uint64_t v26 = 1;
  __int16 v27 = 2048;
  uint64_t v28 = 256;
  int v17 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
LABEL_3:
    v5[14] = 0u;
    v5[15] = 0u;
    v5[12] = 0u;
    v5[13] = 0u;
    v5[10] = 0u;
    v5[11] = 0u;
    v5[8] = 0u;
    v5[9] = 0u;
    v5[6] = 0u;
    v5[7] = 0u;
    v5[4] = 0u;
    v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *unint64_t v5 = 0u;
    v5[1] = 0u;
    if (gLogDatapath)
    {
      uint64_t v18 = __nwlog_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        unint64_t v24 = "nw_protocol_http_alt_svc_create";
        __int16 v25 = 2082;
        uint64_t v26 = (uint64_t)v5 + 114;
        __int16 v27 = 2080;
        uint64_t v28 = (uint64_t)" ";
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    if (nw_protocol_http_alt_svc_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_71796);
    }
    *((void *)v5 + 2) = nw_protocol_http_alt_svc_identifier::protocol_identifier;
    if (nw_protocol_http_alt_svc_get_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http_alt_svc_get_callbacks(void)::onceToken, &__block_literal_global_16_71797);
    }
    *((void *)v5 + 3) = &nw_protocol_http_alt_svc_get_callbacks(void)::protocol_callbacks;
    *((void *)v5 + 5) = v5;
    BOOL v6 = a4;
    uint64_t v7 = v6[12];

    *((unsigned char *)v5 + 248) = *((unsigned char *)v5 + 248) & 0xFE | ((v7 & 0x8000) != 0);
    unint64_t v8 = os_retain(v6);
    char v9 = *((unsigned char *)v5 + 224);
    if (v9)
    {
      unint64_t v10 = (void *)*((void *)v5 + 27);
      if (v10)
      {
        os_release(v10);
        char v9 = *((unsigned char *)v5 + 224);
      }
    }
    *((void *)v5 + 27) = v8;
    *((unsigned char *)v5 + 224) = v9 | 1;
    *((void *)v5 + 8) = (char *)v5 + 104;
    nw_protocol_plugin_name_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_alt_svc_create::$_0::__invoke);
    return (BOOL)v5;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_http_alt_svc_create::$_0::__invoke(nw_protocol_http_alt_svc_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

void ___ZL38nw_protocol_http_alt_svc_get_callbacksv_block_invoke()
{
  nw_protocol_http_alt_svc_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F6A6F0 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F6A738 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F6A740 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F6A750 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F6A758 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F6A760 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F6A7A8 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F6A7B0 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F6A708 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F6A700 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F6A710 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F6A720 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F6A728 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F6A798 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F6A7A0 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F6A7E8 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F6A718 = (uint64_t)nw_protocol_common_error;
  qword_1E8F6A7E0 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F6A7D8 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F6A790 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F6A7B8 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F6A770 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F6A778 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F6A780 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F6A788 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F6A748 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F6A6F8 = (uint64_t)nw_protocol_http_alt_svc_connect;
  qword_1E8F6A768 = (uint64_t)nw_protocol_http_alt_svc_get_remote_endpoint;
  qword_1E8F6A6E8 = (uint64_t)nw_protocol_http_alt_svc_remove_input_handler;
  qword_1E8F6A730 = (uint64_t)nw_protocol_http_alt_svc_get_input_frames;
  qword_1E8F6A7C0 = (uint64_t)nw_protocol_http_alt_svc_copy_info;
}

uint64_t nw_protocol_http_alt_svc_copy_info(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
      unint64_t v8 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
          __int16 v20 = 2082;
          char v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_54:
        if (!v5) {
          return 0;
        }
LABEL_55:
        free(v5);
        return 0;
      }
      if (!v10) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
      unint64_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
      unint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_53;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16)) {
      goto LABEL_54;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        BOOL v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
        unint64_t v8 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_53;
      }
      unint64_t v11 = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
        unint64_t v8 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_53;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
        __int16 v20 = 2082;
        char v21 = v11;
        unint64_t v13 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v6, v7, v13, buf, 0x16u);
      }
LABEL_37:
      free(v11);
      if (!v5) {
        return 0;
      }
      goto LABEL_55;
    }
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_54;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
    unint64_t v8 = "%{public}s called with null http_alt_svc";
LABEL_53:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_54;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
      unint64_t v8 = "%{public}s called with null type";
      goto LABEL_53;
    }
    if (!v16)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
      unint64_t v8 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_53;
    }
    unint64_t v11 = (char *)__nw_create_backtrace_string();
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v14 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v14) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
      unint64_t v8 = "%{public}s called with null type, no backtrace";
      goto LABEL_53;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
      __int16 v20 = 2082;
      char v21 = v11;
      unint64_t v13 = "%{public}s called with null type, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3)
  {
    if ((*(unsigned char *)(v2 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v15 = __nwlog_obj();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          unint64_t v19 = "nw_protocol_http_alt_svc_copy_info";
          __int16 v20 = 2082;
          char v21 = (char *)(v2 + 114);
          __int16 v22 = 2080;
          unint64_t v23 = " ";
          _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scopy_info requires an output handler", buf, 0x20u);
        }
      }
    }
    return 0;
  }

  return nw_protocol_common_copy_info(v3, a2);
}

uint64_t nw_protocol_http_alt_svc_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v10, &type, &v21)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null protocol";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
          __int16 v25 = 2082;
          uint64_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_62:
        if (!v10) {
          return 0;
        }
LABEL_63:
        free(v10);
        return 0;
      }
      if (!v15) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_61;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v10, &type, &v21)) {
      goto LABEL_62;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        unint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_62;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
        unint64_t v13 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_61;
      }
      char v16 = (char *)__nw_create_backtrace_string();
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!v16)
      {
        if (!v17) {
          goto LABEL_62;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
        unint64_t v13 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_61;
      }
      if (!v17) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      uint64_t v18 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    unint64_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
    unint64_t v13 = "%{public}s called with null http_alt_svc";
LABEL_61:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_62;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v10, &type, &v21)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null input_protocol";
      goto LABEL_61;
    }
    if (!v21)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_61;
    }
    char v16 = (char *)__nw_create_backtrace_string();
    unint64_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v19) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_61;
    }
    if (!v19) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
    __int16 v25 = 2082;
    uint64_t v26 = v16;
    uint64_t v18 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_42:
    _os_log_impl(&dword_1830D4000, v11, v12, v18, buf, 0x16u);
    goto LABEL_43;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v10, &type, &v21)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null return_array";
      goto LABEL_61;
    }
    if (!v21)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_61;
    }
    char v16 = (char *)__nw_create_backtrace_string();
    unint64_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v20 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v20) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      unint64_t v13 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_61;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = "nw_protocol_http_alt_svc_get_input_frames";
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      uint64_t v18 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
LABEL_43:
    free(v16);
    if (!v10) {
      return 0;
    }
    goto LABEL_63;
  }
  uint64_t v8 = handle[4];
  if (!v8) {
    return 0;
  }

  return nw_protocol_get_input_frames(v8, (uint64_t)handle, a3, a4, a5, (uint64_t)a6);
}

uint64_t nw_protocol_http_alt_svc_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
      unint64_t v11 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      goto LABEL_49;
    }
    if (!v20)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        unint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v14 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        unint64_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v14) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    __int16 v24 = 2082;
    __int16 v25 = backtrace_string;
    BOOL v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v9, v10, v15, buf, 0x16u);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
      unint64_t v11 = "%{public}s called with null http_alt_svc";
      goto LABEL_48;
    }
    if (!v20)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        unint64_t v11 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        unint64_t v11 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v16) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    __int16 v24 = 2082;
    __int16 v25 = backtrace_string;
    BOOL v15 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
  if (a2)
  {
    if ((handle[198] & 1) == 0 && gLogDatapath)
    {
      os_log_type_t v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        __int16 v24 = 2082;
        __int16 v25 = handle + 114;
        __int16 v26 = 2080;
        uint64_t v27 = " ";
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_22_71853;
    char v19 = a3;
    v18[4] = a1;
    v18[5] = handle;
    return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)&__block_literal_global_21_71854, (uint64_t)v18);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v8, &type, &v20)) {
    goto LABEL_49;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        unint64_t v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        unint64_t v11 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
      __int16 v24 = 2082;
      __int16 v25 = backtrace_string;
      BOOL v15 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
LABEL_35:
    free(backtrace_string);
    goto LABEL_49;
  }
  char v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    unint64_t v11 = "%{public}s called with null input_protocol";
    goto LABEL_48;
  }
LABEL_49:
  if (v8) {
    free(v8);
  }
  return 0;
}

void ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    *(void *)(*(void *)(a1 + 32) + 40) = 0;
    uint64_t v1 = *(void *)(a1 + 40);
    if ((*(unsigned char *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v5 = __nwlog_obj();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          int v6 = 136446722;
          os_log_type_t v7 = "nw_http_alt_svc_destroy";
          __int16 v8 = 2082;
          uint64_t v9 = v1 + 114;
          __int16 v10 = 2080;
          unint64_t v11 = " ";
          _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v6, 0x20u);
        }
      }
    }
    if (*(unsigned char *)(v1 + 240))
    {
      uint64_t v2 = *(void **)(v1 + 232);
      if (v2) {
        os_release(v2);
      }
    }
    *(void *)(v1 + 232) = 0;
    if (*(unsigned char *)(v1 + 224))
    {
      uint64_t v3 = *(void **)(v1 + 216);
      if (v3) {
        os_release(v3);
      }
    }
    *(void *)(v1 + 216) = 0;
    if (*(unsigned char *)(v1 + 208))
    {
      uint64_t v4 = *(void **)(v1 + 200);
      if (v4) {
        os_release(v4);
      }
    }
    free((void *)v1);
  }
}

uint64_t nw_protocol_http_alt_svc_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      __int16 v8 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v13)
      {
        int v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
        __int16 v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v5) {
          return 0;
        }
        goto LABEL_37;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      __int16 v8 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      __int16 v8 = "%{public}s called with null http_alt_svc";
      goto LABEL_35;
    }
    if (!v13)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      __int16 v8 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
      goto LABEL_35;
    }
    unint64_t v11 = (char *)__nw_create_backtrace_string();
    int v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v12) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      __int16 v8 = "%{public}s called with null http_alt_svc, no backtrace";
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v16 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      __int16 v17 = 2082;
      uint64_t v18 = v11;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v11);
LABEL_36:
    if (!v5) {
      return 0;
    }
LABEL_37:
    free(v5);
    return 0;
  }
  uint64_t v2 = handle[25];
  if (v2) {
    return v2;
  }
  default_input_handler = a1->default_input_handler;

  return nw_protocol_get_remote_endpoint((uint64_t)default_input_handler);
}

uint64_t nw_protocol_http_alt_svc_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    unint64_t v39 = (char *)_os_log_send_and_compose_impl();
    v116[0] = 16;
    LOBYTE(v103) = 0;
    if (!__nwlog_fault(v39, v116, &v103)) {
      goto LABEL_156;
    }
    if (v116[0] == 17)
    {
      unint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = v116[0];
      if (!os_log_type_enabled(v40, (os_log_type_t)v116[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
      uint64_t v42 = "%{public}s called with null protocol";
LABEL_155:
      _os_log_impl(&dword_1830D4000, v40, v41, v42, buf, 0xCu);
      goto LABEL_156;
    }
    if (!(_BYTE)v103)
    {
      unint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = v116[0];
      if (os_log_type_enabled(v40, (os_log_type_t)v116[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        uint64_t v42 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v40 = __nwlog_obj();
    os_log_type_t v41 = v116[0];
    BOOL v60 = os_log_type_enabled(v40, (os_log_type_t)v116[0]);
    if (!backtrace_string)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        uint64_t v42 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    if (!v60) {
      goto LABEL_104;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    unint64_t v61 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_103:
    _os_log_impl(&dword_1830D4000, v40, v41, v61, buf, 0x16u);
    goto LABEL_104;
  }
  if (!a1->handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    unint64_t v39 = (char *)_os_log_send_and_compose_impl();
    v116[0] = 16;
    LOBYTE(v103) = 0;
    if (!__nwlog_fault(v39, v116, &v103)) {
      goto LABEL_156;
    }
    if (v116[0] == 17)
    {
      unint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = v116[0];
      if (!os_log_type_enabled(v40, (os_log_type_t)v116[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
      uint64_t v42 = "%{public}s called with null http_alt_svc";
      goto LABEL_155;
    }
    if (!(_BYTE)v103)
    {
      unint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = v116[0];
      if (os_log_type_enabled(v40, (os_log_type_t)v116[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        uint64_t v42 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v40 = __nwlog_obj();
    os_log_type_t v41 = v116[0];
    BOOL v62 = os_log_type_enabled(v40, (os_log_type_t)v116[0]);
    if (!backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        uint64_t v42 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    if (!v62) {
      goto LABEL_104;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    unint64_t v61 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
    goto LABEL_103;
  }
  if (a2)
  {
    handle = a1->handle;
    uint64_t v103 = 0;
    uint64_t v104 = &v103;
    uint64_t v105 = 0x3802000000;
    unint64_t v106 = __Block_byref_object_copy__71883;
    int v107 = __Block_byref_object_dispose__71884;
    remote_endpoint = (void *)nw_protocol_get_remote_endpoint((uint64_t)a1->default_input_handler);
    uint64_t v108 = nw_endpoint_copy(remote_endpoint);
    v109 |= 1u;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)a1->default_input_handler);
    if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_20_74269);
    }
    id v5 = (id)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
    int v6 = nw_parameters_copy_protocol_options_for_definition(parameters, v5);
    if (v5) {
      os_release(v5);
    }
    if (v6)
    {
      object = v6;
      os_log_type_t v7 = nw_protocol_options_copy_definition(object);
      int v90 = a1;
      if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_20_74269);
      }
      BOOL is_equal = nw_protocol_definition_is_equal(v7, (nw_protocol_definition_t)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

      if (is_equal)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        unint64_t v113 = __Block_byref_object_copy__5_73857;
        unint64_t v114 = (uint8_t *)__Block_byref_object_dispose__6_73858;
        id v115 = 0;
        *(void *)v116 = MEMORY[0x1E4F143A8];
        *(void *)&v116[8] = 3221225472;
        *(void *)&v116[16] = __nw_http_alt_svc_options_copy_alt_svc_storage_block_invoke;
        *(void *)&v116[24] = &unk_1E5248E90;
        *(void *)&long long v117 = buf;
        nw_protocol_options_access_handle(object, v116);
        id v92 = *(id *)(*(void *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);

        goto LABEL_13;
      }
      unint64_t v47 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
      LODWORD(v88) = 12;
      int v87 = buf;
      unint64_t v48 = (char *)_os_log_send_and_compose_impl();

      v116[0] = 16;
      LOBYTE(v99) = 0;
      if (__nwlog_fault(v48, v116, &v99))
      {
        if (v116[0] == 17)
        {
          int v49 = __nwlog_obj();
          os_log_type_t v50 = v116[0];
          if (os_log_type_enabled(v49, (os_log_type_t)v116[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s protocol options are not http_alt_svc", buf, 0xCu);
          }
        }
        else if ((_BYTE)v99)
        {
          int v66 = (char *)__nw_create_backtrace_string();
          int v49 = __nwlog_obj();
          os_log_type_t v67 = v116[0];
          BOOL v68 = os_log_type_enabled(v49, (os_log_type_t)v116[0]);
          if (v66)
          {
            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v66;
              _os_log_impl(&dword_1830D4000, v49, v67, "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v66);
            goto LABEL_168;
          }
          if (v68)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl(&dword_1830D4000, v49, v67, "%{public}s protocol options are not http_alt_svc, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          int v49 = __nwlog_obj();
          os_log_type_t v80 = v116[0];
          if (os_log_type_enabled(v49, (os_log_type_t)v116[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl(&dword_1830D4000, v49, v80, "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_168:
      if (v48) {
        free(v48);
      }
      id v92 = 0;
LABEL_13:

      uint64_t v99 = 0;
      uint64_t v100 = &v99;
      uint64_t v101 = 0x2000000000;
      char v102 = 0;
      if (!v92)
      {
LABEL_25:
        uint64_t v23 = (uint64_t)handle;
        if ((handle[198] & 1) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v51 = __nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              int v52 = *((unsigned __int8 *)v100 + 24);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = handle + 114;
              *(_WORD *)&buf[22] = 2080;
              unint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
              LOWORD(v114) = 1024;
              *(_DWORD *)((char *)&v114 + 2) = v52;
              _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sfound alternative %{BOOL}d", buf, 0x26u);
            }
          }
        }
        if (*((unsigned char *)v100 + 24))
        {
LABEL_40:
          id v30 = nw_parameters_copy_context(*(void **)(v23 + 216));
          id v31 = nw_context_copy_registered_endpoint(v30, (void *)v104[5]);
          char v32 = *(unsigned char *)(v23 + 208);
          if (v32)
          {
            uint64_t v34 = *(void **)(v23 + 200);
            uint64_t v33 = (uint64_t)v90;
            if (v34)
            {
              os_release(v34);
              char v32 = *(unsigned char *)(v23 + 208);
            }
          }
          else
          {
            uint64_t v33 = (uint64_t)v90;
          }
          *(void *)(v23 + 200) = v31;
          *(unsigned char *)(v23 + 208) = v32 | 1;
          uint64_t v35 = *(void *)(v33 + 32);
          if (v35)
          {
            uint64_t v36 = nw_protocol_connect(v35, v33);
            int v37 = v92;
            if (!v30)
            {
LABEL_47:
              _Block_object_dispose(&v99, 8);
              if (v37) {
                os_release(v37);
              }
              os_release(object);
LABEL_50:
              _Block_object_dispose(&v103, 8);
              if ((v109 & 1) != 0 && v108) {
                os_release(v108);
              }
              return v36;
            }
          }
          else
          {
            if ((*(unsigned char *)(v23 + 198) & 1) == 0)
            {
              if (gLogDatapath)
              {
                unint64_t v73 = __nwlog_obj();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v23 + 114;
                  *(_WORD *)&buf[22] = 2080;
                  unint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sconnect bottom protocol, resuming child handler", buf, 0x20u);
                }
              }
            }
            buf[0] = 0;
            uint64_t v36 = 1;
            nw_protocol_notify(*(void **)(v23 + 48), v23, 23);
            int v37 = v92;
            if (!v30) {
              goto LABEL_47;
            }
          }
          os_release(v30);
          goto LABEL_47;
        }
        __int16 v24 = object;
        __int16 v25 = nw_protocol_options_copy_definition(v24);
        if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_20_74269);
        }
        BOOL v26 = nw_protocol_definition_is_equal(v25, (nw_protocol_definition_t)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

        if (v26)
        {
          *(void *)v116 = 0;
          *(void *)&v116[8] = v116;
          *(void *)&v116[16] = 0x2020000000;
          v116[24] = 0;
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __nw_http_alt_svc_options_get_assumes_http3_capable_block_invoke;
          unint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5248E90;
          unint64_t v114 = v116;
          nw_protocol_options_access_handle(v24, buf);
          BOOL v27 = *(unsigned char *)(*(void *)&v116[8] + 24) == 0;
          _Block_object_dispose(v116, 8);

          uint64_t v23 = (uint64_t)handle;
          if (!v27) {
            goto LABEL_40;
          }
          goto LABEL_32;
        }
        unint64_t v69 = __nwlog_obj();
        *(_DWORD *)v116 = 136446210;
        *(void *)&v116[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
        int v70 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v110 = 0;
        if (__nwlog_fault(v70, &type, &v110))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v71 = __nwlog_obj();
            os_log_type_t v72 = type;
            if (os_log_type_enabled(v71, type))
            {
              *(_DWORD *)v116 = 136446210;
              *(void *)&v116[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s protocol options are not http_alt_svc", v116, 0xCu);
            }
          }
          else if (v110)
          {
            unsigned int v81 = (char *)__nw_create_backtrace_string();
            uint64_t v71 = __nwlog_obj();
            os_log_type_t v82 = type;
            BOOL v83 = os_log_type_enabled(v71, type);
            if (v81)
            {
              if (v83)
              {
                *(_DWORD *)v116 = 136446466;
                *(void *)&v116[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
                *(_WORD *)&v116[12] = 2082;
                *(void *)&v116[14] = v81;
                _os_log_impl(&dword_1830D4000, v71, v82, "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s", v116, 0x16u);
              }

              free(v81);
              goto LABEL_191;
            }
            if (v83)
            {
              *(_DWORD *)v116 = 136446210;
              *(void *)&v116[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl(&dword_1830D4000, v71, v82, "%{public}s protocol options are not http_alt_svc, no backtrace", v116, 0xCu);
            }
          }
          else
          {
            uint64_t v71 = __nwlog_obj();
            os_log_type_t v86 = type;
            if (os_log_type_enabled(v71, type))
            {
              *(_DWORD *)v116 = 136446210;
              *(void *)&v116[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl(&dword_1830D4000, v71, v86, "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded", v116, 0xCu);
            }
          }
        }
LABEL_191:
        if (v70) {
          free(v70);
        }

        uint64_t v23 = (uint64_t)handle;
LABEL_32:
        if (nw_get_http3_override_onceToken != -1) {
          dispatch_once(&nw_get_http3_override_onceToken, &__block_literal_global_10_74195);
        }
        if (nw_get_http3_override_value != 1 && nw_get_http3_override_value != 2)
        {
          uint64_t v28 = (void *)v104[5];
          if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
          }
          id v29 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
          nw_endpoint_add_alternative(v28, &__block_literal_global_6268, v29);
          if (v29) {
            os_release(v29);
          }
        }
        goto LABEL_40;
      }
      hostname = nw_endpoint_get_hostname((nw_endpoint_t)v104[5]);
      unsigned int port = nw_endpoint_get_port((nw_endpoint_t)v104[5]);
      v94[0] = MEMORY[0x1E4F143A8];
      v94[1] = 0x40000000;
      uint64_t v95 = ___ZL32nw_protocol_http_alt_svc_connectP11nw_protocolS0__block_invoke;
      unint64_t v96 = &unk_1E5248660;
      unint64_t v97 = &v103;
      char v98 = &v99;
      unint64_t v89 = (id *)v92;
      unint64_t v11 = v94;
      if (hostname)
      {
        if (port)
        {
          id v12 = objc_alloc_init(MEMORY[0x1E4F18E38]);
          char v13 = [NSString stringWithUTF8String:hostname];
          [v12 setHost:v13];

          [v12 setPort:port];
          BOOL v14 = [v89[1] HTTPServiceEntriesWithFilter:v12];
          memset(v116, 0, sizeof(v116));
          long long v117 = 0u;
          long long v118 = 0u;
          uint64_t v15 = [v14 countByEnumeratingWithState:v116 objects:buf count:16];
          if (v15)
          {
            uint64_t v16 = v15;
            uint64_t v17 = **(void **)&v116[16];
            do
            {
              for (uint64_t i = 0; i != v16; ++i)
              {
                if (**(void **)&v116[16] != v17) {
                  objc_enumerationMutation(v14);
                }
                uint64_t v19 = *(void **)(*(void *)&v116[8] + 8 * i);
                char v20 = objc_msgSend(v19, "alternateHost", v87, v88);
                uint64_t v21 = [v20 UTF8String];
                unsigned __int16 v22 = [v19 alternatePort];
                v95((uint64_t)v11, (const char *)v21, v22);
              }
              uint64_t v16 = [v14 countByEnumeratingWithState:v116 objects:buf count:16];
            }
            while (v16);
          }

          goto LABEL_24;
        }
        char v57 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
        uint64_t v54 = (char *)_os_log_send_and_compose_impl();

        v116[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v54, v116, &type))
        {
          if (v116[0] == 17)
          {
            unint64_t v55 = __nwlog_obj();
            os_log_type_t v58 = v116[0];
            if (os_log_type_enabled(v55, (os_log_type_t)v116[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
              _os_log_impl(&dword_1830D4000, v55, v58, "%{public}s called with null port", buf, 0xCu);
            }
          }
          else if (type)
          {
            uint64_t v77 = (char *)__nw_create_backtrace_string();
            unint64_t v55 = __nwlog_obj();
            os_log_type_t v78 = v116[0];
            BOOL v79 = os_log_type_enabled(v55, (os_log_type_t)v116[0]);
            if (v77)
            {
              if (v79)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v77;
                _os_log_impl(&dword_1830D4000, v55, v78, "%{public}s called with null port, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v77);
              if (!v54) {
                goto LABEL_24;
              }
              goto LABEL_184;
            }
            if (v79)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
              _os_log_impl(&dword_1830D4000, v55, v78, "%{public}s called with null port, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            unint64_t v55 = __nwlog_obj();
            os_log_type_t v85 = v116[0];
            if (os_log_type_enabled(v55, (os_log_type_t)v116[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
              _os_log_impl(&dword_1830D4000, v55, v85, "%{public}s called with null port, backtrace limit exceeded", buf, 0xCu);
            }
          }
          goto LABEL_182;
        }
LABEL_183:
        if (!v54)
        {
LABEL_24:

          goto LABEL_25;
        }
LABEL_184:
        free(v54);
        goto LABEL_24;
      }
      uint64_t v53 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
      uint64_t v54 = (char *)_os_log_send_and_compose_impl();

      v116[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v54, v116, &type)) {
        goto LABEL_183;
      }
      if (v116[0] == 17)
      {
        unint64_t v55 = __nwlog_obj();
        os_log_type_t v56 = v116[0];
        if (os_log_type_enabled(v55, (os_log_type_t)v116[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null hostname", buf, 0xCu);
        }
      }
      else if (type)
      {
        int v74 = (char *)__nw_create_backtrace_string();
        unint64_t v55 = __nwlog_obj();
        os_log_type_t v75 = v116[0];
        BOOL v76 = os_log_type_enabled(v55, (os_log_type_t)v116[0]);
        if (v74)
        {
          if (v76)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v74;
            _os_log_impl(&dword_1830D4000, v55, v75, "%{public}s called with null hostname, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v74);
          goto LABEL_183;
        }
        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_1830D4000, v55, v75, "%{public}s called with null hostname, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v55 = __nwlog_obj();
        os_log_type_t v84 = v116[0];
        if (os_log_type_enabled(v55, (os_log_type_t)v116[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_1830D4000, v55, v84, "%{public}s called with null hostname, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_182:

      goto LABEL_183;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    unint64_t v43 = (char *)_os_log_send_and_compose_impl();
    v116[0] = 16;
    LOBYTE(v99) = 0;
    if (__nwlog_fault(v43, v116, &v99))
    {
      if (v116[0] == 17)
      {
        unint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = v116[0];
        if (os_log_type_enabled(v44, (os_log_type_t)v116[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
          uint64_t v46 = "%{public}s called with null alt_svc_options";
LABEL_161:
          _os_log_impl(&dword_1830D4000, v44, v45, v46, buf, 0xCu);
        }
      }
      else if ((_BYTE)v99)
      {
        unint64_t v64 = (char *)__nw_create_backtrace_string();
        unint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = v116[0];
        BOOL v65 = os_log_type_enabled(v44, (os_log_type_t)v116[0]);
        if (v64)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v64;
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null alt_svc_options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v64);
          goto LABEL_162;
        }
        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
          uint64_t v46 = "%{public}s called with null alt_svc_options, no backtrace";
          goto LABEL_161;
        }
      }
      else
      {
        unint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = v116[0];
        if (os_log_type_enabled(v44, (os_log_type_t)v116[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
          uint64_t v46 = "%{public}s called with null alt_svc_options, backtrace limit exceeded";
          goto LABEL_161;
        }
      }
    }
LABEL_162:
    if (v43) {
      free(v43);
    }
    uint64_t v36 = 0;
    goto LABEL_50;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
  unint64_t v39 = (char *)_os_log_send_and_compose_impl();
  v116[0] = 16;
  LOBYTE(v103) = 0;
  if (!__nwlog_fault(v39, v116, &v103)) {
    goto LABEL_156;
  }
  if (v116[0] != 17)
  {
    if (!(_BYTE)v103)
    {
      unint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = v116[0];
      if (os_log_type_enabled(v40, (os_log_type_t)v116[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        uint64_t v42 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v40 = __nwlog_obj();
    os_log_type_t v41 = v116[0];
    BOOL v63 = os_log_type_enabled(v40, (os_log_type_t)v116[0]);
    if (!backtrace_string)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        uint64_t v42 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    if (v63)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      unint64_t v61 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_103;
    }
LABEL_104:
    free(backtrace_string);
    goto LABEL_156;
  }
  unint64_t v40 = __nwlog_obj();
  os_log_type_t v41 = v116[0];
  if (os_log_type_enabled(v40, (os_log_type_t)v116[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    uint64_t v42 = "%{public}s called with null other_protocol";
    goto LABEL_155;
  }
LABEL_156:
  if (v39) {
    free(v39);
  }
  return 0;
}

void sub_183BD1430(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__71883(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__71884(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL32nw_protocol_http_alt_svc_connectP11nw_protocolS0__block_invoke(uint64_t a1, const char *a2, unsigned int a3)
{
  host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(a2, a3);
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  id v6 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  nw_endpoint_add_alternative(v5, (void *)host_with_numeric_port, v6);
  if (v6) {
    os_release(v6);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  if (host_with_numeric_port)
  {
    os_release((void *)host_with_numeric_port);
  }
}

double __nw_protocol_http_alt_svc_identifier_block_invoke()
{
  strcpy((char *)nw_protocol_http_alt_svc_identifier::protocol_identifier, "http_alt_svc");
  *(void *)&double result = 0x100000005;
  qword_1E8F6A57C = 0x100000005;
  return result;
}

void sub_183BD1640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183BD16CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_edge *nw_endpoint_edge_create(void *a1, long long *a2, char a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = [NWConcrete_nw_endpoint_edge alloc];
  id v7 = v5;
  __int16 v8 = v7;
  if (!v6) {
    goto LABEL_6;
  }
  if (!v7)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v14, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        uint64_t v15 = __nwlog_obj();
        os_log_type_t receiver = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v15, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v15, receiver, "%{public}s called with null _endpoint", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v29 = (os_log_type_t)v41.receiver;
        BOOL v30 = os_log_type_enabled(v15, (os_log_type_t)v41.receiver);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            __int16 v45 = 2082;
            uint64_t v46 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v29, "%{public}s called with null _endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v15, v29, "%{public}s called with null _endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v37 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v15, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v15, v37, "%{public}s called with null _endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v14) {
      free(v14);
    }
    goto LABEL_56;
  }
  if (!a2)
  {
    uint64_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v18, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v19, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null _identifier", buf, 0xCu);
        }
      }
      else if (type)
      {
        id v31 = (char *)__nw_create_backtrace_string();
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v32 = (os_log_type_t)v41.receiver;
        BOOL v33 = os_log_type_enabled(v19, (os_log_type_t)v41.receiver);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            __int16 v45 = 2082;
            uint64_t v46 = v31;
            _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s called with null _identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v31);
          goto LABEL_60;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s called with null _identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v38 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v19, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v19, v38, "%{public}s called with null _identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_60:
    if (v18) {
      free(v18);
    }
LABEL_56:

LABEL_68:
    id v6 = 0;
    goto LABEL_6;
  }
  v41.os_log_type_t receiver = v6;
  v41.super_class = (Class)NWConcrete_nw_endpoint_edge;
  uint64_t v9 = (NWConcrete_nw_endpoint_edge *)objc_msgSendSuper2(&v41, sel_init);
  id v6 = v9;
  if (!v9)
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    unsigned __int16 v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (__nwlog_fault(v22, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v40)
      {
        uint64_t v34 = (char *)__nw_create_backtrace_string();
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v35 = type;
        BOOL v36 = os_log_type_enabled(v23, type);
        if (v34)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            __int16 v45 = 2082;
            uint64_t v46 = v34;
            _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v34);
          goto LABEL_66;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_1830D4000, v23, v39, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_66:
    if (v22) {
      free(v22);
    }
    goto LABEL_68;
  }
  objc_storeWeak((id *)&v9->endpoint, v8);
  *((unsigned char *)v6 + 64) = *((unsigned char *)v6 + 64) & 0xFE | a3;
  long long v10 = *a2;
  long long v11 = a2[1];
  *(void *)&v6->identifier.level = *((void *)a2 + 4);
  *(_OWORD *)&v6->identifier.name[16] = v11;
  *(_OWORD *)v6->identifier.name = v10;
  if (gLogDatapath)
  {
    __int16 v25 = __nwlog_obj();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      int is_registered = nw_endpoint_is_registered(v8);
      BOOL v27 = "un";
      unint64_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
      *(_DWORD *)buf = 136446722;
      if (is_registered) {
        BOOL v27 = "";
      }
      __int16 v45 = 2080;
      uint64_t v46 = (void *)v27;
      __int16 v47 = 2112;
      unint64_t v48 = v8;
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s endpoint edge create with %sregistered endpoint %@", buf, 0x20u);
    }
  }
LABEL_6:

  return v6;
}

void sub_183BD1F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_edge_get_endpoint(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = (char *)v1;
  if (!v1)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_endpoint_edge_get_endpoint";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null edge", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v17 = "nw_endpoint_edge_get_endpoint";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v7 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_1830D4000, v7, v13, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v6) {
      free(v6);
    }
    goto LABEL_4;
  }
  id WeakRetained = objc_loadWeakRetained(v1 + 6);
  if (WeakRetained) {
    goto LABEL_5;
  }
  if (gLogDatapath)
  {
    id v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v17 = "nw_endpoint_edge_get_endpoint";
      __int16 v18 = 2112;
      uint64_t v19 = v2;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s edge %@ has seen its endpoint be deallocated", buf, 0x16u);
    }
  }
LABEL_4:
  id WeakRetained = 0;
LABEL_5:

  return WeakRetained;
}

nw_endpoint_t nw_endpoint_create_unix(const char *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    memset(address, 0, sizeof(address));
    size_t v2 = strlen(a1);
    if (v2 + 1 < 0x7E)
    {
      address[0].sa_len = v2 + 3;
      address[0].sa_family = 1;
      memcpy(address[0].sa_data, a1, v2 + 1);
      return nw_endpoint_create_address(address);
    }
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)os_log_type_t type = 136446210;
    uint64_t v19 = "nw_endpoint_create_unix";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v5, &v17, &v16))
    {
      if (v17 == OS_LOG_TYPE_FAULT)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v7 = v17;
        if (os_log_type_enabled(v6, v17))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          uint64_t v19 = "nw_endpoint_create_unix";
          os_log_type_t v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path))";
LABEL_32:
          uint64_t v15 = (uint8_t *)type;
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v16)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v7 = v17;
        if (os_log_type_enabled(v6, v17))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          uint64_t v19 = "nw_endpoint_create_unix";
          os_log_type_t v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path))"
               ", backtrace limit exceeded";
          goto LABEL_32;
        }
LABEL_34:

        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      BOOL v14 = os_log_type_enabled(v6, v17);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          uint64_t v19 = "nw_endpoint_create_unix";
          os_log_type_t v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path)), no backtrace";
          goto LABEL_32;
        }
        goto LABEL_34;
      }
      if (!v14) {
        goto LABEL_22;
      }
      *(_DWORD *)os_log_type_t type = 136446466;
      uint64_t v19 = "nw_endpoint_create_unix";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      id v12 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path)), d"
            "umping backtrace:%{public}s";
      os_log_type_t v13 = (uint8_t *)type;
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v4 = __nwlog_obj();
    *(_DWORD *)&address[0].sa_len = 136446210;
    *(void *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
    id v5 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v5, type, &v17))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type[0];
        if (!os_log_type_enabled(v6, type[0])) {
          goto LABEL_34;
        }
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
        os_log_type_t v8 = "%{public}s called with null path";
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type[0];
        BOOL v11 = os_log_type_enabled(v6, type[0]);
        if (backtrace_string)
        {
          if (!v11)
          {
LABEL_22:

            free(backtrace_string);
            goto LABEL_35;
          }
          *(_DWORD *)&address[0].sa_len = 136446466;
          *(void *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
          *(_WORD *)&address[0].sa_data[10] = 2082;
          *(void *)&address[0].sa_data[12] = backtrace_string;
          id v12 = "%{public}s called with null path, dumping backtrace:%{public}s";
          os_log_type_t v13 = (uint8_t *)address;
LABEL_21:
          _os_log_impl(&dword_1830D4000, v6, v7, v12, v13, 0x16u);
          goto LABEL_22;
        }
        if (!v11) {
          goto LABEL_34;
        }
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
        os_log_type_t v8 = "%{public}s called with null path, no backtrace";
      }
      else
      {
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type[0];
        if (!os_log_type_enabled(v6, type[0])) {
          goto LABEL_34;
        }
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
        os_log_type_t v8 = "%{public}s called with null path, backtrace limit exceeded";
      }
      uint64_t v15 = (uint8_t *)address;
LABEL_33:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, v15, 0xCu);
      goto LABEL_34;
    }
  }
LABEL_35:
  if (v5) {
    free(v5);
  }
  return 0;
}

char *nw_endpoint_create_address_with_port(unsigned __int8 *a1, const char *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      size_t v2 = -[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]([NWConcrete_nw_address_endpoint alloc], a1, a2);
      uint64_t v3 = v2;
      if (v2)
      {
        uint64_t v4 = v2;
LABEL_24:

        return v3;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      BOOL v30 = "nw_endpoint_create_address_with_port";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v6, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (id)gLogObj;
          os_log_type_t v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s NWOSAddressEndpoint alloc/init failed", buf, 0xCu);
          }
        }
        else if (v27)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (id)gLogObj;
          os_log_type_t v10 = type;
          BOOL v11 = os_log_type_enabled(v7, type);
          if (backtrace_string)
          {
            if (v11)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v30 = "nw_endpoint_create_address_with_port";
              __int16 v31 = 2082;
              os_log_type_t v32 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s NWOSAddressEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v6) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }
          if (v11)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s NWOSAddressEndpoint alloc/init failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (id)gLogObj;
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s NWOSAddressEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v6) {
        goto LABEL_24;
      }
LABEL_23:
      free(v6);
      goto LABEL_24;
    }
    __int16 v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v30 = "nw_endpoint_create_address_with_port";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null port", buf, 0xCu);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (!v27)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null port, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      __int16 v20 = (char *)__nw_create_backtrace_string();
      char v16 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!v20)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null port, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_endpoint_create_address_with_port";
        __int16 v31 = 2082;
        os_log_type_t v32 = v20;
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null port, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_45;
    }
  }
  else
  {
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v30 = "nw_endpoint_create_address_with_port";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null address", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (!v27)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null address, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      __int16 v20 = (char *)__nw_create_backtrace_string();
      char v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (!v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null address, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_endpoint_create_address_with_port";
        __int16 v31 = 2082;
        os_log_type_t v32 = v20;
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null address, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_45:

      free(v20);
    }
  }
LABEL_58:
  if (v15) {
    free(v15);
  }
  return 0;
}

nw_endpoint_t nw_endpoint_create_with_peer_name(int a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1 < 0)
  {
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)&address[0].sa_len = 136446210;
    *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
    id v6 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v31) = 0;
    if (__nwlog_fault(v6, buf, &v31))
    {
      if (buf[0] == 17)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v26 = buf[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)buf[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
        uint64_t v9 = "%{public}s called with null (sockfd >= 0)";
      }
      else if ((_BYTE)v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v26 = buf[0];
        BOOL v28 = os_log_type_enabled(v7, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)&address[0].sa_len = 136446466;
            *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
            *(_WORD *)&address[0].sa_data[10] = 2082;
            *(void *)&address[0].sa_data[12] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v26, "%{public}s called with null (sockfd >= 0), dumping backtrace:%{public}s", &address[0].sa_len, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (!v28) {
          goto LABEL_41;
        }
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
        uint64_t v9 = "%{public}s called with null (sockfd >= 0), no backtrace";
      }
      else
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v26 = buf[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)buf[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
        uint64_t v9 = "%{public}s called with null (sockfd >= 0), backtrace limit exceeded";
      }
      os_log_type_t v21 = address;
      BOOL v22 = v7;
      os_log_type_t v23 = v26;
      uint32_t v24 = 12;
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  memset(address, 0, sizeof(address));
  socklen_t v31 = 128;
  if (getpeername(a1, address, &v31))
  {
    socklen_t v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v2 == 22 || v2 == 57 || v2 == 102)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (id)gLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v33 = "nw_endpoint_create_with_peer_name";
        __int16 v34 = 1024;
        socklen_t v35 = v2;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s getpeername failed %{darwin.errno}d", buf, 0x12u);
      }

      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    uint64_t v33 = "nw_endpoint_create_with_peer_name";
    __int16 v34 = 1024;
    socklen_t v35 = v2;
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v6, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v33 = "nw_endpoint_create_with_peer_name";
          __int16 v34 = 1024;
          socklen_t v35 = v2;
          uint64_t v9 = "%{public}s getpeername failed %{darwin.errno}d";
LABEL_38:
          os_log_type_t v21 = (sockaddr *)buf;
          BOOL v22 = v7;
          os_log_type_t v23 = v11;
LABEL_39:
          uint32_t v24 = 18;
          goto LABEL_40;
        }
        goto LABEL_41;
      }
      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v33 = "nw_endpoint_create_with_peer_name";
          __int16 v34 = 1024;
          socklen_t v35 = v2;
          uint64_t v9 = "%{public}s getpeername failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_38;
        }
LABEL_41:

        goto LABEL_42;
      }
      os_log_type_t v12 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v20) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v33 = "nw_endpoint_create_with_peer_name";
        __int16 v34 = 1024;
        socklen_t v35 = v2;
        uint64_t v9 = "%{public}s getpeername failed %{darwin.errno}d, no backtrace";
        os_log_type_t v21 = (sockaddr *)buf;
        BOOL v22 = v7;
        os_log_type_t v23 = v19;
        goto LABEL_39;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v33 = "nw_endpoint_create_with_peer_name";
        __int16 v34 = 1024;
        socklen_t v35 = v2;
        __int16 v36 = 2082;
        v37[0] = v12;
        uint64_t v15 = "%{public}s getpeername failed %{darwin.errno}d, dumping backtrace:%{public}s";
        char v16 = v7;
        os_log_type_t v17 = v19;
        uint32_t v18 = 28;
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_42:
    if (v6) {
      free(v6);
    }
    return 0;
  }
  if (!v31 || v31 < address[0].sa_len)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    uint64_t v33 = "nw_endpoint_create_with_peer_name";
    __int16 v34 = 1024;
    socklen_t v35 = v31;
    __int16 v36 = 1024;
    LODWORD(v37[0]) = address[0].sa_len;
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v6, &type, &v29)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v33 = "nw_endpoint_create_with_peer_name";
      __int16 v34 = 1024;
      socklen_t v35 = v31;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = address[0].sa_len;
      uint64_t v9 = "%{public}s getpeername provided invalid length: len: %u, ss.ss_len: %u";
    }
    else
    {
      if (v29)
      {
        os_log_type_t v12 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v7, type);
        if (v12)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v33 = "nw_endpoint_create_with_peer_name";
            __int16 v34 = 1024;
            socklen_t v35 = v31;
            __int16 v36 = 1024;
            LODWORD(v37[0]) = address[0].sa_len;
            WORD2(v37[0]) = 2082;
            *(void *)((char *)v37 + 6) = v12;
            uint64_t v15 = "%{public}s getpeername provided invalid length: len: %u, ss.ss_len: %u, dumping backtrace:%{public}s";
            char v16 = v7;
            os_log_type_t v17 = v13;
            uint32_t v18 = 34;
LABEL_30:
            _os_log_impl(&dword_1830D4000, v16, v17, v15, buf, v18);
          }
LABEL_31:

          free(v12);
          goto LABEL_42;
        }
        if (!v14) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v33 = "nw_endpoint_create_with_peer_name";
        __int16 v34 = 1024;
        socklen_t v35 = v31;
        __int16 v36 = 1024;
        LODWORD(v37[0]) = address[0].sa_len;
        uint64_t v9 = "%{public}s getpeername provided invalid length: len: %u, ss.ss_len: %u, no backtrace";
        os_log_type_t v21 = (sockaddr *)buf;
        BOOL v22 = v7;
        os_log_type_t v23 = v13;
LABEL_35:
        uint32_t v24 = 24;
LABEL_40:
        _os_log_impl(&dword_1830D4000, v22, v23, v9, &v21->sa_len, v24);
        goto LABEL_41;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v33 = "nw_endpoint_create_with_peer_name";
      __int16 v34 = 1024;
      socklen_t v35 = v31;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = address[0].sa_len;
      uint64_t v9 = "%{public}s getpeername provided invalid length: len: %u, ss.ss_len: %u, backtrace limit exceeded";
    }
    os_log_type_t v21 = (sockaddr *)buf;
    BOOL v22 = v7;
    os_log_type_t v23 = v8;
    goto LABEL_35;
  }
  nw_endpoint_t result = nw_endpoint_create_address(address);
  if (result && address[0].sa_family == 1) {
    LODWORD(result[48].isa) = a1;
  }
  return result;
}

uint64_t nw_endpoint_is_broadcast(void *a1, void *a2)
{
  *(void *)&v55[13] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    objc_super v41 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v53 = "nw_endpoint_is_broadcast";
    uint64_t v42 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v42, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v43 = __nwlog_obj();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v50)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v43 = __nwlog_obj();
        os_log_type_t v46 = type;
        BOOL v47 = os_log_type_enabled(v43, type);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v53 = "nw_endpoint_is_broadcast";
            __int16 v54 = 2082;
            *(void *)unint64_t v55 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v43 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_1830D4000, v43, v48, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_64:
    if (!v42) {
      goto LABEL_38;
    }
    os_log_type_t v37 = (char *)v42;
    goto LABEL_37;
  }
  id v5 = v3;
  int v6 = [v5 type];

  if (v6 == 1)
  {
    os_log_type_t v7 = (int *)v5;
    if (v4) {
      id v8 = nw_path_copy_interface(v4);
    }
    else {
      id v8 = 0;
    }
    id v22 = v8;
    os_log_type_t v23 = v22;
    int v24 = *((unsigned __int8 *)v7 + 233);
    if (v24 == 30)
    {
      if (v7[60] || v7[61] || v7[62] != -65536) {
        goto LABEL_28;
      }
      os_log_type_t v25 = v7 + 63;
    }
    else
    {
      if (v24 != 2) {
        goto LABEL_28;
      }
      os_log_type_t v25 = v7 + 59;
    }
    int v26 = *v25;
    if (*v25 == -1) {
      goto LABEL_45;
    }
    if (v22)
    {
      char v27 = (char *)v22;
      BOOL v28 = v27;
      __int16 v29 = *(_WORD *)(v27 + 85);
      if ((v29 & 0x80) != 0) {
        int v30 = *((_DWORD *)v27 + 18);
      }
      else {
        int v30 = 0;
      }

      os_log_type_t v38 = v28;
      if ((*(_WORD *)(v28 + 85) & 0x100) == 0)
      {

        uint64_t v31 = 0;
        goto LABEL_46;
      }
      int v39 = v38[19];

      if (v26 != v39)
      {
        uint64_t v31 = 0;
        if ((v29 & 0x80) == 0 || (v39 & v30) != v26) {
          goto LABEL_46;
        }
      }
LABEL_45:
      uint64_t v31 = 1;
      goto LABEL_46;
    }
LABEL_28:
    uint64_t v31 = 0;
LABEL_46:

    goto LABEL_47;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v9 = (id)gLogObj;
  id v10 = v5;
  int v11 = [v10 type];

  *(_DWORD *)buf = 136446466;
  uint64_t v53 = "nw_endpoint_is_broadcast";
  __int16 v54 = 1024;
  *(_DWORD *)unint64_t v55 = v11;
  LODWORD(v49) = 18;
  os_log_type_t v12 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (__nwlog_fault(v12, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        id v15 = v10;
        int v16 = objc_msgSend(v15, "type", buf, v49);

        *(_DWORD *)buf = 136446466;
        uint64_t v53 = "nw_endpoint_is_broadcast";
        __int16 v54 = 1024;
        *(_DWORD *)unint64_t v55 = v16;
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s incorrect endpoint type %u", buf, 0x12u);
      }
    }
    else if (v50)
    {
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (id)gLogObj;
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (v17)
      {
        if (v19)
        {
          id v20 = v10;
          int v21 = objc_msgSend(v20, "type", buf, v49);

          *(_DWORD *)buf = 136446722;
          uint64_t v53 = "nw_endpoint_is_broadcast";
          __int16 v54 = 1024;
          *(_DWORD *)unint64_t v55 = v21;
          v55[2] = 2082;
          *(void *)&v55[3] = v17;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v17);
        if (!v12) {
          goto LABEL_38;
        }
        goto LABEL_36;
      }
      if (v19)
      {
        id v35 = v10;
        int v36 = objc_msgSend(v35, "type", buf, v49);

        *(_DWORD *)buf = 136446466;
        uint64_t v53 = "nw_endpoint_is_broadcast";
        __int16 v54 = 1024;
        *(_DWORD *)unint64_t v55 = v36;
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (id)gLogObj;
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        id v33 = v10;
        int v34 = objc_msgSend(v33, "type", buf, v49);

        *(_DWORD *)buf = 136446466;
        uint64_t v53 = "nw_endpoint_is_broadcast";
        __int16 v54 = 1024;
        *(_DWORD *)unint64_t v55 = v34;
        _os_log_impl(&dword_1830D4000, v13, v32, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
      }
    }
  }
  if (v12)
  {
LABEL_36:
    os_log_type_t v37 = (char *)v12;
LABEL_37:
    free(v37);
  }
LABEL_38:
  uint64_t v31 = 0;
LABEL_47:

  return v31;
}

void sub_183BD7140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_endpoint_create_address_from_string(const char *a1, const char *a2, char *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v14 = __nwlog_obj();
    LODWORD(__dst[0]) = 136446210;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    id v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v15, type, &v31)) {
      goto LABEL_63;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (!os_log_type_enabled(v16, type[0])) {
        goto LABEL_62;
      }
      LODWORD(__dst[0]) = 136446210;
      *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      os_log_type_t v18 = "%{public}s called with null address_string";
LABEL_61:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, (uint8_t *)__dst, 0xCu);
      goto LABEL_62;
    }
    if (!(_BYTE)v31)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null address_string, backtrace limit exceeded";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v16 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v22 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null address_string, no backtrace";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (!v22) {
      goto LABEL_48;
    }
    LODWORD(__dst[0]) = 136446466;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    WORD2(__dst[1]) = 2082;
    *(void *)((char *)&__dst[1] + 6) = backtrace_string;
    os_log_type_t v23 = "%{public}s called with null address_string, dumping backtrace:%{public}s";
LABEL_47:
    _os_log_impl(&dword_1830D4000, v16, v17, v23, (uint8_t *)__dst, 0x16u);
    goto LABEL_48;
  }
  if (!a2)
  {
    BOOL v19 = __nwlog_obj();
    LODWORD(__dst[0]) = 136446210;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    id v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v15, type, &v31)) {
      goto LABEL_63;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (!os_log_type_enabled(v16, type[0])) {
        goto LABEL_62;
      }
      LODWORD(__dst[0]) = 136446210;
      *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      os_log_type_t v18 = "%{public}s called with null port";
      goto LABEL_61;
    }
    if (!(_BYTE)v31)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null port, backtrace limit exceeded";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v16 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v24 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v24)
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null port, no backtrace";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (!v24) {
      goto LABEL_48;
    }
    LODWORD(__dst[0]) = 136446466;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    WORD2(__dst[1]) = 2082;
    *(void *)((char *)&__dst[1] + 6) = backtrace_string;
    os_log_type_t v23 = "%{public}s called with null port, dumping backtrace:%{public}s";
    goto LABEL_47;
  }
  if (!a3)
  {
    id v20 = __nwlog_obj();
    LODWORD(__dst[0]) = 136446210;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    id v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v15, type, &v31)) {
      goto LABEL_63;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null out_prefix";
        goto LABEL_61;
      }
LABEL_62:

LABEL_63:
      if (v15) {
        free(v15);
      }
      return 0;
    }
    if (!(_BYTE)v31)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null out_prefix, backtrace limit exceeded";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v16 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v25 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v25)
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null out_prefix, no backtrace";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (v25)
    {
      LODWORD(__dst[0]) = 136446466;
      *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      WORD2(__dst[1]) = 2082;
      *(void *)((char *)&__dst[1] + 6) = backtrace_string;
      os_log_type_t v23 = "%{public}s called with null out_prefix, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
LABEL_48:

    free(backtrace_string);
    goto LABEL_63;
  }
  memset(__dst, 0, sizeof(__dst));
  int v33 = 0;
  *(void *)os_log_type_t type = 0;
  uint64_t v28 = 0;
  int v30 = 0;
  uint64_t v29 = 0;
  char v26 = 0;
  uint64_t v31 = 0;
  if (!getaddrinfo(a1, 0, &nw_string_is_ip_address::hints, &v31))
  {
    os_log_type_t v7 = v31;
    if (!v31) {
      return nw_endpoint_create_address_with_port((unsigned __int8 *)__dst, a2);
    }
    id v8 = v31;
    while (1)
    {
      p_sa_len = &v8->ai_addr->sa_len;
      int v10 = p_sa_len[1];
      if (v10 == 30 || v10 == 2) {
        break;
      }
      id v8 = v8->ai_next;
      if (!v8) {
        goto LABEL_18;
      }
    }
    size_t v12 = *p_sa_len;
    if (v12 <= 0x1C) {
      memcpy(__dst, p_sa_len, v12);
    }
LABEL_18:
    freeaddrinfo(v7);
    if (BYTE1(__dst[0]) == 2)
    {
      char v6 = 32;
    }
    else
    {
      if (BYTE1(__dst[0]) != 30) {
        return nw_endpoint_create_address_with_port((unsigned __int8 *)__dst, a2);
      }
      char v6 = 0x80;
    }
LABEL_7:
    *a3 = v6;
    return nw_endpoint_create_address_with_port((unsigned __int8 *)__dst, a2);
  }
  if (nw_utilities_cidr_string_to_subnet_and_mask(a1, (uint64_t)__dst, (uint64_t)type, &v26))
  {
    char v6 = v26;
    goto LABEL_7;
  }
  return 0;
}

void __HTTPNotificationCenter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28EB8]);
  uint64_t v1 = (void *)HTTPNotificationCenter_center;
  HTTPNotificationCenter_center = (uint64_t)v0;
}

void sub_183BDCB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__73379(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__73380(uint64_t a1)
{
}

void sub_183BE25E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFURLRef fixInvalidHTTPURL(void *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  socklen_t v2 = [v1 absoluteURL];

  rangeIncludingSeparators.location = 0;
  rangeIncludingSeparators.size_t length = 0;
  CFRange v3 = CFURLGetByteRangeForComponent((CFURLRef)v2, kCFURLComponentScheme, &rangeIncludingSeparators);
  if (v3.location != -1 && v3.length + 3 != rangeIncludingSeparators.length)
  {
    if (__nwlog_url_log::onceToken != -1) {
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_68_44915);
    }
    id v5 = (id)gurlLogObj;
    *(_DWORD *)buf = 136446466;
    uint64_t v28 = "fixInvalidHTTPURL";
    __int16 v29 = 2112;
    id v30 = v1;
    char v6 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault((const char *)v6, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_url_log::onceToken != -1) {
          dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_68_44915);
        }
        os_log_type_t v7 = (id)gurlLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v28 = "fixInvalidHTTPURL";
          __int16 v29 = 2112;
          id v30 = v1;
          id v9 = "%{public}s Invalid URL (missing slash): %@";
LABEL_34:
          os_log_type_t v18 = v7;
          os_log_type_t v19 = v8;
LABEL_35:
          _os_log_impl(&dword_1830D4000, v18, v19, v9, buf, 0x16u);
          goto LABEL_36;
        }
        goto LABEL_36;
      }
      if (!v24)
      {
        if (__nwlog_url_log::onceToken != -1) {
          dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_68_44915);
        }
        os_log_type_t v7 = (id)gurlLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v28 = "fixInvalidHTTPURL";
          __int16 v29 = 2112;
          id v30 = v1;
          id v9 = "%{public}s Invalid URL (missing slash): %@, backtrace limit exceeded";
          goto LABEL_34;
        }
LABEL_36:

        if (!v6)
        {
LABEL_21:
          CFIndex v13 = CFURLGetBytes((CFURLRef)v2, 0, 0);
          if (v13 == -3)
          {
            id v20 = __nwlog_obj();
            os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            uint64_t v28 = "strict_calloc";
            int v21 = (void *)_os_log_send_and_compose_impl();

            CFURLRef result = (CFURLRef)__nwlog_abort((uint64_t)v21);
            if (result) {
              goto LABEL_44;
            }
            free(v21);
          }
          os_log_type_t v14 = (UInt8 *)malloc_type_calloc(v13 + 3, 1uLL, 0xEAFB8F1AuLL);
          if (v14)
          {
LABEL_23:
            CFURLGetBytes((CFURLRef)v2, v14, v13);
            id v15 = &v14[rangeIncludingSeparators.length + rangeIncludingSeparators.location];
            if (*v15 == 47) {
              size_t v16 = 1;
            }
            else {
              size_t v16 = 2;
            }
            memmove(&v15[v16], &v14[rangeIncludingSeparators.length + rangeIncludingSeparators.location], v13 - (rangeIncludingSeparators.length + rangeIncludingSeparators.location) + 1);
            memset(v15, 47, v16);
            CFURLRef v4 = CFURLCreateAbsoluteURLWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v14, v16 + v13, 0x600u, 0, 0);
            free(v14);
            goto LABEL_27;
          }
          BOOL v22 = __nwlog_obj();
          os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          uint64_t v28 = "strict_calloc";
          __int16 v29 = 2048;
          id v30 = (id)(v13 + 3);
          __int16 v31 = 2048;
          uint64_t v32 = 1;
          os_log_type_t v23 = (void *)_os_log_send_and_compose_impl();

          CFURLRef result = (CFURLRef)__nwlog_abort((uint64_t)v23);
          if (!result)
          {
            free(v23);
            goto LABEL_23;
          }
LABEL_44:
          __break(1u);
          return result;
        }
LABEL_20:
        free(v6);
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_68_44915);
      }
      os_log_type_t v7 = (id)gurlLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v28 = "fixInvalidHTTPURL";
          __int16 v29 = 2112;
          id v30 = v1;
          id v9 = "%{public}s Invalid URL (missing slash): %@, no backtrace";
          os_log_type_t v18 = v7;
          os_log_type_t v19 = v11;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v28 = "fixInvalidHTTPURL";
        __int16 v29 = 2112;
        id v30 = v1;
        __int16 v31 = 2082;
        uint64_t v32 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s Invalid URL (missing slash): %@, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(backtrace_string);
    }
    if (!v6) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  CFURLRef v4 = v2;
LABEL_27:

  return v4;
}

uint64_t __bumpProcessFDLimit_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v6.rlim_cur = 0;
  v6.rlim_t rlim_max = 0;
  int v0 = getrlimit(8, &v6);
  *(void *)os_log_type_t v7 = 0x1D00000001;
  size_t v4 = 8;
  rlim_t rlim_max = 0;
  uint64_t result = sysctl(v7, 2u, &rlim_max, &v4, 0, 0);
  if (result | v0)
  {
    if (v0) {
      return result;
    }
    rlim_t v2 = rlim_max;
  }
  else
  {
    rlim_t v2 = rlim_max;
    if (v6.rlim_max < rlim_max)
    {
      rlim_t rlim_max = v6.rlim_max;
      rlim_t v2 = v6.rlim_max;
    }
  }
  if (v6.rlim_cur < v2)
  {
    rlimit v3 = v6;
    if (v2 >= v6.rlim_cur + 2304) {
      rlim_t v2 = v6.rlim_cur + 2304;
    }
    v3.rlim_cur = v2;
    return setrlimit(8, &v3);
  }
  return result;
}

nw_protocol_options_t nw_tls_create_options(void)
{
  int v0 = (void *)nw_protocol_boringssl_copy_definition();
  options = nw_protocol_create_options(v0);

  return &options->super;
}

void sub_183BE7B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_swift_tls_create_options(double a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  double Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(a1);
  if (*(void *)(v2 + 2208))
  {
    inited = (void *)nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446466;
      uint64_t v8 = "nw_protocol_copy_swift_tls_definition_if_present";
      __int16 v9 = 2048;
      int v10 = inited;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", (uint8_t *)&v7, 0x16u);
    }
  }
  else
  {
    inited = 0;
  }
  options = nw_protocol_create_options(inited);

  return options;
}

void sub_183BE7C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_tls(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)nw_protocol_boringssl_copy_definition();
    BOOL v3 = nw_protocol_options_matches_definition(v1, v2);

    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v16 = "nw_protocol_options_is_tls";
  rlimit v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          size_t v16 = "nw_protocol_options_is_tls";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void sub_183BE7F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_copy_serializable_tls_definition()
{
  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_73554);
  }
  int v0 = (void *)nw_protocol_copy_serializable_tls_definition::tls_definition;

  return v0;
}

BOOL __nw_protocol_copy_serializable_tls_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(2, "tls-serializable");
  id v1 = (void *)nw_protocol_copy_serializable_tls_definition::tls_definition;
  nw_protocol_copy_serializable_tls_definition::tls_definition = (uint64_t)named;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_serializable_tls_definition::tls_definition, (uint64_t)nw_serializable_tls_allocate_options, (uint64_t)nw_serializable_tls_copy_options, (uint64_t)nw_serializable_tls_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_serializable_tls_definition::tls_definition, (uint64_t)nw_serializable_tls_option_is_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_serializable_tls_definition::tls_definition, 0, (uint64_t)nw_serializable_tls_serialize_options, (uint64_t)nw_serializable_tls_deserialize_options);
  uint64_t v2 = (void *)nw_protocol_copy_serializable_tls_definition::tls_definition;

  return nw_protocol_definition_register(v2);
}

BOOL nw_serializable_tls_deserialize_options(void *a1, unsigned char *a2, unint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "nw_serializable_tls_deserialize_options";
    __int16 v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }
        goto LABEL_68;
      }
      if (!v44)
      {
        id v30 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_1830D4000, v30, v41, "%{public}s called with null serialized_bytes, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_68;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v30 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_1830D4000, v30, v37, "%{public}s called with null serialized_bytes, no backtrace", buf, 0xCu);
        }
        goto LABEL_68;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v47 = "nw_serializable_tls_deserialize_options";
        __int16 v48 = 2082;
        uint64_t v49 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v37, "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_56:

      free(backtrace_string);
    }
LABEL_69:
    if (v29) {
      free(v29);
    }
    rlimit v6 = 0;
    goto LABEL_24;
  }
  if (a3 <= 3)
  {
    uint64_t v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "nw_serializable_tls_deserialize_options";
    __int16 v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v30 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options))", buf, 0xCu);
        }
LABEL_68:

        goto LABEL_69;
      }
      if (!v44)
      {
        id v30 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_1830D4000, v30, v42, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_68;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v30 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_1830D4000, v30, v39, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), no backtrace", buf, 0xCu);
        }
        goto LABEL_68;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v47 = "nw_serializable_tls_deserialize_options";
        __int16 v48 = 2082;
        uint64_t v49 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v39, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_56;
    }
    goto LABEL_69;
  }
  id v43 = v5;
  rlimit v6 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v6) {
    goto LABEL_4;
  }
  uint64_t v34 = __nwlog_obj();
  os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v47 = "strict_calloc";
  __int16 v48 = 2048;
  uint64_t v49 = 1;
  __int16 v50 = 2048;
  uint64_t v51 = 32;
  id v35 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v35);
  if (!result)
  {
    free(v35);
LABEL_4:
    if (os_variant_allows_internal_security_policies())
    {
      char v7 = v6[24] & 0xFE | *a2 & 1;
      v6[24] = v7;
    }
    else
    {
      char v7 = v6[24];
    }
    char v8 = v7 & 0xFD | (2 * ((*a2 & 2) != 0));
    v6[24] = v8;
    v6[24] = v8 & 0xFB | *a2 & 4;
    __int16 v9 = a2 + 2;
    if (!a2[1]) {
      goto LABEL_14;
    }
    unint64_t v10 = (unint64_t)&a2[a3];
    BOOL v11 = a2 + 4;
    if (a2 + 4 >= &a2[a3])
    {
      CFDataRef v13 = 0;
    }
    else
    {
      CFIndex v12 = *(unsigned __int16 *)v9;
      __int16 v9 = &v11[v12];
      if ((unint64_t)&v11[v12] > v10)
      {
        CFDataRef v13 = 0;
        os_log_type_t v14 = 0;
        __int16 v9 = a2 + 4;
LABEL_13:
        *((void *)v6 + 1) = v13;
        *((void *)v6 + 2) = v14;
LABEL_14:
        unint64_t v15 = (unint64_t)&a2[a3];
        size_t v16 = v9 + 2;
        if (v9 + 2 >= &a2[a3])
        {
          Mutable = 0;
        }
        else
        {
          Mutable = 0;
          CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          uint64_t v19 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          do
          {
            CFIndex v20 = *(unsigned __int16 *)v9;
            __int16 v9 = &v16[v20];
            if ((unint64_t)&v16[v20] > v15) {
              break;
            }
            if (!Mutable) {
              Mutable = CFArrayCreateMutable(v18, 0, v19);
            }
            CFDataRef v21 = CFDataCreate(v18, v16, v20);
            CFArrayAppendValue(Mutable, v21);
            if (v21) {
              CFRelease(v21);
            }
            size_t v16 = v9 + 2;
          }
          while ((unint64_t)(v9 + 2) < v15);
        }
        *(void *)rlimit v6 = Mutable;
        id v5 = v43;
LABEL_24:

        return (BOOL)v6;
      }
      CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDataRef v13 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11, v12);
      char v24 = v9 + 2;
      if ((unint64_t)(v9 + 2) < v10)
      {
        os_log_type_t v14 = 0;
        unsigned int v25 = 1;
        while (v25 < a2[1])
        {
          CFIndex v26 = *(unsigned __int16 *)v9;
          __int16 v9 = &v24[v26];
          if ((unint64_t)&v24[v26] > v10)
          {
            __int16 v9 = v24;
            goto LABEL_13;
          }
          CFDataRef v27 = CFDataCreate(v23, v24, v26);
          if (!v14) {
            os_log_type_t v14 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E4F1D510]);
          }
          CFArrayAppendValue(v14, v27);
          if (v27) {
            CFRelease(v27);
          }
          ++v25;
          char v24 = v9 + 2;
          if ((unint64_t)(v9 + 2) >= v10) {
            goto LABEL_13;
          }
        }
        goto LABEL_13;
      }
    }
    os_log_type_t v14 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_183BE8790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_serialize_options(void *a1, uint64_t a2, size_t *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    int v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v58 = "nw_serializable_tls_serialize_options";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v37, &type, &v55)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }
    else if (v55)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v38 = __nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v58 = "nw_serializable_tls_serialize_options";
          __int16 v59 = 2082;
          uint64_t v60 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v38, v48, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v37) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_1830D4000, v38, v48, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v38 = __nwlog_obj();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_1830D4000, v38, v53, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_72;
  }
  if (!a3)
  {
    BOOL v40 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v58 = "nw_serializable_tls_serialize_options";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v37, &type, &v55)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v38 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_1830D4000, v38, v41, "%{public}s called with null out_length", buf, 0xCu);
      }
    }
    else if (v55)
    {
      __int16 v50 = (char *)__nw_create_backtrace_string();
      BOOL v38 = __nwlog_obj();
      os_log_type_t v51 = type;
      BOOL v52 = os_log_type_enabled(v38, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v58 = "nw_serializable_tls_serialize_options";
          __int16 v59 = 2082;
          uint64_t v60 = (uint64_t)v50;
          _os_log_impl(&dword_1830D4000, v38, v51, "%{public}s called with null out_length, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v50);
LABEL_73:
        if (!v37)
        {
LABEL_75:
          __int16 v17 = 0;
LABEL_76:

          return (BOOL)v17;
        }
LABEL_74:
        free(v37);
        goto LABEL_75;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_1830D4000, v38, v51, "%{public}s called with null out_length, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v38 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_1830D4000, v38, v54, "%{public}s called with null out_length, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  if (!*(void *)a2)
  {
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)a2);
  if (Count)
  {
    CFIndex v7 = 0;
    uint64_t v8 = 0;
    do
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)a2, v7);
      if (ValueAtIndex) {
        v8 += CFDataGetLength(ValueAtIndex) + 2;
      }
      ++v7;
    }
    while (Count != v7);
LABEL_10:
    CFDataRef v10 = *(const __CFData **)(a2 + 8);
    if (v10) {
      goto LABEL_11;
    }
LABEL_18:
    unsigned __int8 v13 = 0;
    CFIndex v11 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  CFDataRef v10 = *(const __CFData **)(a2 + 8);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_11:
  CFIndex v11 = CFDataGetLength(v10) + 2;
  CFArrayRef v12 = *(const __CFArray **)(a2 + 16);
  if (v12)
  {
    unsigned __int8 v13 = CFArrayGetCount(v12) + 1;
    if (v13 >= 2u)
    {
      CFIndex v14 = 0;
      do
      {
        CFDataRef v15 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v14);
        if (v15) {
          v11 += CFDataGetLength(v15) + 2;
        }
        ++v14;
      }
      while (v13 - 1 != v14);
    }
  }
  else
  {
    unsigned __int8 v13 = 1;
  }
LABEL_20:
  size_t v16 = v8 + v11 + 4;
  *a3 = v16;
  if (v8 + v11 == -4)
  {
    os_log_type_t v42 = __nwlog_obj();
    os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v58 = "strict_calloc";
    id v43 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v43);
    if (result) {
      goto LABEL_77;
    }
    free(v43);
  }
  __int16 v17 = (char *)malloc_type_calloc(1uLL, v16, 0xEAFB8F1AuLL);
  if (v17)
  {
LABEL_22:
    *__int16 v17 = *v17 & 0xF8 | *(unsigned char *)(a2 + 24) & 7;
    v17[1] = v13;
    CFAllocatorRef v18 = v17 + 2;
    if (v13)
    {
      CFDataRef v19 = *(const __CFData **)(a2 + 8);
      if (v19)
      {
        unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 8));
        BytePtr = CFDataGetBytePtr(v19);
        *((_WORD *)v17 + 1) = Length;
        memcpy(v17 + 4, BytePtr, Length);
        CFAllocatorRef v18 = &v17[Length + 4];
      }
      if (v13 != 1)
      {
        uint64_t v29 = v13 - 1;
        unsigned int v30 = 0;
        do
        {
          CFDataRef v31 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v30);
          CFDataRef v32 = v31;
          if (v31)
          {
            unsigned __int16 v33 = CFDataGetLength(v31);
            uint64_t v34 = CFDataGetBytePtr(v32);
            *(_WORD *)CFAllocatorRef v18 = v33;
            id v35 = v18 + 2;
            memcpy(v35, v34, v33);
            CFAllocatorRef v18 = &v35[v33];
          }
          ++v30;
          --v29;
        }
        while (v29);
      }
    }
    if (*(void *)a2)
    {
      CFIndex v22 = CFArrayGetCount(*(CFArrayRef *)a2);
      if (v22)
      {
        for (CFIndex i = 0; i != v22; ++i)
        {
          CFDataRef v25 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)a2, i);
          CFDataRef v26 = v25;
          if (v25)
          {
            unsigned __int16 v27 = CFDataGetLength(v25);
            uint64_t v28 = CFDataGetBytePtr(v26);
            *(_WORD *)CFAllocatorRef v18 = v27;
            char v24 = v18 + 2;
            memcpy(v24, v28, v27);
            CFAllocatorRef v18 = &v24[v27];
          }
        }
      }
    }
    goto LABEL_76;
  }
  __int16 v45 = __nwlog_obj();
  os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v58 = "strict_calloc";
  __int16 v59 = 2048;
  uint64_t v60 = 1;
  __int16 v61 = 2048;
  size_t v62 = v16;
  os_log_type_t v46 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v46);
  if (!result)
  {
    free(v46);
    goto LABEL_22;
  }
LABEL_77:
  __break(1u);
  return result;
}

void sub_183BE8FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_option_is_equal(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (((*(unsigned char *)(a3 + 24) ^ *(unsigned char *)(a2 + 24)) & 7) != 0) {
    goto LABEL_2;
  }
  uint64_t v8 = *(const void **)a2;
  __int16 v9 = *(const void **)a3;
  if (*(void *)a2 != *(void *)a3)
  {
    BOOL v6 = 0;
    if (!v8 || !v9) {
      goto LABEL_3;
    }
    if (!CFEqual(v8, v9)) {
      goto LABEL_2;
    }
  }
  CFDataRef v10 = *(const void **)(a2 + 8);
  CFIndex v11 = *(const void **)(a3 + 8);
  if (v10 != v11)
  {
    BOOL v6 = 0;
    if (!v10 || !v11) {
      goto LABEL_3;
    }
    if (!CFEqual(v10, v11))
    {
LABEL_2:
      BOOL v6 = 0;
      goto LABEL_3;
    }
  }
  CFArrayRef v12 = *(const void **)(a2 + 16);
  unsigned __int8 v13 = *(const void **)(a3 + 16);
  if (v12 == v13)
  {
    BOOL v6 = 1;
  }
  else
  {
    BOOL v6 = 0;
    if (v12 && v13) {
      BOOL v6 = CFEqual(v12, v13) != 0;
    }
  }
LABEL_3:

  return v6;
}

void sub_183BE90D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_serializable_tls_deallocate_options(void *a1, uint64_t a2)
{
  id v5 = a1;
  if (*(void *)a2)
  {
    CFRelease(*(CFTypeRef *)a2);
    *(void *)a2 = 0;
  }
  BOOL v3 = *(const void **)(a2 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a2 + 8) = 0;
  }
  size_t v4 = *(const void **)(a2 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 16) = 0;
  }
  free((void *)a2);
}

void sub_183BE9164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_copy_options(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    CFDataRef v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    CFAllocatorRef v23 = "nw_serializable_tls_copy_options";
    CFIndex v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        CFArrayRef v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          CFAllocatorRef v23 = "nw_serializable_tls_copy_options";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        CFArrayRef v12 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            CFAllocatorRef v23 = "nw_serializable_tls_copy_options";
            __int16 v24 = 2082;
            uint64_t v25 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          CFAllocatorRef v23 = "nw_serializable_tls_copy_options";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        CFArrayRef v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          CFAllocatorRef v23 = "nw_serializable_tls_copy_options";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_29:
    if (v11) {
      free(v11);
    }
    size_t v4 = 0;
    goto LABEL_10;
  }
  size_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *size_t v4 = 0u;
    v4[1] = 0u;
    if (*(void *)a2) {
      *(void *)size_t v4 = CFRetain(*(CFTypeRef *)a2);
    }
    id v5 = *(const void **)(a2 + 8);
    if (v5) {
      *((void *)v4 + 1) = CFRetain(v5);
    }
    CFArrayRef v6 = *(const __CFArray **)(a2 + 16);
    if (v6) {
      *((void *)v4 + 2) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
    }
    int v7 = *((unsigned char *)v4 + 24) & 0xFE | *(unsigned char *)(a2 + 24) & 1;
    *((unsigned char *)v4 + 24) = v7;
    unsigned int v8 = v7 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 24) >> 1) & 1));
    *((unsigned char *)v4 + 24) = v8;
    *((unsigned char *)v4 + 24) = v8 & 0xFB | *(unsigned char *)(a2 + 24) & 4;
LABEL_10:

    return (BOOL)v4;
  }
  CFIndex v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  CFAllocatorRef v23 = "strict_calloc";
  __int16 v24 = 2048;
  uint64_t v25 = 1;
  __int16 v26 = 2048;
  uint64_t v27 = 32;
  CFDataRef v15 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_183BE954C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_allocate_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  size_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    _OWORD *v2 = 0u;
    v2[1] = 0u;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_183BE969C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_serializable_tls(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_73554);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_serializable_tls_definition::tls_definition);

    goto LABEL_5;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_protocol_options_is_serializable_tls";
  unsigned int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_protocol_options_is_serializable_tls";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  BOOL is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_183BE9998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_tls_create_serializable_options()
{
  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_73554);
  }
  int v0 = (void *)nw_protocol_copy_serializable_tls_definition::tls_definition;

  return nw_protocol_create_options(v0);
}

NWConcrete_nw_protocol_options *nw_tls_create_options_from_serializable(void *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (nw_protocol_options_is_serializable_tls(v5))
  {
    CFArrayRef v6 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v6);

    unsigned int v8 = options;
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v26 = 1;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_tls_create_options_from_serializable_block_invoke;
    v19[3] = &unk_1E52490E8;
    __int16 v9 = v8;
    uint64_t v21 = buf;
    uint64_t v22 = a2;
    char v20 = v9;
    nw_protocol_options_access_handle(v5, v19);
    if (a3) {
      *a3 = *(unsigned char *)(*(void *)&buf[8] + 24);
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  CFIndex v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v12, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options)", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v12) {
    free(v12);
  }
  __int16 v9 = 0;
LABEL_5:

  return v9;
}

void sub_183BE9D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_tls_create_options_from_serializable_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a2 + 24) & 1) != 0 && os_variant_allows_internal_security_policies())
  {
    id v4 = *(NSObject **)(a1 + 32);
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
    }
    id v5 = (id)nw_context_copy_implicit_context::implicit_context;
    BOOL v6 = nw_context_copy_workloop(v5);
    sec_protocol_options_set_verify_block(v4, &__block_literal_global_5, (dispatch_queue_t)v6);
  }
  if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    sec_protocol_options_add_tls_application_protocol(*(sec_protocol_options_t *)(a1 + 32), "h2");
    if ((*(unsigned char *)(a2 + 24) & 4) == 0)
    {
LABEL_8:
      CFArrayRef v7 = *(const __CFArray **)a2;
      if (!*(void *)a2) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) == 0)
  {
    goto LABEL_8;
  }
  sec_protocol_options_set_min_tls_protocol_version(*(sec_protocol_options_t *)(a1 + 32), tls_protocol_version_TLSv13);
  CFArrayRef v7 = *(const __CFArray **)a2;
  if (!*(void *)a2) {
    goto LABEL_14;
  }
LABEL_12:
  if (CFArrayGetCount(v7) >= 1) {
    sec_protocol_options_set_server_raw_public_key_certificates();
  }
LABEL_14:
  if (*(void *)(a2 + 8))
  {
    CFArrayRef v8 = *(const __CFArray **)(a2 + 16);
    if (v8 && (CFIndex Count = CFArrayGetCount(v8), Count >= 1))
    {
      CFIndex v10 = Count;
      Mutable = 0;
      CFIndex v12 = 0;
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v12);
        CFDataGetBytePtr(ValueAtIndex);
        CFDataGetLength(ValueAtIndex);
        char v15 = (void *)NEHelperCopyDataForCertificate();
        os_log_type_t v16 = v15;
        if (!v15) {
          break;
        }
        xpc_data_get_bytes_ptr(v15);
        xpc_data_get_length(v16);
        BOOL v17 = (__SecIdentity *)SecCertificateCreateWithBytes();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        __int16 v19 = v18;
        if (!v17)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            unsigned __int16 v33 = "nw_tls_create_options_from_serializable_block_invoke";
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s Failed to create certificate from data", buf, 0xCu);
          }
          goto LABEL_32;
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          unsigned __int16 v33 = "nw_tls_create_options_from_serializable_block_invoke";
          __int16 v34 = 2112;
          id v35 = v17;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s Fetched certificate %@ from NEHelper", buf, 0x16u);
        }

        if (!Mutable) {
          Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
        }
        CFArrayAppendValue(Mutable, v17);
        CFRelease(v17);

        if (v10 == ++v12) {
          goto LABEL_33;
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int16 v33 = "nw_tls_create_options_from_serializable_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch certificate from NEHelper", buf, 0xCu);
      }
      os_log_type_t v16 = 0;
LABEL_32:

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
    else
    {
      Mutable = 0;
    }
LABEL_33:
    CFDataGetBytePtr(*(CFDataRef *)(a2 + 8));
    CFDataGetLength(*(CFDataRef *)(a2 + 8));
    char v20 = (void *)NEHelperCopyXPCEndpointForIdentityProxy();
    if (v20)
    {
      id v21 = objc_alloc_init(MEMORY[0x1E4F292A0]);
      [v21 _setEndpoint:v20];
      id v31 = 0;
      uint64_t v22 = (__SecIdentity *)[MEMORY[0x1E4F3B450] createIdentityFromEndpoint:v21 error:&v31];
      char v23 = (__SecIdentity *)v31;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (id)gLogObj;
      uint64_t v25 = v24;
      if (v23)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned __int16 v33 = "nw_tls_create_options_from_serializable_block_invoke";
          __int16 v34 = 2112;
          id v35 = v23;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch identity from NEHelper: %@", buf, 0x16u);
        }

        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      }
      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          unsigned __int16 v33 = "nw_tls_create_options_from_serializable_block_invoke";
          __int16 v34 = 2112;
          id v35 = v22;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s Fetched identity %@ from NEHelper", buf, 0x16u);
        }
      }
      if (v22)
      {
        if (Mutable) {
          uint64_t v28 = sec_identity_create_with_certificates(v22, Mutable);
        }
        else {
          uint64_t v28 = sec_identity_create(v22);
        }
        uint64_t v29 = v28;
        sec_protocol_options_set_local_identity(*(sec_protocol_options_t *)(a1 + 32), v28);

        CFRelease(v22);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v26 = (id)gLogObj;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *(__SecIdentity **)(a2 + 8);
        *(_DWORD *)buf = 136446466;
        unsigned __int16 v33 = "nw_tls_create_options_from_serializable_block_invoke";
        __int16 v34 = 2112;
        id v35 = v27;
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s Unable to copy xpc endpoint for client identity %@", buf, 0x16u);
      }

      if (Mutable) {
        CFRelease(Mutable);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
  }
  return 1;
}

void sub_183BEA3B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tls_create_options_from_serializable_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1);
}

void nw_serializable_tls_set_trust_certs(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __nw_serializable_tls_set_trust_certs_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_serializable_tls_set_trust_certs";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v4 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v15 = "nw_serializable_tls_set_trust_certs";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v4 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl(&dword_1830D4000, v4, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
LABEL_3:
}

void sub_183BEA720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_trust_certs_block_invoke(uint64_t a1, uint64_t a2)
{
  if (os_variant_allows_internal_security_policies()) {
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a2 + 24) & 0xFE | *(unsigned char *)(a1 + 32);
  }
  return 1;
}

void nw_serializable_tls_set_add_h2_alpn(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __nw_serializable_tls_set_add_h2_alpn_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_serializable_tls_set_add_h2_alpn";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v4 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v15 = "nw_serializable_tls_set_add_h2_alpn";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v4 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl(&dword_1830D4000, v4, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
LABEL_3:
}

void sub_183BEAA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_add_h2_alpn_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a2 + 24) & 0xFD | (2 * *(unsigned char *)(a1 + 32));
  return 1;
}

void nw_serializable_tls_set_require_tls13(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __nw_serializable_tls_set_require_tls13_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_serializable_tls_set_require_tls13";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v4 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v15 = "nw_serializable_tls_set_require_tls13";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v4 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl(&dword_1830D4000, v4, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
LABEL_3:
}

void sub_183BEAD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_require_tls13_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a2 + 24) & 0xFB | (4 * *(unsigned char *)(a1 + 32));
  return 1;
}

void nw_serializable_tls_set_server_raw_public_keys(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_serializable_tls(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_serializable_tls_set_server_raw_public_keys_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183BEB098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_server_raw_public_keys_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 32);
  if (v4 && CFArrayGetCount(v4) >= 1)
  {
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 32);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
  }
  return 1;
}

void nw_serializable_tls_set_client_identity_reference(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (nw_protocol_options_is_serializable_tls(v5))
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_serializable_tls_set_client_identity_reference_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v14[4] = a2;
    v14[5] = a3;
    nw_protocol_options_access_handle(v5, v14);
    goto LABEL_3;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183BEB3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_client_identity_reference_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = *(const void **)(a2 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 8) = 0;
  }
  id v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a2 + 16) = 0;
  }
  BOOL v6 = *(const void **)(a1 + 32);
  if (v6) {
    *(void *)(a2 + 8) = CFRetain(v6);
  }
  os_log_type_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    *(void *)(a2 + 16) = CFRetain(v7);
  }
  return 1;
}

void nw_tls_options_add_transport_specific_application_protocol(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!nw_protocol_options_is_tls(v3))
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v6, &type, &v27)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_tls(options)", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
          __int16 v31 = 2082;
          CFDataRef v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null nw_protocol_options_is_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v6) {
          goto LABEL_6;
        }
LABEL_54:
        free(v6);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null nw_protocol_options_is_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl(&dword_1830D4000, v7, v24, "%{public}s called with null nw_protocol_options_is_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (a2)
  {
    id v4 = v3;
    if (v4)
    {
      sec_protocol_options_add_transport_specific_application_protocol();
LABEL_5:

      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null sec_options", buf, 0xCu);
        }
      }
      else if (v27)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
            __int16 v31 = 2082;
            CFDataRef v32 = v21;
            _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null sec_options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          goto LABEL_58;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null sec_options, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null sec_options, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_58:
    if (v12) {
      free(v12);
    }
    goto LABEL_5;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v6, &type, &v27)) {
    goto LABEL_53;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null application_protocol", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v27)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl(&dword_1830D4000, v7, v25, "%{public}s called with null application_protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_52;
  }
  uint64_t v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v7, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s called with null application_protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
    __int16 v31 = 2082;
    CFDataRef v32 = v18;
    _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s called with null application_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v6) {
    goto LABEL_54;
  }
LABEL_6:
}

void sub_183BEBB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NWPBInterfaceReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  os_log_type_t v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 < v7)
  {
    os_log_type_t v10 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      os_log_type_t v13 = (unsigned char *)(a2 + *v8);
      if (!*v13)
      {
        if (v5 >= v7)
        {
          unint64_t v15 = 0;
        }
        else
        {
          char v14 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
          *(void *)(a2 + (int)v4) = v5 + 1;
          unint64_t v15 = v14 & 0x7F;
          if ((v14 & 0x80) == 0) {
            goto LABEL_39;
          }
          uint64_t v16 = *v3;
          unint64_t v17 = *(void *)(a2 + v16);
          if (v17 != -1 && v17 < *(void *)(a2 + *v6))
          {
            unint64_t v18 = v17 + 1;
            int v19 = *(char *)(*(void *)(a2 + *v10) + v17);
            *(void *)(a2 + v16) = v18;
            v15 |= (unint64_t)(v19 & 0x7F) << 7;
            if ((v19 & 0x80000000) == 0) {
              goto LABEL_39;
            }
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 != -1 && v21 < *(void *)(a2 + *v6))
            {
              unint64_t v22 = v21 + 1;
              int v23 = *(char *)(*(void *)(a2 + *v10) + v21);
              *(void *)(a2 + v20) = v22;
              v15 |= (unint64_t)(v23 & 0x7F) << 14;
              if ((v23 & 0x80000000) == 0) {
                goto LABEL_39;
              }
              uint64_t v24 = *v3;
              unint64_t v25 = *(void *)(a2 + v24);
              if (v25 != -1 && v25 < *(void *)(a2 + *v6))
              {
                unint64_t v26 = v25 + 1;
                int v27 = *(char *)(*(void *)(a2 + *v10) + v25);
                *(void *)(a2 + v24) = v26;
                v15 |= (unint64_t)(v27 & 0x7F) << 21;
                if ((v27 & 0x80000000) == 0) {
                  goto LABEL_39;
                }
                uint64_t v28 = *v3;
                unint64_t v29 = *(void *)(a2 + v28);
                if (v29 != -1 && v29 < *(void *)(a2 + *v6))
                {
                  unint64_t v30 = v29 + 1;
                  int v31 = *(char *)(*(void *)(a2 + *v10) + v29);
                  *(void *)(a2 + v28) = v30;
                  v15 |= (unint64_t)(v31 & 0x7F) << 28;
                  if ((v31 & 0x80000000) == 0) {
                    goto LABEL_39;
                  }
                  uint64_t v32 = *v3;
                  unint64_t v33 = *(void *)(a2 + v32);
                  if (v33 != -1 && v33 < *(void *)(a2 + *v6))
                  {
                    unint64_t v34 = v33 + 1;
                    int v35 = *(char *)(*(void *)(a2 + *v10) + v33);
                    *(void *)(a2 + v32) = v34;
                    if ((v35 & 0x80000000) == 0) {
                      goto LABEL_39;
                    }
                    uint64_t v36 = *v3;
                    unint64_t v37 = *(void *)(a2 + v36);
                    if (v37 != -1 && v37 < *(void *)(a2 + *v6))
                    {
                      unint64_t v38 = v37 + 1;
                      int v39 = *(char *)(*(void *)(a2 + *v10) + v37);
                      *(void *)(a2 + v36) = v38;
                      if ((v39 & 0x80000000) == 0) {
                        goto LABEL_39;
                      }
                      uint64_t v40 = *v3;
                      unint64_t v41 = *(void *)(a2 + v40);
                      if (v41 != -1 && v41 < *(void *)(a2 + *v6))
                      {
                        unint64_t v42 = v41 + 1;
                        int v43 = *(char *)(*(void *)(a2 + *v10) + v41);
                        *(void *)(a2 + v40) = v42;
                        if ((v43 & 0x80000000) == 0) {
                          goto LABEL_39;
                        }
                        uint64_t v44 = *v3;
                        unint64_t v45 = *(void *)(a2 + v44);
                        if (v45 != -1 && v45 < *(void *)(a2 + *v6))
                        {
                          unint64_t v46 = v45 + 1;
                          int v47 = *(char *)(*(void *)(a2 + *v10) + v45);
                          *(void *)(a2 + v44) = v46;
                          if ((v47 & 0x80000000) == 0) {
                            goto LABEL_39;
                          }
                          uint64_t v48 = *v3;
                          unint64_t v49 = *(void *)(a2 + v48);
                          if (v49 != -1 && v49 < *(void *)(a2 + *v6))
                          {
                            unint64_t v50 = v49 + 1;
                            int v51 = *(char *)(*(void *)(a2 + *v10) + v49);
                            *(void *)(a2 + v48) = v50;
                            if (v51 < 0)
                            {
                              unint64_t v15 = 0;
                              int v52 = *(unsigned __int8 *)(a2 + *v8);
                              goto LABEL_41;
                            }
LABEL_39:
                            int v52 = *(unsigned __int8 *)(a2 + *v8);
                            if (*(unsigned char *)(a2 + *v8)) {
                              unint64_t v15 = 0;
                            }
LABEL_41:
                            if (v52) {
                              BOOL v53 = 1;
                            }
                            else {
                              BOOL v53 = (v15 & 7) == 4;
                            }
                            if (v53) {
                              return *(unsigned char *)(a2 + *v8) == 0;
                            }
                            switch((v15 >> 3))
                            {
                              case 1u:
                                *(unsigned char *)(a1 + 44) |= 0x20u;
                                uint64_t v54 = *v3;
                                unint64_t v55 = *(void *)(a2 + v54);
                                if (v55 == -1 || v55 >= *(void *)(a2 + *v6))
                                {
                                  unsigned int v58 = 0;
                                }
                                else
                                {
                                  unint64_t v56 = v55 + 1;
                                  char v57 = *(unsigned char *)(*(void *)(a2 + *v10) + v55);
                                  *(void *)(a2 + v54) = v56;
                                  unsigned int v58 = v57 & 0x7F;
                                  if ((v57 & 0x80) == 0) {
                                    goto LABEL_282;
                                  }
                                  uint64_t v59 = *v3;
                                  unint64_t v60 = *(void *)(a2 + v59);
                                  if (v60 != -1 && v60 < *(void *)(a2 + *v6))
                                  {
                                    int v61 = *(char *)(*(void *)(a2 + *v10) + v60);
                                    *(void *)(a2 + v59) = v60 + 1;
                                    unsigned int v58 = v58 & 0xFFFFC07F | ((v61 & 0x7F) << 7);
                                    if ((v61 & 0x80000000) == 0) {
                                      goto LABEL_282;
                                    }
                                    uint64_t v62 = *v3;
                                    unint64_t v63 = *(void *)(a2 + v62);
                                    if (v63 != -1 && v63 < *(void *)(a2 + *v6))
                                    {
                                      int v64 = *(char *)(*(void *)(a2 + *v10) + v63);
                                      *(void *)(a2 + v62) = v63 + 1;
                                      unsigned int v58 = v58 & 0xFFE03FFF | ((v64 & 0x7F) << 14);
                                      if ((v64 & 0x80000000) == 0) {
                                        goto LABEL_282;
                                      }
                                      uint64_t v65 = *v3;
                                      unint64_t v66 = *(void *)(a2 + v65);
                                      if (v66 != -1 && v66 < *(void *)(a2 + *v6))
                                      {
                                        int v67 = *(char *)(*(void *)(a2 + *v10) + v66);
                                        *(void *)(a2 + v65) = v66 + 1;
                                        unsigned int v58 = v58 & 0xF01FFFFF | ((v67 & 0x7F) << 21);
                                        if ((v67 & 0x80000000) == 0) {
                                          goto LABEL_282;
                                        }
                                        uint64_t v68 = *v3;
                                        unint64_t v69 = *(void *)(a2 + v68);
                                        if (v69 != -1 && v69 < *(void *)(a2 + *v6))
                                        {
                                          unint64_t v70 = v69 + 1;
                                          int v71 = *(char *)(*(void *)(a2 + *v10) + v69);
                                          *(void *)(a2 + v68) = v70;
                                          v58 |= v71 << 28;
                                          if ((v71 & 0x80000000) == 0) {
                                            goto LABEL_282;
                                          }
                                          uint64_t v72 = *v3;
                                          unint64_t v73 = *(void *)(a2 + v72);
                                          if (v73 != -1 && v73 < *(void *)(a2 + *v6))
                                          {
                                            unint64_t v74 = v73 + 1;
                                            int v75 = *(char *)(*(void *)(a2 + *v10) + v73);
                                            *(void *)(a2 + v72) = v74;
                                            if ((v75 & 0x80000000) == 0) {
                                              goto LABEL_282;
                                            }
                                            uint64_t v76 = *v3;
                                            unint64_t v77 = *(void *)(a2 + v76);
                                            if (v77 != -1 && v77 < *(void *)(a2 + *v6))
                                            {
                                              unint64_t v78 = v77 + 1;
                                              int v79 = *(char *)(*(void *)(a2 + *v10) + v77);
                                              *(void *)(a2 + v76) = v78;
                                              if ((v79 & 0x80000000) == 0) {
                                                goto LABEL_282;
                                              }
                                              uint64_t v80 = *v3;
                                              unint64_t v81 = *(void *)(a2 + v80);
                                              if (v81 != -1 && v81 < *(void *)(a2 + *v6))
                                              {
                                                unint64_t v82 = v81 + 1;
                                                int v83 = *(char *)(*(void *)(a2 + *v10) + v81);
                                                *(void *)(a2 + v80) = v82;
                                                if ((v83 & 0x80000000) == 0) {
                                                  goto LABEL_282;
                                                }
                                                uint64_t v84 = *v3;
                                                unint64_t v85 = *(void *)(a2 + v84);
                                                if (v85 != -1 && v85 < *(void *)(a2 + *v6))
                                                {
                                                  unint64_t v86 = v85 + 1;
                                                  int v87 = *(char *)(*(void *)(a2 + *v10) + v85);
                                                  *(void *)(a2 + v84) = v86;
                                                  if ((v87 & 0x80000000) == 0) {
                                                    goto LABEL_282;
                                                  }
                                                  uint64_t v88 = *v3;
                                                  unint64_t v89 = *(void *)(a2 + v88);
                                                  if (v89 != -1 && v89 < *(void *)(a2 + *v6))
                                                  {
                                                    unint64_t v90 = v89 + 1;
                                                    int v91 = *(char *)(*(void *)(a2 + *v10) + v89);
                                                    *(void *)(a2 + v88) = v90;
                                                    if (v91 < 0)
                                                    {
                                                      unsigned int v58 = 0;
LABEL_284:
                                                      *(_DWORD *)(a1 + 36) = v58;
                                                      goto LABEL_4;
                                                    }
LABEL_282:
                                                    if (*(unsigned char *)(a2 + *v8)) {
                                                      unsigned int v58 = 0;
                                                    }
                                                    goto LABEL_284;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                *(unsigned char *)(a2 + *v8) = 1;
                                goto LABEL_282;
                              case 2u:
                                *(unsigned char *)(a1 + 44) |= 0x10u;
                                uint64_t v209 = *v3;
                                unint64_t v210 = *(void *)(a2 + v209);
                                if (v210 == -1 || v210 >= *(void *)(a2 + *v6))
                                {
                                  unsigned int v213 = 0;
LABEL_286:
                                  *(unsigned char *)(a2 + *v8) = 1;
                                  goto LABEL_287;
                                }
                                unint64_t v211 = v210 + 1;
                                char v212 = *(unsigned char *)(*(void *)(a2 + *v10) + v210);
                                *(void *)(a2 + v209) = v211;
                                unsigned int v213 = v212 & 0x7F;
                                if ((v212 & 0x80) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v214 = *v3;
                                unint64_t v215 = *(void *)(a2 + v214);
                                if (v215 == -1 || v215 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                int v216 = *(char *)(*(void *)(a2 + *v10) + v215);
                                *(void *)(a2 + v214) = v215 + 1;
                                unsigned int v213 = v213 & 0xFFFFC07F | ((v216 & 0x7F) << 7);
                                if ((v216 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v217 = *v3;
                                unint64_t v218 = *(void *)(a2 + v217);
                                if (v218 == -1 || v218 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                int v219 = *(char *)(*(void *)(a2 + *v10) + v218);
                                *(void *)(a2 + v217) = v218 + 1;
                                unsigned int v213 = v213 & 0xFFE03FFF | ((v219 & 0x7F) << 14);
                                if ((v219 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v220 = *v3;
                                unint64_t v221 = *(void *)(a2 + v220);
                                if (v221 == -1 || v221 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                int v222 = *(char *)(*(void *)(a2 + *v10) + v221);
                                *(void *)(a2 + v220) = v221 + 1;
                                unsigned int v213 = v213 & 0xF01FFFFF | ((v222 & 0x7F) << 21);
                                if ((v222 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v223 = *v3;
                                unint64_t v224 = *(void *)(a2 + v223);
                                if (v224 == -1 || v224 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                unint64_t v225 = v224 + 1;
                                int v226 = *(char *)(*(void *)(a2 + *v10) + v224);
                                *(void *)(a2 + v223) = v225;
                                v213 |= v226 << 28;
                                if ((v226 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v227 = *v3;
                                unint64_t v228 = *(void *)(a2 + v227);
                                if (v228 == -1 || v228 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                unint64_t v229 = v228 + 1;
                                int v230 = *(char *)(*(void *)(a2 + *v10) + v228);
                                *(void *)(a2 + v227) = v229;
                                if ((v230 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v231 = *v3;
                                unint64_t v232 = *(void *)(a2 + v231);
                                if (v232 == -1 || v232 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                unint64_t v233 = v232 + 1;
                                int v234 = *(char *)(*(void *)(a2 + *v10) + v232);
                                *(void *)(a2 + v231) = v233;
                                if ((v234 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v235 = *v3;
                                unint64_t v236 = *(void *)(a2 + v235);
                                if (v236 == -1 || v236 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                unint64_t v237 = v236 + 1;
                                int v238 = *(char *)(*(void *)(a2 + *v10) + v236);
                                *(void *)(a2 + v235) = v237;
                                if ((v238 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v239 = *v3;
                                unint64_t v240 = *(void *)(a2 + v239);
                                if (v240 == -1 || v240 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                unint64_t v241 = v240 + 1;
                                int v242 = *(char *)(*(void *)(a2 + *v10) + v240);
                                *(void *)(a2 + v239) = v241;
                                if ((v242 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v243 = *v3;
                                unint64_t v244 = *(void *)(a2 + v243);
                                if (v244 == -1 || v244 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                unint64_t v245 = v244 + 1;
                                int v246 = *(char *)(*(void *)(a2 + *v10) + v244);
                                *(void *)(a2 + v243) = v245;
                                if (v246 < 0)
                                {
                                  unsigned int v213 = 0;
                                  goto LABEL_289;
                                }
LABEL_287:
                                if (*(unsigned char *)(a2 + *v8)) {
                                  unsigned int v213 = 0;
                                }
LABEL_289:
                                *(_DWORD *)(a1 + 32) = v213;
                                goto LABEL_4;
                              case 3u:
                                uint64_t v11 = PBReaderReadString();
                                BOOL v12 = *(void **)(a1 + 24);
                                *(void *)(a1 + 24) = v11;

                                goto LABEL_4;
                              case 4u:
                                *(unsigned char *)(a1 + 44) |= 4u;
                                uint64_t v130 = *v3;
                                unint64_t v131 = *(void *)(a2 + v130);
                                if (v131 == -1 || v131 >= *(void *)(a2 + *v6))
                                {
                                  unsigned int v134 = 0;
LABEL_271:
                                  *(unsigned char *)(a2 + *v8) = 1;
                                  goto LABEL_272;
                                }
                                unint64_t v132 = v131 + 1;
                                char v133 = *(unsigned char *)(*(void *)(a2 + *v10) + v131);
                                *(void *)(a2 + v130) = v132;
                                unsigned int v134 = v133 & 0x7F;
                                if ((v133 & 0x80) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v135 = *v3;
                                unint64_t v136 = *(void *)(a2 + v135);
                                if (v136 == -1 || v136 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                int v137 = *(char *)(*(void *)(a2 + *v10) + v136);
                                *(void *)(a2 + v135) = v136 + 1;
                                unsigned int v134 = v134 & 0xFFFFC07F | ((v137 & 0x7F) << 7);
                                if ((v137 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v138 = *v3;
                                unint64_t v139 = *(void *)(a2 + v138);
                                if (v139 == -1 || v139 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                int v140 = *(char *)(*(void *)(a2 + *v10) + v139);
                                *(void *)(a2 + v138) = v139 + 1;
                                unsigned int v134 = v134 & 0xFFE03FFF | ((v140 & 0x7F) << 14);
                                if ((v140 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v141 = *v3;
                                unint64_t v142 = *(void *)(a2 + v141);
                                if (v142 == -1 || v142 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                int v143 = *(char *)(*(void *)(a2 + *v10) + v142);
                                *(void *)(a2 + v141) = v142 + 1;
                                unsigned int v134 = v134 & 0xF01FFFFF | ((v143 & 0x7F) << 21);
                                if ((v143 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v144 = *v3;
                                unint64_t v145 = *(void *)(a2 + v144);
                                if (v145 == -1 || v145 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                unint64_t v146 = v145 + 1;
                                int v147 = *(char *)(*(void *)(a2 + *v10) + v145);
                                *(void *)(a2 + v144) = v146;
                                v134 |= v147 << 28;
                                if ((v147 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v148 = *v3;
                                unint64_t v149 = *(void *)(a2 + v148);
                                if (v149 == -1 || v149 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                unint64_t v150 = v149 + 1;
                                int v151 = *(char *)(*(void *)(a2 + *v10) + v149);
                                *(void *)(a2 + v148) = v150;
                                if ((v151 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v152 = *v3;
                                unint64_t v153 = *(void *)(a2 + v152);
                                if (v153 == -1 || v153 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                unint64_t v154 = v153 + 1;
                                int v155 = *(char *)(*(void *)(a2 + *v10) + v153);
                                *(void *)(a2 + v152) = v154;
                                if ((v155 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v156 = *v3;
                                unint64_t v157 = *(void *)(a2 + v156);
                                if (v157 == -1 || v157 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                unint64_t v158 = v157 + 1;
                                int v159 = *(char *)(*(void *)(a2 + *v10) + v157);
                                *(void *)(a2 + v156) = v158;
                                if ((v159 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v160 = *v3;
                                unint64_t v161 = *(void *)(a2 + v160);
                                if (v161 == -1 || v161 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                unint64_t v162 = v161 + 1;
                                int v163 = *(char *)(*(void *)(a2 + *v10) + v161);
                                *(void *)(a2 + v160) = v162;
                                if ((v163 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v164 = *v3;
                                unint64_t v165 = *(void *)(a2 + v164);
                                if (v165 == -1 || v165 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                unint64_t v166 = v165 + 1;
                                int v167 = *(char *)(*(void *)(a2 + *v10) + v165);
                                *(void *)(a2 + v164) = v166;
                                if (v167 < 0)
                                {
                                  unsigned int v134 = 0;
                                  goto LABEL_274;
                                }
LABEL_272:
                                if (*(unsigned char *)(a2 + *v8)) {
                                  unsigned int v134 = 0;
                                }
LABEL_274:
                                *(_DWORD *)(a1 + 16) = v134;
                                goto LABEL_4;
                              case 5u:
                                *(unsigned char *)(a1 + 44) |= 2u;
                                uint64_t v92 = *v3;
                                unint64_t v93 = *(void *)(a2 + v92);
                                if (v93 == -1 || v93 >= *(void *)(a2 + *v6))
                                {
                                  unsigned int v96 = 0;
LABEL_266:
                                  *(unsigned char *)(a2 + *v8) = 1;
                                  goto LABEL_267;
                                }
                                unint64_t v94 = v93 + 1;
                                char v95 = *(unsigned char *)(*(void *)(a2 + *v10) + v93);
                                *(void *)(a2 + v92) = v94;
                                unsigned int v96 = v95 & 0x7F;
                                if ((v95 & 0x80) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v97 = *v3;
                                unint64_t v98 = *(void *)(a2 + v97);
                                if (v98 == -1 || v98 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                int v99 = *(char *)(*(void *)(a2 + *v10) + v98);
                                *(void *)(a2 + v97) = v98 + 1;
                                unsigned int v96 = v96 & 0xFFFFC07F | ((v99 & 0x7F) << 7);
                                if ((v99 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v100 = *v3;
                                unint64_t v101 = *(void *)(a2 + v100);
                                if (v101 == -1 || v101 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                int v102 = *(char *)(*(void *)(a2 + *v10) + v101);
                                *(void *)(a2 + v100) = v101 + 1;
                                unsigned int v96 = v96 & 0xFFE03FFF | ((v102 & 0x7F) << 14);
                                if ((v102 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v103 = *v3;
                                unint64_t v104 = *(void *)(a2 + v103);
                                if (v104 == -1 || v104 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                int v105 = *(char *)(*(void *)(a2 + *v10) + v104);
                                *(void *)(a2 + v103) = v104 + 1;
                                unsigned int v96 = v96 & 0xF01FFFFF | ((v105 & 0x7F) << 21);
                                if ((v105 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v106 = *v3;
                                unint64_t v107 = *(void *)(a2 + v106);
                                if (v107 == -1 || v107 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                unint64_t v108 = v107 + 1;
                                int v109 = *(char *)(*(void *)(a2 + *v10) + v107);
                                *(void *)(a2 + v106) = v108;
                                v96 |= v109 << 28;
                                if ((v109 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v110 = *v3;
                                unint64_t v111 = *(void *)(a2 + v110);
                                if (v111 == -1 || v111 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                unint64_t v112 = v111 + 1;
                                int v113 = *(char *)(*(void *)(a2 + *v10) + v111);
                                *(void *)(a2 + v110) = v112;
                                if ((v113 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v114 = *v3;
                                unint64_t v115 = *(void *)(a2 + v114);
                                if (v115 == -1 || v115 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                unint64_t v116 = v115 + 1;
                                int v117 = *(char *)(*(void *)(a2 + *v10) + v115);
                                *(void *)(a2 + v114) = v116;
                                if ((v117 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v118 = *v3;
                                unint64_t v119 = *(void *)(a2 + v118);
                                if (v119 == -1 || v119 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                unint64_t v120 = v119 + 1;
                                int v121 = *(char *)(*(void *)(a2 + *v10) + v119);
                                *(void *)(a2 + v118) = v120;
                                if ((v121 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v122 = *v3;
                                unint64_t v123 = *(void *)(a2 + v122);
                                if (v123 == -1 || v123 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                unint64_t v124 = v123 + 1;
                                int v125 = *(char *)(*(void *)(a2 + *v10) + v123);
                                *(void *)(a2 + v122) = v124;
                                if ((v125 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                uint64_t v126 = *v3;
                                unint64_t v127 = *(void *)(a2 + v126);
                                if (v127 == -1 || v127 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                unint64_t v128 = v127 + 1;
                                int v129 = *(char *)(*(void *)(a2 + *v10) + v127);
                                *(void *)(a2 + v126) = v128;
                                if (v129 < 0)
                                {
                                  unsigned int v96 = 0;
                                  goto LABEL_269;
                                }
LABEL_267:
                                if (*(unsigned char *)(a2 + *v8)) {
                                  unsigned int v96 = 0;
                                }
LABEL_269:
                                *(_DWORD *)(a1 + 12) = v96;
                                goto LABEL_4;
                              case 6u:
                                *(unsigned char *)(a1 + 44) |= 1u;
                                uint64_t v247 = *v3;
                                unint64_t v248 = *(void *)(a2 + v247);
                                if (v248 == -1 || v248 >= *(void *)(a2 + *v6))
                                {
                                  unsigned int v251 = 0;
LABEL_291:
                                  *(unsigned char *)(a2 + *v8) = 1;
                                  goto LABEL_292;
                                }
                                unint64_t v249 = v248 + 1;
                                char v250 = *(unsigned char *)(*(void *)(a2 + *v10) + v248);
                                *(void *)(a2 + v247) = v249;
                                unsigned int v251 = v250 & 0x7F;
                                if ((v250 & 0x80) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v252 = *v3;
                                unint64_t v253 = *(void *)(a2 + v252);
                                if (v253 == -1 || v253 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                int v254 = *(char *)(*(void *)(a2 + *v10) + v253);
                                *(void *)(a2 + v252) = v253 + 1;
                                unsigned int v251 = v251 & 0xFFFFC07F | ((v254 & 0x7F) << 7);
                                if ((v254 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v255 = *v3;
                                unint64_t v256 = *(void *)(a2 + v255);
                                if (v256 == -1 || v256 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                int v257 = *(char *)(*(void *)(a2 + *v10) + v256);
                                *(void *)(a2 + v255) = v256 + 1;
                                unsigned int v251 = v251 & 0xFFE03FFF | ((v257 & 0x7F) << 14);
                                if ((v257 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v258 = *v3;
                                unint64_t v259 = *(void *)(a2 + v258);
                                if (v259 == -1 || v259 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                int v260 = *(char *)(*(void *)(a2 + *v10) + v259);
                                *(void *)(a2 + v258) = v259 + 1;
                                unsigned int v251 = v251 & 0xF01FFFFF | ((v260 & 0x7F) << 21);
                                if ((v260 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v261 = *v3;
                                unint64_t v262 = *(void *)(a2 + v261);
                                if (v262 == -1 || v262 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                unint64_t v263 = v262 + 1;
                                int v264 = *(char *)(*(void *)(a2 + *v10) + v262);
                                *(void *)(a2 + v261) = v263;
                                v251 |= v264 << 28;
                                if ((v264 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v265 = *v3;
                                unint64_t v266 = *(void *)(a2 + v265);
                                if (v266 == -1 || v266 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                unint64_t v267 = v266 + 1;
                                int v268 = *(char *)(*(void *)(a2 + *v10) + v266);
                                *(void *)(a2 + v265) = v267;
                                if ((v268 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v269 = *v3;
                                unint64_t v270 = *(void *)(a2 + v269);
                                if (v270 == -1 || v270 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                unint64_t v271 = v270 + 1;
                                int v272 = *(char *)(*(void *)(a2 + *v10) + v270);
                                *(void *)(a2 + v269) = v271;
                                if ((v272 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v273 = *v3;
                                unint64_t v274 = *(void *)(a2 + v273);
                                if (v274 == -1 || v274 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                unint64_t v275 = v274 + 1;
                                int v276 = *(char *)(*(void *)(a2 + *v10) + v274);
                                *(void *)(a2 + v273) = v275;
                                if ((v276 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v277 = *v3;
                                unint64_t v278 = *(void *)(a2 + v277);
                                if (v278 == -1 || v278 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                unint64_t v279 = v278 + 1;
                                int v280 = *(char *)(*(void *)(a2 + *v10) + v278);
                                *(void *)(a2 + v277) = v279;
                                if ((v280 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v281 = *v3;
                                unint64_t v282 = *(void *)(a2 + v281);
                                if (v282 == -1 || v282 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                unint64_t v283 = v282 + 1;
                                int v284 = *(char *)(*(void *)(a2 + *v10) + v282);
                                *(void *)(a2 + v281) = v283;
                                if (v284 < 0)
                                {
                                  unsigned int v251 = 0;
                                  goto LABEL_294;
                                }
LABEL_292:
                                if (*(unsigned char *)(a2 + *v8)) {
                                  unsigned int v251 = 0;
                                }
LABEL_294:
                                *(_DWORD *)(a1 + 8) = v251;
                                goto LABEL_4;
                              case 7u:
                                *(unsigned char *)(a1 + 44) |= 8u;
                                uint64_t v285 = *v3;
                                unint64_t v286 = *(void *)(a2 + v285);
                                if (v286 == -1 || v286 >= *(void *)(a2 + *v6))
                                {
                                  unsigned int v289 = 0;
LABEL_296:
                                  *(unsigned char *)(a2 + *v8) = 1;
                                  goto LABEL_297;
                                }
                                unint64_t v287 = v286 + 1;
                                char v288 = *(unsigned char *)(*(void *)(a2 + *v10) + v286);
                                *(void *)(a2 + v285) = v287;
                                unsigned int v289 = v288 & 0x7F;
                                if ((v288 & 0x80) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v290 = *v3;
                                unint64_t v291 = *(void *)(a2 + v290);
                                if (v291 == -1 || v291 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                int v292 = *(char *)(*(void *)(a2 + *v10) + v291);
                                *(void *)(a2 + v290) = v291 + 1;
                                unsigned int v289 = v289 & 0xFFFFC07F | ((v292 & 0x7F) << 7);
                                if ((v292 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v293 = *v3;
                                unint64_t v294 = *(void *)(a2 + v293);
                                if (v294 == -1 || v294 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                int v295 = *(char *)(*(void *)(a2 + *v10) + v294);
                                *(void *)(a2 + v293) = v294 + 1;
                                unsigned int v289 = v289 & 0xFFE03FFF | ((v295 & 0x7F) << 14);
                                if ((v295 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v296 = *v3;
                                unint64_t v297 = *(void *)(a2 + v296);
                                if (v297 == -1 || v297 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                int v298 = *(char *)(*(void *)(a2 + *v10) + v297);
                                *(void *)(a2 + v296) = v297 + 1;
                                unsigned int v289 = v289 & 0xF01FFFFF | ((v298 & 0x7F) << 21);
                                if ((v298 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v299 = *v3;
                                unint64_t v300 = *(void *)(a2 + v299);
                                if (v300 == -1 || v300 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v301 = v300 + 1;
                                int v302 = *(char *)(*(void *)(a2 + *v10) + v300);
                                *(void *)(a2 + v299) = v301;
                                v289 |= v302 << 28;
                                if ((v302 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v303 = *v3;
                                unint64_t v304 = *(void *)(a2 + v303);
                                if (v304 == -1 || v304 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v305 = v304 + 1;
                                int v306 = *(char *)(*(void *)(a2 + *v10) + v304);
                                *(void *)(a2 + v303) = v305;
                                if ((v306 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v307 = *v3;
                                unint64_t v308 = *(void *)(a2 + v307);
                                if (v308 == -1 || v308 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v309 = v308 + 1;
                                int v310 = *(char *)(*(void *)(a2 + *v10) + v308);
                                *(void *)(a2 + v307) = v309;
                                if ((v310 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v311 = *v3;
                                unint64_t v312 = *(void *)(a2 + v311);
                                if (v312 == -1 || v312 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v313 = v312 + 1;
                                int v314 = *(char *)(*(void *)(a2 + *v10) + v312);
                                *(void *)(a2 + v311) = v313;
                                if ((v314 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v315 = *v3;
                                unint64_t v316 = *(void *)(a2 + v315);
                                if (v316 == -1 || v316 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v317 = v316 + 1;
                                int v318 = *(char *)(*(void *)(a2 + *v10) + v316);
                                *(void *)(a2 + v315) = v317;
                                if ((v318 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v319 = *v3;
                                unint64_t v320 = *(void *)(a2 + v319);
                                if (v320 == -1 || v320 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v321 = v320 + 1;
                                int v322 = *(char *)(*(void *)(a2 + *v10) + v320);
                                *(void *)(a2 + v319) = v321;
                                if (v322 < 0)
                                {
                                  unsigned int v289 = 0;
                                  goto LABEL_299;
                                }
LABEL_297:
                                if (*(unsigned char *)(a2 + *v8)) {
                                  unsigned int v289 = 0;
                                }
LABEL_299:
                                *(_DWORD *)(a1 + 20) = v289;
                                goto LABEL_4;
                              case 8u:
                                *(unsigned char *)(a1 + 44) |= 0x40u;
                                uint64_t v168 = *v3;
                                unint64_t v169 = *(void *)(a2 + v168);
                                if (v169 == -1 || v169 >= *(void *)(a2 + *v6))
                                {
                                  uint64_t v172 = 0;
LABEL_276:
                                  *(unsigned char *)(a2 + *v8) = 1;
                                  goto LABEL_277;
                                }
                                unint64_t v170 = v169 + 1;
                                char v171 = *(unsigned char *)(*(void *)(a2 + *v10) + v169);
                                *(void *)(a2 + v168) = v170;
                                uint64_t v172 = v171 & 0x7F;
                                if ((v171 & 0x80) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v173 = *v3;
                                unint64_t v174 = *(void *)(a2 + v173);
                                if (v174 == -1 || v174 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v175 = v174 + 1;
                                int v176 = *(char *)(*(void *)(a2 + *v10) + v174);
                                *(void *)(a2 + v173) = v175;
                                v172 |= (unint64_t)(v176 & 0x7F) << 7;
                                if ((v176 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v177 = *v3;
                                unint64_t v178 = *(void *)(a2 + v177);
                                if (v178 == -1 || v178 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v179 = v178 + 1;
                                int v180 = *(char *)(*(void *)(a2 + *v10) + v178);
                                *(void *)(a2 + v177) = v179;
                                v172 |= (unint64_t)(v180 & 0x7F) << 14;
                                if ((v180 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v181 = *v3;
                                unint64_t v182 = *(void *)(a2 + v181);
                                if (v182 == -1 || v182 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v183 = v182 + 1;
                                int v184 = *(char *)(*(void *)(a2 + *v10) + v182);
                                *(void *)(a2 + v181) = v183;
                                v172 |= (unint64_t)(v184 & 0x7F) << 21;
                                if ((v184 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v185 = *v3;
                                unint64_t v186 = *(void *)(a2 + v185);
                                if (v186 == -1 || v186 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v187 = v186 + 1;
                                int v188 = *(char *)(*(void *)(a2 + *v10) + v186);
                                *(void *)(a2 + v185) = v187;
                                v172 |= (unint64_t)(v188 & 0x7F) << 28;
                                if ((v188 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v189 = *v3;
                                unint64_t v190 = *(void *)(a2 + v189);
                                if (v190 == -1 || v190 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v191 = v190 + 1;
                                int v192 = *(char *)(*(void *)(a2 + *v10) + v190);
                                *(void *)(a2 + v189) = v191;
                                v172 |= (unint64_t)(v192 & 0x7F) << 35;
                                if ((v192 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v193 = *v3;
                                unint64_t v194 = *(void *)(a2 + v193);
                                if (v194 == -1 || v194 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v195 = v194 + 1;
                                int v196 = *(char *)(*(void *)(a2 + *v10) + v194);
                                *(void *)(a2 + v193) = v195;
                                v172 |= (unint64_t)(v196 & 0x7F) << 42;
                                if ((v196 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v197 = *v3;
                                unint64_t v198 = *(void *)(a2 + v197);
                                if (v198 == -1 || v198 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v199 = v198 + 1;
                                int v200 = *(char *)(*(void *)(a2 + *v10) + v198);
                                *(void *)(a2 + v197) = v199;
                                v172 |= (unint64_t)(v200 & 0x7F) << 49;
                                if ((v200 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v201 = *v3;
                                unint64_t v202 = *(void *)(a2 + v201);
                                if (v202 == -1 || v202 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v203 = v202 + 1;
                                int v204 = *(char *)(*(void *)(a2 + *v10) + v202);
                                *(void *)(a2 + v201) = v203;
                                v172 |= (unint64_t)(v204 & 0x7F) << 56;
                                if ((v204 & 0x80000000) == 0) {
                                  goto LABEL_277;
                                }
                                uint64_t v205 = *v3;
                                unint64_t v206 = *(void *)(a2 + v205);
                                if (v206 == -1 || v206 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_276;
                                }
                                unint64_t v207 = v206 + 1;
                                uint64_t v208 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v206);
                                *(void *)(a2 + v205) = v207;
                                if ((v208 & 0x80) != 0)
                                {
                                  uint64_t v172 = 0;
                                  goto LABEL_279;
                                }
                                v172 |= v208 << 63;
LABEL_277:
                                if (*(unsigned char *)(a2 + *v8)) {
                                  uint64_t v172 = 0;
                                }
LABEL_279:
                                *(unsigned char *)(a1 + 40) = v172 != 0;
LABEL_4:
                                uint64_t v4 = *v3;
                                unint64_t v5 = *(void *)(a2 + v4);
                                unint64_t v7 = *(void *)(a2 + *v6);
                                if (v5 >= v7) {
                                  return *(unsigned char *)(a2 + *v8) == 0;
                                }
                                continue;
                              default:
                                uint64_t result = PBReaderSkipValueWithTag();
                                if (!result) {
                                  return result;
                                }
                                goto LABEL_4;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          os_log_type_t v13 = (unsigned char *)(a2 + *v8);
        }
        *os_log_type_t v13 = 1;
        goto LABEL_39;
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v8) == 0;
}

NWConcrete_nw_protocol_options *nw_http1_create_options()
{
  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_73800);
  }
  int v0 = (void *)nw_protocol_copy_http1_definition_http1_definition;

  return nw_protocol_create_options(v0);
}

BOOL __nw_protocol_copy_http1_definition_block_invoke()
{
  if (nw_protocol_http1_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_40283);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_http1_identifier::http1_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http1_definition_http1_definition;
  nw_protocol_copy_http1_definition_http1_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http1_definition_http1_definition, (uint64_t)nw_http1_allocate_options, (uint64_t)nw_http1_copy_options, (uint64_t)nw_http1_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http1_definition_http1_definition, (uint64_t)nw_http1_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http1_definition_http1_definition, 0, (uint64_t)nw_http1_serialize_options, (uint64_t)nw_http1_deserialize_options);
  if (nw_protocol_http1_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_40283);
  }
  uint64_t v2 = (void *)nw_protocol_copy_http1_definition_http1_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http1_identifier::http1_protocol_identifier, v2, (uint64_t)nw_protocol_http1_create, (uint64_t)nw_protocol_http1_accept);
}

BOOL nw_http1_deserialize_options(void *a1, void *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 8)
    {
      BOOL v7 = nw_http1_copy_options(v5, a2);
      goto LABEL_4;
    }
    char v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v22 = "nw_http1_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v22 = "nw_http1_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v22 = "nw_http1_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v22 = "nw_http1_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      unint64_t v22 = "nw_http1_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      unint64_t v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v22 = "nw_http1_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v22 = "nw_http1_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v22 = "nw_http1_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v22 = "nw_http1_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      unint64_t v22 = "nw_http1_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      unint64_t v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http1_copy_options(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http1_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      uint64_t v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http1_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 8uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *uint64_t v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  uint64_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v18 = "strict_calloc";
  __int16 v19 = 2048;
  uint64_t v20 = 1;
  __int16 v21 = 2048;
  uint64_t v22 = 8;
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http1_serialize_options(void *a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http1_copy_options(a1, a2);
    *a3 = 8;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http1_serialize_options";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http1_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v15 = "nw_http1_serialize_options";
            __int16 v16 = 2082;
            unint64_t v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http1_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http1_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http1_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }
  return result;
}

void nw_http1_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    free(a2);
    return;
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_http1_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http1_deallocate_options";
        BOOL v6 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            char v12 = "nw_http1_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http1_deallocate_options";
        BOOL v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http1_deallocate_options";
        BOOL v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

BOOL nw_http1_allocate_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    void *v2 = 0x60000001DLL;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http1_definition()
{
  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_73800);
  }
  int v0 = (void *)nw_protocol_copy_http1_definition_http1_definition;

  return v0;
}

void nw_http1_set_idle_timeout(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http1_options(v3);
    nw_http1_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http1_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v17 = "nw_http1_set_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v17 = "nw_http1_set_idle_timeout";
        char v9 = "%{public}s called with null nw_protocol_options_is_http1(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v17 = "nw_http1_set_idle_timeout";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v17 = "nw_http1_set_idle_timeout";
        char v9 = "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace";
        goto LABEL_19;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v17 = "nw_http1_set_idle_timeout";
        char v9 = "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

BOOL nw_protocol_options_is_http_messaging(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_messaging_definition_definition);

    return is_equal_unsafe;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_messaging";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_messaging";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

id nw_http_messaging_options_copy_http1_options(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v24 = __Block_byref_object_copy__5_73857;
      uint64_t v25 = __Block_byref_object_dispose__6_73858;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_messaging_options_copy_http1_options_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183BEF538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_http1(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http1_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_73800);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http1_definition_http1_definition);

    return is_equal_unsafe;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_is_http1";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_is_http1";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t __nw_http1_set_idle_timeout_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __Block_byref_object_copy__5_73857(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6_73858(uint64_t a1)
{
}

uint64_t __nw_http_messaging_options_copy_http1_options_block_invoke(uint64_t a1, id *a2)
{
  return 1;
}

BOOL __nw_protocol_copy_http_messaging_definition_block_invoke()
{
  if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)nw_protocol_http_messaging_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_messaging_definition_definition;
  nw_protocol_copy_http_messaging_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_messaging_definition_definition, (uint64_t)nw_http_messaging_allocate_options, (uint64_t)nw_http_messaging_copy_options, (uint64_t)nw_http_messaging_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_messaging_definition_definition, (uint64_t)nw_http_messaging_options_compare);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_messaging_definition_definition, 0, (uint64_t)nw_http_messaging_serialize_options, (uint64_t)nw_http_messaging_deserialize_options);
  if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
  }
  id v2 = (void *)nw_protocol_copy_http_messaging_definition_definition;

  return nw_protocol_register_handle((uint64_t)nw_protocol_http_messaging_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_messaging_create, (uint64_t)nw_protocol_http_messaging_accept);
}

BOOL nw_http_messaging_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 48)
    {
      BOOL v7 = nw_http_messaging_copy_options(v5, a2);
      goto LABEL_4;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_messaging_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), ba"
                "cktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_messaging_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), dumpin"
            "g backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_messaging_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_messaging_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_messaging_copy_options(void *a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v30 = "nw_http_messaging_copy_options";
    char v19 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault((const char *)v19, &type, &v27))
    {
LABEL_31:
      if (v19) {
        free(v19);
      }
      id v4 = 0;
      goto LABEL_12;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v30 = "nw_http_messaging_copy_options";
        uint64_t v22 = "%{public}s called with null existing_handle";
LABEL_29:
        _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
      }
    }
    else
    {
      if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v26 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v30 = "nw_http_messaging_copy_options";
            __int16 v31 = 2082;
            uint64_t v32 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }
        if (!v26) {
          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v30 = "nw_http_messaging_copy_options";
        uint64_t v22 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_29;
      }
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v30 = "nw_http_messaging_copy_options";
        uint64_t v22 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_29;
      }
    }
LABEL_30:

    goto LABEL_31;
  }
  id v4 = malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
    id v5 = *(NWConcrete_nw_protocol_options **)a2;
    if (!*(void *)a2)
    {
LABEL_5:
      BOOL v6 = *(void **)v4;
      *(void *)id v4 = v5;

      BOOL v7 = *(void **)(a2 + 8);
      if (v7)
      {
        os_log_type_t v8 = nw_protocol_options_copy(v7);
        char v9 = (void *)*((void *)v4 + 1);
        *((void *)v4 + 1) = v8;
      }
      else
      {
        char v9 = (void *)*((void *)v4 + 1);
        *((void *)v4 + 1) = 0;
      }

      os_log_type_t v10 = *(void **)(a2 + 16);
      if (v10)
      {
        BOOL v11 = nw_protocol_options_copy(v10);
        os_log_type_t v12 = (void *)*((void *)v4 + 2);
        *((void *)v4 + 2) = v11;
      }
      else
      {
        os_log_type_t v12 = (void *)*((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
      }

      objc_storeStrong((id *)v4 + 3, *(id *)(a2 + 24));
      char v13 = _Block_copy(*(const void **)(a2 + 32));
      os_log_type_t v14 = (void *)*((void *)v4 + 4);
      *((void *)v4 + 4) = v13;

      BOOL v15 = _Block_copy(*(const void **)(a2 + 40));
      BOOL v16 = (void *)*((void *)v4 + 5);
      *((void *)v4 + 5) = v15;

LABEL_12:
      return (BOOL)v4;
    }
LABEL_4:
    id v5 = nw_protocol_options_copy(v5);
    goto LABEL_5;
  }
  __int16 v23 = __nwlog_obj();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  unint64_t v30 = "strict_calloc";
  __int16 v31 = 2048;
  uint64_t v32 = 1;
  __int16 v33 = 2048;
  uint64_t v34 = 48;
  uint64_t v24 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v24);
  if (!result)
  {
    free(v24);
    id v5 = *(NWConcrete_nw_protocol_options **)a2;
    if (!*(void *)a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

BOOL nw_http_messaging_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_messaging_copy_options(a1, a2);
    *a3 = 48;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_http_messaging_serialize_options";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_messaging_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v15 = "nw_http_messaging_serialize_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_messaging_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_messaging_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_http_messaging_options_compare(void *a1, void **a2, void **a3)
{
  id v5 = a1;
  uint64_t is_equal = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    if (nw_protocol_option_is_equal(*a2, *a3) && nw_protocol_option_is_equal(a2[1], a3[1])) {
      uint64_t is_equal = nw_protocol_option_is_equal(a2[2], a3[2]);
    }
    else {
      uint64_t is_equal = 0;
    }
  }

  return is_equal;
}

void nw_http_messaging_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    id v4 = a2[1];
    a2[1] = 0;

    id v5 = a2[2];
    a2[2] = 0;

    BOOL v6 = a2[3];
    a2[3] = 0;

    BOOL v7 = a2[4];
    a2[4] = 0;

    os_log_type_t v8 = a2[5];
    a2[5] = 0;

    free(a2);
    return;
  }
  char v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_http_messaging_deallocate_options";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_http_messaging_deallocate_options";
        char v13 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            char v19 = "nw_http_messaging_deallocate_options";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v15) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_http_messaging_deallocate_options";
        char v13 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_http_messaging_deallocate_options";
        char v13 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
}

BOOL nw_http_messaging_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (void **)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    BOOL v11 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v11);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v11);
  }
  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_73800);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_http1_definition_http1_definition);
  id v4 = *v2;
  void *v2 = options;

  if (nw_protocol_copy_http2_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_4_73885);
  }
  id v5 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
  BOOL v6 = v2[1];
  v2[1] = v5;

  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_13_73886);
  }
  BOOL v7 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
  os_log_type_t v8 = v2[2];
  v2[2] = v7;

  return (BOOL)v2;
}

BOOL __nw_protocol_copy_http3_definition_block_invoke()
{
  if (nw_protocol_http3_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_13_62491);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_http3_identifier::http3_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http3_definition_http3_definition;
  nw_protocol_copy_http3_definition_http3_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http3_definition_http3_definition, (uint64_t)nw_http3_allocate_options, (uint64_t)nw_http3_copy_options, (uint64_t)nw_http3_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http3_definition_http3_definition, (uint64_t)nw_http3_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http3_definition_http3_definition, 0, (uint64_t)nw_http3_serialize_options, (uint64_t)nw_http3_deserialize_options);
  if (nw_protocol_http3_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_13_62491);
  }
  id v2 = (void *)nw_protocol_copy_http3_definition_http3_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http3_identifier::http3_protocol_identifier, v2, (uint64_t)nw_protocol_http3_create, (uint64_t)nw_protocol_http3_accept);
}

BOOL nw_http3_deserialize_options(void *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 80)
    {
      long long v7 = a2[3];
      long long v24 = a2[2];
      long long v25 = v7;
      long long v26 = a2[4];
      long long v8 = a2[1];
      *(_OWORD *)buf = *a2;
      *(_OWORD *)&buf[16] = v8;
      BOOL v9 = nw_http3_copy_options(v5, (uint64_t)buf);
      goto LABEL_4;
    }
    char v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          BOOL v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v21)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          BOOL v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v20 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          BOOL v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v20) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      char v19 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v13, v14, v19, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          BOOL v15 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v21)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          BOOL v15 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v18 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          BOOL v15 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      char v19 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v12) {
    free(v12);
  }
  BOOL v9 = 0;
LABEL_4:

  return v9;
}

BOOL nw_http3_copy_options(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_http3_copy_options";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v20))
    {
LABEL_22:
      if (v12) {
        free(v12);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_http3_copy_options";
        BOOL v15 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v19 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v23 = "nw_http3_copy_options";
            __int16 v24 = 2082;
            uint64_t v25 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v19) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_http3_copy_options";
        BOOL v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_http3_copy_options";
        BOOL v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *((_DWORD *)v4 + 16) = *(_DWORD *)(a2 + 64);
    *((_DWORD *)v4 + 18) = *(_DWORD *)(a2 + 72);
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
    char v5 = *((unsigned char *)v4 + 77) & 0xFE | *(unsigned char *)(a2 + 77) & 1;
    *((unsigned char *)v4 + 77) = v5;
    *((unsigned char *)v4 + 77) = v5 & 0xFD | *(unsigned char *)(a2 + 77) & 2;
    *((unsigned char *)v4 + 76) = *(unsigned char *)(a2 + 76);
    BOOL v6 = _Block_copy(*(const void **)(a2 + 48));
    long long v7 = (void *)*((void *)v4 + 6);
    *((void *)v4 + 6) = v6;

    objc_storeStrong((id *)v4 + 7, *(id *)(a2 + 56));
    long long v8 = _Block_copy(*(const void **)(a2 + 40));
    BOOL v9 = (void *)*((void *)v4 + 5);
    *((void *)v4 + 5) = v8;

    *((_DWORD *)v4 + 17) = *(_DWORD *)(a2 + 68);
    *(_OWORD *)id v4 = *(_OWORD *)a2;
LABEL_4:

    return (BOOL)v4;
  }
  char v16 = __nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  __int16 v23 = "strict_calloc";
  __int16 v24 = 2048;
  uint64_t v25 = 1;
  __int16 v26 = 2048;
  uint64_t v27 = 80;
  __int16 v17 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t nw_http3_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = nw_http3_copy_options(a1, a2);
    char v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = 0;

    BOOL v6 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0;

    *a3 = 80;
    return v4;
  }
  long long v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_http3_serialize_options";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v9, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http3_serialize_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http3_serialize_options";
            __int16 v19 = 2082;
            char v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v14) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http3_serialize_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http3_serialize_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v9) {
    free(v9);
  }
  return 0;
}

BOOL nw_http3_options_are_equal(int a1, void *__s1, void *__s2)
{
  BOOL result = __s1 == __s2;
  if (__s1 != __s2 && __s1)
  {
    if (__s2) {
      return memcmp(__s1, __s2, 0x50uLL) == 0;
    }
  }
  return result;
}

void nw_http3_deallocate_options(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = (void *)a2[6];
    a2[6] = 0;

    uint64_t v4 = (void *)a2[7];
    a2[7] = 0;

    char v5 = (void *)a2[5];
    a2[5] = 0;

    free(a2);
    return;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_http3_deallocate_options";
  long long v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_http3_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        long long v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            char v16 = "nw_http3_deallocate_options";
            __int16 v17 = 2082;
            BOOL v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v12) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_http3_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      long long v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_http3_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
}

BOOL nw_http3_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  long long v7 = __nwlog_obj();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  long long v8 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
LABEL_2:
    v2[16] = 240;
    v2[18] = 2;
    *((unsigned char *)v2 + 77) &= ~1u;
    id v3 = (void *)*((void *)v2 + 6);
    *((void *)v2 + 6) = 0;

    uint64_t v4 = (void *)*((void *)v2 + 7);
    *((void *)v2 + 7) = 0;

    char v5 = (void *)*((void *)v2 + 5);
    *((void *)v2 + 5) = 0;

    v2[17] = 0;
    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL __nw_protocol_copy_http2_definition_block_invoke()
{
  if (nw_protocol_http2_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_85036);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_http2_identifier::http2_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http2_definition_http2_definition;
  nw_protocol_copy_http2_definition_http2_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http2_definition_http2_definition, (uint64_t)nw_http2_allocate_options, (uint64_t)nw_http2_copy_options, (uint64_t)nw_http2_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http2_definition_http2_definition, (uint64_t)nw_http2_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http2_definition_http2_definition, 0, (uint64_t)nw_http2_serialize_options, (uint64_t)nw_http2_deserialize_options);
  if (nw_protocol_http2_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_85036);
  }
  id v2 = (void *)nw_protocol_copy_http2_definition_http2_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http2_identifier::http2_protocol_identifier, v2, (uint64_t)nw_protocol_http2_create, (uint64_t)nw_protocol_http2_accept);
}

BOOL nw_http2_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 32)
    {
      BOOL v7 = nw_http2_copy_options(v5, a2);
      goto LABEL_4;
    }
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http2_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http2_deserialize_options";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http2_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http2_deserialize_options";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http2_copy_options(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    long long v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v20 = "nw_http2_copy_options";
    os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9) {
        free(v9);
      }
      uint64_t v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_http2_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            char v20 = "nw_http2_copy_options";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v16) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_http2_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_http2_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
    v4[24] = v4[24] & 0xFE | *(unsigned char *)(a2 + 24) & 1;
    id v5 = _Block_copy(*(const void **)a2);
    BOOL v6 = *(void **)v4;
    *(void *)uint64_t v4 = v5;

LABEL_4:
    return (BOOL)v4;
  }
  char v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  char v20 = "strict_calloc";
  __int16 v21 = 2048;
  uint64_t v22 = 1;
  __int16 v23 = 2048;
  uint64_t v24 = 32;
  BOOL v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http2_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http2_copy_options(a1, a2);
    *a3 = 32;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http2_serialize_options";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http2_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v15 = "nw_http2_serialize_options";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http2_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http2_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http2_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3];
  }
  return result;
}

void nw_http2_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    free(a2);
    return;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_http2_deallocate_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http2_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v14 = "nw_http2_deallocate_options";
            __int16 v15 = 2082;
            __int16 v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v10) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http2_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http2_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
}

BOOL nw_http2_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[2] = 240;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

uint64_t nw_http1_get_idle_timeout(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http1_options(v1);
    uint64_t idle_timeout = nw_http1_get_idle_timeout();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http1_get_idle_timeout_block_invoke;
    v13[3] = &unk_1E5248E90;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t idle_timeout = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t idle_timeout = 0;
LABEL_5:

  return idle_timeout;
}

void sub_183BF2C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http1_get_idle_timeout_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

void nw_http1_set_connection_pool_width(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http1_options(v3);
    nw_http1_set_connection_pool_width(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http1_set_connection_pool_width_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http1_set_connection_pool_width";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http1_set_connection_pool_width";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http1(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http1_set_connection_pool_width";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http1_set_connection_pool_width";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http1_set_connection_pool_width";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http1_set_connection_pool_width_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http1_get_connection_pool_width(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http1_options(v1);
    uint64_t connection_pool_width = nw_http1_get_connection_pool_width();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http1_get_connection_pool_width_block_invoke;
    v13[3] = &unk_1E5248E90;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t connection_pool_width = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t connection_pool_width = 0;
LABEL_5:

  return connection_pool_width;
}

void sub_183BF3284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http1_get_connection_pool_width_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http2_create_options()
{
  if (nw_protocol_copy_http2_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_4_73885);
  }
  int v0 = (void *)nw_protocol_copy_http2_definition_http2_definition;

  return nw_protocol_create_options(v0);
}

id nw_protocol_copy_http2_definition()
{
  if (nw_protocol_copy_http2_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_4_73885);
  }
  int v0 = (void *)nw_protocol_copy_http2_definition_http2_definition;

  return v0;
}

void nw_http2_set_capsule_handling_disabled(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_capsule_handling_disabled(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_capsule_handling_disabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http2_set_capsule_handling_disabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_capsule_handling_disabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http2_set_capsule_handling_disabled";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_capsule_handling_disabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_capsule_handling_disabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

id nw_http_messaging_options_copy_http2_options(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v24 = __Block_byref_object_copy__5_73857;
      uint64_t v25 = __Block_byref_object_dispose__6_73858;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_messaging_options_copy_http2_options_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183BF3BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_http2(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http2_definition_onceToken[0] != -1) {
      dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_4_73885);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http2_definition_http2_definition);

    return is_equal_unsafe;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_is_http2";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_is_http2";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t __nw_http2_set_capsule_handling_disabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a2 + 24) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_messaging_options_copy_http2_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_http2_get_capsule_handling_disabled(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    uint64_t capsule_handling_disabled = nw_http2_get_capsule_handling_disabled();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v17 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_capsule_handling_disabled_block_invoke;
    v13[3] = &unk_1E5248E90;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t capsule_handling_disabled = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t capsule_handling_disabled = 0;
LABEL_5:

  return capsule_handling_disabled;
}

void sub_183BF427C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_capsule_handling_disabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 24) & 1;
  return 1;
}

void nw_http2_set_idle_timeout(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_http2_set_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_http2_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v17 = "nw_http2_set_idle_timeout";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_http2_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_http2_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http2_set_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_idle_timeout(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    uint64_t idle_timeout = nw_http2_get_idle_timeout();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_idle_timeout_block_invoke;
    v13[3] = &unk_1E5248E90;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t idle_timeout = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t idle_timeout = 0;
LABEL_5:

  return idle_timeout;
}

void sub_183BF48EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 8);
  return 1;
}

void nw_http2_set_stream_receive_window_size(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_stream_receive_window_size(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_stream_receive_window_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http2_set_stream_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_stream_receive_window_size";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http2_set_stream_receive_window_size";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_stream_receive_window_size";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_stream_receive_window_size";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http2_set_stream_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_stream_receive_window_size(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    stream_receive_window_size_t size = nw_http2_get_stream_receive_window_size();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_stream_receive_window_size_block_invoke;
    v13[3] = &unk_1E5248E90;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    stream_receive_window_size_t size = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  stream_receive_window_size_t size = 0;
LABEL_5:

  return stream_receive_window_size;
}

void sub_183BF4F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_stream_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 12);
  return 1;
}

void nw_http2_set_connection_receive_window_size(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_connection_receive_window_size(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_connection_receive_window_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http2_set_connection_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_connection_receive_window_size";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http2_set_connection_receive_window_size";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_connection_receive_window_size";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_connection_receive_window_size";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http2_set_connection_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_connection_receive_window_size(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    connection_receive_window_size_t size = nw_http2_get_connection_receive_window_size();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_connection_receive_window_size_block_invoke;
    v13[3] = &unk_1E5248E90;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    connection_receive_window_size_t size = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  connection_receive_window_size_t size = 0;
LABEL_5:

  return connection_receive_window_size;
}

void sub_183BF55C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_connection_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 16);
  return 1;
}

void *nw_http2_copy_reset_stream_error_callback(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    id v3 = (void *)nw_http2_copy_reset_stream_error_callback();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    int v17 = __Block_byref_object_copy__74035;
    uint64_t v18 = __Block_byref_object_dispose__74036;
    id v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_copy_reset_stream_error_callback_block_invoke;
    v13[3] = &unk_1E5248E90;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_5:

  return v3;
}

void sub_183BF5970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__74035(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__74036(uint64_t a1)
{
}

uint64_t __nw_http2_copy_reset_stream_error_callback_block_invoke(uint64_t a1, const void **a2)
{
  id v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

void nw_http2_set_reset_stream_error_callback(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v5 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_reset_stream_error_callback(v5, v4);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_set_reset_stream_error_callback_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_5;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
        os_log_type_t v10 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v12) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
        os_log_type_t v10 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
        os_log_type_t v10 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t __nw_http2_set_reset_stream_error_callback_block_invoke(uint64_t a1, void **a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *a2;
  *a2 = v3;

  return 1;
}

void nw_http2_set_local_max_webtransport_sessions(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_local_max_webtransport_sessions(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_local_max_webtransport_sessions_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http2_set_local_max_webtransport_sessions";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_local_max_webtransport_sessions";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http2_set_local_max_webtransport_sessions";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_local_max_webtransport_sessions";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http2_set_local_max_webtransport_sessions";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http2_set_local_max_webtransport_sessions_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_local_max_webtransport_sessions(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    uint64_t local_max_webtransport_sessions = nw_http2_get_local_max_webtransport_sessions();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_local_max_webtransport_sessions_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t local_max_webtransport_sessions = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t local_max_webtransport_sessions = 0;
LABEL_5:

  return local_max_webtransport_sessions;
}

void sub_183BF6370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_local_max_webtransport_sessions_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 20);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http3_create_options()
{
  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_13_73886);
  }
  int v0 = (void *)nw_protocol_copy_http3_definition_http3_definition;

  return nw_protocol_create_options(v0);
}

id nw_protocol_copy_http3_definition()
{
  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_13_73886);
  }
  int v0 = (void *)nw_protocol_copy_http3_definition_http3_definition;

  return v0;
}

void nw_http3_set_idle_timeout(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http3_set_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http3_set_idle_timeout";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

id nw_http_messaging_options_copy_http3_options(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v24 = __Block_byref_object_copy__5_73857;
      uint64_t v25 = __Block_byref_object_dispose__6_73858;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_messaging_options_copy_http3_options_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183BF6CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_http3(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http3_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_13_73886);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http3_definition_http3_definition);

    return is_equal_unsafe;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_is_http3";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_is_http3";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t __nw_http3_set_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_messaging_options_copy_http3_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_http3_get_idle_timeout(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t idle_timeout = nw_http3_get_idle_timeout();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_idle_timeout_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t idle_timeout = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t idle_timeout = 0;
LABEL_5:

  return idle_timeout;
}

void sub_183BF7354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 64);
  return 1;
}

void nw_http3_set_keepalive_mode(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_keepalive_mode(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_keepalive_mode_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http3_set_keepalive_mode";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_keepalive_mode";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http3_set_keepalive_mode";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_keepalive_mode";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_keepalive_mode";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http3_set_keepalive_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http3_get_keepalive_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t keepalive_mode = nw_http3_get_keepalive_mode();

    goto LABEL_14;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v18 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_http3_get_keepalive_mode_block_invoke;
    v14[3] = &unk_1E5248E90;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    uint64_t v4 = *(void *)&buf[8];
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == 1)
    {
      if (nw_utilities_get_self_is_daemon::onceToken != -1) {
        dispatch_once(&nw_utilities_get_self_is_daemon::onceToken, &__block_literal_global_48_44718);
      }
      if (nw_utilities_get_self_is_daemon::is_daemon)
      {
        if (nw_http3_self_is_media_daemon_onceToken != -1) {
          dispatch_once(&nw_http3_self_is_media_daemon_onceToken, &__block_literal_global_113);
        }
        uint64_t v4 = *(void *)&buf[8];
        if (!nw_http3_self_is_media_daemon_is_media_daemon) {
          *(_DWORD *)(*(void *)&buf[8] + 24) = 2;
        }
      }
      else
      {
        uint64_t v4 = *(void *)&buf[8];
      }
    }
    uint64_t keepalive_mode = *(unsigned int *)(v4 + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_14;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_31:
  if (v7) {
    free(v7);
  }
  uint64_t keepalive_mode = 0;
LABEL_14:

  return keepalive_mode;
}

void sub_183BF7A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_keepalive_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 72);
  return 1;
}

uint64_t __nw_http3_self_is_media_daemon_block_invoke()
{
  if (nw_utilities_get_self_name::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_11_44681);
  }
  int v0 = (const char *)nw_utilities_get_self_name::name;
  uint64_t result = strcmp((const char *)nw_utilities_get_self_name::name, "mediaserverd");
  if (result)
  {
    uint64_t result = strcmp(v0, "mediaplaybackd");
    BOOL v2 = result == 0;
  }
  else
  {
    BOOL v2 = 1;
  }
  nw_http3_self_is_media_daemon_is_media_daemon = v2;
  return result;
}

void nw_http3_set_0rtt_enabled(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_0rtt_enabled(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_0rtt_enabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http3_set_0rtt_enabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_0rtt_enabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http3_set_0rtt_enabled";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_0rtt_enabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http3_set_0rtt_enabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http3_set_0rtt_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 77) = *(unsigned char *)(a2 + 77) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

uint64_t nw_http3_get_0rtt_enabled(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t _0rtt_enabled = nw_http3_get_0rtt_enabled();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v17 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_0rtt_enabled_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t _0rtt_enabled = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t _0rtt_enabled = 0;
LABEL_5:

  return _0rtt_enabled;
}

void sub_183BF8150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_0rtt_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 77) & 1;
  return 1;
}

void nw_http3_set_resumable_session_handler(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    id v10 = nw_http_messaging_options_copy_http3_options(v7);
    nw_http3_set_resumable_session_handler(v10, a2, v8, v9);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v7))
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __nw_http3_set_resumable_session_handler_block_invoke;
    v18[3] = &unk_1E5248F00;
    id v20 = v9;
    id v19 = v8;
    char v21 = a2;
    nw_protocol_options_access_handle(v7, v18);

    goto LABEL_5;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "nw_http3_set_resumable_session_handler";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v12, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_http3_set_resumable_session_handler";
        char v15 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v25 = "nw_http3_set_resumable_session_handler";
            __int16 v26 = 2082;
            uint64_t v27 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v17) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_http3_set_resumable_session_handler";
        char v15 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_http3_set_resumable_session_handler";
        char v15 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v12) {
    free(v12);
  }
LABEL_5:
}

uint64_t __nw_http3_set_resumable_session_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 48);
  *(void *)(a2 + 48) = v4;

  objc_storeStrong((id *)(a2 + 56), *(id *)(a1 + 32));
  *(unsigned char *)(a2 + 76) = *(unsigned char *)(a1 + 48);
  return 1;
}

void *nw_http3_copy_resumable_session_handler(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    id v3 = (void *)nw_http3_copy_resumable_session_handler();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    BOOL v17 = __Block_byref_object_copy__74035;
    uint64_t v18 = __Block_byref_object_dispose__74036;
    id v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_copy_resumable_session_handler_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_5:

  return v3;
}

void sub_183BF8888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_copy_resumable_session_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 48));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

id nw_http3_copy_resumable_session_handler_queue(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    id v3 = (id)nw_http3_copy_resumable_session_handler_queue();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    BOOL v17 = __Block_byref_object_copy__5_73857;
    uint64_t v18 = __Block_byref_object_dispose__6_73858;
    id v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_copy_resumable_session_handler_queue_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_5:

  return v3;
}

void sub_183BF8C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_copy_resumable_session_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_http3_get_sessions_to_request(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t sessions_to_request = nw_http3_get_sessions_to_request();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v17 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_sessions_to_request_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t sessions_to_request = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t sessions_to_request = 0;
LABEL_5:

  return sessions_to_request;
}

void sub_183BF8FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_sessions_to_request_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 76);
  return 1;
}

void nw_http3_set_resumable_session_agent(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_resumable_session_agent(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_resumable_session_agent_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http3_set_resumable_session_agent_block_invoke(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)*(void *)(a1 + 32);
  return 1;
}

void nw_http3_get_resumable_session_agent(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_get_resumable_session_agent(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_get_resumable_session_agent_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http3_get_resumable_session_agent_block_invoke(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)*(void *)(a1 + 32) = *a2;
  return 1;
}

void nw_http3_set_initial_remote_settings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    id v8 = nw_http_messaging_options_copy_http3_options(v7);
    nw_http3_set_initial_remote_settings(v8, a2, a3, a4);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v7))
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_http3_set_initial_remote_settings_block_invoke;
    v16[3] = &__block_descriptor_56_e9_B16__0_v8l;
    void v16[4] = a2;
    v16[5] = a3;
    v16[6] = a4;
    nw_protocol_options_access_handle(v7, v16);
    goto LABEL_5;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_http3_set_initial_remote_settings";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = v18;
      if (os_log_type_enabled(v11, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_http3_set_initial_remote_settings";
        char v13 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = v18;
        BOOL v15 = os_log_type_enabled(v11, v18);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_http3_set_initial_remote_settings";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v15) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_http3_set_initial_remote_settings";
        char v13 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = v18;
      if (os_log_type_enabled(v11, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_http3_set_initial_remote_settings";
        char v13 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v10) {
    free(v10);
  }
LABEL_5:
}

uint64_t __nw_http3_set_initial_remote_settings_block_invoke(void *a1, uint64_t a2)
{
  *(void *)(a2 + 16) = a1[4];
  *(void *)(a2 + 24) = a1[5];
  *(void *)(a2 + 32) = a1[6];
  *(unsigned char *)(a2 + 77) |= 2u;
  return 1;
}

uint64_t nw_http3_get_initial_remote_settings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    id v8 = nw_http_messaging_options_copy_http3_options(v7);
    uint64_t initial_remote_settings = nw_http3_get_initial_remote_settings(v8, a2, a3, a4);

    goto LABEL_8;
  }
  if (!nw_protocol_options_is_http3(v7))
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26)) {
      goto LABEL_61;
    }
    if (v27 != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = v27;
        if (os_log_type_enabled(v13, v27))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v27;
      BOOL v20 = os_log_type_enabled(v13, v27);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if (!v20) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446466;
      unint64_t v29 = "nw_http3_get_initial_remote_settings";
      __int16 v30 = 2082;
      __int16 v31 = backtrace_string;
      __int16 v21 = "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s";
      goto LABEL_41;
    }
    char v13 = __nwlog_obj();
    os_log_type_t v14 = v27;
    if (!os_log_type_enabled(v13, v27)) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_59:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_60;
  }
  if (!a2)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26)) {
      goto LABEL_61;
    }
    if (v27 != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = v27;
        if (os_log_type_enabled(v13, v27))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null max_field_section_size, backtrace limit exceeded";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v27;
      BOOL v22 = os_log_type_enabled(v13, v27);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null max_field_section_size, no backtrace";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if (!v22) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446466;
      unint64_t v29 = "nw_http3_get_initial_remote_settings";
      __int16 v30 = 2082;
      __int16 v31 = backtrace_string;
      __int16 v21 = "%{public}s called with null max_field_section_size, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
    char v13 = __nwlog_obj();
    os_log_type_t v14 = v27;
    if (!os_log_type_enabled(v13, v27)) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    BOOL v15 = "%{public}s called with null max_field_section_size";
    goto LABEL_59;
  }
  if (a3)
  {
    if (a4)
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = __nw_http3_get_initial_remote_settings_block_invoke;
      v25[3] = &__block_descriptor_56_e9_B16__0_v8l;
      v25[4] = a2;
      v25[5] = a3;
      v25[6] = a4;
      uint64_t initial_remote_settings = nw_protocol_options_access_handle(v7, v25);
      goto LABEL_8;
    }
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26)) {
      goto LABEL_61;
    }
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v29 = "nw_http3_get_initial_remote_settings";
        BOOL v15 = "%{public}s called with null blocked_streams";
        goto LABEL_59;
      }
LABEL_60:

      goto LABEL_61;
    }
    if (!v26)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v29 = "nw_http3_get_initial_remote_settings";
        BOOL v15 = "%{public}s called with null blocked_streams, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v14 = v27;
    BOOL v24 = os_log_type_enabled(v13, v27);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v29 = "nw_http3_get_initial_remote_settings";
        BOOL v15 = "%{public}s called with null blocked_streams, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v24) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    __int16 v30 = 2082;
    __int16 v31 = backtrace_string;
    __int16 v21 = "%{public}s called with null blocked_streams, dumping backtrace:%{public}s";
    goto LABEL_41;
  }
  char v17 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v29 = "nw_http3_get_initial_remote_settings";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v27 = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v12, &v27, &v26))
  {
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v27;
      if (!os_log_type_enabled(v13, v27)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v29 = "nw_http3_get_initial_remote_settings";
      BOOL v15 = "%{public}s called with null max_table_capacity";
      goto LABEL_59;
    }
    if (!v26)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v29 = "nw_http3_get_initial_remote_settings";
        BOOL v15 = "%{public}s called with null max_table_capacity, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v14 = v27;
    BOOL v23 = os_log_type_enabled(v13, v27);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v29 = "nw_http3_get_initial_remote_settings";
        BOOL v15 = "%{public}s called with null max_table_capacity, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v23) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    __int16 v30 = 2082;
    __int16 v31 = backtrace_string;
    __int16 v21 = "%{public}s called with null max_table_capacity, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v13, v14, v21, buf, 0x16u);
LABEL_42:

    free(backtrace_string);
  }
LABEL_61:
  if (v12) {
    free(v12);
  }
  uint64_t initial_remote_settings = 0;
LABEL_8:

  return initial_remote_settings;
}

uint64_t __nw_http3_get_initial_remote_settings_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 77);
  if ((v2 & 2) != 0)
  {
    id v3 = *(void **)(a1 + 40);
    **(void **)(a1 + 32) = *(void *)(a2 + 16);
    *id v3 = *(void *)(a2 + 24);
    **(void **)(a1 + 48) = *(void *)(a2 + 32);
  }
  return (v2 >> 1) & 1;
}

void *nw_http3_copy_application_error_callback(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    id v3 = (void *)nw_http3_copy_application_error_callback();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    char v17 = __Block_byref_object_copy__74035;
    os_log_type_t v18 = __Block_byref_object_dispose__74036;
    id v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_copy_application_error_callback_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_5:

  return v3;
}

void sub_183BFA4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_copy_application_error_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 40));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

void __nw_get_http3_override_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v0 = getenv("CFN_USE_HTTP3");
  if (v0)
  {
    nw_get_http3_override_int value = strtol(v0, 0, 10);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v1 = (id)gLogObj;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      int v2 = 136446466;
      id v3 = "nw_get_http3_override_block_invoke";
      __int16 v4 = 1024;
      int v5 = nw_get_http3_override_value;
      _os_log_impl(&dword_1830D4000, v1, OS_LOG_TYPE_INFO, "%{public}s HTTP/3 override %d via env", (uint8_t *)&v2, 0x12u);
    }
  }
}

void nw_http3_set_application_error_callback(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v5 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_application_error_callback(v5, v4);

    goto LABEL_9;
  }
  if (!v3)
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_http3_set_application_error_callback";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v28 = "nw_http3_set_application_error_callback";
          __int16 v29 = 2082;
          __int16 v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v10) {
          goto LABEL_9;
        }
LABEL_44:
        free(v10);
        goto LABEL_9;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (v4)
  {
    uint64_t v6 = (id *)v3;
    id v7 = v6[1];

    if (nw_protocol_copy_http3_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_13_73886);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http3_definition_http3_definition);

    if (is_equal_unsafe)
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __nw_http3_set_application_error_callback_block_invoke;
      v23[3] = &unk_1E5248ED8;
      id v24 = v4;
      nw_protocol_options_access_handle(v6, v23);
    }
    goto LABEL_9;
  }
  char v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v28 = "nw_http3_set_application_error_callback";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v28 = "nw_http3_set_application_error_callback";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null callback", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v25)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v28 = "nw_http3_set_application_error_callback";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null callback, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v28 = "nw_http3_set_application_error_callback";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null callback, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v28 = "nw_http3_set_application_error_callback";
    __int16 v29 = 2082;
    __int16 v30 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null callback, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_44;
  }
LABEL_9:
}

uint64_t __nw_http3_set_application_error_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *(void **)(a2 + 40);
  *(void *)(a2 + 40) = v3;

  return 1;
}

void nw_http3_set_stream_mode(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_stream_mode(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_stream_mode_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_http3_set_stream_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http3_set_stream_mode";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v17 = "nw_http3_set_stream_mode";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http3_set_stream_mode";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http3_set_stream_mode";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_5:
}

uint64_t __nw_http3_set_stream_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http3_get_stream_mode(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t stream_mode = nw_http3_get_stream_mode();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_stream_mode_block_invoke;
    v13[3] = &unk_1E5248E90;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t stream_mode = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  uint64_t stream_mode = 0;
LABEL_5:

  return stream_mode;
}

void sub_183BFB264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_stream_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 68);
  return 1;
}

id nw_protocol_copy_http_definition()
{
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  int v0 = (void *)nw_protocol_copy_http_definition_http_definition;

  return v0;
}

void __nw_protocol_copy_http_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(1, "http");
  id v1 = (void *)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_copy_http_definition_http_definition = (uint64_t)named;

  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_copy_http_definition_http_definition, (uint64_t)nw_http_allocate_metadata, (uint64_t)nw_http_deallocate_metadata);
  id v2 = (void *)nw_protocol_copy_http_definition_http_definition;

  nw_protocol_definition_set_metadata_comparator(v2, (uint64_t)nw_http_compare_metadata);
}

uint64_t nw_http_compare_metadata(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    BOOL v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "nw_http_compare_metadata";
    id v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v24, &type, &v33)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle1";
LABEL_48:
        _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
      }
LABEL_49:

LABEL_50:
      if (v24) {
        free(v24);
      }
      goto LABEL_19;
    }
    if (!v33)
    {
      char v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle1, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v30 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle1, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v36 = "nw_http_compare_metadata";
      __int16 v37 = 2082;
      unint64_t v38 = backtrace_string;
      uint64_t v31 = "%{public}s called with null handle1, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_1830D4000, v25, v26, v31, buf, 0x16u);
    }
LABEL_39:

    free(backtrace_string);
    goto LABEL_50;
  }
  if (!a3)
  {
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "nw_http_compare_metadata";
    id v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v24, &type, &v33)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle2";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v33)
    {
      char v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v32 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle2, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v36 = "nw_http_compare_metadata";
      __int16 v37 = 2082;
      unint64_t v38 = backtrace_string;
      uint64_t v31 = "%{public}s called with null handle2, dumping backtrace:%{public}s";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  if (*(_DWORD *)(a2 + 48) == *(_DWORD *)(a3 + 48))
  {
    uint64_t v6 = *(void **)(a2 + 24);
    id v7 = *(void **)(a3 + 24);
    if (v6)
    {
      if (!v7) {
        goto LABEL_19;
      }
      id v8 = v6;
      id v9 = v7;
      int is_equal = _nw_http_fields_is_equal((uint64_t)v8);

      if (!is_equal) {
        goto LABEL_19;
      }
    }
    else if (v7)
    {
      goto LABEL_19;
    }
    BOOL v11 = *(void **)(a2 + 32);
    os_log_type_t v12 = *(void **)(a3 + 32);
    if (v11)
    {
      if (!v12) {
        goto LABEL_19;
      }
      id v13 = v11;
      id v14 = v12;
      int v15 = _nw_http_fields_is_equal((uint64_t)v13);

      if (!v15) {
        goto LABEL_19;
      }
    }
    else if (v12)
    {
      goto LABEL_19;
    }
    os_log_type_t v16 = *(void **)(a2 + 40);
    int v17 = *(void **)(a3 + 40);
    if (v16)
    {
      if (v17)
      {
        id v18 = v16;
        id v19 = v17;
        int v20 = _nw_http_fields_is_equal((uint64_t)v18);

        if (v20) {
          goto LABEL_21;
        }
      }
    }
    else if (!v17)
    {
LABEL_21:
      uint64_t v21 = 1;
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v21 = 0;
LABEL_20:

  return v21;
}

void nw_http_deallocate_metadata(uint64_t a1, void *a2)
{
  id v3 = (void *)a2[2];
  a2[2] = 0;

  id v4 = (void *)a2[3];
  a2[3] = 0;

  id v5 = (void *)a2[4];
  a2[4] = 0;

  uint64_t v6 = (void *)a2[5];
  a2[5] = 0;

  free(a2);
}

BOOL nw_http_allocate_metadata(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x38uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http_cookie_definition()
{
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
  }
  int v0 = (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition;

  return v0;
}

BOOL __nw_protocol_copy_http_cookie_definition_block_invoke()
{
  if (nw_protocol_http_cookie_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15821);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition;
  nw_protocol_copy_http_cookie_definition_http_cookie_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, (uint64_t)nw_http_cookie_allocate_options, (uint64_t)nw_http_cookie_copy_options, (uint64_t)nw_http_cookie_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, (uint64_t)nw_http_cookie_options_compare);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, (uint64_t)nw_http_cookie_allocate_metadata, (uint64_t)nw_http_cookie_deallocate_metadata);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, 0, (uint64_t)nw_http_cookie_serialize_options, (uint64_t)nw_http_cookie_deserialize_options);
  if (nw_protocol_http_cookie_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15821);
  }
  id v2 = (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier, v2, (uint64_t)nw_protocol_http_cookie_create, 0);
}

BOOL nw_http_cookie_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (a2)
  {
    if (a3 == 40)
    {
      BOOL v7 = nw_http_cookie_copy_options(v5, a2);
      goto LABEL_4;
    }
    id v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_http_cookie_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_http_cookie_deserialize_options";
          id v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_http_cookie_deserialize_options";
          id v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), backt"
                "race limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_http_cookie_deserialize_options";
          id v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v22 = "nw_http_cookie_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      int v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), dumping b"
            "acktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_http_cookie_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_http_cookie_deserialize_options";
          id v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_http_cookie_deserialize_options";
          id v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_http_cookie_deserialize_options";
          id v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v22 = "nw_http_cookie_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      int v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_cookie_copy_options(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_http_cookie_copy_options";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v22))
    {
LABEL_27:
      if (v12) {
        free(v12);
      }
      id v4 = 0;
      goto LABEL_7;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_http_cookie_copy_options";
        int v15 = "%{public}s called with null existing_handle";
LABEL_25:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v21 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v25 = "nw_http_cookie_copy_options";
            __int16 v26 = 2082;
            uint64_t v27 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (!v21) {
          goto LABEL_26;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_http_cookie_copy_options";
        int v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_25;
      }
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_http_cookie_copy_options";
        int v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
LABEL_26:

    goto LABEL_27;
  }
  id v4 = (id *)malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (!v4)
  {
    BOOL v16 = __nwlog_obj();
    os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    uint64_t v25 = "strict_calloc";
    __int16 v26 = 2048;
    uint64_t v27 = 1;
    __int16 v28 = 2048;
    uint64_t v29 = 40;
    int v17 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v17);
    if (result) {
      goto LABEL_30;
    }
    free(v17);
  }
  objc_storeStrong(v4, *(id *)a2);
  id v5 = _Block_copy(*(const void **)(a2 + 8));
  id v6 = v4[1];
  v4[1] = v5;

  BOOL v7 = *(const char **)(a2 + 16);
  if (!v7)
  {
LABEL_6:
    objc_storeStrong(v4 + 3, *(id *)(a2 + 24));
    char v9 = (_BYTE)v4[4] & 0xFE | *(unsigned char *)(a2 + 32) & 1;
    *((unsigned char *)v4 + 32) = v9;
    *((unsigned char *)v4 + 32) = v9 & 0xF1 | *(unsigned char *)(a2 + 32) & 0xE;
LABEL_7:

    return (BOOL)v4;
  }
  id v8 = strdup(v7);
  if (v8)
  {
LABEL_5:
    v4[2] = v8;
    goto LABEL_6;
  }
  BOOL v18 = __nwlog_obj();
  os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "strict_strdup";
  char v19 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v19);
  if (!result)
  {
    free(v19);
    goto LABEL_5;
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL nw_http_cookie_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_cookie_copy_options(a1, a2);
    *a3 = 40;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v15 = "nw_http_cookie_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_http_cookie_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            int v15 = "nw_http_cookie_serialize_options";
            __int16 v16 = 2082;
            int v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_http_cookie_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_http_cookie_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

void nw_http_cookie_deallocate_metadata(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_http_cookie_allocate_metadata(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_cookie_options_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    if (*(void *)a2 != *(void *)a3
      || *(void *)(a2 + 8) != *(void *)(a3 + 8)
      || *(void *)(a2 + 24) != *(void *)(a3 + 24))
    {
      return 0;
    }
    id v6 = *(const char **)(a2 + 16);
    BOOL v7 = *(const char **)(a3 + 16);
    if (v6 != v7 && v6 && v7)
    {
      if (!strcmp(v6, v7)) {
        return ((*(unsigned char *)(a3 + 32) ^ *(unsigned char *)(a2 + 32)) & 7) == 0
      }
            && ((*(unsigned char *)(a3 + 32) ^ *(unsigned char *)(a2 + 32)) & 8) == 0;
    }
    else if (v6 == v7)
    {
      return ((*(unsigned char *)(a3 + 32) ^ *(unsigned char *)(a2 + 32)) & 7) == 0
          && ((*(unsigned char *)(a3 + 32) ^ *(unsigned char *)(a2 + 32)) & 8) == 0;
    }
    return 0;
  }
  return result;
}

void nw_http_cookie_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    id v4 = a2[1];
    a2[1] = 0;

    id v5 = a2[2];
    if (v5)
    {
      free(v5);
      a2[2] = 0;
    }
    id v6 = a2[3];
    a2[3] = 0;

    free(a2);
    return;
  }
  BOOL v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_http_cookie_deallocate_options";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http_cookie_deallocate_options";
        BOOL v11 = "%{public}s called with null allocated_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            int v17 = "nw_http_cookie_deallocate_options";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v13) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http_cookie_deallocate_options";
        BOOL v11 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_20;
      }
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_http_cookie_deallocate_options";
        BOOL v11 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
}

BOOL nw_http_cookie_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (id *)malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    id v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  if (nw_http_cookie_storage_copy_shared_token != -1) {
    dispatch_once(&nw_http_cookie_storage_copy_shared_token, &__block_literal_global_64229);
  }
  objc_storeStrong(v2, (id)nw_http_cookie_storage_copy_shared_storage);

  return (BOOL)v2;
}

id nw_protocol_copy_http_alt_svc_definition()
{
  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_20_74269);
  }
  int v0 = (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;

  return v0;
}

BOOL __nw_protocol_copy_http_alt_svc_definition_block_invoke()
{
  if (nw_protocol_http_alt_svc_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_71796);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)nw_protocol_http_alt_svc_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
  nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition, (uint64_t)nw_http_alt_svc_allocate_options, (uint64_t)nw_http_alt_svc_copy_options, (uint64_t)nw_http_alt_svc_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition, (uint64_t)nw_http_alt_svc_options_compare);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition, 0, (uint64_t)nw_http_alt_svc_serialize_options, (uint64_t)nw_http_alt_svc_deserialize_options);
  if (nw_protocol_http_alt_svc_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_71796);
  }
  id v2 = (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;

  return nw_protocol_register_handle((uint64_t)nw_protocol_http_alt_svc_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_alt_svc_create, 0);
}

BOOL nw_http_alt_svc_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 16)
    {
      BOOL v7 = nw_http_alt_svc_copy_options(v5, a2);
      goto LABEL_4;
    }
    char v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_http_alt_svc_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), back"
                "trace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      char v22 = "nw_http_alt_svc_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      int v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), dumping "
            "backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_http_alt_svc_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      char v22 = "nw_http_alt_svc_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      int v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_alt_svc_copy_options(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http_alt_svc_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_alt_svc_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http_alt_svc_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_alt_svc_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_alt_svc_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = (id *)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    objc_storeStrong(v4, *(id *)a2);
    *((unsigned char *)v4 + 8) = (_BYTE)v4[1] & 0xFE | *(unsigned char *)(a2 + 8) & 1;
LABEL_4:

    return (BOOL)v4;
  }
  BOOL v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v18 = "strict_calloc";
  __int16 v19 = 2048;
  uint64_t v20 = 1;
  __int16 v21 = 2048;
  uint64_t v22 = 16;
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_alt_svc_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_alt_svc_copy_options(a1, a2);
    *a3 = 16;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http_alt_svc_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_alt_svc_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v15 = "nw_http_alt_svc_serialize_options";
            __int16 v16 = 2082;
            int v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_alt_svc_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_alt_svc_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_alt_svc_options_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *(void *)a2 == *(void *)a3 && ((*(unsigned __int8 *)(a3 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0;
  }
  return result;
}

void nw_http_alt_svc_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    free(a2);
    return;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_http_alt_svc_deallocate_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http_alt_svc_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v14 = "nw_http_alt_svc_deallocate_options";
            __int16 v15 = 2082;
            __int16 v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v10) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http_alt_svc_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http_alt_svc_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
}

BOOL nw_http_alt_svc_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (id *)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    id v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  if (nw_http_alt_svc_storage_copy_shared_token != -1) {
    dispatch_once(&nw_http_alt_svc_storage_copy_shared_token, &__block_literal_global_52932);
  }
  objc_storeStrong(v2, (id)nw_http_alt_svc_storage_copy_shared_storage);

  return (BOOL)v2;
}

NWConcrete_nw_protocol_options *nw_http_cookie_create_options()
{
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
  }
  int v0 = (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition;

  return nw_protocol_create_options(v0);
}

NWConcrete_nw_protocol_options *nw_http_alt_svc_create_options()
{
  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_20_74269);
  }
  int v0 = (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;

  return nw_protocol_create_options(v0);
}

const char *nw_http_version_to_string(unsigned int a1)
{
  if (a1 > 5) {
    return "<unknown>";
  }
  else {
    return off_1E5249248[a1];
  }
}

char *nw_http_version_get_alpn(int a1)
{
  if ((a1 - 3) > 2) {
    return 0;
  }
  else {
    return off_1E5249278[a1 - 3];
  }
}

NWConcrete_nw_protocol_options *nw_http_authentication_create_options()
{
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  int v0 = (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition;

  return nw_protocol_create_options(v0);
}

BOOL __nw_protocol_copy_http_authentication_definition_block_invoke()
{
  if (nw_protocol_http_authentication_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13911);
  }
  int v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_authentication_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
  nw_protocol_copy_http_authentication_definition_http_authentication_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition, (uint64_t)nw_http_authentication_allocate_options, (uint64_t)nw_http_authentication_copy_options, (uint64_t)nw_http_authentication_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition, (uint64_t)nw_http_authentication_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition, 0, (uint64_t)nw_http_authentication_serialize_options, (uint64_t)nw_http_authentication_deserialize_options);
  if (nw_protocol_http_authentication_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13911);
  }
  id v2 = (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_authentication_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_authentication_create, 0);
}

BOOL nw_http_authentication_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 48)
    {
      BOOL v7 = nw_http_authentication_copy_options(v5, a2);
      goto LABEL_4;
    }
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_authentication_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        char v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)"
                "), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_authentication_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      uint64_t v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)), d"
            "umping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_authentication_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        char v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_authentication_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      uint64_t v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_authentication_copy_options(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_http_authentication_copy_options";
    os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9) {
        free(v9);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_http_authentication_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_http_authentication_copy_options";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v16) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_http_authentication_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_http_authentication_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = (id *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    objc_storeStrong(v4 + 5, *(id *)(a2 + 40));
    id v5 = _Block_copy(*(const void **)a2);
    id v6 = *v4;
    *id v4 = v5;

    objc_storeStrong(v4 + 1, *(id *)(a2 + 8));
    objc_storeStrong(v4 + 2, *(id *)(a2 + 16));
    objc_storeStrong(v4 + 3, *(id *)(a2 + 24));
    objc_storeStrong(v4 + 4, *(id *)(a2 + 32));
LABEL_4:

    return (BOOL)v4;
  }
  BOOL v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v20 = "strict_calloc";
  __int16 v21 = 2048;
  uint64_t v22 = 1;
  __int16 v23 = 2048;
  uint64_t v24 = 48;
  BOOL v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_authentication_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_authentication_copy_options(a1, a2);
    *a3 = 48;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_http_authentication_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_http_authentication_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v15 = "nw_http_authentication_serialize_options";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_http_authentication_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_http_authentication_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_authentication_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4] && a2[5] == a3[5];
  }
  return result;
}

void nw_http_authentication_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    id v4 = a2[5];
    a2[5] = 0;

    id v5 = a2[1];
    a2[1] = 0;

    id v6 = a2[2];
    a2[2] = 0;

    BOOL v7 = a2[3];
    a2[3] = 0;

    os_log_type_t v8 = a2[4];
    a2[4] = 0;

    free(a2);
    return;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_http_authentication_deallocate_options";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_http_authentication_deallocate_options";
        BOOL v13 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            char v19 = "nw_http_authentication_deallocate_options";
            __int16 v20 = 2082;
            __int16 v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v15) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_http_authentication_deallocate_options";
        BOOL v13 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_http_authentication_deallocate_options";
        BOOL v13 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
}

BOOL nw_http_authentication_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (id *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    id v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  if (nw_authentication_credential_storage_copy_shared_token != -1) {
    dispatch_once(&nw_authentication_credential_storage_copy_shared_token, &__block_literal_global_26332);
  }
  objc_storeStrong(v2 + 1, (id)nw_authentication_credential_storage_copy_shared_storage);

  return (BOOL)v2;
}

id nw_protocol_copy_http_authentication_definition()
{
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  int v0 = (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition;

  return v0;
}

BOOL nw_protocol_options_is_http_authentication(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    return is_equal_unsafe;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_options_is_http_authentication";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_options_is_http_authentication";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

void nw_http_authentication_options_set_challenge_handler(void *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
          __int16 v32 = 2082;
          char v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_41:
        free(v12);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  os_log_type_t v8 = (id *)v5;
  id v9 = v8[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __nw_http_authentication_options_set_challenge_handler_block_invoke;
    v25[3] = &unk_1E52491D8;
    id v27 = v6;
    id v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }
  BOOL v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v12, &type, &v28)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s protocol options are not http authentication", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v28)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s protocol options are not http authentication, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v20 = (char *)__nw_create_backtrace_string();
  char v13 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s protocol options are not http authentication, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v31 = "nw_http_authentication_options_set_challenge_handler";
    __int16 v32 = 2082;
    char v33 = v20;
    _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_authentication_options_set_challenge_handler_block_invoke(uint64_t a1, void **a2)
{
  id v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *a2;
  *a2 = v4;

  objc_storeStrong(a2 + 5, *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_authentication_options_copy_challenge_handler_block_invoke(uint64_t a1, const void **a2)
{
  id v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

uint64_t __nw_http_authentication_options_copy_challenge_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_authentication_options_copy_credential_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_authentication_options_set_credential_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_http_authentication_options_set_credential_storage";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_http_authentication_options_set_credential_storage";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_authentication_options_set_credential_storage_block_invoke;
    v22[3] = &unk_1E5248F68;
    id v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v27 = "nw_http_authentication_options_set_credential_storage";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http_authentication", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    id v27 = "nw_http_authentication_options_set_credential_storage";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_authentication_options_set_credential_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_http_authentication_options_copy_credential_cache(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      char v24 = __Block_byref_object_copy__5_73857;
      uint64_t v25 = __Block_byref_object_dispose__6_73858;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_authentication_options_copy_credential_cache_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_authentication", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C001F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_authentication_options_copy_credential_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_authentication_options_set_credential_cache(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_authentication_options_set_credential_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          char v33 = "nw_http_authentication_options_set_credential_cache";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_58:
        free(v10);
        goto LABEL_7;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v4)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_authentication_options_set_credential_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null credential_cache", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s called with null credential_cache, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null credential_cache, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_http_authentication_options_set_credential_cache";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null credential_cache, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  id v6 = (id *)v3;
  id v7 = v6[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (!is_equal_unsafe)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_authentication_options_set_credential_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s protocol options are not http_authentication", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_http_authentication_options_set_credential_cache";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v20);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __nw_http_authentication_options_set_credential_cache_block_invoke;
  v28[3] = &unk_1E5248F68;
  id v29 = v5;
  nw_protocol_options_access_handle(v6, v28);

LABEL_7:
}

uint64_t __nw_http_authentication_options_set_credential_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_authentication_options_copy_h1_fallback_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_authentication_options_set_h1_fallback_cache(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_58:
        free(v10);
        goto LABEL_7;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v4)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null h1_fallback_cache", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s called with null h1_fallback_cache, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null h1_fallback_cache, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null h1_fallback_cache, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  id v6 = (id *)v3;
  id v7 = v6[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (!is_equal_unsafe)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s protocol options are not http_authentication", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_http_authentication_options_set_h1_fallback_cache";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v20);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __nw_http_authentication_options_set_h1_fallback_cache_block_invoke;
  v28[3] = &unk_1E5248F68;
  id v29 = v5;
  nw_protocol_options_access_handle(v6, v28);

LABEL_7:
}

uint64_t __nw_http_authentication_options_set_h1_fallback_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_http_authentication_options_copy_appsso_h1_fallback_headers(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v24 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_authentication_options_copy_appsso_h1_fallback_headers_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_authentication", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C0170C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_authentication_options_copy_appsso_h1_fallback_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(id *)(a2 + 32);
  return 1;
}

void nw_http_authentication_options_set_appsso_h1_fallback_headers(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  uint64_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_authentication_options_set_appsso_h1_fallback_headers_block_invoke;
    v22[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v22[4] = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v9, &type, &v23)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http_authentication", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
    __int16 v27 = 2082;
    __int16 v28 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_authentication_options_set_appsso_h1_fallback_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

const char *nw_http_encoding_type_to_string(unsigned int a1)
{
  if (a1 > 5) {
    return "<unknown>";
  }
  else {
    return off_1E5249290[a1];
  }
}

NWConcrete_nw_protocol_options *nw_http_encoding_create_options()
{
  if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_38);
  }
  int v0 = (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition;

  return nw_protocol_create_options(v0);
}

BOOL __nw_protocol_copy_http_encoding_definition_block_invoke()
{
  if (nw_protocol_http_encoding_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_encoding_identifier::onceToken, &__block_literal_global_33402);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)nw_protocol_http_encoding_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition;
  nw_protocol_copy_http_encoding_definition_http_encoding_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition, (uint64_t)nw_http_encoding_allocate_options, (uint64_t)nw_http_encoding_copy_options, (uint64_t)nw_http_encoding_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition, (uint64_t)nw_http_encoding_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition, 0, (uint64_t)nw_http_encoding_serialize_options, (uint64_t)nw_http_encoding_deserialize_options);
  if (nw_protocol_http_encoding_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_encoding_identifier::onceToken, &__block_literal_global_33402);
  }
  id v2 = (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition;

  return nw_protocol_register_handle((uint64_t)nw_protocol_http_encoding_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_encoding_create, 0);
}

BOOL nw_http_encoding_deserialize_options(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_encoding_copy_options(v5, a2);
      goto LABEL_4;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_encoding_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_encoding_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_encoding_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_encoding_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_encoding_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_encoding_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_encoding_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_encoding_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_encoding_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_encoding_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_encoding_copy_options(void *a1, _DWORD *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http_encoding_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_encoding_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http_encoding_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_encoding_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_encoding_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *id v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v18 = "strict_calloc";
  __int16 v19 = 2048;
  uint64_t v20 = 1;
  __int16 v21 = 2048;
  uint64_t v22 = 4;
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_encoding_serialize_options(void *a1, _DWORD *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_encoding_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http_encoding_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_encoding_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v15 = "nw_http_encoding_serialize_options";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_encoding_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_encoding_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_encoding_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }
  return result;
}

void nw_http_encoding_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    free(a2);
    return;
  }
  id v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_http_encoding_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_encoding_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            char v12 = "nw_http_encoding_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_encoding_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_encoding_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

BOOL nw_http_encoding_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http_encoding_definition()
{
  if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_38);
  }
  int v0 = (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition;

  return v0;
}

BOOL nw_protocol_options_is_http_encoding(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_38);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_encoding_definition_http_encoding_definition);

    return is_equal_unsafe;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_encoding";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_encoding";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

void nw_http_encoding_options_set_type(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_http_encoding_options_set_type";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_http_encoding_options_set_type";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  os_log_type_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_38);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_encoding_definition_http_encoding_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_encoding_options_set_type_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v27 = "nw_http_encoding_options_set_type";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_http_encoding_options_set_type";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http encoding", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_http_encoding_options_set_type";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http encoding, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_http_encoding_options_set_type";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http encoding, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v27 = "nw_http_encoding_options_set_type";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http encoding, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_encoding_options_set_type_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_encoding_options_get_type(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_38);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_encoding_definition_http_encoding_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v24 = 1;
      *(void *)&buf[16] = 0x2020000000;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_encoding_options_get_type_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http encoding", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http encoding, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http encoding, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http encoding, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 1;
LABEL_6:

  return v5;
}

void sub_183C03A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_encoding_options_get_type_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_redirect_create_options()
{
  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition);
  nw_http_redirect_options_set_limit(options, 20);
  return options;
}

void nw_http_redirect_options_set_limit(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_http_redirect_options_set_limit";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_http_redirect_options_set_limit";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  uint64_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_redirect_definition_http_redirect_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_redirect_options_set_limit_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v27 = "nw_http_redirect_options_set_limit";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http redirect", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v27 = "nw_http_redirect_options_set_limit";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_redirect_options_set_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  return 1;
}

BOOL __nw_protocol_copy_http_redirect_definition_block_invoke()
{
  if (nw_protocol_http_redirect_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_914);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)nw_protocol_http_redirect_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition;
  nw_protocol_copy_http_redirect_definition_http_redirect_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition, (uint64_t)nw_http_redirect_allocate_options, (uint64_t)nw_http_redirect_copy_options, (uint64_t)nw_http_redirect_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition, (uint64_t)nw_http_redirect_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition, 0, (uint64_t)nw_http_redirect_serialize_options, (uint64_t)nw_http_redirect_deserialize_options);
  if (nw_protocol_http_redirect_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_914);
  }
  id v2 = (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition;

  return nw_protocol_register_handle((uint64_t)nw_protocol_http_redirect_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_redirect_create, 0);
}

BOOL nw_http_redirect_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 24)
    {
      BOOL v7 = nw_http_redirect_copy_options(v5, a2);
      goto LABEL_4;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_redirect_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_redirect_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_redirect_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_redirect_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_redirect_copy_options(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_http_redirect_copy_options";
    char v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9) {
        free(v9);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_http_redirect_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v20 = "nw_http_redirect_copy_options";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v16) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_http_redirect_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_http_redirect_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *((_DWORD *)v4 + 4) = *(_DWORD *)(a2 + 16);
    id v5 = _Block_copy(*(const void **)a2);
    id v6 = *(void **)v4;
    *(void *)id v4 = v5;

    objc_storeStrong((id *)v4 + 1, *(id *)(a2 + 8));
LABEL_4:

    return (BOOL)v4;
  }
  os_log_type_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v20 = "strict_calloc";
  __int16 v21 = 2048;
  uint64_t v22 = 1;
  __int16 v23 = 2048;
  uint64_t v24 = 24;
  os_log_type_t v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_redirect_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_redirect_copy_options(a1, a2);
    *a3 = 24;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_redirect_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_redirect_serialize_options";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_redirect_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2];
  }
  return result;
}

void nw_http_redirect_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    id v4 = a2[1];
    a2[1] = 0;

    free(a2);
    return;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_redirect_deallocate_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_deallocate_options";
        char v9 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_redirect_deallocate_options";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v11) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_deallocate_options";
        char v9 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_deallocate_options";
        char v9 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
}

BOOL nw_http_redirect_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http_redirect_definition()
{
  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
  }
  int v0 = (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition;

  return v0;
}

BOOL nw_protocol_options_is_http_redirect(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_redirect_definition_http_redirect_definition);

    return is_equal_unsafe;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_redirect";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_redirect";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

void nw_http_redirect_options_set_handler(void *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_http_redirect_options_set_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v31 = "nw_http_redirect_options_set_handler";
          __int16 v32 = 2082;
          char v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_41:
        free(v12);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  os_log_type_t v8 = (id *)v5;
  id v9 = v8[1];

  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_redirect_definition_http_redirect_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __nw_http_redirect_options_set_handler_block_invoke;
    v25[3] = &unk_1E52491D8;
    id v27 = v6;
    id v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }
  os_log_type_t v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v31 = "nw_http_redirect_options_set_handler";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v12, &type, &v28)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s protocol options are not http redirect", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v28)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v20 = (char *)__nw_create_backtrace_string();
  char v13 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v31 = "nw_http_redirect_options_set_handler";
    __int16 v32 = 2082;
    char v33 = v20;
    _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_redirect_options_set_handler_block_invoke(uint64_t a1, void **a2)
{
  id v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *a2;
  *a2 = v4;

  objc_storeStrong(a2 + 1, *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_redirect_options_copy_handler_block_invoke(uint64_t a1, const void **a2)
{
  id v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

uint64_t __nw_http_redirect_options_copy_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_http_redirect_options_get_limit(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_redirect_definition_http_redirect_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v24 = 0;
      *(void *)&buf[16] = 0x2020000000;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_redirect_options_get_limit_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http redirect", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C05E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_redirect_options_get_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 16);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_retry_create_options()
{
  if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_42_74646);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_http_retry_definition_http_retry_definition);
  nw_http_retry_options_set_limit(options, 3);
  return options;
}

void nw_http_retry_options_set_limit(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_http_retry_options_set_limit";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_http_retry_options_set_limit";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  uint64_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_42_74646);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_retry_definition_http_retry_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_retry_options_set_limit_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v27 = "nw_http_retry_options_set_limit";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_retry_options_set_limit";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http retry", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_retry_options_set_limit";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http retry, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_retry_options_set_limit";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http retry, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    id v27 = "nw_http_retry_options_set_limit";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http retry, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_retry_options_set_limit_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

BOOL __nw_protocol_copy_http_retry_definition_block_invoke()
{
  if (nw_protocol_http_retry_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_42074);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_http_retry_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_retry_definition_http_retry_definition;
  nw_protocol_copy_http_retry_definition_http_retry_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_retry_definition_http_retry_definition, (uint64_t)nw_http_retry_allocate_options, (uint64_t)nw_http_retry_copy_options, (uint64_t)nw_http_retry_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_retry_definition_http_retry_definition, (uint64_t)nw_http_retry_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_retry_definition_http_retry_definition, 0, (uint64_t)nw_http_retry_serialize_options, (uint64_t)nw_http_retry_deserialize_options);
  if (nw_protocol_http_retry_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_42074);
  }
  id v2 = (void *)nw_protocol_copy_http_retry_definition_http_retry_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_retry_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_retry_create, 0);
}

BOOL nw_http_retry_deserialize_options(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_retry_copy_options(v5, a2);
      goto LABEL_4;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_retry_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_retry_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_retry_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), backtr"
                "ace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_retry_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_retry_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), dumping ba"
            "cktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_retry_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_retry_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_retry_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_retry_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_retry_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_retry_copy_options(void *a1, _DWORD *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http_retry_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      uint64_t v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_retry_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http_retry_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_retry_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_retry_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *uint64_t v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v18 = "strict_calloc";
  __int16 v19 = 2048;
  uint64_t v20 = 1;
  __int16 v21 = 2048;
  uint64_t v22 = 4;
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_retry_serialize_options(void *a1, _DWORD *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_retry_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http_retry_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_retry_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v15 = "nw_http_retry_serialize_options";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_retry_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_retry_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_retry_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }
  return result;
}

void nw_http_retry_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    free(a2);
    return;
  }
  id v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_http_retry_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_retry_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            char v12 = "nw_http_retry_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_retry_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_retry_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

BOOL nw_http_retry_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http_retry_definition()
{
  if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_42_74646);
  }
  int v0 = (void *)nw_protocol_copy_http_retry_definition_http_retry_definition;

  return v0;
}

BOOL nw_protocol_options_is_http_retry(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_42_74646);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_retry_definition_http_retry_definition);

    return is_equal_unsafe;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_retry";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_retry";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_http_retry_options_get_limit(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_42_74646);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_retry_definition_http_retry_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v24 = 0;
      *(void *)&buf[16] = 0x2020000000;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_retry_options_get_limit_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http retry", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http retry, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http retry, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http retry, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C07BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_retry_options_get_limit_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_security_create_options()
{
  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
  }
  int v0 = (void *)nw_protocol_copy_http_security_definition_http_security_definition;

  return nw_protocol_create_options(v0);
}

BOOL __nw_protocol_copy_http_security_definition_block_invoke()
{
  if (nw_protocol_http_security_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28693);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)nw_protocol_http_security_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_security_definition_http_security_definition;
  nw_protocol_copy_http_security_definition_http_security_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_security_definition_http_security_definition, (uint64_t)nw_http_security_allocate_options, (uint64_t)nw_http_security_copy_options, (uint64_t)nw_http_security_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_security_definition_http_security_definition, (uint64_t)nw_http_security_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_security_definition_http_security_definition, 0, (uint64_t)nw_http_security_serialize_options, (uint64_t)nw_http_security_deserialize_options);
  if (nw_protocol_http_security_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28693);
  }
  id v2 = (void *)nw_protocol_copy_http_security_definition_http_security_definition;

  return nw_protocol_register_handle((uint64_t)nw_protocol_http_security_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_security_create, 0);
}

BOOL nw_http_security_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 40)
    {
      BOOL v7 = nw_http_security_copy_options(v5, a2);
      goto LABEL_4;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_security_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_security_deserialize_options";
      __int16 v23 = 2082;
      int v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_security_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_security_deserialize_options";
      __int16 v23 = 2082;
      int v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_security_copy_options(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v21 = "nw_http_security_copy_options";
    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault((const char *)v10, &type, &v18))
    {
LABEL_22:
      if (v10) {
        free(v10);
      }
      uint64_t v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_http_security_copy_options";
        char v13 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v17 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            char v21 = "nw_http_security_copy_options";
            __int16 v22 = 2082;
            uint64_t v23 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v17) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_http_security_copy_options";
        char v13 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_http_security_copy_options";
        char v13 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  uint64_t v4 = (id *)malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    objc_storeStrong(v4, *(id *)a2);
    id v5 = _Block_copy(*(const void **)(a2 + 16));
    id v6 = v4[2];
    v4[2] = v5;

    objc_storeStrong(v4 + 3, *(id *)(a2 + 24));
    char v7 = (_BYTE)v4[4] & 0xFE | *(unsigned char *)(a2 + 32) & 1;
    *((unsigned char *)v4 + 32) = v7;
    *((unsigned char *)v4 + 32) = v7 & 0xFD | *(unsigned char *)(a2 + 32) & 2;
LABEL_4:

    return (BOOL)v4;
  }
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  char v21 = "strict_calloc";
  __int16 v22 = 2048;
  uint64_t v23 = 1;
  __int16 v24 = 2048;
  uint64_t v25 = 40;
  BOOL v15 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_security_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_security_copy_options(a1, a2);
    *a3 = 40;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_http_security_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_security_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v15 = "nw_http_security_serialize_options";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_security_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_security_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_security_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4];
  }
  return result;
}

void nw_http_security_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    uint64_t v4 = a2[2];
    a2[2] = 0;

    id v5 = a2[3];
    a2[3] = 0;

    free(a2);
    return;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_http_security_deallocate_options";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_http_security_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v16 = "nw_http_security_deallocate_options";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v12) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_http_security_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_http_security_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
}

BOOL nw_http_security_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http_security_definition()
{
  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
  }
  int v0 = (void *)nw_protocol_copy_http_security_definition_http_security_definition;

  return v0;
}

BOOL nw_protocol_options_is_http_security(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_security_definition_http_security_definition);

    return is_equal_unsafe;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_security";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_security";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t __nw_http_security_options_copy_hsts_storage_block_invoke(uint64_t a1, id *a2)
{
  return 1;
}

void nw_http_security_options_set_hsts_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_http_security_options_set_hsts_storage";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_http_security_options_set_hsts_storage";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_security_options_set_hsts_storage_block_invoke;
    v22[3] = &unk_1E5248F68;
    id v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v27 = "nw_http_security_options_set_hsts_storage";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http security", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    id v27 = "nw_http_security_options_set_hsts_storage";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_security_options_set_hsts_storage_block_invoke(uint64_t a1, id *location)
{
  return 1;
}

void nw_http_security_options_set_handler(void *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_http_security_options_set_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v31 = "nw_http_security_options_set_handler";
          __int16 v32 = 2082;
          char v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_41:
        free(v12);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  os_log_type_t v8 = (id *)v5;
  id v9 = v8[1];

  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __nw_http_security_options_set_handler_block_invoke;
    v25[3] = &unk_1E52491D8;
    id v27 = v6;
    id v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }
  os_log_type_t v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v31 = "nw_http_security_options_set_handler";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v12, &type, &v28)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_security_options_set_handler";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s protocol options are not http security", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v28)
  {
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_security_options_set_handler";
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v20 = (char *)__nw_create_backtrace_string();
  os_log_type_t v13 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_http_security_options_set_handler";
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v31 = "nw_http_security_options_set_handler";
    __int16 v32 = 2082;
    char v33 = v20;
    _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_security_options_set_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v4;

  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1;
}

void *nw_http_security_options_copy_handler(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v24 = __Block_byref_object_copy__74035;
      uint64_t v25 = __Block_byref_object_dispose__74036;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_security_options_copy_handler_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http security", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C0A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_security_options_copy_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

id nw_http_security_options_copy_handler_queue(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v24 = __Block_byref_object_copy__5_73857;
      uint64_t v25 = __Block_byref_object_dispose__6_73858;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_security_options_copy_handler_queue_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http security", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C0A610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_security_options_copy_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_security_options_get_skip_hsts_lookup_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 32) & 1;
  return 1;
}

uint64_t __nw_http_security_options_set_skip_hsts_lookup_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a2 + 32) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

BOOL nw_http_security_options_get_save_hsts_with_untrusted_root_cert(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_http_security_options_get_save_hsts_with_untrusted_root_cert_block_invoke;
    v14[3] = &unk_1E5248E90;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s protocol options are not http security", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
  BOOL v4 = 0;
LABEL_5:

  return v4;
}

void sub_183C0A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_security_options_get_save_hsts_with_untrusted_root_cert_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 32) & 2) != 0;
  return 1;
}

uint64_t __nw_http_security_options_set_save_hsts_with_untrusted_root_cert_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a2 + 32) & 0xFD | (2 * *(unsigned char *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_security_options_copy_alt_svc_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_http_cookie_options_copy_cookie_storage(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v24 = __Block_byref_object_copy__5_73857;
      uint64_t v25 = __Block_byref_object_dispose__6_73858;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_cookie_options_copy_cookie_storage_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C0B008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_cookie_options_copy_cookie_storage_block_invoke(uint64_t a1, id *a2)
{
  return 1;
}

void nw_http_cookie_options_set_cookie_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_cookie_definition_http_cookie_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_cookie_options_set_cookie_storage_block_invoke;
    v22[3] = &unk_1E5248F68;
    id v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http_cookie", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_cookie_options_set_cookie_storage_block_invoke(uint64_t a1, id *location)
{
  return 1;
}

uint64_t __nw_http_cookie_options_copy_transform_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

uint64_t __nw_http_cookie_options_set_transform_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = v3;

  return 1;
}

uint64_t nw_http_cookie_options_get_cookie_partition_identifier(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v24 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_cookie_options_get_cookie_partition_identifier_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C0BBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_cookie_options_get_cookie_partition_identifier_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 16);
  return 1;
}

BOOL __nw_http_cookie_options_set_cookie_partition_identifier_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 16) = 0;
  }
  uint64_t v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1;
  }
  id v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 16) = v6;
    return 1;
  }
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __nw_http_cookie_options_set_allow_only_partitioned_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a2 + 32) & 0xF7 | (8 * *(unsigned char *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_cookie_options_get_allow_only_partitioned_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 32) & 8) != 0;
  return 1;
}

uint64_t nw_http_cookie_options_copy_site_for_cookies(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v24 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_cookie_options_copy_site_for_cookies_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C0C2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_cookie_options_copy_site_for_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(id *)(a2 + 24);
  return 1;
}

uint64_t __nw_http_cookie_options_set_site_for_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL nw_http_cookie_options_get_is_top_level_navigation(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v24 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_cookie_options_get_is_top_level_navigation_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      BOOL v5 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  BOOL v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C0C89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_cookie_options_get_is_top_level_navigation_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 32) & 1;
  return 1;
}

uint64_t __nw_http_cookie_options_set_is_top_level_navigation_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a2 + 32) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_cookie_options_get_should_not_send_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 32) & 2) != 0;
  return 1;
}

uint64_t __nw_http_cookie_options_set_should_not_send_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a2 + 32) & 0xFD | (2 * *(unsigned char *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_cookie_options_get_should_not_save_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 32) & 4) != 0;
  return 1;
}

uint64_t __nw_http_cookie_options_set_should_not_save_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a2 + 32) & 0xFB | (4 * *(unsigned char *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_alt_svc_options_copy_alt_svc_storage_block_invoke(uint64_t a1, id *a2)
{
  return 1;
}

void nw_http_alt_svc_options_set_alt_svc_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  BOOL v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_20_74269);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_alt_svc_options_set_alt_svc_storage_block_invoke;
    v22[3] = &unk_1E5248F68;
    id v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http_alt_svc", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_alt_svc, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_alt_svc_options_set_alt_svc_storage_block_invoke(uint64_t a1, id *location)
{
  return 1;
}

uint64_t __nw_http_alt_svc_options_set_assumes_http3_capable_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a2 + 8) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_alt_svc_options_get_assumes_http3_capable_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8) & 1;
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_early_data_create_options()
{
  if (nw_protocol_copy_http_early_data_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_46_75106);
  }
  int v0 = (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition;

  return nw_protocol_create_options(v0);
}

BOOL __nw_protocol_copy_http_early_data_definition_block_invoke()
{
  if (nw_protocol_http_early_data_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_early_data_identifier::onceToken, &__block_literal_global_64729);
  }
  int v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_early_data_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition;
  nw_protocol_copy_http_early_data_definition_http_early_data_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition, (uint64_t)nw_http_early_data_allocate_options, (uint64_t)nw_http_early_data_copy_options, (uint64_t)nw_http_early_data_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition, (uint64_t)nw_http_early_data_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition, 0, (uint64_t)nw_http_early_data_serialize_options, (uint64_t)nw_http_early_data_deserialize_options);
  if (nw_protocol_http_early_data_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_early_data_identifier::onceToken, &__block_literal_global_64729);
  }
  id v2 = (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_early_data_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_early_data_create, 0);
}

BOOL nw_http_early_data_deserialize_options(void *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_early_data_copy_options(v5, a2);
      goto LABEL_4;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_early_data_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_early_data_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_early_data_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), b"
                "acktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_early_data_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_early_data_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), dumpi"
            "ng backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_early_data_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_early_data_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_early_data_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_early_data_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_early_data_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_early_data_copy_options(void *a1, unsigned char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http_early_data_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_early_data_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http_early_data_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_early_data_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_early_data_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *id v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v18 = "strict_calloc";
  __int16 v19 = 2048;
  uint64_t v20 = 1;
  __int16 v21 = 2048;
  uint64_t v22 = 4;
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_early_data_serialize_options(void *a1, unsigned char *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_early_data_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http_early_data_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_early_data_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v15 = "nw_http_early_data_serialize_options";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_early_data_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_early_data_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_early_data_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }
  return result;
}

void nw_http_early_data_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    free(a2);
    return;
  }
  id v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_http_early_data_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_early_data_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            char v12 = "nw_http_early_data_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_early_data_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_early_data_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

BOOL nw_http_early_data_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http_early_data_definition()
{
  if (nw_protocol_copy_http_early_data_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_46_75106);
  }
  int v0 = (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition;

  return v0;
}

BOOL nw_protocol_options_is_http_early_data(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_early_data_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_46_75106);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_early_data_definition_http_early_data_definition);

    return is_equal_unsafe;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_early_data";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_early_data";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

NWConcrete_nw_protocol_options *nw_http_sniffing_create_options()
{
  if (nw_protocol_copy_http_sniffing_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_48_75140);
  }
  int v0 = (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;

  return nw_protocol_create_options(v0);
}

BOOL __nw_protocol_copy_http_sniffing_definition_block_invoke()
{
  if (nw_protocol_http_sniffing_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_485);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_http_sniffing_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;
  nw_protocol_copy_http_sniffing_definition_http_sniffing_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition, (uint64_t)nw_http_sniffing_allocate_options, (uint64_t)nw_http_sniffing_copy_options, (uint64_t)nw_http_sniffing_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition, (uint64_t)nw_http_sniffing_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition, 0, (uint64_t)nw_http_sniffing_serialize_options, (uint64_t)nw_http_sniffing_deserialize_options);
  if (nw_protocol_http_sniffing_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_485);
  }
  id v2 = (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_sniffing_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_sniffing_create, 0);
}

BOOL nw_http_sniffing_deserialize_options(void *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_sniffing_copy_options(v5, a2);
      goto LABEL_4;
    }
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_sniffing_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_sniffing_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    char v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_sniffing_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_sniffing_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_sniffing_copy_options(void *a1, unsigned char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http_sniffing_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_sniffing_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http_sniffing_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_sniffing_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_sniffing_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *id v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  BOOL v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v18 = "strict_calloc";
  __int16 v19 = 2048;
  uint64_t v20 = 1;
  __int16 v21 = 2048;
  uint64_t v22 = 4;
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_sniffing_serialize_options(void *a1, unsigned char *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_sniffing_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http_sniffing_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_sniffing_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            char v15 = "nw_http_sniffing_serialize_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_sniffing_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_http_sniffing_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_sniffing_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }
  return result;
}

void nw_http_sniffing_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    free(a2);
    return;
  }
  id v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_http_sniffing_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_sniffing_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            char v12 = "nw_http_sniffing_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_sniffing_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "nw_http_sniffing_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

BOOL nw_http_sniffing_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_http_sniffing_definition()
{
  if (nw_protocol_copy_http_sniffing_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_48_75140);
  }
  int v0 = (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;

  return v0;
}

BOOL nw_protocol_options_is_http_sniffing(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_sniffing_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_48_75140);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_sniffing_definition_http_sniffing_definition);

    return is_equal_unsafe;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_sniffing";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_sniffing";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

id nw_protocol_copy_oblivious_http_definition()
{
  if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_50_75176);
  }
  int v0 = (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition;

  return v0;
}

BOOL __nw_protocol_copy_oblivious_http_definition_block_invoke()
{
  if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28841);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
  nw_protocol_copy_oblivious_http_definition_ohttp_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition, (uint64_t)nw_oblivious_http_allocate_options, (uint64_t)nw_oblivious_http_copy_options, (uint64_t)nw_oblivious_http_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition, (uint64_t)nw_oblivious_http_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition, 0, (uint64_t)nw_oblivious_http_serialize_options, (uint64_t)nw_oblivious_http_deserialize_options);
  if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28841);
  }
  id v2 = (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier, v2, (uint64_t)nw_protocol_oblivious_http_create, 0);
}

BOOL nw_oblivious_http_deserialize_options(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    uint64_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v53 = "nw_oblivious_http_deserialize_options";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v21, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_oblivious_http_deserialize_options";
          char v24 = "%{public}s called with null serialized_bytes";
LABEL_61:
          _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
        }
LABEL_62:

        goto LABEL_63;
      }
      if (!v50)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_oblivious_http_deserialize_options";
          char v24 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_oblivious_http_deserialize_options";
          char v24 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (!v30) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v53 = "nw_oblivious_http_deserialize_options";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      uint64_t v31 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
LABEL_63:
    if (v21) {
      free(v21);
    }
    id v6 = 0;
    goto LABEL_52;
  }
  if (a3 <= 0x1F)
  {
    uint64_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v53 = "nw_oblivious_http_deserialize_options";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v21, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_oblivious_http_deserialize_options";
          char v24 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options))";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (!v50)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_oblivious_http_deserialize_options";
          char v24 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options)), "
                "backtrace limit exceeded";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v32 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_oblivious_http_deserialize_options";
          char v24 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options)), no backtrace";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (!v32) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v53 = "nw_oblivious_http_deserialize_options";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      uint64_t v31 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options)), dump"
            "ing backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_1830D4000, v22, v23, v31, buf, 0x16u);
LABEL_33:

      free(backtrace_string);
      goto LABEL_63;
    }
    goto LABEL_63;
  }
  id v6 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    id v26 = __nwlog_obj();
    os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    BOOL v53 = "strict_calloc";
    __int16 v54 = 2048;
    uint64_t v55 = 1;
    __int16 v56 = 2048;
    uint64_t v57 = 40;
    uint64_t v27 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v27);
    if (result) {
      goto LABEL_66;
    }
    free(v27);
  }
  char v7 = v6[32] & 0xFE | *(unsigned char *)(a2 + 24) & 1;
  v6[32] = v7;
  v6[32] = v7 & 0xF9 | *(unsigned char *)(a2 + 24) & 6;
  *(void *)id v6 = *(void *)a2;
  size_t v8 = *(void *)(a2 + 8);
  if (v8 + 32 > a3)
  {
LABEL_52:

    return (BOOL)v6;
  }
  if (v8)
  {
    xpc_object_t v9 = xpc_data_create((const void *)(a2 + 25), v8);
    os_log_type_t v10 = (void *)*((void *)v6 + 1);
    *((void *)v6 + 1) = v9;
  }
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = malloc_type_calloc(1uLL, *(void *)(a2 + 16), 0xEAFB8F1AuLL);
    BOOL v14 = v13;
    if (v13)
    {
      *((void *)v6 + 3) = v13;
      unint64_t v15 = *(void *)(a2 + 16);
      if (v15 >= 2)
      {
LABEL_10:
        __int16 v16 = (unsigned __int8 *)(a2 + v12 + 25);
        uint64_t v17 = 1;
        unint64_t v18 = v15;
        while (1)
        {
          int v19 = *v16;
          *BOOL v14 = v19;
          if (!v19) {
            goto LABEL_41;
          }
          ++v14;
          ++v16;
          if (--v18 <= 1) {
            goto LABEL_38;
          }
        }
      }
    }
    else
    {
      char v33 = __nwlog_obj();
      os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      BOOL v53 = "strict_calloc";
      __int16 v54 = 2048;
      uint64_t v55 = 1;
      __int16 v56 = 2048;
      uint64_t v57 = v11;
      uint64_t v34 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v34);
      if (result) {
        goto LABEL_66;
      }
      free(v34);
      *((void *)v6 + 3) = 0;
      unint64_t v15 = *(void *)(a2 + 16);
      uint64_t v35 = __nwlog_obj();
      os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      BOOL v53 = "_strict_strlcpy";
      uint64_t v36 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v36);
      if (result) {
        goto LABEL_66;
      }
      free(v36);
      if (v15 >= 2) {
        goto LABEL_10;
      }
    }
    uint64_t v17 = v15;
LABEL_38:
    if (v15 && v17) {
      *BOOL v14 = 0;
    }
  }
LABEL_41:
  uint64_t v38 = *(void *)(a2 + 8);
  uint64_t v37 = *(void *)(a2 + 16);
  size_t v39 = a3 - (v38 + v37 + 32);
  if (!v39) {
    goto LABEL_52;
  }
  uint64_t v40 = malloc_type_calloc(1uLL, v39, 0xEAFB8F1AuLL);
  unint64_t v41 = v40;
  if (v40)
  {
    *((void *)v6 + 2) = v40;
    if (v39 >= 2) {
      goto LABEL_44;
    }
LABEL_51:
    unsigned char *v41 = 0;
    goto LABEL_52;
  }
  uint64_t v49 = v37;
  unint64_t v45 = __nwlog_obj();
  os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v53 = "strict_calloc";
  __int16 v54 = 2048;
  uint64_t v55 = 1;
  __int16 v56 = 2048;
  uint64_t v57 = v39;
  unint64_t v46 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v46);
  if (!result)
  {
    free(v46);
    *((void *)v6 + 2) = 0;
    int v47 = __nwlog_obj();
    os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    BOOL v53 = "_strict_strlcpy";
    uint64_t v48 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v48);
    if (!result)
    {
      free(v48);
      uint64_t v37 = v49;
      if (v39 >= 2)
      {
LABEL_44:
        unint64_t v42 = (unsigned __int8 *)(a2 + v38 + v37 + 25);
        size_t v43 = v39;
        while (1)
        {
          int v44 = *v42;
          unsigned char *v41 = v44;
          if (!v44) {
            goto LABEL_52;
          }
          ++v41;
          ++v42;
          if (--v43 <= 1) {
            goto LABEL_51;
          }
        }
      }
      goto LABEL_51;
    }
  }
LABEL_66:
  __break(1u);
  return result;
}

BOOL nw_oblivious_http_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2)
  {
    __int16 v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v47 = "nw_oblivious_http_serialize_options";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          int v47 = "nw_oblivious_http_serialize_options";
          BOOL v32 = "%{public}s called with null existing_handle";
LABEL_63:
          _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
        }
LABEL_64:

        goto LABEL_65;
      }
      if (!v44)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          int v47 = "nw_oblivious_http_serialize_options";
          BOOL v32 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          int v47 = "nw_oblivious_http_serialize_options";
          BOOL v32 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      if (!v41) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      int v47 = "nw_oblivious_http_serialize_options";
      __int16 v48 = 2082;
      uint64_t v49 = (uint64_t)backtrace_string;
      unint64_t v42 = "%{public}s called with null existing_handle, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
LABEL_65:
    if (v29) {
      free(v29);
    }
    unint64_t v15 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    char v33 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v47 = "nw_oblivious_http_serialize_options";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          int v47 = "nw_oblivious_http_serialize_options";
          BOOL v32 = "%{public}s called with null out_length";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      if (!v44)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          int v47 = "nw_oblivious_http_serialize_options";
          BOOL v32 = "%{public}s called with null out_length, backtrace limit exceeded";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v43 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          int v47 = "nw_oblivious_http_serialize_options";
          BOOL v32 = "%{public}s called with null out_length, no backtrace";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      if (!v43) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      int v47 = "nw_oblivious_http_serialize_options";
      __int16 v48 = 2082;
      uint64_t v49 = (uint64_t)backtrace_string;
      unint64_t v42 = "%{public}s called with null out_length, dumping backtrace:%{public}s";
LABEL_53:
      _os_log_impl(&dword_1830D4000, v30, v31, v42, buf, 0x16u);
LABEL_54:

      free(backtrace_string);
      goto LABEL_65;
    }
    goto LABEL_65;
  }
  id v6 = *(id *)(a2 + 8);
  char v7 = v6;
  if (v6)
  {
    size_t length = xpc_data_get_length(v6);
    xpc_object_t v9 = *(const char **)(a2 + 24);
    if (v9) {
      goto LABEL_5;
    }
LABEL_8:
    size_t v10 = 0;
    uint64_t v11 = *(const char **)(a2 + 16);
    if (v11) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  size_t length = 0;
  xpc_object_t v9 = *(const char **)(a2 + 24);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_5:
  size_t v10 = strlen(v9) + 1;
  uint64_t v11 = *(const char **)(a2 + 16);
  if (v11)
  {
LABEL_6:
    size_t v12 = strlen(v11) + 1;
    goto LABEL_10;
  }
LABEL_9:
  size_t v12 = 0;
LABEL_10:
  size_t v13 = length + v10 + v12;
  size_t v14 = v13 + 32;
  *a3 = v13 + 32;
  if (v13 == -32)
  {
    uint64_t v34 = __nwlog_obj();
    os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    int v47 = "strict_calloc";
    uint64_t v35 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v35);
    if (result) {
      goto LABEL_68;
    }
    free(v35);
  }
  unint64_t v15 = malloc_type_calloc(1uLL, v14, 0xEAFB8F1AuLL);
  if (!v15)
  {
    uint64_t v36 = __nwlog_obj();
    os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    int v47 = "strict_calloc";
    __int16 v48 = 2048;
    uint64_t v49 = 1;
    __int16 v50 = 2048;
    size_t v51 = v14;
    uint64_t v37 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v37);
    if (result) {
      goto LABEL_68;
    }
    free(v37);
  }
  v15[1] = length;
  v15[2] = v10;
  char v16 = v15[3] & 0xFE | *(unsigned char *)(a2 + 32) & 1;
  *((unsigned char *)v15 + 24) = v16;
  *((unsigned char *)v15 + 24) = v16 & 0xF9 | *(unsigned char *)(a2 + 32) & 6;
  void *v15 = *(void *)a2;
  if (v7) {
    xpc_data_get_bytes(v7, (char *)v15 + 25, 0, length);
  }
  uint64_t v17 = *(unsigned __int8 **)(a2 + 24);
  if (v17)
  {
    unint64_t v18 = (char *)v15 + v15[1] + 25;
    if (v10 < 2)
    {
      uint64_t v19 = v10;
      if (v10)
      {
LABEL_21:
        if (v19) {
          *unint64_t v18 = 0;
        }
      }
    }
    else
    {
      uint64_t v19 = 1;
      size_t v20 = v10;
      while (1)
      {
        int v21 = *v17;
        *unint64_t v18 = v21;
        if (!v21) {
          break;
        }
        ++v18;
        ++v17;
        if (--v20 <= 1) {
          goto LABEL_21;
        }
      }
    }
  }
  if (!v12) {
    goto LABEL_29;
  }
  uint64_t v22 = v15[1];
  uint64_t v23 = v15[2];
  char v24 = *(unsigned __int8 **)(a2 + 16);
  if (v24)
  {
LABEL_25:
    uint64_t v25 = (char *)v15 + v22 + v23 + 25;
    if (v12 < 2)
    {
LABEL_28:
      *uint64_t v25 = 0;
    }
    else
    {
      while (1)
      {
        int v26 = *v24;
        *uint64_t v25 = v26;
        if (!v26) {
          break;
        }
        ++v25;
        ++v24;
        if (--v12 <= 1) {
          goto LABEL_28;
        }
      }
    }
LABEL_29:

LABEL_30:
    return (BOOL)v15;
  }
  uint64_t v38 = __nwlog_obj();
  os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  int v47 = "_strict_strlcpy";
  size_t v39 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v39);
  if (!result)
  {
    free(v39);
    goto LABEL_25;
  }
LABEL_68:
  __break(1u);
  return result;
}

BOOL nw_oblivious_http_options_are_equal(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  BOOL v6 = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    char v7 = *(void **)(a2 + 8);
    size_t v8 = *(void **)(a3 + 8);
    if (v7 != v8 && v7 && v8)
    {
      if (!xpc_equal(v7, v8)) {
        goto LABEL_23;
      }
    }
    else if (v7 != v8)
    {
      goto LABEL_23;
    }
    xpc_object_t v9 = *(const char **)(a2 + 16);
    size_t v10 = *(const char **)(a3 + 16);
    if (v9 != v10 && v9 && v10)
    {
      if (strcmp(v9, v10)) {
        goto LABEL_23;
      }
    }
    else if (v9 != v10)
    {
      goto LABEL_23;
    }
    uint64_t v11 = *(const char **)(a2 + 24);
    size_t v12 = *(const char **)(a3 + 24);
    if (v11 != v12 && v11 && v12)
    {
      if (!strcmp(v11, v12))
      {
LABEL_22:
        if (((*(unsigned char *)(a3 + 32) ^ *(unsigned char *)(a2 + 32)) & 7) == 0)
        {
          BOOL v6 = *(void *)a2 == *(void *)a3;
          goto LABEL_24;
        }
      }
    }
    else if (v11 == v12)
    {
      goto LABEL_22;
    }
LABEL_23:
    BOOL v6 = 0;
  }
LABEL_24:

  return v6;
}

void nw_oblivious_http_deallocate_options(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = (void *)a2[1];
    a2[1] = 0;

    id v4 = (void *)a2[2];
    if (v4)
    {
      free(v4);
      a2[2] = 0;
    }
    id v5 = (void *)a2[3];
    if (v5) {
      free(v5);
    }
    free(a2);
    return;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_oblivious_http_deallocate_options";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_oblivious_http_deallocate_options";
        size_t v10 = "%{public}s called with null allocated_handle";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        size_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            char v16 = "nw_oblivious_http_deallocate_options";
            __int16 v17 = 2082;
            unint64_t v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v12) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_oblivious_http_deallocate_options";
        size_t v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_22;
      }
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_oblivious_http_deallocate_options";
        size_t v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:
  }
LABEL_24:
  if (v7) {
    free(v7);
  }
}

BOOL nw_oblivious_http_copy_options(void *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_oblivious_http_copy_options";
    BOOL v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v24))
    {
LABEL_32:
      if (v12) {
        free(v12);
      }
      id v4 = 0;
      goto LABEL_10;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_oblivious_http_copy_options";
        unint64_t v15 = "%{public}s called with null existing_handle";
LABEL_30:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v23 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_oblivious_http_copy_options";
            __int16 v28 = 2082;
            uint64_t v29 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (!v23) {
          goto LABEL_31;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_oblivious_http_copy_options";
        unint64_t v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_30;
      }
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_oblivious_http_copy_options";
        unint64_t v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
LABEL_31:

    goto LABEL_32;
  }
  id v4 = (id *)malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (!v4)
  {
    char v16 = __nwlog_obj();
    os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    uint64_t v27 = "strict_calloc";
    __int16 v28 = 2048;
    uint64_t v29 = 1;
    __int16 v30 = 2048;
    uint64_t v31 = 40;
    __int16 v17 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v17);
    if (result) {
      goto LABEL_35;
    }
    free(v17);
  }
  objc_storeStrong(v4 + 1, *(id *)(a2 + 8));
  id v5 = *(const char **)(a2 + 16);
  if (v5)
  {
    BOOL v6 = strdup(v5);
    if (!v6)
    {
      unint64_t v18 = __nwlog_obj();
      os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "strict_strdup";
      uint64_t v19 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v19);
      if (result) {
        goto LABEL_35;
      }
      free(v19);
    }
    v4[2] = v6;
  }
  char v7 = *(const char **)(a2 + 24);
  if (!v7)
  {
LABEL_9:
    char v9 = (_BYTE)v4[4] & 0xFE | *(unsigned char *)(a2 + 32) & 1;
    *((unsigned char *)v4 + 32) = v9;
    *((unsigned char *)v4 + 32) = v9 & 0xF9 | *(unsigned char *)(a2 + 32) & 6;
    *id v4 = *(id *)a2;
LABEL_10:

    return (BOOL)v4;
  }
  size_t v8 = strdup(v7);
  if (v8)
  {
LABEL_8:
    v4[3] = v8;
    goto LABEL_9;
  }
  size_t v20 = __nwlog_obj();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "strict_strdup";
  int v21 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v21);
  if (!result)
  {
    free(v21);
    goto LABEL_8;
  }
LABEL_35:
  __break(1u);
  return result;
}

BOOL nw_oblivious_http_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v5 = __nwlog_obj();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  BOOL v6 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
LABEL_2:
    id v3 = (void *)v2[1];
    v2[1] = 0;

    v2[2] = 0;
    v2[3] = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

id nw_protocol_copy_oblivious_http_contexts_definition()
{
  if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_52_75214);
  }
  int v0 = (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition;

  return v0;
}

BOOL __nw_protocol_copy_oblivious_http_contexts_definition_block_invoke()
{
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_4_28848);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition;
  nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition, (uint64_t)nw_oblivious_http_allocate_options, (uint64_t)nw_oblivious_http_copy_options, (uint64_t)nw_oblivious_http_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition, (uint64_t)nw_oblivious_http_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition, 0, (uint64_t)nw_oblivious_http_serialize_options, (uint64_t)nw_oblivious_http_deserialize_options);
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_4_28848);
  }
  id v2 = (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier, v2, (uint64_t)nw_protocol_oblivious_http_create, 0);
}

NWConcrete_nw_protocol_options *nw_oblivious_http_create_options(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    size_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_oblivious_http_create_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v9, &type, &v20)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_oblivious_http_create_options";
      BOOL v12 = "%{public}s called with null oblivious_config";
LABEL_46:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      goto LABEL_47;
    }
    if (!v20)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_oblivious_http_create_options";
        BOOL v12 = "%{public}s called with null oblivious_config, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_oblivious_http_create_options";
        BOOL v12 = "%{public}s called with null oblivious_config, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v16) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "nw_oblivious_http_create_options";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    __int16 v17 = "%{public}s called with null oblivious_config, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_1830D4000, v10, v11, v17, buf, 0x16u);
LABEL_33:

    free(backtrace_string);
    goto LABEL_48;
  }
  if (!a2)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_oblivious_http_create_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v9, &type, &v20)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_oblivious_http_create_options";
      BOOL v12 = "%{public}s called with null oblivious_config_length";
      goto LABEL_46;
    }
    if (!v20)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_oblivious_http_create_options";
        BOOL v12 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_oblivious_http_create_options";
        BOOL v12 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v18) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "nw_oblivious_http_create_options";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    __int16 v17 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
  if (a3)
  {
    if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_50_75176);
    }
    options = nw_protocol_create_options((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition);
    nw_oblivious_http_set_config(options, a1, a2);
    nw_oblivious_http_set_request_path(options, a3);
    return options;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v23 = "nw_oblivious_http_create_options";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_oblivious_http_create_options";
        BOOL v12 = "%{public}s called with null request_path";
        goto LABEL_46;
      }
LABEL_47:

      goto LABEL_48;
    }
    if (!v20)
    {
      size_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_oblivious_http_create_options";
        BOOL v12 = "%{public}s called with null request_path, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v19 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_oblivious_http_create_options";
        BOOL v12 = "%{public}s called with null request_path, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v19) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "nw_oblivious_http_create_options";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    __int16 v17 = "%{public}s called with null request_path, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
LABEL_48:
  if (v9) {
    free(v9);
  }
  return 0;
}

void nw_oblivious_http_set_config(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (nw_protocol_options_is_oblivious_http(v5))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_oblivious_http_set_config_block_invoke;
    v13[3] = &__block_descriptor_48_e9_B16__0_v8l;
    void v13[4] = a2;
    void v13[5] = a3;
    nw_protocol_options_access_handle(v5, v13);
    goto LABEL_3;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_oblivious_http_set_config";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &v15, &v14))
  {
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = v15;
      if (os_log_type_enabled(v8, v15))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_oblivious_http_set_config";
        size_t v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        size_t v8 = __nwlog_obj();
        os_log_type_t v9 = v15;
        BOOL v12 = os_log_type_enabled(v8, v15);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_oblivious_http_set_config";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v12) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_oblivious_http_set_config";
        size_t v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = v15;
      if (os_log_type_enabled(v8, v15))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_oblivious_http_set_config";
        size_t v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void nw_oblivious_http_set_request_path(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_request_path_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_oblivious_http_set_request_path";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_request_path";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_oblivious_http_set_request_path";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_request_path";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_request_path";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

BOOL nw_protocol_options_is_oblivious_http(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_50_75176);
    }
    id v3 = (id)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3))
    {
      BOOL is_equal_unsafe = 1;
    }
    else
    {
      if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_52_75214);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition);
    }

    return is_equal_unsafe;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_options_is_oblivious_http";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_options_is_oblivious_http";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v7) {
    free(v7);
  }
  return 0;
}

BOOL __nw_oblivious_http_set_request_path_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a2 + 16);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 16) = 0;
  }
  id v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1;
  }
  BOOL v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 16) = v6;
    return 1;
  }
  size_t v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __nw_oblivious_http_set_config_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(const void **)(a1 + 32);
  if (v4 && (size_t v5 = *(void *)(a1 + 40)) != 0)
  {
    xpc_object_t v6 = xpc_data_create(v4, v5);
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v6;
  }
  else
  {
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }

  *(unsigned char *)(a2 + 32) &= ~4u;
  return 1;
}

NWConcrete_nw_protocol_options *nw_oblivious_http_create_options_with_context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v11, &type, &v22)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_oblivious_http_create_options_with_context";
      char v14 = "%{public}s called with null oblivious_config";
LABEL_46:
      _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      goto LABEL_47;
    }
    if (!v22)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v18) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    __int16 v26 = 2082;
    uint64_t v27 = backtrace_string;
    BOOL v19 = "%{public}s called with null oblivious_config, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_1830D4000, v12, v13, v19, buf, 0x16u);
LABEL_33:

    free(backtrace_string);
    goto LABEL_48;
  }
  if (!a2)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v11, &type, &v22)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_oblivious_http_create_options_with_context";
      char v14 = "%{public}s called with null oblivious_config_length";
      goto LABEL_46;
    }
    if (!v22)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v20) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    __int16 v26 = 2082;
    uint64_t v27 = backtrace_string;
    BOOL v19 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
  if (a3)
  {
    if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_52_75214);
    }
    options = nw_protocol_create_options((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition);
    nw_oblivious_http_set_config(options, a1, a2);
    nw_oblivious_http_set_request_path(options, a3);
    nw_oblivious_http_set_use_chunks(options, 1);
    nw_oblivious_http_set_context_id(options, a4);
    return options;
  }
  __int16 v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "nw_oblivious_http_create_options_with_context";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v11, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null request_path";
        goto LABEL_46;
      }
LABEL_47:

      goto LABEL_48;
    }
    if (!v22)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null request_path, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v21 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null request_path, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v21) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    __int16 v26 = 2082;
    uint64_t v27 = backtrace_string;
    BOOL v19 = "%{public}s called with null request_path, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
LABEL_48:
  if (v11) {
    free(v11);
  }
  return 0;
}

void nw_oblivious_http_set_use_chunks(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_use_chunks_block_invoke;
    v11[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v12 = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_oblivious_http_set_use_chunks";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_oblivious_http_set_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v16 = "nw_oblivious_http_set_use_chunks";
            __int16 v17 = 2082;
            BOOL v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_oblivious_http_set_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_oblivious_http_set_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void nw_oblivious_http_set_context_id(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_context_id_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_oblivious_http_set_context_id";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_context_id";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_oblivious_http_set_context_id";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_context_id";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_context_id";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

uint64_t __nw_oblivious_http_set_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) |= 2u;
  *(void *)a2 = *(void *)(a1 + 32);
  return 1;
}

uint64_t __nw_oblivious_http_set_use_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a2 + 32) & 0xFE | *(unsigned char *)(a1 + 32);
  return 1;
}

uint64_t nw_oblivious_http_set_standalone_aead_key(void *a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_oblivious_http_set_standalone_aead_key_block_invoke;
  v4[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v4[4] = a2;
  v4[5] = a3;
  return nw_protocol_options_access_handle(a1, v4);
}

uint64_t __nw_oblivious_http_set_standalone_aead_key_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(const void **)(a1 + 32);
  if (v4 && (size_t v5 = *(void *)(a1 + 40)) != 0)
  {
    xpc_object_t v6 = xpc_data_create(v4, v5);
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v6;
  }
  else
  {
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }

  *(unsigned char *)(a2 + 32) |= 4u;
  return 1;
}

uint64_t nw_oblivious_http_get_config_is_standalone_aead(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    uint64_t v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_55_75288);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
            __int16 v15 = 2082;
            __int16 v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

uint64_t __nw_oblivious_http_get_config_is_standalone_aead_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 32) >> 2) & 1;
}

id nw_oblivious_http_copy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    __int16 v16 = __Block_byref_object_copy__5_73857;
    uint64_t v17 = __Block_byref_object_dispose__6_73858;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_copy_config_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_183C13380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_copy_config_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_oblivious_http_get_request_path(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_get_request_path_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183C136E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_get_request_path_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 16);
  return 1;
}

uint64_t nw_oblivious_http_get_use_chunks(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    uint64_t v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_57);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_oblivious_http_get_use_chunks";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_oblivious_http_get_use_chunks";
            __int16 v15 = 2082;
            uint64_t v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

uint64_t __nw_oblivious_http_get_use_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 32) & 1;
}

uint64_t nw_oblivious_http_get_use_context_ids(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    uint64_t v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_59);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_oblivious_http_get_use_context_ids";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_context_ids";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_oblivious_http_get_use_context_ids";
            __int16 v15 = 2082;
            uint64_t v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_context_ids";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_context_ids";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

uint64_t __nw_oblivious_http_get_use_context_ids_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 32) >> 1) & 1;
}

uint64_t nw_oblivious_http_get_context_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_get_context_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183C13F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_get_context_id_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

void nw_oblivious_http_set_media_type(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_media_type_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_oblivious_http_set_media_type";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_oblivious_http_set_media_type";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v15 = "nw_oblivious_http_set_media_type";
            __int16 v16 = 2082;
            uint64_t v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_oblivious_http_set_media_type";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_oblivious_http_set_media_type";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

BOOL __nw_oblivious_http_set_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a2 + 24);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 24) = 0;
  }
  size_t v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1;
  }
  xpc_object_t v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 24) = v6;
    return 1;
  }
  size_t v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t nw_oblivious_http_get_media_type(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_get_media_type_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183C1464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_get_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 24);
  return 1;
}

id *nw_http_create_metadata_for_request(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_http_create_metadata_for_request_block_invoke;
    v15[3] = &unk_1E5248F68;
    id v3 = v1;
    id v16 = v3;
    uint64_t v4 = (uint64_t)singleton[4];
    if (v4)
    {
      __nw_http_create_metadata_for_request_block_invoke((uint64_t)v15, v4);
      size_t v5 = v16;
    }
    else
    {
      size_t v5 = v3;
    }
    xpc_object_t v6 = singleton;

    goto LABEL_8;
  }
  size_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_http_create_metadata_for_request";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_request";
        char v12 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_http_create_metadata_for_request";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v14) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_request";
        char v12 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_request";
        char v12 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:
  }
LABEL_24:
  if (v9) {
    free(v9);
  }
LABEL_8:

  return singleton;
}

uint64_t __nw_http_create_metadata_for_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id *nw_http_create_metadata_for_response(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_http_create_metadata_for_response_block_invoke;
    v15[3] = &unk_1E5248F68;
    id v3 = v1;
    id v16 = v3;
    uint64_t v4 = (uint64_t)singleton[4];
    if (v4)
    {
      __nw_http_create_metadata_for_response_block_invoke((uint64_t)v15, v4);
      size_t v5 = v16;
    }
    else
    {
      size_t v5 = v3;
    }
    xpc_object_t v6 = singleton;

    goto LABEL_8;
  }
  size_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_http_create_metadata_for_response";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_response";
        char v12 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_http_create_metadata_for_response";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v14) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_response";
        char v12 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_response";
        char v12 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:
  }
LABEL_24:
  if (v9) {
    free(v9);
  }
LABEL_8:

  return singleton;
}

uint64_t __nw_http_create_metadata_for_response_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id *nw_http_create_metadata()
{
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  int v0 = (void *)nw_protocol_copy_http_definition_http_definition;

  return nw_protocol_metadata_create_singleton(v0);
}

BOOL nw_protocol_metadata_is_http(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_definition_http_definition);

    return is_equal_unsafe;
  }
  size_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_metadata_is_http";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_metadata_is_http";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_http_metadata_get_type(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_type_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_type_block_invoke((uint64_t)v22, isa);
        xpc_object_t v6 = (unsigned int *)(*(void *)&buf[8] + 24);
      }
      else
      {
        xpc_object_t v6 = (unsigned int *)&v26;
      }
      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_9:

  return v7;
}

void sub_183C15594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_metadata_get_type_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    int v4 = 1;
  }
  else
  {
    xpc_object_t v6 = *(void **)(a2 + 32);
    if (!v6) {
      return 1;
    }
    id v7 = v6;
    int status_code = _nw_http_response_get_status_code();

    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    if ((status_code - 100) > 0x63) {
      int v4 = 2;
    }
    else {
      int v4 = 3;
    }
  }
  *(_DWORD *)(v3 + 24) = v4;
  return 1;
}

uint64_t __nw_http_metadata_copy_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_http_metadata_copy_response(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      int v26 = __Block_byref_object_copy__5_73857;
      uint64_t v27 = __Block_byref_object_dispose__6_73858;
      id v28 = 0;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_response_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_response_block_invoke((uint64_t)v22, isa);
        xpc_object_t v6 = *(void **)(*(void *)&buf[8] + 40);
      }
      else
      {
        xpc_object_t v6 = 0;
      }
      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_metadata_copy_response_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_metadata_set_trailer_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_metadata_copy_trailer_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_metadata_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_metadata_get_version(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_version_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_version_block_invoke((uint64_t)v22, isa);
        xpc_object_t v6 = (unsigned int *)(*(void *)&buf[8] + 24);
      }
      else
      {
        xpc_object_t v6 = (unsigned int *)&v26;
      }
      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_metadata_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 48);
  return 1;
}

void nw_http_metadata_set_method(void *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_metadata_set_method";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          char v33 = "nw_http_metadata_set_method";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_59:
        free(v10);
        goto LABEL_8;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_57:

    goto LABEL_58;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_metadata_set_method";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_http_metadata_set_method";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!a2)
  {
    __int16 v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_http_metadata_set_method";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null method", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null method, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null method, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "nw_http_metadata_set_method";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null method, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(v20);
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_59;
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __nw_http_metadata_set_method_block_invoke;
  v28[3] = &__block_descriptor_36_e9_B16__0_v8l;
  int v29 = a2;
  uint64_t v8 = *((void *)v5 + 4);
  if (v8) {
    __nw_http_metadata_set_method_block_invoke((uint64_t)v28, v8);
  }
LABEL_8:
}

uint64_t __nw_http_metadata_set_method_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = (id *)(a2 + 24);
  id v4 = *(id *)(a2 + 24);
  if (!v4)
  {
    id v4 = (id)_nw_http_request_create("GET", "https", 0, "/");
    objc_storeStrong(v3, v4);
  }
  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = 1;
  switch(v5)
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_http_metadata_set_method_block_invoke";
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v19 = 0;
      if (!__nwlog_fault(v8, &type, &v19)) {
        goto LABEL_30;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_metadata_set_method_block_invoke";
          BOOL v11 = "%{public}s Setting invalid method";
LABEL_27:
          BOOL v17 = v9;
          os_log_type_t v18 = v10;
LABEL_28:
          _os_log_impl(&dword_1830D4000, v17, v18, v11, buf, 0xCu);
          goto LABEL_29;
        }
        goto LABEL_29;
      }
      if (!v19)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_metadata_set_method_block_invoke";
          BOOL v11 = "%{public}s Setting invalid method, backtrace limit exceeded";
          goto LABEL_27;
        }
LABEL_29:

        goto LABEL_30;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v16) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_metadata_set_method_block_invoke";
        BOOL v11 = "%{public}s Setting invalid method, no backtrace";
        BOOL v17 = v9;
        os_log_type_t v18 = v15;
        goto LABEL_28;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v22 = "nw_http_metadata_set_method_block_invoke";
        __int16 v23 = 2082;
        BOOL v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v15, "%{public}s Setting invalid method, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_30:
      if (v8) {
        free(v8);
      }
      uint64_t v6 = 0;
LABEL_19:

      return v6;
    case 1:
      os_log_type_t v12 = "GET";
      goto LABEL_18;
    case 2:
      os_log_type_t v12 = "HEAD";
      goto LABEL_18;
    case 3:
      os_log_type_t v12 = "POST";
      goto LABEL_18;
    case 4:
      os_log_type_t v12 = "PUT";
      goto LABEL_18;
    case 5:
      os_log_type_t v12 = "DELETE";
      goto LABEL_18;
    case 6:
      os_log_type_t v12 = "CONNECT";
      goto LABEL_18;
    case 7:
      os_log_type_t v12 = "OPTIONS";
      goto LABEL_18;
    case 8:
      os_log_type_t v12 = "TRACE";
      goto LABEL_18;
    case 9:
      os_log_type_t v12 = "PATCH";
      goto LABEL_18;
    case 100:
      os_log_type_t v12 = "CONNECT-UDP";
LABEL_18:
      nw_http_request_set_method(v4, (uint64_t)v12);
      goto LABEL_19;
    default:
      goto LABEL_19;
  }
}

uint64_t nw_http_metadata_get_method(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_method_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_method_block_invoke((uint64_t)v22, isa);
        uint64_t v6 = (unsigned int *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = (unsigned int *)&v26;
      }
      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_9:

  return v7;
}

void sub_183C17434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_get_method_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = *(id *)(a2 + 24);
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    int has_method = _nw_http_request_has_method((uint64_t)v5);

    if (has_method)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
    else
    {
      id v7 = v5;
      int v8 = _nw_http_request_has_method((uint64_t)v7);

      if (v8)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
      }
      else
      {
        id v9 = v7;
        int v10 = _nw_http_request_has_method((uint64_t)v9);

        if (v10)
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 3;
        }
        else
        {
          id v11 = v9;
          int v12 = _nw_http_request_has_method((uint64_t)v11);

          if (v12)
          {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 4;
          }
          else
          {
            id v13 = v11;
            int v14 = _nw_http_request_has_method((uint64_t)v13);

            if (v14)
            {
              *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 5;
            }
            else
            {
              id v15 = v13;
              int v16 = _nw_http_request_has_method((uint64_t)v15);

              if (v16)
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 6;
              }
              else if (nw_http_request_has_method(v15, (uint64_t)"OPTIONS"))
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 7;
              }
              else if (nw_http_request_has_method(v15, (uint64_t)"TRACE"))
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 8;
              }
              else if (nw_http_request_has_method(v15, (uint64_t)"PATCH"))
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 9;
              }
              else
              {
                BOOL v17 = nw_http_request_has_method(v15, (uint64_t)"CONNECT-UDP");
                uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8);
                if (v17) {
                  *(_DWORD *)(v18 + 24) = 100;
                }
                else {
                  *(_DWORD *)(v18 + 24) = 0;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_40;
  }
  BOOL v19 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v30 = "nw_http_metadata_get_method_block_invoke";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_http_metadata_get_method_block_invoke";
        char v23 = "%{public}s metadata not request";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
      }
    }
    else
    {
      if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            char v30 = "nw_http_metadata_get_method_block_invoke";
            __int16 v31 = 2082;
            uint64_t v32 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s metadata not request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v25) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_http_metadata_get_method_block_invoke";
        char v23 = "%{public}s metadata not request, no backtrace";
        goto LABEL_36;
      }
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_http_metadata_get_method_block_invoke";
        char v23 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:
  }
LABEL_38:
  if (v20) {
    free(v20);
  }
LABEL_40:

  return v4 != 0;
}

void nw_http_metadata_set_endpoint(void *a1, void *a2)
{
  *(void *)&v56[13] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    char v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v54 = "nw_http_metadata_set_endpoint";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v15, &type, &v51)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v31 = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v31, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v54 = "nw_http_metadata_set_endpoint";
          __int16 v55 = 2082;
          *(void *)__int16 v56 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v31, v38, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_27:
        if (!v15) {
          goto LABEL_29;
        }
LABEL_28:
        free(v15);
        goto LABEL_29;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v38, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v31 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v45, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_78:

    goto LABEL_27;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    uint64_t v33 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v54 = "nw_http_metadata_set_endpoint";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v15, &type, &v51)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v31 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (!v51)
    {
      __int16 v31 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v46, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_78;
    }
    uint64_t v40 = (char *)__nw_create_backtrace_string();
    __int16 v31 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v42 = os_log_type_enabled(v31, type);
    if (!v40)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v41, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v54 = "nw_http_metadata_set_endpoint";
      __int16 v55 = 2082;
      *(void *)__int16 v56 = v40;
      _os_log_impl(&dword_1830D4000, v31, v41, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_59;
  }
  if (!v4)
  {
    uint64_t v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v54 = "nw_http_metadata_set_endpoint";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v15, &type, &v51)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v31 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (!v51)
    {
      __int16 v31 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v47, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_78;
    }
    uint64_t v40 = (char *)__nw_create_backtrace_string();
    __int16 v31 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v44 = os_log_type_enabled(v31, type);
    if (!v40)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v54 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v54 = "nw_http_metadata_set_endpoint";
      __int16 v55 = 2082;
      *(void *)__int16 v56 = v40;
      _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_59:

    free(v40);
    if (!v15) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  id v8 = v4;
  int v9 = [v8 type];

  if (v9 == 4)
  {
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = __nw_http_metadata_set_endpoint_block_invoke;
    v49[3] = &unk_1E5248F68;
    id v10 = v8;
    id v50 = v10;
    uint64_t v11 = *((void *)v5 + 4);
    if (v11)
    {
      __nw_http_metadata_set_endpoint_block_invoke((uint64_t)v49, v11);
      id v10 = v50;
    }

    goto LABEL_29;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v12 = (id)gLogObj;
  id v13 = v8;
  int v14 = [v13 type];

  *(_DWORD *)buf = 136446466;
  __int16 v54 = "nw_http_metadata_set_endpoint";
  __int16 v55 = 1024;
  *(_DWORD *)__int16 v56 = v14;
  LODWORD(v48) = 18;
  id v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (!__nwlog_fault(v15, &type, &v51)) {
    goto LABEL_27;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v16 = (id)gLogObj;
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v16, type))
    {
      id v18 = v13;
      int v19 = objc_msgSend(v18, "type", buf, v48);

      *(_DWORD *)buf = 136446466;
      __int16 v54 = "nw_http_metadata_set_endpoint";
      __int16 v55 = 1024;
      *(_DWORD *)__int16 v56 = v19;
      _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_26:

    goto LABEL_27;
  }
  if (!v51)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v16 = (id)gLogObj;
    os_log_type_t v25 = type;
    if (os_log_type_enabled(v16, type))
    {
      id v26 = v13;
      int v27 = objc_msgSend(v26, "type", buf, v48);

      *(_DWORD *)buf = 136446466;
      __int16 v54 = "nw_http_metadata_set_endpoint";
      __int16 v55 = 1024;
      *(_DWORD *)__int16 v56 = v27;
      _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_26;
  }
  os_log_type_t v20 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v16 = (id)gLogObj;
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v16, type);
  if (!v20)
  {
    if (v22)
    {
      id v28 = v13;
      int v29 = objc_msgSend(v28, "type", buf, v48);

      *(_DWORD *)buf = 136446466;
      __int16 v54 = "nw_http_metadata_set_endpoint";
      __int16 v55 = 1024;
      *(_DWORD *)__int16 v56 = v29;
      _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_26;
  }
  if (v22)
  {
    id v23 = v13;
    int v24 = objc_msgSend(v23, "type", buf, v48);

    *(_DWORD *)buf = 136446722;
    __int16 v54 = "nw_http_metadata_set_endpoint";
    __int16 v55 = 1024;
    *(_DWORD *)__int16 v56 = v24;
    v56[2] = 2082;
    *(void *)&v56[3] = v20;
    _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v20);
  if (v15) {
    goto LABEL_28;
  }
LABEL_29:
}

void sub_183C18328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_set_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  url = nw_endpoint_get_url(*(nw_endpoint_t *)(a1 + 32));
  if (url)
  {
    id v4 = *(void **)(a2 + 24);
    if (v4)
    {
      id v5 = v4;
      _nw_http_request_set_url();
    }
    else
    {
      uint64_t v6 = _nw_http_request_create_from_url("GET", url);
      id v7 = *(void **)(a2 + 24);
      *(void *)(a2 + 24) = v6;
    }
    return url != 0;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v19 = "nw_http_metadata_set_endpoint_block_invoke";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http_metadata_set_endpoint_block_invoke";
        id v13 = "%{public}s endpoint isn't url";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            int v19 = "nw_http_metadata_set_endpoint_block_invoke";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s endpoint isn't url, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v15) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http_metadata_set_endpoint_block_invoke";
        id v13 = "%{public}s endpoint isn't url, no backtrace";
        goto LABEL_19;
      }
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http_metadata_set_endpoint_block_invoke";
        id v13 = "%{public}s endpoint isn't url, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v10) {
    free(v10);
  }
  return url != 0;
}

void nw_http_metadata_set_status(void *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    int v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_http_metadata_set_status";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v33 = "nw_http_metadata_set_status";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_59:
        free(v10);
        goto LABEL_8;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_57:

    goto LABEL_58;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    id v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_http_metadata_set_status";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    __int16 v20 = (char *)__nw_create_backtrace_string();
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_http_metadata_set_status";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!a2)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_http_metadata_set_status";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null status", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null status, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    __int16 v20 = (char *)__nw_create_backtrace_string();
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null status, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_http_metadata_set_status";
      __int16 v34 = 2082;
      uint64_t v35 = v20;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null status, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(v20);
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_59;
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __nw_http_metadata_set_status_block_invoke;
  v28[3] = &__block_descriptor_36_e9_B16__0_v8l;
  int v29 = a2;
  uint64_t v8 = *((void *)v5 + 4);
  if (v8) {
    __nw_http_metadata_set_status_block_invoke((uint64_t)v28, v8);
  }
LABEL_8:
}

uint64_t __nw_http_metadata_set_status_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + 32);
  if (v2)
  {
    id v3 = v2;
    _nw_http_response_set_status_code();
  }
  else
  {
    uint64_t v5 = _nw_http_response_create((unsigned __int16)*(_DWORD *)(a1 + 32), 0);
    id v3 = *(id *)(a2 + 32);
    *(void *)(a2 + 32) = v5;
  }

  return 1;
}

BOOL __nw_http_metadata_get_status_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a2 + 32);
  if (v2)
  {
    id v4 = v2;
    int status_code = _nw_http_response_get_status_code();

    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = status_code;
    return v2 != 0;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_http_metadata_get_status_block_invoke";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_http_metadata_get_status_block_invoke";
        uint64_t v11 = "%{public}s metadata not response";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v17 = "nw_http_metadata_get_status_block_invoke";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata not response, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v13) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_http_metadata_get_status_block_invoke";
        uint64_t v11 = "%{public}s metadata not response, no backtrace";
        goto LABEL_17;
      }
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_http_metadata_get_status_block_invoke";
        uint64_t v11 = "%{public}s metadata not response, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v8) {
    free(v8);
  }
  return v2 != 0;
}

uint64_t __nw_http_metadata_add_header_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = strcmp(*(const char **)(a1 + 32), ":protocol");
  uint64_t v5 = *(void **)(a2 + 24);
  if (v4)
  {
    if (v5)
    {
      id v6 = v5;
    }
    else
    {
      int v9 = *(void **)(a2 + 32);
      uint64_t v8 = (id *)(a2 + 32);
      id v6 = v9;
      if (!v6)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_metadata_add_header_block_invoke";
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s Unknown metadata type, assuming response for bincompat", buf, 0xCu);
        }

        id v6 = (id)_nw_http_response_create(200, 0);
        objc_storeStrong(v8, v6);
      }
    }
    nw_http_fields_append(v6, *(void *)(a1 + 32), *(void *)(a1 + 40));

    return 1;
  }
  if (v5)
  {
    id v7 = v5;
    _nw_http_request_set_extended_connect_protocol();

    return 1;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_http_metadata_add_header_block_invoke";
  BOOL v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v13, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_metadata_add_header_block_invoke";
        os_log_type_t v16 = "%{public}s metadata not request";
LABEL_26:
        _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      }
    }
    else
    {
      if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v22 = "nw_http_metadata_add_header_block_invoke";
            __int16 v23 = 2082;
            BOOL v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s metadata not request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (!v18) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_metadata_add_header_block_invoke";
        os_log_type_t v16 = "%{public}s metadata not request, no backtrace";
        goto LABEL_26;
      }
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_metadata_add_header_block_invoke";
        os_log_type_t v16 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
LABEL_27:
  }
LABEL_28:
  if (v13) {
    free(v13);
  }
  return 0;
}

void nw_http_metadata_enumerate_headers(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v34 = "nw_http_metadata_enumerate_headers";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v34 = "nw_http_metadata_enumerate_headers";
          __int16 v35 = 2082;
          uint64_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v11) {
          goto LABEL_9;
        }
LABEL_60:
        free(v11);
        goto LABEL_9;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_58:

    goto LABEL_59;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    char v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v34 = "nw_http_metadata_enumerate_headers";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v31)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v34 = "nw_http_metadata_enumerate_headers";
      __int16 v35 = 2082;
      uint64_t v36 = v21;
      _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_39;
  }
  if (!v4)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v34 = "nw_http_metadata_enumerate_headers";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v31)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v34 = "nw_http_metadata_enumerate_headers";
      __int16 v35 = 2082;
      uint64_t v36 = v21;
      _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_39:

    free(v21);
    if (!v11) {
      goto LABEL_9;
    }
    goto LABEL_60;
  }
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __nw_http_metadata_enumerate_headers_block_invoke;
  v29[3] = &unk_1E5248ED8;
  id v8 = v4;
  id v30 = v8;
  uint64_t v9 = *((void *)v5 + 4);
  if (v9)
  {
    __nw_http_metadata_enumerate_headers_block_invoke((uint64_t)v29, v9);
    id v8 = v30;
  }

LABEL_9:
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v32 = 1;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __nw_http_metadata_enumerate_headers_block_invoke_2;
    v28[3] = &unk_1E5249020;
    id v30 = buf;
    id v29 = *(id *)(a1 + 32);
    id v5 = v4;
    id v6 = v28;
    _nw_http_request_access_authority_field((uint64_t)v5, v6);

    if (*(unsigned char *)(*(void *)&buf[8] + 24))
    {
      id v7 = *(void **)(a2 + 24);
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = __nw_http_metadata_enumerate_headers_block_invoke_4;
      v25[3] = &unk_1E5249020;
      os_log_type_t v27 = buf;
      id v26 = *(id *)(a1 + 32);
      nw_http_request_access_path_field(v7, v25);
      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        id v8 = *(id *)(a2 + 24);
        int v9 = 0;
      }
      else
      {
        id v8 = 0;
        int v9 = 1;
      }
    }
    else
    {
      id v8 = 0;
      int v9 = 1;
    }

    _Block_object_dispose(buf, 8);
    if (v9) {
      goto LABEL_12;
    }
  }
  else
  {
    id v8 = *(id *)(a2 + 32);
  }
  if (v8)
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_http_metadata_enumerate_headers_block_invoke_67;
    v21[3] = &unk_1E5249048;
    id v22 = *(id *)(a1 + 32);
    id v8 = v8;
    os_log_type_t v10 = v21;
    _nw_http_fields_enumerate((uint64_t)v8, v10);

LABEL_12:
    uint64_t v11 = 1;
    goto LABEL_13;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
  char v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v14, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null headers", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null headers, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null headers, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null headers, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v14) {
    free(v14);
  }
  id v8 = 0;
  uint64_t v11 = 0;
LABEL_13:

  return v11;
}

void sub_183C19F98(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void __nw_http_metadata_enumerate_headers_block_invoke_2(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __nw_http_metadata_enumerate_headers_block_invoke_3;
  v5[3] = &unk_1E5248FF8;
  long long v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  long long v6 = v4;
  nw_http_field_access(a2, v5);
}

void __nw_http_metadata_enumerate_headers_block_invoke_4(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __nw_http_metadata_enumerate_headers_block_invoke_5;
  v5[3] = &unk_1E5248FF8;
  long long v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  long long v6 = v4;
  nw_http_field_access(a2, v5);
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_67(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_5(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_3(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id *nw_http_create_metadata_for_capsule(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_http_create_metadata_for_capsule_block_invoke;
    v17[3] = &unk_1E5249070;
    uint64_t v19 = a1;
    id v5 = v3;
    id v18 = v5;
    uint64_t v6 = (uint64_t)singleton[4];
    if (v6)
    {
      __nw_http_create_metadata_for_capsule_block_invoke((uint64_t)v17, v6);
      id v7 = v18;
    }
    else
    {
      id v7 = v5;
    }
    id v8 = singleton;

    goto LABEL_8;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v23 = "nw_http_create_metadata_for_capsule";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v11, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v21;
      if (os_log_type_enabled(v12, v21))
      {
        *(_DWORD *)buf = 136446210;
        char v23 = "nw_http_create_metadata_for_capsule";
        char v14 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = v21;
        BOOL v16 = os_log_type_enabled(v12, v21);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            char v23 = "nw_http_create_metadata_for_capsule";
            __int16 v24 = 2082;
            BOOL v25 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v16) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        char v23 = "nw_http_create_metadata_for_capsule";
        char v14 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v21;
      if (os_log_type_enabled(v12, v21))
      {
        *(_DWORD *)buf = 136446210;
        char v23 = "nw_http_create_metadata_for_capsule";
        char v14 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:
  }
LABEL_24:
  if (v11) {
    free(v11);
  }
LABEL_8:

  return singleton;
}

uint64_t __nw_http_create_metadata_for_capsule_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)(a1 + 40);
  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
  return 1;
}

BOOL __nw_http_metadata_is_capsule_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) != 0;
}

uint64_t nw_http_metadata_get_capsule_type(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_metadata_get_capsule_type_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_capsule_type_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_metadata_get_capsule_type_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t __nw_http_metadata_copy_capsule_data_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_metadata_set_datagram_context_id(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v4 = v3;
  if (!v3)
  {
    int v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
          __int16 v28 = 2082;
          id v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_metadata_set_datagram_context_id_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v23[4] = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_metadata_set_datagram_context_id_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_metadata_set_datagram_context_id";
    __int16 v28 = 2082;
    id v29 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_metadata_set_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 32);
  return 1;
}

id *nw_http_create_metadata_with_parsed_fields(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v4 = v3;
  if (v3)
  {
    id v5 = v3;
    if (a2)
    {
      id v6 = (void *)_nw_http_parsed_fields_copy_request();

      if (v6)
      {
        metadata_for_request = nw_http_create_metadata_for_request(v6);
LABEL_7:
        uint64_t v8 = metadata_for_request;
LABEL_9:

        goto LABEL_10;
      }
    }
    else
    {
      id v6 = (void *)_nw_http_parsed_fields_copy_response();

      if (v6)
      {
        metadata_for_request = nw_http_create_metadata_for_response(v6);
        goto LABEL_7;
      }
    }
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
        os_log_type_t v14 = "%{public}s called with null parsed_fields";
LABEL_24:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
            __int16 v21 = 2082;
            os_log_type_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parsed_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (!v16) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
        os_log_type_t v14 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_24;
      }
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
        os_log_type_t v14 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
LABEL_25:
  }
LABEL_26:
  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0;
LABEL_10:

  return v8;
}

BOOL __nw_http_metadata_copy_header_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v4 = *(void **)(a2 + 24);
  if (!v4) {
    long long v4 = *(void **)(a2 + 32);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v4);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v5)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v17 = "nw_http_metadata_copy_header_fields_block_invoke";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v8, &type, &v14)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        os_log_type_t v11 = "%{public}s called with null header_fields";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            char v17 = "nw_http_metadata_copy_header_fields_block_invoke";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v13) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        os_log_type_t v11 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_18;
      }
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        os_log_type_t v11 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:

LABEL_20:
    if (v8) {
      free(v8);
    }
  }
  return v5 != 0;
}

uint64_t __nw_http_metadata_set_request_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  id v3 = *(void **)(a2 + 32);
  *(void *)(a2 + 32) = 0;

  return 1;
}

BOOL __nw_http_metadata_enumerate_modern_header_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a2 + 24);
  if (!v3)
  {
    id v4 = *(id *)(a2 + 32);
    if (v4) {
      goto LABEL_4;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v18))
    {
LABEL_24:
      if (v12) {
        free(v12);
      }
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
            __int16 v22 = 2082;
            uint64_t v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v17) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_22;
      }
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

    goto LABEL_24;
  }
  id v4 = v3;
LABEL_4:
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = v4;
  id v7 = v5;
  if (!v7)
  {
    int v9 = __nwlog_obj();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_http_fields_enumerate_modern_header_fields";
    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v10);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v10);
  }
  _nw_http_fields_enumerate_modern_header_fields((uint64_t)v6, v7);

  return 1;
}

uint64_t nw_http_metadata_legacy_serialize(void *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (a2)
  {
    uint64_t v5 = nw_protocol_metadata_copy_definition(v3);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v5, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v35 = 0;
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = __nw_http_metadata_legacy_serialize_block_invoke;
      v31[3] = &unk_1E5249098;
      v31[4] = buf;
      v31[5] = a2;
      if (v4)
      {
        uint64_t isa = (uint64_t)v4[4].isa;
        if (isa) {
          __nw_http_metadata_legacy_serialize_block_invoke((uint64_t)v31, isa);
        }
LABEL_8:
        uint64_t v8 = *(void *)(*(void *)&buf[8] + 24);
        _Block_object_dispose(buf, 8);
        goto LABEL_9;
      }
      BOOL v16 = __nwlog_obj();
      *(_DWORD *)uint64_t v36 = 136446210;
      uint64_t v37 = "nw_protocol_metadata_access_handle";
      BOOL v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v32 = 0;
      if (__nwlog_fault(v17, &type, &v32))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)uint64_t v36 = 136446210;
            uint64_t v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null metadata", v36, 0xCu);
          }
        }
        else if (v32)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          char v18 = __nwlog_obj();
          os_log_type_t v26 = type;
          BOOL v27 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)uint64_t v36 = 136446466;
              uint64_t v37 = "nw_protocol_metadata_access_handle";
              __int16 v38 = 2082;
              BOOL v39 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null metadata, dumping backtrace:%{public}s", v36, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_61;
          }
          if (v27)
          {
            *(_DWORD *)uint64_t v36 = 136446210;
            uint64_t v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null metadata, no backtrace", v36, 0xCu);
          }
        }
        else
        {
          char v18 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)uint64_t v36 = 136446210;
            uint64_t v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s called with null metadata, backtrace limit exceeded", v36, 0xCu);
          }
        }
      }
LABEL_61:
      if (v17) {
        free(v17);
      }
      goto LABEL_8;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    v36[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v11, v36, &type))
    {
      if (v36[0] == 17)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_54:

        goto LABEL_55;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v29 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_1830D4000, v12, v29, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_54;
      }
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v23 = v36[0];
      BOOL v24 = os_log_type_enabled(v12, (os_log_type_t)v36[0]);
      if (!v20)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_54;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v20;
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_34;
    }
  }
  else
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    v36[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v11, v36, &type))
    {
      if (v36[0] == 17)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null serialized_length", buf, 0xCu);
        }
        goto LABEL_54;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v28 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s called with null serialized_length, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_54;
      }
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = v36[0];
      BOOL v22 = os_log_type_enabled(v12, (os_log_type_t)v36[0]);
      if (!v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null serialized_length, no backtrace", buf, 0xCu);
        }
        goto LABEL_54;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v20;
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null serialized_length, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_34:

      free(v20);
    }
  }
LABEL_55:
  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0;
LABEL_9:

  return v8;
}

void sub_183C1C000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_metadata_legacy_serialize_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a2 + 24);
  if (v3)
  {
    id v4 = v3;
LABEL_4:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_http_fields_legacy_serialize(v4, *(void *)(a1 + 40));

    return 1;
  }
  id v4 = *(id *)(a2 + 32);
  if (v4) {
    goto LABEL_4;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_http_metadata_legacy_serialize_block_invoke";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        os_log_type_t v10 = "%{public}s called with null header_fields";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v16 = "nw_http_metadata_legacy_serialize_block_invoke";
            __int16 v17 = 2082;
            char v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v12) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        os_log_type_t v10 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_19;
      }
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        os_log_type_t v10 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
  return 0;
}

id nw_protocol_copy_http_client_definition()
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  int v0 = (void *)nw_protocol_copy_http_client_definition_definition;

  return v0;
}

BOOL __nw_protocol_copy_http_client_definition_block_invoke()
{
  if (nw_protocol_http_client_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_client_identifier::onceToken, &__block_literal_global_30012);
  }
  int v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_http_client_identifier::protocol_identifier);
  uint64_t v1 = (void *)nw_protocol_copy_http_client_definition_definition;
  nw_protocol_copy_http_client_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_client_definition_definition, (uint64_t)nw_http_client_allocate_options, (uint64_t)nw_http_client_copy_options, (uint64_t)nw_http_client_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_client_definition_definition, (uint64_t)nw_http_client_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_client_definition_definition, 0, (uint64_t)nw_http_client_serialize_options, (uint64_t)nw_http_client_deserialize_options);
  nw_protocol_definition_set_metadata_initializer((void *)nw_protocol_copy_http_client_definition_definition, 0x48u, nw_http_client_initialize_metadata, nw_http_client_finalize_metadata);
  if (nw_protocol_http_client_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_client_identifier::onceToken, &__block_literal_global_30012);
  }
  id v2 = (void *)nw_protocol_copy_http_client_definition_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_client_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_client_create, 0);
}

void nw_http_client_finalize_metadata(uint64_t a1, void *a2)
{
  id v3 = (void *)a2[3];
  a2[3] = 0;

  id v4 = (void *)a2[4];
  a2[4] = 0;

  uint64_t v5 = (void *)a2[5];
  if (v5)
  {
    free(v5);
    a2[5] = 0;
  }
  id v6 = (void *)a2[6];
  a2[6] = 0;

  id v7 = (void *)a2[7];
  a2[7] = 0;
}

void nw_http_client_initialize_metadata(uint64_t a1, uint64_t a2)
{
  mach_get_times();
  *(void *)a2 = 1;
  *(double *)(a2 + 16) = (double)0 - *MEMORY[0x1E4F1CF78] + (double)0 * 0.000000001;
  BOOL v3 = nw_array_create();
  id v4 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v3;
}

BOOL nw_http_client_deserialize_options(void *a1, const void **a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 16)
    {
      BOOL v7 = nw_http_client_copy_options(v5, a2);
      goto LABEL_4;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_client_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), backt"
                "race limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_client_deserialize_options";
      __int16 v23 = 2082;
      BOOL v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), dumping b"
            "acktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_client_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_client_deserialize_options";
      __int16 v23 = 2082;
      BOOL v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

BOOL nw_http_client_copy_options(void *a1, const void **a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_client_copy_options";
    os_log_type_t v11 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v19))
    {
LABEL_22:
      if (v11) {
        free(v11);
      }
      id v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_client_copy_options";
        os_log_type_t v14 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v18 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v22 = "nw_http_client_copy_options";
            __int16 v23 = 2082;
            uint64_t v24 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v18) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_client_copy_options";
        os_log_type_t v14 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_client_copy_options";
        os_log_type_t v14 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  id v4 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    id v5 = _Block_copy(*a2);
    id v6 = *v4;
    *id v4 = v5;

    BOOL v7 = _Block_copy(a2[1]);
    uint64_t v8 = v4[1];
    v4[1] = v7;

LABEL_4:
    return (BOOL)v4;
  }
  os_log_type_t v15 = __nwlog_obj();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v22 = "strict_calloc";
  __int16 v23 = 2048;
  uint64_t v24 = 1;
  __int16 v25 = 2048;
  uint64_t v26 = 16;
  BOOL v16 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL nw_http_client_serialize_options(void *a1, const void **a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL result = nw_http_client_copy_options(a1, a2);
    *a3 = 16;
    return result;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_client_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_client_serialize_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_http_client_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1];
  }
  return result;
}

void nw_http_client_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0;

    id v4 = a2[1];
    a2[1] = 0;

    free(a2);
    return;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_client_deallocate_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_deallocate_options";
        os_log_type_t v9 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_client_deallocate_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v11) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_deallocate_options";
        os_log_type_t v9 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_deallocate_options";
        os_log_type_t v9 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
}

BOOL nw_http_client_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

NWConcrete_nw_protocol_options *nw_http_client_create_options()
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  int v0 = (void *)nw_protocol_copy_http_client_definition_definition;

  return nw_protocol_create_options(v0);
}

BOOL nw_protocol_options_is_http_client(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_client_definition_definition);

    return is_equal_unsafe;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_http_client";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_http_client";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t __nw_http_client_options_set_resend_handler_block_invoke(uint64_t a1, void **a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *a2;
  *a2 = v3;

  return 1;
}

void *nw_http_client_options_copy_resend_handler(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v24 = __Block_byref_object_copy__74035;
      __int16 v25 = __Block_byref_object_dispose__74036;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_client_options_copy_resend_handler_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_client", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C1DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_client_options_set_retry_with_h1_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = v3;

  return 1;
}

void *nw_http_client_options_copy_retry_with_h1_handler(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v24 = __Block_byref_object_copy__74035;
      __int16 v25 = __Block_byref_object_dispose__74036;
      id v26 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_http_client_options_copy_retry_with_h1_handler_block_invoke;
      v20[3] = &unk_1E5248E90;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s protocol options are not http_client", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s protocol options are not http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s protocol options are not http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

void sub_183C1E238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_client_options_copy_retry_with_h1_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

void nw_http_client_metadata_create_next_transaction(void *a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_client_metadata_create_next_transaction_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v24 = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_client_metadata_create_next_transaction_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  char v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v25)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
    __int16 v29 = 2082;
    os_log_type_t v30 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_client_metadata_create_next_transaction_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = v4[2];
    uint64_t v5 = v4[3];
    if (v6 == v5) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = *(void **)(v5 - 8);
    }
  }
  BOOL v7 = v4;
  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_transaction_definition_definition);
  int v9 = *(_DWORD *)(a1 + 32);
  os_log_type_t v10 = singleton;
  BOOL v11 = v10;
  if (!v10)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v19) {
          goto LABEL_13;
        }
        goto LABEL_50;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  os_log_type_t v12 = v10;
  id v13 = v12[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v13, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_http_transaction_metadata_set_start_reason_block_invoke;
    uint64_t v35 = &__block_descriptor_36_e9_B16__0_v8l;
    int v36 = v9;
    uint64_t v15 = (uint64_t)v12[4];
    if (v15) {
      __nw_http_transaction_metadata_set_start_reason_block_invoke((uint64_t)buf, v15);
    }
    goto LABEL_13;
  }
  os_log_type_t v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
  os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v32 = 0;
  if (!__nwlog_fault(v19, &type, &v32)) {
    goto LABEL_49;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
      _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v32)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
      _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  uint64_t v27 = (char *)__nw_create_backtrace_string();
  BOOL v20 = __nwlog_obj();
  os_log_type_t v28 = type;
  BOOL v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
      _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v27;
    _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v19) {
LABEL_50:
  }
    free(v19);
LABEL_13:

  nw_array_append(*(void *)(a2 + 24), v11);
  if (v7)
  {
    uint64_t start_time = nw_http_transaction_metadata_get_start_time(v11);
    nw_http_transaction_metadata_set_end_time(v7, start_time);
  }

  return 1;
}

uint64_t nw_http_transaction_metadata_get_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_start_time_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_start_time_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

void nw_http_transaction_metadata_set_end_time(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v11, &v28, &v27)) {
      goto LABEL_42;
    }
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v28;
      if (os_log_type_enabled(v12, v28))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = v28;
      BOOL v18 = os_log_type_enabled(v12, v28);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
          __int16 v31 = 2082;
          char v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = v28;
      if (os_log_type_enabled(v12, v28))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  uint64_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_transaction_metadata_set_end_time_block_invoke;
    v24[3] = &unk_1E5249070;
    uint64_t v26 = a2;
    uint64_t v8 = v5;
    id v25 = v8;
    uint64_t v9 = (uint64_t)v8[4];
    if (v9)
    {
      __nw_http_transaction_metadata_set_end_time_block_invoke((uint64_t)v24, v9);
      uint64_t v8 = (id *)v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v28 = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v11, &v28, &v27)) {
    goto LABEL_42;
  }
  if (v28 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = v28;
    if (os_log_type_enabled(v12, v28))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v27)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = v28;
    if (os_log_type_enabled(v12, v28))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = v28;
  BOOL v21 = os_log_type_enabled(v12, v28);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v30 = "nw_http_transaction_metadata_set_end_time";
    __int16 v31 = 2082;
    char v32 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

BOOL __nw_http_transaction_metadata_set_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  if (!v2)
  {
    *(void *)(a2 + 56) = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a2 + 120);
    if (v3) {
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, *(void *)(a1 + 32), 4);
    }
  }
  return v2 == 0;
}

uint64_t __nw_http_transaction_metadata_get_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 48);
  return 1;
}

uint64_t __nw_http_transaction_metadata_set_start_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a1 + 32);
  return 1;
}

void __nw_protocol_copy_http_transaction_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(1, "http_transaction");
  id v1 = (void *)nw_protocol_copy_http_transaction_definition_definition;
  nw_protocol_copy_http_transaction_definition_definition = (uint64_t)named;

  uint64_t v2 = (void *)nw_protocol_copy_http_transaction_definition_definition;

  nw_protocol_definition_set_metadata_initializer(v2, 0x90u, nw_http_transaction_initialize_metadata, nw_http_transaction_finalize_metadata);
}

void nw_http_transaction_finalize_metadata(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[12];
  a2[12] = 0;

  uint64_t v4 = (void *)a2[13];
  a2[13] = 0;

  uint64_t v5 = (void *)a2[14];
  a2[14] = 0;

  id v6 = (void *)a2[15];
  a2[15] = 0;

  BOOL v7 = (void *)a2[16];
  a2[16] = 0;
}

uint64_t nw_http_transaction_initialize_metadata(uint64_t a1, uint64_t a2)
{
  uint64_t result = mach_continuous_time();
  if (result <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = result;
  }
  *(void *)(a2 + 48) = v4;
  return result;
}

id nw_http_client_metadata_copy_current_transaction_metadata(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v26 = __Block_byref_object_copy__5_73857;
      char v27 = __Block_byref_object_dispose__6_73858;
      id v28 = 0;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke((uint64_t)v22, isa);
        id v6 = *(void **)(*(void *)&buf[8] + 40);
      }
      else
      {
        id v6 = 0;
      }
      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2 || (v4 = *(void *)(v2 + 16), uint64_t v3 = *(void *)(v2 + 24), v4 == v3)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void **)(v3 - 8);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v5);
  return 1;
}

uint64_t __nw_http_client_metadata_get_transaction_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2) {
    uint64_t v2 = (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 3;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  return 1;
}

uint64_t __nw_http_client_metadata_enumerate_transactions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(atomic_uchar **)(a2 + 24);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_http_client_metadata_enumerate_transactions_block_invoke_2;
  v4[3] = &unk_1E524AE90;
  id v5 = *(id *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);

  return 1;
}

uint64_t __nw_http_client_metadata_enumerate_transactions_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __nw_http_client_metadata_set_initial_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_client_metadata_get_initial_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_client_metadata_set_prevent_timeout_callback(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
          __int16 v30 = 2082;
          __int16 v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke;
    v24[3] = &unk_1E5248ED8;
    id v8 = v4;
    id v25 = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9)
    {
      __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke((uint64_t)v24, v9);
      id v8 = v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v11, &type, &v26)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_client", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  BOOL v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v29 = "nw_http_client_metadata_set_prevent_timeout_callback";
    __int16 v30 = 2082;
    __int16 v31 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *(void **)(a2 + 48);
  *(void *)(a2 + 48) = v3;

  return 1;
}

uint64_t __nw_http_client_metadata_call_prevent_timeout_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return 1;
}

BOOL __nw_http_client_metadata_mark_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2)
  {
    mach_get_times();
    *(void *)(a2 + 8) = 1;
    *(double *)(a2 + 16) = (double)0 - *MEMORY[0x1E4F1CF78] + (double)0 * 0.000000001;
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4 || (v6 = *(void *)(v4 + 16), uint64_t v5 = *(void *)(v4 + 24), v6 == v5))
    {
      id v8 = 0;
    }
    else
    {
      id v7 = *(id *)(v5 - 8);
      id v8 = v7;
      if (v7) {
        nw_http_transaction_metadata_set_end_time(v7, *(void *)(a2 + 8));
      }
    }
  }
  return v2 == 0;
}

uint64_t nw_http_client_metadata_get_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_client_metadata_get_start_time_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = v2[4].isa;
      if (isa)
      {
        __nw_http_client_metadata_get_start_time_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_client", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_client_metadata_get_start_time_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t nw_http_client_metadata_get_end_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_client_metadata_get_end_time_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_client_metadata_get_end_time_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_client", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_client_metadata_get_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 8);
  return 1;
}

double nw_http_client_metadata_convert_time_to_absolute(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v29)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(backtrace_string);
    goto LABEL_59;
  }
  if (!a2)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null time", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v29)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s called with null time, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null time, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null time, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  uint64_t v5 = nw_protocol_metadata_copy_definition(v3);
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v5, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v32 = 0;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __nw_http_client_metadata_convert_time_to_absolute_block_invoke;
    v28[3] = &unk_1E5249098;
    void v28[4] = buf;
    v28[5] = a2;
    uint64_t isa = (uint64_t)v4[4].isa;
    if (isa)
    {
      __nw_http_client_metadata_convert_time_to_absolute_block_invoke((uint64_t)v28, isa);
      double v8 = *(double *)(*(void *)&buf[8] + 24);
    }
    else
    {
      double v8 = 0.0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_10;
  }
  BOOL v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v11, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s metadata must be http_client", buf, 0xCu);
      }
LABEL_58:

      goto LABEL_59;
    }
    if (!v29)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
LABEL_59:
  if (v11) {
    free(v11);
  }
  double v8 = 0.0;
LABEL_10:

  return v8;
}

uint64_t __nw_http_client_metadata_convert_time_to_absolute_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    unint64_t v4 = *(void *)a2;
  }
  if (v4 <= *(void *)(a1 + 40))
  {
    uint64_t v9 = nw_delta_nanos(v4, *(void *)(a1 + 40));
    double v6 = *(double *)(a2 + 16);
    double v7 = (double)(unint64_t)v9;
    double v8 = 0.000000001;
  }
  else
  {
    uint64_t v5 = nw_delta_nanos(*(void *)(a1 + 40), v4);
    double v6 = *(double *)(a2 + 16);
    double v7 = (double)(unint64_t)v5;
    double v8 = -0.000000001;
  }
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6 + v7 * v8;
  return 1;
}

BOOL __nw_http_client_metadata_set_sniffed_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a2 + 40);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 40) = 0;
  }
  uint64_t v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1;
  }
  double v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 40) = v6;
    return 1;
  }
  double v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  uint64_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __nw_http_client_metadata_get_sniffed_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 40);
  return 1;
}

uint64_t __nw_http_client_metadata_set_client_error_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_client_metadata_get_client_error_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 64);
  return 1;
}

uint64_t __nw_http_client_metadata_set_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_client_metadata_get_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_protocol_copy_http_client_bottom_definition()
{
  if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_79);
  }
  int v0 = (void *)nw_protocol_copy_http_client_bottom_definition_definition;

  return v0;
}

BOOL __nw_protocol_copy_http_client_bottom_definition_block_invoke()
{
  if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22479);
  }
  int v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_client_bottom_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_client_bottom_definition_definition;
  nw_protocol_copy_http_client_bottom_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_client_bottom_definition_definition, (uint64_t)nw_http_client_bottom_allocate_options, (uint64_t)nw_http_client_bottom_copy_options, (uint64_t)nw_http_client_bottom_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_client_bottom_definition_definition, (uint64_t)nw_http_client_bottom_options_compare);
  if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22479);
  }
  uint64_t v2 = (void *)nw_protocol_copy_http_client_bottom_definition_definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_client_bottom_identifier::protocol_identifier, v2, (uint64_t)nw_protocol_http_client_bottom_create, (uint64_t)nw_protocol_http_client_bottom_accept);
}

uint64_t nw_http_client_bottom_options_compare()
{
  return 1;
}

void nw_http_client_bottom_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    free(a2);
    return;
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
        double v6 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
            __int16 v13 = 2082;
            os_log_type_t v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
        double v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }
      unint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
        double v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
}

BOOL nw_http_client_bottom_copy_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  unint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_client_bottom_allocate_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  unint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

NWConcrete_nw_protocol_options *nw_http_client_bottom_create_options()
{
  if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_79);
  }
  int v0 = (void *)nw_protocol_copy_http_client_bottom_definition_definition;

  return nw_protocol_create_options(v0);
}

BOOL nw_protocol_options_is_http_client_bottom(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_79);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_client_bottom_definition_definition);

    return is_equal_unsafe;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_client_bottom";
  double v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      double v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      double v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_client_bottom";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      double v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return 0;
}

id nw_protocol_copy_http_messaging_definition()
{
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  int v0 = (void *)nw_protocol_copy_http_messaging_definition_definition;

  return v0;
}

NWConcrete_nw_protocol_options *nw_http_messaging_create_options()
{
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  int v0 = (void *)nw_protocol_copy_http_messaging_definition_definition;

  return nw_protocol_create_options(v0);
}

void nw_http_messaging_options_set_http1_options(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
          __int16 v28 = 2082;
          char v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  os_log_type_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_messaging_options_set_http1_options_block_invoke;
    v22[3] = &unk_1E5248F68;
    id v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
    __int16 v28 = 2082;
    char v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_messaging_options_set_http1_options_block_invoke(uint64_t a1, id *location)
{
  return 1;
}

void nw_http_messaging_options_set_http2_options(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
          __int16 v28 = 2082;
          char v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  os_log_type_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_messaging_options_set_http2_options_block_invoke;
    v22[3] = &unk_1E5248F68;
    id v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
    __int16 v28 = 2082;
    char v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_messaging_options_set_http2_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_messaging_options_set_http3_options(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
          __int16 v28 = 2082;
          char v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  os_log_type_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_messaging_options_set_http3_options_block_invoke;
    v22[3] = &unk_1E5248F68;
    id v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
    __int16 v28 = 2082;
    char v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t __nw_http_messaging_options_set_http3_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_messaging_options_set_client_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void __nw_parameters_find_http_messaging_options_block_invoke(void *a1, void *a2)
{
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    if (!*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      id v8 = v4;
      BOOL is_http_messaging = nw_protocol_options_is_http_messaging(v4);
      os_log_type_t v5 = v8;
      if (is_http_messaging)
      {
        objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
        os_log_type_t v5 = v8;
      }
    }
  }
  else
  {
    id v9 = v4;
    uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
    os_log_type_t v5 = v9;
    if (protocol_handle == a1[6]) {
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    }
  }
}

id nw_http_messaging_options_copy_client_metadata(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v18 = __Block_byref_object_copy__5_73857;
    BOOL v19 = __Block_byref_object_dispose__6_73858;
    id v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_http_messaging_options_copy_client_metadata_block_invoke;
    v14[3] = &unk_1E5248E90;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    id v4 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
  double v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s protocol options are not http_messaging", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_5:

  return v4;
}

void sub_183C23C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_messaging_options_copy_client_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_messaging_options_override_version_specific_protocol_block_invoke(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    if (v3) {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(v3, a1[6], a1[4]);
    }
  }
  return 1;
}

uint64_t __nw_http_messaging_options_set_override_protocol_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && !*(void *)(a2 + 32))
  {
    id v4 = _Block_copy(*(const void **)(a1 + 32));
    os_log_type_t v5 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = v4;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_messaging_options_set_override_protocol_handler_block_invoke";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of http_messaging override_protocol handler", (uint8_t *)&v7, 0xCu);
    }
  }
  return 1;
}

uint64_t __nw_http_messaging_options_can_accept_block_invoke(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    if (v3) {
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(v3, a1[4], a1[5]);
    }
  }
  return 1;
}

uint64_t __nw_http_messaging_options_set_can_accept_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && !*(void *)(a2 + 40))
  {
    id v4 = _Block_copy(*(const void **)(a1 + 32));
    os_log_type_t v5 = *(void **)(a2 + 40);
    *(void *)(a2 + 40) = v4;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_messaging_options_set_can_accept_handler_block_invoke";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of http_messaging can_accept handler", (uint8_t *)&v7, 0xCu);
    }
  }
  return 1;
}

id nw_protocol_copy_http_transaction_definition()
{
  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  int v0 = (void *)nw_protocol_copy_http_transaction_definition_definition;

  return v0;
}

uint64_t __nw_http_transaction_metadata_set_event_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *(void **)(a2 + 120);
  *(void *)(a2 + 120) = v3;

  return 1;
}

uint64_t __nw_http_transaction_metadata_get_start_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 136);
  return 1;
}

uint64_t __nw_http_transaction_metadata_set_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_http_transaction_metadata_get_connection_metadata(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v26 = __Block_byref_object_copy__5_73857;
      os_log_type_t v27 = __Block_byref_object_dispose__6_73858;
      id v28 = 0;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_transaction_metadata_get_connection_metadata_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_connection_metadata_block_invoke((uint64_t)v22, isa);
        id v6 = *(void **)(*(void *)&buf[8] + 40);
      }
      else
      {
        id v6 = 0;
      }
      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_transaction_metadata_get_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_transaction_metadata_set_outbound_message(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v11, &v28, &v27)) {
      goto LABEL_42;
    }
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v28;
      if (os_log_type_enabled(v12, v28))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = v28;
      BOOL v18 = os_log_type_enabled(v12, v28);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = v28;
      if (os_log_type_enabled(v12, v28))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  os_log_type_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_transaction_metadata_set_outbound_message_block_invoke;
    v24[3] = &unk_1E5249138;
    id v25 = v4;
    id v8 = v5;
    id v26 = v8;
    uint64_t v9 = (uint64_t)v8[4];
    if (v9)
    {
      __nw_http_transaction_metadata_set_outbound_message_block_invoke((uint64_t)v24, v9);
      id v8 = (id *)v26;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v28 = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v11, &v28, &v27)) {
    goto LABEL_42;
  }
  if (v28 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = v28;
    if (os_log_type_enabled(v12, v28))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v27)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = v28;
    if (os_log_type_enabled(v12, v28))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  BOOL v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = v28;
  BOOL v21 = os_log_type_enabled(v12, v28);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_http_transaction_metadata_set_outbound_message";
    __int16 v31 = 2082;
    uint64_t v32 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_transaction_metadata_set_outbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 104), *(id *)(a1 + 32));
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, *(void *)(a1 + 40), 0);
  }
  return 1;
}

id nw_http_transaction_metadata_get_outbound_message(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      id v26 = __Block_byref_object_copy__5_73857;
      char v27 = __Block_byref_object_dispose__6_73858;
      id v28 = 0;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_transaction_metadata_get_outbound_message_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_message_block_invoke((uint64_t)v22, isa);
        uint64_t v6 = *(void **)(*(void *)&buf[8] + 40);
      }
      else
      {
        uint64_t v6 = 0;
      }
      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_transaction_metadata_get_outbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_transaction_metadata_set_inbound_message(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v11, &v28, &v27)) {
      goto LABEL_42;
    }
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v28;
      if (os_log_type_enabled(v12, v28))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = v28;
      BOOL v18 = os_log_type_enabled(v12, v28);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = v28;
      if (os_log_type_enabled(v12, v28))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  uint64_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_transaction_metadata_set_inbound_message_block_invoke;
    v24[3] = &unk_1E5249138;
    id v25 = v4;
    id v8 = v5;
    id v26 = v8;
    uint64_t v9 = (uint64_t)v8[4];
    if (v9)
    {
      __nw_http_transaction_metadata_set_inbound_message_block_invoke((uint64_t)v24, v9);
      id v8 = (id *)v26;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v28 = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v11, &v28, &v27)) {
    goto LABEL_42;
  }
  if (v28 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = v28;
    if (os_log_type_enabled(v12, v28))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v27)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = v28;
    if (os_log_type_enabled(v12, v28))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  BOOL v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = v28;
  BOOL v21 = os_log_type_enabled(v12, v28);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_http_transaction_metadata_set_inbound_message";
    __int16 v31 = 2082;
    uint64_t v32 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_transaction_metadata_set_inbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 112), *(id *)(a1 + 32));
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v6, *(void *)(a1 + 40), 2);
  }
  return 1;
}

id nw_http_transaction_metadata_get_inbound_message(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      id v26 = __Block_byref_object_copy__5_73857;
      char v27 = __Block_byref_object_dispose__6_73858;
      id v28 = 0;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_transaction_metadata_get_inbound_message_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_message_block_invoke((uint64_t)v22, isa);
        uint64_t v6 = *(void **)(*(void *)&buf[8] + 40);
      }
      else
      {
        uint64_t v6 = 0;
      }
      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_transaction_metadata_get_inbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_transaction_metadata_set_first_on_connection(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v24 = "nw_http_transaction_metadata_set_first_on_connection";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          char v24 = "nw_http_transaction_metadata_set_first_on_connection";
          __int16 v25 = 2082;
          id v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        char v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v3 = v1;
  id v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    uint64_t v6 = *((void *)v3 + 4);
    if (v6) {
      __nw_http_transaction_metadata_set_first_on_connection_block_invoke((uint64_t)&__block_literal_global_87, v6);
    }
    goto LABEL_7;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v24 = "nw_http_transaction_metadata_set_first_on_connection";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v21)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      char v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    char v24 = "nw_http_transaction_metadata_set_first_on_connection";
    __int16 v25 = 2082;
    id v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_transaction_metadata_set_first_on_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 140) |= 1u;
  return 1;
}

BOOL nw_http_transaction_metadata_is_first_on_connection(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_is_first_on_connection_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_is_first_on_connection_block_invoke((uint64_t)v21, isa);
        BOOL v6 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      }
      else
      {
        BOOL v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  BOOL v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_is_first_on_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 140) & 1;
  return 1;
}

void nw_http_transaction_metadata_increment_outbound_header_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  uint64_t v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v23[4] = a2;
    id v8 = v5[4];
    if (v8) {
      __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
    __int16 v28 = 2082;
    uint64_t v29 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke(uint64_t a1, void *a2)
{
  *a2 += *(void *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_header_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_header_size_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_header_size_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_header_size_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t __nw_http_transaction_metadata_increment_outbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) += *(void *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_body_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_body_size_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_body_size_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 8);
  return 1;
}

void nw_http_transaction_metadata_increment_outbound_body_transfer_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v23[4] = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
    __int16 v28 = 2082;
    uint64_t v29 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) += *(void *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_body_transfer_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 16);
  return 1;
}

void nw_http_transaction_metadata_increment_inbound_header_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v23[4] = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
    __int16 v28 = 2082;
    uint64_t v29 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) += *(void *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_header_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_header_size_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_header_size_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_header_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 24);
  return 1;
}

uint64_t __nw_http_transaction_metadata_increment_inbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) += *(void *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_body_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_body_size_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_body_size_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 32);
  return 1;
}

void nw_http_transaction_metadata_increment_inbound_body_transfer_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v23[4] = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
    __int16 v28 = 2082;
    uint64_t v29 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) += *(void *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_body_transfer_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 40);
  return 1;
}

void nw_http_transaction_metadata_mark_outbound_message_end(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke;
    v22[3] = &unk_1E5248F68;
    uint64_t v6 = v3;
    id v23 = v6;
    uint64_t v7 = (uint64_t)v6[4];
    if (v7)
    {
      __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke((uint64_t)v22, v7);
      uint64_t v6 = (id *)v23;
    }

    goto LABEL_8;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_transaction_metadata_mark_outbound_message_end";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v6, *(void *)(a1 + 32), 1);
  }
  return 1;
}

void nw_http_transaction_metadata_mark_inbound_message_end(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke;
    v22[3] = &unk_1E5248F68;
    uint64_t v6 = v3;
    id v23 = v6;
    uint64_t v7 = (uint64_t)v6[4];
    if (v7)
    {
      __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke((uint64_t)v22, v7);
      uint64_t v6 = (id *)v23;
    }

    goto LABEL_8;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_transaction_metadata_mark_inbound_message_end";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 88) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v6, *(void *)(a1 + 32), 3);
  }
  return 1;
}

void nw_http_transaction_metadata_mark_end(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_mark_end";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_mark_end";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_transaction_metadata_mark_end_block_invoke;
    v22[3] = &unk_1E5248F68;
    uint64_t v6 = v3;
    id v23 = v6;
    uint64_t v7 = (uint64_t)v6[4];
    if (v7)
    {
      __nw_http_transaction_metadata_mark_end_block_invoke((uint64_t)v22, v7);
      uint64_t v6 = (id *)v23;
    }

    goto LABEL_8;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_transaction_metadata_mark_end";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_transaction_metadata_mark_end";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_transaction_metadata_mark_end_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 56))
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = mach_continuous_time();
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v3;
    }
    nw_http_transaction_metadata_set_end_time(v2, v4);
  }
  return 1;
}

uint64_t nw_http_transaction_metadata_get_end_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_end_time_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_end_time_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 56);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_message_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 64);
  return 1;
}

uint64_t __nw_http_transaction_metadata_get_outbound_message_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 72);
  return 1;
}

uint64_t __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 80);
  return 1;
}

uint64_t __nw_http_transaction_metadata_set_converted_url_response_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_transaction_metadata_get_converted_url_response_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(id *)(a2 + 128);
  return 1;
}

id nw_protocol_copy_http_connection_definition()
{
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  int v0 = (void *)nw_protocol_copy_http_connection_definition_definition;

  return v0;
}

void __nw_protocol_copy_http_connection_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(1, "http_connection");
  id v1 = (void *)nw_protocol_copy_http_connection_definition_definition;
  nw_protocol_copy_http_connection_definition_definition = (uint64_t)named;

  id v2 = (void *)nw_protocol_copy_http_connection_definition_definition;

  nw_protocol_definition_set_metadata_initializer(v2, 0xC8u, nw_http_connection_initialize_metadata, nw_http_connection_finalize_metadata);
}

void nw_http_connection_finalize_metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 88);
  *(void *)(a2 + 88) = 0;

  *(unsigned char *)(a2 + 196) &= ~4u;
  uint64_t v4 = *(void **)(a2 + 96);
  *(void *)(a2 + 96) = 0;

  uint64_t v5 = *(void **)(a2 + 104);
  *(void *)(a2 + 104) = 0;

  uint64_t v6 = *(void **)(a2 + 112);
  *(void *)(a2 + 112) = 0;

  uint64_t v7 = *(void **)(a2 + 64);
  *(void *)(a2 + 64) = 0;

  uint64_t v8 = *(void **)(a2 + 72);
  *(void *)(a2 + 72) = 0;

  uint64_t v9 = *(const void **)(a2 + 80);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a2 + 80) = 0;
  }
  *(void *)(a2 + 16) = 0;
  os_log_type_t v10 = *(void **)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;

  os_log_type_t v11 = *(void **)(a2 + 120);
  *(void *)(a2 + 120) = 0;

  os_log_type_t v12 = *(void **)(a2 + 128);
  *(void *)(a2 + 128) = 0;

  os_log_type_t v13 = *(void **)(a2 + 136);
  *(void *)(a2 + 136) = 0;

  os_log_type_t v14 = *(void **)(a2 + 144);
  *(void *)(a2 + 144) = 0;

  os_log_type_t v15 = *(void **)(a2 + 152);
  *(void *)(a2 + 152) = 0;
}

void nw_http_connection_initialize_metadata(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 176) = 0;
}

id *nw_http_connection_create_metadata(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_connection_definition_definition);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __nw_http_connection_create_metadata_block_invoke;
  v13[3] = &unk_1E5249160;
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v9 = v7;
  id v10 = v6;
  id v11 = v5;
  nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)v13);

  return singleton;
}

uint64_t __nw_http_connection_create_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 120), *(id *)(a1 + 32));
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 128);
  *(void *)(a2 + 128) = v4;

  id v6 = _Block_copy(*(const void **)(a1 + 48));
  id v7 = *(void **)(a2 + 152);
  *(void *)(a2 + 152) = v6;

  return 1;
}

void __nw_http_connection_metadata_closed_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 128);
  *(void *)(v2 + 128) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 152);
  *(void *)(v4 + 152) = 0;

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 136);
  if (v7)
  {
    uint64_t v8 = *(NSObject **)(v6 + 144);
    if (v8)
    {
      dispatch_async(v8, v7);
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = *(void **)(v9 + 136);
      *(void *)(v9 + 136) = 0;

      uint64_t v11 = *(void *)(a1 + 32);
      os_log_type_t v12 = *(void **)(v11 + 144);
      *(void *)(v11 + 144) = 0;
    }
  }
}

BOOL nw_http_connection_metadata_get_is_closed(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_connection_metadata_get_is_closed_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (os_unfair_lock_s *)v2[4].isa;
      if (isa)
      {
        __nw_http_connection_metadata_get_is_closed_block_invoke((uint64_t)v21, isa);
        BOOL v6 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      }
      else
      {
        BOOL v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  BOOL v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_connection_metadata_get_is_closed_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_http_connection_metadata_get_is_closed_block_invoke_2;
  v4[3] = &unk_1E5249188;
  uint64_t v2 = a2 + 44;
  void v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  os_unfair_lock_lock(a2 + 44);
  __nw_http_connection_metadata_get_is_closed_block_invoke_2((uint64_t)v4);
  os_unfair_lock_unlock(v2);
  return 1;
}

uint64_t __nw_http_connection_metadata_get_is_closed_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(*(void *)(result + 40) + 128) == 0;
  return result;
}

void nw_http_connection_metadata_close_connection(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_connection_metadata_close_connection";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_connection_metadata_close_connection";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  uint64_t v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_http_connection_metadata_close_connection_block_invoke;
    v22[3] = &unk_1E5248F68;
    BOOL v6 = v3;
    id v23 = v6;
    uint64_t v7 = (uint64_t)v6[4];
    if (v7)
    {
      __nw_http_connection_metadata_close_connection_block_invoke((uint64_t)v22, v7);
      BOOL v6 = (id *)v23;
    }

    goto LABEL_8;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_http_connection_metadata_close_connection";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v24)
  {
    id v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  id v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_http_connection_metadata_close_connection";
    __int16 v28 = 2082;
    uint64_t v29 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_close_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  os_log_type_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  id v4 = (os_unfair_lock_s *)(a2 + 176);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __nw_http_connection_metadata_close_connection_block_invoke_2;
  v10[3] = &unk_1E5249188;
  void v10[4] = &v11;
  v10[5] = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 176));
  __nw_http_connection_metadata_close_connection_block_invoke_2((uint64_t)v10);
  os_unfair_lock_unlock(v4);
  if (!*((unsigned char *)v12 + 24))
  {
    id v5 = *(void **)(a2 + 120);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    int v7[2] = __nw_http_connection_metadata_close_connection_block_invoke_3;
    v7[3] = &unk_1E52491B0;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = a2;
    nw_queue_context_async_if_needed(v5, v7);
  }
  _Block_object_dispose(&v11, 8);
  return 1;
}

void sub_183C2CBE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_connection_metadata_close_connection_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(*(void *)(result + 40) + 128) == 0;
  return result;
}

void __nw_http_connection_metadata_close_connection_block_invoke_3(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3032000000;
  uint64_t v9 = __Block_byref_object_copy__74035;
  id v10 = __Block_byref_object_dispose__74036;
  id v11 = 0;
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v2 = v1 + 44;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __nw_http_connection_metadata_close_connection_block_invoke_4;
  v5[3] = &unk_1E5249188;
  void v5[4] = &v6;
  v5[5] = v1;
  os_unfair_lock_lock(v1 + 44);
  __nw_http_connection_metadata_close_connection_block_invoke_4((uint64_t)v5);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = v7[5];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, v3);
  }
  _Block_object_dispose(&v6, 8);
}

void sub_183C2CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_http_connection_metadata_close_connection_block_invoke_4(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 40) + 128));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(v5 + 128);
  *(void *)(v5 + 128) = 0;
}

uint64_t __nw_http_connection_metadata_set_connection_closed_handler_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = a2 + 44;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2;
  v5[3] = &unk_1E52498B8;
  uint64_t v8 = a2;
  id v7 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 32);
  os_unfair_lock_lock(v3);
  __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2((uint64_t)v5);
  os_unfair_lock_unlock(v3);

  return 1;
}

void __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1[16])
  {
    uint64_t v3 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void **)(v4 + 136);
    *(void *)(v4 + 136) = v3;

    id v6 = *(void **)(a1 + 32);
    id v7 = (id *)(*(void *)(a1 + 48) + 144);
    objc_storeStrong(v7, v6);
  }
  else
  {
    uint64_t v9 = (void *)v1[17];
    uint64_t v8 = v1[18];
    dispatch_async(v8, v9);
  }
}

uint64_t __nw_http_connection_metadata_send_ping_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 120);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __nw_http_connection_metadata_send_ping_block_invoke_2;
  v6[3] = &unk_1E52498B8;
  id v7 = *(id *)(a1 + 32);
  uint64_t v9 = a2;
  id v8 = *(id *)(a1 + 40);
  nw_queue_context_async_if_needed(v4, v6);

  return 1;
}

void __nw_http_connection_metadata_send_ping_block_invoke_2(uint64_t a1)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x3032000000;
  uint64_t v9 = __Block_byref_object_copy__74035;
  id v10 = __Block_byref_object_dispose__74036;
  id v11 = 0;
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 48);
  uint64_t v3 = v2 + 44;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __nw_http_connection_metadata_send_ping_block_invoke_3;
  v5[3] = &unk_1E5249188;
  void v5[4] = &v6;
  v5[5] = v2;
  os_unfair_lock_lock(v2 + 44);
  __nw_http_connection_metadata_send_ping_block_invoke_3((uint64_t)v5);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v7[5];
  if (v4) {
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, *(void *)(a1 + 40));
  }
  else {
    (*(void (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0);
  }
  _Block_object_dispose(&v6, 8);
}

void sub_183C2D0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_http_connection_metadata_send_ping_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 40) + 152));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void nw_http_connection_metadata_set_version(void *a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_http_connection_metadata_set_version";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v28 = "nw_http_connection_metadata_set_version";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_set_version_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v24 = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_connection_metadata_set_version_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  uint64_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v28 = "nw_http_connection_metadata_set_version";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v25)
  {
    id v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  id v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v28 = "nw_http_connection_metadata_set_version";
    __int16 v29 = 2082;
    uint64_t v30 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_connection_metadata_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_connection_metadata_get_version(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_connection_metadata_get_version_block_invoke;
      v22[3] = &unk_1E5248E90;
      void v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_connection_metadata_get_version_block_invoke((uint64_t)v22, isa);
        id v6 = (unsigned int *)(*(void *)&buf[8] + 24);
      }
      else
      {
        id v6 = (unsigned int *)&v26;
      }
      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    uint64_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        id v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        id v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_connection_metadata_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 160);
  return 1;
}

void nw_http_connection_metadata_increment_outbound_message_count(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v3 = v1;
  id v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    uint64_t v6 = *((void *)v3 + 4);
    if (v6) {
      __nw_http_connection_metadata_increment_outbound_message_count_block_invoke((uint64_t)&__block_literal_global_95, v6);
    }
    goto LABEL_7;
  }
  id v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v21)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
    __int16 v25 = 2082;
    int v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_connection_metadata_increment_outbound_message_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int *)(a2 + 168) + 1;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(a2 + 168) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      uint64_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(unsigned int *)(a2 + 168);
        int v8 = 136446978;
        uint64_t v9 = "nw_http_connection_metadata_increment_outbound_message_count_block_invoke";
        __int16 v10 = 2082;
        id v11 = "http_metadata->outbound_message_count";
        __int16 v12 = 2048;
        uint64_t v13 = 1;
        __int16 v14 = 2048;
        uint64_t v15 = v7;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v8, 0x2Au);
      }
    }
    *(_DWORD *)(a2 + 168) = -1;
  }
  return 1;
}

uint64_t __nw_http_connection_metadata_increment_inbound_message_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int *)(a2 + 172) + 1;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(a2 + 172) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      uint64_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(unsigned int *)(a2 + 172);
        int v8 = 136446978;
        uint64_t v9 = "nw_http_connection_metadata_increment_inbound_message_count_block_invoke";
        __int16 v10 = 2082;
        id v11 = "http_metadata->inbound_message_count";
        __int16 v12 = 2048;
        uint64_t v13 = 1;
        __int16 v14 = 2048;
        uint64_t v15 = v7;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v8, 0x2Au);
      }
    }
    *(_DWORD *)(a2 + 172) = -1;
  }
  return 1;
}

uint64_t __nw_http_connection_metadata_get_message_counts_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  if (v2) {
    _DWORD *v2 = *(_DWORD *)(a2 + 168);
  }
  uint64_t v3 = *(_DWORD **)(a1 + 40);
  if (v3) {
    *uint64_t v3 = *(_DWORD *)(a2 + 172);
  }
  return 1;
}

BOOL __nw_http_connection_metadata_copy_cached_token_block_invoke(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 196) & 4) != 0)
  {
    uint64_t v7 = *(unsigned char **)(a1 + 40);
    if (v7) {
      unsigned char *v7 = 1;
    }
    return 1;
  }
  uint64_t v4 = *(void **)(a2 + 88);
  if (!v4) {
    return 1;
  }
  size_t length = xpc_data_get_length(v4);
  if (!length)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    __int16 v10 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v10);
    if (result) {
      goto LABEL_13;
    }
    free(v10);
  }
  uint64_t v6 = malloc_type_malloc(length, 0xF2B69DE5uLL);
  if (v6)
  {
LABEL_5:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
    **(void **)(a1 + 48) = xpc_data_get_bytes(*(xpc_object_t *)(a2 + 88), *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0, length);
    return 1;
  }
  id v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  __int16 v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_5;
  }
LABEL_13:
  __break(1u);
  return result;
}

void nw_http_connection_metadata_set_cached_token(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = *((id *)v5 + 1);
    goto LABEL_3;
  }
  __int16 v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v36 = "nw_protocol_metadata_copy_definition";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v11, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          int v36 = "nw_protocol_metadata_copy_definition";
          __int16 v37 = 2082;
          __int16 v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        int v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v12, v29, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_53:
  if (v11) {
    free(v11);
  }
  id v7 = 0;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __int16 v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v36 = "nw_http_connection_metadata_set_cached_token";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v15, &type, &v33)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        int v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (v33)
    {
      char v23 = (char *)__nw_create_backtrace_string();
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v16, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          int v36 = "nw_http_connection_metadata_set_cached_token";
          __int16 v37 = 2082;
          __int16 v38 = v23;
          _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
LABEL_62:
        if (!v15) {
          goto LABEL_9;
        }
LABEL_63:
        free(v15);
        goto LABEL_9;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        int v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        int v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_1830D4000, v16, v30, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __nw_http_connection_metadata_set_cached_token_block_invoke;
  v32[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v32[4] = a2;
  v32[5] = a3;
  if (v6)
  {
    uint64_t v9 = v6[4];
    if (v9) {
      __nw_http_connection_metadata_set_cached_token_block_invoke((uint64_t)v32, v9);
    }
    goto LABEL_9;
  }
  BOOL v18 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v36 = "nw_protocol_metadata_access_handle";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (!__nwlog_fault(v15, &type, &v33)) {
    goto LABEL_62;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      int v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v33)
  {
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      int v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  int v26 = (char *)__nw_create_backtrace_string();
  uint64_t v16 = __nwlog_obj();
  os_log_type_t v27 = type;
  BOOL v28 = os_log_type_enabled(v16, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      int v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    int v36 = "nw_protocol_metadata_access_handle";
    __int16 v37 = 2082;
    __int16 v38 = v26;
    _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v15) {
    goto LABEL_63;
  }
LABEL_9:
}

uint64_t __nw_http_connection_metadata_set_cached_token_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 196) &= ~4u;
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4 && (size_t v5 = *(void *)(a1 + 40)) != 0)
  {
    xpc_object_t v6 = xpc_data_create(v4, v5);
    id v7 = *(void **)(a2 + 88);
    *(void *)(a2 + 88) = v6;
  }
  else
  {
    id v7 = *(void **)(a2 + 88);
    *(void *)(a2 + 88) = 0;
  }

  return 1;
}

void nw_http_connection_metadata_mark_cached_token_failed(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = *((id *)v1 + 1);
    goto LABEL_3;
  }
  xpc_object_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v31 = "nw_protocol_metadata_copy_definition";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v7, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v31 = "nw_protocol_metadata_copy_definition";
          __int16 v32 = 2082;
          char v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v8, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_53:
  if (v7) {
    free(v7);
  }
  id v3 = 0;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v3, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __int16 v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_http_connection_metadata_mark_cached_token_failed";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (v28)
    {
      os_log_type_t v19 = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v31 = "nw_http_connection_metadata_mark_cached_token_failed";
          __int16 v32 = 2082;
          char v33 = v19;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
LABEL_62:
        if (!v11) {
          goto LABEL_9;
        }
LABEL_63:
        free(v11);
        goto LABEL_9;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (v2)
  {
    uint64_t v5 = v2[4];
    if (v5) {
      __nw_http_connection_metadata_mark_cached_token_failed_block_invoke((uint64_t)&__block_literal_global_101_76887, v5);
    }
    goto LABEL_9;
  }
  __int16 v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v31 = "nw_protocol_metadata_access_handle";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v11, &type, &v28)) {
    goto LABEL_62;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v31 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v28)
  {
    __int16 v12 = __nwlog_obj();
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v31 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  BOOL v22 = (char *)__nw_create_backtrace_string();
  __int16 v12 = __nwlog_obj();
  os_log_type_t v23 = type;
  BOOL v24 = os_log_type_enabled(v12, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v31 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v31 = "nw_protocol_metadata_access_handle";
    __int16 v32 = 2082;
    char v33 = v22;
    _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v22);
  if (v11) {
    goto LABEL_63;
  }
LABEL_9:
}

uint64_t __nw_http_connection_metadata_mark_cached_token_failed_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 88);
  *(void *)(a2 + 88) = 0;

  *(unsigned char *)(a2 + 196) |= 4u;
  return 1;
}

uint64_t nw_http_connection_metadata_get_next_connect_ip_request_id(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke;
      v21[3] = &unk_1E5248E90;
      void v21[4] = buf;
      uint64_t isa = (uint64_t *)v2[4].isa;
      if (isa)
      {
        __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __int16 v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    int v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke(uint64_t a1, uint64_t *a2)
{
  if ((unint64_t)(*a2 + 1) <= 0x3FFFFFFFFFFFFFFELL) {
    uint64_t v2 = *a2 + 1;
  }
  else {
    uint64_t v2 = 1;
  }
  *a2 = v2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  return 1;
}

uint64_t __nw_http_connection_metadata_set_path_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = nw_path_copy_without_parameters(*(void **)(a1 + 32));
  uint64_t v4 = *(void **)(a2 + 96);
  *(void *)(a2 + 96) = v3;

  return 1;
}

id nw_http_connection_metadata_get_path(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v27 = __Block_byref_object_copy__5_73857;
    char v28 = __Block_byref_object_dispose__6_73858;
    id v29 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_path_block_invoke;
    v23[3] = &unk_1E5248E90;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t isa = (uint64_t)v1[4].isa;
      if (isa) {
        __nw_http_connection_metadata_get_path_block_invoke((uint64_t)v23, isa);
      }
LABEL_7:
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v30 = 136446210;
    os_log_type_t v31 = "nw_protocol_metadata_access_handle";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v30 = 136446466;
            os_log_type_t v31 = "nw_protocol_metadata_access_handle";
            __int16 v32 = 2082;
            char v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v30, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v30, 0xCu);
        }
      }
    }
LABEL_44:
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_path";
  int v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = v30[0];
      BOOL v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_path";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_path_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __nw_http_connection_metadata_set_establishment_report_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_http_connection_metadata_get_establishment_report(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v27 = __Block_byref_object_copy__5_73857;
    char v28 = __Block_byref_object_dispose__6_73858;
    id v29 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_establishment_report_block_invoke;
    v23[3] = &unk_1E5248E90;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t isa = (uint64_t)v1[4].isa;
      if (isa) {
        __nw_http_connection_metadata_get_establishment_report_block_invoke((uint64_t)v23, isa);
      }
LABEL_7:
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v30 = 136446210;
    os_log_type_t v31 = "nw_protocol_metadata_access_handle";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v30 = 136446466;
            os_log_type_t v31 = "nw_protocol_metadata_access_handle";
            __int16 v32 = 2082;
            char v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v30, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v30, 0xCu);
        }
      }
    }
LABEL_44:
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_establishment_report";
  int v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = v30[0];
      BOOL v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_establishment_report";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_establishment_report_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_connection_metadata_set_sec_metadata(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v29 = "nw_http_connection_metadata_set_sec_metadata";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v29 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v29 = "nw_http_connection_metadata_set_sec_metadata";
          __int16 v30 = 2082;
          os_log_type_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        id v29 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v29 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_set_sec_metadata_block_invoke;
    v24[3] = &unk_1E5248F68;
    id v8 = v4;
    id v25 = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9)
    {
      __nw_http_connection_metadata_set_sec_metadata_block_invoke((uint64_t)v24, v9);
      id v8 = v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v29 = "nw_http_connection_metadata_set_sec_metadata";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v11, &type, &v26)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      id v29 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    __int16 v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      id v29 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __int16 v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      id v29 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    id v29 = "nw_http_connection_metadata_set_sec_metadata";
    __int16 v30 = 2082;
    os_log_type_t v31 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_set_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_http_connection_metadata_get_sec_metadata(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v27 = __Block_byref_object_copy__5_73857;
    char v28 = __Block_byref_object_dispose__6_73858;
    id v29 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_sec_metadata_block_invoke;
    v23[3] = &unk_1E5248E90;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t isa = (uint64_t)v1[4].isa;
      if (isa) {
        __nw_http_connection_metadata_get_sec_metadata_block_invoke((uint64_t)v23, isa);
      }
LABEL_7:
      id v5 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)__int16 v30 = 136446210;
    os_log_type_t v31 = "nw_protocol_metadata_access_handle";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)__int16 v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)__int16 v30 = 136446466;
            os_log_type_t v31 = "nw_protocol_metadata_access_handle";
            __int16 v32 = 2082;
            char v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v30, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)__int16 v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)__int16 v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v30, 0xCu);
        }
      }
    }
LABEL_44:
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_sec_metadata";
  id v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v16 = v30[0];
      BOOL v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_sec_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_http_connection_metadata_set_privacy_stance(void *a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v28 = "nw_http_connection_metadata_set_privacy_stance";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          char v28 = "nw_http_connection_metadata_set_privacy_stance";
          __int16 v29 = 2082;
          __int16 v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_set_privacy_stance_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v24 = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_connection_metadata_set_privacy_stance_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v28 = "nw_http_connection_metadata_set_privacy_stance";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v25)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v28 = "nw_http_connection_metadata_set_privacy_stance";
    __int16 v29 = 2082;
    __int16 v30 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_connection_metadata_set_privacy_stance_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 164) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_connection_metadata_get_privacy_stance(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v27 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_privacy_stance_block_invoke;
    v23[3] = &unk_1E5248E90;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t isa = (uint64_t)v1[4].isa;
      if (isa) {
        __nw_http_connection_metadata_get_privacy_stance_block_invoke((uint64_t)v23, isa);
      }
LABEL_7:
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)char v28 = 136446210;
    __int16 v29 = "nw_protocol_metadata_access_handle";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)char v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)char v28 = 136446466;
            __int16 v29 = "nw_protocol_metadata_access_handle";
            __int16 v30 = 2082;
            uint64_t v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v28, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)char v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)char v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v28, 0xCu);
        }
      }
    }
LABEL_44:
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_privacy_stance";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v16 = v28[0];
      BOOL v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_privacy_stance";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_privacy_stance_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 164);
  return 1;
}

uint64_t __nw_http_connection_metadata_set_multipath_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 196) |= 1u;
  return 1;
}

uint64_t __nw_http_connection_metadata_is_multipath_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 196) & 1;
  return 1;
}

uint64_t __nw_http_connection_metadata_set_unlisted_tracker_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 196) |= 2u;
  return 1;
}

uint64_t __nw_http_connection_metadata_is_unlisted_tracker_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 196) & 2) != 0;
  return 1;
}

uint64_t __nw_http_connection_metadata_set_used_tfo_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 196) |= 8u;
  return 1;
}

uint64_t __nw_http_connection_metadata_used_tfo_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(unsigned char *)(a2 + 196) & 8) != 0;
  return 1;
}

void nw_http_connection_metadata_set_uuid(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v27 = "nw_http_connection_metadata_set_uuid";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          int v27 = "nw_http_connection_metadata_set_uuid";
          __int16 v28 = 2082;
          __int16 v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_set_uuid_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v23[4] = a2;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_connection_metadata_set_uuid_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v27 = "nw_http_connection_metadata_set_uuid";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    int v27 = "nw_http_connection_metadata_set_uuid";
    __int16 v28 = 2082;
    __int16 v29 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_http_connection_metadata_set_uuid_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 180) = *(_OWORD *)*(void *)(a1 + 32);
  return 1;
}

void nw_http_connection_metadata_get_uuid(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    id v5 = *((id *)v3 + 1);
    goto LABEL_3;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v34 = "nw_protocol_metadata_copy_definition";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v9, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v34 = "nw_protocol_metadata_copy_definition";
          __int16 v35 = 2082;
          int v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_1830D4000, v10, v27, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_53:
  if (v9) {
    free(v9);
  }
  id v5 = 0;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_http_connection_metadata_get_uuid";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (v31)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v34 = "nw_http_connection_metadata_get_uuid";
          __int16 v35 = 2082;
          int v36 = v21;
          _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
LABEL_62:
        if (!v13) {
          goto LABEL_9;
        }
LABEL_63:
        free(v13);
        goto LABEL_9;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __nw_http_connection_metadata_get_uuid_block_invoke;
  v30[3] = &__block_descriptor_40_e9_B16__0_v8l;
  uint8_t v30[4] = a2;
  if (v4)
  {
    uint64_t v7 = v4[4];
    if (v7) {
      __nw_http_connection_metadata_get_uuid_block_invoke((uint64_t)v30, v7);
    }
    goto LABEL_9;
  }
  os_log_type_t v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v34 = "nw_protocol_metadata_access_handle";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (!__nwlog_fault(v13, &type, &v31)) {
    goto LABEL_62;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v31)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v29 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  char v24 = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v26 = os_log_type_enabled(v14, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v34 = "nw_protocol_metadata_access_handle";
    __int16 v35 = 2082;
    int v36 = v24;
    _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v24);
  if (v13) {
    goto LABEL_63;
  }
LABEL_9:
}

uint64_t __nw_http_connection_metadata_get_uuid_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)*(void *)(a1 + 32) = *(_OWORD *)(a2 + 180);
  return 1;
}

void nw_http_connection_metadata_received_certificate(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_received_certificate_block_invoke;
    v24[3] = &unk_1E5248F68;
    id v8 = v4;
    id v25 = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9)
    {
      __nw_http_connection_metadata_received_certificate_block_invoke((uint64_t)v24, v9);
      id v8 = v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v11, &type, &v26)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v29 = "nw_http_connection_metadata_received_certificate";
    __int16 v30 = 2082;
    char v31 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_received_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, v4, *(void *)(a1 + 32));
    }
  }
  return 1;
}

void nw_http_connection_metadata_send_certificate(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_send_certificate_block_invoke;
    v24[3] = &unk_1E5248F68;
    id v8 = v4;
    id v25 = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9)
    {
      __nw_http_connection_metadata_send_certificate_block_invoke((uint64_t)v24, v9);
      id v8 = v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v11, &type, &v26)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v29 = "nw_http_connection_metadata_send_certificate";
    __int16 v30 = 2082;
    char v31 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_send_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, v4, *(void *)(a1 + 32));
    }
  }
  return 1;
}

uint64_t __nw_http_connection_metadata_set_send_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 16) = *(void *)(a1 + 40);
  if (*(void *)(a2 + 24))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_connection_metadata_set_send_certificate_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_send_certificate", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    uint64_t v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = v4;
  }
  return 1;
}

void nw_http_connection_metadata_set_receive_certificate(void *a1, uint64_t a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v13, &v30, &v29)) {
      goto LABEL_42;
    }
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = v30;
      BOOL v20 = os_log_type_enabled(v14, v30);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
          __int16 v33 = 2082;
          uint64_t v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v13) {
          goto LABEL_8;
        }
LABEL_43:
        free(v13);
        goto LABEL_8;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v24 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v7 = v5;
  id v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v8, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __nw_http_connection_metadata_set_receive_certificate_block_invoke;
    v26[3] = &unk_1E5249228;
    uint64_t v28 = a2;
    id v10 = v6;
    id v27 = v10;
    uint64_t v11 = *((void *)v7 + 4);
    if (v11)
    {
      __nw_http_connection_metadata_set_receive_certificate_block_invoke((uint64_t)v26, v11);
      id v10 = v27;
    }

    goto LABEL_8;
  }
  os_log_type_t v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v30 = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v13, &v30, &v29)) {
    goto LABEL_42;
  }
  if (v30 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v17 = v30;
    if (os_log_type_enabled(v14, v30))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v29)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v25 = v30;
    if (os_log_type_enabled(v14, v30))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  BOOL v21 = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v22 = v30;
  BOOL v23 = os_log_type_enabled(v14, v30);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v32 = "nw_http_connection_metadata_set_receive_certificate";
    __int16 v33 = 2082;
    uint64_t v34 = v21;
    _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v21);
  if (v13) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_set_receive_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 32) = *(void *)(a1 + 40);
  if (*(void *)(a2 + 40))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_connection_metadata_set_receive_certificate_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_receive_certificate", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    uint64_t v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 40);
    *(void *)(a2 + 40) = v4;
  }
  return 1;
}

uint64_t __nw_http_connection_metadata_set_certificate_added_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 48) = *(void *)(a1 + 40);
  if (*(void *)(a2 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_connection_metadata_set_certificate_added_handler_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_certificate_added_handler", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    uint64_t v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 56);
    *(void *)(a2 + 56) = v4;
  }
  return 1;
}

void nw_http_connection_metadata_store_secondary_certificate(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    id v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_http_connection_metadata_store_secondary_certificate";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          char v29 = "nw_http_connection_metadata_store_secondary_certificate";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_store_secondary_certificate_block_invoke;
    v24[3] = &unk_1E5248F68;
    id v8 = v4;
    id v25 = v8;
    uint64_t v9 = v5[4];
    if (v9)
    {
      __nw_http_connection_metadata_store_secondary_certificate_block_invoke((uint64_t)v24, v9);
      id v8 = v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v29 = "nw_http_connection_metadata_store_secondary_certificate";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v11, &type, &v26)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    char v29 = "nw_http_connection_metadata_store_secondary_certificate";
    __int16 v30 = 2082;
    char v31 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_store_secondary_certificate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[8];
  if (!v4)
  {
    BOOL v5 = nw_array_create();
    id v6 = (void *)a2[8];
    a2[8] = v5;

    uint64_t v4 = a2[8];
  }
  nw_array_append(v4, *(void **)(a1 + 32));
  if (a2[6])
  {
    uint64_t v7 = a2[7];
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }
  return 1;
}

uint64_t nw_http_connection_metadata_get_secondary_certificate_count(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
LABEL_27:
    uint64_t v6 = 0;
    goto LABEL_28;
  }
  id v3 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_25:
    if (v8) {
      free(v8);
    }
    goto LABEL_27;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  uint64_t v20 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __nw_http_connection_metadata_get_secondary_certificate_count_block_invoke;
  v16[3] = &unk_1E5248E90;
  void v16[4] = buf;
  uint64_t isa = (uint64_t)v2[4].isa;
  if (isa)
  {
    __nw_http_connection_metadata_get_secondary_certificate_count_block_invoke((uint64_t)v16, isa);
    uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
  }
  else
  {
    uint64_t v6 = 0;
  }
  _Block_object_dispose(buf, 8);
LABEL_28:

  return v6;
}

uint64_t __nw_http_connection_metadata_get_secondary_certificate_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2) {
    uint64_t v2 = (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 3;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  return 1;
}

void nw_http_connection_metadata_enumerate_secondary_certificates(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke;
    v24[3] = &unk_1E5248ED8;
    id v8 = v4;
    id v25 = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9)
    {
      __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke((uint64_t)v24, v9);
      id v8 = v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v11, &type, &v26)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    char v29 = "nw_http_connection_metadata_enumerate_secondary_certificates";
    __int16 v30 = 2082;
    char v31 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(atomic_uchar **)(a2 + 64);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke_2;
  v4[3] = &unk_1E524AE90;
  id v5 = *(id *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);

  return 1;
}

uint64_t __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_http_connection_metadata_set_shared_connection_pool_metadata(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke;
    v24[3] = &unk_1E5248F68;
    id v8 = v4;
    id v25 = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9)
    {
      __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke((uint64_t)v24, v9);
      id v8 = v25;
    }

    goto LABEL_8;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v11, &type, &v26)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    char v29 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
    __int16 v30 = 2082;
    char v31 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

CFTypeRef nw_http_connection_metadata_find_or_create_pat_timestamps_array(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v27 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke;
    v23[3] = &unk_1E5248E90;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t isa = (uint64_t)v1[4].isa;
      if (isa) {
        __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke((uint64_t)v23, isa);
      }
LABEL_7:
      CFTypeRef v5 = CFRetain(*(CFTypeRef *)(*(void *)&buf[8] + 24));
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)uint64_t v28 = 136446210;
    char v29 = "nw_protocol_metadata_access_handle";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)uint64_t v28 = 136446210;
          char v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)uint64_t v28 = 136446466;
            char v29 = "nw_protocol_metadata_access_handle";
            __int16 v30 = 2082;
            char v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v28, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)uint64_t v28 = 136446210;
          char v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)uint64_t v28 = 136446210;
          char v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v28, 0xCu);
        }
      }
    }
LABEL_44:
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
  id v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v16 = v28[0];
      BOOL v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v8) {
    free(v8);
  }
  CFTypeRef v5 = 0;
LABEL_8:

  return v5;
}

void sub_183C35860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 72))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_http_connection_metadata_find_or_create_pat_timestamps_array();
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 80);
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      *(void *)(a2 + 80) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
  return 1;
}

uint64_t nw_http_connection_metadata_get_last_application_stream_id(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v27 = -1;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_last_application_stream_id_block_invoke;
    v23[3] = &unk_1E5248E90;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t isa = (uint64_t)v1[4].isa;
      if (isa) {
        __nw_http_connection_metadata_get_last_application_stream_id_block_invoke((uint64_t)v23, isa);
      }
LABEL_7:
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)uint64_t v28 = 136446210;
    char v29 = "nw_protocol_metadata_access_handle";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)uint64_t v28 = 136446210;
          char v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)uint64_t v28 = 136446466;
            char v29 = "nw_protocol_metadata_access_handle";
            __int16 v30 = 2082;
            char v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v28, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)uint64_t v28 = 136446210;
          char v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)uint64_t v28 = 136446210;
          char v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v28, 0xCu);
        }
      }
    }
LABEL_44:
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
  id v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v16 = v28[0];
      BOOL v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = -1;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_last_application_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 8);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_create_options()
{
  if (nw_protocol_copy_http2_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_4_73885);
  }
  int v0 = (void *)nw_protocol_copy_http2_definition_http2_definition;

  return nw_protocol_create_options(v0);
}

uint64_t tcp_connection_fallback_watcher_create(int a1, dispatch_queue_t queue, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!queue)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_fallback_watcher_create";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(out_token) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, &out_token, &type)) {
      goto LABEL_22;
    }
    if (out_token == 17)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null queue";
      goto LABEL_52;
    }
    if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = out_token;
      BOOL v21 = os_log_type_enabled(v18, (os_log_type_t)out_token);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          char v29 = "tcp_connection_fallback_watcher_create";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          os_log_type_t v22 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_42:
          _os_log_impl(&dword_1830D4000, v18, v19, v22, buf, 0x16u);
        }
LABEL_43:
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v21) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null queue, no backtrace";
    }
    else
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null queue, backtrace limit exceeded";
    }
LABEL_52:
    os_log_type_t v14 = v18;
    os_log_type_t v15 = v19;
    uint32_t v16 = 12;
    goto LABEL_21;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_fallback_watcher_create";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(out_token) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, &out_token, &type)) {
      goto LABEL_22;
    }
    if (out_token == 17)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null block";
      goto LABEL_52;
    }
    if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = out_token;
      BOOL v23 = os_log_type_enabled(v18, (os_log_type_t)out_token);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          char v29 = "tcp_connection_fallback_watcher_create";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          os_log_type_t v22 = "%{public}s called with null block, dumping backtrace:%{public}s";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      if (!v23) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null block, no backtrace";
    }
    else
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null block, backtrace limit exceeded";
    }
    goto LABEL_52;
  }
  int out_token = -1;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = __tcp_connection_fallback_watcher_create_block_invoke;
  handler[3] = &unk_1E52492E0;
  handler[4] = a3;
  uint32_t v5 = notify_register_dispatch("com.apple.networkextension.fallback_in_use", &out_token, queue, handler);
  if (v5)
  {
    uint32_t v6 = v5;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    char v29 = "tcp_connection_fallback_watcher_create";
    __int16 v30 = 2082;
    char v31 = "com.apple.networkextension.fallback_in_use";
    __int16 v32 = 1024;
    uint32_t v33 = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v7, &type, &v24)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      char v29 = "tcp_connection_fallback_watcher_create";
      __int16 v30 = 2082;
      char v31 = "com.apple.networkextension.fallback_in_use";
      __int16 v32 = 1024;
      uint32_t v33 = v6;
      os_log_type_t v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed";
      goto LABEL_20;
    }
    if (!v24)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      char v29 = "tcp_connection_fallback_watcher_create";
      __int16 v30 = 2082;
      char v31 = "com.apple.networkextension.fallback_in_use";
      __int16 v32 = 1024;
      uint32_t v33 = v6;
      os_log_type_t v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, backtrace limit exceeded";
      goto LABEL_20;
    }
    os_log_type_t v12 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = gLogObj;
    os_log_type_t v9 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446978;
        char v29 = "tcp_connection_fallback_watcher_create";
        __int16 v30 = 2082;
        char v31 = "com.apple.networkextension.fallback_in_use";
        __int16 v32 = 1024;
        uint32_t v33 = v6;
        __int16 v34 = 2082;
        uint64_t v35 = v12;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, dumping backtrace:%{public}s", buf, 0x26u);
      }
      free(v12);
      goto LABEL_22;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      char v29 = "tcp_connection_fallback_watcher_create";
      __int16 v30 = 2082;
      char v31 = "com.apple.networkextension.fallback_in_use";
      __int16 v32 = 1024;
      uint32_t v33 = v6;
      os_log_type_t v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, no backtrace";
LABEL_20:
      os_log_type_t v14 = v8;
      os_log_type_t v15 = v9;
      uint32_t v16 = 28;
LABEL_21:
      _os_log_impl(&dword_1830D4000, v14, v15, v10, buf, v16);
    }
LABEL_22:
    if (v7) {
      free(v7);
    }
    return 0;
  }
  uint64_t v11 = out_token;
  if (out_token == -1) {
    return 0;
  }
  if (tcp_fallback_watcher_fallback_inuse(out_token)) {
    dispatch_async(queue, a3);
  }
  return v11;
}

uint64_t __tcp_connection_fallback_watcher_create_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL tcp_fallback_watcher_fallback_inuse(uint64_t a1)
{
  *(void *)&v23[13] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
    id v3 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(state64) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v3, &state64, &type)) {
      goto LABEL_19;
    }
    if (state64 == 17)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = state64;
      if (!os_log_type_enabled(v13, (os_log_type_t)state64)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
      uint32_t v6 = "%{public}s called with null watcher";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = state64;
      BOOL v16 = os_log_type_enabled(v13, (os_log_type_t)state64);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
          __int16 v22 = 2082;
          *(void *)BOOL v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null watcher, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (!v16) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
      uint32_t v6 = "%{public}s called with null watcher, no backtrace";
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = state64;
      if (!os_log_type_enabled(v13, (os_log_type_t)state64)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
      uint32_t v6 = "%{public}s called with null watcher, backtrace limit exceeded";
    }
    os_log_type_t v10 = v13;
    os_log_type_t v11 = v14;
    uint32_t v12 = 12;
    goto LABEL_18;
  }
  uint64_t state64 = 0;
  uint32_t state = notify_get_state(a1, &state64);
  if (!state) {
    return state64 != 0;
  }
  uint32_t v2 = state;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
  __int16 v22 = 1024;
  *(_DWORD *)BOOL v23 = v2;
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v3, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = gLogObj;
      os_log_type_t v5 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
        __int16 v22 = 1024;
        *(_DWORD *)BOOL v23 = v2;
        uint32_t v6 = "%{public}s notify_get_state [%u] failed";
LABEL_17:
        os_log_type_t v10 = v4;
        os_log_type_t v11 = v5;
        uint32_t v12 = 18;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v10, v11, v6, buf, v12);
      }
    }
    else if (v17)
    {
      id v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = gLogObj;
      os_log_type_t v5 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v8)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446722;
          BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
          __int16 v22 = 1024;
          *(_DWORD *)BOOL v23 = v2;
          v23[2] = 2082;
          *(void *)&v23[3] = v8;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s notify_get_state [%u] failed, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v8);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
        __int16 v22 = 1024;
        *(_DWORD *)BOOL v23 = v2;
        uint32_t v6 = "%{public}s notify_get_state [%u] failed, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = gLogObj;
      os_log_type_t v5 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
        __int16 v22 = 1024;
        *(_DWORD *)BOOL v23 = v2;
        uint32_t v6 = "%{public}s notify_get_state [%u] failed, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  if (v3) {
    free(v3);
  }
  return 0;
}

void tcp_connection_fallback_watcher_destroy(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    notify_cancel(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
  id v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v1, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
      id v4 = "%{public}s called with null watcher";
      goto LABEL_18;
    }
    if (!v7)
    {
      uint32_t v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
      id v4 = "%{public}s called with null watcher, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint32_t v2 = __nwlog_obj();
    os_log_type_t v3 = type;
    BOOL v6 = os_log_type_enabled(v2, type);
    if (backtrace_string)
    {
      if (v6)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
        __int16 v11 = 2082;
        uint32_t v12 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s called with null watcher, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_19;
    }
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
      id v4 = "%{public}s called with null watcher, no backtrace";
LABEL_18:
      _os_log_impl(&dword_1830D4000, v2, v3, v4, buf, 0xCu);
    }
  }
LABEL_19:
  if (v1) {
    free(v1);
  }
}

void nw_string::_destroy(nw_string *this)
{
  if (this)
  {
    uint32_t v2 = (void (*)(void))*((void *)this + 8);
    if (v2)
    {
      *((void *)this + 8) = 0;
      v2(*((void *)this + 3));
      *((void *)this + 3) = 0;
      *((void *)this + 4) = 0;
    }
    if (*((char *)this + 63) < 0) {
      operator delete(*((void **)this + 5));
    }
    free(this);
  }
}

uint64_t *nw_string_create()
{
  {
    goto LABEL_2;
  }
  id v1 = &nw::object::_class(void)::instance;
  while (1)
  {
    nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
    unk_1EB267790 = 12;
    xmmword_1EB267798 = 0u;
    unk_1EB2677A8 = 0u;
    xmmword_1EB2677B8 = 0u;
    xmmword_1EB2677D8 = 0u;
    *(_OWORD *)&qword_1EB2677E8 = 0u;
    qword_1EB2677F8 = (uint64_t)v1;
    unk_1EB267800 = 4096;
    qword_1EB267808 = 0;
    qword_1EB267810 = 0;
    qword_1EB267818 = (uint64_t)&qword_1EB267818;
    qword_1EB267820 = (uint64_t)&qword_1EB267818;
    qword_1EB267828 = 0;
    dword_1EB267830 = 0;
    unk_1EB2677C8 = 0u;
    nw::object::class_def::setup(v1, (int64x2_t *)&unk_1EB2677C8);
LABEL_2:
    int v0 = nw::object::operator new();
    id v1 = (uint64_t *)v0;
    if (v0)
    {
      *((_DWORD *)v0 + 3) = 0;
      *(_OWORD *)(v0 + 3) = 0u;
      *(_OWORD *)(v0 + 5) = 0u;
      v0[7] = 0;
      return v1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    uint32_t v2 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v2)) {
      break;
    }
    __break(1u);
LABEL_11:
    {
      uint64_t *v1 = (uint64_t)"object";
      v1[1] = 6;
      *((_OWORD *)v1 + 1) = 0u;
      *((_OWORD *)v1 + 2) = 0u;
      *((_OWORD *)v1 + 3) = 0u;
      *((_OWORD *)v1 + 4) = 0u;
      *((_OWORD *)v1 + 5) = 0u;
      *((_OWORD *)v1 + 6) = 0u;
      *((_OWORD *)v1 + 7) = 0u;
      *((_OWORD *)v1 + 8) = 0u;
      v1[18] = (uint64_t)(v1 + 18);
      v1[19] = (uint64_t)(v1 + 18);
      v1[20] = 0;
      *((_DWORD *)v1 + 42) = 0;
    }
  }
  free(v2);
  return v1;
}

BOOL nw_string_create_with_string(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_create_with_string";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_string";
      uint32_t v12 = "%{public}s called with null string";
      goto LABEL_23;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_string";
      uint32_t v12 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v20 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_string_create_with_string";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_string";
      uint32_t v12 = "%{public}s called with null string, no backtrace";
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  {
    if (v21)
    {
      nw::object::_class(v21);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1EB267790 = 12;
      xmmword_1EB267798 = 0u;
      unk_1EB2677A8 = 0u;
      xmmword_1EB2677B8 = 0u;
      xmmword_1EB2677D8 = 0u;
      *(_OWORD *)&qword_1EB2677E8 = 0u;
      qword_1EB2677F8 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1EB267800 = 4096;
      qword_1EB267808 = 0;
      qword_1EB267810 = 0;
      qword_1EB267818 = (uint64_t)&qword_1EB267818;
      qword_1EB267820 = (uint64_t)&qword_1EB267818;
      qword_1EB267828 = 0;
      dword_1EB267830 = 0;
      unk_1EB2677C8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&unk_1EB2677C8);
    }
  }
  uint32_t v2 = nw::object::operator new();
  if (v2)
  {
    os_log_type_t v3 = v2;
    *(_OWORD *)(v2 + 5) = 0u;
    id v4 = (std::string *)(v2 + 5);
    HIDWORD(v4[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v4[-1].__r_.__value_.__r.__words[1] = 0u;
    v4->__r_.__value_.__r.__words[2] = 0;
    os_log_type_t v5 = *(const std::string::value_type **)(a1 + 24);
    if (v5)
    {
      std::string::__assign_external(v4, v5);
      LODWORD(v6) = *((char *)v3 + 63);
      if ((v6 & 0x80000000) != 0)
      {
        id v4 = (std::string *)v3[5];
        BOOL v6 = v3[6];
        goto LABEL_20;
      }
      id v4 = (std::string *)(v3 + 5);
    }
    else
    {
      LOBYTE(v6) = 0;
    }
    BOOL v6 = (uint64_t *)v6;
LABEL_20:
    v3[3] = (uint64_t *)v4;
    v3[4] = v6;
    return (BOOL)v3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  id v25 = "operator()";
  __int16 v26 = 2080;
  uint64_t v27 = "auto nw_string_create_with_string(nw_string_t)::(anonymous class)::operator()() const";
  char v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_create_with_string";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_string";
          uint32_t v12 = "%{public}s called with null self";
LABEL_23:
          char v17 = v10;
          os_log_type_t v18 = v11;
LABEL_24:
          _os_log_impl(&dword_1830D4000, v17, v18, v12, buf, 0xCu);
        }
      }
      else if (v22)
      {
        uint64_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v13)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            id v25 = "nw_string_create_with_string";
            __int16 v26 = 2082;
            uint64_t v27 = v13;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null self, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v13);
          goto LABEL_25;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_string";
          uint32_t v12 = "%{public}s called with null self, no backtrace";
          char v17 = v14;
          os_log_type_t v18 = v15;
          goto LABEL_24;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_string";
          uint32_t v12 = "%{public}s called with null self, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
    }
LABEL_25:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  __break(1u);
  return result;
}

BOOL nw_string_create_with_c_string(const std::string::value_type *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_create_with_c_string";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_c_string";
      uint32_t v12 = "%{public}s called with null c_str";
      goto LABEL_20;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_c_string";
      uint32_t v12 = "%{public}s called with null c_str, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v20 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_string_create_with_c_string";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null c_str, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_c_string";
      uint32_t v12 = "%{public}s called with null c_str, no backtrace";
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  {
    if (v21)
    {
      nw::object::_class(v21);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1EB267790 = 12;
      xmmword_1EB267798 = 0u;
      unk_1EB2677A8 = 0u;
      xmmword_1EB2677B8 = 0u;
      xmmword_1EB2677D8 = 0u;
      *(_OWORD *)&qword_1EB2677E8 = 0u;
      qword_1EB2677F8 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1EB267800 = 4096;
      qword_1EB267808 = 0;
      qword_1EB267810 = 0;
      qword_1EB267818 = (uint64_t)&qword_1EB267818;
      qword_1EB267820 = (uint64_t)&qword_1EB267818;
      qword_1EB267828 = 0;
      dword_1EB267830 = 0;
      unk_1EB2677C8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&unk_1EB2677C8);
    }
  }
  uint32_t v2 = nw::object::operator new();
  if (v2)
  {
    os_log_type_t v3 = v2;
    *(_OWORD *)(v2 + 5) = 0u;
    id v4 = (std::string *)(v2 + 5);
    HIDWORD(v4[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v4[-1].__r_.__value_.__r.__words[1] = 0u;
    v4->__r_.__value_.__r.__words[2] = 0;
    os_log_type_t v5 = std::string::__assign_external(v4, a1);
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    {
      os_log_type_t v5 = (std::string *)v3[5];
      BOOL v6 = v3[6];
    }
    else
    {
      BOOL v6 = (uint64_t *)HIBYTE(v5->__r_.__value_.__r.__words[2]);
    }
    v3[3] = (uint64_t *)v5;
    v3[4] = v6;
    return (BOOL)v3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  id v25 = "operator()";
  __int16 v26 = 2080;
  uint64_t v27 = "auto nw_string_create_with_c_string(const char *)::(anonymous class)::operator()() const";
  char v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_create_with_c_string";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_c_string";
          uint32_t v12 = "%{public}s called with null self";
LABEL_20:
          char v17 = v10;
          os_log_type_t v18 = v11;
LABEL_21:
          _os_log_impl(&dword_1830D4000, v17, v18, v12, buf, 0xCu);
        }
      }
      else if (v22)
      {
        uint64_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v13)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            id v25 = "nw_string_create_with_c_string";
            __int16 v26 = 2082;
            uint64_t v27 = v13;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null self, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v13);
          goto LABEL_22;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_c_string";
          uint32_t v12 = "%{public}s called with null self, no backtrace";
          char v17 = v14;
          os_log_type_t v18 = v15;
          goto LABEL_21;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_c_string";
          uint32_t v12 = "%{public}s called with null self, backtrace limit exceeded";
          goto LABEL_20;
        }
      }
    }
LABEL_22:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  __break(1u);
  return result;
}

BOOL nw_string_create_with_c_string_no_copy(const char *a1, uint64_t *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_string_create_with_c_string_no_copy";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      uint32_t v12 = "%{public}s called with null c_str";
      goto LABEL_18;
    }
    if (!v24)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      uint32_t v12 = "%{public}s called with null c_str, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v20 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      uint32_t v12 = "%{public}s called with null c_str, no backtrace";
      goto LABEL_18;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      __int16 v28 = 2082;
      char v29 = backtrace_string;
      BOOL v21 = "%{public}s called with null c_str, dumping backtrace:%{public}s";
LABEL_42:
      _os_log_impl(&dword_1830D4000, v10, v11, v21, buf, 0x16u);
    }
LABEL_43:
    free(backtrace_string);
    goto LABEL_20;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_string_create_with_c_string_no_copy";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      uint32_t v12 = "%{public}s called with null free_func";
      goto LABEL_18;
    }
    if (!v24)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      uint32_t v12 = "%{public}s called with null free_func, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v22 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      uint32_t v12 = "%{public}s called with null free_func, no backtrace";
      goto LABEL_18;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_string_create_with_c_string_no_copy";
      __int16 v28 = 2082;
      char v29 = backtrace_string;
      BOOL v21 = "%{public}s called with null free_func, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  {
    if (v23)
    {
      nw::object::_class(v23);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1EB267790 = 12;
      xmmword_1EB267798 = 0u;
      unk_1EB2677A8 = 0u;
      xmmword_1EB2677B8 = 0u;
      xmmword_1EB2677D8 = 0u;
      *(_OWORD *)&qword_1EB2677E8 = 0u;
      qword_1EB2677F8 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1EB267800 = 4096;
      qword_1EB267808 = 0;
      qword_1EB267810 = 0;
      qword_1EB267818 = (uint64_t)&qword_1EB267818;
      qword_1EB267820 = (uint64_t)&qword_1EB267818;
      qword_1EB267828 = 0;
      dword_1EB267830 = 0;
      unk_1EB2677C8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&unk_1EB2677C8);
    }
  }
  id v4 = nw::object::operator new();
  if (v4)
  {
    os_log_type_t v5 = v4;
    *((_DWORD *)v4 + 3) = 0;
    *(_OWORD *)(v4 + 3) = 0u;
    *(_OWORD *)(v4 + 5) = 0u;
    v4[7] = 0;
    size_t v6 = strlen(a1);
    v5[3] = (uint64_t *)a1;
    void v5[4] = (uint64_t *)v6;
    v5[8] = a2;
    return (BOOL)v5;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  uint64_t v27 = "operator()";
  __int16 v28 = 2080;
  char v29 = "auto nw_string_create_with_c_string_no_copy(char *, void (*)(char *))::(anonymous class)::operator()() const";
  char v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_string_create_with_c_string_no_copy";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_string_create_with_c_string_no_copy";
          uint32_t v12 = "%{public}s called with null self";
LABEL_18:
          char v17 = v10;
          os_log_type_t v18 = v11;
LABEL_19:
          _os_log_impl(&dword_1830D4000, v17, v18, v12, buf, 0xCu);
        }
      }
      else if (v24)
      {
        uint64_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v13)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_string_create_with_c_string_no_copy";
            __int16 v28 = 2082;
            char v29 = v13;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null self, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v13);
          goto LABEL_20;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_string_create_with_c_string_no_copy";
          uint32_t v12 = "%{public}s called with null self, no backtrace";
          char v17 = v14;
          os_log_type_t v18 = v15;
          goto LABEL_19;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_string_create_with_c_string_no_copy";
          uint32_t v12 = "%{public}s called with null self, backtrace limit exceeded";
          goto LABEL_18;
        }
      }
    }
LABEL_20:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  __break(1u);
  return result;
}

BOOL nw_string_create_with_dispatch_data(NSObject *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_create_with_dispatch_data";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &v23, &v22)) {
      goto LABEL_22;
    }
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = v23;
      if (!os_log_type_enabled(v9, v23)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_dispatch_data";
      os_log_type_t v11 = "%{public}s called with null data";
      goto LABEL_20;
    }
    if (!v22)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = v23;
      if (!os_log_type_enabled(v9, v23)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_dispatch_data";
      os_log_type_t v11 = "%{public}s called with null data, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = v23;
    BOOL v19 = os_log_type_enabled(v9, v23);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_string_create_with_dispatch_data";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_create_with_dispatch_data";
      os_log_type_t v11 = "%{public}s called with null data, no backtrace";
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  {
    if (v20)
    {
      nw::object::_class(v20);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1EB267790 = 12;
      xmmword_1EB267798 = 0u;
      unk_1EB2677A8 = 0u;
      xmmword_1EB2677B8 = 0u;
      xmmword_1EB2677D8 = 0u;
      *(_OWORD *)&qword_1EB2677E8 = 0u;
      qword_1EB2677F8 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1EB267800 = 4096;
      qword_1EB267808 = 0;
      qword_1EB267810 = 0;
      qword_1EB267818 = (uint64_t)&qword_1EB267818;
      qword_1EB267820 = (uint64_t)&qword_1EB267818;
      qword_1EB267828 = 0;
      dword_1EB267830 = 0;
      unk_1EB2677C8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&unk_1EB2677C8);
    }
  }
  uint32_t v2 = nw::object::operator new();
  if (v2)
  {
    os_log_type_t v3 = v2;
    *((_DWORD *)v2 + 3) = 0;
    *(_OWORD *)(v2 + 3) = 0u;
    v2[7] = 0;
    *(_OWORD *)(v2 + 5) = 0u;
    id v4 = v2 + 5;
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 0x40000000;
    applier[2] = __nw_string_create_with_dispatch_data_block_invoke;
    applier[3] = &__block_descriptor_tmp_77411;
    void applier[4] = v2;
    dispatch_data_apply(a1, applier);
    if (*((char *)v3 + 63) < 0)
    {
      id v4 = (uint64_t **)v3[5];
      os_log_type_t v5 = v3[6];
    }
    else
    {
      os_log_type_t v5 = (uint64_t *)*((unsigned __int8 *)v3 + 63);
    }
    v3[3] = (uint64_t *)v4;
    v3[4] = v5;
    return (BOOL)v3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  id v25 = "operator()";
  __int16 v26 = 2080;
  uint64_t v27 = "auto nw_string_create_with_dispatch_data(dispatch_data_t)::(anonymous class)::operator()() const";
  size_t v6 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_create_with_dispatch_data";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v8, &v23, &v22))
    {
      if (v23 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v9 = gLogObj;
        os_log_type_t v10 = v23;
        if (os_log_type_enabled((os_log_t)gLogObj, v23))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_dispatch_data";
          os_log_type_t v11 = "%{public}s called with null self";
LABEL_20:
          BOOL v16 = v9;
          os_log_type_t v17 = v10;
LABEL_21:
          _os_log_impl(&dword_1830D4000, v16, v17, v11, buf, 0xCu);
        }
      }
      else if (v22)
      {
        uint32_t v12 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = gLogObj;
        os_log_type_t v14 = v23;
        BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, v23);
        if (v12)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            id v25 = "nw_string_create_with_dispatch_data";
            __int16 v26 = 2082;
            uint64_t v27 = v12;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null self, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v12);
          goto LABEL_22;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_dispatch_data";
          os_log_type_t v11 = "%{public}s called with null self, no backtrace";
          BOOL v16 = v13;
          os_log_type_t v17 = v14;
          goto LABEL_21;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v9 = gLogObj;
        os_log_type_t v10 = v23;
        if (os_log_type_enabled((os_log_t)gLogObj, v23))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_create_with_dispatch_data";
          os_log_type_t v11 = "%{public}s called with null self, backtrace limit exceeded";
          goto LABEL_20;
        }
      }
    }
LABEL_22:
    if (v8) {
      free(v8);
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t __nw_string_create_with_dispatch_data_block_invoke(uint64_t a1, int a2, int a3, std::string::value_type *__s, std::string::size_type __n)
{
  return 1;
}

BOOL nw_string_is_empty(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 32) == 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_string_is_empty";
  uint32_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_is_empty";
        os_log_type_t v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "nw_string_is_empty";
          __int16 v12 = 2082;
          uint64_t v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_is_empty";
        os_log_type_t v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      os_log_type_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_is_empty";
        os_log_type_t v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

BOOL nw_string_copy(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_copy";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_copy";
      __int16 v12 = "%{public}s called with null string";
      goto LABEL_23;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_copy";
      __int16 v12 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v20 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_string_copy";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_string_copy";
      __int16 v12 = "%{public}s called with null string, no backtrace";
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  {
    if (v21)
    {
      nw::object::_class(v21);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1EB267790 = 12;
      xmmword_1EB267798 = 0u;
      unk_1EB2677A8 = 0u;
      xmmword_1EB2677B8 = 0u;
      xmmword_1EB2677D8 = 0u;
      *(_OWORD *)&qword_1EB2677E8 = 0u;
      qword_1EB2677F8 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1EB267800 = 4096;
      qword_1EB267808 = 0;
      qword_1EB267810 = 0;
      qword_1EB267818 = (uint64_t)&qword_1EB267818;
      qword_1EB267820 = (uint64_t)&qword_1EB267818;
      qword_1EB267828 = 0;
      dword_1EB267830 = 0;
      unk_1EB2677C8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&unk_1EB2677C8);
    }
  }
  uint32_t v2 = nw::object::operator new();
  if (v2)
  {
    os_log_type_t v3 = v2;
    *(_OWORD *)(v2 + 5) = 0u;
    os_log_type_t v4 = (std::string *)(v2 + 5);
    HIDWORD(v4[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v4[-1].__r_.__value_.__r.__words[1] = 0u;
    v4->__r_.__value_.__r.__words[2] = 0;
    os_log_type_t v5 = *(const std::string::value_type **)(a1 + 24);
    if (v5)
    {
      std::string::__assign_external(v4, v5);
      LODWORD(v6) = *((char *)v3 + 63);
      if ((v6 & 0x80000000) != 0)
      {
        os_log_type_t v4 = (std::string *)v3[5];
        size_t v6 = v3[6];
        goto LABEL_20;
      }
      os_log_type_t v4 = (std::string *)(v3 + 5);
    }
    else
    {
      LOBYTE(v6) = 0;
    }
    size_t v6 = (uint64_t *)v6;
LABEL_20:
    v3[3] = (uint64_t *)v4;
    v3[4] = v6;
    return (BOOL)v3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  id v25 = "operator()";
  __int16 v26 = 2080;
  uint64_t v27 = "auto nw_string_copy(nw_string_t)::(anonymous class)::operator()() const";
  BOOL v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_copy";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_copy";
          __int16 v12 = "%{public}s called with null self";
LABEL_23:
          os_log_type_t v17 = v10;
          os_log_type_t v18 = v11;
LABEL_24:
          _os_log_impl(&dword_1830D4000, v17, v18, v12, buf, 0xCu);
        }
      }
      else if (v22)
      {
        uint64_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v13)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            id v25 = "nw_string_copy";
            __int16 v26 = 2082;
            uint64_t v27 = v13;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null self, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v13);
          goto LABEL_25;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_copy";
          __int16 v12 = "%{public}s called with null self, no backtrace";
          os_log_type_t v17 = v14;
          os_log_type_t v18 = v15;
          goto LABEL_24;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_string_copy";
          __int16 v12 = "%{public}s called with null self, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
    }
LABEL_25:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  __break(1u);
  return result;
}

BOOL nw_string_is_equal_to_string(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_string_is_equal_to_string";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v12)
      {
        os_log_type_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_string_is_equal_to_string";
        BOOL v7 = "%{public}s called with null string1, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_string_is_equal_to_string";
        BOOL v7 = "%{public}s called with null string1, no backtrace";
        goto LABEL_31;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v15 = "nw_string_is_equal_to_string";
        __int16 v16 = 2082;
        os_log_type_t v17 = backtrace_string;
        os_log_type_t v10 = "%{public}s called with null string1, dumping backtrace:%{public}s";
LABEL_21:
        _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
      }
LABEL_22:
      free(backtrace_string);
      goto LABEL_32;
    }
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_string_is_equal_to_string";
    BOOL v7 = "%{public}s called with null string1";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
LABEL_32:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_string_is_equal_to_string";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_string_is_equal_to_string";
      BOOL v7 = "%{public}s called with null string2";
      goto LABEL_31;
    }
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_string_is_equal_to_string";
      BOOL v7 = "%{public}s called with null string2, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v15 = "nw_string_is_equal_to_string";
        __int16 v16 = 2082;
        os_log_type_t v17 = backtrace_string;
        os_log_type_t v10 = "%{public}s called with null string2, dumping backtrace:%{public}s";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!v11) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_string_is_equal_to_string";
    BOOL v7 = "%{public}s called with null string2, no backtrace";
    goto LABEL_31;
  }
  size_t v2 = *(void *)(a1 + 32);
  if (v2 == *(void *)(a2 + 32)) {
    return memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v2) == 0;
  }
  return 0;
}

BOOL nw_string_is_equal_to_c_string(uint64_t a1, char *__s)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_string_is_equal_to_c_string";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_32;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_string_is_equal_to_c_string";
        BOOL v9 = "%{public}s called with null string1, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_string_is_equal_to_c_string";
        BOOL v9 = "%{public}s called with null string1, no backtrace";
        goto LABEL_31;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v17 = "nw_string_is_equal_to_c_string";
        __int16 v18 = 2082;
        BOOL v19 = backtrace_string;
        char v12 = "%{public}s called with null string1, dumping backtrace:%{public}s";
LABEL_21:
        _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
      }
LABEL_22:
      free(backtrace_string);
      goto LABEL_32;
    }
    BOOL v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_string_is_equal_to_c_string";
    BOOL v9 = "%{public}s called with null string1";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
LABEL_32:
    if (v6) {
      free(v6);
    }
    return 0;
  }
  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_string_is_equal_to_c_string";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_string_is_equal_to_c_string";
      BOOL v9 = "%{public}s called with null string2";
      goto LABEL_31;
    }
    if (!v14)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_string_is_equal_to_c_string";
      BOOL v9 = "%{public}s called with null string2, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v17 = "nw_string_is_equal_to_c_string";
        __int16 v18 = 2082;
        BOOL v19 = backtrace_string;
        char v12 = "%{public}s called with null string2, dumping backtrace:%{public}s";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!v13) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_string_is_equal_to_c_string";
    BOOL v9 = "%{public}s called with null string2, no backtrace";
    goto LABEL_31;
  }
  size_t v4 = *(void *)(a1 + 32);
  if (v4 == strlen(__s)) {
    return memcmp(*(const void **)(a1 + 24), __s, v4) == 0;
  }
  return 0;
}

void nw_string_append_string(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_string_append_string";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_string_append_string";
      char v12 = "%{public}s called with null string1";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_string_append_string";
          __int16 v21 = 2082;
          char v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null string1, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_43:
        if (!v9) {
          return;
        }
LABEL_44:
        free(v9);
        return;
      }
      if (!v14) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_string_append_string";
      char v12 = "%{public}s called with null string1, no backtrace";
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_string_append_string";
      char v12 = "%{public}s called with null string1, backtrace limit exceeded";
    }
LABEL_42:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
    goto LABEL_43;
  }
  if (a2)
  {
    if (*(void *)(a1 + 64))
    {
      uint64_t v4 = a1 + 40;
      std::string::__assign_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      os_log_type_t v5 = *(void (**)(void))(a1 + 64);
      if (v5)
      {
        *(void *)(a1 + 64) = 0;
        v5(*(void *)(a1 + 24));
      }
      if (*(char *)(a1 + 63) < 0)
      {
        uint64_t v4 = *(void *)(a1 + 40);
        uint64_t v6 = *(void *)(a1 + 48);
      }
      else
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
      }
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v6;
    }
    uint64_t v7 = a1 + 40;
    std::string::append((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    if (*(char *)(a1 + 63) < 0)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
    }
    else
    {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 63);
    }
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_string_append_string";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v9, &type, &v17)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_string_append_string";
    char v12 = "%{public}s called with null string2";
    goto LABEL_42;
  }
  if (!v17)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_string_append_string";
    char v12 = "%{public}s called with null string2, backtrace limit exceeded";
    goto LABEL_42;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v11 = type;
  BOOL v16 = os_log_type_enabled(v10, type);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_string_append_string";
    char v12 = "%{public}s called with null string2, no backtrace";
    goto LABEL_42;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "nw_string_append_string";
    __int16 v21 = 2082;
    char v22 = v15;
    _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null string2, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v15);
  if (v9) {
    goto LABEL_44;
  }
}

void nw_string_append_c_string(uint64_t a1, char *__s)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_string_append_c_string";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_string_append_c_string";
      BOOL v13 = "%{public}s called with null string1";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v21 = "nw_string_append_c_string";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null string1, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_43:
        if (!v10) {
          return;
        }
LABEL_44:
        free(v10);
        return;
      }
      if (!v15) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_string_append_c_string";
      BOOL v13 = "%{public}s called with null string1, no backtrace";
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_string_append_c_string";
      BOOL v13 = "%{public}s called with null string1, backtrace limit exceeded";
    }
LABEL_42:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_43;
  }
  if (__s)
  {
    if (*(void *)(a1 + 64))
    {
      uint64_t v4 = a1 + 40;
      std::string::__assign_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      os_log_type_t v5 = *(void (**)(void))(a1 + 64);
      if (v5)
      {
        *(void *)(a1 + 64) = 0;
        v5(*(void *)(a1 + 24));
      }
      if (*(char *)(a1 + 63) < 0)
      {
        uint64_t v4 = *(void *)(a1 + 40);
        uint64_t v6 = *(void *)(a1 + 48);
      }
      else
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
      }
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v6;
    }
    uint64_t v7 = a1 + 40;
    size_t v8 = strlen(__s);
    std::string::append((std::string *)(a1 + 40), __s, v8);
    if (*(char *)(a1 + 63) < 0)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
    }
    else
    {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 63);
    }
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v9;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v21 = "nw_string_append_c_string";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_string_append_c_string";
    BOOL v13 = "%{public}s called with null string2";
    goto LABEL_42;
  }
  if (!v18)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_string_append_c_string";
    BOOL v13 = "%{public}s called with null string2, backtrace limit exceeded";
    goto LABEL_42;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v12 = type;
  BOOL v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_string_append_c_string";
    BOOL v13 = "%{public}s called with null string2, no backtrace";
    goto LABEL_42;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v21 = "nw_string_append_c_string";
    __int16 v22 = 2082;
    uint64_t v23 = v16;
    _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null string2, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v10) {
    goto LABEL_44;
  }
}

void nw_string_append_dispatch_data(uint64_t a1, dispatch_data_t data)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_string_append_dispatch_data";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v5, &v15, &v14)) {
      goto LABEL_36;
    }
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v15;
      if (!os_log_type_enabled(v6, v15)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_string_append_dispatch_data";
      size_t v8 = "%{public}s called with null string";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v15;
      BOOL v10 = os_log_type_enabled(v6, v15);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_string_append_dispatch_data";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v5) {
          return;
        }
LABEL_37:
        free(v5);
        return;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_string_append_dispatch_data";
      size_t v8 = "%{public}s called with null string, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v15;
      if (!os_log_type_enabled(v6, v15)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_string_append_dispatch_data";
      size_t v8 = "%{public}s called with null string, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  if (data)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 0x40000000;
    applier[2] = __nw_string_append_dispatch_data_block_invoke;
    applier[3] = &__block_descriptor_tmp_7_77481;
    void applier[4] = a1;
    dispatch_data_apply(data, applier);
    if (*(char *)(a1 + 63) < 0)
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
    }
    else
    {
      uint64_t v3 = a1 + 40;
      uint64_t v4 = *(unsigned __int8 *)(a1 + 63);
    }
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_string_append_dispatch_data";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v5, &v15, &v14)) {
    goto LABEL_36;
  }
  if (v15 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v15;
    if (!os_log_type_enabled(v6, v15)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_string_append_dispatch_data";
    size_t v8 = "%{public}s called with null data";
    goto LABEL_35;
  }
  if (!v14)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v15;
    if (!os_log_type_enabled(v6, v15)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_string_append_dispatch_data";
    size_t v8 = "%{public}s called with null data, backtrace limit exceeded";
    goto LABEL_35;
  }
  os_log_type_t v11 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = v15;
  BOOL v12 = os_log_type_enabled(v6, v15);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_string_append_dispatch_data";
    size_t v8 = "%{public}s called with null data, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v17 = "nw_string_append_dispatch_data";
    __int16 v18 = 2082;
    BOOL v19 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
    goto LABEL_37;
  }
}

uint64_t __nw_string_append_dispatch_data_block_invoke(uint64_t a1, int a2, int a3, std::string::value_type *__s, std::string::size_type __n)
{
  return 1;
}

uint64_t nw_string_get_length(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 32);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_string_get_length";
  size_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_length";
        os_log_type_t v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "nw_string_get_length";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_length";
        os_log_type_t v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_length";
        os_log_type_t v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

uint64_t nw_string_get_c_string(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 24);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_string_get_c_string";
  size_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_c_string";
        os_log_type_t v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "nw_string_get_c_string";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_c_string";
        os_log_type_t v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_c_string";
        os_log_type_t v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

uint64_t nw_string_get_char_at_index(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "nw_string_get_char_at_index";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v3, &type, &v10)) {
      goto LABEL_18;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_string_get_char_at_index";
      uint64_t v6 = "%{public}s called with null string";
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v13 = "nw_string_get_char_at_index";
          __int16 v14 = 2082;
          os_log_type_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (!v8)
      {
LABEL_18:
        if (v3) {
          free(v3);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_string_get_char_at_index";
      uint64_t v6 = "%{public}s called with null string, no backtrace";
    }
    else
    {
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_string_get_char_at_index";
      uint64_t v6 = "%{public}s called with null string, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_18;
  }
  if (*(void *)(a1 + 32) <= a2) {
    return 0;
  }
  return *(char *)(*(void *)(a1 + 24) + a2);
}

BOOL nw_string_get_bytes(uint64_t a1, void *__dst, size_t a3, unint64_t a4, size_t a5, size_t *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_string_get_bytes";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null string";
      goto LABEL_55;
    }
    if (!v27)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v22 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null string, no backtrace";
      goto LABEL_55;
    }
    if (!v22) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_string_get_bytes";
    __int16 v31 = 2082;
    __int16 v32 = backtrace_string;
    uint64_t v23 = "%{public}s called with null string, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v18, v19, v23, buf, 0x16u);
    goto LABEL_42;
  }
  if (!__dst)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_string_get_bytes";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null buffer";
      goto LABEL_55;
    }
    if (!v27)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_55;
    }
    if (!v24) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_string_get_bytes";
    __int16 v31 = 2082;
    __int16 v32 = backtrace_string;
    uint64_t v23 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
    goto LABEL_41;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_string_get_bytes";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null bytes_copied";
      goto LABEL_55;
    }
    if (!v27)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null bytes_copied, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v26 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "nw_string_get_bytes";
        __int16 v31 = 2082;
        __int16 v32 = backtrace_string;
        uint64_t v23 = "%{public}s called with null bytes_copied, dumping backtrace:%{public}s";
        goto LABEL_41;
      }
LABEL_42:
      free(backtrace_string);
      goto LABEL_56;
    }
    if (!v26) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_string_get_bytes";
    uint64_t v20 = "%{public}s called with null bytes_copied, no backtrace";
LABEL_55:
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
LABEL_56:
    if (v17) {
      free(v17);
    }
    return 0;
  }
  *a6 = 0;
  unint64_t v12 = *(void *)(a1 + 32);
  size_t v13 = v12 - a4;
  if (v12 < a4)
  {
    if (gLogDatapath)
    {
      id v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v30 = "nw_string_get_bytes";
        __int16 v31 = 2082;
        __int16 v32 = "bytes_left";
        __int16 v33 = 2048;
        unint64_t v34 = a4;
        __int16 v35 = 2048;
        size_t v36 = v13;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    size_t v13 = 0;
  }
  if (a5 >= v13) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = a5;
  }
  if (v14 >= a3) {
    size_t v15 = a3;
  }
  else {
    size_t v15 = v14;
  }
  *a6 = v15;
  if (v15)
  {
    memcpy(__dst, (const void *)(*(void *)(a1 + 24) + a4), v15);
    return *a6 != 0;
  }
  return 0;
}

uint64_t nw_string_find_c_string(uint64_t a1, char *__s)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_find_c_string";
    size_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_string_find_c_string";
        BOOL v17 = "%{public}s called with null string";
LABEL_42:
        _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
      }
LABEL_43:
      if (v14) {
        free(v14);
      }
      return -1;
    }
    if (!v22)
    {
      size_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_string_find_c_string";
        BOOL v17 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v19 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_string_find_c_string";
        BOOL v17 = "%{public}s called with null string, no backtrace";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      id v25 = "nw_string_find_c_string";
      __int16 v26 = 2082;
      char v27 = backtrace_string;
      uint64_t v20 = "%{public}s called with null string, dumping backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_1830D4000, v15, v16, v20, buf, 0x16u);
    }
LABEL_33:
    free(backtrace_string);
    goto LABEL_43;
  }
  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_string_find_c_string";
    size_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_string_find_c_string";
        BOOL v17 = "%{public}s called with null substring";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (!v22)
    {
      size_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_string_find_c_string";
        BOOL v17 = "%{public}s called with null substring, backtrace limit exceeded";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_string_find_c_string";
        BOOL v17 = "%{public}s called with null substring, no backtrace";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      id v25 = "nw_string_find_c_string";
      __int16 v26 = 2082;
      char v27 = backtrace_string;
      uint64_t v20 = "%{public}s called with null substring, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  os_log_type_t v4 = *(char **)(a1 + 24);
  uint64_t result = strlen(__s);
  if (result)
  {
    int64_t v6 = result;
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = &v4[v7];
    if (v7 >= result)
    {
      int v10 = *__s;
      os_log_type_t v11 = v4;
      do
      {
        uint64_t v12 = v7 - v6;
        if (v12 == -1) {
          break;
        }
        size_t v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13) {
          break;
        }
        uint64_t v9 = v13;
        if (!memcmp(v13, __s, v6)) {
          goto LABEL_6;
        }
        os_log_type_t v11 = v9 + 1;
        uint64_t v7 = v8 - (v9 + 1);
      }
      while (v7 >= v6);
    }
    uint64_t v9 = v8;
LABEL_6:
    if (v9 == v8) {
      return -1;
    }
    else {
      return v9 - v4;
    }
  }
  return result;
}

BOOL nw_protocol_http_messaging_create(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http_messaging_create";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v16, &type, &v29)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_http_messaging_create";
        BOOL v19 = "%{public}s called with null endpoint";
LABEL_57:
        _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
      }
LABEL_58:
      if (v16) {
        free(v16);
      }
      return 0;
    }
    if (!v29)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_http_messaging_create";
        BOOL v19 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v26 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_http_messaging_create";
        BOOL v19 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_protocol_http_messaging_create";
      __int16 v33 = 2082;
      uint64_t v34 = (uint64_t)backtrace_string;
      char v27 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_1830D4000, v17, v18, v27, buf, 0x16u);
    }
LABEL_48:
    free(backtrace_string);
    goto LABEL_58;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http_messaging_create";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v16, &type, &v29)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_http_messaging_create";
        BOOL v19 = "%{public}s called with null parameters";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (!v29)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_http_messaging_create";
        BOOL v19 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v28 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_http_messaging_create";
        BOOL v19 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_protocol_http_messaging_create";
      __int16 v33 = 2082;
      uint64_t v34 = (uint64_t)backtrace_string;
      char v27 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  int64_t v6 = (char *)malloc_type_calloc(1uLL, 0x118uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_4:
    *((void *)v6 + 34) = 0;
    *((_OWORD *)v6 + 15) = 0u;
    *((_OWORD *)v6 + 16) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)int64_t v6 = 0u;
    BOOL logging_disabled = nw_path_parameters_get_logging_disabled(a4[13]);
    if (logging_disabled) {
      char v8 = 2;
    }
    else {
      char v8 = 0;
    }
    v6[272] = v6[272] & 0xFD | v8;
    if (v6) {
      BOOL v9 = logging_disabled;
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9)
    {
      if (gLogDatapath)
      {
        char v22 = __nwlog_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = "";
          BOOL v24 = v6 + 188;
          if (!v6) {
            BOOL v24 = "";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v32 = "nw_protocol_http_messaging_create";
          if (v6) {
            uint64_t v23 = " ";
          }
          __int16 v33 = 2082;
          uint64_t v34 = (uint64_t)v24;
          __int16 v35 = 2080;
          uint64_t v36 = (uint64_t)v23;
          _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
    }
    *((void *)v6 + 2) = nw_protocol_http_messaging_identifier::protocol_identifier;
    if (nw_protocol_http_messaging_get_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http_messaging_get_callbacks(void)::onceToken, &__block_literal_global_17_77556);
    }
    *((void *)v6 + 3) = &nw_protocol_http_messaging_get_callbacks(void)::protocol_callbacks;
    *((void *)v6 + 5) = v6;
    if (nw_protocol_http_messaging_get_listen_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http_messaging_get_listen_callbacks(void)::onceToken, &__block_literal_global_23_77557);
    }
    *((void *)v6 + 8) = &nw_protocol_http_messaging_get_listen_callbacks(void)::listen_protocol_callbacks;
    *((void *)v6 + 11) = v6;
    int v10 = os_retain(a3);
    char v11 = v6[120];
    if (v11)
    {
      uint64_t v12 = (void *)*((void *)v6 + 14);
      if (v12)
      {
        os_release(v12);
        char v11 = v6[120];
      }
    }
    *((void *)v6 + 14) = v10;
    v6[120] = v11 | 1;
    size_t v13 = a4;
    uint64_t v14 = v13[12];

    v6[272] = v6[272] & 0xFE | ((v14 & 0x8000) != 0);
    return (BOOL)v6;
  }
  uint64_t v20 = __nwlog_obj();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  __int16 v32 = "strict_calloc";
  __int16 v33 = 2048;
  uint64_t v34 = 1;
  __int16 v35 = 2048;
  uint64_t v36 = 280;
  BOOL v21 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v21);
  if (!result)
  {
    free(v21);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void ___ZL47nw_protocol_http_messaging_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http_messaging_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http_messaging_listen_protocol_new_flow;
  qword_1E8F69DF0 = (uint64_t)nw_protocol_http_messaging_listen_protocol_disconnected;
}

void nw_protocol_http_messaging_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null listener";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v16 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          __int16 v26 = 2082;
          char v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null listener, backtrace limit exceeded";
    }
    goto LABEL_20;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null existing_protocol";
      goto LABEL_20;
    }
    if (v22)
    {
      BOOL v17 = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v18 = os_log_type_enabled(v5, type);
      if (v17)
      {
        if (!v18) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
        __int16 v26 = 2082;
        char v27 = v17;
        BOOL v19 = "%{public}s called with null existing_protocol, dumping backtrace:%{public}s";
        goto LABEL_52;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null existing_protocol, no backtrace";
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null existing_protocol, backtrace limit exceeded";
    }
LABEL_20:
    size_t v13 = v5;
    os_log_type_t v14 = v6;
LABEL_21:
    _os_log_impl(&dword_1830D4000, v13, v14, v7, buf, 0xCu);
    goto LABEL_22;
  }
  handle = (nw_protocol **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null http_messaging";
      goto LABEL_20;
    }
    if (v22)
    {
      BOOL v17 = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v20 = os_log_type_enabled(v5, type);
      if (v17)
      {
        if (!v20) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
        __int16 v26 = 2082;
        char v27 = v17;
        BOOL v19 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_52:
        _os_log_impl(&dword_1830D4000, v5, v6, v19, buf, 0x16u);
LABEL_53:
        free(v17);
        if (!v4) {
          return;
        }
        goto LABEL_23;
      }
      if (!v20) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null http_messaging, no backtrace";
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
    }
    goto LABEL_20;
  }
  if (handle[19] != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol";
      goto LABEL_20;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol, backtrace limit exceeded";
      goto LABEL_20;
    }
    BOOL v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v10 = gLogObj;
    os_log_type_t v11 = type;
    BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v9)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
        __int16 v26 = 2082;
        char v27 = v9;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v9);
      if (!v4) {
        return;
      }
LABEL_23:
      free(v4);
      return;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      uint64_t v7 = "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol, no backtrace";
      size_t v13 = v10;
      os_log_type_t v14 = v11;
      goto LABEL_21;
    }
LABEL_22:
    if (!v4) {
      return;
    }
    goto LABEL_23;
  }
  if (((_BYTE)handle[34] & 2) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v21 = __nwlog_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        id v25 = "nw_protocol_http_messaging_listen_protocol_disconnected";
        __int16 v26 = 2082;
        char v27 = (char *)handle + 188;
        __int16 v28 = 2080;
        char v29 = " ";
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%slower protocol is disconnected", buf, 0x20u);
      }
    }
  }
  *((unsigned char *)handle + 272) |= 8u;
  nw_protocol_http_messaging_teardown((uint64_t)handle, a3);
}

void nw_protocol_http_messaging_teardown(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http_messaging_teardown";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http_messaging_teardown";
      size_t v15 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_protocol_http_messaging_teardown";
          __int16 v24 = 2082;
          id v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_48:
        if (!v12) {
          return;
        }
        goto LABEL_49;
      }
      if (!v17) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http_messaging_teardown";
      size_t v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      size_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http_messaging_teardown";
      size_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_47:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_48;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 272) & 0x20) != 0) {
      return;
    }
    *(unsigned char *)(v2 + 272) |= 0x20u;
    nw_protocol_remove_instance(v2);
    os_log_type_t v5 = *(unsigned char **)(v2 + 128);
    os_log_type_t v4 = *(unsigned char **)(v2 + 136);
    int64_t v6 = v4 - v5;
    if (v4 == v5)
    {
      uint64_t v7 = 0;
      uint64_t v10 = *(void *)(v2 + 152);
      if (!v10)
      {
LABEL_10:
        char v11 = *(unsigned char *)(v2 + 272);
        *(unsigned char *)(v2 + 272) = v11 & 0xDF;
        if ((v11 & 4) == 0 && !*(void *)(v2 + 48) && *(void *)(v2 + 160) == *(void *)(v2 + 168)) {
          nw_http_messaging_destroy(v2);
        }
        if (v7)
        {
          operator delete(v7);
        }
        return;
      }
    }
    else
    {
      if (v6 < 0) {
        abort();
      }
      uint64_t v7 = (char *)operator new(v4 - v5);
      memcpy(v7, v5, v6);
      uint64_t v8 = 0;
      uint64_t v9 = 8 * (v6 >> 3);
      do
      {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)&v7[v8] + 8))(*(void *)&v7[v8], v2, a2);
        v8 += 8;
      }
      while (v9 != v8);
      uint64_t v10 = *(void *)(v2 + 152);
      if (!v10) {
        goto LABEL_10;
      }
    }
    nw_protocol_remove_listen_handler(v10, v2 + 64);
    *(void *)(v2 + 152) = 0;
    goto LABEL_10;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_protocol_http_messaging_teardown";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v12, &type, &v20)) {
    goto LABEL_48;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    size_t v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http_messaging_teardown";
    size_t v15 = "%{public}s called with null http_messaging";
    goto LABEL_47;
  }
  if (!v20)
  {
    size_t v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http_messaging_teardown";
    size_t v15 = "%{public}s called with null http_messaging, backtrace limit exceeded";
    goto LABEL_47;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  size_t v13 = __nwlog_obj();
  os_log_type_t v14 = type;
  BOOL v19 = os_log_type_enabled(v13, type);
  if (!v18)
  {
    if (!v19) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http_messaging_teardown";
    size_t v15 = "%{public}s called with null http_messaging, no backtrace";
    goto LABEL_47;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_protocol_http_messaging_teardown";
    __int16 v24 = 2082;
    id v25 = v18;
    _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v18);
  if (v12) {
LABEL_49:
  }
    free(v12);
}

void nw_http_messaging_destroy(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 272) & 2) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 136446722;
        os_log_type_t v14 = "nw_http_messaging_destroy";
        __int16 v15 = 2082;
        uint64_t v16 = a1 + 188;
        __int16 v17 = 2080;
        BOOL v18 = " ";
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v13, 0x20u);
      }
    }
  }
  uint64_t v3 = *(unsigned char **)(a1 + 128);
  uint64_t v2 = *(unsigned char **)(a1 + 136);
  int64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    os_log_type_t v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      abort();
    }
    os_log_type_t v5 = (char *)operator new(v2 - v3);
    memcpy(v5, v3, v4);
    uint64_t v6 = 0;
    uint64_t v7 = 8 * (v4 >> 3);
    do
    {
      (*(void (**)(void, uint64_t, void))(**(void **)&v5[v6] + 8))(*(void *)&v5[v6], a1, 0);
      v6 += 8;
    }
    while (v7 != v6);
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v8 = *(void **)(a1 + 160);
  if (v8)
  {
    *(void *)(a1 + 168) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 128);
  if (v9)
  {
    *(void *)(a1 + 136) = v9;
    operator delete(v9);
  }
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v10 = *(void **)(a1 + 112);
    if (v10) {
      os_release(v10);
    }
  }
  *(void *)(a1 + 112) = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    char v11 = *(void **)(a1 + 96);
    if (v11) {
      os_release(v11);
    }
  }
  free((void *)a1);
  if (v5) {
    operator delete(v5);
  }
}

uint64_t nw_protocol_http_messaging_listen_protocol_new_flow(nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null listener";
      goto LABEL_18;
    }
    if (!v23)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v20 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null listener, no backtrace";
      goto LABEL_18;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      __int16 v27 = 2082;
      __int16 v28 = backtrace_string;
      BOOL v21 = "%{public}s called with null listener, dumping backtrace:%{public}s";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v9, v10, v21, buf, 0x16u);
    }
LABEL_45:
    free(backtrace_string);
    goto LABEL_20;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null http_messaging";
      goto LABEL_18;
    }
    if (!v23)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_18;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      __int16 v27 = 2082;
      __int16 v28 = backtrace_string;
      BOOL v21 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v18 = __nwlog_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        __int16 v27 = 2082;
        __int16 v28 = handle + 188;
        __int16 v29 = 2080;
        uint64_t v30 = " ";
        __int16 v31 = 2112;
        __int16 v32 = a2;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%screating new inbound flow from %@", buf, 0x2Au);
      }
    }
  }
  uint64_t v6 = (void *)*((void *)handle + 16);
  if (v6 != *((void **)handle + 17)) {
    return (**(uint64_t (***)(void, nw_endpoint *, nw_parameters *))*v6)(*v6, a2, a3);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        char v11 = "%{public}s No listen handler found for inbound stream";
LABEL_18:
        uint64_t v16 = v9;
        os_log_type_t v17 = v10;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v16, v17, v11, buf, 0xCu);
      }
    }
    else if (v23)
    {
      BOOL v12 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v13 = gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v12)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
          __int16 v27 = 2082;
          __int16 v28 = v12;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s No listen handler found for inbound stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v12);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        char v11 = "%{public}s No listen handler found for inbound stream, no backtrace";
        uint64_t v16 = v13;
        os_log_type_t v17 = v14;
        goto LABEL_19;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        char v11 = "%{public}s No listen handler found for inbound stream, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  return 0;
}

void ___ZL40nw_protocol_http_messaging_get_callbacksv_block_invoke()
{
  qword_1E8F69D20 = (uint64_t)nw_protocol_common_get_input_frames;
  qword_1E8F69D28 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F69D30 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F69D48 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F69D50 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F69D98 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F69DA0 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F69D10 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F69D18 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F69D88 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F69D90 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F69DD8 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F69DD0 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F69DC8 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F69D80 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F69DA8 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F69D60 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F69D68 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F69D70 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F69D78 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F69D38 = (uint64_t)nw_protocol_common_link_state;
  nw_protocol_http_messaging_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http_messaging_add_input_handler;
  qword_1E8F69CE0 = (uint64_t)nw_protocol_http_messaging_replace_input_handler;
  qword_1E8F69CD8 = (uint64_t)nw_protocol_http_messaging_remove_input_handler;
  qword_1E8F69D40 = (uint64_t)nw_protocol_http_messaging_get_parameters;
  qword_1E8F69D58 = (uint64_t)nw_protocol_http_messaging_get_remote_endpoint;
  qword_1E8F69CE8 = (uint64_t)nw_protocol_http_messaging_connect;
  qword_1E8F69CF8 = (uint64_t)nw_protocol_http_messaging_connected;
  qword_1E8F69CF0 = (uint64_t)nw_protocol_http_messaging_disconnect;
  qword_1E8F69D00 = (uint64_t)nw_protocol_http_messaging_disconnected;
  qword_1E8F69D08 = (uint64_t)nw_protocol_http_messaging_error;
  qword_1E8F69DB0 = (uint64_t)nw_protocol_http_messaging_copy_info;
  qword_1E8F69DB8 = (uint64_t)nw_protocol_http_messaging_add_listen_handler;
  qword_1E8F69DC0 = (uint64_t)nw_protocol_http_messaging_remove_listen_handler;
}

uint64_t nw_protocol_http_messaging_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v13, &type, &v29)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      uint64_t v16 = "%{public}s called with null protocol";
      goto LABEL_36;
    }
    if (!v29)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_36;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      __int16 v33 = 2082;
      uint64_t v34 = backtrace_string;
      __int16 v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_62:
      _os_log_impl(&dword_1830D4000, v14, v15, v27, buf, 0x16u);
    }
LABEL_63:
    free(backtrace_string);
    goto LABEL_38;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v13, &type, &v29)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      uint64_t v16 = "%{public}s called with null http_messaging";
      goto LABEL_36;
    }
    if (!v29)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      uint64_t v16 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v28 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v28) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      uint64_t v16 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_36;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
      __int16 v33 = 2082;
      uint64_t v34 = backtrace_string;
      __int16 v27 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v24 = __nwlog_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
        __int16 v33 = 2082;
        uint64_t v34 = handle + 188;
        __int16 v35 = 2080;
        uint64_t v36 = " ";
        __int16 v37 = 2048;
        __int16 v38 = a2;
        _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
      }
    }
  }
  os_log_type_t v5 = (nw_listen_protocol **)*((void *)handle + 16);
  int64_t v4 = (nw_listen_protocol **)*((void *)handle + 17);
  uint64_t v6 = v4;
  if (v5 != v4)
  {
    uint64_t v6 = (nw_listen_protocol **)*((void *)handle + 16);
    while (*v6 != a2)
    {
      if (++v6 == v4)
      {
        uint64_t v6 = (nw_listen_protocol **)*((void *)handle + 17);
        break;
      }
    }
  }
  if (v6 == v4 || (uint64_t v7 = v6 + 1, v6 + 1 == v4))
  {
    uint64_t v8 = (char *)*((void *)handle + 16);
    uint64_t v9 = (nw_listen_protocol **)*((void *)handle + 17);
    if (v6 == v4) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  do
  {
    if (*v7 != a2) {
      *v6++ = *v7;
    }
    ++v7;
  }
  while (v7 != v4);
  uint64_t v8 = (char *)*((void *)handle + 16);
  uint64_t v9 = (nw_listen_protocol **)*((void *)handle + 17);
  if (v6 != v9)
  {
LABEL_18:
    os_log_type_t v10 = v6;
    int64_t v11 = (char *)v9 - (char *)v6;
    int64_t v12 = (char *)v9 - ((char *)v10 + v11);
    if (v9 != (nw_listen_protocol **)((char *)v10 + v11))
    {
      memmove(v10, (char *)v10 + v11, (char *)v9 - ((char *)v10 + v11));
      uint64_t v8 = (char *)*((void *)handle + 16);
    }
    uint64_t v9 = (nw_listen_protocol **)((char *)v10 + v12);
    *((void *)handle + 17) = (char *)v10 + v12;
  }
LABEL_21:
  if ((char *)v4 - (char *)v5 == (char *)v9 - v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v13, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
          uint64_t v16 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler";
LABEL_36:
          BOOL v22 = v14;
          os_log_type_t v23 = v15;
LABEL_37:
          _os_log_impl(&dword_1830D4000, v22, v23, v16, buf, 0xCu);
        }
      }
      else if (v29)
      {
        BOOL v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v18)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
            __int16 v33 = 2082;
            uint64_t v34 = v18;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s ignoring request to remove protocol listen handler, does not match our handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v18);
          goto LABEL_38;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
          uint64_t v16 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler, no backtrace";
          BOOL v22 = v19;
          os_log_type_t v23 = v20;
          goto LABEL_37;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_protocol_http_messaging_remove_listen_handler";
          uint64_t v16 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler, backtrace limit exceeded";
          goto LABEL_36;
        }
      }
    }
LABEL_38:
    if (v13) {
      free(v13);
    }
    return 0;
  }
  a2->protocol_handler = 0;
  uint64_t result = 1;
  if ((handle[272] & 8) == 0 && v8 == (char *)v9)
  {
    nw_protocol_http_messaging_teardown((uint64_t)handle, 0);
    return 1;
  }
  return result;
}

uint64_t nw_protocol_http_messaging_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v17, &type, &v41)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      os_log_type_t v20 = "%{public}s called with null protocol";
      goto LABEL_43;
    }
    if (!v41)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      os_log_type_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v38 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      os_log_type_t v20 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_43;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      __int16 v45 = 2082;
      os_log_type_t v46 = backtrace_string;
      uint64_t v39 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_69:
      _os_log_impl(&dword_1830D4000, v18, v19, v39, buf, 0x16u);
    }
LABEL_70:
    free(backtrace_string);
    goto LABEL_45;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v17, &type, &v41)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      os_log_type_t v20 = "%{public}s called with null http_messaging";
      goto LABEL_43;
    }
    if (!v41)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      os_log_type_t v20 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v40 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v40) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      os_log_type_t v20 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_43;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
      __int16 v45 = 2082;
      os_log_type_t v46 = backtrace_string;
      uint64_t v39 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v36 = __nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
        __int16 v45 = 2082;
        os_log_type_t v46 = handle + 188;
        __int16 v47 = 2080;
        uint64_t v48 = " ";
        __int16 v49 = 2048;
        id v50 = a2;
        _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
      }
    }
  }
  uint64_t v7 = (char *)*((void *)handle + 16);
  uint64_t v8 = (char *)*((void *)handle + 17);
  if (v7 == v8 || (handle[272] & 1) == 0)
  {
    unint64_t v9 = *((void *)handle + 18);
    if ((unint64_t)v8 >= v9)
    {
      int64_t v11 = v8 - v7;
      uint64_t v12 = (v8 - v7) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      uint64_t v14 = v9 - (void)v7;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v16 = operator new(8 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      id v25 = &v16[8 * v12];
      BOOL v26 = &v16[8 * v15];
      *id v25 = a2;
      os_log_type_t v10 = v25 + 1;
      if (v7 != v8)
      {
        if ((unint64_t)(v11 - 8) < 0x58) {
          goto LABEL_83;
        }
        if ((unint64_t)(v7 - v16) < 0x20) {
          goto LABEL_83;
        }
        unint64_t v27 = ((unint64_t)(v11 - 8) >> 3) + 1;
        BOOL v28 = &v16[8 * v12 - 16];
        char v29 = v8 - 16;
        uint64_t v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          _OWORD *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        v25 -= v27 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_83:
          do
          {
            uint64_t v32 = *((void *)v8 - 1);
            v8 -= 8;
            *--id v25 = v32;
          }
          while (v8 != v7);
          uint64_t v7 = (char *)*((void *)handle + 16);
        }
      }
      *((void *)handle + 16) = v25;
      *((void *)handle + 17) = v10;
      *((void *)handle + 18) = v26;
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(void *)uint64_t v8 = a2;
      os_log_type_t v10 = v8 + 8;
    }
    *((void *)handle + 17) = v10;
    a2->protocol_handler = a1;
    if (a3) {
      nw_protocol_remove_instance((uint64_t)a1);
    }
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (__nwlog_fault(v17, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
        os_log_type_t v20 = "%{public}s already have a server listen handler, ignoring add";
LABEL_43:
        uint64_t v34 = v18;
        os_log_type_t v35 = v19;
LABEL_44:
        _os_log_impl(&dword_1830D4000, v34, v35, v20, buf, 0xCu);
      }
    }
    else if (v41)
    {
      BOOL v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v22 = gLogObj;
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v21)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
          __int16 v45 = 2082;
          os_log_type_t v46 = v21;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s already have a server listen handler, ignoring add, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v21);
        goto LABEL_45;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
        os_log_type_t v20 = "%{public}s already have a server listen handler, ignoring add, no backtrace";
        uint64_t v34 = v22;
        os_log_type_t v35 = v23;
        goto LABEL_44;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v44 = "nw_protocol_http_messaging_add_listen_handler";
        os_log_type_t v20 = "%{public}s already have a server listen handler, ignoring add, backtrace limit exceeded";
        goto LABEL_43;
      }
    }
  }
LABEL_45:
  if (v17) {
    free(v17);
  }
  return 0;
}

uint64_t nw_protocol_http_messaging_copy_info(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http_messaging_copy_info";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_copy_info";
      uint64_t v6 = "%{public}s called with null protocol";
      goto LABEL_35;
    }
    if (!v11)
    {
      int64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_copy_info";
      uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v8) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_copy_info";
      uint64_t v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_35;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_http_messaging_copy_info";
      __int16 v15 = 2082;
      uint64_t v16 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_36:
    if (!v3) {
      return 0;
    }
LABEL_37:
    free(v3);
    return 0;
  }
  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http_messaging_copy_info";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_copy_info";
      uint64_t v6 = "%{public}s called with null http_messaging";
      goto LABEL_35;
    }
    if (!v11)
    {
      int64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_copy_info";
      uint64_t v6 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_35;
    }
    unint64_t v9 = (char *)__nw_create_backtrace_string();
    int64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (v9)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_protocol_http_messaging_copy_info";
        __int16 v15 = 2082;
        uint64_t v16 = v9;
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v9);
      if (!v3) {
        return 0;
      }
      goto LABEL_37;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_copy_info";
      uint64_t v6 = "%{public}s called with null http_messaging, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  if (a2 == 253) {
    return 0;
  }

  return nw_protocol_common_copy_info(a1, a2);
}

void nw_protocol_http_messaging_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_messaging_error";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_messaging_error";
      uint64_t v7 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_protocol_http_messaging_error";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_48:
        if (!v4) {
          return;
        }
        goto LABEL_49;
      }
      if (!v9) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_messaging_error";
      uint64_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_messaging_error";
      uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_47;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_messaging_error";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        os_log_type_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_http_messaging_error";
        uint64_t v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_47;
      }
      BOOL v10 = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v11) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_http_messaging_error";
        uint64_t v7 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_47;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "nw_protocol_http_messaging_error";
        __int16 v18 = 2082;
        os_log_type_t v19 = v10;
        uint64_t v12 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v5, v6, v12, buf, 0x16u);
      }
LABEL_33:
      free(v10);
      if (!v4) {
        return;
      }
LABEL_49:
      free(v4);
      return;
    }
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_messaging_error";
    uint64_t v7 = "%{public}s called with null http_messaging";
LABEL_47:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_messaging_error";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_messaging_error";
      uint64_t v7 = "%{public}s called with null other_protocol";
      goto LABEL_47;
    }
    if (!v14)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_messaging_error";
      uint64_t v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    BOOL v10 = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v13 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v13) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_messaging_error";
      uint64_t v7 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_47;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v17 = "nw_protocol_http_messaging_error";
      __int16 v18 = 2082;
      os_log_type_t v19 = v10;
      uint64_t v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  uint64_t v3 = (void *)handle[6];

  nw_protocol_error(v3, (uint64_t)a2);
}

void nw_protocol_http_messaging_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_messaging_disconnected";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_messaging_disconnected";
      BOOL v8 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_protocol_http_messaging_disconnected";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_48:
        if (!v5) {
          return;
        }
        goto LABEL_49;
      }
      if (!v10) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_messaging_disconnected";
      BOOL v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_messaging_disconnected";
      BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_47;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_messaging_disconnected";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_48;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v15)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_messaging_disconnected";
        BOOL v8 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_47;
      }
      BOOL v11 = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_messaging_disconnected";
        BOOL v8 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_47;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v18 = "nw_protocol_http_messaging_disconnected";
        __int16 v19 = 2082;
        uint64_t v20 = v11;
        BOOL v13 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v6, v7, v13, buf, 0x16u);
      }
LABEL_33:
      free(v11);
      if (!v5) {
        return;
      }
LABEL_49:
      free(v5);
      return;
    }
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_messaging_disconnected";
    BOOL v8 = "%{public}s called with null http_messaging";
LABEL_47:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_messaging_disconnected";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_messaging_disconnected";
      BOOL v8 = "%{public}s called with null other_protocol";
      goto LABEL_47;
    }
    if (!v15)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_messaging_disconnected";
      BOOL v8 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    BOOL v11 = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v14 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v14) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_messaging_disconnected";
      BOOL v8 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_47;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v18 = "nw_protocol_http_messaging_disconnected";
      __int16 v19 = 2082;
      uint64_t v20 = v11;
      BOOL v13 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  nw_protocol_remove_instance((uint64_t)a1->handle);
  int64_t v4 = (void *)handle[6];

  nw_protocol_disconnected(v4, (uint64_t)a2);
}

void nw_protocol_http_messaging_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_messaging_disconnect";
    BOOL v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      uint64_t v17 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v27 = "nw_protocol_http_messaging_disconnect";
          __int16 v28 = 2082;
          char v29 = (nw_protocol *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v14) {
          return;
        }
        goto LABEL_75;
      }
      if (!v19) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      uint64_t v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      uint64_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_messaging_disconnect";
    BOOL v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24)) {
      goto LABEL_74;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        char v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v27 = "nw_protocol_http_messaging_disconnect";
        uint64_t v17 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_73;
      }
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v27 = "nw_protocol_http_messaging_disconnect";
        uint64_t v17 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_73;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_messaging_disconnect";
        __int16 v28 = 2082;
        char v29 = (nw_protocol *)v20;
        BOOL v22 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_58:
        _os_log_impl(&dword_1830D4000, v15, v16, v22, buf, 0x16u);
      }
LABEL_59:
      free(v20);
      if (!v14) {
        return;
      }
LABEL_75:
      BOOL v13 = (char *)v14;
LABEL_31:
      free(v13);
      return;
    }
    char v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_messaging_disconnect";
    uint64_t v17 = "%{public}s called with null http_messaging";
LABEL_73:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_74;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_messaging_disconnect";
    BOOL v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      uint64_t v17 = "%{public}s called with null other_protocol";
      goto LABEL_73;
    }
    if (!v24)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      uint64_t v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_73;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    char v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      uint64_t v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_73;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      __int16 v28 = 2082;
      char v29 = (nw_protocol *)v20;
      BOOL v22 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  if (*((nw_protocol **)handle + 6) != a2)
  {
    nw_protocol_disconnected(a2, (uint64_t)handle);
    uint64_t v4 = *((void *)handle + 20);
    uint64_t v5 = *((void *)handle + 21);
    if (v4 != v5)
    {
      while (*(nw_protocol **)v4 != a2)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_15;
        }
      }
    }
    if (v4 != v5)
    {
      *(_DWORD *)(v4 + 8) = 2;
      return;
    }
LABEL_15:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    unint64_t v27 = "nw_protocol_http_messaging_disconnect";
    __int16 v28 = 2048;
    char v29 = a2;
    os_log_type_t v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v7, &type, &v24)) {
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_messaging_disconnect";
        __int16 v28 = 2048;
        char v29 = a2;
        BOOL v10 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_28:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0x16u);
      }
    }
    else if (v24)
    {
      BOOL v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          unint64_t v27 = "nw_protocol_http_messaging_disconnect";
          __int16 v28 = 2048;
          char v29 = a2;
          __int16 v30 = 2082;
          long long v31 = v11;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v11);
        goto LABEL_29;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_messaging_disconnect";
        __int16 v28 = 2048;
        char v29 = a2;
        BOOL v10 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
        goto LABEL_28;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_messaging_disconnect";
        __int16 v28 = 2048;
        char v29 = a2;
        BOOL v10 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
LABEL_29:
    if (!v7) {
      return;
    }
    BOOL v13 = (char *)v7;
    goto LABEL_31;
  }
  if ((handle[272] & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      unint64_t v27 = "nw_protocol_http_messaging_disconnect";
      __int16 v28 = 2082;
      char v29 = (nw_protocol *)(handle + 188);
      __int16 v30 = 2080;
      long long v31 = " ";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sdisconnecting output handler", buf, 0x20u);
    }
  }
  handle[272] |= 0x10u;
  nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
}

void nw_protocol_http_messaging_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v101 = "nw_protocol_http_messaging_connected";
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (!__nwlog_fault(v84, &type, &v98)) {
      goto LABEL_193;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v85 = __nwlog_obj();
      os_log_type_t v86 = type;
      if (!os_log_type_enabled(v85, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v101 = "nw_protocol_http_messaging_connected";
      int v87 = "%{public}s called with null protocol";
    }
    else if (v98)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v85 = __nwlog_obj();
      os_log_type_t v86 = type;
      BOOL v91 = os_log_type_enabled(v85, type);
      if (backtrace_string)
      {
        if (v91)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v101 = "nw_protocol_http_messaging_connected";
          __int16 v102 = 2082;
          uint64_t v103 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_193:
        if (!v84) {
          return;
        }
        goto LABEL_194;
      }
      if (!v91) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v101 = "nw_protocol_http_messaging_connected";
      int v87 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      unint64_t v85 = __nwlog_obj();
      os_log_type_t v86 = type;
      if (!os_log_type_enabled(v85, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v101 = "nw_protocol_http_messaging_connected";
      int v87 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_192;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v101 = "nw_protocol_http_messaging_connected";
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (!__nwlog_fault(v84, &type, &v98)) {
      goto LABEL_193;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v98)
      {
        unint64_t v85 = __nwlog_obj();
        os_log_type_t v86 = type;
        if (!os_log_type_enabled(v85, type)) {
          goto LABEL_193;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v101 = "nw_protocol_http_messaging_connected";
        int v87 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_192;
      }
      uint64_t v92 = (char *)__nw_create_backtrace_string();
      unint64_t v85 = __nwlog_obj();
      os_log_type_t v86 = type;
      BOOL v93 = os_log_type_enabled(v85, type);
      if (!v92)
      {
        if (!v93) {
          goto LABEL_193;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v101 = "nw_protocol_http_messaging_connected";
        int v87 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_192;
      }
      if (v93)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v101 = "nw_protocol_http_messaging_connected";
        __int16 v102 = 2082;
        uint64_t v103 = v92;
        unint64_t v94 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_177:
        _os_log_impl(&dword_1830D4000, v85, v86, v94, buf, 0x16u);
      }
LABEL_178:
      free(v92);
      if (!v84) {
        return;
      }
LABEL_194:
      free(v84);
      return;
    }
    unint64_t v85 = __nwlog_obj();
    os_log_type_t v86 = type;
    if (!os_log_type_enabled(v85, type)) {
      goto LABEL_193;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v101 = "nw_protocol_http_messaging_connected";
    int v87 = "%{public}s called with null http_messaging";
LABEL_192:
    _os_log_impl(&dword_1830D4000, v85, v86, v87, buf, 0xCu);
    goto LABEL_193;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v101 = "nw_protocol_http_messaging_connected";
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (!__nwlog_fault(v84, &type, &v98)) {
      goto LABEL_193;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v85 = __nwlog_obj();
      os_log_type_t v86 = type;
      if (!os_log_type_enabled(v85, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v101 = "nw_protocol_http_messaging_connected";
      int v87 = "%{public}s called with null other_protocol";
      goto LABEL_192;
    }
    if (!v98)
    {
      unint64_t v85 = __nwlog_obj();
      os_log_type_t v86 = type;
      if (!os_log_type_enabled(v85, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v101 = "nw_protocol_http_messaging_connected";
      int v87 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_192;
    }
    uint64_t v92 = (char *)__nw_create_backtrace_string();
    unint64_t v85 = __nwlog_obj();
    os_log_type_t v86 = type;
    BOOL v95 = os_log_type_enabled(v85, type);
    if (!v92)
    {
      if (!v95) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v101 = "nw_protocol_http_messaging_connected";
      int v87 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_192;
    }
    if (v95)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v101 = "nw_protocol_http_messaging_connected";
      __int16 v102 = 2082;
      uint64_t v103 = v92;
      unint64_t v94 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_177;
    }
    goto LABEL_178;
  }
  if ((handle[272] & 0x10) != 0)
  {
    if ((handle[272] & 2) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v101 = "nw_protocol_http_messaging_connected";
    __int16 v102 = 2082;
    uint64_t v103 = handle + 188;
    __int16 v104 = 2080;
    int v105 = " ";
    uint64_t v20 = "%{public}s %{public}s%signoring connected";
    BOOL v21 = v19;
    os_log_type_t v22 = OS_LOG_TYPE_INFO;
LABEL_29:
    _os_log_impl(&dword_1830D4000, v21, v22, v20, buf, 0x20u);
    return;
  }
  uint64_t v4 = (void *)*((void *)handle + 6);
  if (!v4)
  {
    if ((handle[272] & 2) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v23 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v101 = "nw_protocol_http_messaging_connected";
    __int16 v102 = 2082;
    uint64_t v103 = handle + 188;
    __int16 v104 = 2080;
    int v105 = " ";
    uint64_t v20 = "%{public}s %{public}s%sno default input handler, ignoring connected";
    BOOL v21 = v23;
    os_log_type_t v22 = OS_LOG_TYPE_ERROR;
    goto LABEL_29;
  }
  nw_protocol_connected(v4, (uint64_t)a2);
  if (*((nw_protocol **)handle + 4) == a2)
  {
    if ((handle[272] & 2) == 0)
    {
      if (gLogDatapath)
      {
        unsigned int v96 = __nwlog_obj();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
          __int16 v102 = 2082;
          uint64_t v103 = handle + 188;
          __int16 v104 = 2080;
          int v105 = " ";
          _os_log_impl(&dword_1830D4000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    uint64_t v5 = nw_protocol_copy_info(*((void *)handle + 4), 255);
    os_log_type_t v6 = (void *)v5;
    if (v5
      && (uint64_t v7 = *(void *)(v5 + 24) - *(void *)(v5 + 16)) != 0
      && (object_at_index = nw_array_get_object_at_index(v5, (v7 >> 3) - 1)) != 0)
    {
      os_log_type_t v9 = object_at_index;
      BOOL is_tls = nw_protocol_metadata_is_tls(object_at_index);
      BOOL v11 = v9;
      sec_protocol_metadata_t v12 = v11;
      if (is_tls)
      {
        negotiated_protocol = sec_protocol_metadata_get_negotiated_protocol(v11);
        if ((handle[272] & 2) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v14 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            __int16 v102 = 2082;
            uint64_t v103 = handle + 188;
            __int16 v104 = 2080;
            int v105 = " ";
            __int16 v106 = 2082;
            unint64_t v107 = negotiated_protocol;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sFound TLS metadata with ALPN %{public}s", buf, 0x2Au);
          }
        }
        if (negotiated_protocol)
        {
          if (!strcmp(negotiated_protocol, "h2"))
          {
            int v66 = 4;
            goto LABEL_149;
          }
          if (strcmp(negotiated_protocol, "http/1.1"))
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446466;
            unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            __int16 v102 = 2080;
            uint64_t v103 = (char *)negotiated_protocol;
            char v15 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v98 = 0;
            if (__nwlog_fault(v15, &type, &v98))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v16 = __nwlog_obj();
                os_log_type_t v17 = type;
                if (os_log_type_enabled(v16, type))
                {
                  *(_DWORD *)buf = 136446466;
                  unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
                  __int16 v102 = 2080;
                  uint64_t v103 = (char *)negotiated_protocol;
                  __int16 v18 = "%{public}s Invalid TLS ALPN %s";
LABEL_145:
                  _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0x16u);
                }
              }
              else if (v98)
              {
                unint64_t v82 = (char *)__nw_create_backtrace_string();
                os_log_type_t v16 = __nwlog_obj();
                os_log_type_t v17 = type;
                BOOL v83 = os_log_type_enabled(v16, type);
                if (v82)
                {
                  if (v83)
                  {
                    *(_DWORD *)buf = 136446722;
                    unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
                    __int16 v102 = 2080;
                    uint64_t v103 = (char *)negotiated_protocol;
                    __int16 v104 = 2082;
                    int v105 = v82;
                    _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Invalid TLS ALPN %s, dumping backtrace:%{public}s", buf, 0x20u);
                  }
                  free(v82);
                  goto LABEL_146;
                }
                if (v83)
                {
                  *(_DWORD *)buf = 136446466;
                  unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
                  __int16 v102 = 2080;
                  uint64_t v103 = (char *)negotiated_protocol;
                  __int16 v18 = "%{public}s Invalid TLS ALPN %s, no backtrace";
                  goto LABEL_145;
                }
              }
              else
              {
                os_log_type_t v16 = __nwlog_obj();
                os_log_type_t v17 = type;
                if (os_log_type_enabled(v16, type))
                {
                  *(_DWORD *)buf = 136446466;
                  unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
                  __int16 v102 = 2080;
                  uint64_t v103 = (char *)negotiated_protocol;
                  __int16 v18 = "%{public}s Invalid TLS ALPN %s, backtrace limit exceeded";
                  goto LABEL_145;
                }
              }
            }
LABEL_146:
            if (v15) {
              free(v15);
            }
            int v66 = 0;
            goto LABEL_149;
          }
        }
        int v66 = 3;
LABEL_149:
        os_release(v12);
        goto LABEL_150;
      }
      if (nw_protocol_metadata_is_quic_connection(v11))
      {

LABEL_81:
        sec_protocol_metadata_t v12 = nw_quic_copy_sec_protocol_metadata(v12);
        uint64_t v68 = sec_protocol_metadata_get_negotiated_protocol(v12);
        if ((handle[272] & 2) == 0)
        {
          unint64_t v69 = __nwlog_obj();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            __int16 v102 = 2082;
            uint64_t v103 = handle + 188;
            __int16 v104 = 2080;
            int v105 = " ";
            __int16 v106 = 2082;
            unint64_t v107 = v68;
            _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sFound QUIC metadata with ALPN %{public}s", buf, 0x2Au);
          }
        }
        if (v68)
        {
          if (!strcmp(v68, "h3"))
          {
            int v66 = 5;
            goto LABEL_141;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446466;
          unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
          __int16 v102 = 2080;
          uint64_t v103 = (char *)v68;
          unint64_t v70 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v98 = 0;
          if (__nwlog_fault(v70, &type, &v98))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              int v71 = __nwlog_obj();
              os_log_type_t v72 = type;
              if (!os_log_type_enabled(v71, type)) {
                goto LABEL_132;
              }
              *(_DWORD *)buf = 136446466;
              unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
              __int16 v102 = 2080;
              uint64_t v103 = (char *)v68;
              unint64_t v73 = "%{public}s Invalid QUIC ALPN %s";
LABEL_131:
              _os_log_impl(&dword_1830D4000, v71, v72, v73, buf, 0x16u);
              goto LABEL_132;
            }
            if (!v98)
            {
              int v71 = __nwlog_obj();
              os_log_type_t v72 = type;
              if (!os_log_type_enabled(v71, type)) {
                goto LABEL_132;
              }
              *(_DWORD *)buf = 136446466;
              unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
              __int16 v102 = 2080;
              uint64_t v103 = (char *)v68;
              unint64_t v73 = "%{public}s Invalid QUIC ALPN %s, backtrace limit exceeded";
              goto LABEL_131;
            }
            unint64_t v78 = (char *)__nw_create_backtrace_string();
            int v71 = __nwlog_obj();
            os_log_type_t v72 = type;
            BOOL v79 = os_log_type_enabled(v71, type);
            if (!v78)
            {
              if (!v79) {
                goto LABEL_132;
              }
              *(_DWORD *)buf = 136446466;
              unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
              __int16 v102 = 2080;
              uint64_t v103 = (char *)v68;
              unint64_t v73 = "%{public}s Invalid QUIC ALPN %s, no backtrace";
              goto LABEL_131;
            }
            if (v79)
            {
              *(_DWORD *)buf = 136446722;
              unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
              __int16 v102 = 2080;
              uint64_t v103 = (char *)v68;
              __int16 v104 = 2082;
              int v105 = v78;
              _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s Invalid QUIC ALPN %s, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v78);
          }
LABEL_132:
          if (v70)
          {
            uint64_t v88 = (char *)v70;
LABEL_139:
            free(v88);
            goto LABEL_140;
          }
          goto LABEL_140;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
        unint64_t v74 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v98 = 0;
        if (__nwlog_fault(v74, &type, &v98))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            int v75 = __nwlog_obj();
            os_log_type_t v76 = type;
            if (!os_log_type_enabled(v75, type)) {
              goto LABEL_137;
            }
            *(_DWORD *)buf = 136446210;
            unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            unint64_t v77 = "%{public}s Missing QUIC ALPN";
LABEL_136:
            _os_log_impl(&dword_1830D4000, v75, v76, v77, buf, 0xCu);
            goto LABEL_137;
          }
          if (!v98)
          {
            int v75 = __nwlog_obj();
            os_log_type_t v76 = type;
            if (!os_log_type_enabled(v75, type)) {
              goto LABEL_137;
            }
            *(_DWORD *)buf = 136446210;
            unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            unint64_t v77 = "%{public}s Missing QUIC ALPN, backtrace limit exceeded";
            goto LABEL_136;
          }
          uint64_t v80 = (char *)__nw_create_backtrace_string();
          int v75 = __nwlog_obj();
          os_log_type_t v76 = type;
          BOOL v81 = os_log_type_enabled(v75, type);
          if (!v80)
          {
            if (!v81) {
              goto LABEL_137;
            }
            *(_DWORD *)buf = 136446210;
            unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            unint64_t v77 = "%{public}s Missing QUIC ALPN, no backtrace";
            goto LABEL_136;
          }
          if (v81)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            __int16 v102 = 2082;
            uint64_t v103 = v80;
            _os_log_impl(&dword_1830D4000, v75, v76, "%{public}s Missing QUIC ALPN, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v80);
        }
LABEL_137:
        if (v74)
        {
          uint64_t v88 = (char *)v74;
          goto LABEL_139;
        }
LABEL_140:
        int v66 = 0;
LABEL_141:
        if (!v12)
        {
LABEL_150:
          os_release(v6);
          id v25 = 0;
          *((_DWORD *)handle + 46) = v66;
          switch(v66)
          {
            case 0:
              nw_protocol_http_messaging_error((nw_protocol *)handle, (nw_protocol *)handle);
              nw_protocol_http_messaging_disconnected((nw_protocol *)handle, (nw_protocol *)handle);
              return;
            case 3:
              goto LABEL_37;
            case 4:
              if (nw_protocol_http2_identifier::onceToken[0] != -1) {
                dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_85036);
              }
              id v25 = &nw_protocol_http2_identifier::http2_protocol_identifier;
              if (handle[272]) {
                goto LABEL_40;
              }
              goto LABEL_159;
            case 5:
              if (nw_protocol_http3_identifier::onceToken[0] != -1) {
                dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_13_62491);
              }
              id v25 = &nw_protocol_http3_identifier::http3_protocol_identifier;
              if (handle[272]) {
                goto LABEL_40;
              }
LABEL_159:
              if (nw_endpoint_is_registered(*((void **)handle + 14)))
              {
                nw_endpoint_add_edges_for_instance(*((void **)handle + 14), handle, 1);
              }
              else if ((handle[272] & 2) == 0)
              {
                unint64_t v89 = __nwlog_obj();
                if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  unint64_t v101 = "nw_protocol_http_messaging_connected";
                  __int16 v102 = 2082;
                  uint64_t v103 = handle + 188;
                  __int16 v104 = 2080;
                  int v105 = " ";
                  _os_log_impl(&dword_1830D4000, v89, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sconnection's endpoint is not registered, cannot add edges", buf, 0x20u);
                }
              }
              break;
            default:
              goto LABEL_40;
          }
          goto LABEL_40;
        }
        goto LABEL_149;
      }
      BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(v12);

      if (is_quic_stream) {
        goto LABEL_81;
      }
    }
    else
    {
      if ((handle[272] & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v24 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          unint64_t v101 = "nw_http_messaging_get_http_version_from_alpn";
          __int16 v102 = 2082;
          uint64_t v103 = handle + 188;
          __int16 v104 = 2080;
          int v105 = " ";
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sTop metadata isn't TLS, assuming HTTP/1.1", buf, 0x20u);
        }
      }
      if (!v6) {
        goto LABEL_36;
      }
    }
    os_release(v6);
LABEL_36:
    *((_DWORD *)handle + 46) = 3;
LABEL_37:
    if (nw_protocol_http1_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_40283);
    }
    id v25 = &nw_protocol_http1_identifier::http1_protocol_identifier;
LABEL_40:
    uint64_t internal = nw_protocol_create_internal((uint64_t)v25, *((void **)handle + 14), *((const char **)handle + 12), 0);
    *((void *)handle + 19) = internal;
    *(void *)(internal + 16) = *((void *)handle + 2);
    uint64_t v27 = *((void *)handle + 6);
    nw_protocol_set_input_handler((uint64_t)handle, 0);
    nw_http_messaging_add_to_version_specific_protocol((uint64_t)handle, v27);
    nw_protocol_add_listen_handler(*((void *)handle + 19), (uint64_t)(handle + 64));
    nw_protocol_replace_input_handler(*((void *)handle + 4), (uint64_t)handle, *(void *)(v27 + 32));
    nw_protocol_set_output_handler((uint64_t)handle, 0);
    nw_protocol_connect(*(void *)(v27 + 32), v27);
    __int16 v28 = handle + 188;
    char v29 = &nwlog_legacy_init(void)::init_once;
    __int16 v30 = &unk_1EB267000;
    long long v31 = "nw_protocol_http_messaging_connected";
    uint64_t v32 = " ";
    while (1)
    {
      uint64_t v34 = *((void *)handle + 20);
      uint64_t v33 = *((void *)handle + 21);
      uint64_t v35 = v34;
      if (v34 != v33)
      {
        while (*(_DWORD *)(v35 + 8) == 2)
        {
          v35 += 16;
          if (v35 == v33) {
            return;
          }
        }
      }
      if (v35 == v33) {
        return;
      }
      uint64_t v36 = *(void **)v35;
      int v37 = *(_DWORD *)(v35 + 8);
      uint64_t v38 = v35 + 16;
      if (v35 + 16 != v33)
      {
        unint64_t v39 = v33 - v35 - 32;
        if (v39 >= 0x10)
        {
          uint64_t v40 = (v35 - v34) >> 4;
          uint64_t v41 = (v39 >> 4) + 1;
          uint64_t v42 = 16 * (v41 & 0x1FFFFFFFFFFFFFFELL);
          v35 += v42;
          uint64_t v43 = v34 + 16 * v40 + 24;
          uint64_t v44 = v41 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v45 = *(void *)(v43 + 8);
            *(void *)(v43 - 24) = *(void *)(v43 - 8);
            *(void *)(v43 - 8) = v45;
            LODWORD(v45) = *(_DWORD *)(v43 + 16);
            *(_DWORD *)(v43 - 16) = *(_DWORD *)v43;
            *(_DWORD *)uint64_t v43 = v45;
            v43 += 32;
            v44 -= 2;
          }
          while (v44);
          if (v41 == (v41 & 0x1FFFFFFFFFFFFFFELL)) {
            goto LABEL_53;
          }
          v38 += v42;
        }
        do
        {
          *(void *)uint64_t v35 = *(void *)v38;
          *(_DWORD *)(v35 + 8) = *(_DWORD *)(v38 + 8);
          v35 += 16;
          v38 += 16;
        }
        while (v38 != v33);
      }
LABEL_53:
      *((void *)handle + 21) = v35;
      parameters = (void *)nw_protocol_get_parameters((uint64_t)v36);
      if (nw_protocol_http_messaging_accept((uint64_t)handle, *((void **)handle + 14), parameters)
        && (nw_http_messaging_add_to_version_specific_protocol((uint64_t)handle, (uint64_t)v36) & 1) != 0)
      {
        if (v37 == 1) {
          nw_protocol_connect(v36[4], (uint64_t)v36);
        }
      }
      else
      {
        if ((handle[272] & 2) == 0)
        {
          pthread_once(v29, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v47 = *((void *)v30 + 237);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446722;
            unint64_t v101 = v31;
            __int16 v102 = 2082;
            uint64_t v103 = v28;
            __int16 v104 = 2080;
            int v105 = v32;
            _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sVersion specific protocol cannot accept stream", buf, 0x20u);
          }
        }
        __int16 v49 = (char *)*((void *)handle + 21);
        unint64_t v48 = *((void *)handle + 22);
        if ((unint64_t)v49 >= v48)
        {
          uint64_t v97 = v28;
          uint64_t v51 = v32;
          uint64_t v52 = v29;
          BOOL v53 = v30;
          __int16 v54 = (char *)*((void *)handle + 20);
          uint64_t v55 = (v49 - v54) >> 4;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 60) {
            abort();
          }
          uint64_t v57 = v48 - (void)v54;
          if (v57 >> 3 > v56) {
            unint64_t v56 = v57 >> 3;
          }
          BOOL v58 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
          if (!v58) {
            unint64_t v59 = v56;
          }
          if (v59 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v60 = v31;
          uint64_t v61 = 16 * v59;
          uint64_t v62 = (char *)operator new(16 * v59);
          unint64_t v63 = &v62[16 * v55];
          *(void *)unint64_t v63 = v36;
          *((_DWORD *)v63 + 2) = 2;
          if (v49 == v54)
          {
            uint64_t v65 = &v62[16 * v55];
            __int16 v30 = v53;
          }
          else
          {
            int v64 = &v62[16 * v55];
            __int16 v30 = v53;
            do
            {
              uint64_t v65 = v64 - 16;
              *((_OWORD *)v64 - 1) = *((_OWORD *)v49 - 1);
              v49 -= 16;
              v64 -= 16;
            }
            while (v49 != v54);
          }
          id v50 = v63 + 16;
          *((void *)handle + 20) = v65;
          *((void *)handle + 21) = v63 + 16;
          *((void *)handle + 22) = &v62[v61];
          char v29 = v52;
          if (v54) {
            operator delete(v54);
          }
          long long v31 = v60;
          uint64_t v32 = v51;
          __int16 v28 = v97;
        }
        else
        {
          *(void *)__int16 v49 = v36;
          *((_DWORD *)v49 + 2) = 2;
          id v50 = v49 + 16;
        }
        *((void *)handle + 21) = v50;
        nw_protocol_error(v36, (uint64_t)handle);
        nw_protocol_disconnected(v36, (uint64_t)handle);
      }
    }
  }
}

void sub_183C41A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_http_messaging_add_to_version_specific_protocol(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_http_messaging_add_to_version_specific_protocol";
    sec_protocol_metadata_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_messaging_add_to_version_specific_protocol";
      char v15 = "%{public}s called with null input_protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          id v25 = "nw_http_messaging_add_to_version_specific_protocol";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_50:
        if (!v12) {
          return 0;
        }
LABEL_51:
        free(v12);
        return 0;
      }
      if (!v17) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_messaging_add_to_version_specific_protocol";
      char v15 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_messaging_add_to_version_specific_protocol";
      char v15 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
    goto LABEL_49;
  }
  parameters = (void *)nw_protocol_get_parameters(a2);
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_http_messaging_add_to_version_specific_protocol";
    sec_protocol_metadata_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_50;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_http_messaging_add_to_version_specific_protocol";
        char v15 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_49;
      }
      __int16 v18 = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_http_messaging_add_to_version_specific_protocol";
        char v15 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_49;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_http_messaging_add_to_version_specific_protocol";
        __int16 v26 = 2082;
        uint64_t v27 = v18;
        uint64_t v20 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_1830D4000, v13, v14, v20, buf, 0x16u);
      }
LABEL_35:
      free(v18);
      if (!v12) {
        return 0;
      }
      goto LABEL_51;
    }
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_http_messaging_add_to_version_specific_protocol";
    char v15 = "%{public}s called with null parameters";
LABEL_49:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_50;
  }
  uint64_t v5 = nw_parameters_copy_protocol_options_legacy(parameters, (nw_protocol *)a1);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_http_messaging_add_to_version_specific_protocol";
    sec_protocol_metadata_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_messaging_add_to_version_specific_protocol";
      char v15 = "%{public}s called with null options";
      goto LABEL_49;
    }
    if (!v22)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_messaging_add_to_version_specific_protocol";
      char v15 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_49;
    }
    __int16 v18 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_messaging_add_to_version_specific_protocol";
      char v15 = "%{public}s called with null options, no backtrace";
      goto LABEL_49;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      id v25 = "nw_http_messaging_add_to_version_specific_protocol";
      __int16 v26 = 2082;
      uint64_t v27 = v18;
      uint64_t v20 = "%{public}s called with null options, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  os_log_type_t v6 = v5;
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  id v7 = (id)nw_protocol_copy_http_messaging_definition_definition;
  uint64_t v8 = *(void *)(a1 + 152);
  os_log_type_t v9 = v6;
  *((void *)v9 + 2) = v8;

  if (v7) {
    os_release(v7);
  }
  nw_protocol_set_output_handler(a2, 0);
  uint64_t v10 = nw_protocol_add_input_handler(*(void *)(a1 + 152), a2);
  os_release(v9);
  return v10;
}

BOOL nw_protocol_http_messaging_accept(uint64_t a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v21, type, &v32)) {
      goto LABEL_80;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null protocol";
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      BOOL v26 = os_log_type_enabled(v22, type[0]);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_80:
        if (!v21) {
          return 0;
        }
LABEL_81:
        free(v21);
        return 0;
      }
      if (!v26) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_79;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v21, type, &v32)) {
      goto LABEL_80;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        char v22 = __nwlog_obj();
        os_log_type_t v23 = type[0];
        if (!os_log_type_enabled(v22, type[0])) {
          goto LABEL_80;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
        char v24 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_79;
      }
      uint64_t v27 = (char *)__nw_create_backtrace_string();
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      BOOL v28 = os_log_type_enabled(v22, type[0]);
      if (!v27)
      {
        if (!v28) {
          goto LABEL_80;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
        char v24 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_79;
      }
      if (!v28) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v27;
      char v29 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_60;
    }
    char v22 = __nwlog_obj();
    os_log_type_t v23 = type[0];
    if (!os_log_type_enabled(v22, type[0])) {
      goto LABEL_80;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    char v24 = "%{public}s called with null http_messaging";
LABEL_79:
    _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
    goto LABEL_80;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v21, type, &v32)) {
      goto LABEL_80;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null endpoint";
      goto LABEL_79;
    }
    if (!v32)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_79;
    }
    uint64_t v27 = (char *)__nw_create_backtrace_string();
    char v22 = __nwlog_obj();
    os_log_type_t v23 = type[0];
    BOOL v30 = os_log_type_enabled(v22, type[0]);
    if (!v27)
    {
      if (!v30) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_79;
    }
    if (!v30) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v27;
    char v29 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_60:
    _os_log_impl(&dword_1830D4000, v22, v23, v29, buf, 0x16u);
    goto LABEL_61;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v21, type, &v32)) {
      goto LABEL_80;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null parameters";
      goto LABEL_79;
    }
    if (!v32)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_79;
    }
    uint64_t v27 = (char *)__nw_create_backtrace_string();
    char v22 = __nwlog_obj();
    os_log_type_t v23 = type[0];
    BOOL v31 = os_log_type_enabled(v22, type[0]);
    if (!v27)
    {
      if (!v31) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      char v24 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_79;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v27;
      char v29 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_60;
    }
LABEL_61:
    free(v27);
    if (!v21) {
      return 0;
    }
    goto LABEL_81;
  }
  os_log_type_t v6 = *(void **)(v3 + 96);
  if (v6)
  {
    id v7 = nw_parameters_copy_protocol_options_legacy(v6, (nw_protocol *)v3);
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = a2;
      id v10 = a3;
      BOOL v11 = nw_protocol_options_copy_definition(v8);
      if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
      }
      BOOL is_equal = nw_protocol_definition_is_equal(v11, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

      if (is_equal)
      {
        *(void *)os_log_type_t type = 0;
        uint64_t v34 = type;
        uint64_t v35 = 0x2020000000;
        char v36 = 1;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_http_messaging_options_can_accept_block_invoke;
        uint64_t v38 = (const char *)&unk_1E5249110;
        uint64_t v40 = type;
        id v13 = v9;
        *(void *)&long long v39 = v13;
        id v14 = v10;
        *((void *)&v39 + 1) = v14;
        nw_protocol_options_access_handle(v8, buf);
        BOOL v15 = *((unsigned char *)v34 + 24) == 0;

        _Block_object_dispose(type, 8);
        if (v15)
        {
          if ((*(unsigned char *)(v3 + 272) & 2) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v16 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v3 + 188;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v38 = " ";
              LOWORD(v39) = 2112;
              *(void *)((char *)&v39 + 2) = v13;
              _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sOverrided accept handler for endpoint %@ rejected join attempt", buf, 0x2Au);
            }
          }
          os_release(v8);
          return 0;
        }
      }
      else
      {
      }
      os_release(v8);
    }
  }
  BOOL result = 1;
  switch(*(_DWORD *)(v3 + 184))
  {
    case 0:
      return result;
    case 3:
      uint64_t v18 = *(void *)(v3 + 152);
      BOOL result = nw_protocol_http1_accept(v18, (uint64_t)a2, (uint64_t)a3);
      break;
    case 4:
      uint64_t v19 = *(void *)(v3 + 152);
      BOOL result = nw_protocol_http2_accept(v19);
      break;
    case 5:
      uint64_t v20 = *(void *)(v3 + 152);
      BOOL result = nw_protocol_http3_accept(v20);
      break;
    default:
      return 0;
  }
  return result;
}

void sub_183C42A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http_messaging_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http_messaging_connect";
    id v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v7, &type, &v40)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null protocol";
      goto LABEL_47;
    }
    if (!v40)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v36 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (!v36) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_47;
    }
    if (!v36) {
      goto LABEL_88;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_protocol_http_messaging_connect";
    __int16 v44 = 2082;
    uint64_t v45 = (nw_protocol *)backtrace_string;
    int v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_87;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http_messaging_connect";
    id v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v7, &type, &v40)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null http_messaging";
      goto LABEL_47;
    }
    if (!v40)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v38 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_47;
    }
    if (!v38) {
      goto LABEL_88;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_protocol_http_messaging_connect";
    __int16 v44 = 2082;
    uint64_t v45 = (nw_protocol *)backtrace_string;
    int v37 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_87:
    _os_log_impl(&dword_1830D4000, v8, v9, v37, buf, 0x16u);
    goto LABEL_88;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http_messaging_connect";
    id v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v7, &type, &v40)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null other_protocol";
      goto LABEL_47;
    }
    if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v39 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v43 = "nw_protocol_http_messaging_connect";
          __int16 v44 = 2082;
          uint64_t v45 = (nw_protocol *)backtrace_string;
          int v37 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_87;
        }
LABEL_88:
        free(backtrace_string);
        goto LABEL_49;
      }
      if (!v39) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
LABEL_47:
    BOOL v31 = v8;
    os_log_type_t v32 = v9;
LABEL_48:
    _os_log_impl(&dword_1830D4000, v31, v32, v10, buf, 0xCu);
    goto LABEL_49;
  }
  if (!a1->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http_messaging_connect";
    id v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v7, &type, &v40)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s connect requires an output handler";
      goto LABEL_47;
    }
    if (!v40)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s connect requires an output handler, backtrace limit exceeded";
      goto LABEL_47;
    }
    id v25 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v26 = gLogObj;
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v25)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v43 = "nw_protocol_http_messaging_connect";
        __int16 v44 = 2082;
        uint64_t v45 = (nw_protocol *)v25;
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s connect requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v25);
    }
    else if (v28)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_messaging_connect";
      id v10 = "%{public}s connect requires an output handler, no backtrace";
      BOOL v31 = v26;
      os_log_type_t v32 = v27;
      goto LABEL_48;
    }
LABEL_49:
    if (v7)
    {
      uint64_t v33 = (char *)v7;
LABEL_60:
      free(v33);
    }
    return 0;
  }
  if (handle->default_input_handler != a2)
  {
    output_handler = handle[2].output_handler;
    os_log_type_t v6 = (nw_protocol *)handle[2].handle;
    if (output_handler != v6)
    {
      while (*(nw_protocol **)output_handler->flow_id != a2)
      {
        output_handler = (nw_protocol *)((char *)output_handler + 16);
        if (output_handler == v6) {
          goto LABEL_31;
        }
      }
    }
    if (output_handler != v6)
    {
      uint64_t v11 = 1;
      *(_DWORD *)&output_handler->flow_id[8] = 1;
      return v11;
    }
LABEL_31:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_protocol_http_messaging_connect";
    __int16 v44 = 2048;
    uint64_t v45 = a2;
    BOOL v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (__nwlog_fault(v21, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v22 = gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v43 = "nw_protocol_http_messaging_connect";
        __int16 v44 = 2048;
        uint64_t v45 = a2;
        char v24 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_57:
        _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0x16u);
        goto LABEL_58;
      }
      if (!v40)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v22 = gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v43 = "nw_protocol_http_messaging_connect";
        __int16 v44 = 2048;
        uint64_t v45 = a2;
        char v24 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
        goto LABEL_57;
      }
      char v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v22 = gLogObj;
      os_log_type_t v23 = type;
      BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v29)
      {
        if (!v30) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v43 = "nw_protocol_http_messaging_connect";
        __int16 v44 = 2048;
        uint64_t v45 = a2;
        char v24 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
        goto LABEL_57;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v43 = "nw_protocol_http_messaging_connect";
        __int16 v44 = 2048;
        uint64_t v45 = a2;
        __int16 v46 = 2082;
        __int16 v47 = v29;
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v29);
    }
LABEL_58:
    if (v21)
    {
      uint64_t v33 = (char *)v21;
      goto LABEL_60;
    }
    return 0;
  }
  id v12 = (id)nw_protocol_get_parameters((uint64_t)a2);
  BOOL v13 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v12, 0, 1);

  char v14 = (char)handle[1].handle;
  if (v14)
  {
    BOOL v15 = handle[1].output_handler;
    if (v15)
    {
      os_release(v15);
      char v14 = (char)handle[1].handle;
    }
  }
  handle[1].output_handler = (nw_protocol *)v13;
  LOBYTE(handle[1].handle) = v14 | 1;
  nw_protocol_stack_t v16 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v13);
  BOOL v17 = nw_parameters_copy_protocol_options_legacy(handle[1].output_handler, handle);
  uint64_t v18 = nw_protocol_options_copy(v17);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  id v19 = (id)nw_protocol_copy_http_messaging_definition_definition;
  nw_parameters_set_protocol_instance(v18, v20, (uint64_t)handle);
  if (v19) {
    os_release(v19);
  }
  nw_protocol_stack_replace_protocol_with_handle(v16, (uint64_t)handle, v18);
  if (nw_endpoint_is_registered(handle[1].default_input_handler)) {
    nw_endpoint_add_edges_for_instance(handle[1].default_input_handler, (atomic_uchar *)handle, 0);
  }
  uint64_t v11 = nw_protocol_connect((uint64_t)a1->output_handler, (uint64_t)a1);
  if (v18) {
    os_release(v18);
  }
  if (v17) {
    os_release(v17);
  }
  if (v16) {
    os_release(v16);
  }
  return v11;
}

void sub_183C435E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http_messaging_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t v2 = handle[6];
      if (!v2) {
        return handle[14];
      }
      return nw_protocol_get_remote_endpoint(v2);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        id v7 = "%{public}s called with null http_messaging";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v12)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        id v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        id v7 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      id v10 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_36;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        id v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        id v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      id v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_http_messaging_get_remote_endpoint";
    id v7 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_36:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_http_messaging_get_parameters(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_http_messaging_get_parameters";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_messaging_get_parameters";
      id v7 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v12)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_http_messaging_get_parameters";
        id v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "nw_protocol_http_messaging_get_parameters";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v4) {
          return 0;
        }
        goto LABEL_36;
      }
      if (!v9) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_messaging_get_parameters";
      id v7 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_http_messaging_get_parameters";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_messaging_get_parameters";
      id v7 = "%{public}s called with null http_messaging";
      goto LABEL_34;
    }
    if (!v12)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_messaging_get_parameters";
      id v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_34;
    }
    id v10 = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v11) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_messaging_get_parameters";
      id v7 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_protocol_http_messaging_get_parameters";
      __int16 v16 = 2082;
      BOOL v17 = v10;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v10);
LABEL_35:
    if (!v4) {
      return 0;
    }
LABEL_36:
    free(v4);
    return 0;
  }
  uint64_t result = handle[12];
  if (!result)
  {
    uint64_t v3 = handle[6];
    return nw_protocol_get_parameters(v3);
  }
  return result;
}

uint64_t nw_protocol_http_messaging_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v50 = "nw_protocol_http_messaging_remove_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v38, &type, &v47)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      id v50 = "nw_protocol_http_messaging_remove_input_handler";
      uint64_t v41 = "%{public}s called with null protocol";
LABEL_116:
      _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
      goto LABEL_117;
    }
    if (!v47)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        uint64_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v43 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        uint64_t v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    if (!v43) {
      goto LABEL_103;
    }
    *(_DWORD *)buf = 136446466;
    id v50 = "nw_protocol_http_messaging_remove_input_handler";
    __int16 v51 = 2082;
    uint64_t v52 = (nw_protocol *)backtrace_string;
    __int16 v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_102:
    _os_log_impl(&dword_1830D4000, v39, v40, v44, buf, 0x16u);
    goto LABEL_103;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v50 = "nw_protocol_http_messaging_remove_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v38, &type, &v47)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      id v50 = "nw_protocol_http_messaging_remove_input_handler";
      uint64_t v41 = "%{public}s called with null http_messaging";
      goto LABEL_116;
    }
    if (!v47)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        uint64_t v41 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        uint64_t v41 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    if (!v45) {
      goto LABEL_103;
    }
    *(_DWORD *)buf = 136446466;
    id v50 = "nw_protocol_http_messaging_remove_input_handler";
    __int16 v51 = 2082;
    uint64_t v52 = (nw_protocol *)backtrace_string;
    __int16 v44 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_102;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v50 = "nw_protocol_http_messaging_remove_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v38, &type, &v47)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        uint64_t v41 = "%{public}s called with null other_protocol";
        goto LABEL_116;
      }
LABEL_117:
      if (!v38) {
        return 0;
      }
      BOOL v36 = (char *)v38;
      goto LABEL_75;
    }
    if (!v47)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        uint64_t v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v46 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        uint64_t v41 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      id v50 = "nw_protocol_http_messaging_remove_input_handler";
      __int16 v51 = 2082;
      uint64_t v52 = (nw_protocol *)backtrace_string;
      __int16 v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_102;
    }
LABEL_103:
    free(backtrace_string);
    goto LABEL_117;
  }
  if (handle->default_input_handler != a2)
  {
    output_handler = handle[2].output_handler;
    os_log_type_t v6 = (nw_protocol *)handle[2].handle;
    uint64_t v8 = output_handler;
    if (output_handler != v6)
    {
      while (*(nw_protocol **)v8->flow_id != a2)
      {
        uint64_t v8 = (nw_protocol *)((char *)v8 + 16);
        if (v8 == v6) {
          goto LABEL_29;
        }
      }
    }
    if (v8 != v6)
    {
      p_char identifier = &v8->identifier;
      if (&v8->identifier != (nw_protocol_identifier **)v6)
      {
        unint64_t v10 = (char *)v6 - (char *)v8 - 32;
        if (v10 > 0xF)
        {
          uint64_t v11 = ((char *)v8 - (char *)output_handler) >> 4;
          uint64_t v12 = (v10 >> 4) + 1;
          uint64_t v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
          uint64_t v8 = (nw_protocol *)((char *)v8 + v13);
          uint64_t v14 = (uint64_t)(&output_handler->callbacks + 2 * v11);
          uint64_t v15 = v12 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v16 = *(void *)(v14 + 8);
            *(void *)(v14 - 24) = *(void *)(v14 - 8);
            *(void *)(v14 - 8) = v16;
            LODWORD(v16) = *(_DWORD *)(v14 + 16);
            *(_DWORD *)(v14 - 16) = *(_DWORD *)v14;
            *(_DWORD *)uint64_t v14 = v16;
            v14 += 32;
            v15 -= 2;
          }
          while (v15);
          if (v12 == (v12 & 0x1FFFFFFFFFFFFFFELL)) {
            goto LABEL_17;
          }
          p_char identifier = (nw_protocol_identifier **)((char *)p_identifier + v13);
        }
        do
        {
          *(void *)v8->flow_id = *p_identifier;
          *(_DWORD *)&v8->flow_id[8] = *((_DWORD *)p_identifier + 2);
          uint64_t v8 = (nw_protocol *)((char *)v8 + 16);
          p_identifier += 2;
        }
        while (p_identifier != (nw_protocol_identifier **)v6);
      }
LABEL_17:
      handle[2].handle = v8;
      goto LABEL_52;
    }
LABEL_29:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    id v50 = "nw_protocol_http_messaging_remove_input_handler";
    __int16 v51 = 2048;
    uint64_t v52 = a2;
    id v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v25, &type, &v47)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        __int16 v51 = 2048;
        uint64_t v52 = a2;
        BOOL v28 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_72:
        _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0x16u);
        goto LABEL_73;
      }
      goto LABEL_73;
    }
    if (!v47)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        __int16 v51 = 2048;
        uint64_t v52 = a2;
        BOOL v28 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    char v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v26 = gLogObj;
    os_log_type_t v27 = type;
    BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v29)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        __int16 v51 = 2048;
        uint64_t v52 = a2;
        BOOL v28 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446722;
      id v50 = "nw_protocol_http_messaging_remove_input_handler";
      __int16 v51 = 2048;
      uint64_t v52 = a2;
      __int16 v53 = 2082;
      __int16 v54 = v29;
      BOOL v31 = "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s";
LABEL_45:
      _os_log_impl(&dword_1830D4000, v26, v27, v31, buf, 0x20u);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  if (((uint64_t)handle[4].identifier & 0x40) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    id v50 = "nw_protocol_http_messaging_remove_input_handler";
    __int16 v51 = 2048;
    uint64_t v52 = a2;
    id v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v25, &type, &v47)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        __int16 v51 = 2048;
        uint64_t v52 = a2;
        BOOL v28 = "%{public}s Reentrantly removing default input handler %p";
        goto LABEL_72;
      }
LABEL_73:
      if (!v25) {
        return 0;
      }
      BOOL v36 = (char *)v25;
LABEL_75:
      free(v36);
      return 0;
    }
    if (!v47)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        __int16 v51 = 2048;
        uint64_t v52 = a2;
        BOOL v28 = "%{public}s Reentrantly removing default input handler %p, backtrace limit exceeded";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    char v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v26 = gLogObj;
    os_log_type_t v27 = type;
    BOOL v32 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v29)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        id v50 = "nw_protocol_http_messaging_remove_input_handler";
        __int16 v51 = 2048;
        uint64_t v52 = a2;
        BOOL v28 = "%{public}s Reentrantly removing default input handler %p, no backtrace";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446722;
      id v50 = "nw_protocol_http_messaging_remove_input_handler";
      __int16 v51 = 2048;
      uint64_t v52 = a2;
      __int16 v53 = 2082;
      __int16 v54 = v29;
      BOOL v31 = "%{public}s Reentrantly removing default input handler %p, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
LABEL_46:
    free(v29);
    goto LABEL_73;
  }
  nw_protocol_http_messaging_teardown((uint64_t)a1->handle, 89);
  uint64_t v18 = handle[2].output_handler;
  BOOL v17 = (nw_protocol *)handle[2].handle;
  unint64_t v19 = (char *)v17 - (char *)v18;
  if (v17 == v18)
  {
    uint64_t v20 = 0;
    char identifier = (char)handle[4].identifier;
  }
  else
  {
    if ((v19 & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v20 = (char *)operator new((char *)v17 - (char *)v18);
    unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF0);
    char identifier = (char)handle[4].identifier;
    if ((v19 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      if (((uint64_t)handle[4].identifier & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447234;
          id v50 = "nw_protocol_http_messaging_remove_input_handler";
          __int16 v51 = 2082;
          uint64_t v52 = (nw_protocol *)((char *)handle + 188);
          __int16 v53 = 2080;
          __int16 v54 = " ";
          __int16 v55 = 2048;
          unint64_t v56 = a2;
          __int16 v57 = 2048;
          unint64_t v58 = v19 >> 4;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfirst input handler %p bailed, restarting %zu input protocols", buf, 0x34u);
        }
      }
      uint64_t v24 = 0;
      LOBYTE(handle[4].identifier) |= 0x40u;
      do
      {
        if (*(_DWORD *)&v20[v24 + 8] != 2) {
          nw_protocol_notify(*(void **)&v20[v24], (uint64_t)handle, 22);
        }
        v24 += 16;
      }
      while (v21 != v24);
      char v33 = (char)handle[4].identifier;
      goto LABEL_50;
    }
  }
  char v33 = identifier | 0x40;
LABEL_50:
  LOBYTE(handle[4].identifier) = v33 & 0xBF;
  nw_protocol_set_input_handler((uint64_t)handle, 0);
  if (v20) {
    operator delete(v20);
  }
LABEL_52:
  if (a2->output_handler != handle)
  {
    if (!handle[2].callbacks) {
      goto LABEL_56;
    }
    return 1;
  }
  nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (handle[2].callbacks) {
    return 1;
  }
LABEL_56:
  if (handle->default_input_handler || handle[2].output_handler != handle[2].handle) {
    return 1;
  }
  if (a3) {
    char v35 = 4;
  }
  else {
    char v35 = 0;
  }
  LOBYTE(handle[4].identifier) = (uint64_t)handle[4].identifier & 0xFB | v35;
  uint64_t v34 = nw_protocol_remove_input_handler((uint64_t)handle->output_handler, (uint64_t)handle);
  if (a3)
  {
    LOBYTE(handle[4].identifier) |= 8u;
    nw_protocol_remove_instance((uint64_t)handle);
    nw_http_messaging_destroy((uint64_t)handle);
  }
  return v34;
}

uint64_t nw_protocol_http_messaging_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        BOOL v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          unint64_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          unint64_t v19 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v21) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2082;
      BOOL v31 = (nw_protocol *)backtrace_string;
      char v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    unint64_t v19 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
    goto LABEL_84;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        BOOL v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          unint64_t v19 = "%{public}s called with null http_messaging, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          unint64_t v19 = "%{public}s called with null http_messaging, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v23) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2082;
      BOOL v31 = (nw_protocol *)backtrace_string;
      char v22 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    unint64_t v19 = "%{public}s called with null http_messaging";
    goto LABEL_83;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      unint64_t v19 = "%{public}s called with null old_input_protocol";
      goto LABEL_83;
    }
    if (!v26)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        unint64_t v19 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        unint64_t v19 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (!v24) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136446466;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    __int16 v30 = 2082;
    BOOL v31 = (nw_protocol *)backtrace_string;
    char v22 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_1830D4000, v17, v18, v22, buf, 0x16u);
    goto LABEL_66;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        unint64_t v19 = "%{public}s called with null new_input_protocol";
        goto LABEL_83;
      }
LABEL_84:
      if (!v16) {
        return 0;
      }
      uint64_t v15 = (char *)v16;
      goto LABEL_30;
    }
    if (!v26)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        unint64_t v19 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        unint64_t v19 = "%{public}s called with null new_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2082;
      BOOL v31 = (nw_protocol *)backtrace_string;
      char v22 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
LABEL_66:
    free(backtrace_string);
    goto LABEL_84;
  }
  if (*((nw_protocol **)handle + 6) == a2)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a3);
    return 1;
  }
  id v7 = (nw_protocol **)*((void *)handle + 20);
  os_log_type_t v6 = (nw_protocol **)*((void *)handle + 21);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      v7 += 2;
      if (v7 == v6) {
        goto LABEL_14;
      }
    }
  }
  if (v7 != v6)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    const char *v7 = a3;
    return 1;
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  char v29 = "nw_protocol_http_messaging_replace_input_handler";
  __int16 v30 = 2048;
  BOOL v31 = a2;
  BOOL v9 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v9, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2048;
      BOOL v31 = a2;
      uint64_t v12 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_27:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0x16u);
      goto LABEL_28;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2048;
      BOOL v31 = a2;
      uint64_t v12 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
      goto LABEL_27;
    }
    uint64_t v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v10 = gLogObj;
    os_log_type_t v11 = type;
    BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2048;
      BOOL v31 = a2;
      uint64_t v12 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
      goto LABEL_27;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2048;
      BOOL v31 = a2;
      __int16 v32 = 2082;
      char v33 = v13;
      _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v13);
  }
LABEL_28:
  if (v9)
  {
    uint64_t v15 = (char *)v9;
LABEL_30:
    free(v15);
  }
  return 0;
}

uint64_t nw_protocol_http_messaging_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49)) {
      goto LABEL_102;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_102;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v41 = "%{public}s called with null protocol";
      goto LABEL_101;
    }
    if (!v49)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_102;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v43 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_101;
      }
      goto LABEL_102;
    }
    if (!v43) {
      goto LABEL_80;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    __int16 v53 = 2082;
    __int16 v54 = (nw_protocol *)backtrace_string;
    __int16 v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_79:
    _os_log_impl(&dword_1830D4000, v39, v40, v44, buf, 0x16u);
    goto LABEL_80;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49)) {
      goto LABEL_102;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_102;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v41 = "%{public}s called with null http_messaging";
      goto LABEL_101;
    }
    if (!v49)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_102;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v41 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v41 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_101;
      }
      goto LABEL_102;
    }
    if (!v45) {
      goto LABEL_80;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    __int16 v53 = 2082;
    __int16 v54 = (nw_protocol *)backtrace_string;
    __int16 v44 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_79;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49)) {
      goto LABEL_102;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_102;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v41 = "%{public}s called with null input_protocol";
      goto LABEL_101;
    }
    if (!v49)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_102;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v41 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v46 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v41 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_101;
      }
      goto LABEL_102;
    }
    if (!v46) {
      goto LABEL_80;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    __int16 v53 = 2082;
    __int16 v54 = (nw_protocol *)backtrace_string;
    __int16 v44 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_79;
  }
  if (!*((void *)handle + 19))
  {
    id v7 = (nw_protocol *)*((void *)handle + 6);
    if (v7)
    {
      if (v7 != a2)
      {
        BOOL v9 = (char *)*((void *)handle + 21);
        unint64_t v8 = *((void *)handle + 22);
        if ((unint64_t)v9 >= v8)
        {
          BOOL v23 = (char *)*((void *)handle + 20);
          uint64_t v24 = (v9 - v23) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            abort();
          }
          uint64_t v26 = v8 - (void)v23;
          if (v26 >> 3 > v25) {
            unint64_t v25 = v26 >> 3;
          }
          BOOL v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          if (!v27) {
            unint64_t v28 = v25;
          }
          if (v28 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v29 = 16 * v28;
          __int16 v30 = (char *)operator new(16 * v28);
          BOOL v31 = &v30[16 * v24];
          __int16 v32 = &v30[v29];
          *(void *)BOOL v31 = a2;
          *((_DWORD *)v31 + 2) = 0;
          unint64_t v10 = v31 + 16;
          if (v9 == v23)
          {
            char v33 = &v30[16 * v24];
          }
          else
          {
            do
            {
              char v33 = v31 - 16;
              *((_OWORD *)v31 - 1) = *((_OWORD *)v9 - 1);
              v9 -= 16;
              v31 -= 16;
            }
            while (v9 != v23);
          }
          *((void *)handle + 20) = v33;
          *((void *)handle + 21) = v10;
          *((void *)handle + 22) = v32;
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(void *)BOOL v9 = a2;
          *((_DWORD *)v9 + 2) = 0;
          unint64_t v10 = v9 + 16;
        }
        *((void *)handle + 21) = v10;
        if (a2->output_handler)
        {
LABEL_42:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v36 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
            _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
          }
          return 1;
        }
LABEL_19:
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
        return 1;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      __int16 v53 = 2048;
      __int16 v54 = a2;
      unint64_t v19 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v49 = 0;
      if (!__nwlog_fault(v19, &type, &v49)) {
        goto LABEL_50;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
          __int16 v53 = 2048;
          __int16 v54 = a2;
          char v22 = "%{public}s Adding the same input handler more than once to messaging %p";
LABEL_49:
          _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0x16u);
        }
      }
      else if (v49)
      {
        uint64_t v34 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = gLogObj;
        os_log_type_t v21 = type;
        BOOL v35 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v34)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
            __int16 v53 = 2048;
            __int16 v54 = a2;
            __int16 v55 = 2082;
            unint64_t v56 = v34;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s Adding the same input handler more than once to messaging %p, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v34);
          goto LABEL_50;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
          __int16 v53 = 2048;
          __int16 v54 = a2;
          char v22 = "%{public}s Adding the same input handler more than once to messaging %p, no backtrace";
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
          __int16 v53 = 2048;
          __int16 v54 = a2;
          char v22 = "%{public}s Adding the same input handler more than once to messaging %p, backtrace limit exceeded";
          goto LABEL_49;
        }
      }
LABEL_50:
      if (!v19) {
        return 0;
      }
      int v37 = (char *)v19;
LABEL_52:
      free(v37);
      return 0;
    }
    nw_protocol_set_input_handler((uint64_t)a1->handle, (uint64_t)a2);
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      uint64_t v12 = nw_parameters_copy_protocol_options_legacy(parameters, a1);
      if (v12)
      {
        uint64_t v13 = v12;
        BOOL v14 = v13;
        uint64_t v15 = 0;
        handle[188] = 0;
        uint64_t v16 = handle + 188;
        unint64_t v17 = 84;
        while (1)
        {
          int v18 = v13[v15 + 48];
          v16[v15] = v18;
          if (!v18) {
            break;
          }
          --v17;
          ++v15;
          if (v17 <= 1)
          {
            v16[v15] = 0;
            break;
          }
        }

        os_release(v14);
        if (a2->output_handler) {
          goto LABEL_42;
        }
        goto LABEL_19;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      BOOL v38 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v49 = 0;
      if (!__nwlog_fault(v38, &type, &v49)) {
        goto LABEL_102;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
          uint64_t v41 = "%{public}s called with null options";
          goto LABEL_101;
        }
LABEL_102:
        if (!v38) {
          return 0;
        }
        int v37 = (char *)v38;
        goto LABEL_52;
      }
      if (!v49)
      {
        BOOL v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v41 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v48 = os_log_type_enabled(v39, type);
      if (!backtrace_string)
      {
        if (!v48) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v41 = "%{public}s called with null options, no backtrace";
        goto LABEL_101;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        __int16 v53 = 2082;
        __int16 v54 = (nw_protocol *)backtrace_string;
        __int16 v44 = "%{public}s called with null options, dumping backtrace:%{public}s";
        goto LABEL_79;
      }
LABEL_80:
      free(backtrace_string);
      goto LABEL_102;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49)) {
      goto LABEL_102;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v49)
      {
        BOOL v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v41 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v47 = os_log_type_enabled(v39, type);
      if (!backtrace_string)
      {
        if (!v47) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v41 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_101;
      }
      if (!v47) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
      __int16 v53 = 2082;
      __int16 v54 = (nw_protocol *)backtrace_string;
      __int16 v44 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_79;
    }
    BOOL v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    if (!os_log_type_enabled(v39, type)) {
      goto LABEL_102;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v52 = "nw_protocol_http_messaging_add_input_handler";
    uint64_t v41 = "%{public}s called with null parameters";
LABEL_101:
    _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
    goto LABEL_102;
  }
  uint64_t v5 = a1->handle;

  return nw_http_messaging_add_to_version_specific_protocol((uint64_t)v5, (uint64_t)a2);
}

double __nw_protocol_http_messaging_identifier_block_invoke()
{
  strcpy((char *)nw_protocol_http_messaging_identifier::protocol_identifier, "http_messaging");
  *(void *)&double result = 0x200000004;
  qword_1E8F6B710 = 0x200000004;
  return result;
}

uint64_t nw_http_field_name_find_well_known(unint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = (a1 - (unint64_t)":method") >> 5;
    if (((a1 - (void)":method") & 0x1F) != 0) {
      LODWORD(v1) = -1;
    }
    if (a1 <= (unint64_t)"Multipath") {
      unsigned int v2 = v1;
    }
    else {
      unsigned int v2 = -1;
    }
    if (a1 >= (unint64_t)":method") {
      return v2;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    uint64_t v5 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
    }
    else
    {
      free(v5);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t nw_http_is_valid_token_char(unsigned __int8 a1)
{
  int v1 = a1;
  if (a1 - 48 < 0xA || (a1 & 0xDFu) - 65 < 0x1A) {
    return 1;
  }
  uint64_t result = 1;
  switch(v1)
  {
    case '!':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '*':
    case '+':
    case '-':
    case '.':
    case '^':
    case '_':
    case '|':
    case '~':
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t nw_http_field_name_is_valid(unsigned __int8 *a1, char *a2)
{
  if (a1)
  {
    unint64_t v4 = a1 - ":method";
    BOOL v5 = a1 < ":method" || a1 > "Multipath";
    if (!v5 && (v4 & 0x1F) == 0 && (v4 >> 5) != -1)
    {
LABEL_13:
      if (a2)
      {
        char v9 = 0;
LABEL_15:
        *a2 = v9;
      }
      return 1;
    }
  }
  else
  {
    uint64_t v12 = __nwlog_obj();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    uint64_t v13 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v13);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v13);
    if (nw_http_field_name_find_well_known(0) != -1) {
      goto LABEL_13;
    }
  }
  unsigned __int8 v8 = *a1;
  os_log_type_t v6 = a1 + 1;
  unsigned __int8 v7 = v8;
  char v9 = 1;
  while (1)
  {
    uint64_t result = nw_http_is_valid_token_char(v7);
    if (!result) {
      return result;
    }
    v9 &= (v7 - 91) < 0xE6u;
    int v11 = *v6++;
    unsigned __int8 v7 = v11;
    if (!v11)
    {
      if (a2) {
        goto LABEL_15;
      }
      return 1;
    }
  }
}

BOOL nw_http_field_value_is_valid(unsigned char *a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (*a1) {
      goto LABEL_3;
    }
    return 1;
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (result)
  {
    __break(1u);
    return result;
  }
  free(v9);
  int v2 = MEMORY[0];
  if (!MEMORY[0]) {
    return 1;
  }
LABEL_3:
  if (v2 != 9 && v2 != 32)
  {
    unint64_t v4 = a1 - 1;
    while (1)
    {
      BOOL v5 = (v2 - 33) < 0x5E || v2 == 9;
      if (!v5 && v2 != 32 && (v2 & 0x80) == 0) {
        break;
      }
      int v2 = v4[2];
      ++v4;
      if (!v2)
      {
        int v6 = *v4;
        return v6 != 9 && v6 != 32;
      }
    }
  }
  return 0;
}

uint64_t nw_http_field_has_name(uint64_t a1, unint64_t a2)
{
  if (a1)
  {
    if (a2) {
      return _nw_http_field_has_name(a1, a2);
    }
  }
  else
  {
    BOOL v5 = __nwlog_obj();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    int v6 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v6);
    if (result) {
      goto LABEL_8;
    }
    free(v6);
    if (a2) {
      return _nw_http_field_has_name(a1, a2);
    }
  }
  unsigned __int8 v7 = __nwlog_obj();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    return _nw_http_field_has_name(a1, a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t nw_http_field_set_value(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      return _nw_http_field_set_value();
    }
  }
  else
  {
    unint64_t v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    BOOL v5 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v5);
    if (result) {
      goto LABEL_8;
    }
    free(v5);
    if (a2) {
      return _nw_http_field_set_value();
    }
  }
  int v6 = __nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    return _nw_http_field_set_value();
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_field_access(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
LABEL_3:
      _nw_http_field_access(a1, v4);

      return;
    }
  }
  else
  {
    BOOL v5 = __nwlog_obj();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    int v6 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v6)) {
      goto LABEL_8;
    }
    free(v6);
    if (v4) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v7 = __nwlog_obj();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v8))
  {
    free(v8);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_field_access_canonical(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
LABEL_3:
      _nw_http_field_access_canonical(a1, v4);

      return;
    }
  }
  else
  {
    BOOL v5 = __nwlog_obj();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    int v6 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v6)) {
      goto LABEL_8;
    }
    free(v6);
    if (v4) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v7 = __nwlog_obj();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v8))
  {
    free(v8);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

uint64_t nw_http_field_set_indexing_strategy(uint64_t a1, unsigned int a2)
{
  if (a1) {
    return _nw_http_field_set_indexing_strategy(a1, a2);
  }
  BOOL v5 = __nwlog_obj();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  int v6 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
    return _nw_http_field_set_indexing_strategy(a1, a2);
  }
  __break(1u);
  return result;
}

uint64_t nw_http_field_get_indexing_strategy(uint64_t a1)
{
  if (a1) {
    return _nw_http_field_get_indexing_strategy(a1);
  }
  id v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  unint64_t v4 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return _nw_http_field_get_indexing_strategy(a1);
  }
  __break(1u);
  return result;
}

BOOL nw_http_fields_copy(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  unint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  BOOL v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_fields_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  int v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_fields_get_count(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  BOOL v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t count = _nw_http_fields_get_count();

    return count;
  }
  __break(1u);
  return result;
}

void nw_http_fields_append(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (!v5)
  {
    int v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_11;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v9)) {
      goto LABEL_11;
    }
    free(v9);
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (a3)
  {
LABEL_4:
    _nw_http_fields_append(v5, a2, a3);

    return;
  }
LABEL_9:
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  int v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
}

void nw_http_fields_set_value_by_name(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (!v5)
  {
    int v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_11;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v9)) {
      goto LABEL_11;
    }
    free(v9);
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (a3)
  {
LABEL_4:
    _nw_http_fields_set_value_by_name(v5, a2, a3);

    return;
  }
LABEL_9:
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  int v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
}

void nw_http_fields_remove_by_name(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_fields_remove_by_name(v3, a2);

      return;
    }
  }
  else
  {
    id v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v5)) {
      goto LABEL_8;
    }
    free(v5);
    if (a2) {
      goto LABEL_3;
    }
  }
  int v6 = __nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_fields_remove(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_fields_remove((uint64_t)v3, a2);

    return;
  }
  __break(1u);
}

BOOL nw_http_fields_copy_value_by_name(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t v4 = _nw_http_fields_copy_value_by_name(v3, a2);

      return v4;
    }
  }
  else
  {
    int v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_fields_have_field_with_name(void *a1, unint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v3, a2);

      return have_field_with_name;
    }
  }
  else
  {
    int v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_fields_append_advanced(void *a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *a6)
{
  id v11 = a1;
  id v12 = a6;
  if (v11)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v15 = __nwlog_obj();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    uint64_t v16 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v16)) {
      goto LABEL_14;
    }
    free(v16);
    if (a4) {
      goto LABEL_4;
    }
LABEL_10:
    unint64_t v17 = __nwlog_obj();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    int v18 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v18)) {
      goto LABEL_14;
    }
    free(v18);
    if (v12) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  uint64_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  BOOL v14 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v14)) {
    goto LABEL_14;
  }
  free(v14);
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_10;
  }
LABEL_4:
  if (v12)
  {
LABEL_5:
    _nw_http_fields_append_advanced((uint64_t)v11, a2, a3, a4, a5, v12);

    return;
  }
LABEL_12:
  unint64_t v19 = __nwlog_obj();
  os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
  uint64_t v20 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v20))
  {
    free(v20);
    goto LABEL_5;
  }
LABEL_14:
  __break(1u);
}

void nw_http_fields_access_value_by_name(void *a1, unint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    unsigned __int8 v7 = __nwlog_obj();
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v8)) {
      goto LABEL_11;
    }
    free(v8);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    char v9 = __nwlog_obj();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    unint64_t v10 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v10)) {
      goto LABEL_11;
    }
    free(v10);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (v6)
  {
LABEL_4:
    _nw_http_fields_access_value_by_name((uint64_t)v5, a2, v6);

    return;
  }
LABEL_9:
  id v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  id v12 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v12))
  {
    free(v12);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
}

void nw_http_fields_access_field(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  unsigned __int8 v7 = v6;
  if (v5)
  {
    if (v6)
    {
LABEL_3:
      _nw_http_fields_access_field((uint64_t)v5, a2, v7);

      return;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v9)) {
      goto LABEL_8;
    }
    free(v9);
    if (v7) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_fields_enumerate_by_name(void *a1, unint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    char v9 = __nwlog_obj();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    unint64_t v10 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v10);
    if (result) {
      goto LABEL_11;
    }
    free(v10);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    id v11 = __nwlog_obj();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    id v12 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v12);
    if (result) {
      goto LABEL_11;
    }
    free(v12);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (v6)
  {
LABEL_4:
    unint64_t v7 = _nw_http_fields_enumerate_by_name((uint64_t)v5, a2, v6);

    return v7;
  }
LABEL_9:
  uint64_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  BOOL v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
  return result;
}

BOOL nw_http_fields_enumerate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_fields_enumerate((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_fields_enumerate_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_fields_enumerate_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_fields_enumerate_const_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_fields_enumerate_const_field((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

uint64_t nw_http_request_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    return _nw_http_request_create(a1, a2, a3, a4);
  }
  char v9 = __nwlog_obj();
  os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  unint64_t v10 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v10);
  if (!result)
  {
    free(v10);
    return _nw_http_request_create(a1, a2, a3, a4);
  }
  __break(1u);
  return result;
}

uint64_t nw_http_request_create_from_url(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      return _nw_http_request_create_from_url(a1, a2);
    }
  }
  else
  {
    id v5 = __nwlog_obj();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    uint64_t v6 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v6);
    if (result) {
      goto LABEL_8;
    }
    free(v6);
    if (a2) {
      return _nw_http_request_create_from_url(a1, a2);
    }
  }
  unint64_t v7 = __nwlog_obj();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    return _nw_http_request_create_from_url(a1, a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_copy(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_request_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_has_method(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t has_method = _nw_http_request_has_method((uint64_t)v3);

      return has_method;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_request_set_method(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_request_set_method(v3, a2);

      return;
    }
  }
  else
  {
    id v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v5)) {
      goto LABEL_8;
    }
    free(v5);
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = __nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unint64_t v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_set_scheme(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_scheme(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_set_authority(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_authority(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_set_path(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_path(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_set_extended_connect_protocol(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_extended_connect_protocol(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_access_method(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_method((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_scheme(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_scheme((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_authority(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_authority((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_path(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_path((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_method_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_method_field((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_request_access_scheme_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_scheme_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_access_authority_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_authority_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_access_path_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_path_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_access_extended_connect_protocol_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_extended_connect_protocol_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_request_set_url(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_request_set_url(v3, a2);

      return;
    }
  }
  else
  {
    id v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v5)) {
      goto LABEL_8;
    }
    free(v5);
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = __nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unint64_t v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_request_copy_url(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_request_copy_url(v1);

    return v2;
  }
  __break(1u);
  return result;
}

void nw_http_request_set_header_fields(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_set_header_fields((uint64_t)v3, (uint64_t)v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_request_copy_header_fields(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_request_copy_header_fields((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

uint64_t nw_http_response_create_well_known(uint64_t a1)
{
  if (a1 == 507) {
    return _nw_http_response_create(a1, "Insufficient Storage");
  }
  else {
    return _nw_http_response_create_well_known(a1);
  }
}

BOOL nw_http_response_copy(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_response_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_response_set_status_code(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_response_set_status_code(v3, a2);

    return;
  }
  __break(1u);
}

BOOL nw_http_response_get_status_code(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t status_code = _nw_http_response_get_status_code();

    return status_code;
  }
  __break(1u);
  return result;
}

void nw_http_response_set_reason_phrase(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_response_set_reason_phrase(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_response_access_reason_phrase(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_access_reason_phrase((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_response_access_status_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_access_status_field((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_response_set_header_fields(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_set_header_fields((uint64_t)v3, (uint64_t)v5);

      return;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7)) {
      goto LABEL_8;
    }
    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_response_copy_header_fields(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_response_copy_header_fields((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_request(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_parsed_fields_copy_request(v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_response(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_parsed_fields_copy_response(v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_trailer_fields(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_parsed_fields_copy_trailer_fields(v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_fields_legacy_serialize(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t v4 = _nw_http_fields_legacy_serialize(v3, a2);

      return v4;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }
  unsigned __int8 v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t nw_http_request_create_from_url_request(void *a1)
{
  if (a1) {
    return _nw_http_request_create_from_url_request(a1);
  }
  id v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return _nw_http_request_create_from_url_request(a1);
  }
  __break(1u);
  return result;
}

BOOL nw_http_request_copy_url_request(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  if (v5)
  {
    if (a2)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_copy_url_request((uint64_t)v5, a2, a3);

      return v6;
    }
  }
  else
  {
    unsigned __int8 v8 = __nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (a2) {
      goto LABEL_3;
    }
  }
  unint64_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_response_copy_url_response(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  if (v7)
  {
    if (a4)
    {
LABEL_3:
      uint64_t v9 = _nw_http_response_copy_url_response((uint64_t)v7, (uint64_t)v8, a3, a4);

      return v9;
    }
  }
  else
  {
    id v11 = __nwlog_obj();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    id v12 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v12);
    if (result) {
      goto LABEL_8;
    }
    free(v12);
    if (a4) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  BOOL v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_183C4D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_validate_bundle_id(NWConcrete_nw_application_id *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (void *)NEHelperCacheCopyAppUUIDMappingExtended();
  id v3 = v2;
  if (v2 && object_getClass(v2) == (Class)MEMORY[0x1E4F14568] && xpc_array_get_count(v3))
  {
    *((_OWORD *)v1 + 1) = *(_OWORD *)xpc_array_get_uuid(v3, 0);
    uint64_t v6 = 1;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *((void *)v1 + 10);
      int v8 = 136446466;
      uint64_t v9 = "nw_application_id_validate_bundle_id";
      __int16 v10 = 2082;
      uint64_t v11 = v5;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s Failed to convert from bundle ID (%{public}s) to UUID.", (uint8_t *)&v8, 0x16u);
    }

    uint64_t v6 = 0;
  }

  return v6;
}

void sub_183C4DDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_application_id_create_with_bundle_id(const char *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], buf, 0, a1, 0);
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
        uint64_t v6 = "%{public}s called with null bundle_id";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null bundle_id, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
        uint64_t v6 = "%{public}s called with null bundle_id, no backtrace";
        goto LABEL_17;
      }
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
        uint64_t v6 = "%{public}s called with null bundle_id, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v3) {
    free(v3);
  }
  return 0;
}

BOOL nw_application_id_create_with_external_bundle_id(const char *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], buf, 0, a1, 1);
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
        uint64_t v6 = "%{public}s called with null bundle_id";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null bundle_id, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
        uint64_t v6 = "%{public}s called with null bundle_id, no backtrace";
        goto LABEL_17;
      }
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
        uint64_t v6 = "%{public}s called with null bundle_id, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_application_id_set_persona(void *a1, _OWORD *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(_OWORD *)(v3 + 88) = *a2;
      uint64_t v5 = 1;
      goto LABEL_4;
    }
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_application_id_set_persona";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null persona", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v20)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null persona, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null persona, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v23 = "nw_application_id_set_persona";
        __int16 v24 = 2082;
        unint64_t v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null persona, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_application_id_set_persona";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v20)
      {
        char v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v23 = "nw_application_id_set_persona";
        __int16 v24 = 2082;
        unint64_t v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_4:

  return v5;
}

uint64_t nw_application_id_delegate_socket(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_application_id_delegate_socket";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(uu) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v6, &uu, &type)) {
      goto LABEL_24;
    }
    if (uu == 17)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = uu;
      if (os_log_type_enabled(v17, (os_log_type_t)uu))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = __nwlog_obj();
      os_log_type_t v20 = uu;
      BOOL v21 = os_log_type_enabled(v17, (os_log_type_t)uu);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v27 = "nw_application_id_delegate_socket";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_24:
        if (v6) {
LABEL_25:
        }
          free(v6);
LABEL_26:
        uint64_t v9 = 0;
        goto LABEL_27;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v22 = uu;
      if (os_log_type_enabled(v17, (os_log_type_t)uu))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_24;
  }
  long long uu = 0uLL;
  nw_application_id_get_uuid(v3, &uu);
  if (uuid_is_null((const unsigned __int8 *)&uu))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_application_id_delegate_socket";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v6, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s Passed UUID is null", buf, 0xCu);
        }
      }
      else if (v23)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v27 = "nw_application_id_delegate_socket";
            __int16 v28 = 2082;
            uint64_t v29 = v11;
            _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s Passed UUID is null, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          if (!v6) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s Passed UUID is null, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s Passed UUID is null, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    goto LABEL_24;
  }
  if (!setsockopt(a2, 0xFFFF, 4360, &uu, 0x10u)) {
    goto LABEL_26;
  }
  uint64_t v9 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    BOOL v27 = "nw_application_id_delegate_socket";
    __int16 v28 = 1024;
    LODWORD(v29) = a2;
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s Setting delegate socket uuid failed for fd: %u", buf, 0x12u);
  }

LABEL_27:
  return v9;
}

void sub_183C4ED4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  if (v3 && v4)
  {
    if (v3[2] != v4[2])
    {
      uint64_t v6 = 0;
      goto LABEL_10;
    }
    BOOL v5 = v3[3] == v4[3];
  }
  else
  {
    BOOL v5 = v3 == v4;
  }
  uint64_t v6 = v5;
LABEL_10:

  return v6;
}

void nw_application_id_get_audit_token(void *a1, _OWORD *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_application_id_get_audit_token";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v24 = "nw_application_id_get_audit_token";
          __int16 v25 = 2082;
          uint64_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8) {
          goto LABEL_8;
        }
LABEL_43:
        free(v8);
        goto LABEL_8;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (a2)
  {
    if (*(void *)(v3 + 108) | *(void *)(v3 + 116) | *(void *)(v3 + 124) | *(void *)(v3 + 132))
    {
      long long v5 = *(_OWORD *)(v3 + 124);
      *a2 = *(_OWORD *)(v3 + 108);
      a2[1] = v5;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_application_id_get_audit_token";
        __int16 v25 = 2112;
        uint64_t v26 = v4;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %@ has no audit token", buf, 0x16u);
      }
    }
    goto LABEL_8;
  }
  uint64_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v24 = "nw_application_id_get_audit_token";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null out_audit_token", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v21)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null out_audit_token, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null out_audit_token, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v24 = "nw_application_id_get_audit_token";
    __int16 v25 = 2082;
    uint64_t v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null out_audit_token, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t nw_application_id_get_bundle_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 10);
    goto LABEL_3;
  }
  long long v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_application_id_get_bundle_id";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_application_id_get_bundle_id";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parallel_array_create()
{
  objc_opt_class();
  uint64_t v0 = _os_object_alloc();
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  uint64_t v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    atomic_store(0, (unsigned __int8 *)(v0 + 64));
    return v0;
  }
  __break(1u);
  return result;
}

void nw_parallel_array_append(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_parallel_array_append";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_parallel_array_append";
      os_log_type_t v16 = "%{public}s called with null parray";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v24 = "nw_parallel_array_append";
          __int16 v25 = 2082;
          uint64_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_47:
        if (v9) {
          goto LABEL_6;
        }
        return;
      }
      if (!v18) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_parallel_array_append";
      os_log_type_t v16 = "%{public}s called with null parray, no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_parallel_array_append";
      os_log_type_t v16 = "%{public}s called with null parray, backtrace limit exceeded";
    }
LABEL_46:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
    goto LABEL_47;
  }
  uint64_t v4 = a1 + 16;
  uint64_t v5 = a1 + 40;
  if (*(void *)(a1 + 24) - *(void *)(a1 + 16) != *(void *)(a1 + 48) - *(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_parallel_array_append";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_parallel_array_append";
      os_log_type_t v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    }
    else if (v21)
    {
      uint64_t v19 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (v19)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v24 = "nw_parallel_array_append";
          __int16 v25 = 2082;
          uint64_t v26 = v19;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v19);
        if (v9) {
          goto LABEL_6;
        }
        return;
      }
      if (!v20) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_parallel_array_append";
      os_log_type_t v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_parallel_array_append";
      os_log_type_t v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    }
    goto LABEL_46;
  }
  if ((unint64_t)nw_parallel_array_get_count((void *)a1) > 0xFFFFFFFFFFFFFFFDLL
    || (int v8 = a1 + 64, LOBYTE(v8) = atomic_load_explicit((atomic_uchar *volatile)(a1 + 64), memory_order_acquire), v8))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_parallel_array_append";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v9))
    {
LABEL_6:
      free(v9);
      return;
    }
    __break(1u);
  }
  else
  {
    os_log_type_t v10 = *(void ***)(a1 + 24);
    if ((unint64_t)v10 >= *(void *)(a1 + 32))
    {
      BOOL v11 = std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(v4, a2);
    }
    else
    {
      if (a2) {
        *os_log_type_t v10 = os_retain(a2);
      }
      else {
        *os_log_type_t v10 = 0;
      }
      BOOL v11 = v10 + 1;
    }
    *(void *)(a1 + 24) = v11;
    os_log_type_t v12 = *(void **)(a1 + 48);
    if ((unint64_t)v12 >= *(void *)(a1 + 56))
    {
      *(void *)(a1 + 48) = std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(v5, a3);
    }
    else
    {
      if (a3) {
        char v13 = os_retain(a3);
      }
      else {
        char v13 = 0;
      }
      void *v12 = v13;
      *(void *)(a1 + 48) = v12 + 1;
    }
  }
}

uint64_t nw_parallel_array_get_count(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v14 = "nw_parallel_array_get_count";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      uint64_t v6 = "%{public}s called with null parray";
    }
    else
    {
      if (!v11)
      {
        uint64_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parallel_array_get_count";
        uint64_t v6 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_parallel_array_get_count";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3) {
          return 0;
        }
        goto LABEL_33;
      }
      if (!v8) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      uint64_t v6 = "%{public}s called with null parray, no backtrace";
    }
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_32;
  }
  uint64_t result = (uint64_t)(a1[3] - a1[2]) >> 3;
  if (result != (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v14 = "nw_parallel_array_get_count";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      uint64_t v6 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_31;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      uint64_t v6 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_31;
    }
    uint64_t v9 = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!v9)
    {
      if (!v10) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      uint64_t v6 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
      goto LABEL_31;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      __int16 v15 = 2082;
      os_log_type_t v16 = v9;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v9);
LABEL_32:
    if (!v3) {
      return 0;
    }
LABEL_33:
    free(v3);
    return 0;
  }
  return result;
}

void nw_parallel_array_get_at_index(void *a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v14, &type, &v25)) {
      goto LABEL_78;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        __int16 v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (!v19) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null parray, no backtrace";
        goto LABEL_77;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2082;
        uint64_t v30 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_78:
      if (v14) {
        goto LABEL_79;
      }
      return;
    }
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    uint64_t v17 = "%{public}s called with null parray";
    goto LABEL_77;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v14, &type, &v25)) {
      goto LABEL_78;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        __int16 v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null first, backtrace limit exceeded";
        goto LABEL_77;
      }
      BOOL v20 = (char *)__nw_create_backtrace_string();
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null first, no backtrace";
        goto LABEL_77;
      }
      if (!v21) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v28 = "nw_parallel_array_get_at_index";
      __int16 v29 = 2082;
      uint64_t v30 = v20;
      os_log_type_t v22 = "%{public}s called with null first, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    uint64_t v17 = "%{public}s called with null first";
LABEL_77:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_78;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v14, &type, &v25)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_parallel_array_get_at_index";
      uint64_t v17 = "%{public}s called with null second";
      goto LABEL_77;
    }
    if (!v25)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_parallel_array_get_at_index";
      uint64_t v17 = "%{public}s called with null second, backtrace limit exceeded";
      goto LABEL_77;
    }
    BOOL v20 = (char *)__nw_create_backtrace_string();
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_parallel_array_get_at_index";
      uint64_t v17 = "%{public}s called with null second, no backtrace";
      goto LABEL_77;
    }
    if (!v23) {
      goto LABEL_59;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v28 = "nw_parallel_array_get_at_index";
    __int16 v29 = 2082;
    uint64_t v30 = v20;
    os_log_type_t v22 = "%{public}s called with null second, dumping backtrace:%{public}s";
LABEL_58:
    _os_log_impl(&dword_1830D4000, v15, v16, v22, buf, 0x16u);
    goto LABEL_59;
  }
  *a3 = 0;
  *a4 = 0;
  uint64_t v4 = a1[2];
  unint64_t v5 = (a1[3] - v4) >> 3;
  if (v5 == (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    if (v5 > a2)
    {
      *a3 = *(void *)(v4 + 8 * a2);
      *a4 = *(void *)(a1[5] + 8 * a2);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    __int16 v28 = "nw_parallel_array_get_at_index";
    __int16 v29 = 2048;
    uint64_t v30 = (char *)a2;
    id v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2048;
        uint64_t v30 = (char *)a2;
        BOOL v10 = "%{public}s array index out of range: %lu";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0x16u);
      }
    }
    else if (v25)
    {
      char v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          __int16 v28 = "nw_parallel_array_get_at_index";
          __int16 v29 = 2048;
          uint64_t v30 = (char *)a2;
          __int16 v31 = 2082;
          __int16 v32 = v11;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s array index out of range: %lu, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v11);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2048;
        uint64_t v30 = (char *)a2;
        BOOL v10 = "%{public}s array index out of range: %lu, no backtrace";
        goto LABEL_20;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2048;
        uint64_t v30 = (char *)a2;
        BOOL v10 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:
    if (!v7) {
      return;
    }
    char v13 = (char *)v7;
    goto LABEL_23;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v28 = "nw_parallel_array_get_at_index";
  os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v14, &type, &v25)) {
    goto LABEL_78;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    uint64_t v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    goto LABEL_77;
  }
  if (!v25)
  {
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    uint64_t v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    goto LABEL_77;
  }
  BOOL v20 = (char *)__nw_create_backtrace_string();
  __int16 v15 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v24 = os_log_type_enabled(v15, type);
  if (!v20)
  {
    if (!v24) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    uint64_t v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_77;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v28 = "nw_parallel_array_get_at_index";
    __int16 v29 = 2082;
    uint64_t v30 = v20;
    os_log_type_t v22 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
    goto LABEL_58;
  }
LABEL_59:
  free(v20);
  if (v14)
  {
LABEL_79:
    char v13 = (char *)v14;
LABEL_23:
    free(v13);
  }
}

void nw_parallel_array_remove_at_index(uint64_t a1, unint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_parallel_array_remove_at_index";
    uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v6, &type, &v37)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_parallel_array_remove_at_index";
      __int16 v32 = "%{public}s called with null parray";
LABEL_75:
      _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
      goto LABEL_76;
    }
    if (!v37)
    {
      uint64_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_parallel_array_remove_at_index";
      __int16 v32 = "%{public}s called with null parray, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v34 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_parallel_array_remove_at_index";
      __int16 v32 = "%{public}s called with null parray, no backtrace";
      goto LABEL_75;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_parallel_array_remove_at_index";
      __int16 v41 = 2082;
      uint64_t v42 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_76:
    if (!v6) {
      return;
    }
LABEL_6:
    id v7 = (char *)v6;
LABEL_46:
    free(v7);
    return;
  }
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  if (v3 == (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3)
  {
    if (v3 > a2)
    {
      int v5 = a1 + 64;
      LOBYTE(v5) = atomic_load_explicit((atomic_uchar *volatile)(a1 + 64), memory_order_acquire);
      if (v5)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_parallel_array_remove_at_index";
        uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v6))
        {
          __break(1u);
          return;
        }
        goto LABEL_6;
      }
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v15 = *(void *)(a1 + 16) + 8 * a2;
      uint64_t v16 = v15 + 8;
      if (v15 + 8 == v14)
      {
        if (v16 == v15) {
          goto LABEL_27;
        }
      }
      else
      {
        do
        {
          if (*(void *)v15) {
            os_release(*(void **)v15);
          }
          uint64_t v17 = v15 + 8;
          *(void *)uint64_t v15 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          uint64_t v18 = v15 + 16;
          v15 += 8;
        }
        while (v18 != v14);
        uint64_t v16 = *(void *)(a1 + 24);
        uint64_t v15 = v17;
        if (v16 == v17)
        {
LABEL_27:
          *(void *)(a1 + 24) = v15;
          uint64_t v22 = *(void *)(a1 + 48);
          uint64_t v23 = *(void *)(a1 + 40) + 8 * a2;
          uint64_t v24 = v23 + 8;
          if (v23 + 8 == v22)
          {
            if (v24 == v23)
            {
LABEL_38:
              *(void *)(a1 + 48) = v23;
              return;
            }
          }
          else
          {
            do
            {
              if (*(void *)v23) {
                os_release(*(void **)v23);
              }
              uint64_t v25 = v23 + 8;
              *(void *)uint64_t v23 = *(void *)(v23 + 8);
              *(void *)(v23 + 8) = 0;
              uint64_t v26 = v23 + 16;
              v23 += 8;
            }
            while (v26 != v22);
            uint64_t v24 = *(void *)(a1 + 48);
            uint64_t v23 = v25;
            if (v24 == v25) {
              goto LABEL_38;
            }
          }
          uint64_t v27 = v24;
          do
          {
            __int16 v29 = *(void **)(v27 - 8);
            v27 -= 8;
            __int16 v28 = v29;
            if (v29) {
              os_release(v28);
            }
            *(void *)(v24 - 8) = 0;
            uint64_t v24 = v27;
          }
          while (v27 != v23);
          goto LABEL_38;
        }
      }
      uint64_t v19 = v16;
      do
      {
        BOOL v21 = *(void **)(v19 - 8);
        v19 -= 8;
        BOOL v20 = v21;
        if (v21) {
          os_release(v20);
        }
        *(void *)(v16 - 8) = 0;
        uint64_t v16 = v19;
      }
      while (v19 != v15);
      goto LABEL_27;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    os_log_type_t v40 = "nw_parallel_array_remove_at_index";
    __int16 v41 = 2048;
    uint64_t v42 = (char *)a2;
    BOOL v8 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v8, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_parallel_array_remove_at_index";
          __int16 v41 = 2048;
          uint64_t v42 = (char *)a2;
          char v11 = "%{public}s array index out of range: %lu";
LABEL_43:
          _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0x16u);
        }
      }
      else if (v37)
      {
        BOOL v12 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = gLogObj;
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v12)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v40 = "nw_parallel_array_remove_at_index";
            __int16 v41 = 2048;
            uint64_t v42 = (char *)a2;
            __int16 v43 = 2082;
            __int16 v44 = v12;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s array index out of range: %lu, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v12);
          goto LABEL_44;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_parallel_array_remove_at_index";
          __int16 v41 = 2048;
          uint64_t v42 = (char *)a2;
          char v11 = "%{public}s array index out of range: %lu, no backtrace";
          goto LABEL_43;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_parallel_array_remove_at_index";
          __int16 v41 = 2048;
          uint64_t v42 = (char *)a2;
          char v11 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
          goto LABEL_43;
        }
      }
    }
LABEL_44:
    if (!v8) {
      return;
    }
    id v7 = (char *)v8;
    goto LABEL_46;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "nw_parallel_array_remove_at_index";
  uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (!__nwlog_fault(v6, &type, &v37)) {
    goto LABEL_76;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_parallel_array_remove_at_index";
    __int16 v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    goto LABEL_75;
  }
  if (!v37)
  {
    uint64_t v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_parallel_array_remove_at_index";
    __int16 v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    goto LABEL_75;
  }
  BOOL v35 = (char *)__nw_create_backtrace_string();
  uint64_t v30 = __nwlog_obj();
  os_log_type_t v31 = type;
  BOOL v36 = os_log_type_enabled(v30, type);
  if (!v35)
  {
    if (!v36) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_parallel_array_remove_at_index";
    __int16 v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_75;
  }
  if (v36)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v40 = "nw_parallel_array_remove_at_index";
    __int16 v41 = 2082;
    uint64_t v42 = v35;
    _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v35);
  if (v6) {
    goto LABEL_6;
  }
}

uint64_t nw_parallel_array_find(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_parallel_array_find";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_parallel_array_find";
      char v11 = "%{public}s called with null parray";
    }
    else
    {
      if (!v16)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_parallel_array_find";
        char v11 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_parallel_array_find";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v8) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_41;
      }
      if (!v13) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_parallel_array_find";
      char v11 = "%{public}s called with null parray, no backtrace";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_40;
  }
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  unint64_t v5 = (v4 - v3) >> 3;
  uint64_t v6 = a1[5];
  if (v5 != (a1[6] - v6) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_parallel_array_find";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_parallel_array_find";
      char v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_39;
    }
    if (!v16)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_parallel_array_find";
      char v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_39;
    }
    uint64_t v14 = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v15) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_parallel_array_find";
      char v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
      goto LABEL_39;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_parallel_array_find";
      __int16 v20 = 2082;
      BOOL v21 = v14;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v14);
LABEL_40:
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
LABEL_41:
    free(v8);
    return 0xFFFFFFFFLL;
  }
  if (v4 == v3) {
    return -1;
  }
  uint64_t result = 0;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  while (*(void *)(v3 + 8 * result) != a2 || *(void *)(v6 + 8 * result) != a3)
  {
    if (v5 == ++result) {
      return -1;
    }
  }
  return result;
}

BOOL nw_parallel_array_contains(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1[3] - a1[2] == a1[6] - a1[5]) {
      return nw_parallel_array_find(a1, a2, a3) != -1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_parallel_array_contains";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        id v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        id v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        id v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_parallel_array_contains";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      os_log_type_t v10 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_parallel_array_contains";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        id v7 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        id v7 = "%{public}s called with null parray, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_parallel_array_contains";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      os_log_type_t v10 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  unint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_parallel_array_contains";
    id v7 = "%{public}s called with null parray";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4) {
    free(v4);
  }
  return 0;
}

BOOL nw_parallel_array_is_equal(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_parallel_array_is_equal";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_46;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_parallel_array_is_equal";
        __int16 v16 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (!v18) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_parallel_array_is_equal";
        __int16 v16 = "%{public}s called with null parray, no backtrace";
        goto LABEL_45;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v24 = "nw_parallel_array_is_equal";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        uint64_t v19 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_35:
        _os_log_impl(&dword_1830D4000, v14, v15, v19, buf, 0x16u);
      }
LABEL_36:
      free(backtrace_string);
      goto LABEL_46;
    }
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_parallel_array_is_equal";
    __int16 v16 = "%{public}s called with null parray";
LABEL_45:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
LABEL_46:
    if (v13) {
      free(v13);
    }
    return 1;
  }
  uint64_t v3 = (char *)a1[2];
  uint64_t v2 = (char *)a1[3];
  int64_t v4 = v2 - v3;
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  if (v2 - v3 != v5 - v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_parallel_array_is_equal";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_parallel_array_is_equal";
      __int16 v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_45;
    }
    if (!v21)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_parallel_array_is_equal";
      __int16 v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v24 = "nw_parallel_array_is_equal";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        uint64_t v19 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v20) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_parallel_array_is_equal";
    __int16 v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_45;
  }
  if (a1 == a2) {
    return 1;
  }
  if (!a2) {
    return 0;
  }
  id v7 = (void *)a2[2];
  if (v4 != a2[3] - (void)v7) {
    return 0;
  }
  if (v3 != v2)
  {
    while (*(void *)v3 == *v7)
    {
      v3 += 8;
      ++v7;
      if (v3 == v2) {
        goto LABEL_9;
      }
    }
    return 0;
  }
LABEL_9:
  BOOL v8 = (uint64_t *)a2[5];
  if (v4 != a2[6] - (void)v8) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v9 = v6 + 8;
  do
  {
    uint64_t v10 = *v8++;
    BOOL result = *(void *)(v9 - 8) == v10;
    BOOL v12 = *(void *)(v9 - 8) != v10 || v9 == v5;
    v9 += 8;
  }
  while (!v12);
  return result;
}

void ***nw_parallel_array_copy(void ***a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    if ((char *)a1[3] - (char *)a1[2] == (char *)a1[6] - (char *)a1[5])
    {
      BOOL v2 = nw_parallel_array_create();
      if ((void ***)v2 != v1)
      {
        BOOL v3 = v2;
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v2 + 16, v1[2], v1[3], v1[3] - v1[2]);
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v3 + 40, v1[5], v1[6], v1[6] - v1[5]);
        return (void ***)v3;
      }
      return v1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_parallel_array_copy";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v13)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "nw_parallel_array_copy";
      __int16 v17 = 2082;
      BOOL v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_parallel_array_copy";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_33;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null parray, no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "nw_parallel_array_copy";
      __int16 v17 = 2082;
      BOOL v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_22:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_23:
    free(backtrace_string);
    goto LABEL_33;
  }
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_parallel_array_copy";
    BOOL v8 = "%{public}s called with null parray";
LABEL_32:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_33:
  if (v5) {
    free(v5);
  }
  return 0;
}

BOOL nw_parallel_array_apply(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parallel_array_apply";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_parallel_array_apply";
      os_log_type_t v7 = "%{public}s called with null parray";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parallel_array_apply";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_48:
        if (!v4) {
          return 1;
        }
LABEL_49:
        free(v4);
        return 1;
      }
      if (!v9) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_parallel_array_apply";
      os_log_type_t v7 = "%{public}s called with null parray, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_parallel_array_apply";
      os_log_type_t v7 = "%{public}s called with null parray, backtrace limit exceeded";
    }
    goto LABEL_47;
  }
  unint64_t v2 = (uint64_t)(a1[3] - a1[2]) >> 3;
  if (v2 != (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parallel_array_apply";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parallel_array_apply";
        os_log_type_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_47;
      }
      BOOL v10 = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v11) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parallel_array_apply";
        os_log_type_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_47;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v17 = "nw_parallel_array_apply";
        __int16 v18 = 2082;
        uint64_t v19 = v10;
        BOOL v12 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v5, v6, v12, buf, 0x16u);
      }
LABEL_33:
      free(v10);
      if (!v4) {
        return 1;
      }
      goto LABEL_49;
    }
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parallel_array_apply";
    os_log_type_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
LABEL_47:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parallel_array_apply";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_parallel_array_apply";
      os_log_type_t v7 = "%{public}s called with null applier";
      goto LABEL_47;
    }
    if (!v14)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_parallel_array_apply";
      os_log_type_t v7 = "%{public}s called with null applier, backtrace limit exceeded";
      goto LABEL_47;
    }
    BOOL v10 = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v13 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v13) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_parallel_array_apply";
      os_log_type_t v7 = "%{public}s called with null applier, no backtrace";
      goto LABEL_47;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v17 = "nw_parallel_array_apply";
      __int16 v18 = 2082;
      uint64_t v19 = v10;
      BOOL v12 = "%{public}s called with null applier, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }

  return nw_parallel_array_apply_with_range((uint64_t)a1, 0, v2, a2);
}

BOOL nw_parallel_array_apply_with_range(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v29 = "nw_parallel_array_apply_with_range";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, &type, &v26)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v29 = "nw_parallel_array_apply_with_range";
      os_log_type_t v15 = "%{public}s called with null parray";
LABEL_59:
      _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      goto LABEL_60;
    }
    if (!v26)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_parallel_array_apply_with_range";
        os_log_type_t v15 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v22 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_parallel_array_apply_with_range";
        os_log_type_t v15 = "%{public}s called with null parray, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v22) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v29 = "nw_parallel_array_apply_with_range";
    __int16 v30 = 2082;
    os_log_type_t v31 = backtrace_string;
    uint64_t v23 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_45:
    _os_log_impl(&dword_1830D4000, v13, v14, v23, buf, 0x16u);
    goto LABEL_46;
  }
  if (*(void *)(a1 + 24) - *(void *)(a1 + 16) != *(void *)(a1 + 48) - *(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v29 = "nw_parallel_array_apply_with_range";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, &type, &v26)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v29 = "nw_parallel_array_apply_with_range";
      os_log_type_t v15 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_59;
    }
    if (!v26)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_parallel_array_apply_with_range";
        os_log_type_t v15 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v24 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_parallel_array_apply_with_range";
        os_log_type_t v15 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v24) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v29 = "nw_parallel_array_apply_with_range";
    __int16 v30 = 2082;
    os_log_type_t v31 = backtrace_string;
    uint64_t v23 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
    goto LABEL_45;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v29 = "nw_parallel_array_apply_with_range";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, &type, &v26)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_parallel_array_apply_with_range";
        os_log_type_t v15 = "%{public}s called with null applier";
        goto LABEL_59;
      }
LABEL_60:
      if (v12) {
        free(v12);
      }
      return 1;
    }
    if (!v26)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_parallel_array_apply_with_range";
        os_log_type_t v15 = "%{public}s called with null applier, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v25 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_parallel_array_apply_with_range";
        os_log_type_t v15 = "%{public}s called with null applier, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v29 = "nw_parallel_array_apply_with_range";
      __int16 v30 = 2082;
      os_log_type_t v31 = backtrace_string;
      uint64_t v23 = "%{public}s called with null applier, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
LABEL_46:
    free(backtrace_string);
    goto LABEL_60;
  }
  if (atomic_fetch_add_explicit((atomic_uchar *volatile)(a1 + 64), 1u, memory_order_relaxed) == 255)
  {
    __int16 v16 = __nwlog_obj();
    os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    __int16 v29 = "nw_parallel_array_apply_with_range";
    __int16 v17 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v17);
    if (result) {
      goto LABEL_63;
    }
    free(v17);
    if (a2 < a3) {
      goto LABEL_6;
    }
  }
  else if (a2 < a3)
  {
LABEL_6:
    if ((*(unsigned int (**)(uint64_t, unint64_t, void, void))(a4 + 16))(a4, a2, *(void *)(*(void *)(a1 + 16) + 8 * a2), *(void *)(*(void *)(a1 + 40) + 8 * a2)))
    {
      unint64_t v8 = a2 + 1;
      while (a3 != v8)
      {
        char v9 = (*(uint64_t (**)(uint64_t, unint64_t, void, void))(a4 + 16))(a4, v8, *(void *)(*(void *)(a1 + 16) + 8 * v8), *(void *)(*(void *)(a1 + 40) + 8 * v8));
        ++v8;
        if ((v9 & 1) == 0)
        {
          unint64_t v10 = v8 - 1;
          goto LABEL_13;
        }
      }
      unint64_t v10 = a3;
LABEL_13:
      BOOL v11 = v10 >= a3;
    }
    else
    {
      BOOL v11 = 0;
    }
    goto LABEL_29;
  }
  BOOL v11 = 1;
LABEL_29:
  if (atomic_fetch_add_explicit((atomic_uchar *volatile)(a1 + 64), 0xFFu, memory_order_release) != 255) {
    return v11;
  }
  uint64_t v19 = __nwlog_obj();
  os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  __int16 v29 = "nw_parallel_array_apply_with_range";
  uint64_t v20 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v20);
  if (!result)
  {
    free(v20);
    return v11;
  }
LABEL_63:
  __break(1u);
  return result;
}

uint64_t ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_105(uint64_t a1)
{
  return nw_endpoint_transform_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

uint64_t __Block_byref_object_copy__79114(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__79115(uint64_t a1)
{
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_101(uint64_t a1, int a2, xpc_object_t value)
{
  return 1;
}

BOOL ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_99(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v4 = nw_proxy_config_supports_connection(a3, *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(void **)(a1 + 32), *(void **)(a1 + 40));
  if (v4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  return !v4;
}

BOOL NWPBServiceEndpointReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  os_log_type_t v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  unint64_t v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 < v7)
  {
    unint64_t v10 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      os_log_type_t v14 = (unsigned char *)(a2 + *v8);
      if (*v14) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v15 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0) {
        goto LABEL_40;
      }
      uint64_t v17 = *v3;
      unint64_t v18 = *(void *)(a2 + v17);
      if (v18 == -1 || v18 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v19 = v18 + 1;
      int v20 = *(char *)(*(void *)(a2 + *v10) + v18);
      *(void *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v21 = *v3;
      unint64_t v22 = *(void *)(a2 + v21);
      if (v22 == -1 || v22 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v23 = v22 + 1;
      int v24 = *(char *)(*(void *)(a2 + *v10) + v22);
      *(void *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v25 = *v3;
      unint64_t v26 = *(void *)(a2 + v25);
      if (v26 == -1 || v26 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v27 = v26 + 1;
      int v28 = *(char *)(*(void *)(a2 + *v10) + v26);
      *(void *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v29 = *v3;
      unint64_t v30 = *(void *)(a2 + v29);
      if (v30 == -1 || v30 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v31 = v30 + 1;
      int v32 = *(char *)(*(void *)(a2 + *v10) + v30);
      *(void *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v35 = v34 + 1;
      int v36 = *(char *)(*(void *)(a2 + *v10) + v34);
      *(void *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v37 = *v3;
      unint64_t v38 = *(void *)(a2 + v37);
      if (v38 == -1 || v38 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v39 = v38 + 1;
      int v40 = *(char *)(*(void *)(a2 + *v10) + v38);
      *(void *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v41 = *v3;
      unint64_t v42 = *(void *)(a2 + v41);
      if (v42 == -1 || v42 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v43 = v42 + 1;
      int v44 = *(char *)(*(void *)(a2 + *v10) + v42);
      *(void *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v45 = *v3;
      unint64_t v46 = *(void *)(a2 + v45);
      if (v46 == -1 || v46 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v47 = v46 + 1;
      int v48 = *(char *)(*(void *)(a2 + *v10) + v46);
      *(void *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v49 = *v3;
      unint64_t v50 = *(void *)(a2 + v49);
      if (v50 == -1 || v50 >= *(void *)(a2 + *v6))
      {
LABEL_38:
        os_log_type_t v14 = (unsigned char *)(a2 + *v8);
        goto LABEL_39;
      }
      unint64_t v51 = v50 + 1;
      int v52 = *(char *)(*(void *)(a2 + *v10) + v50);
      *(void *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        unint64_t v16 = 0;
        int v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      int v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(unsigned char *)(a2 + *v8)) {
        unint64_t v16 = 0;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      unint64_t v55 = v16 >> 3;
      if ((v16 >> 3) == 3)
      {
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 8;
        goto LABEL_4;
      }
      if (v55 == 2)
      {
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 24;
LABEL_4:
        BOOL v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      }
      if (v55 == 1)
      {
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 16;
        goto LABEL_4;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_5:
      uint64_t v4 = *v3;
      unint64_t v5 = *(void *)(a2 + v4);
      unint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
    }
    unint64_t v16 = 0;
LABEL_39:
    *os_log_type_t v14 = 1;
    goto LABEL_40;
  }
  return *(unsigned char *)(a2 + *v8) == 0;
}

void __nw_connection_used_tls_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = nw_endpoint_handler_stack_uses_tls(*(void **)(v2 + 144));
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v6 = 136446466;
        unint64_t v7 = "nw_connection_used_tls_block_invoke";
        __int16 v8 = 1024;
        int v9 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection is not ready", (uint8_t *)&v6, 0x12u);
      }
    }
  }
}

void nw_establishment_report_get_accurate_ecn_state(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  int v6 = v5;
  if (!v5)
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v12, type, &v31)) {
      goto LABEL_55;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if ((_BYTE)v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      BOOL v21 = os_log_type_enabled(v13, type[0]);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v12) {
          goto LABEL_5;
        }
LABEL_56:
        free(v12);
        goto LABEL_5;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v27 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    char v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v12, type, &v31)) {
      goto LABEL_55;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null client_accurate_ecn_state", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!(_BYTE)v31)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null client_accurate_ecn_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    unint64_t v22 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v23 = type[0];
    BOOL v24 = os_log_type_enabled(v13, type[0]);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null client_accurate_ecn_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v22;
      _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null client_accurate_ecn_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    uint64_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v12, type, &v31)) {
      goto LABEL_55;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null server_accurate_ecn_state", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!(_BYTE)v31)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null server_accurate_ecn_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    unint64_t v22 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v26 = os_log_type_enabled(v13, type[0]);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null server_accurate_ecn_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v22;
      _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null server_accurate_ecn_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v22);
    if (!v12) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  *(void *)os_log_type_t type = 0;
  int v36 = type;
  int v38 = 0;
  uint64_t v37 = 0x2020000000;
  uint64_t v31 = 0;
  int v32 = &v31;
  int v34 = 0;
  uint64_t v33 = 0x2020000000;
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __nw_establishment_report_get_accurate_ecn_state_block_invoke;
  v30[3] = &unk_1E5249B10;
  uint8_t v30[4] = type;
  void v30[5] = &v31;
  unint64_t v7 = v5;
  __int16 v8 = v30;
  int v9 = (atomic_uchar *)v7[8];
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
  int v40 = &unk_1E524AE90;
  uint64_t v10 = v8;
  id v41 = v10;
  nw_array_apply(v9, (uint64_t)buf);

  *a2 = *((_DWORD *)v36 + 6);
  *a3 = *((_DWORD *)v32 + 6);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(type, 8);
LABEL_5:
}

uint64_t __nw_establishment_report_get_accurate_ecn_state_block_invoke(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
  }
  id v8 = (id)g_tcp_definition;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8)) {
    goto LABEL_8;
  }
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  id v9 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v9))
  {

LABEL_8:
    goto LABEL_9;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  id v12 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v12);

  if (!is_equal_unsafe)
  {
    uint64_t v10 = 1;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v10 = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4;
LABEL_10:

  return v10;
}

void sub_183C59500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_establishment_report_get_l4s_enabled(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)os_log_type_t type = 0;
    unint64_t v19 = type;
    uint64_t v20 = 0x2020000000;
    char v21 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_establishment_report_get_l4s_enabled_block_invoke;
    v17[3] = &unk_1E5249B38;
    void v17[4] = type;
    uint64_t v3 = v1;
    uint64_t v4 = v17;
    id v5 = (atomic_uchar *)v3[8];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
    BOOL v24 = &unk_1E524AE90;
    int v6 = v4;
    id v25 = v6;
    nw_array_apply(v5, (uint64_t)buf);

    BOOL v7 = *((unsigned char *)v19 + 24) != 0;
    _Block_object_dispose(type, 8);
    goto LABEL_3;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v10, type, &v22))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_3:

  return v7;
}

uint64_t __nw_establishment_report_get_l4s_enabled_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  id v7 = a2;
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  id v8 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8))
  {
  }
  else
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
    }
    id v9 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v9);

    if (!is_equal_unsafe)
    {
      uint64_t v11 = 1;
      goto LABEL_10;
    }
  }
  uint64_t v11 = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a5;
LABEL_10:

  return v11;
}

void sub_183C599C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_fillout_tcp_statistics(void *a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
    int v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v32, type, &v46)) {
      goto LABEL_56;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v39 = os_log_type_enabled(v33, type[0]);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v32) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
        _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v43 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
        _os_log_impl(&dword_1830D4000, v33, v43, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_55;
  }
  if (!a2)
  {
    unint64_t v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
    int v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v32, type, &v46)) {
      goto LABEL_56;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
        _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null statistics", buf, 0xCu);
      }
    }
    else if (v46)
    {
      int v40 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v41 = type[0];
      BOOL v42 = os_log_type_enabled(v33, type[0]);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v40;
          _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s called with null statistics, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v40);
LABEL_56:
        if (!v32)
        {
LABEL_58:
          BOOL v9 = 0;
          goto LABEL_22;
        }
LABEL_57:
        free(v32);
        goto LABEL_58;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
        _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s called with null statistics, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v44 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
        _os_log_impl(&dword_1830D4000, v33, v44, "%{public}s called with null statistics, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_55:

    goto LABEL_56;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  id v5 = (os_unfair_lock_s *)v3;
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  BOOL v54 = __Block_byref_object_copy__7806;
  unint64_t v55 = __Block_byref_object_dispose__7807;
  id v56 = 0;
  int v6 = v5 + 34;
  *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
  uint64_t v48 = 3221225472;
  uint64_t v49 = __nw_connection_copy_establishment_report_off_queue_block_invoke;
  unint64_t v50 = &unk_1E524B978;
  int v52 = buf;
  id v7 = v5;
  unint64_t v51 = v7;
  os_unfair_lock_lock(v6);
  __nw_connection_copy_establishment_report_off_queue_block_invoke((uint64_t)type);
  os_unfair_lock_unlock(v6);
  id v8 = *(id *)(*(void *)&buf[8] + 40);

  _Block_object_dispose(buf, 8);
  BOOL v9 = v8 != 0;
  if (v8)
  {
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = __nw_connection_fillout_tcp_statistics_block_invoke;
    v45[3] = &__block_descriptor_40_e43_B16__0__NSObject_OS_nw_resolution_report__8l;
    v45[4] = a2;
    uint64_t v10 = v8;
    uint64_t v11 = v45;
    os_log_type_t v12 = (atomic_uchar *)v10[9];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_establishment_report_enumerate_resolution_reports_block_invoke;
    BOOL v54 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E524AE90;
    BOOL v13 = v11;
    unint64_t v55 = v13;
    nw_array_apply(v12, (uint64_t)buf);

    os_log_type_t v14 = v10;
    uint64_t v15 = v14[3];

    *(_DWORD *)(a2 + 4) = *(_DWORD *)a2 + v15;
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
    }
    id v16 = (id)g_tcp_definition;
    *(_DWORD *)(a2 + 8) = nw_establishment_report_get_handshake_ms_for_protocol(v14, v16, 0);

    if (*(_DWORD *)(a2 + 8))
    {
      uint64_t v17 = v14;
      uint64_t v18 = v17[1];

      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 8) + v18;
    }
    unint64_t v19 = (void *)nw_protocol_boringssl_copy_definition();
    double Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(v20);
    if (*(void *)(v22 + 2208))
    {
      inited = (void *)nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v24 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_swift_tls_definition_if_present";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = inited;
        _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", buf, 0x16u);
      }
    }
    else
    {
      inited = 0;
    }
    *(_DWORD *)(a2 + 16) = nw_establishment_report_get_handshake_ms_for_protocol(v14, v19, inited);

    if (*(_DWORD *)(a2 + 16))
    {
      os_log_type_t v28 = v14;
      int v29 = v28[4];

      *(_DWORD *)(a2 + 20) = v29;
    }
  }
  else
  {
    uint64_t v25 = *((void *)v7 + 2);
    if (v25 && !nw_path_parameters_get_logging_disabled(*(void *)(v25 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v26 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v27;
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Establishment report is not ready", buf, 0x12u);
      }
    }
  }

LABEL_22:
  return v9;
}

void sub_183C5A248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_fillout_tcp_statistics_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  **(_DWORD **)(a1 + 32) = nw_resolution_report_get_milliseconds(v3);

  return 0;
}

void nw_connection_enable_stats_report_on_nw_queue(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    double v20 = "nw_connection_enable_stats_report_on_nw_queue";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          double v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            double v20 = "nw_connection_enable_stats_report_on_nw_queue";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          double v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          double v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_26:
    if (v8) {
      free(v8);
    }
    goto LABEL_7;
  }
  nw_context_assert_queue(v3[3]);
  char v5 = *((unsigned char *)v4 + 108);
  if (v5)
  {
LABEL_7:

    return;
  }
  if (v4[12])
  {
LABEL_6:
    *((_DWORD *)v4 + 26) = a2;
    *((unsigned char *)v4 + 108) = v5 | 1;
    goto LABEL_7;
  }
  int v6 = malloc_type_calloc(1uLL, 0xD60uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_5:
    v4[12] = v6;
    char v5 = *((unsigned char *)v4 + 108);
    goto LABEL_6;
  }
  uint64_t v15 = __nwlog_obj();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  double v20 = "strict_calloc";
  __int16 v21 = 2048;
  uint64_t v22 = 1;
  __int16 v23 = 2048;
  uint64_t v24 = 3424;
  id v16 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v16))
  {
    free(v16);
    int v6 = 0;
    goto LABEL_5;
  }
  __break(1u);
}

void sub_183C5A648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue(void *a1, void *a2, uint64_t a3)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  char v5 = a1;
  id v6 = a2;
  nw_context_assert_queue(v5[3]);
  id v7 = (id *)nw_endpoint_handler_copy_current_path(v6);
  if (v7)
  {
    v107[0] = MEMORY[0x1E4F143A8];
    v107[1] = 3221225472;
    v107[2] = ___ZL70nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queueP24NWConcrete_nw_connectionPU33objcproto22OS_nw_endpoint_handler8NSObjectP35netcore_stats_tcp_statistics_report_block_invoke;
    v107[3] = &unk_1E5249C48;
    id v8 = v5;
    uint64_t v108 = v8;
    uint64_t v109 = a3;
    nw_endpoint_handler_access_resolver_handler(v6, v107);
    id v102 = v7[12];
    if (v102)
    {
      BOOL v9 = v102;
      int v10 = v9[24];

      *(_DWORD *)(a3 + 196) = v10;
    }
    unsigned __int16 v106 = WORD2(v6) ^ WORD1(v6) ^ HIWORD(v6) ^ (unsigned __int16)v6;
    int event_milliseconds = nw_connection_get_event_milliseconds(v8, 3, 3, &v106, 0);
    if (event_milliseconds != -1) {
      *(_DWORD *)(a3 + 140) = event_milliseconds;
    }
    unint64_t v101 = (void *)nw_endpoint_handler_copy_connected_path(v6);
    if (!v101) {
      goto LABEL_41;
    }
    *(_DWORD *)(a3 + 144) = nw_connection_get_transport_connect_milliseconds(v8, v106, 1);
    *(_DWORD *)(a3 + 148) = nw_connection_get_transport_connect_milliseconds(v8, v106, 0);
    uint64_t start_time = v8->start_time;
    uint64_t v13 = mach_continuous_time();
    if (v13 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v13;
    }
    unint64_t v15 = nw_delta_nanos(start_time, v14);
    unsigned int v16 = *(_DWORD *)(a3 + 144);
    *(_DWORD *)(a3 + 152) = v15 / 0xF4240 - v16;
    if ((v15 / 0xF4240) < v16)
    {
      if (gLogDatapath)
      {
        uint64_t v97 = __nwlog_obj();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v98 = *(unsigned int *)(a3 + 144);
          uint64_t v99 = *(unsigned int *)(a3 + 152);
          buf[0] = 136446978;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
          LOWORD(buf[3]) = 2082;
          *(void *)((char *)&buf[3] + 2) = "statistics_report->flow_duration_msecs";
          HIWORD(buf[5]) = 2048;
          *(void *)&buf[6] = v98;
          LOWORD(buf[8]) = 2048;
          *(void *)((char *)&buf[8] + 2) = v99;
          _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)buf, 0x2Au);
        }
      }
      *(_DWORD *)(a3 + 152) = 0;
    }
    id v100 = nw_path_copy_interface(v101);
    if (v100)
    {
      char v17 = v100;
      int v18 = v17[24];

      *(_DWORD *)(a3 + 200) = v18;
    }
    *(_WORD *)(a3 + 208) |= 2u;
    id v19 = v6;
    while (1)
    {
      double v20 = v19;
      if (!v20) {
        break;
      }
      __int16 v21 = v20;
      int v22 = v20[29];

      if (v22 == 4)
      {
        int v27 = v8;
        LOWORD(buf[0]) = WORD2(v21) ^ WORD1(v21) ^ HIWORD(v21) ^ (unsigned __int16)v21;
        unsigned int v28 = nw_connection_get_event_milliseconds(v27, 5, 3, buf, 0);
        unsigned int v29 = nw_connection_get_event_milliseconds(v27, 5, 4, buf, 0);
        if (v29 == -1 || v28 == -1) {
          BOOL v31 = v29 != -1;
        }
        else {
          BOOL v31 = v28 >= v29;
        }

        if (v31) {
          __int16 v32 = 4;
        }
        else {
          __int16 v32 = 0;
        }
        *(_WORD *)(a3 + 208) = *(_WORD *)(a3 + 208) & 0xFFFB | v32;
        if (nw_endpoint_handler_used_prefer_fallback(v21)) {
          __int16 v33 = 16;
        }
        else {
          __int16 v33 = 0;
        }
        *(_WORD *)(a3 + 208) = *(_WORD *)(a3 + 208) & 0xFFEF | v33;
        goto LABEL_39;
      }
      __int16 v23 = v21;
      id v19 = v23[9];

      if (!v19) {
        goto LABEL_40;
      }
    }
    unint64_t v77 = __nwlog_obj();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_endpoint_handler_get_mode";
    unint64_t v78 = (char *)_os_log_send_and_compose_impl();

    v110[0] = 16;
    LOBYTE(v105) = 0;
    if (__nwlog_fault(v78, v110, &v105))
    {
      if (v110[0] == 17)
      {
        BOOL v79 = v78;
        uint64_t v80 = __nwlog_obj();
        os_log_type_t v81 = v110[0];
        if (os_log_type_enabled(v80, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
        }
LABEL_89:

        unint64_t v78 = v79;
        goto LABEL_90;
      }
      if (!(_BYTE)v105)
      {
        BOOL v79 = v78;
        uint64_t v80 = __nwlog_obj();
        os_log_type_t v86 = v110[0];
        if (os_log_type_enabled(v80, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v80, v86, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_89;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v83 = __nwlog_obj();
      os_log_type_t v84 = v110[0];
      BOOL v85 = os_log_type_enabled(v83, (os_log_type_t)v110[0]);
      if (backtrace_string)
      {
        if (v85)
        {
          buf[0] = 136446466;
          *(void *)&buf[1] = "nw_endpoint_handler_get_mode";
          LOWORD(buf[3]) = 2082;
          *(void *)((char *)&buf[3] + 2) = backtrace_string;
          _os_log_impl(&dword_1830D4000, v83, v84, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(backtrace_string);
      }
      else
      {
        if (v85)
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v83, v84, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_90:
    if (v78) {
      free(v78);
    }
    int v87 = __nwlog_obj();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
    uint64_t v88 = (char *)_os_log_send_and_compose_impl();

    v110[0] = 16;
    LOBYTE(v105) = 0;
    if (__nwlog_fault(v88, v110, &v105))
    {
      if (v110[0] == 17)
      {
        unint64_t v89 = v88;
        unint64_t v90 = __nwlog_obj();
        os_log_type_t v91 = v110[0];
        if (os_log_type_enabled(v90, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_1830D4000, v90, v91, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
        }
LABEL_104:

        uint64_t v88 = v89;
        goto LABEL_105;
      }
      if (!(_BYTE)v105)
      {
        unint64_t v89 = v88;
        unint64_t v90 = __nwlog_obj();
        os_log_type_t v96 = v110[0];
        if (os_log_type_enabled(v90, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_1830D4000, v90, v96, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_104;
      }
      uint64_t v92 = (char *)__nw_create_backtrace_string();
      BOOL v93 = __nwlog_obj();
      os_log_type_t v94 = v110[0];
      BOOL v95 = os_log_type_enabled(v93, (os_log_type_t)v110[0]);
      if (v92)
      {
        if (v95)
        {
          buf[0] = 136446466;
          *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
          LOWORD(buf[3]) = 2082;
          *(void *)((char *)&buf[3] + 2) = v92;
          _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(v92);
      }
      else
      {
        if (v95)
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_105:
    if (v88) {
      free(v88);
    }
    __int16 v21 = 0;
LABEL_39:

LABEL_40:
LABEL_41:
    os_log_type_t v34 = v7;
    unint64_t v35 = v34[2];

    *(_DWORD *)(a3 + 156) = nw_parameters_get_traffic_class(v35);
    *(_DWORD *)(a3 + 204) = nw_parameters_get_multipath_service(v35);
    uint64_t v133 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    memset(v116, 0, sizeof(v116));
    memset(buf, 0, sizeof(buf));
    if (!nw_parameters_get_multipath(v35))
    {
      os_log_type_t v36 = v8;
      nw_context_assert_queue(v5[3]);
      uint64_t v37 = v36;
      if (nw_parameters_get_ip_protocol(v37[2]) == 6)
      {
        BOOL v38 = nw_endpoint_handler_fillout_tcp_info(v37[18], buf);

        if (v38)
        {
          *(_WORD *)(a3 + 208) = *(_WORD *)(a3 + 208) & 0xFE1F | (32 * (_BYTE)v123) & 0x20 | (8 * v123) & 0x40 | (32 * (_BYTE)v123) & 0x80 | (((v123 & 2) != 0) << 8);
          uint64_t v39 = *(void *)&v116[3];
          *(void *)a3 = *(void *)&v116[11];
          *(void *)(a3 + 8) = v39;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)&v116[13];
          uint64_t v40 = *(void *)&v116[9];
          *(void *)(a3 + 32) = *(void *)&v116[5];
          *(void *)(a3 + 40) = v40;
          *(void *)(a3 + 48) = *(void *)&v116[1];
          *(void *)(a3 + 56) = 0;
          *(void *)(a3 + 64) = 0;
          *(void *)(a3 + 72) = 0;
          int32x4_t v41 = vrev64q_s32(*(int32x4_t *)&buf[5]);
          v41.i64[0] = *(void *)&buf[5];
          *(int32x4_t *)(a3 + 160) = v41;
          *(_DWORD *)(a3 + 176) = LOBYTE(v116[19]);
          if (nw_parameters_get_tfo(v35) && (BYTE4(v123) & 8) != 0) {
            *(_WORD *)(a3 + 208) |= 0x200u;
          }
          goto LABEL_74;
        }
      }
      else
      {
      }
    }
    if (nw_endpoint_handler_is_multipath(v6))
    {
      int v105 = 0;
      if (nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(v8, (uint64_t)&v105))
      {
        os_log_type_t v44 = v105;
        if (v105)
        {
          if (*(void *)v105)
          {
            uint64_t v45 = *(void *)(*(void *)v105 + 32);
            if (v45)
            {
              v42.i32[0] = 0;
              v43.i32[0] = *(unsigned char *)(v45 + 116) & 1;
              int8x16_t v46 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v43, v42), 0);
              int8x16_t v47 = *(int8x16_t *)(v45 + 120);
              int64x2_t v48 = (int64x2_t)vbicq_s8(v47, v46);
              int64x2_t v49 = (int64x2_t)vandq_s8(v47, v46);
              int8x16_t v50 = *(int8x16_t *)(v45 + 48);
              int32x2_t v51 = vdup_n_s32((*(unsigned char *)(v45 + 44) & 1) == 0);
              v52.i64[0] = v51.u32[0];
              v52.i64[1] = v51.u32[1];
              int32x4_t v53 = (int32x4_t)vcltzq_s64(vshlq_n_s64(v52, 0x3FuLL));
              int64x2_t v54 = (int64x2_t)vbicq_s8(v50, (int8x16_t)v53);
              int64x2_t v55 = (int64x2_t)vandq_s8(v50, (int8x16_t)v53);
              v53.i32[0] = *(unsigned char *)(v45 + 188) & 1;
              int8x16_t v56 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v53, v42), 0);
              int8x16_t v57 = *(int8x16_t *)(v45 + 192);
              int64x2_t v58 = (int64x2_t)vbicq_s8(v57, v56);
              int32x4_t v59 = (int32x4_t)vandq_s8(v57, v56);
              int64x2_t v60 = vaddq_s64(v49, (int64x2_t)v59);
              v59.i32[0] = *(unsigned char *)(v45 + 260) & 1;
              int8x16_t v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v59, v42), 0);
              int8x16_t v62 = *(int8x16_t *)(v45 + 264);
              int64x2_t v63 = (int64x2_t)vbicq_s8(v62, v61);
              int64x2_t v64 = vaddq_s64(v55, vaddq_s64(v60, (int64x2_t)vandq_s8(v62, v61)));
              int64x2_t v65 = vaddq_s64(v54, vaddq_s64(vaddq_s64(v48, v58), v63));
              *(_WORD *)(a3 + 208) = ((*(_WORD *)(v45 + 328) & 1) << 10) | *(_WORD *)(a3 + 208) & 0xFBFF;
              *(int8x16_t *)(a3 + 80) = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL);
              *(int8x16_t *)(a3 + 96) = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
              *(_OWORD *)(a3 + 112) = *(_OWORD *)(v45 + 24);
              int8x16_t v66 = (int8x16_t)vaddq_s64(v64, v65);
              *(int8x16_t *)a3 = vextq_s8(v66, v66, 8uLL);
            }
          }
        }
        freemptcpinfo(v44);
        goto LABEL_74;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v67 = (id)gLogObj;
      *(_DWORD *)uint64_t v110 = 136446210;
      unint64_t v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
      uint64_t v68 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v103 = 0;
      if (__nwlog_fault(v68, &type, &v103))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v69 = (id)gLogObj;
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)uint64_t v110 = 136446210;
            unint64_t v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed", v110, 0xCu);
          }
        }
        else if (v103)
        {
          int v71 = __nw_create_backtrace_string();
          if (v71)
          {
            os_log_type_t v72 = (char *)v71;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v73 = (id)gLogObj;
            os_log_type_t v74 = type;
            if (os_log_type_enabled(v73, type))
            {
              *(_DWORD *)uint64_t v110 = 136446466;
              unint64_t v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
              __int16 v112 = 2082;
              int v113 = v72;
              _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, dumping backtrace:%{public}s", v110, 0x16u);
            }

            free(v72);
            if (!v68) {
              goto LABEL_74;
            }
            goto LABEL_73;
          }
          unint64_t v69 = __nwlog_obj();
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)uint64_t v110 = 136446210;
            unint64_t v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v69, v76, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, no backtrace", v110, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v69 = (id)gLogObj;
          os_log_type_t v75 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)uint64_t v110 = 136446210;
            unint64_t v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v69, v75, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, backtrace limit exceeded", v110, 0xCu);
          }
        }
      }
      if (v68) {
LABEL_73:
      }
        free(v68);
    }
LABEL_74:

    p_super = &v108->super;
LABEL_75:

    goto LABEL_76;
  }
  uint64_t v24 = v5[2];
  if (v24 && !nw_path_parameters_get_logging_disabled(v24[13]))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    p_super = (id)gconnectionLogObj;
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
    {
      int v26 = *((_DWORD *)v5 + 112);
      buf[0] = 136446466;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v26;
      _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No path found for endpoint handler", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_75;
  }
LABEL_76:
}

void sub_183C5B454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void nw_connection_send_report_to_symptoms(NWConcrete_nw_connection *a1, netcore_stats_tcp_report *a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  char v5 = a1;
  if (nw_connection_get_symptom_reporter_handle::once[0] != -1) {
    dispatch_once(nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_79705);
  }
  symptom_new();
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  if (a2->delegated)
  {
    long long v7 = 0uLL;
    nw_parameters_get_proc_uuid(v5->parameters, &v7);
    symptom_set_additional_qualifier();
    nw_parameters_get_pid(v5->parameters);
    symptom_set_qualifier();
    effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v5->parameters);
    if (effective_bundle_id)
    {
      strlen(effective_bundle_id);
      symptom_set_additional_qualifier();
    }
  }
  if (a3) {
    symptom_send_immediate();
  }
  else {
    symptom_send();
  }
}

void sub_183C5B620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_stats_fill_in_nw_report_on_nw_queue(NWConcrete_nw_connection *a1, nw_connection_report_s *a2)
{
  uint64_t v430 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  v380 = v3;
  if (!a2)
  {
    int v254 = __nwlog_obj();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    uint64_t v255 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    LOBYTE(v392) = 0;
    if (__nwlog_fault(v255, v428, &v392))
    {
      if (v428[0] == 17)
      {
        unint64_t v256 = __nwlog_obj();
        os_log_type_t v257 = v428[0];
        if (os_log_type_enabled(v256, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v256, v257, "%{public}s called with null report", (uint8_t *)buf, 0xCu);
        }
      }
      else if ((_BYTE)v392)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v256 = __nwlog_obj();
        os_log_type_t v259 = v428[0];
        BOOL v260 = os_log_type_enabled(v256, (os_log_type_t)v428[0]);
        if (backtrace_string)
        {
          if (v260)
          {
            buf[0] = 136446466;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            LOWORD(buf[3]) = 2082;
            *(void *)((char *)&buf[3] + 2) = backtrace_string;
            _os_log_impl(&dword_1830D4000, v256, v259, "%{public}s called with null report, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_393;
        }
        if (v260)
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v256, v259, "%{public}s called with null report, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        unint64_t v256 = __nwlog_obj();
        os_log_type_t v269 = v428[0];
        if (os_log_type_enabled(v256, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v256, v269, "%{public}s called with null report, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_393:
    if (v255) {
      free(v255);
    }
    goto LABEL_548;
  }
  uint64_t v4 = v3;
  nw_context_assert_queue(v3->context);
  if ((*((unsigned char *)v4 + 109) & 0x40) != 0)
  {
    char v5 = nw_endpoint_handler_copy_connected_flow_handler(v4->parent_endpoint_handler);
  }
  else
  {
    char v5 = 0;
  }
  id v6 = v4;
  v384 = v6->parameters;

  if (v5)
  {
    long long v7 = v5;
    id v377 = v7[4];
  }
  else
  {
    id v377 = 0;
  }
  unsigned int v8 = *((char *)v6 + 108);
  int v9 = v8 & 1 | (4 * ((v8 >> 5) & 1)) | (v8 >> 1) & 2;
  if ((v8 & 0x80000000) != 0) {
    v9 |= 8u;
  }
  a2->connection_report_reason = v9 & 0xFFFFFFDF | (v8 >> 2) & 0x10 | (32 * ((*((unsigned __int8 *)v4 + 109) >> 1) & 1));
  v382 = v5;
  a2->apple_host = nw_connection_stats_get_apple_host(v6);
  int v10 = v6;
  parameters = v6->parameters;
  if (parameters
    && (effective_process_name = (const char *)nw_parameters_get_effective_process_name(parameters)) != 0)
  {
    int apple_app_for_string = nw_connection_stats_get_apple_app_for_string(effective_process_name);
  }
  else
  {
    if (nw_connection_stats_get_current_app(BOOL *)::onceToken != -1) {
      dispatch_once(&nw_connection_stats_get_current_app(BOOL *)::onceToken, &__block_literal_global_64_79813);
    }
    int apple_app_for_string = nw_connection_stats_get_current_app(BOOL *)::current_app;
  }

  a2->apple_app = apple_app_for_string;
  uint64_t v14 = (unsigned __int8 *)nw_parameters_get_effective_process_name(v6->parameters);
  if (v14)
  {
    effective_bundle_id = a2->effective_bundle_id;
    uint64_t v16 = 256;
    while (1)
    {
      int v17 = *v14;
      char *effective_bundle_id = v17;
      if (!v17) {
        break;
      }
      ++effective_bundle_id;
      ++v14;
      if ((unint64_t)--v16 <= 1)
      {
        char *effective_bundle_id = 0;
        break;
      }
    }
  }
  if (nw_utilities_get_self_name::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_11_44681);
  }
  int v18 = (unsigned __int8 *)nw_utilities_get_self_name::name;
  if (nw_utilities_get_self_name::name)
  {
    bundle_id = a2->bundle_id;
    uint64_t v20 = 256;
    while (1)
    {
      int v21 = *v18;
      char *bundle_id = v21;
      if (!v21) {
        break;
      }
      ++bundle_id;
      ++v18;
      if ((unint64_t)--v20 <= 1)
      {
        char *bundle_id = 0;
        break;
      }
    }
  }
  if (nw_parameters_get_effective_bundle_id(v6->parameters)
    || (int v22 = v6->parameters, v23 = getpid(), nw_parameters_has_delegated_proc_pid(v22, v23))
    || nw_parameters_has_delegated_proc_uuid(v6->parameters))
  {
    *(_DWORD *)((char *)a2 + 1706) |= 0x800000u;
  }
  else
  {
    if (nw_connection_stats_get_current_app(BOOL *)::onceToken != -1) {
      dispatch_once(&nw_connection_stats_get_current_app(BOOL *)::onceToken, &__block_literal_global_64_79813);
    }
    int v85 = 0x800000;
    if (!nw_connection_stats_get_current_app(BOOL *)::is_daemon) {
      int v85 = 0;
    }
    unint64_t v86 = *(_DWORD *)((char *)a2 + 1706) & 0xFF7FFFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
    *(_DWORD *)((char *)a2 + 1706) = *(_DWORD *)((char *)a2 + 1706) & 0xFF7FFFFF | v85;
    *((_WORD *)a2 + 855) = WORD2(v86);
  }
  uint64_t v24 = v10;
  uuid_clear(a2->connection_uuid);
  *(_OWORD *)a2->connection_uuid = *(_OWORD *)v24->top_uuid;

  nw_connection_get_parent_uuid(v24, a2->parent_uuid);
  a2->seconds_since_interface_change = v24->interface_time_delta;
  v381 = v6;
  if (!v384)
  {
    int64x2_t v52 = v377;
    if (!v377)
    {
      char v55 = 1;
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  uint64_t v25 = v384;
  int v26 = v25[92];

  a2->connection_int mode = v26;
  BOOL tfo = nw_parameters_get_tfo(v25);
  unsigned int v28 = (unsigned int *)((char *)a2 + 1706);
  int v29 = 4096;
  if (!tfo) {
    int v29 = 0;
  }
  unint64_t v30 = *(_DWORD *)((char *)a2 + 1706) & 0xFFFFEFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  unsigned int *v28 = *(_DWORD *)((char *)a2 + 1706) & 0xFFFFEFFF | v29;
  *((_WORD *)a2 + 855) = WORD2(v30);
  BOOL v31 = v25;
  int v32 = *(_DWORD *)(*((void *)v31 + 13) + 103) != 0;

  unint64_t v33 = *v28 & 0xFFFFDFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  unsigned int *v28 = *v28 & 0xFFFFDFFF | (v32 << 13);
  *((_WORD *)a2 + 855) = WORD2(v33);
  os_log_type_t v34 = v31;
  int v35 = *(_DWORD *)(*((void *)v31 + 13) + 103);

  a2->multipath_service_os_log_type_t type = v35;
  os_log_type_t v36 = v34;
  unsigned int v37 = *(_DWORD *)(*((void *)v31 + 13) + 72);

  a2->traffic_class = v37;
  BOOL v38 = v36;
  int v39 = *(_WORD *)(*((void *)v31 + 13) + 100) & 1;

  unint64_t v40 = *v28 & 0xF7FFFFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  unsigned int *v28 = *v28 & 0xF7FFFFFF | (v39 << 27);
  *((_WORD *)a2 + 855) = WORD2(v40);
  int32x4_t v41 = v38;
  int v42 = *(_WORD *)(*((void *)v31 + 13) + 100) & 2;

  unint64_t v43 = *v28 & 0xEFFFFFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  unsigned int *v28 = *v28 & 0xEFFFFFFF | (v42 << 27);
  *((_WORD *)a2 + 855) = WORD2(v43);
  os_log_type_t v44 = v41;
  uint64_t v45 = *((_DWORD *)v44 + 24) & 0x400;

  unint64_t v46 = (*v28 | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  unsigned int *v28 = *v28;
  *((_WORD *)a2 + 855) = (v46 | (v45 << 22)) >> 32;
  int8x16_t v47 = v44;
  LODWORD(v45) = *(unsigned __int16 *)(*((void *)v31 + 13) + 108);

  unint64_t v48 = *v28 & 0xFFFFFFFD | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  unsigned int *v28 = *v28 & 0xFFFFFFFD | (v45 >> 14) & 2;
  *((_WORD *)a2 + 855) = WORD2(v48);
  int64x2_t v49 = v47;
  uint64_t v50 = (*(unsigned __int8 *)(*((void *)v31 + 13) + 110) << 16) & 0x40000;

  unint64_t v51 = (*v28 | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32)) & 0xFFFFFDFFFFFFFFFFLL | (v50 << 23);
  unsigned int *v28 = *v28;
  *((_WORD *)a2 + 855) = WORD2(v51);
  int64x2_t v52 = v377;
  if (v377)
  {
LABEL_38:
    int8x16_t v56 = v52;
    unsigned int v54 = *(unsigned __int16 *)(v56[13] + 108) | (*(unsigned __int8 *)(v56[13] + 110) << 16);

    char v55 = 0;
    unsigned int v28 = (unsigned int *)((char *)a2 + 1706);
    goto LABEL_39;
  }
  int32x4_t v53 = v49;
  unsigned int v54 = *(unsigned __int16 *)(*((void *)v31 + 13) + 108) | (*(unsigned __int8 *)(*((void *)v31 + 13) + 110) << 16);

  char v55 = 1;
LABEL_39:
  unsigned int *v28 = *v28 & 0xFFFFFFFE | (v54 >> 14) & 1;
LABEL_40:
  int8x16_t v57 = v5;
  v379 = v57;
  v385 = a2;
  if (v5 || (int8x16_t v57 = v24->parent_endpoint_handler) != 0)
  {
    int64x2_t v58 = v57;
    os_unfair_lock_lock(&v58->lock);
    int32x4_t v59 = v58->current_path;
    os_unfair_lock_unlock(&v58->lock);
    v376 = v58;

    if (v59)
    {
      int64x2_t v60 = v59;
      char v61 = *((unsigned char *)v60 + 473);

      if ((v61 & 0x40) != 0) {
        *(_DWORD *)((char *)a2 + 1706) |= 0x40000u;
      }
      int8x16_t v62 = v60;
      int v63 = *((char *)v60 + 473);

      if (v63 < 0) {
        *(_DWORD *)((char *)a2 + 1706) |= 0x80000u;
      }
      if (nw_path_is_expensive(v62)) {
        *(_DWORD *)((char *)a2 + 1706) |= 0x2000000u;
      }
      if (nw_path_is_constrained(v62)) {
        *(_DWORD *)((char *)a2 + 1706) |= 0x4000000u;
      }
      int64x2_t v64 = v62;
      nw_path_update_dns(v64);
      int64x2_t v65 = v64->resolver_configs;

      v412[0] = MEMORY[0x1E4F143A8];
      v412[1] = 3221225472;
      v412[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke;
      v412[3] = &__block_descriptor_40_e35_B24__0Q8__NSObject_OS_nw_object__16l;
      v412[4] = a2;
      nw_array_apply(v65, (uint64_t)v412);
    }
  }
  else
  {
    v376 = 0;
  }
  __int16 v411 = 0;
  unsigned int event_milliseconds = nw_connection_get_event_milliseconds(v24, 1, 2, &v411, 0);
  if (event_milliseconds != -1)
  {
    unsigned int v67 = event_milliseconds;
    uint64_t v68 = 0;
    *(_DWORD *)((char *)a2 + 1706) |= 4u;
    while (1)
    {
      unsigned int v69 = nw_connection_get_event_milliseconds(v24, 1, 3, &v411, v68);
      if (v69 == -1) {
        break;
      }
      uint64_t v68 = (v68 + 1);
      if (v69 >= v67)
      {
        a2->path_trigger_milliseconds = v69 - v67;
        break;
      }
    }
  }
  __int16 v410 = 0;
  unsigned int v70 = nw_connection_get_event_milliseconds(v24, 4, 1, &v410, 0);
  int v71 = v5;
  if (v384)
  {
    os_log_type_t v72 = v384;
    if (nw_context_has_proxies(*(void **)(*((void *)v72 + 13) + 136)))
    {

      int v71 = v5;
    }
    else
    {
      BOOL v73 = *((void *)v72 + 22) == 0;

      int v71 = v5;
      if (v73) {
        goto LABEL_63;
      }
    }
    *(_DWORD *)((char *)a2 + 1706) |= 0x10u;
  }
LABEL_63:
  if (v70 == -1)
  {
    if (!v71) {
      goto LABEL_150;
    }
    goto LABEL_112;
  }
  int v74 = *(_DWORD *)((char *)a2 + 1706);
  if ((v74 & 0x10) == 0)
  {
    *((_WORD *)a2 + 855) = *((_WORD *)a2 + 855);
    *(_DWORD *)((char *)a2 + 1706) = v74 | 8;
  }
  unsigned int v75 = nw_connection_get_event_milliseconds(v24, 4, 4, &v410, 0);
  if (v75 == -1) {
    goto LABEL_97;
  }
  unsigned int v76 = v75;
  if (v75 >= v70)
  {
    a2->proxy_milliseconds = v75 - v70;
    goto LABEL_97;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v77 = (id)gLogObj;
  buf[0] = 136446722;
  *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
  LOWORD(buf[3]) = 1024;
  *(_DWORD *)((char *)&buf[3] + 2) = v76;
  HIWORD(buf[4]) = 1024;
  buf[5] = v70;
  unint64_t v78 = (char *)_os_log_send_and_compose_impl();

  v428[0] = 16;
  LOBYTE(v392) = 0;
  if (!__nwlog_fault(v78, v428, &v392))
  {
LABEL_95:
    int v71 = v382;
    if (!v78) {
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  if (v428[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v79 = (id)gLogObj;
    os_log_type_t v80 = v428[0];
    if (os_log_type_enabled(v79, (os_log_type_t)v428[0]))
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v76;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s proxy_finish %u < proxy_start %u", (uint8_t *)buf, 0x18u);
    }
LABEL_72:

    goto LABEL_95;
  }
  if (!(_BYTE)v392)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v79 = (id)gLogObj;
    os_log_type_t v87 = v428[0];
    if (os_log_type_enabled(v79, (os_log_type_t)v428[0]))
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v76;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl(&dword_1830D4000, v79, v87, "%{public}s proxy_finish %u < proxy_start %u, backtrace limit exceeded", (uint8_t *)buf, 0x18u);
    }
    goto LABEL_72;
  }
  os_log_type_t v81 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v82 = (id)gLogObj;
  os_log_type_t v83 = v428[0];
  BOOL v84 = os_log_type_enabled(v82, (os_log_type_t)v428[0]);
  if (!v81)
  {
    if (v84)
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v76;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s proxy_finish %u < proxy_start %u, no backtrace", (uint8_t *)buf, 0x18u);
    }

    goto LABEL_95;
  }
  if (v84)
  {
    buf[0] = 136446978;
    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = v76;
    HIWORD(buf[4]) = 1024;
    buf[5] = v70;
    LOWORD(buf[6]) = 2082;
    *(void *)((char *)&buf[6] + 2) = v81;
    _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s proxy_finish %u < proxy_start %u, dumping backtrace:%{public}s", (uint8_t *)buf, 0x22u);
  }

  free(v81);
  int v71 = v382;
  if (v78) {
LABEL_96:
  }
    free(v78);
LABEL_97:
  if ((v55 & 1) == 0)
  {
    uint64_t v88 = (id *)v377;
    if (v88)
    {
      unint64_t v89 = v88;
      id v90 = v88[23];

      if (!v90) {
        goto LABEL_109;
      }
      os_log_type_t v91 = v90;
      uint64_t v92 = v91;
      int v93 = 1;
      switch(v91[38])
      {
        case 1:
          int v93 = v91[39];
          break;
        case 2:
          int v93 = 1002;
          break;
        case 3:
          int v93 = 1001;
          break;
        case 4:
          break;
        default:
          int v93 = 0;
          break;
      }

      os_log_type_t v94 = v385;
      v385->used_proxy_os_log_type_t type = v93;
      id v90 = v92;
      id v95 = v90;
      if (v385->used_proxy_type == 1)
      {
        os_log_type_t v96 = v89;
        id v95 = v96[24];

        os_log_type_t v94 = v385;
        if (!v95) {
          goto LABEL_109;
        }
      }
      *(void *)buf = 0;
      *(void *)&buf[2] = buf;
      *(void *)&uint8_t buf[4] = 0x2020000000;
      LOBYTE(buf[6]) = 0;
      v409[0] = MEMORY[0x1E4F143A8];
      v409[1] = 3221225472;
      v409[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_45;
      v409[3] = &unk_1E5249B80;
      v409[4] = buf;
      v409[5] = v94;
      nw_proxy_config_enumerate_endpoints(v95, v409);
      _Block_object_dispose(buf, 8);
LABEL_108:

LABEL_109:
      int v71 = v382;
      goto LABEL_110;
    }
    uint64_t v265 = __nwlog_obj();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
    unint64_t v266 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    LOBYTE(v392) = 0;
    if (__nwlog_fault(v266, v428, &v392))
    {
      if (v428[0] == 17)
      {
        unint64_t v267 = __nwlog_obj();
        os_log_type_t v268 = v428[0];
        if (os_log_type_enabled(v267, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
          _os_log_impl(&dword_1830D4000, v267, v268, "%{public}s called with null parameters", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v392)
        {
          unint64_t v278 = (char *)__nw_create_backtrace_string();
          unint64_t v279 = __nwlog_obj();
          os_log_type_t v280 = v428[0];
          BOOL v281 = os_log_type_enabled(v279, (os_log_type_t)v428[0]);
          if (v278)
          {
            if (v281)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v278;
              _os_log_impl(&dword_1830D4000, v279, v280, "%{public}s called with null parameters, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v278);
          }
          else
          {
            if (v281)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
              _os_log_impl(&dword_1830D4000, v279, v280, "%{public}s called with null parameters, no backtrace", (uint8_t *)buf, 0xCu);
            }
          }
          goto LABEL_552;
        }
        unint64_t v267 = __nwlog_obj();
        os_log_type_t v287 = v428[0];
        if (os_log_type_enabled(v267, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
          _os_log_impl(&dword_1830D4000, v267, v287, "%{public}s called with null parameters, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_552:
    if (v266) {
      free(v266);
    }
    id v95 = 0;
    id v90 = 0;
    goto LABEL_108;
  }
LABEL_110:
  if (!v71) {
    goto LABEL_150;
  }
  v408[0] = MEMORY[0x1E4F143A8];
  v408[1] = 3221225472;
  v408[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2_46;
  v408[3] = &__block_descriptor_40_e42_v16__0__NSObject_OS_nw_endpoint_handler__8l;
  v408[4] = v385;
  nw_endpoint_handler_access_proxy_handler(v379, v408);
LABEL_112:
  uint64_t v97 = v379;
  while (1)
  {
    uint64_t v98 = v97;
    int mode = v98->mode;

    if (mode == 4) {
      break;
    }
    id v100 = v98;
    uint64_t v97 = (NWConcrete_nw_endpoint_handler *)v100[9];

    if (!v97) {
      goto LABEL_150;
    }
  }
  unint64_t v101 = (unsigned int *)((char *)v385 + 1706);
  *(_DWORD *)((char *)v385 + 1706) |= 0x20u;
  id v102 = v24;
  LOWORD(buf[0]) = WORD2(v98) ^ WORD1(v98) ^ HIWORD(v98) ^ (unsigned __int16)v98;
  unsigned int v103 = nw_connection_get_event_milliseconds(v102, 5, 3, buf, 0);
  unsigned int v104 = nw_connection_get_event_milliseconds(v102, 5, 4, buf, 0);
  BOOL v105 = v104 == -1 || v103 == -1;
  if (v105) {
    BOOL v106 = v104 != -1;
  }
  else {
    BOOL v106 = v103 >= v104;
  }

  int v107 = 256;
  if (!v106) {
    int v107 = 0;
  }
  unint64_t v108 = *(_DWORD *)((char *)v385 + 1706) & 0xFFFFFEFF | ((unint64_t)*((unsigned __int16 *)v385 + 855) << 32);
  *unint64_t v101 = *v101 & 0xFFFFFEFF | v107;
  *((_WORD *)v385 + 855) = WORD2(v108);
  uint64_t v109 = v98;
  uint64_t v110 = v109;
  if (v98->mode != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v114 = (id)gLogObj;
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
    long long v115 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    LOBYTE(v392) = 0;
    if (__nwlog_fault(v115, v428, &v392))
    {
      if (v428[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v116 = (id)gLogObj;
        os_log_type_t v117 = v428[0];
        if (os_log_type_enabled(v116, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl(&dword_1830D4000, v116, v117, "%{public}s Endpoint handler is not in fallback mode", (uint8_t *)buf, 0xCu);
        }
      }
      else if ((_BYTE)v392)
      {
        long long v118 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v116 = (id)gLogObj;
        os_log_type_t v119 = v428[0];
        BOOL v120 = os_log_type_enabled(v116, (os_log_type_t)v428[0]);
        if (v118)
        {
          if (v120)
          {
            buf[0] = 136446466;
            *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
            LOWORD(buf[3]) = 2082;
            *(void *)((char *)&buf[3] + 2) = v118;
            _os_log_impl(&dword_1830D4000, v116, v119, "%{public}s Endpoint handler is not in fallback mode, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(v118);
          if (!v115) {
            goto LABEL_146;
          }
          goto LABEL_145;
        }
        if (v120)
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl(&dword_1830D4000, v116, v119, "%{public}s Endpoint handler is not in fallback mode, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v116 = (id)gLogObj;
        os_log_type_t v121 = v428[0];
        if (os_log_type_enabled(v116, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl(&dword_1830D4000, v116, v121, "%{public}s Endpoint handler is not in fallback mode, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }
    }
    if (!v115)
    {
LABEL_146:

      int v113 = 0;
      goto LABEL_147;
    }
LABEL_145:
    free(v115);
    goto LABEL_146;
  }
  unint64_t v111 = (unsigned __int8 *)v109[31];
  if (!v111)
  {
    unint64_t v274 = __nwlog_obj();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
    unint64_t v275 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    LOBYTE(v392) = 0;
    if (__nwlog_fault(v275, v428, &v392))
    {
      if (v428[0] == 17)
      {
        int v276 = __nwlog_obj();
        os_log_type_t v277 = v428[0];
        if (os_log_type_enabled(v276, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
          _os_log_impl(&dword_1830D4000, v276, v277, "%{public}s called with null fallback", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v392)
        {
          unint64_t v282 = (char *)__nw_create_backtrace_string();
          unint64_t v283 = __nwlog_obj();
          os_log_type_t v284 = v428[0];
          BOOL v285 = os_log_type_enabled(v283, (os_log_type_t)v428[0]);
          if (v282)
          {
            if (v285)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v282;
              _os_log_impl(&dword_1830D4000, v283, v284, "%{public}s called with null fallback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v282);
          }
          else
          {
            if (v285)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
              _os_log_impl(&dword_1830D4000, v283, v284, "%{public}s called with null fallback, no backtrace", (uint8_t *)buf, 0xCu);
            }
          }
          goto LABEL_561;
        }
        int v276 = __nwlog_obj();
        os_log_type_t v375 = v428[0];
        if (os_log_type_enabled(v276, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
          _os_log_impl(&dword_1830D4000, v276, v375, "%{public}s called with null fallback, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_561:
    if (v275) {
      free(v275);
    }
    goto LABEL_146;
  }
  int v112 = v111[108];

  int v113 = (32 * v112) & 0x40;
LABEL_147:
  uint64_t v122 = *v101;
  unint64_t v123 = v122 & 0xFFFFFFFFFFFFFFBFLL | ((unint64_t)*((unsigned __int16 *)v385 + 855) << 32);
  *unint64_t v101 = v122 & 0xFFFFFFBF | v113;
  *((_WORD *)v385 + 855) = WORD2(v123);
  int v124 = nw_endpoint_handler_used_prefer_fallback(v110);
  int v125 = 128;
  if (!v124) {
    int v125 = 0;
  }
  unint64_t v126 = *(_DWORD *)((char *)v385 + 1706) & 0xFFFFFF7F | ((unint64_t)*((unsigned __int16 *)v385 + 855) << 32);
  *unint64_t v101 = *v101 & 0xFFFFFF7F | v125;
  *((_WORD *)v385 + 855) = WORD2(v126);

LABEL_150:
  v385->privacy_stance = v24->privacy_stance;
  long long v127 = v24;
  long long v128 = v381->parameters;

  if (!v128) {
    goto LABEL_172;
  }
  long long v129 = v128;
  long long v130 = *(char **)(*((void *)v129 + 13) + 112);

  if (!v130) {
    goto LABEL_172;
  }
  if (v130 == "com.apple.news.urlresolution" || !strcmp(v130, "com.apple.news.urlresolution"))
  {
    char v131 = 1;
  }
  else if (v130 == "com.apple.news.embedded-content" || !strcmp(v130, "com.apple.news.embedded-content"))
  {
    char v131 = 2;
  }
  else
  {
    if (v130 == "com.apple.exposurenotification.sensitive" || !strcmp(v130, "com.apple.exposurenotification.sensitive")) {
      goto LABEL_172;
    }
    if (v130 == "com.apple.trustd.TrustURLSession" || !strcmp(v130, "com.apple.trustd.TrustURLSession"))
    {
      char v131 = 4;
    }
    else if (v130 == "com.apple.dprivacyd.upload" || !strcmp(v130, "com.apple.dprivacyd.upload"))
    {
      char v131 = 5;
    }
    else if (v130 == "com.apple.networkQuality.private-relay" {
           || !strcmp(v130, "com.apple.networkQuality.private-relay"))
    }
    {
      char v131 = 6;
    }
    else if (v130 == "com.apple.CommCenter.BrandedCalling" || !strcmp(v130, "com.apple.CommCenter.BrandedCalling"))
    {
      char v131 = 7;
    }
    else if (v130 == "com.apple.ap.promotedcontentd.proxied-requests" {
           || !strcmp(v130, "com.apple.ap.promotedcontentd.proxied-requests"))
    }
    {
      char v131 = 8;
    }
    else if (v130 == "com.apple.appstored.skadnetwork.crowdanonymity" {
           || !strcmp(v130, "com.apple.appstored.skadnetwork.crowdanonymity"))
    }
    {
      char v131 = 9;
    }
    else
    {
      if (v130 != "com.apple.Passwords.PRIconFetching" && strcmp(v130, "com.apple.Passwords.PRIconFetching"))
      {
LABEL_172:
        char v131 = 0;
        goto LABEL_175;
      }
      char v131 = 10;
    }
  }
LABEL_175:

  long long v132 = v385;
  v385->privacy_proxy_client = v131;
  v385->protocol_establishment_reports[0].protocol_index = -1;
  v385->protocol_establishment_reports[1].protocol_index = -1;
  v385->protocol_establishment_reports[2].protocol_index = -1;
  v385->protocol_establishment_reports[3].protocol_index = -1;
  v385->protocol_establishment_reports[4].protocol_index = -1;
  v385->protocol_establishment_reports[5].protocol_index = -1;
  v385->protocol_establishment_reports[6].protocol_index = -1;
  v385->protocol_establishment_reports[7].protocol_index = -1;
  v385->protocol_establishment_reports[8].protocol_index = -1;
  v385->protocol_establishment_reports[9].protocol_index = -1;
  id v133 = nw_connection_copy_establishment_report_on_queue(v127);
  v383 = v133;
  if (v133)
  {
    uint64_t v134 = v133;
    unint64_t v135 = v134[1];

    v385->attempt_delay_msecs = v135;
    unint64_t v136 = v134;
    unint64_t v137 = v136[2];

    v385->attempt_establishment_msecs = v137;
    *(void *)v428 = 0;
    *(void *)&v428[8] = v428;
    *(void *)&v428[16] = 0x2020000000;
    char v429 = 0;
    v404[0] = MEMORY[0x1E4F143A8];
    v404[1] = 3221225472;
    v404[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_3;
    v404[3] = &unk_1E5249CD0;
    v406 = v428;
    v407 = v385;
    uint64_t v138 = v127;
    v405 = v138;
    unint64_t v139 = v136;
    int v140 = v404;
    uint64_t v141 = (atomic_uchar *)v139[8];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[2] = 3221225472;
    *(void *)&uint8_t buf[4] = __nw_establishment_report_enumerate_protocols_block_invoke;
    *(void *)&buf[6] = &unk_1E524AE90;
    unint64_t v142 = v140;
    *(void *)&buf[8] = v142;
    nw_array_apply(v141, (uint64_t)buf);

    if ((v385->privacy_stance & 0xFE) == 2)
    {
      *(unsigned char *)(*(void *)&v428[8] + 24) = 0;
      v400[0] = MEMORY[0x1E4F143A8];
      v400[1] = 3221225472;
      v400[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_48;
      v400[3] = &unk_1E5249CF8;
      v402 = v428;
      v403 = v385;
      v401 = v138;
      int v143 = v139;
      uint64_t v144 = v400;
      unint64_t v145 = (atomic_uchar *)v143[5];
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[2] = 3221225472;
      *(void *)&uint8_t buf[4] = __nw_establishment_report_enumerate_proxy_endpoints_block_invoke;
      *(void *)&buf[6] = &unk_1E524AE90;
      unint64_t v146 = v144;
      *(void *)&buf[8] = v146;
      nw_array_apply(v145, (uint64_t)buf);
    }
    _Block_object_dispose(v428, 8);
LABEL_186:
    long long v132 = v385;
    goto LABEL_187;
  }
  int v147 = v381->parameters;
  if (v147 && !nw_path_parameters_get_logging_disabled(*((void *)v147 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v148 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
    {
      unsigned int top_id = v127->top_id;
      buf[0] = 136446466;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = top_id;
      _os_log_impl(&dword_1830D4000, v148, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] did not receive establishment report", (uint8_t *)buf, 0x12u);
    }

    goto LABEL_186;
  }
LABEL_187:
  if (v382)
  {
    v397[0] = MEMORY[0x1E4F143A8];
    v397[1] = 3221225472;
    v397[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_50;
    v397[3] = &unk_1E5249C48;
    unint64_t v150 = v127;
    v398 = v150;
    v399 = v132;
    nw_endpoint_handler_access_resolver_handler(v379, v397);
    v393[0] = MEMORY[0x1E4F143A8];
    v393[1] = 3221225472;
    v394 = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_52;
    v395 = &__block_descriptor_40_e42_v16__0__NSObject_OS_nw_endpoint_handler__8l;
    v396 = v132;
    int v151 = v379;
    uint64_t v152 = v393;
    unint64_t v153 = v151;
    unint64_t v154 = v153;
    while (1)
    {
      unint64_t v154 = v154;
      int v155 = v154->mode;

      if (v155 == 5) {
        break;
      }
      uint64_t v156 = v154;
      unint64_t v154 = (NWConcrete_nw_endpoint_handler *)v156[9];

      if (!v154) {
        goto LABEL_193;
      }
    }
    v394((uint64_t)v152, v154);
LABEL_193:

    nw_endpoint_t v157 = nw_endpoint_handler_copy_endpoint(v153);
    nw_endpoint_t v158 = v157;
    if (v157)
    {
      int v159 = v157;
      int v160 = [v159 type];

      BOOL v105 = v160 == 1;
      unint64_t v161 = v385;
      unint64_t v162 = v381;
      if (v105) {
        v385->connected_address_family = nw_endpoint_get_address(v159)->sa_family;
      }
      goto LABEL_215;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v163 = (id)gLogObj;
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    uint64_t v164 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    LOBYTE(v392) = 0;
    if (__nwlog_fault(v164, v428, &v392))
    {
      if (v428[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v165 = (id)gLogObj;
        os_log_type_t v166 = v428[0];
        if (os_log_type_enabled(v165, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v165, v166, "%{public}s called with null connected_endpoint", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v392)
        {
          int v167 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v168 = (id)gLogObj;
          os_log_type_t v169 = v428[0];
          BOOL v170 = os_log_type_enabled(v168, (os_log_type_t)v428[0]);
          if (v167)
          {
            if (v170)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v167;
              _os_log_impl(&dword_1830D4000, v168, v169, "%{public}s called with null connected_endpoint, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v167);
          }
          else
          {
            if (v170)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              _os_log_impl(&dword_1830D4000, v168, v169, "%{public}s called with null connected_endpoint, no backtrace", (uint8_t *)buf, 0xCu);
            }
          }
          goto LABEL_213;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v165 = (id)gLogObj;
        os_log_type_t v171 = v428[0];
        if (os_log_type_enabled(v165, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v165, v171, "%{public}s called with null connected_endpoint, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_213:
    unint64_t v161 = v385;
    unint64_t v162 = v381;
    if (v164) {
      free(v164);
    }
LABEL_215:
    uint64_t v172 = nw_endpoint_handler_copy_connected_path(v153);
    uint64_t v173 = (NWConcrete_nw_path *)v172;
    if (!v172)
    {
LABEL_240:
      v161->transport_protocol = nw_parameters_get_ip_protocol(v384);
      if (nw_parameters_get_ip_protocol(v384) == 6 && !nw_parameters_get_multipath(v384))
      {
        uint64_t v427 = 0;
        long long v425 = 0u;
        long long v426 = 0u;
        long long v423 = 0u;
        long long v424 = 0u;
        long long v421 = 0u;
        long long v422 = 0u;
        long long v419 = 0u;
        long long v420 = 0u;
        long long v417 = 0u;
        long long v418 = 0u;
        long long v415 = 0u;
        memset(v416, 0, sizeof(v416));
        memset(buf, 0, sizeof(buf));
        uint64_t v177 = v150;
        nw_context_assert_queue(v380->context);
        unint64_t v178 = v177;
        if (nw_parameters_get_ip_protocol(v162->parameters) == 6)
        {
          BOOL v179 = nw_endpoint_handler_fillout_tcp_info(v178[18], buf);

          unint64_t v161 = v385;
          if (v179)
          {
            unint64_t v180 = *(void *)((char *)v416 + 12);
            v385->bytes_in = *(void *)((char *)&v416[2] + 12);
            v385->bytes_out = v180;
            *(_OWORD *)&v385->bytes_duplicate = *(_OWORD *)((char *)&v416[3] + 4);
            v385->bytes_retransmitted = *(void *)((char *)&v416[1] + 4);
            v385->packets_in = *(void *)((char *)&v416[2] + 4);
            v385->packets_out = *(void *)((char *)v416 + 4);
            int32x4_t v181 = vrev64q_s32(*(int32x4_t *)&buf[5]);
            v181.i64[0] = *(void *)&buf[5];
            *(int32x4_t *)&v385->current_rtt_msecs = v181;
            v385->syn_retransmission_uint64_t count = BYTE12(v416[4]);
            if (nw_parameters_get_tfo(v384) && (BYTE4(v417) & 8) != 0) {
              *(_DWORD *)((char *)v385 + 1706) |= 0x100000u;
            }
          }
        }
        else
        {

          unint64_t v161 = v385;
        }
      }
      if (nw_parameters_get_ip_protocol(v384) == 6)
      {
        if (nw_endpoint_handler_is_multipath(v150[18]))
        {
          *(void *)buf = 0;
          if (nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(v150, (uint64_t)buf))
          {
            int v184 = *(int ***)buf;
            if (*(void *)buf)
            {
              if (**(void **)buf)
              {
                uint64_t v185 = *(void *)(**(void **)buf + 32);
                if (v185)
                {
                  v182.i32[0] = 0;
                  v183.i32[0] = *(unsigned char *)(v185 + 116) & 1;
                  int8x16_t v186 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v183, v182), 0);
                  int8x16_t v187 = *(int8x16_t *)(v185 + 120);
                  int64x2_t v188 = (int64x2_t)vbicq_s8(v187, v186);
                  int64x2_t v189 = (int64x2_t)vandq_s8(v187, v186);
                  int8x16_t v190 = *(int8x16_t *)(v185 + 48);
                  int32x2_t v191 = vdup_n_s32((*(unsigned char *)(v185 + 44) & 1) == 0);
                  v192.i64[0] = v191.u32[0];
                  v192.i64[1] = v191.u32[1];
                  int32x4_t v193 = (int32x4_t)vcltzq_s64(vshlq_n_s64(v192, 0x3FuLL));
                  int64x2_t v194 = (int64x2_t)vbicq_s8(v190, (int8x16_t)v193);
                  int64x2_t v195 = (int64x2_t)vandq_s8(v190, (int8x16_t)v193);
                  v193.i32[0] = *(unsigned char *)(v185 + 188) & 1;
                  int8x16_t v196 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v193, v182), 0);
                  int8x16_t v197 = *(int8x16_t *)(v185 + 192);
                  int64x2_t v198 = (int64x2_t)vbicq_s8(v197, v196);
                  int32x4_t v199 = (int32x4_t)vandq_s8(v197, v196);
                  int64x2_t v200 = vaddq_s64(v189, (int64x2_t)v199);
                  v199.i32[0] = *(unsigned char *)(v185 + 260) & 1;
                  int8x16_t v201 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v199, v182), 0);
                  int8x16_t v202 = *(int8x16_t *)(v185 + 264);
                  int64x2_t v203 = (int64x2_t)vbicq_s8(v202, v201);
                  int64x2_t v204 = vaddq_s64(v195, vaddq_s64(v200, (int64x2_t)vandq_s8(v202, v201)));
                  int64x2_t v205 = vaddq_s64(v194, vaddq_s64(vaddq_s64(v188, v198), v203));
                  uint64_t v206 = *(unsigned int *)((char *)v161 + 1706);
                  unint64_t v207 = v206 & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)*((unsigned __int16 *)v161 + 855) << 32);
                  *(_DWORD *)((char *)v161 + 1706) = v206 & 0xFFBFFFFF | ((*(_DWORD *)(v185 + 328) & 1) << 22);
                  *((_WORD *)v161 + 855) = WORD2(v207);
                  *(int8x16_t *)&v161->multipath_bytes_in_cell = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL);
                  *(int8x16_t *)&v161->multipath_bytes_in_wifCFIndex i = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL);
                  *(_OWORD *)&v161->multipath_bytes_in_initial = *(_OWORD *)(v185 + 24);
                  int8x16_t v208 = (int8x16_t)vaddq_s64(v204, v205);
                  *(int8x16_t *)&v161->bytes_in = vextq_s8(v208, v208, 8uLL);
                  v161->mptcp_version = 0;
                  int v209 = **v184;
                  if ((v209 & 0x500) == 0x100)
                  {
                    if ((v209 & 0x1000) != 0) {
                      char v210 = 2;
                    }
                    else {
                      char v210 = 1;
                    }
                    v161->mptcp_version = v210;
                  }
                }
              }
            }
            freemptcpinfo(v184);
          }
        }
      }
      if (nw_parameters_get_upper_transport_protocol(v384) != 253) {
        goto LABEL_287;
      }
      *(void *)v428 = 0;
      uint64_t v392 = 0;
      char v413 = 0;
      v161->transport_protocol = 253;
      nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v150, (uint64_t *)v428, &v392, &v413, 0);
      uint64_t v211 = *(void *)v428;
      if (*(void *)v428 && v392)
      {
        v161->bytes_in = *(void *)(*(void *)v428 + 48);
        v161->bytes_out = *(void *)(v211 + 72);
        *(_OWORD *)&v161->bytes_duplicate = *(_OWORD *)(v211 + 56);
        *(_OWORD *)&v161->bytes_retransmitted = *(_OWORD *)(v211 + 80);
        *(_OWORD *)&v161->ecn_capable_packets_acked = *(_OWORD *)(v211 + 96);
        v161->ecn_capable_packets_lost = *(void *)(v211 + 112);
        *(_OWORD *)&v161->packets_in = *(_OWORD *)(v211 + 8);
        *(_OWORD *)&v161->ect0_packets_in = *(_OWORD *)(v211 + 24);
        v161->packets_out = *(void *)(v211 + 40);
        int32x4_t v212 = vuzp1q_s32(*(int32x4_t *)(v211 + 120), *(int32x4_t *)(v211 + 136));
        *(int32x4_t *)&v161->current_rtt_msecs = vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v212, (int8x16_t)v212, 4uLL), v212);
        v161->syn_retransmission_uint64_t count = 0;
        if (!v413) {
          goto LABEL_287;
        }
        goto LABEL_285;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v213 = (id)gLogObj;
      buf[0] = 136446210;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      uint64_t v214 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v390 = 0;
      if (__nwlog_fault((const char *)v214, &type, &v390))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v215 = (id)gLogObj;
          os_log_type_t v216 = type;
          if (os_log_type_enabled(v215, type))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v215, v216, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed", (uint8_t *)buf, 0xCu);
          }
        }
        else if (v390)
        {
          uint64_t v217 = __nw_create_backtrace_string();
          if (v217)
          {
            unint64_t v218 = (char *)v217;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v219 = (id)gLogObj;
            os_log_type_t v220 = type;
            if (os_log_type_enabled(v219, type))
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v218;
              _os_log_impl(&dword_1830D4000, v219, v220, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v218);
            if (!v214)
            {
LABEL_284:
              uint64_t v211 = *(void *)v428;
              if (!v413)
              {
LABEL_287:

                long long v132 = v385;
                goto LABEL_288;
              }
LABEL_285:
              if (v211) {
                free((void *)v211);
              }
              goto LABEL_287;
            }
LABEL_283:
            free(v214);
            goto LABEL_284;
          }
          unint64_t v215 = __nwlog_obj();
          os_log_type_t v222 = type;
          if (os_log_type_enabled(v215, type))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v215, v222, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, no backtrace", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v215 = (id)gLogObj;
          os_log_type_t v221 = type;
          if (os_log_type_enabled(v215, type))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v215, v221, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }
      }
      if (!v214) {
        goto LABEL_284;
      }
      goto LABEL_283;
    }
    *(_DWORD *)((char *)v161 + 1706) |= 0x4000u;
    if (nw_path_uses_interface_type(v172, nw_interface_type_wifi))
    {
      v161->connected_interface_os_log_type_t type = 1;
    }
    else if (nw_path_uses_interface_type(&v173->super, nw_interface_type_cellular))
    {
      v161->connected_interface_os_log_type_t type = 2;
    }
    else if (nw_path_uses_interface_type(&v173->super, nw_interface_type_wired))
    {
      v161->connected_interface_os_log_type_t type = 3;
    }
    else if (nw_path_uses_interface_type(&v173->super, nw_interface_type_loopback))
    {
      v161->connected_interface_os_log_type_t type = 4;
    }
    else
    {
      v161->connected_interface_os_log_type_t type = 0;
    }
    if (nw_path_uses_interface_subtype(v173, 1001))
    {
      v161->connected_interface_subos_log_type_t type = 1001;
    }
    else if (nw_path_uses_interface_subtype(v173, 1002))
    {
      v161->connected_interface_subos_log_type_t type = 1002;
    }
    else if (nw_path_uses_interface_subtype(v173, 4001))
    {
      v161->connected_interface_subos_log_type_t type = 4001;
    }
    else if (nw_path_uses_interface_subtype(v173, 5001))
    {
      v161->connected_interface_subos_log_type_t type = 5001;
    }
    else
    {
      v161->connected_interface_subos_log_type_t type = 0;
    }
    if (nw_path_uses_nexus_internal(v173, 0))
    {
      unsigned int nexus_protocol_level = nw_path_get_nexus_protocol_level(v173);
      if (nexus_protocol_level >= 6)
      {
LABEL_239:
        v176.i64[0] = v173->estimates.up;
        v176.i64[1] = v173->estimates.down;
        *(int8x16_t *)&v161->estimated_upload_throughput = vbicq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_n_s64(0x8000uLL), v176), (int8x16_t)vcgtq_u64(v176, (uint64x2_t)vdupq_n_s64(0x30uLL))), (int8x16_t)vceqzq_s64((int64x2_t)v176));
        goto LABEL_240;
      }
      int v175 = *((_DWORD *)&unk_183E23430 + nexus_protocol_level);
    }
    else
    {
      int v175 = 1;
    }
    v161->stack_level = v175;
    goto LABEL_239;
  }
LABEL_288:
  v132->flow_connect_milliseconds = nw_connection_get_transport_connect_milliseconds(v127, 0, 0);
  LOWORD(v392) = 0;
  unsigned int v223 = nw_connection_get_event_milliseconds(v127, 3, 6, &v392, 0);
  unint64_t v224 = v380;
  if (v223 == -1)
  {
    unsigned int v223 = nw_connection_get_event_milliseconds(v127, 3, 13, &v392, 0);
    if (v223 == -1) {
      goto LABEL_330;
    }
  }
  unsigned int v225 = nw_connection_get_event_milliseconds(v127, 3, 10, &v392, 0);
  if (v225 == -1)
  {
    uint64_t v231 = v127;
    unint64_t v232 = v231;
    if (v231)
    {
      if (v231->used_timestamps)
      {
        unint64_t v233 = 0;
        timestamps = v231->timestamps;
        p_event = &timestamps->var1.event;
        while (*p_event != 8 || *(p_event - 1) != 1)
        {
          ++v233;
          p_event += 8;
          if (v233 >= v231->used_timestamps)
          {

            goto LABEL_413;
          }
        }
        unint64_t v236 = nw_delta_nanos(v231->start_time, *(&timestamps->var0 + 2 * v233));

        unint64_t v237 = v236 / 0xF4240;
        unint64_t v224 = v380;
        long long v132 = v385;
        if ((v236 / 0xF4240) == -1) {
          goto LABEL_330;
        }
        if (v237 < v223)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v238 = (id)gLogObj;
          buf[0] = 136446722;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v236 / 0xF4240;
          HIWORD(buf[4]) = 1024;
          buf[5] = v223;
          uint64_t v239 = (char *)_os_log_send_and_compose_impl();

          v428[0] = 16;
          char v413 = 0;
          if (__nwlog_fault(v239, v428, &v413))
          {
            if (v428[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unint64_t v240 = (id)gLogObj;
              os_log_type_t v241 = v428[0];
              if (os_log_type_enabled(v240, (os_log_type_t)v428[0]))
              {
                buf[0] = 136446722;
                *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = v237;
                HIWORD(buf[4]) = 1024;
                buf[5] = v223;
                _os_log_impl(&dword_1830D4000, v240, v241, "%{public}s connection_cancel %u < flow_finish %u", (uint8_t *)buf, 0x18u);
              }
            }
            else
            {
              if (v413)
              {
                unint64_t v249 = (char *)__nw_create_backtrace_string();
                char v250 = __nwlog_obj();
                os_log_type_t v251 = v428[0];
                BOOL v252 = os_log_type_enabled(v250, (os_log_type_t)v428[0]);
                if (v249)
                {
                  if (v252)
                  {
                    buf[0] = 136446978;
                    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = v237;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v223;
                    LOWORD(buf[6]) = 2082;
                    *(void *)((char *)&buf[6] + 2) = v249;
                    _os_log_impl(&dword_1830D4000, v250, v251, "%{public}s connection_cancel %u < flow_finish %u, dumping backtrace:%{public}s", (uint8_t *)buf, 0x22u);
                  }

                  free(v249);
                }
                else
                {
                  if (v252)
                  {
                    buf[0] = 136446722;
                    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = v237;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v223;
                    _os_log_impl(&dword_1830D4000, v250, v251, "%{public}s connection_cancel %u < flow_finish %u, no backtrace", (uint8_t *)buf, 0x18u);
                  }
                }
                goto LABEL_346;
              }
              unint64_t v240 = __nwlog_obj();
              os_log_type_t v253 = v428[0];
              if (os_log_type_enabled(v240, (os_log_type_t)v428[0]))
              {
                buf[0] = 136446722;
                *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = v237;
                HIWORD(buf[4]) = 1024;
                buf[5] = v223;
                _os_log_impl(&dword_1830D4000, v240, v253, "%{public}s connection_cancel %u < flow_finish %u, backtrace limit exceeded", (uint8_t *)buf, 0x18u);
              }
            }
          }
LABEL_346:
          if (v239) {
            free(v239);
          }
LABEL_413:
          long long v132 = v385;
          if ((*((unsigned char *)v380 + 109) & 0x40) != 0) {
            goto LABEL_414;
          }
          goto LABEL_331;
        }
        v385->flow_duration_milliseconds = v237 - v223;
LABEL_330:
        if ((*((unsigned char *)v224 + 109) & 0x40) != 0) {
          goto LABEL_414;
        }
        goto LABEL_331;
      }
LABEL_412:

      goto LABEL_413;
    }
    uint64_t v261 = __nwlog_obj();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
    unint64_t v262 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    char v413 = 0;
    if (__nwlog_fault(v262, v428, &v413))
    {
      if (v428[0] == 17)
      {
        unint64_t v263 = __nwlog_obj();
        os_log_type_t v264 = v428[0];
        if (os_log_type_enabled(v263, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_1830D4000, v263, v264, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if (v413)
        {
          unint64_t v270 = (char *)__nw_create_backtrace_string();
          unint64_t v271 = __nwlog_obj();
          os_log_type_t v272 = v428[0];
          BOOL v273 = os_log_type_enabled(v271, (os_log_type_t)v428[0]);
          if (v270)
          {
            if (v273)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v270;
              _os_log_impl(&dword_1830D4000, v271, v272, "%{public}s called with null connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v270);
          }
          else
          {
            if (v273)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
              _os_log_impl(&dword_1830D4000, v271, v272, "%{public}s called with null connection, no backtrace", (uint8_t *)buf, 0xCu);
            }
          }
          goto LABEL_410;
        }
        unint64_t v263 = __nwlog_obj();
        os_log_type_t v286 = v428[0];
        if (os_log_type_enabled(v263, (os_log_type_t)v428[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_1830D4000, v263, v286, "%{public}s called with null connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_410:
    if (v262) {
      free(v262);
    }
    goto LABEL_412;
  }
  unsigned int v226 = v225;
  if (v225 >= v223)
  {
    v132->flow_duration_milliseconds = v225 - v223;
    if ((*((unsigned char *)v380 + 109) & 0x40) != 0) {
      goto LABEL_414;
    }
    goto LABEL_331;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v227 = (id)gLogObj;
  buf[0] = 136446722;
  *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
  LOWORD(buf[3]) = 1024;
  *(_DWORD *)((char *)&buf[3] + 2) = v226;
  HIWORD(buf[4]) = 1024;
  buf[5] = v223;
  unint64_t v228 = (char *)_os_log_send_and_compose_impl();

  v428[0] = 16;
  char v413 = 0;
  if (!__nwlog_fault(v228, v428, &v413))
  {
LABEL_325:
    long long v132 = v385;
    if (!v228) {
      goto LABEL_327;
    }
    goto LABEL_326;
  }
  if (v428[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v229 = (id)gLogObj;
    os_log_type_t v230 = v428[0];
    if (os_log_type_enabled(v229, (os_log_type_t)v428[0]))
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v226;
      HIWORD(buf[4]) = 1024;
      buf[5] = v223;
      _os_log_impl(&dword_1830D4000, v229, v230, "%{public}s flow_disconnect %u < flow_finish %u", (uint8_t *)buf, 0x18u);
    }
LABEL_296:

    goto LABEL_325;
  }
  if (!v413)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v229 = (id)gLogObj;
    os_log_type_t v246 = v428[0];
    if (os_log_type_enabled(v229, (os_log_type_t)v428[0]))
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v226;
      HIWORD(buf[4]) = 1024;
      buf[5] = v223;
      _os_log_impl(&dword_1830D4000, v229, v246, "%{public}s flow_disconnect %u < flow_finish %u, backtrace limit exceeded", (uint8_t *)buf, 0x18u);
    }
    goto LABEL_296;
  }
  int v242 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v243 = (id)gLogObj;
  os_log_type_t v244 = v428[0];
  BOOL v245 = os_log_type_enabled(v243, (os_log_type_t)v428[0]);
  if (!v242)
  {
    if (v245)
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v226;
      HIWORD(buf[4]) = 1024;
      buf[5] = v223;
      _os_log_impl(&dword_1830D4000, v243, v244, "%{public}s flow_disconnect %u < flow_finish %u, no backtrace", (uint8_t *)buf, 0x18u);
    }

    goto LABEL_325;
  }
  if (v245)
  {
    buf[0] = 136446978;
    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = v226;
    HIWORD(buf[4]) = 1024;
    buf[5] = v223;
    LOWORD(buf[6]) = 2082;
    *(void *)((char *)&buf[6] + 2) = v242;
    _os_log_impl(&dword_1830D4000, v243, v244, "%{public}s flow_disconnect %u < flow_finish %u, dumping backtrace:%{public}s", (uint8_t *)buf, 0x22u);
  }

  free(v242);
  long long v132 = v385;
  if (v228) {
LABEL_326:
  }
    free(v228);
LABEL_327:
  if ((*((unsigned char *)v380 + 109) & 0x40) != 0)
  {
LABEL_414:
    unint64_t v248 = v383;
    int tls = nw_endpoint_handler_stack_uses_tls(v127->parent_endpoint_handler);
    if (v384) {
      char v289 = tls;
    }
    else {
      char v289 = 1;
    }
    if (v289)
    {
LABEL_419:
      uint64_t v247 = 1024;
      if (!tls) {
        uint64_t v247 = 0;
      }
      goto LABEL_421;
    }
LABEL_418:
    int tls = nw_parameters_get_tls(v384);
    goto LABEL_419;
  }
LABEL_331:
  uint64_t v247 = (uint64_t)v384;
  unint64_t v248 = v383;
  if (v384) {
    goto LABEL_418;
  }
LABEL_421:
  uint64_t v290 = (unsigned int *)((char *)v132 + 1706);
  unint64_t v291 = *(_DWORD *)((char *)v132 + 1706) & 0xFFFFFBFF | ((unint64_t)*((unsigned __int16 *)v132 + 855) << 32) | v247;
  *(_DWORD *)((char *)v132 + 1706) = v291;
  if (v248)
  {
    int v292 = (void *)nw_protocol_boringssl_copy_definition();
    double Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(v293);
    if (*(void *)(v295 + 2208))
    {
      inited = (void *)nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v297 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136446466;
        *(void *)&buf[1] = "nw_protocol_copy_swift_tls_definition_if_present";
        LOWORD(buf[3]) = 2048;
        *(void *)((char *)&buf[3] + 2) = inited;
        _os_log_impl(&dword_1830D4000, v297, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", (uint8_t *)buf, 0x16u);
      }
      unint64_t v248 = v383;
    }
    else
    {
      inited = 0;
    }
    v132->tls_milliseconds = nw_establishment_report_get_handshake_ms_for_protocol(v248, v292, inited);

    unint64_t v291 = *v290 | ((unint64_t)*((unsigned __int16 *)v132 + 855) << 32);
    long long v132 = v385;
  }
  else
  {
    v132->tls_milliseconds = 0;
  }
  *((_WORD *)v290 + 2) = WORD2(v291);
  *uint64_t v290 = v291 & 0xFFFF7FFF | (((~(_WORD)v291 & 0x4400) == 0) << 15);
  v132->tls_version = nw_connection_get_tls_version(v127);
  BOOL v298 = networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_tls13);
  int v299 = 2048;
  if (v298) {
    int v299 = 0;
  }
  unint64_t v300 = *v290 & 0xFFFFF7FF | ((unint64_t)*((unsigned __int16 *)v290 + 2) << 32);
  *uint64_t v290 = *v290 & 0xFFFFF7FF | v299;
  *((_WORD *)v290 + 2) = WORD2(v300);
  unint64_t v301 = (void *)nw_protocol_boringssl_copy_definition();
  v378 = nw_parameters_copy_protocol_options_for_definition(v384, v301);

  if (v378)
  {
    int v302 = v378;
    BOOL enable_encrypted_client_hello = sec_protocol_options_get_enable_encrypted_client_hello(v302);
    uint64_t v304 = 0x10000000000;
    if (!enable_encrypted_client_hello) {
      uint64_t v304 = 0;
    }
    unint64_t v305 = (*v290 | ((unint64_t)*((unsigned __int16 *)v290 + 2) << 32)) & 0xFFFFFEFFFFFFFFFFLL;
    *uint64_t v290 = *v290;
    *((_WORD *)v290 + 2) = (v305 | v304) >> 32;
  }
  if ((*v290 & 0x400) != 0)
  {
    int v306 = v127;
    uint64_t v307 = v306;
    if (v306->used_timestamps)
    {
      unint64_t v308 = 0;
      unint64_t v309 = v306->timestamps;
      int v310 = &v309->var1.event;
      while (*v310 != 5 || *(v310 - 1) != 5)
      {
        ++v308;
        v310 += 8;
        if (v308 >= v306->used_timestamps) {
          goto LABEL_443;
        }
      }
      unint64_t v311 = nw_delta_nanos(v306->start_time, *(&v309->var0 + 2 * v308));

      if ((v311 / 0xF4240) != -1) {
        *v290 |= 0x1000000u;
      }
    }
    else
    {
LABEL_443:
    }
  }
  unint64_t v312 = v127;
  uint64_t v313 = 0;
  do
  {
    uint64_t v314 = v313;
    if (v313 == 255) {
      break;
    }
    uint64_t v315 = v312;
    if (!v312)
    {
      v323 = __nwlog_obj();
      buf[0] = 136446210;
      *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
      v324 = (char *)_os_log_send_and_compose_impl();

      v428[0] = 16;
      char v413 = 0;
      if (__nwlog_fault(v324, v428, &v413))
      {
        if (v428[0] == 17)
        {
          v325 = __nwlog_obj();
          os_log_type_t v326 = v428[0];
          if (os_log_type_enabled(v325, (os_log_type_t)v428[0]))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_1830D4000, v325, v326, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          if (v413)
          {
            v327 = (char *)__nw_create_backtrace_string();
            v328 = __nwlog_obj();
            os_log_type_t v329 = v428[0];
            BOOL v330 = os_log_type_enabled(v328, (os_log_type_t)v428[0]);
            if (v327)
            {
              if (v330)
              {
                buf[0] = 136446466;
                *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
                LOWORD(buf[3]) = 2082;
                *(void *)((char *)&buf[3] + 2) = v327;
                _os_log_impl(&dword_1830D4000, v328, v329, "%{public}s called with null connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
              }

              free(v327);
            }
            else
            {
              if (v330)
              {
                buf[0] = 136446210;
                *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
                _os_log_impl(&dword_1830D4000, v328, v329, "%{public}s called with null connection, no backtrace", (uint8_t *)buf, 0xCu);
              }
            }
            goto LABEL_474;
          }
          v325 = __nwlog_obj();
          os_log_type_t v331 = v428[0];
          if (os_log_type_enabled(v325, (os_log_type_t)v428[0]))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_1830D4000, v325, v331, "%{public}s called with null connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }
      }
LABEL_474:
      if (v324) {
        free(v324);
      }
      LODWORD(v314) = 0;
LABEL_477:

      break;
    }
    unsigned __int16 used_timestamps = v312->used_timestamps;
    if (!used_timestamps) {
      goto LABEL_477;
    }
    uint64_t v317 = 0;
    unint64_t v318 = 0;
    LODWORD(v319) = -1;
    uint64_t v320 = v314;
    while (1)
    {
      int v322 = v312->timestamps;
      if (*(unsigned __int16 *)((char *)&v322->var1.event + v317) == 2
        && *(unsigned __int16 *)((char *)&v322->var1.domain + v317) == 6)
      {
        break;
      }
      uint64_t v321 = v320;
LABEL_450:
      ++v318;
      v317 += 16;
      uint64_t v320 = v321;
      if (v318 >= used_timestamps) {
        goto LABEL_456;
      }
    }
    uint64_t v321 = (v320 - 1);
    if (v321 < 0xFFFFFFFE) {
      goto LABEL_450;
    }
    unint64_t v319 = nw_delta_nanos(v312->start_time, *(unint64_t *)((char *)&v322->var0 + v317)) / 0xF4240uLL;
    if (v320 == -1)
    {
      unsigned __int16 used_timestamps = v312->used_timestamps;
      uint64_t v321 = 0xFFFFFFFFLL;
      goto LABEL_450;
    }
LABEL_456:

    uint64_t v313 = (v314 + 1);
  }
  while (v319 != -1);

  v385->data_stall_uint64_t count = v314;
  v332 = v312;
  uint64_t v333 = 0;
  do
  {
    uint64_t v334 = v333;
    if (v333 == 255) {
      break;
    }
    v335 = v332;
    if (!v312)
    {
      v343 = __nwlog_obj();
      buf[0] = 136446210;
      *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
      v344 = (char *)_os_log_send_and_compose_impl();

      v428[0] = 16;
      char v413 = 0;
      if (__nwlog_fault(v344, v428, &v413))
      {
        if (v428[0] == 17)
        {
          v345 = __nwlog_obj();
          os_log_type_t v346 = v428[0];
          if (os_log_type_enabled(v345, (os_log_type_t)v428[0]))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_1830D4000, v345, v346, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          if (v413)
          {
            v347 = (char *)__nw_create_backtrace_string();
            v348 = __nwlog_obj();
            os_log_type_t v349 = v428[0];
            BOOL v350 = os_log_type_enabled(v348, (os_log_type_t)v428[0]);
            if (v347)
            {
              if (v350)
              {
                buf[0] = 136446466;
                *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
                LOWORD(buf[3]) = 2082;
                *(void *)((char *)&buf[3] + 2) = v347;
                _os_log_impl(&dword_1830D4000, v348, v349, "%{public}s called with null connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
              }

              free(v347);
            }
            else
            {
              if (v350)
              {
                buf[0] = 136446210;
                *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
                _os_log_impl(&dword_1830D4000, v348, v349, "%{public}s called with null connection, no backtrace", (uint8_t *)buf, 0xCu);
              }
            }
            goto LABEL_508;
          }
          v345 = __nwlog_obj();
          os_log_type_t v351 = v428[0];
          if (os_log_type_enabled(v345, (os_log_type_t)v428[0]))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_1830D4000, v345, v351, "%{public}s called with null connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }
      }
LABEL_508:
      if (v344) {
        free(v344);
      }
      LODWORD(v334) = 0;
LABEL_511:

      break;
    }
    unsigned __int16 v336 = v312->used_timestamps;
    if (!v336) {
      goto LABEL_511;
    }
    uint64_t v337 = 0;
    unint64_t v338 = 0;
    LODWORD(v339) = -1;
    uint64_t v340 = v334;
    while (1)
    {
      v342 = v312->timestamps;
      if (*(unsigned __int16 *)((char *)&v342->var1.event + v337) == 1
        && *(unsigned __int16 *)((char *)&v342->var1.domain + v337) == 6)
      {
        break;
      }
      uint64_t v341 = v340;
LABEL_484:
      ++v338;
      v337 += 16;
      uint64_t v340 = v341;
      if (v338 >= v336) {
        goto LABEL_490;
      }
    }
    uint64_t v341 = (v340 - 1);
    if (v341 < 0xFFFFFFFE) {
      goto LABEL_484;
    }
    unint64_t v339 = nw_delta_nanos(v312->start_time, *(unint64_t *)((char *)&v342->var0 + v337)) / 0xF4240uLL;
    if (v340 == -1)
    {
      unsigned __int16 v336 = v312->used_timestamps;
      uint64_t v341 = 0xFFFFFFFFLL;
      goto LABEL_484;
    }
LABEL_490:

    uint64_t v333 = (v334 + 1);
  }
  while (v339 != -1);

  v385->connection_reuse_uint64_t count = v334;
  if ((*((unsigned char *)v381 + 108) & 0x20) != 0)
  {
    *(void *)buf = 0;
    *(void *)&buf[2] = buf;
    buf[6] = 0;
    *(void *)&uint8_t buf[4] = 0x2020000000;
    activities = (atomic_uchar *)v332->activities;
    v386[0] = MEMORY[0x1E4F143A8];
    v386[1] = 3221225472;
    v386[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_53;
    v386[3] = &unk_1E5249D20;
    v388 = buf;
    v353 = v332;
    v387 = v353;
    v389 = v385;
    nw_array_apply(activities, (uint64_t)v386);
    v354 = v381->parameters;
    if (v354 && !nw_path_parameters_get_logging_disabled(*((void *)v354 + 13)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v355 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v355, OS_LOG_TYPE_INFO))
      {
        unsigned int v356 = v353->top_id;
        int v357 = *(_DWORD *)(*(void *)&buf[2] + 24);
        *(_DWORD *)v428 = 136446722;
        *(void *)&v428[4] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
        *(_WORD *)&v428[12] = 1024;
        *(_DWORD *)&v428[14] = v356;
        *(_WORD *)&v428[18] = 1024;
        *(_DWORD *)&v428[20] = v357;
        _os_log_impl(&dword_1830D4000, v355, OS_LOG_TYPE_INFO, "%{public}s [C%u] Copied %u activities to connection report", v428, 0x18u);
      }
    }
    _Block_object_dispose(buf, 8);
  }
  BOOL quic_enabled = nw_settings_get_quic_enabled();
  uint64_t v359 = 0x200000000;
  if (!quic_enabled) {
    uint64_t v359 = 0;
  }
  unint64_t v360 = (*v290 | ((unint64_t)*((unsigned __int16 *)v290 + 2) << 32)) & 0xFFFFFFFDFFFFFFFFLL | v359;
  *((_WORD *)v290 + 2) = WORD2(v360);
  buf[0] = 0;
  *(_DWORD *)v428 = 0;
  if (v383)
  {
    nw_establishment_report_get_accurate_ecn_state(v383, buf, v428);
    v361 = v385;
    v385->client_accurate_ecn_uint32_t state = buf[0];
    v385->server_accurate_ecn_uint32_t state = *(_DWORD *)v428;
    BOOL l4s_enabled = nw_establishment_report_get_l4s_enabled(v383);
    unint64_t v360 = *v290 | ((unint64_t)*((unsigned __int16 *)v290 + 2) << 32);
  }
  else
  {
    BOOL l4s_enabled = 0;
    v361 = v385;
    *(void *)&v385->client_accurate_ecn_uint32_t state = 0;
  }
  unint64_t v363 = v360 & 0xFFFFFBFFFFFFFFFFLL | ((unint64_t)l4s_enabled << 42);
  *uint64_t v290 = v360;
  *((_WORD *)v290 + 2) = WORD2(v363);
  v361->failure_reason = 0;
  uint64_t errors = (uint64_t)v332->errors;
  if (!errors) {
    goto LABEL_538;
  }
  if (*(void *)(errors + 24) == *(void *)(errors + 16)) {
    goto LABEL_537;
  }
  v365 = nw_array_get_object_at_index(errors, 0);
  v366 = v365;
  if (v365)
  {
    v367 = v365;
    int v368 = v367[2];

    if (v368 == 2) {
      goto LABEL_535;
    }
    if (v368 == 3)
    {
      int v368 = 4;
      goto LABEL_535;
    }
    if ((*v290 & 0x4000) == 0 && v368 == 1)
    {
      int v368 = 3;
LABEL_535:
      v385->failure_reason = v368;
    }
  }

  if (!v385->failure_reason)
  {
LABEL_537:
    LODWORD(v363) = *v290;
LABEL_538:
    if ((v363 & 0x4000) == 0)
    {
      v369 = v332;
      v370 = v369;
      if (v312->used_timestamps)
      {
        unint64_t v371 = 0;
        v372 = v312->timestamps;
        v373 = &v372->var1.event;
        while (*v373 != 6 || *(v373 - 1) != 1)
        {
          ++v371;
          v373 += 8;
          if (v371 >= v312->used_timestamps) {
            goto LABEL_546;
          }
        }
        BOOL v374 = (nw_delta_nanos(v312->start_time, *(&v372->var0 + 2 * v371)) / 0xF4240uLL) == -1;

        if (!v374) {
          v385->failure_reason = 1;
        }
      }
      else
      {
LABEL_546:
      }
    }
  }

LABEL_548:
}

void sub_183C5F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_stats_get_apple_host(NWConcrete_nw_connection *a1)
{
  id v1 = a1;
  endpoint = v1->endpoint;
  if (!endpoint || (id v3 = endpoint, v4 = [(OS_nw_endpoint *)v3 type], v3, v4 != 2))
  {
LABEL_21:
    uint64_t v6 = 0;
    goto LABEL_22;
  }
  hostname = nw_endpoint_get_hostname((nw_endpoint_t)v1->endpoint);
  uint64_t v6 = (uint64_t)hostname;
  if (hostname)
  {
    size_t v7 = strlen(hostname);
    unint64_t v8 = v7;
    if (v7 >= 0x12 && !strncmp((const char *)(v7 + v6 - 18), ".pancake.apple.com", 0x12uLL)
      || !strcmp((const char *)v6, "pancake.apple.com"))
    {
      uint64_t v6 = 5;
      goto LABEL_22;
    }
    if (v8 >= 0x15 && !strncmp((const char *)(v8 + v6 - 21), ".clientflow.apple.com", 0x15uLL)
      || !strcmp((const char *)v6, "clientflow.apple.com"))
    {
      uint64_t v6 = 6;
      goto LABEL_22;
    }
    if (v8 >= 0xA && !strncmp((const char *)(v8 + v6 - 10), ".apple.com", 0xAuLL)
      || !strcmp((const char *)v6, "apple.com"))
    {
      uint64_t v6 = 1;
      goto LABEL_22;
    }
    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".icloud.com")
      || !strcmp((const char *)v6, "icloud.com")
      || nw_connection_stats_hostname_has_suffix((const char *)v6, ".icloud-content.com")
      || !strcmp((const char *)v6, "icloud-content.com"))
    {
      uint64_t v6 = 2;
      goto LABEL_22;
    }
    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".mzstatic.com")
      || !strcmp((const char *)v6, "mzstatic.com"))
    {
      uint64_t v6 = 3;
      goto LABEL_22;
    }
    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".me.com") || !strcmp((const char *)v6, "me.com"))
    {
      uint64_t v6 = 4;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_22:

  return v6;
}

void sub_183C5F714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_stats_get_apple_app_for_string(const char *a1)
{
  if (!strcmp(a1, "com.apple.MobileSMS")) {
    return 1;
  }
  if (!strcmp(a1, "com.apple.mobilesafari")) {
    return 2;
  }
  if (!strcmp(a1, "com.apple.mobilemail")) {
    return 3;
  }
  if (!strcmp(a1, "com.apple.Maps")) {
    return 4;
  }
  if (!strcmp(a1, "com.apple.mobileslideshow")) {
    return 5;
  }
  if (!strcmp(a1, "com.apple.Music")) {
    return 6;
  }
  if (!strcmp(a1, "com.apple.AppStore")) {
    return 7;
  }
  if (!strcmp(a1, "com.apple.MobileStore")) {
    return 8;
  }
  if (!strcmp(a1, "com.apple.assistantd")) {
    return 9;
  }
  return 0;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2;
  v4[3] = &__block_descriptor_40_e9_B16__0r_8l;
  void v4[4] = *(void *)(a1 + 32);
  nw_resolver_config_enumerate_name_servers(a3, v4);
  return 1;
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_45(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  unint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v5 <= 1)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v11 = v3;
    hostname = nw_endpoint_get_hostname(v3);
    int v4 = v11;
    if (hostname)
    {
      unint64_t v8 = (unsigned char *)(v6 + (v5 << 6) + 2272);
      uint64_t v9 = 64;
      while (1)
      {
        int v10 = *(unsigned __int8 *)hostname;
        unsigned char *v8 = v10;
        if (!v10) {
          break;
        }
        ++v8;
        ++hostname;
        if ((unint64_t)--v9 <= 1)
        {
          unsigned char *v8 = 0;
          break;
        }
      }
      ++*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
}

void sub_183C5F978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2_46(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v18 = v3;
  if (!v3)
  {
    int v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v22 = "nw_endpoint_handler_get_proxy_result";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v11, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          int v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            int v22 = "nw_endpoint_handler_get_proxy_result";
            __int16 v23 = 2082;
            uint64_t v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          int v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          int v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_30:
    if (v11) {
      free(v11);
    }
    goto LABEL_10;
  }
  int v4 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t mode = v4->mode;

  if (mode == 3)
  {
    uint64_t v6 = nw_endpoint_handler_copy_proxy(v4);
    char v7 = *((unsigned char *)v6 + 99);

    goto LABEL_11;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v8 = (id)gLogObj;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5) {
      uint64_t v9 = "unknown-mode";
    }
    else {
      uint64_t v9 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    int v22 = "nw_endpoint_handler_get_proxy_result";
    __int16 v23 = 2082;
    uint64_t v24 = (void *)v9;
    __int16 v25 = 2082;
    int v26 = "proxy";
    _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_10:
  char v7 = 0;
LABEL_11:

  *(unsigned char *)(*(void *)(a1 + 32) + 1704) = v7;
}

void sub_183C5FD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_3(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = a1[6];
  unsigned int v9 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  char identifier = (unsigned __int8 *)nw_protocol_definition_get_identifier(v7);
  uint64_t v11 = (_DWORD *)(v8 + 56 * v9 + 1712);
  if (!identifier)
  {
    *(unsigned char *)(v8 + 56 * v9 + 1718) = 110;
    *(_WORD *)(v8 + 56 * v9 + 1716) = 30575;
    _DWORD *v11 = 1852534389;
    uint64_t v43 = 7;
    goto LABEL_35;
  }
  int v12 = *identifier;
  *(unsigned char *)uint64_t v11 = v12;
  if (v12)
  {
    int v13 = identifier[1];
    *(unsigned char *)(v8 + 56 * v9 + 1713) = v13;
    if (v13)
    {
      int v14 = identifier[2];
      *(unsigned char *)(v8 + 56 * v9 + 1714) = v14;
      if (v14)
      {
        int v15 = identifier[3];
        *(unsigned char *)(v8 + 56 * v9 + 1715) = v15;
        if (v15)
        {
          int v16 = identifier[4];
          *(unsigned char *)(v8 + 56 * v9 + 1716) = v16;
          if (v16)
          {
            int v17 = identifier[5];
            *(unsigned char *)(v8 + 56 * v9 + 1717) = v17;
            if (v17)
            {
              int v18 = identifier[6];
              *(unsigned char *)(v8 + 56 * v9 + 1718) = v18;
              if (v18)
              {
                int v19 = identifier[7];
                *(unsigned char *)(v8 + 56 * v9 + 1719) = v19;
                if (v19)
                {
                  int v20 = identifier[8];
                  *(unsigned char *)(v8 + 56 * v9 + 1720) = v20;
                  if (v20)
                  {
                    int v21 = identifier[9];
                    *(unsigned char *)(v8 + 56 * v9 + 1721) = v21;
                    if (v21)
                    {
                      int v22 = identifier[10];
                      *(unsigned char *)(v8 + 56 * v9 + 1722) = v22;
                      if (v22)
                      {
                        int v23 = identifier[11];
                        *(unsigned char *)(v8 + 56 * v9 + 1723) = v23;
                        if (v23)
                        {
                          int v24 = identifier[12];
                          *(unsigned char *)(v8 + 56 * v9 + 1724) = v24;
                          if (v24)
                          {
                            int v25 = identifier[13];
                            *(unsigned char *)(v8 + 56 * v9 + 1725) = v25;
                            if (v25)
                            {
                              int v26 = identifier[14];
                              *(unsigned char *)(v8 + 56 * v9 + 1726) = v26;
                              if (v26)
                              {
                                int v27 = identifier[15];
                                *(unsigned char *)(v8 + 56 * v9 + 1727) = v27;
                                if (v27)
                                {
                                  int v28 = identifier[16];
                                  *(unsigned char *)(v8 + 56 * v9 + 1728) = v28;
                                  if (v28)
                                  {
                                    int v29 = identifier[17];
                                    *(unsigned char *)(v8 + 56 * v9 + 1729) = v29;
                                    if (v29)
                                    {
                                      int v30 = identifier[18];
                                      *(unsigned char *)(v8 + 56 * v9 + 1730) = v30;
                                      if (v30)
                                      {
                                        int v31 = identifier[19];
                                        *(unsigned char *)(v8 + 56 * v9 + 1731) = v31;
                                        if (v31)
                                        {
                                          int v32 = identifier[20];
                                          *(unsigned char *)(v8 + 56 * v9 + 1732) = v32;
                                          if (v32)
                                          {
                                            int v33 = identifier[21];
                                            *(unsigned char *)(v8 + 56 * v9 + 1733) = v33;
                                            if (v33)
                                            {
                                              int v34 = identifier[22];
                                              *(unsigned char *)(v8 + 56 * v9 + 1734) = v34;
                                              if (v34)
                                              {
                                                int v35 = identifier[23];
                                                *(unsigned char *)(v8 + 56 * v9 + 1735) = v35;
                                                if (v35)
                                                {
                                                  int v36 = identifier[24];
                                                  *(unsigned char *)(v8 + 56 * v9 + 1736) = v36;
                                                  if (v36)
                                                  {
                                                    int v37 = identifier[25];
                                                    *(unsigned char *)(v8 + 56 * v9 + 1737) = v37;
                                                    if (v37)
                                                    {
                                                      int v38 = identifier[26];
                                                      *(unsigned char *)(v8 + 56 * v9 + 1738) = v38;
                                                      if (v38)
                                                      {
                                                        int v39 = identifier[27];
                                                        *(unsigned char *)(v8 + 56 * v9 + 1739) = v39;
                                                        if (v39)
                                                        {
                                                          int v40 = identifier[28];
                                                          *(unsigned char *)(v8 + 56 * v9 + 1740) = v40;
                                                          if (v40)
                                                          {
                                                            int v41 = identifier[29];
                                                            *(unsigned char *)(v8 + 56 * v9 + 1741) = v41;
                                                            if (v41)
                                                            {
                                                              int v42 = identifier[30];
                                                              *(unsigned char *)(v8 + 56 * v9 + 1742) = v42;
                                                              if (v42)
                                                              {
                                                                uint64_t v43 = 31;
LABEL_35:
                                                                *((unsigned char *)v11 + v43) = 0;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v44 = v8 + 56 * v9;
  *(_DWORD *)(v44 + 1760) = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  *(void *)(v44 + 1744) = a3;
  *(void *)(v44 + 1752) = a4;
  uint64_t v45 = *(void *)(a1[5] + 8);
  unsigned int v46 = *(unsigned __int8 *)(v45 + 24);
  if (v46 > 8)
  {
    uint64_t v47 = *(void *)(a1[4] + 16);
    if (v47 && !nw_path_parameters_get_logging_disabled(*(void *)(v47 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v48 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        int v49 = *(_DWORD *)(a1[4] + 448);
        int v51 = 136446466;
        int64x2_t v52 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke_3";
        __int16 v53 = 1024;
        int v54 = v49;
        _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_INFO, "%{public}s [C%u] max protocol establishment reports, stopping", (uint8_t *)&v51, 0x12u);
      }
    }
  }
  else
  {
    *(unsigned char *)(v45 + 24) = v46 + 1;
  }

  return v46 < 9;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_48(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = a1[6];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  hostname = nw_endpoint_get_hostname(v3);
  if (hostname)
  {
    id v7 = (unsigned char *)(v4 + (v5 << 6) + 2272);
    uint64_t v8 = 64;
    while (1)
    {
      int v9 = *(unsigned __int8 *)hostname;
      unsigned char *v7 = v9;
      if (!v9) {
        break;
      }
      ++v7;
      ++hostname;
      if ((unint64_t)--v8 <= 1)
      {
        unsigned char *v7 = 0;
        break;
      }
    }
    uint64_t v10 = *(void *)(a1[5] + 8);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v11 = *(void *)(a1[4] + 16);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v13 = *(_DWORD *)(a1[4] + 448);
          int v16 = 136446466;
          int v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
          __int16 v18 = 1024;
          int v19 = v13;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s [C%u] max proxy hops, stopping", (uint8_t *)&v16, 0x12u);
        }
      }
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 1;
      *(unsigned char *)(v10 + 24) = 1;
    }
  }
  else
  {
    uint64_t v14 = 1;
  }

  return v14;
}

void sub_183C601FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_50(uint64_t a1, void *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_35;
  }
  __int16 v50 = WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3;
  unsigned int event_milliseconds = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 1, &v50, 0);
  unsigned int v6 = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 2, &v50, 0);
  *(_DWORD *)(*(void *)(a1 + 40) + 1706) |= 0x200u;
  *(_DWORD *)(*(void *)(a1 + 40) + 232) = v6 - event_milliseconds;
  if (v6 < event_milliseconds)
  {
    if (gLogDatapath)
    {
      int v36 = __nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v37 = *(unsigned int *)(*(void *)(a1 + 40) + 232);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
        *(_WORD *)&_DWORD buf[12] = 2082;
        *(void *)&buf[14] = "report->resolution_milliseconds";
        *(_WORD *)&unsigned char buf[22] = 2048;
        unint64_t v53 = event_milliseconds;
        LOWORD(v54) = 2048;
        *(void *)((char *)&v54 + 2) = v37;
        _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    *(_DWORD *)(*(void *)(a1 + 40) + 232) = 0;
  }
  int v48 = 0;
  int v49 = 0;
  char v47 = 0;
  int v46 = 0;
  id v7 = v4;
  uint64_t v8 = v7;
  if (*((_DWORD *)v7 + 29) == 1)
  {
    int v9 = v7[31];
    uint64_t v10 = v9;
    if (v9)
    {
      int v48 = 0;
      int v49 = 0;
      int v46 = 0;
      char v47 = 0;
      uint64_t v11 = (atomic_uchar *)v9[5];
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_endpoint_resolver_get_details_block_invoke;
      unint64_t v53 = (unint64_t)&unk_1E523F938;
      *((void *)&v54 + 1) = &v49;
      uint64_t v55 = &v48;
      int8x16_t v56 = &v47;
      *(void *)&long long v54 = v9;
      int8x16_t v57 = &v46;
      nw_array_apply(v11, (uint64_t)buf);

LABEL_8:
      goto LABEL_28;
    }
    int v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
    int v39 = (char *)_os_log_send_and_compose_impl();

    type[1] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, &type[1], type))
    {
      if (type[1] == OS_LOG_TYPE_FAULT)
      {
        int v40 = __nwlog_obj();
        os_log_type_t v41 = type[1];
        if (os_log_type_enabled(v40, type[1]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null endpoint_resolver", buf, 0xCu);
        }
      }
      else if (type[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v40 = __nwlog_obj();
        os_log_type_t v43 = type[1];
        BOOL v44 = os_log_type_enabled(v40, type[1]);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
            *(_WORD *)&_DWORD buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s called with null endpoint_resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_55;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s called with null endpoint_resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v40 = __nwlog_obj();
        os_log_type_t v45 = type[1];
        if (os_log_type_enabled(v40, type[1]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl(&dword_1830D4000, v40, v45, "%{public}s called with null endpoint_resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_55:
    if (v39) {
      free(v39);
    }
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolver_details";
  int v13 = (char *)_os_log_send_and_compose_impl();

  type[1] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v13, &type[1], type))
  {
LABEL_26:
    if (!v13) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (type[1] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = (id)gLogObj;
    os_log_type_t v15 = type[1];
    if (os_log_type_enabled(v14, type[1]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolver_details";
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
    }
LABEL_25:

    goto LABEL_26;
  }
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = (id)gLogObj;
    os_log_type_t v19 = type[1];
    if (os_log_type_enabled(v14, type[1]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolver_details";
      _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_25;
  }
  int v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v14 = (id)gLogObj;
  os_log_type_t v17 = type[1];
  BOOL v18 = os_log_type_enabled(v14, type[1]);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolver_details";
      _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
    }
    goto LABEL_25;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolver_details";
    *(_WORD *)&_DWORD buf[12] = 2082;
    *(void *)&buf[14] = v16;
    _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (!v13) {
    goto LABEL_28;
  }
LABEL_27:
  free(v13);
LABEL_28:

  *(_DWORD *)(*(void *)(a1 + 40) + 288) = nw_endpoint_handler_get_resolution_protocol(v8);
  *(_DWORD *)(*(void *)(a1 + 40) + 336) = nw_endpoint_handler_get_resolution_provider(v8, 0);
  buf[0] = 0;
  *(_WORD *)os_log_type_t type = 0;
  nw_endpoint_handler_get_svcb_report(v8, buf, (BOOL *)&type[1], (BOOL *)type);
  uint64_t v20 = *(void *)(a1 + 40);
  unint64_t v21 = *(_DWORD *)(v20 + 1706) & 0xDFFFFFFF | ((unint64_t)*(unsigned __int16 *)(v20 + 1710) << 32) | ((unint64_t)buf[0] << 29);
  *(_DWORD *)(v20 + 1706) = *(_DWORD *)(v20 + 1706) & 0xDFFFFFFF | (buf[0] << 29);
  *(_WORD *)(v20 + 1710) = WORD2(v21);
  uint64_t v22 = *(void *)(a1 + 40);
  unint64_t v23 = *(_DWORD *)(v22 + 1706) & 0xBFFFFFFF | ((unint64_t)*(unsigned __int16 *)(v22 + 1710) << 32) | ((unint64_t)type[1] << 30);
  *(_DWORD *)(v22 + 1706) = *(_DWORD *)(v22 + 1706) & 0xBFFFFFFF | (type[1] << 30);
  *(_WORD *)(v22 + 1710) = WORD2(v23);
  uint64_t v24 = *(void *)(a1 + 40);
  unint64_t v25 = *(_DWORD *)(v24 + 1706) & 0x7FFFFFFF | ((unint64_t)*(unsigned __int16 *)(v24 + 1710) << 32) | ((unint64_t)type[0] << 31);
  *(_DWORD *)(v24 + 1706) = *(_DWORD *)(v24 + 1706) & 0x7FFFFFFF | (type[0] << 31);
  *(_WORD *)(v24 + 1710) = WORD2(v25);
  int v26 = v48;
  uint64_t v27 = *(void *)(a1 + 40);
  *(_DWORD *)(v27 + 252) = v49;
  *(_DWORD *)(v27 + 256) = v26;
  *(unsigned char *)(v27 + 349) = v47;
  *(_DWORD *)(v27 + 260) = v46;
  nw_endpoint_t v28 = nw_endpoint_handler_copy_endpoint(v8);
  nw_endpoint_t v29 = v28;
  if (v28)
  {
    int v30 = v28;
    int v31 = [v30 type];

    if (v31 == 1)
    {
      *(_DWORD *)(*(void *)(a1 + 40) + 1706) |= 0x10000u;
      int v32 = v8;
      id v33 = v32[4];

      if (v33)
      {
        int v34 = v33;
        BOOL v35 = (v34[12] & 0x40000) == 0;

        if (!v35) {
          *(_DWORD *)(*(void *)(a1 + 40) + 1706) |= 0x20000u;
        }
      }
    }
  }

LABEL_35:
}

void sub_183C60A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_52(uint64_t a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v44 = v3;
    uint64_t v4 = (id *)v3;
    os_log_type_t v45 = v4;
    if (*((_DWORD *)v4 + 29) == 5)
    {
      uint64_t v5 = (unsigned __int8 *)v4[31];
      unsigned int v6 = v5;
      if (v5)
      {
        uint64_t v7 = *((void *)v5 + 9);
        uint64_t v43 = *((void *)v5 + 10);
        int v8 = *((_DWORD *)v5 + 22);
        uint64_t v9 = v5[92];
        uint64_t v10 = v5[93];
        uint64_t v11 = v5[94];
        uint64_t v12 = v5[95];
        uint64_t v13 = v5[96];
        uint64_t v14 = v5[97];
LABEL_5:

LABEL_14:
        uint64_t v19 = *(void *)(a1 + 32);
        *(void *)(v19 + 176) = v7;
        *(void *)(v19 + 296) = v43;
        *(_DWORD *)(v19 + 304) = v8;
        unint64_t v20 = (*(unsigned int *)(v19 + 1706) | ((unint64_t)*(unsigned __int16 *)(v19 + 1710) << 32)) & 0xFFFFFFFBFFFFFFFFLL;
        *(_DWORD *)(v19 + 1706) = *(_DWORD *)(v19 + 1706);
        *(_WORD *)(v19 + 1710) = (v20 | (v9 << 34)) >> 32;
        uint64_t v21 = *(void *)(a1 + 32);
        unint64_t v22 = (*(unsigned int *)(v21 + 1706) | ((unint64_t)*(unsigned __int16 *)(v21 + 1710) << 32)) & 0xFFFFFFF7FFFFFFFFLL;
        *(_DWORD *)(v21 + 1706) = *(_DWORD *)(v21 + 1706);
        *(_WORD *)(v21 + 1710) = (v22 | (v10 << 35)) >> 32;
        uint64_t v23 = *(void *)(a1 + 32);
        unint64_t v24 = (*(unsigned int *)(v23 + 1706) | ((unint64_t)*(unsigned __int16 *)(v23 + 1710) << 32)) & 0xFFFFFFEFFFFFFFFFLL;
        *(_DWORD *)(v23 + 1706) = *(_DWORD *)(v23 + 1706);
        *(_WORD *)(v23 + 1710) = (v24 | (v11 << 36)) >> 32;
        uint64_t v25 = *(void *)(a1 + 32);
        unint64_t v26 = (*(unsigned int *)(v25 + 1706) | ((unint64_t)*(unsigned __int16 *)(v25 + 1710) << 32)) & 0xFFFFFFDFFFFFFFFFLL;
        *(_DWORD *)(v25 + 1706) = *(_DWORD *)(v25 + 1706);
        *(_WORD *)(v25 + 1710) = (v26 | (v12 << 37)) >> 32;
        uint64_t v27 = *(void *)(a1 + 32);
        unint64_t v28 = (*(unsigned int *)(v27 + 1706) | ((unint64_t)*(unsigned __int16 *)(v27 + 1710) << 32)) & 0xFFFFFFBFFFFFFFFFLL;
        *(_DWORD *)(v27 + 1706) = *(_DWORD *)(v27 + 1706);
        *(_WORD *)(v27 + 1710) = (v28 | (v13 << 38)) >> 32;
        uint64_t v29 = *(void *)(a1 + 32);
        unint64_t v30 = (*(unsigned int *)(v29 + 1706) | ((unint64_t)*(unsigned __int16 *)(v29 + 1710) << 32)) & 0xFFFFFF7FFFFFFFFFLL | (v14 << 39);
        *(_DWORD *)(v29 + 1706) = *(_DWORD *)(v29 + 1706);
        *(_WORD *)(v29 + 1710) = WORD2(v30);
        id v3 = v44;
        goto LABEL_15;
      }
      BOOL v35 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      int v49 = "nw_endpoint_transform_get_details";
      int v36 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v46 = 0;
      if (__nwlog_fault(v36, &type, &v46))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v37 = __nwlog_obj();
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            int v49 = "nw_endpoint_transform_get_details";
            _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null endpoint_transform", buf, 0xCu);
          }
        }
        else if (v46)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v37 = __nwlog_obj();
          os_log_type_t v40 = type;
          BOOL v41 = os_log_type_enabled(v37, type);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)buf = 136446466;
              int v49 = "nw_endpoint_transform_get_details";
              __int16 v50 = 2082;
              int v51 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null endpoint_transform, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_44;
          }
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            int v49 = "nw_endpoint_transform_get_details";
            _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null endpoint_transform, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v37 = __nwlog_obj();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            int v49 = "nw_endpoint_transform_get_details";
            _os_log_impl(&dword_1830D4000, v37, v42, "%{public}s called with null endpoint_transform, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_44:
      if (v36) {
        free(v36);
      }
      uint64_t v7 = 0;
      int v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v43 = 0;
      goto LABEL_5;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    int v49 = "nw_endpoint_handler_get_transform_details";
    int v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v16, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          int v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s Endpoint handler is not a transform", buf, 0xCu);
        }
      }
      else if (v46)
      {
        int v31 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (id)gLogObj;
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v17, type);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            int v49 = "nw_endpoint_handler_get_transform_details";
            __int16 v50 = 2082;
            int v51 = v31;
            _os_log_impl(&dword_1830D4000, v17, v32, "%{public}s Endpoint handler is not a transform, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v31);
          if (!v16) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          int v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl(&dword_1830D4000, v17, v32, "%{public}s Endpoint handler is not a transform, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (id)gLogObj;
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          int v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl(&dword_1830D4000, v17, v34, "%{public}s Endpoint handler is not a transform, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v16)
    {
LABEL_13:
      uint64_t v7 = 0;
      int v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v43 = 0;
      goto LABEL_14;
    }
LABEL_12:
    free(v16);
    goto LABEL_13;
  }
LABEL_15:
}

uint64_t nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    nw_context_assert_queue(v3[3]);
    uint64_t v5 = (void *)nw_endpoint_handler_copy_connected_socket_wrapper(v4[18]);
    unsigned int v6 = v5;
    if (v5)
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = ___ZL62nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queueP24NWConcrete_nw_connectionPP9mptcpinfo_block_invoke;
      v20[3] = &__block_descriptor_40_e8_B12__0i8l;
      v20[4] = a2;
      uint64_t fd = nw_fd_wrapper_get_fd(v5, v20);
    }
    else
    {
      int v8 = v4[2];
      if (v8 && !nw_path_parameters_get_logging_disabled(v8[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v9 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v10 = *((_DWORD *)v4 + 112);
          *(_DWORD *)buf = 136446466;
          unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
          __int16 v25 = 1024;
          LODWORD(v26) = v10;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "%{public}s [C%u] Cannot get MPTCP info, no socket", buf, 0x12u);
        }
      }
      uint64_t fd = 0;
    }

    goto LABEL_13;
  }
  uint64_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v13, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null mptcp_info", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
          __int16 v25 = 2082;
          unint64_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null mptcp_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null mptcp_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null mptcp_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v13) {
    free(v13);
  }
  uint64_t fd = 0;
LABEL_13:

  return fd;
}

void sub_183C61540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_53(void *a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  unsigned int v6 = v5;
  int v7 = *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  if (v7 != 50)
  {
    int v8 = v5;
    if (nw_activity_is_selected_for_reporting(v8))
    {
      long long v26 = 0uLL;
      nw_activity_get_token(v8, &v26);
      *(_OWORD *)(a1[6] + 16 * (*(_DWORD *)(*(void *)(a1[5] + 8) + 24))++ + 383) = v26;
      uint64_t v9 = *(void *)(a1[4] + 16);
      if (v9)
      {
        if (!nw_path_parameters_get_logging_disabled(*(void *)(v9 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v10 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            int v11 = *(_DWORD *)(a1[4] + 448);
            int v12 = *(_DWORD *)(*(void *)(a1[5] + 8) + 24) - 1;
            int v16 = 136447234;
            os_log_type_t v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
            __int16 v18 = 1024;
            int v19 = v11;
            __int16 v20 = 2114;
            char v21 = v8;
            __int16 v22 = 1024;
            int v23 = v12;
            __int16 v24 = 2048;
            uint64_t v25 = a2;
            _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Copied activity %{public}@ to connection report index %u from index %lu", (uint8_t *)&v16, 0x2Cu);
          }
        }
      }
    }
LABEL_16:

    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(a1[4] + 16);
  if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v8 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(a1[4] + 448);
      int v16 = 136446466;
      os_log_type_t v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
      __int16 v18 = 1024;
      int v19 = v14;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] Reached max activities for report, no additional activities will be reported", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_16;
  }
LABEL_17:

  return v7 != 50;
}

BOOL ___ZL62nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queueP24NWConcrete_nw_connectionPP9mptcpinfo_block_invoke(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v2 = copymptcpinfo(a2, *(void **)(a1 + 32));
  if (v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v4, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        int v7 = "%{public}s copymptcpinfo failed";
LABEL_16:
        int v12 = v5;
        os_log_type_t v13 = v6;
        goto LABEL_17;
      }
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        int v7 = "%{public}s copymptcpinfo failed, backtrace limit exceeded";
        goto LABEL_16;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_18:

          if (!v4) {
            return v2 == 0;
          }
          goto LABEL_12;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        int v7 = "%{public}s copymptcpinfo failed, no backtrace";
        int v12 = v5;
        os_log_type_t v13 = v9;
LABEL_17:
        _os_log_impl(&dword_1830D4000, v12, v13, v7, buf, 0xCu);
        goto LABEL_18;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        __int16 v18 = 2082;
        int v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s copymptcpinfo failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (v4) {
LABEL_12:
    }
      free(v4);
  }
  return v2 == 0;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2(uint64_t a1, char *hostname)
{
  host = nw_endpoint_create_host(hostname, "0");
  if (nw_endpoint_get_type(host) == nw_endpoint_type_address)
  {
    address = nw_endpoint_get_address(host);
    if (address)
    {
      int sa_family = address->sa_family;
      if (sa_family == 30)
      {
        ++*(_DWORD *)(*(void *)(a1 + 32) + 276);
      }
      else if (sa_family == 2)
      {
        ++*(_DWORD *)(*(void *)(a1 + 32) + 272);
      }
    }
  }

  return 1;
}

void sub_183C61B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_connection_stats_get_current_appPb_block_invoke()
{
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_9);
  }
  uint64_t result = nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
    uint64_t result = nw_connection_stats_get_apple_app_for_string((const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string);
    nw_connection_stats_get_current_app(BOOL *)::current_app = result;
  }
  else
  {
    nw_connection_stats_get_current_app(BOOL *)::is_daemon = 1;
  }
  return result;
}

BOOL nw_connection_stats_hostname_has_suffix(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  size_t v5 = strlen(a2);
  return v4 >= v5 && strncmp(&a1[v4 - v5], a2, v5) == 0;
}

void ___ZL70nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queueP24NWConcrete_nw_connectionPU33objcproto22OS_nw_endpoint_handler8NSObjectP35netcore_stats_tcp_statistics_report_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  size_t v4 = v3;
  if (v3)
  {
    __int16 v11 = WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3;
    unsigned int event_milliseconds = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 1, &v11, 0);
    unsigned int v6 = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 2, &v11, 0);
    int v7 = *(_DWORD **)(a1 + 40);
    if (event_milliseconds != -1) {
      v7[33] = event_milliseconds;
    }
    if (v6 != -1) {
      v7[32] = v6;
    }
    v7[34] = v6 - event_milliseconds;
    if (v6 < event_milliseconds)
    {
      if (gLogDatapath)
      {
        os_log_type_t v9 = __nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 40) + 136);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v13 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue_block_invoke";
          __int16 v14 = 2082;
          os_log_type_t v15 = "statistics_report->dns_resolved_time_msecs";
          __int16 v16 = 2048;
          uint64_t v17 = event_milliseconds;
          __int16 v18 = 2048;
          uint64_t v19 = v10;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)(v8 + 136) = 0;
      goto LABEL_10;
    }
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(_DWORD *)(v8 + 136) <= 5u) {
LABEL_10:
    }
      *(_WORD *)(v8 + 208) |= 1u;
  }
}

void nw_connection_report_symptom_internal_on_nw_queue(int a1, void *a2, void *a3, void *a4, uint64_t a5, const unsigned __int8 *a6, uint64_t a7, int a8, int a9, int a10)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  uint64_t v75 = a7;
  int v74 = a8;
  os_log_type_t v72 = v15;
  if (!v15)
  {
    int64x2_t v60 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    v80[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v29, v80, uu)) {
      goto LABEL_86;
    }
    if (v80[0] == 17)
    {
      unint64_t v30 = __nwlog_obj();
      os_log_type_t v61 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v61, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (!uu[0])
    {
      unint64_t v30 = __nwlog_obj();
      os_log_type_t v69 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v69, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = __nwlog_obj();
    os_log_type_t v65 = v80[0];
    BOOL v66 = os_log_type_enabled(v40, (os_log_type_t)v80[0]);
    if (backtrace_string)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        *(_WORD *)&_DWORD buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v40, v65, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_86:
      if (!v29) {
        goto LABEL_88;
      }
LABEL_87:
      free(v29);
      goto LABEL_88;
    }
    if (v66)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_1830D4000, v40, v65, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
LABEL_120:

    goto LABEL_86;
  }
  if (!v16)
  {
    int8x16_t v62 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    v80[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v29, v80, uu)) {
      goto LABEL_86;
    }
    if (v80[0] == 17)
    {
      unint64_t v30 = __nwlog_obj();
      os_log_type_t v63 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v63, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (!uu[0])
    {
      unint64_t v30 = __nwlog_obj();
      os_log_type_t v70 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v70, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    int v39 = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = __nwlog_obj();
    os_log_type_t v67 = v80[0];
    BOOL v68 = os_log_type_enabled(v40, (os_log_type_t)v80[0]);
    if (v39)
    {
      if (v68)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        *(_WORD *)&_DWORD buf[12] = 2082;
        *(void *)&buf[14] = v39;
        _os_log_impl(&dword_1830D4000, v40, v67, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_70;
    }
    if (v68)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_1830D4000, v40, v67, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_120;
  }
  __int16 v18 = v16;
  id v19 = *(id *)(v18[13] + 136);

  nw_context_assert_queue(v19);
  if (!v17 && (a1 - 421890) <= 9 && ((1 << (a1 - 2)) & 0x307) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    long long v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = off_1E5249E48[a1 - 421890];
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      *(_WORD *)&_DWORD buf[12] = 2082;
      *(void *)&buf[14] = v27;
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s symptom reported when no path found", buf, 0x16u);
    }

    goto LABEL_88;
  }
  if (nw_connection_get_symptom_reporter_handle::once[0] != -1) {
    dispatch_once(nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_79705);
  }
  if (!nw_connection_get_symptom_reporter_handle::symptom_reporter)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v28 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    v80[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v29, v80, uu)) {
      goto LABEL_86;
    }
    if (v80[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v30 = (id)gLogObj;
      os_log_type_t v31 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s nw_connection_get_symptom_reporter_handle failed", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (!uu[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v30 = (id)gLogObj;
      os_log_type_t v57 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v57, "%{public}s nw_connection_get_symptom_reporter_handle failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    int v39 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v40 = (id)gLogObj;
    os_log_type_t v41 = v80[0];
    BOOL v42 = os_log_type_enabled(v40, (os_log_type_t)v80[0]);
    if (v39)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        *(_WORD *)&_DWORD buf[12] = 2082;
        *(void *)&buf[14] = v39;
        _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s nw_connection_get_symptom_reporter_handle failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_70;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s nw_connection_get_symptom_reporter_handle failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_120;
  }
  uint64_t v20 = symptom_new();
  if (!v20)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v32 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    v80[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v29, v80, uu)) {
      goto LABEL_86;
    }
    if (v80[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v30 = (id)gLogObj;
      os_log_type_t v33 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s symptom_new failed", buf, 0xCu);
      }
LABEL_85:

      goto LABEL_86;
    }
    if (!uu[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v30 = (id)gLogObj;
      os_log_type_t v58 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v58, "%{public}s symptom_new failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    long long v54 = __nw_create_backtrace_string();
    if (!v54)
    {
      unint64_t v30 = __nwlog_obj();
      os_log_type_t v59 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v30, v59, "%{public}s symptom_new failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_85;
    }
    int v39 = (char *)v54;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v40 = (id)gLogObj;
    os_log_type_t v55 = v80[0];
    if (os_log_type_enabled(v40, (os_log_type_t)v80[0]))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      *(_WORD *)&_DWORD buf[12] = 2082;
      *(void *)&buf[14] = v39;
      _os_log_impl(&dword_1830D4000, v40, v55, "%{public}s symptom_new failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_70:

    free(v39);
    if (!v29) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  pid_t v21 = getpid();
  __int16 v22 = v18;
  int v23 = *(_DWORD *)(v18[13] + 64);

  if (v23 >= 1 && v23 != v21) {
    goto LABEL_10;
  }
  os_log_type_t v34 = v22;
  if (uuid_is_null((const unsigned __int8 *)(v18[13] + 24)))
  {
    uint64_t v25 = 8;
    goto LABEL_28;
  }
  int v56 = uuid_compare((const unsigned __int8 *)(v18[13] + 24), (const unsigned __int8 *)(v18[13] + 8));

  if (v56)
  {
LABEL_10:
    __int16 v24 = v22;
    pid_t v21 = *(_DWORD *)(v18[13] + 64);
    uint64_t v25 = 24;
LABEL_28:

    goto LABEL_29;
  }
  uint64_t v25 = 8;
LABEL_29:
  BOOL v35 = v22;
  long long v79 = *(_OWORD *)(v18[13] + v25);

  long long v77 = 0u;
  long long v78 = 0u;
  memset(buf, 0, sizeof(buf));
  if (proc_pidinfo(v21, 13, 1uLL, buf, 64) != 64)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v37 = (id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_log_type_t v80 = 136446466;
      *(void *)&v80[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = v21;
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_ERROR, "%{public}s Failed to convert from PID (%d) to process name", v80, 0x12u);
    }

    int v36 = 0;
    if (!v17) {
      goto LABEL_48;
    }
    goto LABEL_35;
  }
  int v36 = (const char *)&buf[16];
  if (v17)
  {
LABEL_35:
    os_log_type_t v38 = (NWConcrete_nw_path *)v17;
    nw_path_network_is_satisfied_update_reason(v38, 0);

    symptom_set_qualifier();
    memset(uu, 0, sizeof(uu));
    uint64_t v43 = v38;
    *(_OWORD *)long long uu = *(_OWORD *)v43->flow_registration_id;

    if (!uuid_is_null(uu))
    {
      memset(v80, 0, 37);
      uuid_unparse(uu, v80);
      strlen(v80);
      symptom_set_additional_qualifier();
    }
    id v44 = v43;
    id v45 = v44[2];

    if (v45)
    {
      char v46 = (id *)v45;
      id v47 = v46[23];

      if (v47)
      {
        *(void *)os_log_type_t v80 = 0;
        *(void *)&v80[8] = v80;
        *(void *)&v80[16] = 0x2020000000;
        v80[24] = 0;
        v73[0] = MEMORY[0x1E4F143A8];
        v73[1] = 3221225472;
        v73[2] = __nw_connection_report_symptom_internal_on_nw_queue_block_invoke;
        v73[3] = &unk_1E5249B80;
        v73[4] = v80;
        v73[5] = v20;
        nw_proxy_config_enumerate_endpoints(v47, v73);
        _Block_object_dispose(v80, 8);
      }
    }
  }
LABEL_48:
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  if (v36 && strlen(v36)) {
    symptom_set_additional_qualifier();
  }
  if (a9) {
    symptom_set_additional_qualifier();
  }
  if (a10) {
    symptom_set_additional_qualifier();
  }
  int v48 = v72;
  *(void *)long long uu = 0;
  *(void *)&uu[8] = uu;
  uint64_t v83 = 0x2020000000;
  uint64_t v84 = 0;
  int v49 = v48 + 45;
  *(void *)os_log_type_t v80 = MEMORY[0x1E4F143A8];
  *(void *)&v80[8] = 3221225472;
  *(void *)&v80[16] = __nw_endpoint_get_description_block_invoke;
  *(void *)&v80[24] = &unk_1E524B978;
  __int16 v50 = v48;
  *(void *)&v80[32] = v50;
  os_log_type_t v81 = uu;
  os_unfair_lock_lock(v49);
  (*(void (**)(unsigned char *))&v80[16])(v80);
  os_unfair_lock_unlock(v49);
  int v51 = *(const char **)(*(void *)&uu[8] + 24);

  _Block_object_dispose(uu, 8);
  if (v51 && strlen(v51)) {
    symptom_set_additional_qualifier();
  }
  if (a1 == 421899)
  {
    symptom_set_additional_qualifier();
    symptom_set_additional_qualifier();
  }
  else if (a1 == 421898)
  {
    symptom_set_qualifier();
    if (a6)
    {
      memset(v80, 0, 37);
      uuid_unparse(a6, v80);
      strlen(v80);
      symptom_set_additional_qualifier();
    }
  }
  symptom_send();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v52 = (id)gLogObj;
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v53 = off_1E5249E98[a1 - 421889];
    *(_DWORD *)os_log_type_t v80 = 136446722;
    *(void *)&v80[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    *(_WORD *)&v80[12] = 2082;
    *(void *)&v80[14] = v53;
    *(_WORD *)&v80[22] = 1024;
    *(_DWORD *)&v80[24] = a1;
    _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_DEBUG, "%{public}s Symptom sent: %{public}s(%#x)", v80, 0x1Cu);
  }

LABEL_88:
}