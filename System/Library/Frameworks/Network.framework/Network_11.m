void sub_1837164C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  void *v22;

  if (a20) {
    nw::release_if_needed<nw_protocol *>(&a19);
  }
  if (a22) {
    nw::release_if_needed<nw_protocol *>(&a21);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_protocol_implementation_errorP11nw_protocolS0_i_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  object = (void *)nw_hash_node_get_object(a2);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = v4 - 96;
  }
  else {
    uint64_t v5 = 0;
  }
  if (object)
  {
    v6 = object;
    v7 = (void *)object[5];
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = object[11];
      if (v9) {
        object[11] = v9 + 1;
      }
      char v8 = -1;
    }
    else
    {
      char v8 = 0;
    }
    *(void *)v49 = object;
    char v50 = v8;
    if (v4)
    {
      v10 = *(void **)(v5 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v12 = *(void *)(v5 + 88);
        if (v12) {
          *(void *)(v5 + 88) = v12 + 1;
        }
        char v11 = -1;
      }
      else
      {
        char v11 = 0;
      }
      *(void *)v46 = v5;
      char v47 = v11;
      uint64_t v13 = object[3];
      if (v13)
      {
        v14 = *(void (**)(void *))(v13 + 56);
        if (v14)
        {
          v14(object);
LABEL_19:
          if (v10 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v46);
          }
LABEL_21:
          if (v7 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v49);
          }
          return 1;
        }
      }
      v16 = __nwlog_obj();
      v17 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      v52 = "__nw_protocol_error";
      if (!v17) {
        v17 = "invalid";
      }
      __int16 v53 = 2082;
      v54 = (void *)v17;
      __int16 v55 = 2048;
      v56 = v6;
      v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (__nwlog_fault(v18, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v19 = __nwlog_obj();
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            v21 = (const char *)v6[2];
            if (!v21) {
              v21 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_error";
            __int16 v53 = 2082;
            v54 = (void *)v21;
            __int16 v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
          }
        }
        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v19 = __nwlog_obj();
          os_log_type_t v31 = type;
          BOOL v32 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v32)
            {
              v33 = (const char *)v6[2];
              if (!v33) {
                v33 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              v52 = "__nw_protocol_error";
              __int16 v53 = 2082;
              v54 = (void *)v33;
              __int16 v55 = 2048;
              v56 = v6;
              __int16 v57 = 2082;
              v58 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_70;
          }
          if (v32)
          {
            v42 = (const char *)v6[2];
            if (!v42) {
              v42 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_error";
            __int16 v53 = 2082;
            v54 = (void *)v42;
            __int16 v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          v19 = __nwlog_obj();
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v19, type))
          {
            v41 = (const char *)v6[2];
            if (!v41) {
              v41 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v52 = "__nw_protocol_error";
            __int16 v53 = 2082;
            v54 = (void *)v41;
            __int16 v55 = 2048;
            v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v40, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_70:
      if (v18) {
        free(v18);
      }
      goto LABEL_19;
    }
    v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "__nw_protocol_error";
    v27 = (char *)_os_log_send_and_compose_impl();

    v46[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v27, v46, &type))
    {
      if (v46[0] == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        os_log_type_t v29 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_error";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v37 = (char *)__nw_create_backtrace_string();
        v28 = __nwlog_obj();
        os_log_type_t v38 = v46[0];
        BOOL v39 = os_log_type_enabled(v28, v46[0]);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "__nw_protocol_error";
            __int16 v53 = 2082;
            v54 = v37;
            _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_86;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_error";
          _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v28 = __nwlog_obj();
        os_log_type_t v44 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_error";
          _os_log_impl(&dword_1830D4000, v28, v44, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_86:
    if (v27) {
      free(v27);
    }
    goto LABEL_21;
  }
  v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v52 = "__nw_protocol_error";
  v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      os_log_type_t v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_error";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v46[0])
    {
      v34 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      os_log_type_t v35 = v49[0];
      BOOL v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "__nw_protocol_error";
          __int16 v53 = 2082;
          v54 = v34;
          _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_81;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_error";
        _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v24 = __nwlog_obj();
      os_log_type_t v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_error";
        _os_log_impl(&dword_1830D4000, v24, v43, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_81:
  if (v23) {
    free(v23);
  }
  return 1;
}

void sub_183716D20(_Unwind_Exception *exception_object)
{
}

void nw_protocol_implementation_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    uint64_t v5 = p_output_handler;
    v6 = (void **)v5;
    if (handle != &nw_protocol_ref_counted_handle)
    {
      v56 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v18, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v19 = __nwlog_obj();
          os_log_type_t v57 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v57, "%{public}s called with null instance", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          v19 = __nwlog_obj();
          os_log_type_t v92 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v92, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        BOOL v70 = os_log_type_enabled(v19, type[0]);
        if (!backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v69, "%{public}s called with null instance, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          __int16 v110 = 2082;
          v111 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v69, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
      }
      goto LABEL_109;
    }
    v7 = (void *)*((void *)v5 + 1);
    if (!v7)
    {
      v58 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104)) {
        goto LABEL_109;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        os_log_type_t v59 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v59, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        v19 = __nwlog_obj();
        os_log_type_t v93 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v93, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v71 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      os_log_type_t v72 = type[0];
      BOOL v73 = os_log_type_enabled(v19, type[0]);
      if (!v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v72, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        __int16 v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_1830D4000, v19, v72, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_165;
    }
    if (!v7[10])
    {
      v60 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104)) {
        goto LABEL_109;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        os_log_type_t v61 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v61, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        v19 = __nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v94, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v71 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      BOOL v75 = os_log_type_enabled(v19, type[0]);
      if (!v71)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v74, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        __int16 v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_1830D4000, v19, v74, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_165;
    }
    if (!a2)
    {
      v62 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104)) {
        goto LABEL_109;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        os_log_type_t v63 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v63, "%{public}s called with null input_protocol", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        v19 = __nwlog_obj();
        os_log_type_t v95 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v95, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      v71 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      os_log_type_t v76 = type[0];
      BOOL v77 = os_log_type_enabled(v19, type[0]);
      if (!v71)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v76, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        __int16 v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_1830D4000, v19, v76, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_165;
    }
    if (gLogDatapath)
    {
      v64 = __nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        __int16 v110 = 2048;
        v111 = (char *)v6;
        _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s Instance %p output finished", buf, 0x16u);
      }

      v7 = v6[1];
    }
    int v8 = *((_DWORD *)v7 + 16);
    if (v8 == 2)
    {
      v16 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7[10] + 128);
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v25 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        v18 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v18, type, &v104)) {
          goto LABEL_109;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          os_log_type_t v26 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          os_log_type_t v45 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v45, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        os_log_type_t v38 = __nw_create_backtrace_string();
        if (!v38)
        {
          v19 = __nwlog_obj();
          os_log_type_t v49 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v49, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        os_log_type_t v35 = (char *)v38;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v36 = (id)gLogObj;
        os_log_type_t v39 = type[0];
        if (os_log_type_enabled(v36, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          __int16 v110 = 2082;
          v111 = v35;
          _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_82;
      }
      if (v16(v6, -1, 2)) {
        goto LABEL_111;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v17 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v18, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          os_log_type_t v20 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          v19 = __nwlog_obj();
          os_log_type_t v47 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v47, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v42 = __nw_create_backtrace_string();
        if (!v42)
        {
          v19 = __nwlog_obj();
          os_log_type_t v51 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v51, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        os_log_type_t v35 = (char *)v42;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v36 = (id)gLogObj;
        os_log_type_t v43 = type[0];
        if (os_log_type_enabled(v36, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          __int16 v110 = 2082;
          v111 = v35;
          _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_82;
      }
      goto LABEL_109;
    }
    if (v8 == 3)
    {
      uint64_t v9 = *(uint64_t (**)(NWConcrete_nw_protocol_instance *, uint64_t, uint64_t))(v7[10] + 128);
      if (v9)
      {
        v10 = v6;
        if (nw_protocol_definition_get_message_is_stream(v6[1])
          && *(nw_protocol **)&v10[-1].log_str[41] == a2)
        {
          uint64_t v11 = -2;
        }
        else
        {
          uint64_t v11 = (uint64_t)a2;
        }

        char v12 = v9(v10, v11, 2);
        if (gLogDatapath) {
          char v13 = v12;
        }
        else {
          char v13 = 1;
        }
        if ((v13 & 1) == 0)
        {
          v14 = __nwlog_obj();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = nw_protocol_flow_for_protocol(v10, (uint64_t)a2);
            *(_DWORD *)buf = 136446466;
            v109 = "nw_protocol_implementation_output_finished";
            __int16 v110 = 2048;
            v111 = (char *)v15;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Flow %llx elected to defer stop, ignoring output_finished anyway", buf, 0x16u);
          }
        }
        goto LABEL_111;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v18, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          os_log_type_t v24 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
LABEL_108:

          goto LABEL_109;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          os_log_type_t v44 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v44, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v34 = __nw_create_backtrace_string();
        if (!v34)
        {
          v19 = __nwlog_obj();
          os_log_type_t v48 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v48, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        os_log_type_t v35 = (char *)v34;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v36 = (id)gLogObj;
        os_log_type_t v37 = type[0];
        if (os_log_type_enabled(v36, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          __int16 v110 = 2082;
          v111 = v35;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_82:

        free(v35);
        if (!v18) {
          goto LABEL_111;
        }
        goto LABEL_110;
      }
LABEL_109:
      if (v18) {
LABEL_110:
      }
        free(v18);
LABEL_111:

      return;
    }
    uint64_t v21 = (uint64_t)*(v6 - 8);
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_output_finished";
      v18 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v18, type, &v104)) {
        goto LABEL_109;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        os_log_type_t v28 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol)", buf, 0xCu);
        }
        goto LABEL_108;
      }
      if (!(_BYTE)v104)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v46, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_108;
      }
      os_log_type_t v40 = __nw_create_backtrace_string();
      if (!v40)
      {
        v19 = __nwlog_obj();
        os_log_type_t v50 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_output_finished";
          _os_log_impl(&dword_1830D4000, v19, v50, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_108;
      }
      os_log_type_t v35 = (char *)v40;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v36 = (id)gLogObj;
      os_log_type_t v41 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_output_finished";
        __int16 v110 = 2082;
        v111 = v35;
        _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null nw_protocol_get_output_handler(&instance->protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_82;
    }
    if (gLogDatapath)
    {
      v84 = __nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Passing through output finished to output handler", buf, 0xCu);
      }

      uint64_t v21 = (uint64_t)*(v6 - 8);
      if (!v21)
      {
        v85 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v109 = "__nw_protocol_output_finished";
        v18 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v18, type, &v104)) {
          goto LABEL_109;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v19 = __nwlog_obj();
          os_log_type_t v86 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v86, "%{public}s called with null protocol", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (!(_BYTE)v104)
        {
          v19 = __nwlog_obj();
          os_log_type_t v101 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v101, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_108;
        }
        v71 = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        os_log_type_t v96 = type[0];
        BOOL v97 = os_log_type_enabled(v19, type[0]);
        if (!v71)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_output_finished";
            _os_log_impl(&dword_1830D4000, v19, v96, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_108;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "__nw_protocol_output_finished";
          __int16 v110 = 2082;
          v111 = v71;
          _os_log_impl(&dword_1830D4000, v19, v96, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_165:

        free(v71);
        if (!v18) {
          goto LABEL_111;
        }
        goto LABEL_110;
      }
    }
    if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v29 = *(void *)(v21 + 88);
      if (v29) {
        *(void *)(v21 + 88) = v29 + 1;
      }
      char v22 = -1;
    }
    else
    {
      char v22 = 0;
    }
    *(void *)os_log_type_t type = v21;
    char v107 = v22;
    if (*(v6 - 7) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v31 = (uint64_t)*(v6 - 1);
      if (v31) {
        *(v6 - 1) = (void *)(v31 + 1);
      }
      char v30 = -1;
    }
    else
    {
      char v30 = 0;
    }
    v104 = v6 - 12;
    char v105 = v30;
    uint64_t v32 = *(void *)(v21 + 24);
    if (v32)
    {
      v33 = *(void (**)(uint64_t, void **))(v32 + 192);
      if (v33)
      {
        v33(v21, v6 - 12);
        char v30 = v105;
LABEL_59:
        if (v30) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v104);
        }
        if (v107) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        }
        goto LABEL_111;
      }
    }
    v78 = __nwlog_obj();
    v79 = *(const char **)(v21 + 16);
    *(_DWORD *)buf = 136446722;
    v109 = "__nw_protocol_output_finished";
    if (!v79) {
      v79 = "invalid";
    }
    __int16 v110 = 2082;
    v111 = (char *)v79;
    __int16 v112 = 2048;
    uint64_t v113 = v21;
    v80 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v103 = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (__nwlog_fault(v80, &v103, &v102))
    {
      if (v103 == OS_LOG_TYPE_FAULT)
      {
        v81 = __nwlog_obj();
        os_log_type_t v82 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v83 = *(const char **)(v21 + 16);
          if (!v83) {
            v83 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_output_finished";
          __int16 v110 = 2082;
          v111 = (char *)v83;
          __int16 v112 = 2048;
          uint64_t v113 = v21;
          _os_log_impl(&dword_1830D4000, v81, v82, "%{public}s protocol %{public}s (%p) has invalid output_finished callback", buf, 0x20u);
        }
      }
      else if (v102)
      {
        v87 = (char *)__nw_create_backtrace_string();
        v81 = __nwlog_obj();
        os_log_type_t v88 = v103;
        BOOL v89 = os_log_type_enabled(v81, v103);
        if (v87)
        {
          if (v89)
          {
            v90 = *(const char **)(v21 + 16);
            if (!v90) {
              v90 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v109 = "__nw_protocol_output_finished";
            __int16 v110 = 2082;
            v111 = (char *)v90;
            __int16 v112 = 2048;
            uint64_t v113 = v21;
            __int16 v114 = 2082;
            v115 = v87;
            _os_log_impl(&dword_1830D4000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v87);
          goto LABEL_238;
        }
        if (v89)
        {
          v100 = *(const char **)(v21 + 16);
          if (!v100) {
            v100 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_output_finished";
          __int16 v110 = 2082;
          v111 = (char *)v100;
          __int16 v112 = 2048;
          uint64_t v113 = v21;
          _os_log_impl(&dword_1830D4000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        v81 = __nwlog_obj();
        os_log_type_t v98 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v99 = *(const char **)(v21 + 16);
          if (!v99) {
            v99 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_output_finished";
          __int16 v110 = 2082;
          v111 = (char *)v99;
          __int16 v112 = 2048;
          uint64_t v113 = v21;
          _os_log_impl(&dword_1830D4000, v81, v98, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
LABEL_238:
    if (v80) {
      free(v80);
    }
    goto LABEL_59;
  }
  v52 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v109 = "nw_protocol_implementation_output_finished";
  __int16 v53 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v104) = 0;
  if (__nwlog_fault(v53, type, &v104))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v54 = __nwlog_obj();
      os_log_type_t v55 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v104)
    {
      v65 = (char *)__nw_create_backtrace_string();
      v54 = __nwlog_obj();
      os_log_type_t v66 = type[0];
      BOOL v67 = os_log_type_enabled(v54, type[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_output_finished";
          __int16 v110 = 2082;
          v111 = v65;
          _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v65);
        goto LABEL_209;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v54 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_output_finished";
        _os_log_impl(&dword_1830D4000, v54, v91, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_209:
  if (v53) {
    free(v53);
  }
}

void sub_1837189B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  if (a16) {
    nw::release_if_needed<nw_protocol *>(&a15);
  }
  if (a18) {
    nw::release_if_needed<nw_protocol *>(&a17);
  }

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    uint64_t v5 = p_output_handler;
    v6 = v5;
    if (handle != &nw_protocol_ref_counted_handle)
    {
      v56 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v11, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v57 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v57, "%{public}s called with null instance", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v92 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v92, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v12 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        BOOL v70 = os_log_type_enabled(v12, type[0]);
        if (!backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v69, "%{public}s called with null instance, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          __int16 v110 = 2082;
          v111 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v69, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
      }
      goto LABEL_115;
    }
    uint64_t v7 = *((void *)v5 + 1);
    if (!v7)
    {
      v58 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104)) {
        goto LABEL_115;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v59 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v59, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v93 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v93, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v71 = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v72 = type[0];
      BOOL v73 = os_log_type_enabled(v12, type[0]);
      if (!v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v72, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        __int16 v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_1830D4000, v12, v72, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_171;
    }
    if (!*(void *)(v7 + 80))
    {
      v60 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104)) {
        goto LABEL_115;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v61 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v94, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v71 = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      BOOL v75 = os_log_type_enabled(v12, type[0]);
      if (!v71)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v74, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        __int16 v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_1830D4000, v12, v74, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_171;
    }
    if (!a2)
    {
      v62 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104)) {
        goto LABEL_115;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v63 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s called with null output_protocol", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v95 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v95, "%{public}s called with null output_protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      v71 = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v76 = type[0];
      BOOL v77 = os_log_type_enabled(v12, type[0]);
      if (!v71)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v76, "%{public}s called with null output_protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        __int16 v110 = 2082;
        v111 = v71;
        _os_log_impl(&dword_1830D4000, v12, v76, "%{public}s called with null output_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_171;
    }
    if (gLogDatapath)
    {
      v64 = __nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        __int16 v110 = 2048;
        v111 = v6;
        _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s Instance %p input finished", buf, 0x16u);
      }

      uint64_t v7 = *((void *)v6 + 1);
    }
    int v8 = *(_DWORD *)(v7 + 64);
    if (v8 == 2)
    {
      v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 + 80) + 128);
      if (v14)
      {
        if (v14(v6, -1, 1)) {
          goto LABEL_117;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v15 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104)) {
          goto LABEL_115;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v16 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v46 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v46, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        os_log_type_t v40 = __nw_create_backtrace_string();
        if (!v40)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v51 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v51, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        uint64_t v31 = (char *)v40;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v41 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          __int16 v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_1830D4000, v32, v41, "%{public}s Cannot defer stop of NW_PROTOCOL_DEFAULT_FLOW, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v21 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104)) {
          goto LABEL_115;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v22 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v43 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v43, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v34 = __nw_create_backtrace_string();
        if (!v34)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v48 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v48, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        uint64_t v31 = (char *)v34;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          __int16 v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      goto LABEL_83;
    }
    if (v8 == 3)
    {
      uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 + 80) + 128);
      if (!v9)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v19 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104)) {
          goto LABEL_115;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v20 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null instance->parent_definition->stop", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v42 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v42, "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        char v30 = __nw_create_backtrace_string();
        if (!v30)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v47 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v47, "%{public}s called with null instance->parent_definition->stop, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        uint64_t v31 = (char *)v30;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          __int16 v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_83;
      }
      if (v9(v6, -1, 1)) {
        goto LABEL_117;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (__nwlog_fault(v11, type, &v104))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v13 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS", buf, 0xCu);
          }
LABEL_114:

          goto LABEL_115;
        }
        if (!(_BYTE)v104)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v45 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v45, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        os_log_type_t v38 = __nw_create_backtrace_string();
        if (!v38)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v50 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "nw_protocol_implementation_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v50, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        uint64_t v31 = (char *)v38;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v39 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          __int16 v110 = 2082;
          v111 = v31;
          _os_log_impl(&dword_1830D4000, v32, v39, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_83:

        free(v31);
        if (!v11) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
LABEL_115:
      if (v11) {
LABEL_116:
      }
        free(v11);
LABEL_117:

      return;
    }
    uint64_t v17 = *((void *)v6 - 6);
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v109 = "nw_protocol_implementation_input_finished";
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (!__nwlog_fault(v11, type, &v104)) {
        goto LABEL_115;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v24 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol)", buf, 0xCu);
        }
        goto LABEL_114;
      }
      if (!(_BYTE)v104)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v44 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_114;
      }
      BOOL v36 = __nw_create_backtrace_string();
      if (!v36)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl(&dword_1830D4000, v12, v49, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_114;
      }
      uint64_t v31 = (char *)v36;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v32 = (id)gLogObj;
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v109 = "nw_protocol_implementation_input_finished";
        __int16 v110 = 2082;
        v111 = v31;
        _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_83;
    }
    if (gLogDatapath)
    {
      v84 = __nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Passing through input finished to default input handler", buf, 0xCu);
      }

      uint64_t v17 = *((void *)v6 - 6);
      if (!v17)
      {
        v85 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v109 = "__nw_protocol_input_finished";
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (!__nwlog_fault(v11, type, &v104)) {
          goto LABEL_115;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v86 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v86, "%{public}s called with null protocol", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (!(_BYTE)v104)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v101 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v101, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_114;
        }
        v71 = (char *)__nw_create_backtrace_string();
        char v12 = __nwlog_obj();
        os_log_type_t v96 = type[0];
        BOOL v97 = os_log_type_enabled(v12, type[0]);
        if (!v71)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_1830D4000, v12, v96, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_114;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "__nw_protocol_input_finished";
          __int16 v110 = 2082;
          v111 = v71;
          _os_log_impl(&dword_1830D4000, v12, v96, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_171:

        free(v71);
        if (!v11) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
    }
    if (*(_UNKNOWN **)(v17 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v25 = *(void *)(v17 + 88);
      if (v25) {
        *(void *)(v17 + 88) = v25 + 1;
      }
      char v18 = -1;
    }
    else
    {
      char v18 = 0;
    }
    *(void *)os_log_type_t type = v17;
    char v107 = v18;
    if (*((_UNKNOWN **)v6 - 7) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v27 = *((void *)v6 - 1);
      if (v27) {
        *((void *)v6 - 1) = v27 + 1;
      }
      char v26 = -1;
    }
    else
    {
      char v26 = 0;
    }
    v104 = v6 - 96;
    char v105 = v26;
    uint64_t v28 = *(void *)(v17 + 24);
    if (v28)
    {
      uint64_t v29 = *(void (**)(uint64_t, char *))(v28 + 184);
      if (v29)
      {
        v29(v17, v6 - 96);
        char v26 = v105;
LABEL_55:
        if (v26) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v104);
        }
        if (v107) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        }
        goto LABEL_117;
      }
    }
    v78 = __nwlog_obj();
    v79 = *(const char **)(v17 + 16);
    *(_DWORD *)buf = 136446722;
    v109 = "__nw_protocol_input_finished";
    if (!v79) {
      v79 = "invalid";
    }
    __int16 v110 = 2082;
    v111 = (char *)v79;
    __int16 v112 = 2048;
    uint64_t v113 = v17;
    v80 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v103 = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (__nwlog_fault(v80, &v103, &v102))
    {
      if (v103 == OS_LOG_TYPE_FAULT)
      {
        v81 = __nwlog_obj();
        os_log_type_t v82 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v83 = *(const char **)(v17 + 16);
          if (!v83) {
            v83 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_input_finished";
          __int16 v110 = 2082;
          v111 = (char *)v83;
          __int16 v112 = 2048;
          uint64_t v113 = v17;
          _os_log_impl(&dword_1830D4000, v81, v82, "%{public}s protocol %{public}s (%p) has invalid input_finished callback", buf, 0x20u);
        }
      }
      else if (v102)
      {
        v87 = (char *)__nw_create_backtrace_string();
        v81 = __nwlog_obj();
        os_log_type_t v88 = v103;
        BOOL v89 = os_log_type_enabled(v81, v103);
        if (v87)
        {
          if (v89)
          {
            v90 = *(const char **)(v17 + 16);
            if (!v90) {
              v90 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v109 = "__nw_protocol_input_finished";
            __int16 v110 = 2082;
            v111 = (char *)v90;
            __int16 v112 = 2048;
            uint64_t v113 = v17;
            __int16 v114 = 2082;
            v115 = v87;
            _os_log_impl(&dword_1830D4000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v87);
          goto LABEL_244;
        }
        if (v89)
        {
          v100 = *(const char **)(v17 + 16);
          if (!v100) {
            v100 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_input_finished";
          __int16 v110 = 2082;
          v111 = (char *)v100;
          __int16 v112 = 2048;
          uint64_t v113 = v17;
          _os_log_impl(&dword_1830D4000, v81, v88, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        v81 = __nwlog_obj();
        os_log_type_t v98 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v99 = *(const char **)(v17 + 16);
          if (!v99) {
            v99 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v109 = "__nw_protocol_input_finished";
          __int16 v110 = 2082;
          v111 = (char *)v99;
          __int16 v112 = 2048;
          uint64_t v113 = v17;
          _os_log_impl(&dword_1830D4000, v81, v98, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
LABEL_244:
    if (v80) {
      free(v80);
    }
    goto LABEL_55;
  }
  v52 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v109 = "nw_protocol_implementation_input_finished";
  __int16 v53 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v104) = 0;
  if (__nwlog_fault(v53, type, &v104))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v54 = __nwlog_obj();
      os_log_type_t v55 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v104)
    {
      v65 = (char *)__nw_create_backtrace_string();
      v54 = __nwlog_obj();
      os_log_type_t v66 = type[0];
      BOOL v67 = os_log_type_enabled(v54, type[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446466;
          v109 = "nw_protocol_implementation_input_finished";
          __int16 v110 = 2082;
          v111 = v65;
          _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v65);
        goto LABEL_215;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v54 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      if (os_log_type_enabled(v54, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl(&dword_1830D4000, v54, v91, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_215:
  if (v53) {
    free(v53);
  }
}

void sub_18371A7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  if (a16) {
    nw::release_if_needed<nw_protocol *>(&a15);
  }
  if (a18) {
    nw::release_if_needed<nw_protocol *>(&a17);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_protocol_implementation_readP31NWConcrete_nw_protocol_instanceP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v6 = extra + 104;
  if (!*(void *)(extra + 104)) {
    return 1;
  }
  uint64_t v7 = extra;
  uint64_t v8 = *(void *)(a1 + 32);
  if ((!v8 || (*(char *)(v8 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    char v26 = __nwlog_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      BOOL v28 = v27 == 0;
      if (v27) {
        uint64_t v29 = (const char *)(v27 + 407);
      }
      else {
        uint64_t v29 = "";
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v47 = "nw_protocol_implementation_read_block_invoke";
      __int16 v48 = 2082;
      os_log_type_t v49 = (void *)v29;
      if (v28) {
        char v30 = "";
      }
      else {
        char v30 = " ";
      }
      __int16 v50 = 2080;
      os_log_type_t v51 = v30;
      __int16 v52 = 2048;
      uint64_t v53 = object;
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing pending outbound frames for %lx (one-off)", buf, 0x2Au);
    }
  }
  uint64_t v9 = *(const char **)(v7 + 32);
  if (v9)
  {
    id v10 = (void *)*((void *)v9 + 5);
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v12 = *((void *)v9 + 11);
      if (v12) {
        *((void *)v9 + 11) = v12 + 1;
      }
      char v11 = -1;
    }
    else
    {
      char v11 = 0;
    }
    *(void *)os_log_type_t v43 = v9;
    char v44 = v11;
    uint64_t v13 = *((void *)v9 + 3);
    if (v13)
    {
      v14 = *(void (**)(const char *, uint64_t))(v13 + 96);
      if (v14)
      {
        v14(v9, v6);
LABEL_14:
        if (v10 == &nw_protocol_ref_counted_handle) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)v43);
        }
        return 1;
      }
    }
    os_log_type_t v16 = __nwlog_obj();
    uint64_t v17 = (const char *)*((void *)v9 + 2);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
    if (!v17) {
      uint64_t v17 = "invalid";
    }
    __int16 v48 = 2082;
    os_log_type_t v49 = (void *)v17;
    __int16 v50 = 2048;
    os_log_type_t v51 = v9;
    char v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v18, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          id v21 = (const char *)*((void *)v9 + 2);
          if (!v21) {
            id v21 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = (void *)v21;
          __int16 v50 = 2048;
          os_log_type_t v51 = v9;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v19 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v33)
          {
            if (*((void *)v9 + 2)) {
              v34 = (const char *)*((void *)v9 + 2);
            }
            else {
              v34 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
            __int16 v48 = 2082;
            os_log_type_t v49 = (void *)v34;
            __int16 v50 = 2048;
            os_log_type_t v51 = v9;
            __int16 v52 = 2082;
            uint64_t v53 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v33)
        {
          if (*((void *)v9 + 2)) {
            os_log_type_t v40 = (const char *)*((void *)v9 + 2);
          }
          else {
            os_log_type_t v40 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = (void *)v40;
          __int16 v50 = 2048;
          os_log_type_t v51 = v9;
          _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        id v19 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v19, type))
        {
          os_log_type_t v39 = (const char *)*((void *)v9 + 2);
          if (!v39) {
            os_log_type_t v39 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = (void *)v39;
          __int16 v50 = 2048;
          os_log_type_t v51 = v9;
          _os_log_impl(&dword_1830D4000, v19, v38, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
LABEL_64:
    if (v18) {
      free(v18);
    }
    goto LABEL_14;
  }
  os_log_type_t v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
  id v23 = (char *)_os_log_send_and_compose_impl();

  v43[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v43, &type))
  {
    if (v43[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v36 = v43[0];
      BOOL v37 = os_log_type_enabled(v24, v43[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = v35;
          _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_72;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v41 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v24, v41, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_72:
  if (v23) {
    free(v23);
  }
  return 1;
}

void sub_18371AEAC(_Unwind_Exception *exception_object)
{
}

void ___ZL35nw_protocol_outbound_data_finalizerPU22objcproto11OS_nw_frame8NSObjectbPv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v3 = a2;
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    if (!v3[14]
      || (*((_WORD *)v3 + 102) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(v3, v3[11]))
    {
      unsigned int v7 = 0;
    }
    else
    {
      int v6 = *(_DWORD *)(v4 + 52);
      uint64_t v5 = *(unsigned int *)(v4 + 56);
      if (v6)
      {
        unsigned int v7 = v6 - (v5 + *(_DWORD *)(v4 + 60));
        uint64_t v8 = *(void *)(v4 + 112);
        if (!v8) {
          goto LABEL_17;
        }
      }
      else
      {
        unsigned int v7 = 0;
        uint64_t v8 = *(void *)(v4 + 112);
        if (!v8) {
          goto LABEL_17;
        }
      }
      if (v7 == *(_DWORD *)(a1 + 48))
      {
        char v11 = (void *)(v8 + v5);
        uint64_t v12 = (const void *)nw_frame_unclaimed_bytes(*(void *)(a1 + 32), 0);
        memcpy(v11, v12, v7);
        if (gLogDatapath)
        {
          uint64_t v17 = __nwlog_obj();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            int v18 = 136446466;
            id v19 = "nw_protocol_outbound_data_finalizer_block_invoke";
            __int16 v20 = 1024;
            unsigned int v21 = v7;
            _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s Copying %u bytes for outbound frame", (uint8_t *)&v18, 0x12u);
          }
        }
        uint64_t v13 = *(void **)(a1 + 40);
        uint64_t departure_time = nw_frame_get_departure_time(*(void *)(a1 + 32));
        nw_protocol_instance_add_outbound(v13, (void *)v4, 0, departure_time, 0, 1);
        goto LABEL_20;
      }
    }
LABEL_17:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      unsigned int v16 = *(_DWORD *)(a1 + 48);
      int v18 = 136446722;
      id v19 = "nw_protocol_outbound_data_finalizer_block_invoke";
      __int16 v20 = 1024;
      unsigned int v21 = v16;
      __int16 v22 = 1024;
      unsigned int v23 = v7;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s Could not get frame for %u bytes (%u bytes)", (uint8_t *)&v18, 0x18u);
    }

    nw_frame_finalize(v4);
    goto LABEL_20;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    unsigned int v10 = *(_DWORD *)(a1 + 48);
    int v18 = 136446466;
    id v19 = "nw_protocol_outbound_data_finalizer_block_invoke";
    __int16 v20 = 1024;
    unsigned int v21 = v10;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s Could not get frame for %u bytes", (uint8_t *)&v18, 0x12u);
  }

LABEL_20:
  nw_protocol_data_finalizer(*(void **)(a1 + 40), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 52), *(void *)(a1 + 40) + 144);
}

void sub_18371B1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_request_outbound_data_block_invoke(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  int v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = nw_protocol_service_requested_outbound_data(v5, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void **)(a1 + 32));
  }

  return v7;
}

void sub_18371B248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_301(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  v3 = a2;
  uint64_t v4 = v3;
  if (!*(_DWORD *)(*(void *)(a1[4] + 8) + 24) || !*(_DWORD *)(*(void *)(a1[5] + 8) + 24))
  {
    uint64_t v7 = 0;
LABEL_15:

    return v7;
  }
  unsigned int v5 = nw_frame_unclaimed_length(v3);
  size_t v6 = *(unsigned int *)(*(void *)(a1[5] + 8) + 24);
  if (v5 <= v6)
  {
    unsigned int v12 = v5;
    uint64_t v13 = v4;
    uint64_t v9 = v13;
    uint64_t v14 = v13[4];
    id v15 = (void *)v13[5];
    if (v14)
    {
      *(void *)(v14 + 40) = v15;
      id v15 = (void *)v13[5];
    }
    else
    {
      *(void *)(a1[8] + 24) = v15;
    }
    *id v15 = v14;
    v13[4] = 0;
    v13[5] = 0;
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) -= v12;
    --*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
    uint64_t v16 = a1[8];
    unsigned int v17 = *(_DWORD *)(v16 + 36) - v12;
    --*(_DWORD *)(v16 + 32);
    *(_DWORD *)(v16 + 36) = v17;
    goto LABEL_13;
  }
  if (!v6)
  {
    unsigned int v21 = __nwlog_obj();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v36 = "strict_calloc";
    __int16 v22 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v22);
    if (result) {
      goto LABEL_41;
    }
    free(v22);
  }
  uint64_t v7 = (uint64_t)malloc_type_calloc(1uLL, v6, 0xEAFB8F1AuLL);
  if (v7) {
    goto LABEL_6;
  }
  unsigned int v23 = __nwlog_obj();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v36 = "strict_calloc";
  __int16 v37 = 2048;
  uint64_t v38 = 1;
  __int16 v39 = 2048;
  size_t v40 = v6;
  uint64_t v24 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v24);
  if (!result)
  {
    free(v24);
LABEL_6:
    uint64_t v8 = (_WORD *)nw_frame_create(0, v7, *(_DWORD *)(*(void *)(a1[5] + 8) + 24), (uint64_t)nw_protocol_implementation_partial_input_frame_finalizer, 0);
    if (v8)
    {
      v8[102] |= 1u;
      uint64_t v9 = v8;
      nw_frame_inherit_metadata((uint64_t)v4, (uint64_t)v9, 0);
      unsigned int v10 = (const void *)nw_frame_unclaimed_bytes((uint64_t)v4, 0);
      memcpy((void *)v7, v10, *(unsigned int *)(*(void *)(a1[5] + 8) + 24));
      nw_frame_claim((uint64_t)v4, v11, *(_DWORD *)(*(void *)(a1[5] + 8) + 24), 0);
      *(_DWORD *)(a1[8] + 36) -= *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
      *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = 0;
LABEL_13:
      ++*(_DWORD *)(*(void *)(a1[6] + 8) + 24);
      uint64_t v18 = a1[9];
      v9[4] = 0;
      id v19 = *(void **)(v18 + 8);
      v9[5] = v19;
      void *v19 = v9;
      *(void *)(v18 + 8) = v9 + 4;
      uint64_t v7 = 1;
LABEL_14:

      goto LABEL_15;
    }
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
    char v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v26, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s nw_frame_create with partial data failed", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
            __int16 v37 = 2082;
            uint64_t v38 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s nw_frame_create with partial data failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s nw_frame_create with partial data failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s nw_frame_create with partial data failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_36:
    if (v26) {
      free(v26);
    }
    if (v7)
    {
      free((void *)v7);
      uint64_t v9 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v9 = 0;
    }
    goto LABEL_14;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_18371B804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_302(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  v3 = a2;
  uint64_t v4 = v3;
  if (!*(_DWORD *)(*(void *)(a1[5] + 8) + 24) || !*(_DWORD *)(*(void *)(a1[6] + 8) + 24))
  {
    uint64_t v7 = 0;
LABEL_15:

    return v7;
  }
  unsigned int v5 = nw_frame_unclaimed_length(v3);
  size_t v6 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
  if (v5 <= v6)
  {
    unsigned int v12 = v5;
    uint64_t v13 = v4;
    uint64_t v9 = v13;
    uint64_t v14 = v13[4];
    id v15 = (void *)v13[5];
    if (v14)
    {
      *(void *)(v14 + 40) = v15;
      id v15 = (void *)v13[5];
    }
    else
    {
      *(void *)(a1[4] + 192) = v15;
    }
    *id v15 = v14;
    v13[4] = 0;
    v13[5] = 0;
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) -= v12;
    --*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
    *(_DWORD *)(a1[4] + 204) -= v12;
    --*(_DWORD *)(a1[4] + 200);
    goto LABEL_13;
  }
  if (!v6)
  {
    id v19 = __nwlog_obj();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v34 = "strict_calloc";
    __int16 v20 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v20);
    if (result) {
      goto LABEL_41;
    }
    free(v20);
  }
  uint64_t v7 = (uint64_t)malloc_type_calloc(1uLL, v6, 0xEAFB8F1AuLL);
  if (v7) {
    goto LABEL_6;
  }
  unsigned int v21 = __nwlog_obj();
  os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v34 = "strict_calloc";
  __int16 v35 = 2048;
  uint64_t v36 = 1;
  __int16 v37 = 2048;
  size_t v38 = v6;
  __int16 v22 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v22);
  if (!result)
  {
    free(v22);
LABEL_6:
    uint64_t v8 = (_WORD *)nw_frame_create(0, v7, *(_DWORD *)(*(void *)(a1[6] + 8) + 24), (uint64_t)nw_protocol_implementation_partial_input_frame_finalizer, 0);
    if (v8)
    {
      v8[102] |= 1u;
      uint64_t v9 = v8;
      nw_frame_inherit_metadata((uint64_t)v4, (uint64_t)v9, 0);
      unsigned int v10 = (const void *)nw_frame_unclaimed_bytes((uint64_t)v4, 0);
      memcpy((void *)v7, v10, *(unsigned int *)(*(void *)(a1[6] + 8) + 24));
      nw_frame_claim((uint64_t)v4, v11, *(_DWORD *)(*(void *)(a1[6] + 8) + 24), 0);
      *(_DWORD *)(a1[4] + 204) -= *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
      *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = 0;
LABEL_13:
      ++*(_DWORD *)(*(void *)(a1[7] + 8) + 24);
      uint64_t v16 = a1[9];
      v9[4] = 0;
      unsigned int v17 = *(void **)(v16 + 8);
      v9[5] = v17;
      void *v17 = v9;
      *(void *)(v16 + 8) = v9 + 4;
      uint64_t v7 = 1;
LABEL_14:

      goto LABEL_15;
    }
    unsigned int v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v24, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s nw_frame_create with partial data failed", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
            __int16 v35 = 2082;
            uint64_t v36 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s nw_frame_create with partial data failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s nw_frame_create with partial data failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s nw_frame_create with partial data failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_36:
    if (v24) {
      free(v24);
    }
    if (v7)
    {
      free((void *)v7);
      uint64_t v9 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v9 = 0;
    }
    goto LABEL_14;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_18371BDD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_implementation_partial_input_frame_finalizer(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (uint64_t)v1;
    uint64_t v13 = v1;
    if ((*((_WORD *)v1 + 102) & 0x100) == 0
      || !g_channel_check_validity
      || (v3 = g_channel_check_validity(v1, *((void *)v1 + 11)), uint64_t v2 = (uint64_t)v13, v3))
    {
      uint64_t v4 = *(void **)(v2 + 112);
      if (v4)
      {
        free(v4);
        uint64_t v2 = (uint64_t)v13;
      }
    }
    nw_frame_reset(v2, 0, 0, 0, 0);

    return;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
  size_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null frame", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null frame, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null frame, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_implementation_link_state(nw_protocol *a1, nw_protocol *a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!v5)
  {
    unsigned int v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v22, &type, &v54)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null link_info", buf, 0xCu);
      }
    }
    else if (v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v23 = __nwlog_obj();
      os_log_type_t v36 = type;
      BOOL v37 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
          __int16 v57 = 2082;
          v58 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_101:
        if (!v22) {
          goto LABEL_27;
        }
LABEL_102:
        free(v22);
        goto LABEL_27;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s called with null link_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v23 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_1830D4000, v23, v49, "%{public}s called with null link_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_100:

    goto LABEL_101;
  }
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    os_log_type_t v8 = p_output_handler;
    uint64_t v9 = (NWConcrete_nw_protocol_instance *)v8;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v10 = v8[1];
      if (v10)
      {
        if (v10[1].identifier)
        {
          BOOL v11 = v5;
          int v12 = v11[2];

          *(void *)buf = 0;
          uint64_t v13 = nw_protocol_implementation_lookup_path_by_protocol(v9, a2, (unint64_t *)buf);
          if (v13)
          {
            uint64_t v14 = v13;
            if (v12 == 1)
            {
              char v16 = *(unsigned char *)(v13 + 137) | 2;
            }
            else
            {
              if (v12 || (char v15 = *(unsigned char *)(v13 + 137), *(unsigned char *)(v13 + 137) = v15 & 0xFD, (v15 & 4) == 0))
              {
LABEL_19:
                var17 = (void (*)(NWConcrete_nw_protocol_instance *, uint64_t, void))v9->parent_definition->extended_state->var17;
                if (var17)
                {
                  uint64_t v20 = *(void *)buf;
LABEL_25:
                  var17(v9, v20, (BYTE3(v9->flow_in_connected) >> 2) & 1);
                  goto LABEL_26;
                }
                goto LABEL_26;
              }
              nw_protocol_implementation_output_available(a1, a2);
              char v16 = *(unsigned char *)(v14 + 137) & 0xFB;
            }
            *(unsigned char *)(v14 + 137) = v16;
            goto LABEL_19;
          }
          if (v12 == 1)
          {
            char v18 = BYTE3(v9->flow_in_connected) | 4;
          }
          else
          {
            if (v12 || (char v17 = BYTE3(v9->flow_in_connected), BYTE3(v9->flow_in_connected) = v17 & 0xFB, (v17 & 8) == 0))
            {
LABEL_23:
              var17 = (void (*)(NWConcrete_nw_protocol_instance *, uint64_t, void))v9->parent_definition->extended_state->var17;
              if (var17)
              {
                uint64_t v20 = 0;
                goto LABEL_25;
              }
LABEL_26:

              goto LABEL_27;
            }
            nw_protocol_implementation_output_available(a1, a2);
            char v18 = BYTE3(v9->flow_in_connected) & 0xF7;
          }
          BYTE3(v9->flow_in_connected) = v18;
          goto LABEL_23;
        }
        char v33 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v54 = 0;
        if (!__nwlog_fault(v28, &type, &v54)) {
          goto LABEL_112;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (!v54)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v53 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_1830D4000, v29, v53, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_111;
        }
        char v44 = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v29, type);
        if (!v44)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
          __int16 v57 = 2082;
          v58 = v44;
          _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        char v31 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v54 = 0;
        if (!__nwlog_fault(v28, &type, &v54)) {
          goto LABEL_112;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v32 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (!v54)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v52 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_1830D4000, v29, v52, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_111;
        }
        char v44 = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v45 = type;
        BOOL v46 = os_log_type_enabled(v29, type);
        if (!v44)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
            _os_log_impl(&dword_1830D4000, v29, v45, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_111;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
          __int16 v57 = 2082;
          v58 = v44;
          _os_log_impl(&dword_1830D4000, v29, v45, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v44);
      if (!v28) {
        goto LABEL_26;
      }
      goto LABEL_113;
    }
    uint64_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v28, &type, &v54)) {
      goto LABEL_112;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v54)
    {
      uint64_t v41 = (char *)__nw_create_backtrace_string();
      BOOL v29 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v29, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
          __int16 v57 = 2082;
          v58 = v41;
          _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v41);
LABEL_112:
        if (!v28) {
          goto LABEL_26;
        }
LABEL_113:
        free(v28);
        goto LABEL_26;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
        _os_log_impl(&dword_1830D4000, v29, v51, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_111:

    goto LABEL_112;
  }
  os_log_type_t v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
  __int16 v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if (!__nwlog_fault(v22, &type, &v54)) {
    goto LABEL_101;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    unsigned int v23 = __nwlog_obj();
    os_log_type_t v26 = type;
    if (os_log_type_enabled(v23, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_100;
  }
  if (!v54)
  {
    unsigned int v23 = __nwlog_obj();
    os_log_type_t v50 = type;
    if (os_log_type_enabled(v23, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_1830D4000, v23, v50, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_100;
  }
  size_t v38 = (char *)__nw_create_backtrace_string();
  unsigned int v23 = __nwlog_obj();
  os_log_type_t v39 = type;
  BOOL v40 = os_log_type_enabled(v23, type);
  if (!v38)
  {
    if (v40)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_1830D4000, v23, v39, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_100;
  }
  if (v40)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_state";
    __int16 v57 = 2082;
    v58 = v38;
    _os_log_impl(&dword_1830D4000, v23, v39, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v38);
  if (v22) {
    goto LABEL_102;
  }
LABEL_27:
}

void sub_18371CCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL39nw_protocol_implementation_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(nw_hash_node_get_extra(a2) + 128);
  if (v3 != 2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 == 2;
}

uint64_t ___ZL39nw_protocol_implementation_disconnectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t object = (void *)nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v4 = object;
    uint64_t v5 = *(void *)(a1 + 32);
    size_t v6 = (void *)object[5];
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = object[11];
      if (v8) {
        object[11] = v8 + 1;
      }
      char v7 = -1;
    }
    else
    {
      char v7 = 0;
    }
    *(void *)BOOL v48 = object;
    char v49 = v7;
    if (v5)
    {
      uint64_t v9 = *(void **)(v5 + 40);
      if (v9 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v11 = *(void *)(v5 + 88);
        if (v11) {
          *(void *)(v5 + 88) = v11 + 1;
        }
        char v10 = -1;
      }
      else
      {
        char v10 = 0;
      }
      *(void *)os_log_type_t v45 = v5;
      char v46 = v10;
      uint64_t v12 = object[3];
      if (v12)
      {
        uint64_t v13 = *(void (**)(void *))(v12 + 48);
        if (v13)
        {
          v13(object);
LABEL_16:
          if (v9 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v45);
          }
LABEL_18:
          if (v6 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v48);
          }
          return 1;
        }
      }
      char v15 = __nwlog_obj();
      char v16 = (const char *)v4[2];
      *(_DWORD *)buf = 136446722;
      os_log_type_t v51 = "__nw_protocol_disconnected";
      if (!v16) {
        char v16 = "invalid";
      }
      __int16 v52 = 2082;
      os_log_type_t v53 = (void *)v16;
      __int16 v54 = 2048;
      os_log_type_t v55 = v4;
      char v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v44 = 0;
      if (__nwlog_fault(v17, &type, &v44))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            uint64_t v20 = (const char *)v4[2];
            if (!v20) {
              uint64_t v20 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            os_log_type_t v53 = (void *)v20;
            __int16 v54 = 2048;
            os_log_type_t v55 = v4;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s protocol %{public}s (%p) has invalid disconnected callback", buf, 0x20u);
          }
        }
        else if (v44)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          char v18 = __nwlog_obj();
          os_log_type_t v30 = type;
          BOOL v31 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v31)
            {
              os_log_type_t v32 = (const char *)v4[2];
              if (!v32) {
                os_log_type_t v32 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              os_log_type_t v51 = "__nw_protocol_disconnected";
              __int16 v52 = 2082;
              os_log_type_t v53 = (void *)v32;
              __int16 v54 = 2048;
              os_log_type_t v55 = v4;
              __int16 v56 = 2082;
              __int16 v57 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_67;
          }
          if (v31)
          {
            uint64_t v41 = (const char *)v4[2];
            if (!v41) {
              uint64_t v41 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            os_log_type_t v53 = (void *)v41;
            __int16 v54 = 2048;
            os_log_type_t v55 = v4;
            _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          char v18 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v18, type))
          {
            BOOL v40 = (const char *)v4[2];
            if (!v40) {
              BOOL v40 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            os_log_type_t v53 = (void *)v40;
            __int16 v54 = 2048;
            os_log_type_t v55 = v4;
            _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_67:
      if (v17) {
        free(v17);
      }
      goto LABEL_16;
    }
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v51 = "__nw_protocol_disconnected";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    v45[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, v45, &type))
    {
      if (v45[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v51 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        os_log_type_t v36 = (char *)__nw_create_backtrace_string();
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v37 = v45[0];
        BOOL v38 = os_log_type_enabled(v27, v45[0]);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            os_log_type_t v53 = v36;
            _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
          goto LABEL_83;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v51 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v43 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v51 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_1830D4000, v27, v43, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_83:
    if (v26) {
      free(v26);
    }
    goto LABEL_18;
  }
  unsigned int v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v51 = "__nw_protocol_disconnected";
  __int16 v22 = (char *)_os_log_send_and_compose_impl();

  v48[0] = OS_LOG_TYPE_ERROR;
  v45[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v22, v48, v45))
  {
    if (v48[0] == OS_LOG_TYPE_FAULT)
    {
      unsigned int v23 = __nwlog_obj();
      os_log_type_t v24 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v45[0])
    {
      char v33 = (char *)__nw_create_backtrace_string();
      unsigned int v23 = __nwlog_obj();
      os_log_type_t v34 = v48[0];
      BOOL v35 = os_log_type_enabled(v23, v48[0]);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v51 = "__nw_protocol_disconnected";
          __int16 v52 = 2082;
          os_log_type_t v53 = v33;
          _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_78;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v23 = __nwlog_obj();
      os_log_type_t v42 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v23, v42, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_78:
  if (v22) {
    free(v22);
  }
  return 1;
}

void sub_18371D550(_Unwind_Exception *exception_object)
{
}

void ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_289(uint64_t a1)
{
}

uint64_t ___ZL35nw_protocol_implementation_teardownP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v4 = (uint64_t *)(extra + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 - 64);
    goto LABEL_3;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "__nw_protocol_get_output_handler";
  char v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "__nw_protocol_get_output_handler";
        uint64_t v13 = "%{public}s called with null protocol";
LABEL_21:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "__nw_protocol_get_output_handler";
            __int16 v20 = 2082;
            unsigned int v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v15) {
          goto LABEL_22;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "__nw_protocol_get_output_handler";
        uint64_t v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_21;
      }
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "__nw_protocol_get_output_handler";
        uint64_t v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:
  }
LABEL_23:
  if (v10) {
    free(v10);
  }
  uint64_t v6 = 0;
LABEL_3:
  if (*v4 == v6)
  {
    char v7 = *(unsigned char *)(extra + 40);
    if (v7)
    {
      nw::release_if_needed<nw_protocol *>(v4);
      char v7 = *(unsigned char *)(extra + 40);
    }
    *(void *)(extra + 32) = 0;
    *(unsigned char *)(extra + 40) = v7 | 1;
  }
  return 1;
}

uint64_t ___ZL35nw_protocol_implementation_teardownP31NWConcrete_nw_protocol_instance_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL35nw_protocol_implementation_teardownP31NWConcrete_nw_protocol_instance_block_invoke_292(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL34nw_protocol_fail_outbound_requestsP31NWConcrete_nw_protocol_instance_block_invoke(int a1, int a2, void *aBlock)
{
  int v3 = (void (**)(void *, void, uint64_t))_Block_copy(aBlock);
  v3[2](v3, 0, 1);

  return 1;
}

void sub_18371D8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_protocol_instance_one_to_one_callbacksv_block_invoke()
{
  nw_protocol_instance_one_to_one_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler((void *)nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_remove_input_handler);
  nw_protocol_callbacks_set_connected(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_connected);
  nw_protocol_callbacks_set_disconnect(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnect);
  nw_protocol_callbacks_set_disconnected(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnected);
  nw_protocol_callbacks_set_link_state(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_link_state);
  nw_protocol_callbacks_set_get_message_properties(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_message_properties);
  nw_protocol_callbacks_set_waiting_for_output(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_waiting_for_output);
  nw_protocol_callbacks_set_get_input_frames(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_finalize_output_frames);
  nw_protocol_callbacks_set_input_available(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_available);
  nw_protocol_callbacks_set_input_finished(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_finished);
  nw_protocol_callbacks_set_input_flush(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_flush);
  nw_protocol_callbacks_set_output_available(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_available);
  nw_protocol_callbacks_set_output_finished(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_finished);
  nw_protocol_callbacks_set_copy_info(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_copy_info);
  nw_protocol_callbacks_set_notify(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_notify);
  nw_protocol_callbacks_set_error(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_error);
  uint64_t v0 = nw_protocol_instance_one_to_one_callbacks(void)::callbacks;

  nw_protocol_callbacks_set_updated_path(v0, (uint64_t)nw_protocol_implementation_updated_path);
}

void nw_protocol_definition_unregister(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_protocol_unregister((void *)v1 + 1);
    goto LABEL_3;
  }
  int v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_definition_unregister";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_definition_unregister";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_definition_unregister";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_definition_unregister";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_definition_unregister";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void nw_protocol_make_subdata(void *a1, int a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  char v7 = v5;
  if (v5)
  {
    nw_frame_claim((uint64_t)v5, v6, a2, a3);
    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_protocol_make_subdata";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_make_subdata";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_protocol_make_subdata";
          __int16 v20 = 2082;
          unsigned int v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_make_subdata";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_make_subdata";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void nw_protocol_make_superdata(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  char v7 = v5;
  if (v5)
  {
    nw_frame_unclaim((uint64_t)v5, v6, a2, a3);
    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_protocol_make_superdata";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_make_superdata";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_protocol_make_superdata";
          __int16 v20 = 2082;
          unsigned int v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_make_superdata";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_make_superdata";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

BOOL nw_protocol_data_is_in_array(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (*((void *)v1 + 4)) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = *((void *)v1 + 5) != 0;
    }
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_data_is_in_array";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_data_is_in_array";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_data_is_in_array";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_data_is_in_array";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_data_is_in_array";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_5:

  return v3;
}

NWConcrete_nw_protocol_data_array *nw_protocol_data_array_create()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = objc_alloc_init(NWConcrete_nw_protocol_data_array);
  id v1 = v0;
  if (v0)
  {
    uint64_t v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_protocol_data_array_create";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_8;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_data_array_create";
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s [nw_protocol_data_array init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4) {
      goto LABEL_10;
    }
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_data_array_create";
      _os_log_impl(&dword_1830D4000, v5, v11, "%{public}s [nw_protocol_data_array init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  os_log_type_t v9 = type;
  BOOL v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_data_array_create";
      _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [nw_protocol_data_array init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v15 = "nw_protocol_data_array_create";
    __int16 v16 = 2082;
    __int16 v17 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [nw_protocol_data_array init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:

  return v1;
}

BOOL nw_protocol_data_array_is_empty(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 6)) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = *((void *)v1 + 1) == 0;
    }
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_data_array_is_empty";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_is_empty";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_data_array_is_empty";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_is_empty";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_is_empty";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 1;
LABEL_5:

  return v3;
}

id nw_protocol_data_array_first(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_data_array_first";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_first";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_data_array_first";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_first";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_first";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

id nw_protocol_data_array_last(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = **(id **)(*((void *)v1 + 2) + 8);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_data_array_last";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_last";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_data_array_last";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_last";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_array_last";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

id nw_protocol_data_array_next(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)*((void *)v1 + 4);
    if (!v3 && !*((void *)v1 + 5)) {
      id v3 = 0;
    }
    id v4 = v3;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_data_array_next";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_data_array_next";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_data_array_next";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_data_array_next";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_data_array_next";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_6:

  return v4;
}

void nw_protocol_data_array_append(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    char v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_protocol_data_array_append";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_data_array_append";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_protocol_data_array_append";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_data_array_append";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_data_array_append";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    ++v3[6];
    *((void *)v4 + 4) = 0;
    os_log_type_t v6 = (void *)*((void *)v3 + 2);
    *((void *)v4 + 5) = v6;
    void *v6 = v4;
    *((void *)v3 + 2) = v4 + 32;
    goto LABEL_4;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_protocol_data_array_append";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null data", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v24 = "nw_protocol_data_array_append";
    __int16 v25 = 2082;
    os_log_type_t v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_protocol_data_array_insert_after(void *a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  os_log_type_t v6 = a2;
  char v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_protocol_data_array_insert_after";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_protocol_data_array_insert_after";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13) {
          goto LABEL_7;
        }
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v6)
  {
    __int16 v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_protocol_data_array_insert_after";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null data", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    unsigned int v23 = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_protocol_data_array_insert_after";
      __int16 v35 = 2082;
      os_log_type_t v36 = v23;
      _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v7)
  {
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_protocol_data_array_insert_after";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null other_data", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null other_data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    unsigned int v23 = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null other_data, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_protocol_data_array_insert_after";
      __int16 v35 = 2082;
      os_log_type_t v36 = v23;
      _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null other_data, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
  ++v5[6];
  os_log_type_t v9 = v5 + 4;
  os_log_type_t v10 = v7 + 4;
  uint64_t v11 = v7[4];
  v6[4] = v11;
  if (v11) {
    os_log_type_t v9 = (void *)(v11 + 40);
  }
  *os_log_type_t v9 = v6 + 4;
  void *v10 = v6;
  v6[5] = v10;
LABEL_7:
}

void nw_protocol_data_array_prepend(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_protocol_data_array_prepend";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_protocol_data_array_prepend";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_protocol_data_array_prepend";
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_protocol_data_array_prepend";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_protocol_data_array_prepend";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v4)
  {
    os_log_type_t v6 = v3 + 1;
    uint64_t v7 = v3[1];
    ++*((_DWORD *)v3 + 6);
    *((void *)v4 + 4) = v7;
    if (v7) {
      os_log_type_t v8 = (void *)(v7 + 40);
    }
    else {
      os_log_type_t v8 = v3 + 2;
    }
    *os_log_type_t v8 = v4 + 32;
    void *v6 = v4;
    *((void *)v4 + 5) = v6;
    goto LABEL_7;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_protocol_data_array_prepend";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null data", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v23)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  uint64_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_protocol_data_array_prepend";
    __int16 v27 = 2082;
    os_log_type_t v28 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

void nw_protocol_data_array_remove(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_protocol_data_array_remove";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_remove";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_protocol_data_array_remove";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v18) {
          goto LABEL_28;
        }
LABEL_63:
        free(v18);
        goto LABEL_28;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_remove";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_data_array_remove";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (v4)
  {
    int v6 = v3[6];
    if (v6)
    {
      v3[6] = v6 - 1;
LABEL_24:
      uint64_t v15 = v5[4];
      os_log_type_t v16 = (void *)v5[5];
      if (v15)
      {
        *(void *)(v15 + 40) = v16;
        os_log_type_t v16 = (void *)v5[5];
      }
      else
      {
        *((void *)v3 + 2) = v16;
      }
      void *v16 = v15;
      v5[4] = 0;
      v5[5] = 0;
      goto LABEL_28;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_protocol_data_array_remove";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v8, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_protocol_data_array_remove";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s Protocol data array count attempted to decrement below zero", buf, 0xCu);
        }
      }
      else if (v31)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v34 = "nw_protocol_data_array_remove";
            __int16 v35 = 2082;
            os_log_type_t v36 = v11;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Protocol data array count attempted to decrement below zero, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          if (!v8) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_protocol_data_array_remove";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Protocol data array count attempted to decrement below zero, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_protocol_data_array_remove";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s Protocol data array count attempted to decrement below zero, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v8) {
      goto LABEL_24;
    }
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  os_log_type_t v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v34 = "nw_protocol_data_array_remove";
  BOOL v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (!__nwlog_fault(v18, &type, &v31)) {
    goto LABEL_62;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null data", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v31)
  {
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  os_log_type_t v26 = (char *)__nw_create_backtrace_string();
  os_log_type_t v19 = __nwlog_obj();
  os_log_type_t v27 = type;
  BOOL v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v34 = "nw_protocol_data_array_remove";
    __int16 v35 = 2082;
    os_log_type_t v36 = v26;
    _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v18) {
    goto LABEL_63;
  }
LABEL_28:
}

void nw_protocol_data_array_apply(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_protocol_data_array_apply";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v10, &type, &v27)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_protocol_data_array_apply";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_protocol_data_array_apply";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_protocol_data_array_apply";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_protocol_data_array_apply";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v4)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    os_log_type_t v24 = __nw_protocol_data_array_apply_block_invoke;
    BOOL v25 = &unk_1E523BDD8;
    id v26 = v4;
    uint64_t v6 = v3[1];
    do
    {
      if (!v6) {
        break;
      }
      uint64_t v7 = *(void *)(v6 + 32);
      char v8 = v24((uint64_t)v23);
      uint64_t v6 = v7;
    }
    while ((v8 & 1) != 0);

    goto LABEL_7;
  }
  BOOL v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v30 = "nw_protocol_data_array_apply";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v10, &type, &v27)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null apply_block", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v27)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null apply_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  uint64_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null apply_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v30 = "nw_protocol_data_array_apply";
    __int16 v31 = 2082;
    os_log_type_t v32 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null apply_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_protocol_data_array_apply_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_protocol_data_array_prepend_array(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v26 = "nw_protocol_data_array_prepend_array";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v26 = "nw_protocol_data_array_prepend_array";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          id v26 = "nw_protocol_data_array_prepend_array";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_43:
        free(v10);
        goto LABEL_8;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        id v26 = "nw_protocol_data_array_prepend_array";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v26 = "nw_protocol_data_array_prepend_array";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    uint64_t v6 = v3[1];
    uint64_t v7 = v4 + 8;
    if (v6)
    {
      **((void **)v4 + 2) = v6;
      *(void *)(v3[1] + 40) = *((void *)v4 + 2);
      *((void *)v4 + 2) = v3[2];
      v3[1] = 0;
      v3[2] = v3 + 1;
    }
    if (*v7)
    {
      *(void *)v3[2] = *v7;
      *(void *)(*((void *)v4 + 1) + 40) = v3[2];
      v3[2] = *((void *)v4 + 2);
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = v7;
    }
    *((_DWORD *)v3 + 6) += *((_DWORD *)v4 + 6);
    char v8 = v4;
    v5[1] = 0;
    *((void *)v8 + 2) = v7;
    *((_DWORD *)v5 + 6) = 0;

    goto LABEL_8;
  }
  BOOL v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v26 = "nw_protocol_data_array_prepend_array";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      id v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null prepend_array", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      id v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null prepend_array, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  uint64_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      id v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null prepend_array, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    id v26 = "nw_protocol_data_array_prepend_array";
    __int16 v27 = 2082;
    BOOL v28 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null prepend_array, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_43;
  }
LABEL_8:
}

void nw_protocol_data_array_apppend_array(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v26 = "nw_protocol_data_array_apppend_array";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v26 = "nw_protocol_data_array_apppend_array";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          id v26 = "nw_protocol_data_array_apppend_array";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_43:
        free(v10);
        goto LABEL_8;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        id v26 = "nw_protocol_data_array_apppend_array";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v26 = "nw_protocol_data_array_apppend_array";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    uint64_t v6 = v3[1];
    uint64_t v7 = v4 + 8;
    if (v6)
    {
      **((void **)v4 + 2) = v6;
      *(void *)(v3[1] + 40) = *((void *)v4 + 2);
      *((void *)v4 + 2) = v3[2];
      v3[1] = 0;
      v3[2] = v3 + 1;
    }
    if (*v7)
    {
      *(void *)v3[2] = *v7;
      *(void *)(*((void *)v4 + 1) + 40) = v3[2];
      v3[2] = *((void *)v4 + 2);
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = v7;
    }
    *((_DWORD *)v3 + 6) += *((_DWORD *)v4 + 6);
    char v8 = v4;
    v5[1] = 0;
    *((void *)v8 + 2) = v7;
    *((_DWORD *)v5 + 6) = 0;

    goto LABEL_8;
  }
  BOOL v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v26 = "nw_protocol_data_array_apppend_array";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      id v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null append_array", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      id v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null append_array, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  BOOL v18 = (char *)__nw_create_backtrace_string();
  uint64_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      id v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null append_array, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    id v26 = "nw_protocol_data_array_apppend_array";
    __int16 v27 = 2082;
    BOOL v28 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null append_array, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_43;
  }
LABEL_8:
}

uint64_t nw_protocol_data_array_count(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[6];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_data_array_count";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_data_array_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_data_array_count";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_data_array_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_data_array_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_data_array_data_length(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count(v1 + 1, 1, buf);
    uint64_t v3 = *(unsigned int *)buf;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_data_array_data_length";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_data_array_data_length";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_data_array_data_length";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_data_array_data_length";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_data_array_data_length";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_metadata_copy_original(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_protocol_metadata_copy_original";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v24 = "nw_protocol_metadata_copy_original";
      __int16 v25 = 2082;
      id v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  uint64_t v3 = *((void *)v1 + 1);
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_protocol_metadata_copy_original";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata->definition", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v8) {
        free(v8);
      }
      goto LABEL_40;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null metadata->definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null metadata->definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v24 = "nw_protocol_metadata_copy_original";
      __int16 v25 = 2082;
      id v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null metadata->definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v4 = *(void *)(v3 + 72);
  if (!v4 || (id v5 = *(uint64_t (**)(void))(v4 + 32)) == 0)
  {
LABEL_40:
    uint64_t v6 = 0;
    goto LABEL_41;
  }
  uint64_t v6 = v5();
LABEL_41:

  return v6;
}

void sub_183722510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_metadata_set_original(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_protocol_metadata_set_original";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v25 = "nw_protocol_metadata_set_original";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  uint64_t v5 = v3[1];
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    if (v6)
    {
      uint64_t v7 = *(void (**)(void *, id))(v6 + 40);
      if (v7) {
        v7(v3, v4);
      }
    }
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v25 = "nw_protocol_metadata_set_original";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_metadata_set_original";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null metadata->definition", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_metadata_set_original";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null metadata->definition, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_metadata_set_original";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null metadata->definition, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v25 = "nw_protocol_metadata_set_original";
    __int16 v26 = 2082;
    uint64_t v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null metadata->definition, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_1837229F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_metadata_is_equal(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  uint64_t v7 = v6;
  if (v5 == v6) {
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  if (v5 && v6)
  {
    if (!nw_protocol_definition_is_equal_unsafe(v5[1], v6[1]))
    {
      uint64_t v8 = 0;
      goto LABEL_9;
    }
    os_log_type_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5[1] + 160);
    if (v9)
    {
      uint64_t v8 = v9(v7[1], v5[4], v7[4], a3);
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v8 = 1;
  }
LABEL_9:

  return v8;
}

void sub_183722AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_protocol_create_deserialized_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  uint64_t v7 = [NWConcrete_nw_protocol_options alloc];
  uint64_t v8 = (char *)v6;
  os_log_type_t v9 = v8;
  if (v7)
  {
    if (!*((void *)v8 + 17))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
        __int16 v26 = 2112;
        uint64_t v27 = v9;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s No deserialize function found for %@", buf, 0x16u);
      }

      goto LABEL_8;
    }
    v23.receiver = v7;
    v23.super_class = (Class)NWConcrete_nw_protocol_options;
    os_log_type_t v10 = (NWConcrete_nw_protocol_options *)objc_msgSendSuper2(&v23, sel_init);
    uint64_t v7 = v10;
    if (v10)
    {
      objc_storeStrong((id *)&v10->definition, a1);
      v7->handle = (void *)(*((uint64_t (**)(char *, uint64_t, uint64_t))v9 + 17))(v9, a2, a3);
      goto LABEL_9;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v14, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
            __int16 v26 = 2082;
            uint64_t v27 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_26:
    if (v14) {
      free(v14);
    }
LABEL_8:
    uint64_t v7 = 0;
  }
LABEL_9:

  return v7;
}

void sub_183722E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_options_set_log_id(void *a1, const char *a2, const char *a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  uint64_t v8 = v7;
  if (v7)
  {
    if (a3 && *a3)
    {
      *((_WORD *)v7 + 68) = a4;
      snprintf(v7 + 48, 0x54uLL, "[%s%s:%u]", a2, a3, a4);
    }
    goto LABEL_5;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_protocol_options_set_log_id";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_protocol_options_set_log_id";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_protocol_options_set_log_id";
          __int16 v21 = 2082;
          char v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_protocol_options_set_log_id";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_protocol_options_set_log_id";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v10) {
    free(v10);
  }
LABEL_5:
}

void nw_protocol_options_set_proxy_endpoint(void *a1, void *a2, char a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (v5)
  {
    *((unsigned char *)v5 + 152) = a3;
    objc_storeStrong((id *)v5 + 3, a2);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_options_set_proxy_endpoint";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_set_proxy_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_options_set_proxy_endpoint";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_set_proxy_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_set_proxy_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

BOOL nw_protocol_options_proxy_endpoint_should_override_stack(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v4 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null options", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v6 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
            __int16 v17 = 2082;
            os_log_type_t v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v6 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
          _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v5) {
      free(v5);
    }
    goto LABEL_22;
  }
  if (!*((void *)v1 + 3))
  {
LABEL_22:
    BOOL v3 = 0;
    goto LABEL_23;
  }
  BOOL v3 = *((unsigned char *)v1 + 152) != 0;
LABEL_23:

  return v3;
}

id nw_protocol_options_copy_proxy_endpoint_for_stack(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (void *)v1[3];
    if (v3)
    {
      id v4 = v3;
      int v5 = [v4 type];

      id v6 = (void *)v2[3];
      if (v5 == 4)
      {
        id v7 = (id)nw_endpoint_copy_host_port_endpoint_for_url(v6);
LABEL_7:
        id v8 = v7;
        goto LABEL_8;
      }
    }
    else
    {
      id v6 = 0;
    }
    id v7 = v6;
    goto LABEL_7;
  }
  BOOL v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v11) {
    free(v11);
  }
  id v8 = 0;
LABEL_8:

  return v8;
}

void sub_183723964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_options_copy_proxy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[3];
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_copy_proxy_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_copy_proxy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_copy_proxy_endpoint";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_copy_proxy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_copy_proxy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_options_add_proxy_next_hop(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = v3[4];
    if (!v5)
    {
      BOOL v6 = nw_array_create();
      id v7 = (void *)v3[4];
      v3[4] = v6;

      uint64_t v5 = v3[4];
    }
    nw_array_append(v5, v4);
    goto LABEL_5;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_protocol_options_add_proxy_next_hop";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_options_add_proxy_next_hop";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null proxy_next_hop", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_protocol_options_add_proxy_next_hop";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null proxy_next_hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_options_add_proxy_next_hop";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null proxy_next_hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_options_add_proxy_next_hop";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null proxy_next_hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v9) {
    free(v9);
  }
LABEL_5:
}

void nw_protocol_options_enumerate_proxy_next_hops(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    BOOL v6 = (atomic_uchar *)v3[4];
    if (v6)
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_protocol_options_enumerate_proxy_next_hops_block_invoke;
      v21[3] = &unk_1E524AE90;
      id v22 = v4;
      nw_array_apply(v6, (uint64_t)v21);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  char v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "nw_protocol_options_enumerate_proxy_next_hops";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

uint64_t __nw_protocol_options_enumerate_proxy_next_hops_block_invoke(uint64_t a1)
{
  return 1;
}

BOOL nw_http_authentication_parse_schemes(_CFHTTPAuthentication *a1, NSObject *a2, char a3, int a4, int a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  BOOL v9 = nw_array_create();
  error.domain = 0;
  *(void *)&error.CFStreamError error = 0;
  if (CFHTTPAuthenticationIsValid(a1, &error))
  {
    CFDictionaryRef SchemesDict = (const __CFDictionary *)_CFHTTPAuthenticationGetSchemesDict();
    uint64_t v11 = _CFHTTPAuthenticationCopySortedAuthSchemes();
    CFArrayRef v12 = (const __CFArray *)v11;
    if (SchemesDict && v11)
    {
      char v30 = a3;
      CFIndex v13 = 0;
      CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F18F60];
      CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F18F68];
      CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F18F70];
      CFStringRef v31 = (const __CFString *)*MEMORY[0x1E4F18F78];
      while (1)
      {
        while (1)
        {
          if (v13 >= CFArrayGetCount(v12)) {
            goto LABEL_39;
          }
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v13);
          if (ValueAtIndex) {
            break;
          }
LABEL_6:
          ++v13;
        }
        CFStringRef v17 = ValueAtIndex;
        int v18 = 1;
        if (CFStringCompare(ValueAtIndex, v14, 1uLL) == kCFCompareEqualTo) {
          goto LABEL_25;
        }
        if (CFStringCompare(v17, v15, 1uLL) == kCFCompareEqualTo) {
          break;
        }
        if (CFStringCompare(v17, theString2, 1uLL) == kCFCompareEqualTo)
        {
          int v18 = 5;
          goto LABEL_25;
        }
        if (CFStringCompare(v17, v31, 1uLL))
        {
          if (CFStringCompare(v17, @"OAuth", 1uLL) == kCFCompareEqualTo)
          {
            int v18 = 6;
            goto LABEL_25;
          }
          if (CFStringCompare(v17, @"PrivateToken", 1uLL) == kCFCompareEqualTo)
          {
            int v18 = 8;
            goto LABEL_25;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_6;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_parse_schemes";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v17;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s Unsupported authentication type '%{public}@'", buf, 0x16u);
          ++v13;
        }
        else
        {
          if (v30)
          {
            int v18 = 4;
            goto LABEL_25;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_6;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_parse_schemes";
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s Negotiate requires a URL", buf, 0xCu);
          ++v13;
        }
      }
      int v18 = 2;
LABEL_25:
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      uint64_t v37 = 0;
      uint64_t v37 = nw_authentication_protection_space_create(v18);
      nw_authentication_protection_space_set_endpoint(*(void **)(*(void *)&buf[8] + 24), a2);
      if (a4)
      {
        nw_authentication_protection_space_set_is_proxy(*(void **)(*(void *)&buf[8] + 24), 1);
        nw_authentication_protection_space_set_proxy_origin_is_cleartext(*(void **)(*(void *)&buf[8] + 24), a5);
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(SchemesDict, v17);
      if (Value && (CFStringRef v22 = (const __CFString *)CFDictionaryGetValue(Value, @"Realm")) != 0)
      {
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 0x40000000;
        v34[2] = __nw_http_authentication_parse_schemes_block_invoke;
        v34[3] = &unk_1E523C0E8;
        v34[4] = buf;
        nw_utilities_get_c_string_from_cfstring(v22, 0x201u, v34);
      }
      else
      {
        char v23 = *(void **)(*(void *)&buf[8] + 24);
        hostname = nw_endpoint_get_hostname(a2);
        nw_authentication_protection_space_set_realm(v23, hostname);
      }
      nw_array_append(v9, *(void **)(*(void *)&buf[8] + 24));
      __int16 v25 = *(void **)(*(void *)&buf[8] + 24);
      if (v25)
      {
        os_release(v25);
        *(void *)(*(void *)&buf[8] + 24) = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v27 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = "WWW-Authenticate";
      if (a4) {
        uint64_t v28 = "Proxy-Authenticate";
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_parse_schemes";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v28;
      _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s Unable to parse %s header", buf, 0x16u);
    }
LABEL_39:
    if (v12) {
      CFRelease(v12);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v26 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_parse_schemes";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = error.domain;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v37) = error.error;
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s CFHTTPAuthenticationCreateFromResponse failed to return a valid authentication ref [%ld:%d]", buf, 0x1Cu);
    }
  }
  return v9;
}

void __nw_http_authentication_parse_schemes_block_invoke(uint64_t a1, const char *a2)
{
}

BOOL nw_protocol_http_authentication_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  BOOL v6 = (NSObject **)malloc_type_calloc(1uLL, 0x428uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    v64 = __nwlog_obj();
    os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v117 = 1064;
    v65 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v65);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v65);
  }
  bzero(v6, 0x428uLL);
  if (gLogDatapath)
  {
    os_log_type_t v66 = __nwlog_obj();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_authentication_create";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)v6 + 114;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v117 = (uint64_t)" ";
      _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_authentication_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13911);
  }
  v6[2] = &nw_protocol_http_authentication_identifier::protocol_identifier;
  if (nw_protocol_http_authentication_get_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_http_authentication_get_callbacks(void)::onceToken, &__block_literal_global_120);
  }
  v6[3] = &nw_protocol_http_authentication_get_callbacks(void)::protocol_callbacks;
  v6[5] = v6;
  id v7 = nw_parameters_copy_url_endpoint(a4);
  if (!v7)
  {
    if (!a3)
    {
      os_log_type_t v8 = 0;
      char v9 = *((unsigned char *)v6 + 792);
      if ((v9 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
    id v7 = os_retain(a3);
  }
  os_log_type_t v8 = v7;
  char v9 = *((unsigned char *)v6 + 792);
  if ((v9 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_11:
  os_log_type_t v10 = v6[98];
  if (v10)
  {
    os_release(v10);
    char v9 = *((unsigned char *)v6 + 792);
  }
LABEL_13:
  v6[98] = v8;
  *((unsigned char *)v6 + 792) = v9 | 1;
  if (a4)
  {
    uint64_t v11 = os_retain(a4);
    char v12 = *((unsigned char *)v6 + 824);
    if ((v12 & 1) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v11 = 0;
    char v12 = *((unsigned char *)v6 + 824);
    if ((v12 & 1) == 0) {
      goto LABEL_19;
    }
  }
  CFIndex v13 = v6[102];
  if (v13)
  {
    os_release(v13);
    char v12 = *((unsigned char *)v6 + 824);
  }
LABEL_19:
  v6[102] = v11;
  *((unsigned char *)v6 + 824) = v12 | 1;
  CFStringRef v14 = nw_parameters_copy_context(a4);
  char v15 = *((unsigned char *)v6 + 840);
  if (v15)
  {
    char v16 = v6[104];
    if (v16)
    {
      os_release(v16);
      char v15 = *((unsigned char *)v6 + 840);
    }
  }
  v6[104] = v14;
  *((unsigned char *)v6 + 840) = v15 | 1;
  char v17 = *((unsigned char *)v6 + 856);
  if (v17)
  {
    int v18 = v6[106];
    if (v18)
    {
      os_release(v18);
      char v17 = *((unsigned char *)v6 + 856);
    }
  }
  v6[106] = 0;
  *((unsigned char *)v6 + 856) = v17 | 1;
  *((_WORD *)v6 + 531) &= ~1u;
  if (nw_parameters_get_server_mode(a4)) {
    __int16 v19 = 2;
  }
  else {
    __int16 v19 = 0;
  }
  *((_WORD *)v6 + 531) = *((_WORD *)v6 + 531) & 0xFFFD | v19;
  char v20 = *((unsigned char *)v6 + 696);
  if (v20)
  {
    uint64_t v21 = v6[86];
    if (v21)
    {
      os_release(v21);
      char v20 = *((unsigned char *)v6 + 696);
    }
  }
  v6[86] = 0;
  *((unsigned char *)v6 + 696) = v20 | 1;
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
  }
  id v22 = (id)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
  char v23 = nw_parameters_copy_protocol_options_for_definition(a4, v22);
  uint64_t v24 = v23;
  if (v23)
  {
    __int16 v25 = v23;
    __int16 v26 = nw_protocol_options_copy_definition(v25);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v26, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v117 = (uint64_t)__Block_byref_object_copy__74035;
      v118 = __Block_byref_object_dispose__74036;
      id v119 = 0;
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v111 = 3221225472;
      __int16 v112 = __nw_http_authentication_options_copy_challenge_handler_block_invoke;
      uint64_t v113 = &unk_1E5248E90;
      __int16 v114 = buf;
      nw_protocol_options_access_handle(v25, type);
      uint64_t v28 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_38;
    }
    v71 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
    char v107 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v115 = 0;
    os_log_type_t v72 = (char *)v107;
    if (!__nwlog_fault(v107, type, &v115))
    {
LABEL_182:
      if (v72) {
        free(v72);
      }
      uint64_t v28 = 0;
LABEL_38:

      char v29 = *((unsigned char *)v6 + 760);
      if (v29)
      {
        char v30 = v6[94];
        if (v30)
        {
          _Block_release(v30);
          char v29 = *((unsigned char *)v6 + 760);
        }
      }
      v6[94] = v28;
      *((unsigned char *)v6 + 760) = v29 | 1;
      CFStringRef v31 = v25;
      os_log_type_t v32 = nw_protocol_options_copy_definition(v31);
      if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
      }
      BOOL v33 = nw_protocol_definition_is_equal(v32, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

      if (v33)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        uint64_t v117 = (uint64_t)__Block_byref_object_copy__5_73857;
        v118 = __Block_byref_object_dispose__6_73858;
        id v119 = 0;
        *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
        uint64_t v111 = 3221225472;
        __int16 v112 = __nw_http_authentication_options_copy_challenge_queue_block_invoke;
        uint64_t v113 = &unk_1E5248E90;
        __int16 v114 = buf;
        nw_protocol_options_access_handle(v31, type);
        os_log_type_t v34 = *(id *)(*(void *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);

        goto LABEL_45;
      }
      BOOL v75 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_queue";
      v108 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v115 = 0;
      os_log_type_t v76 = (char *)v108;
      if (!__nwlog_fault(v108, type, &v115))
      {
LABEL_189:
        if (v76) {
          free(v76);
        }
        os_log_type_t v34 = 0;
LABEL_45:

        char v35 = *((unsigned char *)v6 + 776);
        if (v35)
        {
          os_log_type_t v36 = v6[96];
          if (v36)
          {
            dispatch_release(v36);
            char v35 = *((unsigned char *)v6 + 776);
          }
        }
        v6[96] = v34;
        *((unsigned char *)v6 + 776) = v35 | 1;
        uint64_t v37 = v31;
        uint64_t v38 = nw_protocol_options_copy_definition(v37);
        if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
        }
        BOOL v39 = nw_protocol_definition_is_equal(v38, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

        if (v39)
        {
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000;
          uint64_t v117 = (uint64_t)__Block_byref_object_copy__5_73857;
          v118 = __Block_byref_object_dispose__6_73858;
          id v119 = 0;
          *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
          uint64_t v111 = 3221225472;
          __int16 v112 = __nw_http_authentication_options_copy_credential_storage_block_invoke;
          uint64_t v113 = &unk_1E5248E90;
          __int16 v114 = buf;
          nw_protocol_options_access_handle(v37, type);
          BOOL v40 = *(id *)(*(void *)&buf[8] + 40);
          _Block_object_dispose(buf, 8);

          goto LABEL_52;
        }
        v79 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_storage";
        v109 = (const char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v115 = 0;
        v80 = (char *)v109;
        if (!__nwlog_fault(v109, type, &v115))
        {
LABEL_196:
          if (v80) {
            free(v80);
          }
          BOOL v40 = 0;
LABEL_52:

          char v41 = *((unsigned char *)v6 + 696);
          if (v41)
          {
            os_log_type_t v42 = v6[86];
            if (v42)
            {
              os_release(v42);
              char v41 = *((unsigned char *)v6 + 696);
            }
          }
          v6[86] = v40;
          *((unsigned char *)v6 + 696) = v41 | 1;
          os_log_type_t v43 = nw_http_authentication_options_copy_credential_cache(v37);
          char v44 = *((unsigned char *)v6 + 712);
          if (v44)
          {
            os_log_type_t v45 = v6[88];
            if (v45)
            {
              os_release(v45);
              char v44 = *((unsigned char *)v6 + 712);
            }
          }
          v6[88] = v43;
          *((unsigned char *)v6 + 712) = v44 | 1;
          char v46 = v37;
          os_log_type_t v47 = nw_protocol_options_copy_definition(v46);
          if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_36_74310);
          }
          BOOL v48 = nw_protocol_definition_is_equal(v47, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

          if (v48)
          {
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000;
            uint64_t v117 = (uint64_t)__Block_byref_object_copy__5_73857;
            v118 = __Block_byref_object_dispose__6_73858;
            id v119 = 0;
            *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
            uint64_t v111 = 3221225472;
            __int16 v112 = __nw_http_authentication_options_copy_h1_fallback_cache_block_invoke;
            uint64_t v113 = &unk_1E5248E90;
            __int16 v114 = buf;
            nw_protocol_options_access_handle(v46, type);
            char v49 = *(id *)(*(void *)&buf[8] + 40);
            _Block_object_dispose(buf, 8);

LABEL_62:
            char v50 = *((unsigned char *)v6 + 728);
            if (v50)
            {
              os_log_type_t v51 = v6[90];
              if (v51)
              {
                os_release(v51);
                char v50 = *((unsigned char *)v6 + 728);
              }
            }
            v6[90] = v49;
            *((unsigned char *)v6 + 728) = v50 | 1;
            uint64_t v52 = nw_http_authentication_options_copy_appsso_h1_fallback_headers(v46);
            char v53 = *((unsigned char *)v6 + 744);
            if (v53)
            {
              __int16 v54 = v6[92];
              if (v54)
              {
                os_release(v54);
                char v53 = *((unsigned char *)v6 + 744);
              }
            }
            v6[92] = v52;
            *((unsigned char *)v6 + 744) = v53 | 1;
            goto LABEL_69;
          }
          v83 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
          v84 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          char v115 = 0;
          if (__nwlog_fault(v84, type, &v115))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v85 = __nwlog_obj();
              os_log_type_t v86 = type[0];
              if (os_log_type_enabled(v85, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
                _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s protocol options are not http_authentication", buf, 0xCu);
              }
            }
            else if (v115)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              v85 = __nwlog_obj();
              os_log_type_t v98 = type[0];
              BOOL v99 = os_log_type_enabled(v85, type[0]);
              if (backtrace_string)
              {
                if (v99)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v85, v98, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                goto LABEL_202;
              }
              if (v99)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
                _os_log_impl(&dword_1830D4000, v85, v98, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              v85 = __nwlog_obj();
              os_log_type_t v103 = type[0];
              if (os_log_type_enabled(v85, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
                _os_log_impl(&dword_1830D4000, v85, v103, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_202:
          if (v84) {
            free(v84);
          }
          char v49 = 0;
          goto LABEL_62;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v81 = __nwlog_obj();
          os_log_type_t v82 = type[0];
          if (os_log_type_enabled(v81, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_storage";
            _os_log_impl(&dword_1830D4000, v81, v82, "%{public}s protocol options are not http_authentication", buf, 0xCu);
          }
        }
        else if (v115)
        {
          os_log_type_t v95 = (char *)__nw_create_backtrace_string();
          v81 = __nwlog_obj();
          os_log_type_t v106 = type[0];
          BOOL v96 = os_log_type_enabled(v81, type[0]);
          if (v95)
          {
            if (v96)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_storage";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v95;
              _os_log_impl(&dword_1830D4000, v81, v106, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v95);
            goto LABEL_195;
          }
          if (v96)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_storage";
            _os_log_impl(&dword_1830D4000, v81, v106, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          v81 = __nwlog_obj();
          os_log_type_t v102 = type[0];
          if (os_log_type_enabled(v81, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_storage";
            _os_log_impl(&dword_1830D4000, v81, v102, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
          }
        }

LABEL_195:
        v80 = (char *)v109;
        goto LABEL_196;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v77 = __nwlog_obj();
        os_log_type_t v78 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_queue";
          _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s protocol options are not http authentication", buf, 0xCu);
        }
      }
      else if (v115)
      {
        os_log_type_t v93 = (char *)__nw_create_backtrace_string();
        BOOL v77 = __nwlog_obj();
        os_log_type_t v105 = type[0];
        BOOL v94 = os_log_type_enabled(v77, type[0]);
        if (v93)
        {
          if (v94)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_queue";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v93;
            _os_log_impl(&dword_1830D4000, v77, v105, "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v93);
          goto LABEL_188;
        }
        if (v94)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_queue";
          _os_log_impl(&dword_1830D4000, v77, v105, "%{public}s protocol options are not http authentication, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v77 = __nwlog_obj();
        os_log_type_t v101 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_queue";
          _os_log_impl(&dword_1830D4000, v77, v101, "%{public}s protocol options are not http authentication, backtrace limit exceeded", buf, 0xCu);
        }
      }

LABEL_188:
      os_log_type_t v76 = (char *)v108;
      goto LABEL_189;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v73 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
        _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s protocol options are not http authentication", buf, 0xCu);
      }
    }
    else if (v115)
    {
      os_log_type_t v91 = (char *)__nw_create_backtrace_string();
      BOOL v73 = __nwlog_obj();
      os_log_type_t v104 = type[0];
      BOOL v92 = os_log_type_enabled(v73, type[0]);
      if (v91)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v91;
          _os_log_impl(&dword_1830D4000, v73, v104, "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v91);
        goto LABEL_181;
      }
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
        _os_log_impl(&dword_1830D4000, v73, v104, "%{public}s protocol options are not http authentication, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v73 = __nwlog_obj();
      os_log_type_t v100 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
        _os_log_impl(&dword_1830D4000, v73, v100, "%{public}s protocol options are not http authentication, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_181:
    os_log_type_t v72 = (char *)v107;
    goto LABEL_182;
  }
LABEL_69:
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  id v55 = (id)nw_protocol_copy_http_client_definition_definition;
  __int16 v56 = nw_parameters_copy_protocol_options_for_definition(a4, v55);
  __int16 v57 = nw_http_client_options_copy_retry_with_h1_handler(v56);
  char v58 = *((unsigned char *)v6 + 616);
  if (v58)
  {
    uint64_t v59 = v6[76];
    if (v59)
    {
      _Block_release(v59);
      char v58 = *((unsigned char *)v6 + 616);
    }
  }
  v6[25] = 0;
  v6[76] = v57;
  *((unsigned char *)v6 + 616) = v58 | 1;
  v6[9] = (v6 + 25);
  v6[26] = (v6 + 25);
  v6[27] = 0;
  v6[28] = (v6 + 27);
  v6[29] = 0;
  v6[30] = (v6 + 29);
  *((unsigned char *)v6 + 340) = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  id v60 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v6, v60, (uint64_t)nw_protocol_http_authentication_create::$_0::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_1::__invoke);
  if (v60) {
    os_release(v60);
  }
  os_log_type_t v61 = v6[5];
  if (!v61)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v115 = 0;
    if (!__nwlog_fault(v67, type, &v115)) {
      goto LABEL_176;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_176;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      BOOL v70 = "%{public}s called with null protocol->handle";
      goto LABEL_175;
    }
    if (!v115)
    {
      v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_176;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      BOOL v70 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_175;
    }
    v87 = (char *)__nw_create_backtrace_string();
    v68 = __nwlog_obj();
    os_log_type_t v69 = type[0];
    BOOL v88 = os_log_type_enabled(v68, type[0]);
    if (!v87)
    {
      if (!v88) {
        goto LABEL_176;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      BOOL v70 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_175;
    }
    if (v88)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v87;
      _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v87);
LABEL_176:
    if (!v67) {
      goto LABEL_81;
    }
LABEL_177:
    free(v67);
    goto LABEL_81;
  }
  Class isa = v61[9].isa;
  if (!isa)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v115 = 0;
    if (!__nwlog_fault(v67, type, &v115)) {
      goto LABEL_176;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_176;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      BOOL v70 = "%{public}s called with null metadata_plugin";
      goto LABEL_175;
    }
    if (!v115)
    {
      v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_176;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      BOOL v70 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_175;
    }
    BOOL v89 = (char *)__nw_create_backtrace_string();
    v68 = __nwlog_obj();
    os_log_type_t v69 = type[0];
    BOOL v90 = os_log_type_enabled(v68, type[0]);
    if (v89)
    {
      if (v90)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v89;
        _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v89);
      if (!v67) {
        goto LABEL_81;
      }
      goto LABEL_177;
    }
    if (v90)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      BOOL v70 = "%{public}s called with null metadata_plugin, no backtrace";
LABEL_175:
      _os_log_impl(&dword_1830D4000, v68, v69, v70, buf, 0xCu);
      goto LABEL_176;
    }
    goto LABEL_176;
  }
  *((void *)isa + 15) = nw_http_authentication_reissue;
LABEL_81:
  v6[11] = (v6 + 43);
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_authentication_create::$_2::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_3::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_4::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_5::__invoke);
  v6[8] = (v6 + 13);
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_authentication_create::$_6::__invoke);
  if (v56) {
    os_release(v56);
  }
  if (v55) {
    os_release(v55);
  }
  if (v24) {
    os_release(v24);
  }
  if (v22) {
    os_release(v22);
  }
  return (BOOL)v6;
}

void sub_183726030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http_authentication_create::$_6::__invoke(nw_protocol_http_authentication_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_5::__invoke(nw_protocol_http_authentication_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_4::__invoke(nw_protocol_http_authentication_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_3::__invoke(nw_protocol_http_authentication_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_2::__invoke(nw_protocol_http_authentication_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v17 = "operator()";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14)) {
      goto LABEL_38;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        BOOL v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446210;
        char v17 = "operator()";
        os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10) {
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446210;
        char v17 = "operator()";
        os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_37;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        char v17 = "operator()";
        __int16 v18 = 2082;
        __int16 v19 = backtrace_string;
        uint64_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
        _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
      }
LABEL_26:
      free(backtrace_string);
      goto LABEL_38;
    }
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    char v17 = "operator()";
    os_log_type_t v8 = "%{public}s called with null protocol";
LABEL_37:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
LABEL_38:
    if (v5) {
      free(v5);
    }
    return 0;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v17 = "operator()";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      char v17 = "operator()";
      os_log_type_t v8 = "%{public}s called with null http_authentication";
      goto LABEL_37;
    }
    if (!v14)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      char v17 = "operator()";
      os_log_type_t v8 = "%{public}s called with null http_authentication, backtrace limit exceeded";
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        char v17 = "operator()";
        __int16 v18 = 2082;
        __int16 v19 = backtrace_string;
        uint64_t v11 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    if (!v12) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    char v17 = "operator()";
    os_log_type_t v8 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_37;
  }
  if ((*(_WORD *)(v3 + 1062) & 0x40) == 0) {
    return 0;
  }
  if ((*(unsigned char *)(v3 + 198) & 1) == 0 && gLogDatapath)
  {
    CFIndex v13 = __nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      char v17 = "operator()";
      __int16 v18 = 2082;
      __int16 v19 = (char *)(v3 + 114);
      __int16 v20 = 2080;
      uint64_t v21 = " ";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sretrying pending reissue on a new stream", buf, 0x20u);
    }
  }
  *(unsigned char *)(v3 + 1060) = 2;
  nw_http_authentication_reissue((nw_protocol *)v3);
  return 1;
}

void nw_http_authentication_reissue(nw_protocol *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
    char v15 = (char *)_os_log_send_and_compose_impl();
    v41[0] = 16;
    os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, v41, &v35)) {
      goto LABEL_55;
    }
    if (v41[0] == 17)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = v41[0];
      if (!os_log_type_enabled(v16, (os_log_type_t)v41[0])) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
      __int16 v18 = "%{public}s called with null protocol";
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v16 = __nwlog_obj();
      os_log_type_t v17 = v41[0];
      BOOL v20 = os_log_type_enabled(v16, (os_log_type_t)v41[0]);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_55:
        if (!v15) {
          return;
        }
LABEL_56:
        free(v15);
        return;
      }
      if (!v20) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
      __int16 v18 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = v41[0];
      if (!os_log_type_enabled(v16, (os_log_type_t)v41[0])) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
      __int16 v18 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_54:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
    goto LABEL_55;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    __int16 v3 = *((_WORD *)handle + 531);
    if ((v3 & 0x41) != 0x40) {
      return;
    }
    *((_WORD *)handle + 531) = v3 & 0xFFBF;
    if ((handle[198] & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *((_DWORD *)handle + 263);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 114;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v38) = 1024;
        *(_DWORD *)((char *)&v38 + 2) = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sreissuing authenticated request, challenge count %u", buf, 0x26u);
      }
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000;
    uint64_t v37 = __Block_byref_object_copy__108;
    uint64_t v38 = __Block_byref_object_dispose__109;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)handle);
    if (parameters) {
      parameters = os_retain(parameters);
    }
    BOOL v39 = parameters;
    v40 |= 1u;
    uint64_t v7 = 1048;
    if ((*((_WORD *)handle + 531) & 0x10) == 0) {
      uint64_t v7 = 1044;
    }
    int v8 = *(_DWORD *)&handle[v7];
    if ((v8 & 0xFFFFFFFE) != 4 || *((int *)handle + 260) < 4)
    {
      nw_http_messaging_options_create_transaction_in_parameters(*(void **)(*(void *)&buf[8] + 40), (uint64_t)handle, 2);
      BOOL v12 = (void *)*((void *)handle + 104);
      int v13 = handle[1060];
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 0x40000000;
      v32[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_2;
      v32[3] = &__block_descriptor_tmp_112;
      v32[4] = handle;
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 0x40000000;
      v31[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_3;
      v31[3] = &unk_1E523C558;
      v31[4] = buf;
      v31[5] = handle;
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 0x40000000;
      v30[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_5;
      v30[3] = &__block_descriptor_tmp_117;
      v30[4] = handle;
      nw_protocol_plugin_retry_reissue_output_frames((uint64_t)(handle + 344), (uint64_t)a1, v12, 0, 0, v13, 1, v32, v31, (uint64_t)v30);
      goto LABEL_17;
    }
    if (CFDictionaryGetCount(*((CFDictionaryRef *)handle + 92)))
    {
LABEL_24:
      uint64_t v14 = *((void *)handle + 76);
      if (v14) {
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    char v9 = objc_alloc_init(NWConcrete_nw_authentication_credential_cache_entry);
    BOOL v10 = v9;
    if ((*((_WORD *)handle + 531) & 0x10) != 0)
    {
      nw_authentication_credential_cache_entry_set_http_authentication(v9, *((const void **)handle + 108));
      uint64_t v11 = (void **)(handle + 672);
    }
    else
    {
      nw_authentication_credential_cache_entry_set_http_authentication(v9, *((const void **)handle + 106));
      uint64_t v11 = (void **)(handle + 656);
    }
    nw_authentication_credential_cache_entry_set_credential((uint64_t)v10, *v11);
    nw_authentication_credential_cache_entry_set_for_proxy((uint64_t)v10, (*((_WORD *)handle + 531) & 0x10) != 0);
    if (v10)
    {
      v10->os_log_type_t type = v8;
      nw_array_append(*((void *)handle + 90), v10);
      os_release(v10);
      goto LABEL_24;
    }
    char v23 = __nwlog_obj();
    *(_DWORD *)char v41 = 136446210;
    os_log_type_t v42 = "nw_authentication_credential_cache_entry_set_type";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v24, &v35, &v34))
    {
      if (v35 == OS_LOG_TYPE_FAULT)
      {
        __int16 v25 = __nwlog_obj();
        os_log_type_t v26 = v35;
        if (os_log_type_enabled(v25, v35))
        {
          *(_DWORD *)char v41 = 136446210;
          os_log_type_t v42 = "nw_authentication_credential_cache_entry_set_type";
          __int16 v27 = "%{public}s called with null cache_entry";
LABEL_70:
          _os_log_impl(&dword_1830D4000, v25, v26, v27, v41, 0xCu);
          goto LABEL_71;
        }
        goto LABEL_71;
      }
      if (!v34)
      {
        __int16 v25 = __nwlog_obj();
        os_log_type_t v26 = v35;
        if (os_log_type_enabled(v25, v35))
        {
          *(_DWORD *)char v41 = 136446210;
          os_log_type_t v42 = "nw_authentication_credential_cache_entry_set_type";
          __int16 v27 = "%{public}s called with null cache_entry, backtrace limit exceeded";
          goto LABEL_70;
        }
LABEL_71:

        goto LABEL_72;
      }
      uint64_t v28 = (char *)__nw_create_backtrace_string();
      __int16 v25 = __nwlog_obj();
      os_log_type_t v26 = v35;
      BOOL v29 = os_log_type_enabled(v25, v35);
      if (!v28)
      {
        if (v29)
        {
          *(_DWORD *)char v41 = 136446210;
          os_log_type_t v42 = "nw_authentication_credential_cache_entry_set_type";
          __int16 v27 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_70;
        }
        goto LABEL_71;
      }
      if (v29)
      {
        *(_DWORD *)char v41 = 136446466;
        os_log_type_t v42 = "nw_authentication_credential_cache_entry_set_type";
        __int16 v43 = 2082;
        char v44 = v28;
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", v41, 0x16u);
      }

      free(v28);
    }
LABEL_72:
    if (v24) {
      free(v24);
    }
    nw_array_append(*((void *)handle + 90), 0);
    uint64_t v14 = *((void *)handle + 76);
    if (v14)
    {
LABEL_25:
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 0x40000000;
      v33[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke;
      v33[3] = &__block_descriptor_tmp_110;
      v33[4] = handle;
      if ((*(uint64_t (**)(uint64_t, void, void *))(v14 + 16))(v14, *(void *)(*(void *)&buf[8] + 40), v33))goto LABEL_17; {
    }
      }
LABEL_26:
    nw_protocol_error(*((void **)handle + 6), (uint64_t)handle);
    nw_protocol_disconnected(*((void **)handle + 6), (uint64_t)handle);
LABEL_17:
    _Block_object_dispose(buf, 8);
    if (v40)
    {
      if (v39) {
        os_release(v39);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
  char v15 = (char *)_os_log_send_and_compose_impl();
  v41[0] = 16;
  os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v15, v41, &v35)) {
    goto LABEL_55;
  }
  if (v41[0] == 17)
  {
    char v16 = __nwlog_obj();
    os_log_type_t v17 = v41[0];
    if (!os_log_type_enabled(v16, (os_log_type_t)v41[0])) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
    __int16 v18 = "%{public}s called with null http_authentication";
    goto LABEL_54;
  }
  if (v35 == OS_LOG_TYPE_DEFAULT)
  {
    char v16 = __nwlog_obj();
    os_log_type_t v17 = v41[0];
    if (!os_log_type_enabled(v16, (os_log_type_t)v41[0])) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
    __int16 v18 = "%{public}s called with null http_authentication, backtrace limit exceeded";
    goto LABEL_54;
  }
  uint64_t v21 = (char *)__nw_create_backtrace_string();
  char v16 = __nwlog_obj();
  os_log_type_t v17 = v41[0];
  BOOL v22 = os_log_type_enabled(v16, (os_log_type_t)v41[0]);
  if (!v21)
  {
    if (!v22) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
    __int16 v18 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_54;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_reissue";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v21;
    _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v21);
  if (v15) {
    goto LABEL_56;
  }
}

uint64_t __Block_byref_object_copy__108(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__109(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 556) |= 0x10u;
  return result;
}

uint64_t ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  nw_frame_set_metadata(*a2, *(NSObject **)(*(void *)(a1 + 32) + 592), 0, (*(_WORD *)(*(void *)(a1 + 32) + 1062) & 8) == 0);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(v3 + 920);
  if (v4)
  {
    int v5 = *(void **)(v3 + 912);
    if (v5)
    {
      os_release(v5);
      char v4 = *(unsigned char *)(v3 + 920);
    }
  }
  *(void *)(v3 + 912) = 0;
  *(unsigned char *)(v3 + 920) = v4 | 1;
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(v6 + 936);
  if (v7)
  {
    int v8 = *(void **)(v6 + 928);
    if (v8)
    {
      os_release(v8);
      char v7 = *(unsigned char *)(v6 + 936);
    }
  }
  *(void *)(v6 + 928) = 0;
  *(unsigned char *)(v6 + 936) = v7 | 1;
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(v9 + 952);
  if (v10)
  {
    uint64_t v11 = *(void **)(v9 + 944);
    if (v11)
    {
      os_release(v11);
      char v10 = *(unsigned char *)(v9 + 952);
    }
  }
  *(void *)(v9 + 944) = 0;
  *(unsigned char *)(v9 + 952) = v10 | 1;
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(v12 + 968);
  if (v13)
  {
    uint64_t v14 = *(void **)(v12 + 960);
    if (v14)
    {
      os_release(v14);
      char v13 = *(unsigned char *)(v12 + 968);
    }
  }
  *(void *)(v12 + 960) = 0;
  *(unsigned char *)(v12 + 968) = v13 | 1;
  return 1;
}

uint64_t ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_3(uint64_t a1)
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  id v2 = (id)nw_protocol_copy_http_client_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v2);
  if (v2) {
    os_release(v2);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  do
  {
    uint64_t v4 = *(void *)(v4 + 48);
    if (!v4) {
      return 1;
    }
  }
  while (!nw_protocols_are_equal(*(void **)(v4 + 16), identifier));
  int v5 = nw_parameters_copy_protocol_options_legacy(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (nw_protocol *)v4);
  uint64_t v6 = nw_http_client_options_copy_resend_handler(v5);
  BOOL v7 = v6 == 0;
  if (v6)
  {
    int v8 = v6;
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_4;
    v11[3] = &__block_descriptor_tmp_114;
    v11[4] = *(void *)(a1 + 40);
    (*((void (**)(void *, void, void *))v6 + 2))(v6, *(void *)(v9 + 40), v11);
    _Block_release(v8);
  }
  if (v5) {
    os_release(v5);
  }
  return v7;
}

void ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_5(uint64_t a1)
{
}

void nw_http_authentication_destroy(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v36 = __nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        int v37 = 136446722;
        uint64_t v38 = "nw_http_authentication_destroy";
        __int16 v39 = 2082;
        uint64_t v40 = a1 + 114;
        __int16 v41 = 2080;
        os_log_type_t v42 = " ";
        _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v37, 0x20u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 552))
  {
    *(unsigned char *)(a1 + 556) |= 0x40u;
    if ((*(unsigned char *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      id v2 = __nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        int v37 = 136446722;
        uint64_t v38 = "nw_http_authentication_destroy";
        __int16 v39 = 2082;
        uint64_t v40 = a1 + 114;
        __int16 v41 = 2080;
        os_log_type_t v42 = " ";
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v37, 0x20u);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1032))
    {
      uint64_t v3 = *(const void **)(a1 + 1024);
      if (v3) {
        CFRelease(v3);
      }
    }
    *(void *)(a1 + 1024) = 0;
    if (*(unsigned char *)(a1 + 1016))
    {
      uint64_t v4 = *(const void **)(a1 + 1008);
      if (v4) {
        CFRelease(v4);
      }
    }
    *(void *)(a1 + 1008) = 0;
    if (*(unsigned char *)(a1 + 1000))
    {
      int v5 = *(const void **)(a1 + 992);
      if (v5) {
        CFRelease(v5);
      }
    }
    *(void *)(a1 + 992) = 0;
    if (*(unsigned char *)(a1 + 984))
    {
      uint64_t v6 = *(const void **)(a1 + 976);
      if (v6) {
        CFRelease(v6);
      }
    }
    *(void *)(a1 + 976) = 0;
    if (*(unsigned char *)(a1 + 968))
    {
      BOOL v7 = *(void **)(a1 + 960);
      if (v7) {
        os_release(v7);
      }
    }
    *(void *)(a1 + 960) = 0;
    if (*(unsigned char *)(a1 + 952))
    {
      int v8 = *(void **)(a1 + 944);
      if (v8) {
        os_release(v8);
      }
    }
    *(void *)(a1 + 944) = 0;
    if (*(unsigned char *)(a1 + 936))
    {
      uint64_t v9 = *(void **)(a1 + 928);
      if (v9) {
        os_release(v9);
      }
    }
    *(void *)(a1 + 928) = 0;
    if (*(unsigned char *)(a1 + 920))
    {
      char v10 = *(void **)(a1 + 912);
      if (v10) {
        os_release(v10);
      }
    }
    *(void *)(a1 + 912) = 0;
    if (*(unsigned char *)(a1 + 904))
    {
      uint64_t v11 = *(const void **)(a1 + 896);
      if (v11) {
        CFRelease(v11);
      }
    }
    *(void *)(a1 + 896) = 0;
    if (*(unsigned char *)(a1 + 888))
    {
      uint64_t v12 = *(const void **)(a1 + 880);
      if (v12) {
        CFRelease(v12);
      }
    }
    *(void *)(a1 + 880) = 0;
    if (*(unsigned char *)(a1 + 872))
    {
      char v13 = *(void **)(a1 + 864);
      if (v13) {
        os_release(v13);
      }
    }
    *(void *)(a1 + 864) = 0;
    if (*(unsigned char *)(a1 + 856))
    {
      uint64_t v14 = *(void **)(a1 + 848);
      if (v14) {
        os_release(v14);
      }
    }
    *(void *)(a1 + 848) = 0;
    if (*(unsigned char *)(a1 + 840))
    {
      char v15 = *(void **)(a1 + 832);
      if (v15) {
        os_release(v15);
      }
    }
    *(void *)(a1 + 832) = 0;
    if (*(unsigned char *)(a1 + 824))
    {
      char v16 = *(void **)(a1 + 816);
      if (v16) {
        os_release(v16);
      }
    }
    *(void *)(a1 + 816) = 0;
    if (*(unsigned char *)(a1 + 808))
    {
      os_log_type_t v17 = *(void **)(a1 + 800);
      if (v17) {
        os_release(v17);
      }
    }
    *(void *)(a1 + 800) = 0;
    if (*(unsigned char *)(a1 + 792))
    {
      __int16 v18 = *(void **)(a1 + 784);
      if (v18) {
        os_release(v18);
      }
    }
    *(void *)(a1 + 784) = 0;
    if (*(unsigned char *)(a1 + 776))
    {
      __int16 v19 = *(NSObject **)(a1 + 768);
      if (v19) {
        dispatch_release(v19);
      }
    }
    *(void *)(a1 + 768) = 0;
    if (*(unsigned char *)(a1 + 760))
    {
      BOOL v20 = *(const void **)(a1 + 752);
      if (v20) {
        _Block_release(v20);
      }
    }
    *(void *)(a1 + 752) = 0;
    if (*(unsigned char *)(a1 + 744))
    {
      uint64_t v21 = *(void **)(a1 + 736);
      if (v21) {
        os_release(v21);
      }
    }
    *(void *)(a1 + 736) = 0;
    if (*(unsigned char *)(a1 + 728))
    {
      BOOL v22 = *(void **)(a1 + 720);
      if (v22) {
        os_release(v22);
      }
    }
    *(void *)(a1 + 720) = 0;
    if (*(unsigned char *)(a1 + 712))
    {
      char v23 = *(void **)(a1 + 704);
      if (v23) {
        os_release(v23);
      }
    }
    *(void *)(a1 + 704) = 0;
    if (*(unsigned char *)(a1 + 696))
    {
      uint64_t v24 = *(void **)(a1 + 688);
      if (v24) {
        os_release(v24);
      }
    }
    *(void *)(a1 + 688) = 0;
    if (*(unsigned char *)(a1 + 680))
    {
      __int16 v25 = *(void **)(a1 + 672);
      if (v25) {
        os_release(v25);
      }
    }
    *(void *)(a1 + 672) = 0;
    if (*(unsigned char *)(a1 + 664))
    {
      os_log_type_t v26 = *(void **)(a1 + 656);
      if (v26) {
        os_release(v26);
      }
    }
    *(void *)(a1 + 656) = 0;
    if (*(unsigned char *)(a1 + 648))
    {
      __int16 v27 = *(void **)(a1 + 640);
      if (v27) {
        os_release(v27);
      }
    }
    *(void *)(a1 + 640) = 0;
    if (*(unsigned char *)(a1 + 632))
    {
      uint64_t v28 = *(const void **)(a1 + 624);
      if (v28) {
        CFRelease(v28);
      }
    }
    *(void *)(a1 + 624) = 0;
    if (*(unsigned char *)(a1 + 616))
    {
      BOOL v29 = *(const void **)(a1 + 608);
      if (v29) {
        _Block_release(v29);
      }
    }
    *(void *)(a1 + 608) = 0;
    if (*(unsigned char *)(a1 + 600))
    {
      char v30 = *(void **)(a1 + 592);
      if (v30) {
        os_release(v30);
      }
    }
    *(void *)(a1 + 592) = 0;
    if (*(unsigned char *)(a1 + 584))
    {
      CFStringRef v31 = *(void **)(a1 + 576);
      if (v31) {
        os_release(v31);
      }
    }
    *(void *)(a1 + 576) = 0;
    if (*(unsigned char *)(a1 + 568))
    {
      os_log_type_t v32 = *(void **)(a1 + 560);
      if (v32) {
        os_release(v32);
      }
    }
    *(void *)(a1 + 560) = 0;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 344));
    if (*(unsigned char *)(a1 + 288))
    {
      BOOL v33 = *(void **)(a1 + 280);
      if (v33) {
        os_release(v33);
      }
    }
    *(void *)(a1 + 280) = 0;
    if (*(unsigned char *)(a1 + 272))
    {
      char v34 = *(void **)(a1 + 264);
      if (v34) {
        os_release(v34);
      }
    }
    *(void *)(a1 + 264) = 0;
    if (*(unsigned char *)(a1 + 256))
    {
      os_log_type_t v35 = *(void **)(a1 + 248);
      if (v35) {
        os_release(v35);
      }
    }
    free((void *)a1);
  }
}

void ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_4(uint64_t a1, nw_content_context_t context)
{
}

void nw_protocol_http_authentication_create::$_1::__invoke(uint64_t a1, int a2, void *object, int a4, uint64_t a5)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52)) {
      goto LABEL_136;
    }
    if (type[0] == 17)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null protocol";
    }
    else if (v52[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      BOOL v40 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "operator()";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_136:
        if (!v26) {
          return;
        }
        goto LABEL_137;
      }
      if (!v40) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_135;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52)) {
      goto LABEL_136;
    }
    if (type[0] != 17)
    {
      if (v52[0] == OS_LOG_TYPE_DEFAULT)
      {
        __int16 v27 = __nwlog_obj();
        os_log_type_t v28 = type[0];
        if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
          goto LABEL_136;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        BOOL v29 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_135;
      }
      __int16 v41 = (char *)__nw_create_backtrace_string();
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      BOOL v42 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
      if (!v41)
      {
        if (!v42) {
          goto LABEL_136;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        BOOL v29 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_135;
      }
      if (!v42) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v41;
      uint64_t v43 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    __int16 v27 = __nwlog_obj();
    os_log_type_t v28 = type[0];
    if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
      goto LABEL_136;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v29 = "%{public}s called with null http_authentication";
LABEL_135:
    _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
    goto LABEL_136;
  }
  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52)) {
      goto LABEL_136;
    }
    if (type[0] == 17)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null metadata";
      goto LABEL_135;
    }
    if (v52[0] == OS_LOG_TYPE_DEFAULT)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_135;
    }
    __int16 v41 = (char *)__nw_create_backtrace_string();
    __int16 v27 = __nwlog_obj();
    os_log_type_t v28 = type[0];
    BOOL v44 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
    if (!v41)
    {
      if (!v44) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_135;
    }
    if (!v44) {
      goto LABEL_95;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "operator()";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v41;
    uint64_t v43 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_1830D4000, v27, v28, v43, buf, 0x16u);
    goto LABEL_95;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52)) {
      goto LABEL_136;
    }
    if (type[0] == 17)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null completion";
      goto LABEL_135;
    }
    if (v52[0] == OS_LOG_TYPE_DEFAULT)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0])) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_135;
    }
    __int16 v41 = (char *)__nw_create_backtrace_string();
    __int16 v27 = __nwlog_obj();
    os_log_type_t v28 = type[0];
    BOOL v45 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
    if (!v41)
    {
      if (!v45) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      BOOL v29 = "%{public}s called with null completion, no backtrace";
      goto LABEL_135;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v41;
      uint64_t v43 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
LABEL_95:
    free(v41);
    if (!v26) {
      return;
    }
LABEL_137:
    free(v26);
    return;
  }
  char v10 = os_retain(object);
  char v11 = *(unsigned char *)(v6 + 584);
  if (v11)
  {
    uint64_t v12 = *(void **)(v6 + 576);
    if (v12)
    {
      os_release(v12);
      char v11 = *(unsigned char *)(v6 + 584);
    }
  }
  *(void *)(v6 + 576) = v10;
  *(unsigned char *)(v6 + 584) = v11 | 1;
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    uint64_t v14 = *(void **)(v13 + 576);
    if (v14)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      os_log_type_t v66 = __Block_byref_object_copy__98;
      BOOL v67 = __Block_byref_object_dispose__99;
      v68 = nw_http_metadata_copy_request(v14);
      v69 |= 1u;
      if (*(void *)(*(void *)&buf[8] + 40))
      {
        if ((*(unsigned char *)(v13 + 198) & 1) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v38 = __nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t type = 136446722;
              *(void *)&type[4] = "nw_http_authentication_apply_cache";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v13 + 114;
              *(_WORD *)&type[22] = 2080;
              os_log_type_t v61 = (uint64_t (*)(uint64_t, uint64_t))" ";
              _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", type, 0x20u);
            }
          }
        }
        CFDictionaryRef v15 = *(const __CFDictionary **)(v13 + 736);
        if (v15 && CFDictionaryGetCount(v15))
        {
          uint64_t v16 = *(void *)(*(void *)&buf[8] + 40);
          *(void *)(*(void *)&buf[8] + 40) = 0;
          char v17 = *(unsigned char *)(v13 + 952);
          if (v17)
          {
            __int16 v18 = *(void **)(v13 + 944);
            if (v18)
            {
              os_release(v18);
              char v17 = *(unsigned char *)(v13 + 952);
            }
          }
          *(void *)(v13 + 944) = v16;
          *(unsigned char *)(v13 + 952) = v17 | 1;
          CFDictionaryApplyFunction(*(CFDictionaryRef *)(v13 + 736), (CFDictionaryApplierFunction)nw_http_authentication_apply_appsso_headers, (void *)v13);
          *(_DWORD *)(v13 + 1044) = 4;
          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v13 + 736));
        }
        else
        {
          if (nw_endpoint_get_type(*(nw_endpoint_t *)(v13 + 784)) == nw_endpoint_type_url) {
            __int16 v19 = (void *)nw_endpoint_copy_cfurl(*(void **)(v13 + 784));
          }
          else {
            __int16 v19 = 0;
          }
          BOOL v20 = nw_http_request_copy_url_request(*(void **)(*(void *)&buf[8] + 40), **((void ***)&unk_1E524BD00 + *(int *)(v13 + 1040)), v19);
          *(void *)os_log_type_t type = 0;
          *(void *)&os_log_type_t type[8] = type;
          *(void *)&type[16] = 0x3802000000;
          os_log_type_t v61 = __Block_byref_object_copy__100;
          v62 = __Block_byref_object_dispose__101;
          objecta = (void *)CFURLRequestCopyHTTPRequest();
          v64 |= 1u;
          *(void *)uint64_t v52 = MEMORY[0x1E4F143A8];
          uint64_t v53 = 0x40000000;
          __int16 v54 = ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke;
          id v55 = &unk_1E523C4D0;
          __int16 v56 = type;
          __int16 v57 = buf;
          uint64_t v58 = v13;
          uint64_t v21 = *(void *)(v13 + 720);
          if (!v21 || *(void *)(v21 + 16) == *(void *)(v21 + 24))
          {
            uint64_t v22 = *(void *)(v13 + 704);
            if (v22 && *(void *)(v22 + 16) != *(void *)(v22 + 24)) {
              nw_array_apply((atomic_uchar *)v22, (uint64_t)v52);
            }
          }
          else
          {
            nw_array_apply((atomic_uchar *)v21, (uint64_t)v52);
            nw_array_remove_all_objects(*(void *)(v13 + 720));
          }
          _Block_object_dispose(type, 8);
          if ((v64 & 1) != 0 && objecta) {
            os_release(objecta);
          }
          if (v20) {
            CFRelease((CFTypeRef)v20);
          }
          if (v19) {
            CFRelease(v19);
          }
        }
LABEL_35:
        _Block_object_dispose(buf, 8);
        if ((v69 & 1) != 0 && v68) {
          os_release(v68);
        }
        goto LABEL_38;
      }
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&type[4] = "nw_http_authentication_apply_cache";
      char v34 = (char *)_os_log_send_and_compose_impl();
      v52[0] = OS_LOG_TYPE_ERROR;
      char v59 = 0;
      if (__nwlog_fault(v34, v52, &v59))
      {
        if (v52[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v35 = __nwlog_obj();
          os_log_type_t v36 = v52[0];
          if (!os_log_type_enabled(v35, v52[0])) {
            goto LABEL_148;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&type[4] = "nw_http_authentication_apply_cache";
          int v37 = "%{public}s called with null request";
          goto LABEL_147;
        }
        if (!v59)
        {
          os_log_type_t v35 = __nwlog_obj();
          os_log_type_t v36 = v52[0];
          if (!os_log_type_enabled(v35, v52[0])) {
            goto LABEL_148;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&type[4] = "nw_http_authentication_apply_cache";
          int v37 = "%{public}s called with null request, backtrace limit exceeded";
          goto LABEL_147;
        }
        char v50 = (char *)__nw_create_backtrace_string();
        os_log_type_t v35 = __nwlog_obj();
        os_log_type_t v36 = v52[0];
        BOOL v51 = os_log_type_enabled(v35, v52[0]);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            *(void *)&type[4] = "nw_http_authentication_apply_cache";
            *(_WORD *)&type[12] = 2082;
            *(void *)&type[14] = v50;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null request, dumping backtrace:%{public}s", type, 0x16u);
          }
          free(v50);
          goto LABEL_148;
        }
        if (v51)
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&type[4] = "nw_http_authentication_apply_cache";
          int v37 = "%{public}s called with null request, no backtrace";
LABEL_147:
          _os_log_impl(&dword_1830D4000, v35, v36, v37, type, 0xCu);
        }
      }
LABEL_148:
      if (v34) {
        free(v34);
      }
      goto LABEL_35;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
    char v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v30, type, v52))
    {
      if (type[0] == 17)
      {
        CFStringRef v31 = __nwlog_obj();
        os_log_type_t v32 = type[0];
        if (!os_log_type_enabled(v31, (os_log_type_t)type[0])) {
          goto LABEL_143;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
        BOOL v33 = "%{public}s called with null http_authentication->outbound_metadata";
        goto LABEL_142;
      }
      if (v52[0] == OS_LOG_TYPE_DEFAULT)
      {
        CFStringRef v31 = __nwlog_obj();
        os_log_type_t v32 = type[0];
        if (!os_log_type_enabled(v31, (os_log_type_t)type[0])) {
          goto LABEL_143;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
        BOOL v33 = "%{public}s called with null http_authentication->outbound_metadata, backtrace limit exceeded";
        goto LABEL_142;
      }
      BOOL v48 = (char *)__nw_create_backtrace_string();
      CFStringRef v31 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      BOOL v49 = os_log_type_enabled(v31, (os_log_type_t)type[0]);
      if (v48)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v48;
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null http_authentication->outbound_metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v48);
        if (!v30) {
          goto LABEL_38;
        }
        goto LABEL_144;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
        BOOL v33 = "%{public}s called with null http_authentication->outbound_metadata, no backtrace";
LABEL_142:
        _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
    char v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v30, type, v52)) {
      goto LABEL_143;
    }
    if (type[0] == 17)
    {
      CFStringRef v31 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      if (!os_log_type_enabled(v31, (os_log_type_t)type[0])) {
        goto LABEL_143;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
      BOOL v33 = "%{public}s called with null http_authentication";
      goto LABEL_142;
    }
    if (v52[0] == OS_LOG_TYPE_DEFAULT)
    {
      CFStringRef v31 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      if (!os_log_type_enabled(v31, (os_log_type_t)type[0])) {
        goto LABEL_143;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
      BOOL v33 = "%{public}s called with null http_authentication, backtrace limit exceeded";
      goto LABEL_142;
    }
    char v46 = (char *)__nw_create_backtrace_string();
    CFStringRef v31 = __nwlog_obj();
    os_log_type_t v32 = type[0];
    BOOL v47 = os_log_type_enabled(v31, (os_log_type_t)type[0]);
    if (!v46)
    {
      if (!v47) {
        goto LABEL_143;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
      BOOL v33 = "%{public}s called with null http_authentication, no backtrace";
      goto LABEL_142;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_cache";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v46;
      _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v46);
  }
LABEL_143:
  if (v30) {
LABEL_144:
  }
    free(v30);
LABEL_38:
  id v23 = nw_http_metadata_copy_request(object);
  if (nw_http_fields_have_field_with_name(v23, (unint64_t)"Cookie")) {
    __int16 v24 = 4;
  }
  else {
    __int16 v24 = 0;
  }
  if (a4) {
    __int16 v25 = 0;
  }
  else {
    __int16 v25 = 8;
  }
  *(_WORD *)(v6 + 1062) = v24 | v25 | *(_WORD *)(v6 + 1062) & 0xFFF3;
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, object);
  if (v23) {
    os_release(v23);
  }
}

uint64_t __Block_byref_object_copy__98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__99(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__100(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__101(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  http_authentication = (_CFHTTPAuthentication *)nw_authentication_credential_cache_entry_get_http_authentication((void *)a3);
  if (CFHTTPAuthenticationIsValid(http_authentication, 0)
    && CFHTTPAuthenticationAppliesToRequest(http_authentication, *(CFHTTPMessageRef *)(*(void *)(a1[4] + 8) + 40)))
  {
    if (a3)
    {
      int v6 = *(_DWORD *)(a3 + 24);
      if (v6 == 4)
      {
        CFStringRef NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNegotiateHeaderForRequest();
        if (!NegotiateHeaderForRequest) {
          goto LABEL_34;
        }
LABEL_33:
        CFRelease(NegotiateHeaderForRequest);
        goto LABEL_34;
      }
      char v8 = *(unsigned char *)(a3 + 28);
      BOOL v9 = v8 != 0;
      id v10 = *(id *)(a3 + 16);
LABEL_8:
      if (!nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(*(void *)(a1[4] + 8) + 40), http_authentication, v10))
      {
        if (v10) {
          os_release(v10);
        }
        goto LABEL_34;
      }
      if (v6 == 5)
      {
        CFStringRef NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNTLMHeaderForRequest();
        uint64_t v11 = a1[6];
        if (!v9)
        {
LABEL_11:
          char v12 = *(unsigned char *)(v11 + 856);
          if (v12)
          {
            uint64_t v13 = *(void **)(v11 + 848);
            if (v13)
            {
              os_release(v13);
              char v12 = *(unsigned char *)(v11 + 856);
            }
          }
          *(void *)(v11 + 848) = http_authentication;
          *(unsigned char *)(v11 + 856) = v12 | 1;
          uint64_t v14 = a1[6];
          char v15 = *(unsigned char *)(v14 + 664);
          if (v15)
          {
            uint64_t v16 = *(void **)(v14 + 656);
            if (v16)
            {
              os_release(v16);
              char v15 = *(unsigned char *)(v14 + 664);
            }
          }
          *(void *)(v14 + 656) = v10;
          *(unsigned char *)(v14 + 664) = v15 | 1;
          *(_DWORD *)(a1[6] + 1044) = v6;
LABEL_31:
          if (!NegotiateHeaderForRequest) {
            return 1;
          }
          v45[0] = MEMORY[0x1E4F143A8];
          v45[1] = 0x40000000;
          v45[2] = ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke_2;
          v45[3] = &unk_1E523C4A8;
          v45[4] = a1[5];
          char v46 = v8;
          nw_utilities_get_c_string_from_cfstring(NegotiateHeaderForRequest, 0x201u, v45);
          http_authentication = 0;
          goto LABEL_33;
        }
      }
      else
      {
        if (v9) {
          CFStringRef v17 = @"Proxy-Authorization";
        }
        else {
          CFStringRef v17 = @"Authorization";
        }
        CFStringRef NegotiateHeaderForRequest = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(*(void *)(a1[4] + 8) + 40), v17);
        *(_WORD *)(a1[6] + 1062) |= 0x200u;
        uint64_t v11 = a1[6];
        if (!v9) {
          goto LABEL_11;
        }
      }
      char v18 = *(unsigned char *)(v11 + 872);
      if (v18)
      {
        __int16 v19 = *(void **)(v11 + 864);
        if (v19)
        {
          os_release(v19);
          char v18 = *(unsigned char *)(v11 + 872);
        }
      }
      *(void *)(v11 + 864) = http_authentication;
      *(unsigned char *)(v11 + 872) = v18 | 1;
      uint64_t v20 = a1[6];
      char v21 = *(unsigned char *)(v20 + 680);
      if (v21)
      {
        uint64_t v22 = *(void **)(v20 + 672);
        if (v22)
        {
          os_release(v22);
          char v21 = *(unsigned char *)(v20 + 680);
        }
      }
      *(void *)(v20 + 672) = v10;
      *(unsigned char *)(v20 + 680) = v21 | 1;
      *(_DWORD *)(a1[6] + 1048) = v6;
      goto LABEL_31;
    }
    __int16 v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
    __int16 v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault(v25, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          char v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
          os_log_type_t v28 = "%{public}s called with null cache_entry";
LABEL_50:
          _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0xCu);
          goto LABEL_51;
        }
        goto LABEL_51;
      }
      if (!v47)
      {
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          char v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
          os_log_type_t v28 = "%{public}s called with null cache_entry, backtrace limit exceeded";
          goto LABEL_50;
        }
LABEL_51:

        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v30 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          char v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
          os_log_type_t v28 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_50;
        }
        goto LABEL_51;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        char v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
        __int16 v51 = 2082;
        uint64_t v52 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_52:
    if (v25) {
      free(v25);
    }
    CFStringRef v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v50 = "nw_authentication_credential_cache_entry_get_type";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault(v32, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          char v50 = "nw_authentication_credential_cache_entry_get_type";
          os_log_type_t v35 = "%{public}s called with null cache_entry";
LABEL_67:
          _os_log_impl(&dword_1830D4000, v33, v34, v35, buf, 0xCu);
          goto LABEL_68;
        }
        goto LABEL_68;
      }
      if (!v47)
      {
        BOOL v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          char v50 = "nw_authentication_credential_cache_entry_get_type";
          os_log_type_t v35 = "%{public}s called with null cache_entry, backtrace limit exceeded";
          goto LABEL_67;
        }
LABEL_68:

        goto LABEL_69;
      }
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      BOOL v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v37 = os_log_type_enabled(v33, type);
      if (!v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          char v50 = "nw_authentication_credential_cache_entry_get_type";
          os_log_type_t v35 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_67;
        }
        goto LABEL_68;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        char v50 = "nw_authentication_credential_cache_entry_get_type";
        __int16 v51 = 2082;
        uint64_t v52 = v36;
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v36);
    }
LABEL_69:
    if (v32) {
      free(v32);
    }
    uint64_t v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v50 = "nw_authentication_credential_cache_entry_get_credential";
    __int16 v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v39, &type, &v47)) {
      goto LABEL_86;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_authentication_credential_cache_entry_get_credential";
        BOOL v42 = "%{public}s called with null cache_entry";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v40, v41, v42, buf, 0xCu);
      }
    }
    else if (v47)
    {
      uint64_t v43 = (char *)__nw_create_backtrace_string();
      BOOL v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v44 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          char v50 = "nw_authentication_credential_cache_entry_get_credential";
          __int16 v51 = 2082;
          uint64_t v52 = v43;
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_86;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_authentication_credential_cache_entry_get_credential";
        BOOL v42 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      BOOL v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_authentication_credential_cache_entry_get_credential";
        BOOL v42 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_84;
      }
    }

LABEL_86:
    if (v39) {
      free(v39);
    }
    char v8 = 0;
    BOOL v9 = 0;
    int v6 = 0;
    id v10 = 0;
    goto LABEL_8;
  }
LABEL_34:
  if (http_authentication) {
    os_release(http_authentication);
  }
  return 1;
}

BOOL nw_http_authentication_apply_credentials(__CFHTTPMessage *a1, _CFHTTPAuthentication *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t username = nw_authentication_credential_get_username(a3);
  uint64_t password = nw_authentication_credential_get_password(a3);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (username) {
    BOOL v9 = (const char *)username;
  }
  else {
    BOOL v9 = "";
  }
  CFStringRef v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, 0x8000100u);
  if (password) {
    uint64_t v11 = (const char *)password;
  }
  else {
    uint64_t v11 = "";
  }
  CFStringRef v12 = CFStringCreateWithCString(v8, v11, 0x8000100u);
  v16.domain = 0;
  *(void *)&v16.CFStreamError error = 0;
  int v13 = CFHTTPMessageApplyCredentials(a1, a2, v10, v12, &v16);
  if (!v13)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      char v18 = "nw_http_authentication_apply_credentials";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s CFHTTPMessageApplyCredentials() failed", buf, 0xCu);
    }
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v13 != 0;
}

void ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke_2(uint64_t a1, char *a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v3 = "Proxy-Authorization";
  }
  else {
    uint64_t v3 = "Authorization";
  }
  nw_http_fields_append_advanced(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (unint64_t)v3, -1, a2, 0xFFFFFFFFFFFFFFFFLL, &__block_literal_global_105);
}

uint64_t ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return nw_http_field_set_indexing_strategy(a2, 1u);
}

void nw_http_authentication_apply_appsso_headers(const __CFString *a1, const void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v7, &v17, &v16)) {
      goto LABEL_38;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      CFAllocatorRef v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
      CFStringRef v10 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      CFAllocatorRef v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      BOOL v12 = os_log_type_enabled(v8, v17);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v7) {
          return;
        }
LABEL_39:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
      CFStringRef v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      CFAllocatorRef v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
      CFStringRef v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }
  uint64_t v3 = a3[5];
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v19 = *(void *)(v3 + 944);
    if (CFStringCompare(a1, @"Set-Cookie", 1uLL))
    {
      if (*(int *)(v3 + 1040) >= 4)
      {
        int v6 = *(__CFDictionary **)(v3 + 736);
        if (v6) {
          CFDictionaryAddValue(v6, a1, a2);
        }
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      v15[2] = ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke;
      v15[3] = &unk_1E523C460;
      v15[4] = buf;
      v15[5] = a2;
      nw_utilities_get_c_string_from_cfstring(a1, 0x201u, v15);
    }
    _Block_object_dispose(buf, 8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v7, &v17, &v16)) {
    goto LABEL_38;
  }
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    CFAllocatorRef v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
    CFStringRef v10 = "%{public}s called with null http_authentication";
    goto LABEL_37;
  }
  if (!v16)
  {
    CFAllocatorRef v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
    CFStringRef v10 = "%{public}s called with null http_authentication, backtrace limit exceeded";
    goto LABEL_37;
  }
  int v13 = (char *)__nw_create_backtrace_string();
  CFAllocatorRef v8 = __nwlog_obj();
  os_log_type_t v9 = v17;
  BOOL v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
    CFStringRef v10 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_apply_appsso_headers";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_39;
  }
}

void ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke_2;
  v3[3] = &unk_1E523C438;
  CFStringRef v2 = *(const __CFString **)(a1 + 40);
  v3[4] = *(void *)(a1 + 32);
  v3[5] = a2;
  nw_utilities_get_c_string_from_cfstring(v2, 0x201u, v3);
}

void ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

void nw_protocol_http_authentication_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void nw_protocol_http_authentication_create::$_0::operator()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    int buf = 136446210;
    buf_4 = "operator()";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45)) {
      goto LABEL_97;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null protocol";
    }
    else if ((_BYTE)v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      BOOL v25 = os_log_type_enabled(v21, type[0]);
      if (backtrace_string)
      {
        if (v25)
        {
          int buf = 136446466;
          buf_4 = "operator()";
          __int16 v49 = 2082;
          char v50 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(backtrace_string);
LABEL_97:
        if (!v20) {
          return;
        }
        goto LABEL_98;
      }
      if (!v25) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_96;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {
    __nwlog_obj();
    int buf = 136446210;
    buf_4 = "operator()";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45)) {
      goto LABEL_97;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v45)
      {
        char v21 = __nwlog_obj();
        os_log_type_t v22 = type[0];
        if (!os_log_type_enabled(v21, type[0])) {
          goto LABEL_97;
        }
        int buf = 136446210;
        buf_4 = "operator()";
        id v23 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_96;
      }
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      BOOL v27 = os_log_type_enabled(v21, type[0]);
      if (!v26)
      {
        if (!v27) {
          goto LABEL_97;
        }
        int buf = 136446210;
        buf_4 = "operator()";
        id v23 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_96;
      }
      if (!v27) {
        goto LABEL_74;
      }
      int buf = 136446466;
      buf_4 = "operator()";
      __int16 v49 = 2082;
      char v50 = v26;
      os_log_type_t v28 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    char v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    if (!os_log_type_enabled(v21, type[0])) {
      goto LABEL_97;
    }
    int buf = 136446210;
    buf_4 = "operator()";
    id v23 = "%{public}s called with null http_authentication";
LABEL_96:
    _os_log_impl(&dword_1830D4000, v21, v22, v23, (uint8_t *)&buf, 0xCu);
    goto LABEL_97;
  }
  if (!a2)
  {
    __nwlog_obj();
    int buf = 136446210;
    buf_4 = "operator()";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45)) {
      goto LABEL_97;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v45)
      {
        char v21 = __nwlog_obj();
        os_log_type_t v22 = type[0];
        if (!os_log_type_enabled(v21, type[0])) {
          goto LABEL_97;
        }
        int buf = 136446210;
        buf_4 = "operator()";
        id v23 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_96;
      }
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      BOOL v29 = os_log_type_enabled(v21, type[0]);
      if (!v26)
      {
        if (!v29) {
          goto LABEL_97;
        }
        int buf = 136446210;
        buf_4 = "operator()";
        id v23 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_96;
      }
      if (!v29) {
        goto LABEL_74;
      }
      int buf = 136446466;
      buf_4 = "operator()";
      __int16 v49 = 2082;
      char v50 = v26;
      os_log_type_t v28 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    char v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    if (!os_log_type_enabled(v21, type[0])) {
      goto LABEL_97;
    }
    int buf = 136446210;
    buf_4 = "operator()";
    id v23 = "%{public}s called with null other_protocol";
    goto LABEL_96;
  }
  if (!a3)
  {
    __nwlog_obj();
    int buf = 136446210;
    buf_4 = "operator()";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45)) {
      goto LABEL_97;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null metadata";
      goto LABEL_96;
    }
    if (!(_BYTE)v45)
    {
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_96;
    }
    os_log_type_t v26 = (char *)__nw_create_backtrace_string();
    char v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    BOOL v30 = os_log_type_enabled(v21, type[0]);
    if (!v26)
    {
      if (!v30) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_96;
    }
    if (!v30) {
      goto LABEL_74;
    }
    int buf = 136446466;
    buf_4 = "operator()";
    __int16 v49 = 2082;
    char v50 = v26;
    os_log_type_t v28 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_73:
    _os_log_impl(&dword_1830D4000, v21, v22, v28, (uint8_t *)&buf, 0x16u);
    goto LABEL_74;
  }
  if (!a4)
  {
    __nwlog_obj();
    int buf = 136446210;
    buf_4 = "operator()";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45)) {
      goto LABEL_97;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null completion";
      goto LABEL_96;
    }
    if (!(_BYTE)v45)
    {
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_96;
    }
    os_log_type_t v26 = (char *)__nw_create_backtrace_string();
    char v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    BOOL v31 = os_log_type_enabled(v21, type[0]);
    if (!v26)
    {
      if (!v31) {
        goto LABEL_97;
      }
      int buf = 136446210;
      buf_4 = "operator()";
      id v23 = "%{public}s called with null completion, no backtrace";
      goto LABEL_96;
    }
    if (v31)
    {
      int buf = 136446466;
      buf_4 = "operator()";
      __int16 v49 = 2082;
      char v50 = v26;
      os_log_type_t v28 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
LABEL_74:
    free(v26);
    if (!v20) {
      return;
    }
LABEL_98:
    free(v20);
    return;
  }
  id v7 = nw_http_metadata_copy_response(a3);
  if ((nw_http_response_get_status_code(v7) - 200) > 0xC7 || !*(void *)(v4 + 848)) {
    goto LABEL_26;
  }
  CFAllocatorRef v8 = os_retain(a3);
  char v9 = *(unsigned char *)(v4 + 568);
  if (v9)
  {
    CFStringRef v10 = *(void **)(v4 + 560);
    if (v10)
    {
      os_release(v10);
      char v9 = *(unsigned char *)(v4 + 568);
    }
  }
  *(void *)(v4 + 560) = v8;
  *(unsigned char *)(v4 + 568) = v9 | 1;
  id v11 = nw_http_metadata_copy_request(*(void **)(v4 + 576));
  id v12 = nw_http_metadata_copy_response(*(void **)(v4 + 560));
  int v13 = v12;
  if (!v11)
  {
    __nwlog_obj();
    int buf = 136446210;
    buf_4 = "nw_http_authentication_process_success";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v32, type, &v45)) {
      goto LABEL_126;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled(v33, type[0])) {
        goto LABEL_126;
      }
      int buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      os_log_type_t v35 = "%{public}s called with null request";
    }
    else if ((_BYTE)v45)
    {
      os_log_type_t v41 = (char *)__nw_create_backtrace_string();
      BOOL v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      BOOL v42 = os_log_type_enabled(v33, type[0]);
      if (v41)
      {
        if (v42)
        {
          int buf = 136446466;
          buf_4 = "nw_http_authentication_process_success";
          __int16 v49 = 2082;
          char v50 = v41;
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null request, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(v41);
LABEL_126:
        if (v32) {
          free(v32);
        }
        if (!v13) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      if (!v42) {
        goto LABEL_126;
      }
      int buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      os_log_type_t v35 = "%{public}s called with null request, no backtrace";
    }
    else
    {
      BOOL v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled(v33, type[0])) {
        goto LABEL_126;
      }
      int buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      os_log_type_t v35 = "%{public}s called with null request, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v33, v34, v35, (uint8_t *)&buf, 0xCu);
    goto LABEL_126;
  }
  if (!v12)
  {
    __nwlog_obj();
    int buf = 136446210;
    buf_4 = "nw_http_authentication_process_success";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v36, type, &v45)) {
      goto LABEL_133;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_133;
      }
      int buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      __int16 v39 = "%{public}s called with null response";
    }
    else if ((_BYTE)v45)
    {
      uint64_t v43 = (char *)__nw_create_backtrace_string();
      BOOL v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v44 = os_log_type_enabled(v37, type[0]);
      if (v43)
      {
        if (v44)
        {
          int buf = 136446466;
          buf_4 = "nw_http_authentication_process_success";
          __int16 v49 = 2082;
          char v50 = v43;
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null response, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(v43);
        goto LABEL_133;
      }
      if (!v44)
      {
LABEL_133:
        if (v36) {
          free(v36);
        }
        goto LABEL_24;
      }
      int buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      __int16 v39 = "%{public}s called with null response, no backtrace";
    }
    else
    {
      BOOL v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_133;
      }
      int buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      __int16 v39 = "%{public}s called with null response, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v37, v38, v39, (uint8_t *)&buf, 0xCu);
    goto LABEL_133;
  }
  if ((*(unsigned char *)(v4 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v40 = __nwlog_obj();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        int buf = 136446722;
        buf_4 = "nw_http_authentication_process_success";
        __int16 v49 = 2082;
        char v50 = (char *)(v4 + 114);
        __int16 v51 = 2080;
        uint64_t v52 = " ";
        _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&buf, 0x20u);
      }
    }
  }
  if ((*(_WORD *)(v4 + 1062) & 0x10) != 0) {
    BOOL v14 = "Proxy-Authentication-Info";
  }
  else {
    BOOL v14 = "Authentication-Info";
  }
  id v15 = v13;
  int have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v15, (unint64_t)v14);

  if (have_field_with_name)
  {
    BOOL v17 = nw_http_response_copy_url_response(v15, v11, 0, **((void ***)&unk_1E524BD90 + *(int *)(v4 + 1040)));
    CFURLResponseGetHTTPResponse();
    _CFHTTPAuthenticationUpdateFromResponse();
    if (v17) {
      os_release((void *)v17);
    }
  }
  if (*(void *)(v4 + 976)) {
    _CFHTTPAuthenticationClearAccountRefreshState();
  }
  os_release(v15);
LABEL_24:
  int v13 = v11;
LABEL_25:
  os_release(v13);
LABEL_26:
  char v18 = *(unsigned char *)(v4 + 568);
  if (v18)
  {
    uint64_t v19 = *(void **)(v4 + 560);
    if (v19)
    {
      os_release(v19);
      char v18 = *(unsigned char *)(v4 + 568);
    }
  }
  *(void *)(v4 + 560) = 0;
  *(unsigned char *)(v4 + 568) = v18 | 1;
  (*(void (**)(uint64_t, uint64_t, void *))(a4 + 16))(a4, 1, a3);
  if (v7) {
    os_release(v7);
  }
}

void *nw_http_authentication_copy_protocol_metadata(nw_protocol *a1)
{
  id v1 = (atomic_uchar *)nw_protocol_copy_info((uint64_t)a1->output_handler, 255);
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x3802000000;
  char v9 = __Block_byref_object_copy__14188;
  CFStringRef v10 = __Block_byref_object_dispose__14189;
  uint64_t object = 0;
  char v12 = -1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZL45nw_http_authentication_copy_protocol_metadataP11nw_protocol_block_invoke;
  v5[3] = &unk_1E523C150;
  v5[4] = &v6;
  nw_array_apply(v1, (uint64_t)v5);
  CFStringRef v2 = (void *)v7[5];
  if (v2) {
    uint64_t v3 = os_retain(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  _Block_object_dispose(&v6, 8);
  if ((v12 & 1) != 0 && object) {
    os_release(object);
  }
  if (v1) {
    os_release(v1);
  }
  return v3;
}

void ___ZL40nw_http_authentication_process_challengeP11nw_protocol_block_invoke(uint64_t a1, void *object, int a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(*(void *)(a1 + 32) + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      char v16 = __nwlog_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 32) + 114;
        int v18 = 136447234;
        uint64_t v19 = "nw_http_authentication_process_challenge_block_invoke";
        __int16 v20 = 2082;
        uint64_t v21 = v17;
        __int16 v22 = 2080;
        id v23 = " ";
        __int16 v24 = 2048;
        BOOL v25 = object;
        __int16 v26 = 1024;
        int v27 = a3;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreturned from nw_http_authentication_process_response, new_outbound_metadata %p, cancel %d", (uint8_t *)&v18, 0x30u);
      }
    }
  }
  if (object) {
    uint64_t v8 = os_retain(object);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(v9 + 600);
  if (v10)
  {
    id v11 = *(void **)(v9 + 592);
    if (v11)
    {
      os_release(v11);
      char v10 = *(unsigned char *)(v9 + 600);
    }
  }
  *(void *)(v9 + 592) = v8;
  *(unsigned char *)(v9 + 600) = v10 | 1;
  if (a3)
  {
    nw_protocol_plugin_metadata_resume_input(*(void *)(a1 + 32) + 200, 1);
    nw_protocol_input_available(*(void **)(*(void *)(a1 + 40) + 48), *(void *)(a1 + 40));
  }
  else
  {
    if (a4) {
      char v12 = 1;
    }
    else {
      char v12 = 2;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    *(unsigned char *)(v13 + 1060) = v12;
    *(_WORD *)(v13 + 1062) |= 0x40u;
    if ((*(unsigned char *)(*(void *)(a1 + 32) + 1062) & 4) == 0)
    {
      id v14 = nw_http_metadata_copy_request(object);
      nw_http_fields_remove_by_name(v14, (uint64_t)"Cookie");
      if (v14) {
        os_release(v14);
      }
    }
    nw_protocol_plugin_metadata_prepare_for_reissue(*(void *)(a1 + 32) + 200);
    uint64_t v15 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v15 + 1060) != 1) {
      nw_http_authentication_reissue((nw_protocol *)v15);
    }
  }
}

uint64_t nw_http_authentication_handle_challenge(uint64_t a1, _CFHTTPAuthentication *a2, void *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
    os_log_type_t v104 = (char *)_os_log_send_and_compose_impl();
    v133[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v104, v133, &type)) {
      goto LABEL_193;
    }
    if (v133[0] == 17)
    {
      os_log_type_t v105 = __nwlog_obj();
      os_log_type_t v106 = v133[0];
      if (os_log_type_enabled(v105, (os_log_type_t)v133[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
        char v107 = "%{public}s called with null protocol";
LABEL_192:
        _os_log_impl(&dword_1830D4000, v105, v106, v107, buf, 0xCu);
      }
LABEL_193:
      if (v104) {
        free(v104);
      }
      return 1;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v105 = __nwlog_obj();
      os_log_type_t v106 = v133[0];
      if (os_log_type_enabled(v105, (os_log_type_t)v133[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
        char v107 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_192;
      }
      goto LABEL_193;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v105 = __nwlog_obj();
    os_log_type_t v106 = v133[0];
    BOOL v109 = os_log_type_enabled(v105, (os_log_type_t)v133[0]);
    if (!backtrace_string)
    {
      if (v109)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
        char v107 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_192;
      }
      goto LABEL_193;
    }
    if (v109)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      __int16 v110 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_173:
      _os_log_impl(&dword_1830D4000, v105, v106, v110, buf, 0x16u);
    }
LABEL_174:
    free(backtrace_string);
    goto LABEL_193;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
    os_log_type_t v104 = (char *)_os_log_send_and_compose_impl();
    v133[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v104, v133, &type)) {
      goto LABEL_193;
    }
    if (v133[0] == 17)
    {
      os_log_type_t v105 = __nwlog_obj();
      os_log_type_t v106 = v133[0];
      if (os_log_type_enabled(v105, (os_log_type_t)v133[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
        char v107 = "%{public}s called with null http_authentication";
        goto LABEL_192;
      }
      goto LABEL_193;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v105 = __nwlog_obj();
      os_log_type_t v106 = v133[0];
      if (os_log_type_enabled(v105, (os_log_type_t)v133[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
        char v107 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_192;
      }
      goto LABEL_193;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v105 = __nwlog_obj();
    os_log_type_t v106 = v133[0];
    BOOL v111 = os_log_type_enabled(v105, (os_log_type_t)v133[0]);
    if (!backtrace_string)
    {
      if (v111)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
        char v107 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_192;
      }
      goto LABEL_193;
    }
    if (v111)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      __int16 v110 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_173;
    }
    goto LABEL_174;
  }
  if (!a2) {
    goto LABEL_29;
  }
  _CFHTTPAuthenticationUpdateFromResponse();
  if (!CFHTTPAuthenticationIsValid(a2, 0))
  {
    if (a3)
    {
      if (*(void *)(v7 + 640))
      {
        uint64_t v19 = a3;
        uint64_t v20 = v19[2];

        if (v20)
        {
          if (*(void *)(v7 + 688))
          {
            uint64_t v21 = -[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
            __int16 v22 = v19;
            id v23 = (const char *)v19[2];

            nw_authentication_credential_set_username(v21, v23);
            nw_authentication_credential_set_persistence(v21, 1);
            nw_authentication_credential_storage_set_default_credential(*(void **)(v7 + 688), *(void **)(v7 + 640), v21);
            if (v21) {
              os_release(v21);
            }
          }
        }
      }
    }
    if (a4 != 5) {
      nw_array_remove_objects(*(void *)(v7 + 704), (uint64_t)&__block_literal_global_35);
    }
    if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
    {
      __int16 v24 = (void **)(v7 + 864);
      BOOL v25 = (char *)(v7 + 872);
      char v26 = *(unsigned char *)(v7 + 872);
      if ((v26 & 1) == 0) {
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v24 = (void **)(v7 + 848);
      BOOL v25 = (char *)(v7 + 856);
      char v26 = *(unsigned char *)(v7 + 856);
      if ((v26 & 1) == 0)
      {
LABEL_25:
        void *v24 = 0;
        *BOOL v25 = v26 | 1;
        char v27 = *(unsigned char *)(v7 + 648);
        if (v27)
        {
          uint64_t v28 = *(void **)(v7 + 640);
          if (v28)
          {
            os_release(v28);
            char v27 = *(unsigned char *)(v7 + 648);
          }
        }
        *(void *)(v7 + 640) = 0;
        *(unsigned char *)(v7 + 648) = v27 | 1;
        goto LABEL_29;
      }
    }
    if (*v24)
    {
      os_release(*v24);
      char v26 = *v25;
    }
    goto LABEL_25;
  }
  if (a3)
  {
    if (a4 == 5)
    {
      uint64_t v13 = a3;
      uint64_t v14 = v13[2];

      if (v14)
      {
        if (nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(v7 + 912), a2, v13))
        {
          CFStringRef NTLMHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNTLMHeaderForRequest();
          if (NTLMHeaderForRequest)
          {
            CFStringRef v16 = NTLMHeaderForRequest;
            v125[0] = MEMORY[0x1E4F143A8];
            v125[1] = 0x40000000;
            v125[2] = ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_36;
            v125[3] = &__block_descriptor_tmp_37_14118;
            v125[4] = v7;
            nw_utilities_get_c_string_from_cfstring(NTLMHeaderForRequest, 0x201u, v125);
            nw_protocol_plugin_retry_begin_async(v7 + 344);
            uint64_t v17 = *(void **)(v7 + 832);
            v124[0] = MEMORY[0x1E4F143A8];
            v124[1] = 0x40000000;
            v124[2] = ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2;
            v124[3] = &unk_1E523C1B8;
            v124[4] = a6;
            v124[5] = v7;
            nw_queue_context_async(v17, v124);
            CFRelease(v16);
            return 2;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v89 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
              _os_log_impl(&dword_1830D4000, v89, OS_LOG_TYPE_ERROR, "%{public}s Unable to find authorization", buf, 0xCu);
            }
            uint64_t v18 = 1;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(a6 + 16))(a6, 0, 1, 1);
          }
          return v18;
        }
LABEL_120:
        uint64_t v18 = 1;
        (*(void (**)(uint64_t, void, uint64_t, void))(a6 + 16))(a6, 0, 1, 0);
        return v18;
      }
    }
  }
LABEL_29:
  if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
  {
    uint64_t v49 = *(void *)(a1 + 40);
    if (!v49)
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
      v62 = (char *)_os_log_send_and_compose_impl();
      v133[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v62, v133, &type))
      {
        if (v133[0] == 17)
        {
          char v64 = __nwlog_obj();
          os_log_type_t v65 = v133[0];
          if (os_log_type_enabled(v64, (os_log_type_t)v133[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            os_log_type_t v66 = "%{public}s called with null http_authentication";
            goto LABEL_88;
          }
        }
        else if (type)
        {
          __int16 v112 = (char *)__nw_create_backtrace_string();
          char v64 = __nwlog_obj();
          os_log_type_t v65 = v133[0];
          BOOL v113 = os_log_type_enabled(v64, (os_log_type_t)v133[0]);
          if (v112)
          {
            if (v113)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v112;
              _os_log_impl(&dword_1830D4000, v64, v65, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v112);
          }
          else if (v113)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            os_log_type_t v66 = "%{public}s called with null http_authentication, no backtrace";
            goto LABEL_88;
          }
        }
        else
        {
          char v64 = __nwlog_obj();
          os_log_type_t v65 = v133[0];
          if (os_log_type_enabled(v64, (os_log_type_t)v133[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            os_log_type_t v66 = "%{public}s called with null http_authentication, backtrace limit exceeded";
            goto LABEL_88;
          }
        }
      }
      goto LABEL_90;
    }
    char v121 = a5;
    uint64_t v122 = a6;
    uint64_t v50 = *(void *)(a1 + 40);
    while (1)
    {
      __int16 v51 = *(void **)(v50 + 16);
      if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
        dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
      }
      if (nw_protocols_are_equal(v51, nw_protocol_http_messaging_identifier::protocol_identifier)) {
        break;
      }
      uint64_t v50 = *(void *)(v50 + 32);
      if (!v50)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
        v62 = (char *)_os_log_send_and_compose_impl();
        v133[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        int v63 = __nwlog_fault(v62, v133, &type);
        a6 = v122;
        if (v63)
        {
          if (v133[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v64 = gLogObj;
            os_log_type_t v65 = v133[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v133[0])) {
              goto LABEL_90;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            os_log_type_t v66 = "%{public}s could not find http_messaging";
            goto LABEL_88;
          }
          if (type)
          {
            os_log_type_t v72 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v73 = gLogObj;
            os_log_type_t v74 = v133[0];
            BOOL v75 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v133[0]);
            if (v72)
            {
              if (v75)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v72;
                _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s could not find http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v72);
              if (!v62) {
                goto LABEL_118;
              }
LABEL_91:
              free(v62);
              goto LABEL_118;
            }
            if (!v75) {
              goto LABEL_90;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            os_log_type_t v66 = "%{public}s could not find http_messaging, no backtrace";
            os_log_type_t v76 = v73;
            os_log_type_t v77 = v74;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v64 = gLogObj;
            os_log_type_t v65 = v133[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v133[0])) {
              goto LABEL_90;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            os_log_type_t v66 = "%{public}s could not find http_messaging, backtrace limit exceeded";
LABEL_88:
            os_log_type_t v76 = v64;
            os_log_type_t v77 = v65;
          }
          _os_log_impl(&dword_1830D4000, v76, v77, v66, buf, 0xCu);
        }
LABEL_90:
        if (!v62) {
          goto LABEL_118;
        }
        goto LABEL_91;
      }
    }
    parameters = (void *)nw_protocol_get_parameters(v50);
    id v54 = nw_parameters_copy_effective_proxy_config(parameters);
    a6 = v122;
    if (!v54) {
      goto LABEL_118;
    }
    id v55 = (id *)v54;
    id v56 = v55[5];

    if (!v56)
    {
LABEL_117:
      os_release(v55);
      goto LABEL_118;
    }
    __int16 v57 = v56;
    int v58 = [v57 type];

    if (v58 == 1)
    {
      os_log_type_t v61 = nw_endpoint_copy_address_string(v57);
      uint64_t v60 = 0;
    }
    else
    {
      if (v58 != 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v88 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v58;
          _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_ERROR, "%{public}s Unsupported endpoint type: %d", buf, 0x12u);
        }
LABEL_116:
        os_release(v57);
        goto LABEL_117;
      }
      char v59 = v57;
      uint64_t v60 = [v59 hostname];

      os_log_type_t v61 = 0;
    }
    v79 = v57;
    *(void *)int buf = 0;
    asprintf((char **)buf, "%d", __rev16([v79 port]));
    v80 = *(void **)buf;

    if (v80)
    {
      v81 = "";
      if (v61) {
        v81 = v61;
      }
      if (v60) {
        v81 = (const char *)v60;
      }
      CFAllocatorRef v82 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v83 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"http://%s:%s", v81, v80);
      if (v83)
      {
        CFAllocatorRef v120 = v82;
        CFURLRef v84 = CFURLCreateWithString(v82, v83, 0);
        char v85 = *(unsigned char *)(v49 + 904);
        if (v85)
        {
          os_log_type_t v86 = *(const void **)(v49 + 896);
          if (v86)
          {
            CFRelease(v86);
            char v85 = *(unsigned char *)(v49 + 904);
          }
        }
        *(void *)(v49 + 896) = v84;
        *(unsigned char *)(v49 + 904) = v85 | 1;
        if (v84)
        {
          _CFHTTPMessageSetResponseProxyURL();
          *(void *)int buf = nw_endpoint_create_with_cfurl(*(const __CFURL **)(v49 + 896));
          nw::retained_ptr<nw_endpoint *>::operator=(v49 + 800, buf);
          char v87 = 1;
        }
        else
        {
          char v87 = 0;
        }
        CFAllocatorRef v82 = v120;
      }
      else
      {
        char v87 = 0;
      }
      if (v61) {
        free(v61);
      }
      free(v80);
      if (v83) {
        CFRelease(v83);
      }
      os_release(v79);
      os_release(v55);
      a6 = v122;
      if ((v87 & 1) == 0)
      {
LABEL_118:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v91 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
          _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_ERROR, "%{public}s Unable to set proxy URL", buf, 0xCu);
        }
        goto LABEL_120;
      }
      CFHTTPAuthenticationRef v96 = CFHTTPAuthenticationCreateFromResponse(v82, *(CFHTTPMessageRef *)(v7 + 928));
      char v97 = *(unsigned char *)(v7 + 872);
      if (v97)
      {
        BOOL v99 = *(void **)(v7 + 864);
        char v98 = v121;
        if (v99)
        {
          os_release(v99);
          char v97 = *(unsigned char *)(v7 + 872);
        }
      }
      else
      {
        char v98 = v121;
      }
      *(void *)(v7 + 864) = v96;
      *(unsigned char *)(v7 + 872) = v97 | 1;
      os_log_type_t v32 = *(NSObject **)(v7 + 800);
      BOOL v33 = v96;
      char v34 = v98;
      int v35 = 1;
      int v36 = 1;
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v90 = gLogObj;
    a6 = v122;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
      _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_ERROR, "%{public}s Cannot connect without port", buf, 0xCu);
    }
    if (v61) {
      free(v61);
    }
    goto LABEL_116;
  }
  _CFHTTPAuthenticationCanRecoverFromKerberosFailure();
  uint64_t v29 = _CFHTTPAuthenticationCreateFromResponseWithFlags();
  char v30 = *(unsigned char *)(v7 + 856);
  if (v30)
  {
    BOOL v31 = *(void **)(v7 + 848);
    if (v31)
    {
      os_release(v31);
      char v30 = *(unsigned char *)(v7 + 856);
    }
  }
  *(void *)(v7 + 848) = v29;
  *(unsigned char *)(v7 + 856) = v30 | 1;
  os_log_type_t v32 = *(NSObject **)(v7 + 784);
  BOOL v33 = (_CFHTTPAuthentication *)v29;
  char v34 = a5;
  int v35 = 0;
  int v36 = 0;
LABEL_34:
  uint64_t v37 = nw_http_authentication_parse_schemes(v33, v32, v34, v35, v36);
  os_log_type_t v38 = (void *)v37;
  if (v37 && *(void *)(v37 + 24) != *(void *)(v37 + 16))
  {
    object_at_index = (void *)nw_array_get_object_at_index(v37, 0);
    int v40 = nw_authentication_protection_space_get_type(object_at_index);
    os_log_type_t v41 = objc_alloc_init(NWConcrete_nw_authentication_challenge);
    char v42 = *(unsigned char *)(v7 + 648);
    if (v42)
    {
      uint64_t v43 = *(void **)(v7 + 640);
      if (v43)
      {
        os_release(v43);
        char v42 = *(unsigned char *)(v7 + 648);
      }
    }
    *(void *)(v7 + 640) = v41;
    *(unsigned char *)(v7 + 648) = v42 | 1;
    nw_authentication_challenge_set_protection_space_array(v41, v38);
    nw_authentication_challenge_set_http_message(*(void **)(v7 + 640), *(const void **)(v7 + 928));
    if (a3 && (BOOL v44 = a3, v45 = v44[2], v44, v45) && (*(_WORD *)(v7 + 1062) & 0x200) == 0)
    {
      nw_authentication_challenge_set_proposed_credential(*(void **)(v7 + 640), v44);
      if ((*(_WORD *)(v7 + 1062) & 0x10) == 0)
      {
        char v46 = *(unsigned char *)(v7 + 664);
        if (v46)
        {
          char v47 = *(void **)(v7 + 656);
          if (v47)
          {
            os_release(v47);
            char v46 = *(unsigned char *)(v7 + 664);
          }
        }
        *(void *)(v7 + 656) = 0;
        *(unsigned char *)(v7 + 664) = v46 | 1;
        __int16 v48 = *(_WORD *)(v7 + 1062);
        if ((v48 & 0x10) != 0) {
          goto LABEL_125;
        }
LABEL_75:
        if (v40 == 8)
        {
          uint64_t v78 = nw_http_authentication_ask_pat_for_creds(a1, a6);
LABEL_136:
          uint64_t v18 = v78;
          goto LABEL_137;
        }
        if (v40 != 4)
        {
LABEL_135:
          uint64_t v78 = nw_http_authentication_send_challenge(a1, a6);
          goto LABEL_136;
        }
        if (!_CFHTTPAuthenticationFailedToGetKerberosTicket())
        {
          if (!*(_DWORD *)(v7 + 1052))
          {
            *(_DWORD *)(v7 + 1052) = 1;
            if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
            {
              *(_DWORD *)(v7 + 1048) = 4;
              os_log_type_t v100 = *(_CFHTTPAuthentication **)(v7 + 864);
              uint64_t v101 = a1;
              int v102 = 1;
            }
            else
            {
              *(_DWORD *)(v7 + 1044) = 4;
              os_log_type_t v100 = *(_CFHTTPAuthentication **)(v7 + 848);
              uint64_t v101 = a1;
              int v102 = 0;
            }
            if (nw_http_authentication_apply_authorization(v101, v100, 0, 4, 0, v102, 0, a6))
            {
              nw_protocol_plugin_retry_begin_async(v7 + 344);
              os_log_type_t v103 = *(void **)(v7 + 832);
              v123[0] = MEMORY[0x1E4F143A8];
              v123[1] = 0x40000000;
              v123[2] = ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_40;
              v123[3] = &unk_1E523C1E0;
              v123[4] = a6;
              v123[5] = v7;
              nw_queue_context_async(v103, v123);
              uint64_t v18 = 2;
            }
            else
            {
              uint64_t v18 = 1;
              (*(void (**)(uint64_t, void, uint64_t, void))(a6 + 16))(a6, 0, 1, 0);
            }
            goto LABEL_137;
          }
          goto LABEL_135;
        }
        uint64_t v71 = *(void *)(a1 + 40);
        if (v71)
        {
          nw_protocol_plugin_retry_begin_async(v71 + 344);
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke;
          v129 = &unk_1E523C2E0;
          uint64_t v130 = a6;
          uint64_t v131 = v71;
          uint64_t v132 = a1;
          _CFHTTPAuthenticationAskAccountsForCreds();
          uint64_t v18 = 2;
LABEL_137:
          os_release(v38);
          return v18;
        }
        __nwlog_obj();
        *(_DWORD *)v133 = 136446210;
        v134 = "nw_http_authentication_ask_accounts_for_creds";
        __int16 v114 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v126 = 0;
        if (__nwlog_fault(v114, &type, &v126))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            char v115 = __nwlog_obj();
            os_log_type_t v116 = type;
            if (os_log_type_enabled(v115, type))
            {
              *(_DWORD *)v133 = 136446210;
              v134 = "nw_http_authentication_ask_accounts_for_creds";
              uint64_t v117 = "%{public}s called with null http_authentication";
LABEL_213:
              _os_log_impl(&dword_1830D4000, v115, v116, v117, v133, 0xCu);
            }
          }
          else if (v126)
          {
            v118 = (char *)__nw_create_backtrace_string();
            char v115 = __nwlog_obj();
            os_log_type_t v116 = type;
            BOOL v119 = os_log_type_enabled(v115, type);
            if (v118)
            {
              if (v119)
              {
                *(_DWORD *)v133 = 136446466;
                v134 = "nw_http_authentication_ask_accounts_for_creds";
                __int16 v135 = 2082;
                v136 = v118;
                _os_log_impl(&dword_1830D4000, v115, v116, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", v133, 0x16u);
              }
              free(v118);
              goto LABEL_214;
            }
            if (v119)
            {
              *(_DWORD *)v133 = 136446210;
              v134 = "nw_http_authentication_ask_accounts_for_creds";
              uint64_t v117 = "%{public}s called with null http_authentication, no backtrace";
              goto LABEL_213;
            }
          }
          else
          {
            char v115 = __nwlog_obj();
            os_log_type_t v116 = type;
            if (os_log_type_enabled(v115, type))
            {
              *(_DWORD *)v133 = 136446210;
              v134 = "nw_http_authentication_ask_accounts_for_creds";
              uint64_t v117 = "%{public}s called with null http_authentication, backtrace limit exceeded";
              goto LABEL_213;
            }
          }
        }
LABEL_214:
        if (v114) {
          free(v114);
        }
        uint64_t v18 = 1;
        goto LABEL_137;
      }
      char v92 = *(unsigned char *)(v7 + 680);
      if (v92)
      {
        os_log_type_t v93 = *(void **)(v7 + 672);
        if (v93)
        {
          os_release(v93);
          char v92 = *(unsigned char *)(v7 + 680);
        }
      }
      *(void *)(v7 + 672) = 0;
      *(unsigned char *)(v7 + 680) = v92 | 1;
      __int16 v48 = *(_WORD *)(v7 + 1062);
      if ((v48 & 0x10) == 0) {
        goto LABEL_75;
      }
    }
    else
    {
      if (v40 != 4)
      {
        BOOL v67 = *(void **)(v7 + 688);
        if (v67)
        {
          v68 = nw_authentication_credential_storage_copy_default_credential(v67, *(void **)(v7 + 640));
          if (v68)
          {
            char v69 = v68;
            uint64_t v70 = v69[3];

            if (v70) {
              nw_authentication_challenge_set_proposed_credential(*(void **)(v7 + 640), v69);
            }
            os_release(v69);
          }
        }
      }
      __int16 v48 = *(_WORD *)(v7 + 1062);
      if ((v48 & 0x10) == 0) {
        goto LABEL_75;
      }
    }
LABEL_125:
    if ((v48 & 0x80) == 0 && v40 != 4 && v40 != 8)
    {
      if (nw_proxy_options_authbroker_is_available::onceToken != -1) {
        dispatch_once(&nw_proxy_options_authbroker_is_available::onceToken, &__block_literal_global_35645);
      }
      if (nw_proxy_options_authbroker_is_available::available == 1)
      {
        BOOL v94 = (void *)nw_protocol_get_parameters(v7);
        if ((nw_parameters_get_prevents_system_http_proxy_authentication(v94) & 1) == 0)
        {
          uint64_t v78 = nw_http_authentication_ask_authbroker_for_creds(a1);
          goto LABEL_136;
        }
      }
    }
    goto LABEL_135;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v52 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
    _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s Unable to determine authentication type", buf, 0xCu);
  }
  uint64_t v18 = 1;
  (*(void (**)(uint64_t, void, uint64_t, void))(a6 + 16))(a6, 0, 1, 0);
  if (v38) {
    goto LABEL_137;
  }
  return v18;
}

void sub_18372CAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18372CAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18372CB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_http_authentication_apply_authorization(uint64_t a1, _CFHTTPAuthentication *a2, void *a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_http_authentication_apply_authorization";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(error.domain) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v37, &error, &type)) {
      goto LABEL_75;
    }
    if (LOBYTE(error.domain) != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t domain = error.domain;
        if (!os_log_type_enabled(v38, error.domain)) {
          goto LABEL_75;
        }
        *(_DWORD *)int buf = 136446210;
        char v59 = "nw_http_authentication_apply_authorization";
        int v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t domain = error.domain;
      BOOL v42 = os_log_type_enabled(v38, error.domain);
      if (!backtrace_string)
      {
        if (!v42) {
          goto LABEL_75;
        }
        *(_DWORD *)int buf = 136446210;
        char v59 = "nw_http_authentication_apply_authorization";
        int v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }
      if (v42)
      {
        *(_DWORD *)int buf = 136446466;
        char v59 = "nw_http_authentication_apply_authorization";
        __int16 v60 = 2082;
        CFIndex v61 = (CFIndex)backtrace_string;
        uint64_t v43 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_64:
        _os_log_impl(&dword_1830D4000, v38, domain, v43, buf, 0x16u);
      }
LABEL_65:
      free(backtrace_string);
      goto LABEL_75;
    }
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t domain = error.domain;
    if (!os_log_type_enabled(v38, error.domain)) {
      goto LABEL_75;
    }
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_http_authentication_apply_authorization";
    int v40 = "%{public}s called with null protocol";
LABEL_74:
    _os_log_impl(&dword_1830D4000, v38, domain, v40, buf, 0xCu);
LABEL_75:
    if (v37) {
      free(v37);
    }
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v9)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_http_authentication_apply_authorization";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(error.domain) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v37, &error, &type)) {
      goto LABEL_75;
    }
    if (LOBYTE(error.domain) == 17)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t domain = error.domain;
      if (!os_log_type_enabled(v38, error.domain)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      char v59 = "nw_http_authentication_apply_authorization";
      int v40 = "%{public}s called with null http_authentication";
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t domain = error.domain;
      if (!os_log_type_enabled(v38, error.domain)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      char v59 = "nw_http_authentication_apply_authorization";
      int v40 = "%{public}s called with null http_authentication, backtrace limit exceeded";
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t domain = error.domain;
    BOOL v44 = os_log_type_enabled(v38, error.domain);
    if (backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)int buf = 136446466;
        char v59 = "nw_http_authentication_apply_authorization";
        __int16 v60 = 2082;
        CFIndex v61 = (CFIndex)backtrace_string;
        uint64_t v43 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (!v44) {
      goto LABEL_75;
    }
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_http_authentication_apply_authorization";
    int v40 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_74;
  }
  if (a4 != 8)
  {
    if (!a3 || (uint64_t v17 = a3, v18 = v17[2], v17, !v18))
    {
      __int16 v19 = a7 ? 256 : 0;
      *(_WORD *)(v9 + 1062) = *(_WORD *)(v9 + 1062) & 0xFEFF | v19;
      if (a4 != 4)
      {
        BOOL result = 1;
        if ((*(unsigned char *)(v9 + 198) & 1) == 0 && gLogDatapath)
        {
          BOOL v33 = __nwlog_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446722;
            char v59 = "nw_http_authentication_apply_authorization";
            __int16 v60 = 2082;
            CFIndex v61 = v9 + 114;
            __int16 v62 = 2080;
            int v63 = " ";
            _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scredential or username was NULL, resending the request without authentication", buf, 0x20u);
          }
          return 1;
        }
        return result;
      }
    }
  }
  _CFHTTPAuthenticationSetPreferredScheme();
  error.os_log_type_t domain = 0;
  *(void *)&error.CFStreamError error = 0;
  if (CFHTTPAuthenticationIsValid(a2, &error))
  {
    if (a4 == 8)
    {
      if ((a6 & 1) == 0)
      {
        nw_http_authentication_ask_pat_for_creds(a1, a8);
        return 1;
      }
      if (nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(v9 + 912), a2, a3))
      {
        os_log_type_t v32 = (__CFHTTPMessage **)(v9 + 912);
        goto LABEL_37;
      }
    }
    else
    {
      if (a4 == 4)
      {
        CFStringRef NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNegotiateHeaderForRequest();
        if (NegotiateHeaderForRequest)
        {
LABEL_14:
          v53[0] = MEMORY[0x1E4F143A8];
          v53[1] = 0x40000000;
          v53[2] = ___ZL42nw_http_authentication_apply_authorizationP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbbbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke;
          v53[3] = &__block_descriptor_tmp_84;
          v53[4] = v9;
          char v54 = a6;
          nw_utilities_get_c_string_from_cfstring(NegotiateHeaderForRequest, 0x201u, v53);
          if ((a4 & 0xFFFFFFFE) == 4 || !a5)
          {
LABEL_41:
            CFRelease(NegotiateHeaderForRequest);
            return 1;
          }
          uint64_t v21 = a3;
          if (v21)
          {
            __int16 v22 = v21;
            BOOL v23 = v21[3] == 0;

            if (!v23)
            {
              __int16 v24 = objc_alloc_init(NWConcrete_nw_authentication_credential_cache_entry);
              nw_authentication_credential_cache_entry_set_http_authentication(v24, a2);
              nw_authentication_credential_cache_entry_set_credential((uint64_t)v24, v22);
              nw_authentication_credential_cache_entry_set_for_proxy((uint64_t)v24, a6);
              uint64_t v25 = *(void *)(v9 + 704);
              if (v25 && *(void *)(v25 + 24) - *(void *)(v25 + 16) >= 0x319uLL)
              {
                char v26 = (char *)*(unsigned __int8 *)(v9 + 1061);
                *(unsigned char *)(v9 + 1061) = (_BYTE)v26 + 1;
                nw_array_set_object_at_index(v25, v24, v26);
                if (*(unsigned __int8 *)(v9 + 1061) >= 0x64u) {
                  *(unsigned char *)(v9 + 1061) = 0;
                }
              }
              else
              {
                nw_array_append(v25, v24);
              }
              if (v24) {
                os_release(v24);
              }
            }
            goto LABEL_41;
          }
          uint64_t v45 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          char v59 = "nw_authentication_credential_get_persistence";
          char v46 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v56 = 0;
          if (__nwlog_fault(v46, &type, &v56))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              char v47 = __nwlog_obj();
              os_log_type_t v48 = type;
              if (os_log_type_enabled(v47, type))
              {
                *(_DWORD *)int buf = 136446210;
                char v59 = "nw_authentication_credential_get_persistence";
                _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null credential", buf, 0xCu);
              }
            }
            else if (v56)
            {
              uint64_t v49 = (char *)__nw_create_backtrace_string();
              char v47 = __nwlog_obj();
              os_log_type_t v50 = type;
              BOOL v51 = os_log_type_enabled(v47, type);
              if (v49)
              {
                if (v51)
                {
                  *(_DWORD *)int buf = 136446466;
                  char v59 = "nw_authentication_credential_get_persistence";
                  __int16 v60 = 2082;
                  CFIndex v61 = (CFIndex)v49;
                  _os_log_impl(&dword_1830D4000, v47, v50, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v49);
                goto LABEL_95;
              }
              if (v51)
              {
                *(_DWORD *)int buf = 136446210;
                char v59 = "nw_authentication_credential_get_persistence";
                _os_log_impl(&dword_1830D4000, v47, v50, "%{public}s called with null credential, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              char v47 = __nwlog_obj();
              os_log_type_t v52 = type;
              if (os_log_type_enabled(v47, type))
              {
                *(_DWORD *)int buf = 136446210;
                char v59 = "nw_authentication_credential_get_persistence";
                _os_log_impl(&dword_1830D4000, v47, v52, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_95:
          if (v46) {
            free(v46);
          }
          goto LABEL_41;
        }
LABEL_45:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v36 = gLogObj;
        BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)int buf = 136446210;
          char v59 = "nw_http_authentication_apply_authorization";
          uint64_t v29 = "%{public}s Unable to find authorization";
          char v30 = v36;
          uint32_t v31 = 12;
          goto LABEL_47;
        }
        return result;
      }
      if (nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(v9 + 912), a2, a3))
      {
        if (a4 == 5)
        {
          CFStringRef NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNTLMHeaderForRequest();
          if (NegotiateHeaderForRequest) {
            goto LABEL_14;
          }
          goto LABEL_45;
        }
        os_log_type_t v32 = (__CFHTTPMessage **)(v9 + 912);
        if (!a6)
        {
          char v34 = *v32;
          CFStringRef v35 = @"Authorization";
LABEL_44:
          CFStringRef NegotiateHeaderForRequest = CFHTTPMessageCopyHeaderFieldValue(v34, v35);
          if (NegotiateHeaderForRequest) {
            goto LABEL_14;
          }
          goto LABEL_45;
        }
LABEL_37:
        char v34 = *v32;
        CFStringRef v35 = @"Proxy-Authorization";
        goto LABEL_44;
      }
    }
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v27 = gLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)int buf = 136446722;
    char v59 = "nw_http_authentication_apply_authorization";
    __int16 v60 = 2048;
    CFIndex v61 = error.domain;
    __int16 v62 = 1024;
    LODWORD(v63) = error.error;
    uint64_t v29 = "%{public}s _CFHTTPAuthenticationSetPreferredScheme failed [%ld:%d]";
    char v30 = v27;
    uint32_t v31 = 28;
LABEL_47:
    _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
    return 0;
  }
  return result;
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__57(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    CFStringRef v2 = *(const void **)(a1 + 40);
    if (v2) {
      CFRelease(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL43nw_http_authentication_ask_appsso_for_credsP11nw_protocolPK10__CFStringbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, CFTypeRef cf, void *a3)
{
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3802000000;
  v20[3] = __Block_byref_object_copy__85;
  v20[4] = __Block_byref_object_dispose__86;
  if (cf)
  {
    CFTypeRef v5 = CFRetain(cf);
    char v6 = v22 | 1;
  }
  else
  {
    CFTypeRef v5 = 0;
    char v6 = -1;
  }
  CFTypeRef v21 = v5;
  char v22 = v6;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3802000000;
  v17[3] = __Block_byref_object_copy__87;
  v17[4] = __Block_byref_object_dispose__88;
  if (a3)
  {
    uint64_t v7 = os_retain(a3);
    char v8 = v19 | 1;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = -1;
  }
  uint64_t object = v7;
  char v19 = v8;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v15 = *(_OWORD *)(a1 + 48);
  v11[2] = ___ZL43nw_http_authentication_ask_appsso_for_credsP11nw_protocolPK10__CFStringbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_89;
  v11[3] = &unk_1E523C3E8;
  uint64_t v13 = v20;
  uint64_t v14 = v17;
  char v10 = *(void **)(v15 + 832);
  char v16 = *(unsigned char *)(a1 + 64);
  long long v12 = v9;
  nw_queue_context_async(v10, v11);
  _Block_object_dispose(v17, 8);
  if ((v19 & 1) != 0 && object) {
    os_release(object);
  }
  _Block_object_dispose(v20, 8);
  if (v22)
  {
    if (v21) {
      CFRelease(v21);
    }
  }
}

uint64_t __Block_byref_object_copy__85(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__86(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    CFStringRef v2 = *(const void **)(a1 + 40);
    if (v2) {
      CFRelease(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__87(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    CFStringRef v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL43nw_http_authentication_ask_appsso_for_credsP11nw_protocolPK10__CFStringbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_89(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_plugin_retry_end_async(*(void *)(a1 + 64) + 344))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    CFStringRef v2 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(const char **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      int v23 = 136446978;
      __int16 v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
      __int16 v25 = 2114;
      char v26 = v3;
      __int16 v27 = 2112;
      uint64_t v28 = v4;
      __int16 v29 = 2112;
      uint64_t v30 = v5;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ handling AppSSO headers %@ error %@", (uint8_t *)&v23, 0x2Au);
    }
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(unsigned int *)(v6 + 1056) + 1;
    uint64_t v8 = v7 << 31 >> 31;
    *(_DWORD *)(v6 + 1056) = v7;
    if (v8 != v7 || v8 < 0)
    {
      if (gLogDatapath)
      {
        CFTypeRef v21 = __nwlog_obj();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = *(unsigned int *)(*(void *)(a1 + 64) + 1056);
          int v23 = 136446978;
          __int16 v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
          __int16 v25 = 2082;
          char v26 = "http_authentication->appsso_attempt_count";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v22;
          _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v23, 0x2Au);
        }
      }
      *(_DWORD *)(*(void *)(a1 + 64) + 1056) = -1;
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)
      && *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), (CFDictionaryApplierFunction)nw_http_authentication_apply_appsso_headers, *(void **)(a1 + 64));
      *(_DWORD *)(*(void *)(a1 + 64) + 1044) = 4;
      uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_23:
      v13();
      return;
    }
    int v9 = _CFHTTPAuthenticationAppSSOIsPerformDefaultHandlingError();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v10 = gLogObj;
    if (!v9)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(const char **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        int v23 = 136446978;
        __int16 v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
        __int16 v25 = 2114;
        char v26 = v14;
        __int16 v27 = 2112;
        uint64_t v28 = v15;
        __int16 v29 = 2112;
        uint64_t v30 = v16;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ AppSSO received headers %@ error %@ canceling", (uint8_t *)&v23, 0x2Au);
      }
      client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(*(void *)(a1 + 64) + 816), *(void *)(a1 + 64));
      if (client_metadata_in_parameters)
      {
        uint64_t v18 = client_metadata_in_parameters;
        nw_http_client_metadata_set_client_error(client_metadata_in_parameters, 3);
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        os_release(v18);
        return;
      }
      uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_23;
    }
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      id v11 = *(const char **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v23 = 136446466;
      __int16 v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
      __int16 v25 = 2114;
      char v26 = v11;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}@ AppSSO performing default handling", (uint8_t *)&v23, 0x16u);
    }
    *(_WORD *)(*(void *)(a1 + 64) + 1062) |= 0x20u;
    nw_http_authentication_handle_challenge(*(void *)(a1 + 72), *(_CFHTTPAuthentication **)(*(void *)(a1 + 64) + 848), *(void **)(*(void *)(a1 + 64) + 656), *(_DWORD *)(*(void *)(a1 + 64) + 1044), *(unsigned char *)(a1 + 80), *(void *)(a1 + 32));
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 64);
    if ((*(unsigned char *)(v12 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        char v19 = __nwlog_obj();
        BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
        uint64_t v12 = *(void *)(a1 + 64);
        if (v20)
        {
          int v23 = 136446722;
          __int16 v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
          __int16 v25 = 2082;
          char v26 = (const char *)(v12 + 114);
          __int16 v27 = 2080;
          uint64_t v28 = (uint64_t)" ";
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", (uint8_t *)&v23, 0x20u);
          uint64_t v12 = *(void *)(a1 + 64);
        }
      }
    }
    nw_http_authentication_destroy(v12);
  }
}

uint64_t nw_http_authentication_ask_pat_for_creds(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    parameters = (void *)nw_protocol_get_parameters(*(void *)(a1 + 40));
    uint64_t v54 = a2;
    if (parameters)
    {
      uint64_t v6 = os_retain(parameters);
      if (v6)
      {
        uint64_t v7 = v6;
        int v55 = (v6[101] >> 1) & 1;
LABEL_25:

        int is_third_party_web_content = nw_parameters_is_third_party_web_content(v7);
        CFStringRef v17 = CFURLCopyHostName(*(CFURLRef *)(v2 + 880));
        if (((is_third_party_web_content ^ 1 | v55) & 1) == 0
          && !_CFHTTPAuthenticationCheckOriginAllowedAsThirdParty())
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v23 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_ask_pat_for_creds";
            _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s Received PAT challenge for disallowed third party", buf, 0xCu);
          }
          client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(v2 + 816), v2);
          if (!client_metadata_in_parameters)
          {
            unsigned __int8 v26 = 1;
            (*(void (**)(uint64_t, void, uint64_t, void))(v54 + 16))(v54, 0, 1, 0);
            if (!v17) {
              goto LABEL_86;
            }
            goto LABEL_85;
          }
          __int16 v25 = client_metadata_in_parameters;
          nw_http_client_metadata_set_client_error(client_metadata_in_parameters, 2);
          unsigned __int8 v26 = 1;
          (*(void (**)(uint64_t, void, uint64_t, void))(v54 + 16))(v54, 0, 1, 0);
          os_release(v25);
LABEL_84:
          if (!v17) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }
        *(void *)int buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3802000000;
        CFIndex v61 = __Block_byref_object_copy__56;
        __int16 v62 = __Block_byref_object_dispose__57;
        CFStringRef v63 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)(v2 + 114), 0x8000100u);
        v64 |= 1u;
        _CFHTTPAuthenticationGetPATSchemes();
        CFTypeRef v18 = nw_parameters_copy_main_document_cfurl(v7);
        uint64_t v19 = *(void *)(a1 + 40);
        CFStringRef v53 = v17;
        os_log_type_t v52 = v18;
        if (v19)
        {
          BOOL v20 = nw_http_authentication_copy_protocol_metadata((nw_protocol *)a1);
          if (v20)
          {
            CFTypeRef v21 = v20;
            *(_DWORD *)(v19 + 1040) = nw_http_connection_metadata_get_version(v20);
            pat_timestamps_array = (void *)nw_http_connection_metadata_find_or_create_pat_timestamps_array(v21);
            os_release(v21);
            goto LABEL_70;
          }
LABEL_69:
          pat_timestamps_array = 0;
LABEL_70:
          dispatch_queue_t v39 = dispatch_queue_create("protocol_http_authentication", 0);
          nw_queue_context_target_dispatch_queue(*(void **)(v2 + 832), v39);
          *(void *)os_log_type_t type = 0;
          *(void *)&os_log_type_t type[8] = type;
          *(void *)&type[16] = 0x2000000000;
          char v59 = 0;
          nw_protocol_plugin_retry_begin_async(v2 + 344);
          int v40 = v7;
          if (v40) {
            goto LABEL_71;
          }
          BOOL v42 = __nwlog_obj();
          *(_DWORD *)os_log_type_t v65 = 136446210;
          os_log_type_t v66 = "nw_parameters_get_using_ephemeral_configuration";
          BOOL v51 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t v57 = OS_LOG_TYPE_ERROR;
          char v56 = 0;
          uint64_t v43 = (char *)v51;
          if (!__nwlog_fault(v51, &v57, &v56))
          {
LABEL_106:
            if (v43) {
              free(v43);
            }
LABEL_71:

            _CFHTTPAuthenticationGetPATAuthHeaders();
            if (*(unsigned char *)(*(void *)&type[8] + 24)) {
              unsigned __int8 v26 = 1;
            }
            else {
              unsigned __int8 v26 = 2;
            }
            _Block_object_dispose(type, 8);
            if (v39) {
              dispatch_release(v39);
            }
            CFStringRef v17 = v53;
            if (pat_timestamps_array) {
              os_release(pat_timestamps_array);
            }
            if (v52) {
              CFRelease(v52);
            }
            _Block_object_dispose(buf, 8);
            if ((v64 & 1) != 0 && v63)
            {
              CFRelease(v63);
              if (!v53)
              {
LABEL_86:
                if (v7) {
                  os_release(v7);
                }
                return v26;
              }
LABEL_85:
              CFRelease(v17);
              goto LABEL_86;
            }
            goto LABEL_84;
          }
          if (v57 == OS_LOG_TYPE_FAULT)
          {
            BOOL v44 = __nwlog_obj();
            os_log_type_t v48 = v57;
            if (os_log_type_enabled(v44, v57))
            {
              *(_DWORD *)os_log_type_t v65 = 136446210;
              os_log_type_t v66 = "nw_parameters_get_using_ephemeral_configuration";
              _os_log_impl(&dword_1830D4000, v44, v48, "%{public}s called with null parameters", v65, 0xCu);
            }
          }
          else
          {
            if (v56)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              uint64_t v49 = __nwlog_obj();
              os_log_type_t v47 = v57;
              BOOL v46 = os_log_type_enabled(v49, v57);
              if (backtrace_string)
              {
                if (v46)
                {
                  *(_DWORD *)os_log_type_t v65 = 136446466;
                  os_log_type_t v66 = "nw_parameters_get_using_ephemeral_configuration";
                  __int16 v67 = 2082;
                  v68 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v49, v47, "%{public}s called with null parameters, dumping backtrace:%{public}s", v65, 0x16u);
                }

                free(backtrace_string);
              }
              else
              {
                if (v46)
                {
                  *(_DWORD *)os_log_type_t v65 = 136446210;
                  os_log_type_t v66 = "nw_parameters_get_using_ephemeral_configuration";
                  _os_log_impl(&dword_1830D4000, v49, v47, "%{public}s called with null parameters, no backtrace", v65, 0xCu);
                }
              }
              goto LABEL_105;
            }
            BOOL v44 = __nwlog_obj();
            os_log_type_t v50 = v57;
            if (os_log_type_enabled(v44, v57))
            {
              *(_DWORD *)os_log_type_t v65 = 136446210;
              os_log_type_t v66 = "nw_parameters_get_using_ephemeral_configuration";
              _os_log_impl(&dword_1830D4000, v44, v50, "%{public}s called with null parameters, backtrace limit exceeded", v65, 0xCu);
            }
          }

LABEL_105:
          uint64_t v43 = (char *)v51;
          goto LABEL_106;
        }
        __nwlog_obj();
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        v65[0] = 16;
        os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, v65, &v57))
        {
          if (v65[0] == 17)
          {
            os_log_type_t v32 = __nwlog_obj();
            os_log_type_t v33 = v65[0];
            if (!os_log_type_enabled(v32, (os_log_type_t)v65[0])) {
              goto LABEL_67;
            }
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
            char v34 = "%{public}s called with null http_authentication";
            goto LABEL_66;
          }
          if (v57 == OS_LOG_TYPE_DEFAULT)
          {
            os_log_type_t v32 = __nwlog_obj();
            os_log_type_t v33 = v65[0];
            if (!os_log_type_enabled(v32, (os_log_type_t)v65[0])) {
              goto LABEL_67;
            }
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
            char v34 = "%{public}s called with null http_authentication, backtrace limit exceeded";
            goto LABEL_66;
          }
          uint64_t v37 = (char *)__nw_create_backtrace_string();
          os_log_type_t v32 = __nwlog_obj();
          os_log_type_t v33 = v65[0];
          BOOL v38 = os_log_type_enabled(v32, (os_log_type_t)v65[0]);
          if (v37)
          {
            if (v38)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v37;
              _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", type, 0x16u);
            }
            free(v37);
            goto LABEL_67;
          }
          if (v38)
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
            char v34 = "%{public}s called with null http_authentication, no backtrace";
LABEL_66:
            _os_log_impl(&dword_1830D4000, v32, v33, v34, type, 0xCu);
          }
        }
LABEL_67:
        if (v31) {
          free(v31);
        }
        goto LABEL_69;
      }
    }
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
    int v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    v65[0] = 0;
    if (__nwlog_fault(v9, type, v65))
    {
      if (type[0] == 17)
      {
        char v10 = __nwlog_obj();
        os_log_type_t v11 = type[0];
        if (os_log_type_enabled(v10, (os_log_type_t)type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v65[0])
      {
        uint64_t v12 = (char *)__nw_create_backtrace_string();
        char v10 = __nwlog_obj();
        os_log_type_t v13 = type[0];
        BOOL v14 = os_log_type_enabled(v10, (os_log_type_t)type[0]);
        if (v12)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v12;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v12);
          if (!v9) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v10 = __nwlog_obj();
        os_log_type_t v15 = type[0];
        if (os_log_type_enabled(v10, (os_log_type_t)type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v7 = 0;
      int v55 = 0;
      goto LABEL_25;
    }
LABEL_23:
    free(v9);
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_authentication_ask_pat_for_creds";
  __int16 v27 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v65[0] = 0;
  if (__nwlog_fault(v27, type, v65))
  {
    if (type[0] == 17)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v28, (os_log_type_t)type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_ask_pat_for_creds";
        uint64_t v30 = "%{public}s called with null http_authentication";
LABEL_60:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v65[0])
    {
      CFStringRef v35 = (char *)__nw_create_backtrace_string();
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      BOOL v36 = os_log_type_enabled(v28, (os_log_type_t)type[0]);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_ask_pat_for_creds";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v35;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        goto LABEL_61;
      }
      if (v36)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_ask_pat_for_creds";
        uint64_t v30 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_60;
      }
    }
    else
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v28, (os_log_type_t)type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_ask_pat_for_creds";
        uint64_t v30 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_60;
      }
    }
  }
LABEL_61:
  if (v27) {
    free(v27);
  }
  return 1;
}

void ___ZL42nw_http_authentication_apply_authorizationP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbbbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v3 = "Proxy-Authorization";
  }
  else {
    uint64_t v3 = "Authorization";
  }
  nw_http_fields_set_value_by_name(*(void **)(*(void *)(a1 + 32) + 944), (uint64_t)v3, a2);
}

void ___ZL40nw_http_authentication_ask_pat_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(void *a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_plugin_retry_end_async(a1[7] + 344))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(*(void *)(a1[5] + 8) + 40);
      *(_DWORD *)int buf = 136446978;
      CFTypeRef v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke";
      __int16 v19 = 2114;
      uint64_t v20 = v7;
      __int16 v21 = 2112;
      uint64_t v22 = (const char *)a2;
      __int16 v23 = 2112;
      uint64_t v24 = a3;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ received PAT headers %@ error %@", buf, 0x2Au);
    }
    if (!a2 || a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v10 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136446210;
        CFTypeRef v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke";
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s PAT default delivering response", buf, 0xCu);
      }
      (*(void (**)(void))(a1[4] + 16))();
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"Authorization");
      if (Value)
      {
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 0x40000000;
        v16[2] = ___ZL40nw_http_authentication_ask_pat_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_69;
        v16[3] = &__block_descriptor_tmp_70;
        v16[4] = a1[7];
        nw_utilities_get_c_string_from_cfstring(Value, 0x201u, v16);
        *(_DWORD *)(a1[7] + 1044) = 8;
        (*(void (**)(void))(a1[4] + 16))();
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446210;
          CFTypeRef v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke_2";
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Unable to find authorization", buf, 0xCu);
        }
        client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(a1[7] + 816), a1[7]);
        os_log_type_t v13 = client_metadata_in_parameters;
        if (client_metadata_in_parameters) {
          nw_http_client_metadata_set_client_error(client_metadata_in_parameters, 1);
        }
        (*(void (**)(void))(a1[4] + 16))();
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
        if (v13) {
          os_release(v13);
        }
      }
    }
  }
  else
  {
    uint64_t v9 = a1[7];
    if ((*(unsigned char *)(v9 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v14 = __nwlog_obj();
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
        uint64_t v9 = a1[7];
        if (v15)
        {
          *(_DWORD *)int buf = 136446722;
          CFTypeRef v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke";
          __int16 v19 = 2082;
          uint64_t v20 = v9 + 114;
          __int16 v21 = 2080;
          uint64_t v22 = " ";
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", buf, 0x20u);
          uint64_t v9 = a1[7];
        }
      }
    }
    nw_http_authentication_destroy(v9);
  }
}

void ___ZL40nw_http_authentication_ask_pat_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_69(uint64_t a1, uint64_t a2)
{
}

void ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_36(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ((*(_WORD *)(v3 + 1062) & 0x10) != 0) {
    uint64_t v4 = "Proxy-Authorization";
  }
  else {
    uint64_t v4 = "Authorization";
  }
  nw_http_fields_set_value_by_name(*(void **)(v3 + 944), (uint64_t)v4, a2);
}

void ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_plugin_retry_end_async(*(void *)(a1 + 40) + 344))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v2();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if ((*(unsigned char *)(v3 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v4 = __nwlog_obj();
        BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
        uint64_t v3 = *(void *)(a1 + 40);
        if (v5)
        {
          int v6 = 136446722;
          uint64_t v7 = "nw_http_authentication_handle_challenge_block_invoke_2";
          __int16 v8 = 2082;
          uint64_t v9 = v3 + 114;
          __int16 v10 = 2080;
          os_log_type_t v11 = " ";
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", (uint8_t *)&v6, 0x20u);
          uint64_t v3 = *(void *)(a1 + 40);
        }
      }
    }
    nw_http_authentication_destroy(v3);
  }
}

uint64_t nw::retained_ptr<nw_endpoint *>::operator=(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  if (v4)
  {
    BOOL v5 = *(void **)a1;
    if (*(void *)a1)
    {
      os_release(v5);
      char v4 = *(unsigned char *)(a1 + 8);
    }
  }
  *(void *)a1 = 0;
  *(void *)a1 = *a2;
  *(unsigned char *)(a1 + 8) = v4 | 1;
  *a2 = 0;
  return a1;
}

uint64_t nw_http_authentication_ask_authbroker_for_creds(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v20 = __nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
          __int16 v31 = 2082;
          os_log_type_t v32 = (char *)(v1 + 114);
          __int16 v33 = 2080;
          char v34 = " ";
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    uint64_t v2 = (void *)nw_authentication_challenge_copy_protection_space(*(void **)(v1 + 640));
    CFStringRef v3 = CFURLCopyHostName(*(CFURLRef *)(v1 + 896));
    *(_DWORD *)(v1 + 1048) = nw_authentication_protection_space_get_type(v2);
    char v4 = v2;
    BOOL v5 = v4;
    if (v4)
    {
      int v6 = v4[2];
LABEL_6:

      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0x201u);
      CFURLGetPortNumber(*(CFURLRef *)(v1 + 896));
      uint64_t v9 = (void *)CFURLProtectionSpaceCreate();
      CFStringRef v10 = CFStringCreateWithCString(v7, (const char *)(v1 + 114), 0x8000100u);
      nw_protocol_plugin_retry_begin_async(v1 + 344);
      _CFHTTPAuthenticationFetchProxyCredentialFromAuthBroker();
      if (v10) {
        CFRelease(v10);
      }
      if (v9) {
        os_release(v9);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v3) {
        CFRelease(v3);
      }
      if (v5) {
        os_release(v5);
      }
      return 2;
    }
    uint64_t v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_authentication_protection_space_get_realm";
    CFStringRef v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v17, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        CFTypeRef v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v30 = "nw_authentication_protection_space_get_realm";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protection_space", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        CFTypeRef v18 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v30 = "nw_authentication_protection_space_get_realm";
            __int16 v31 = 2082;
            os_log_type_t v32 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }
        if (v25)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v30 = "nw_authentication_protection_space_get_realm";
          _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        CFTypeRef v18 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v30 = "nw_authentication_protection_space_get_realm";
          _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_52:
    if (v17) {
      free(v17);
    }
    int v6 = 0;
    goto LABEL_6;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v12, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
        BOOL v15 = "%{public}s called with null http_authentication";
LABEL_45:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else if (v27)
    {
      __int16 v21 = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v22 = os_log_type_enabled(v13, type);
      if (v21)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
          __int16 v31 = 2082;
          os_log_type_t v32 = v21;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v21);
        goto LABEL_46;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
        BOOL v15 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_45;
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
        BOOL v15 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_45;
      }
    }
  }
LABEL_46:
  if (v12) {
    free(v12);
  }
  return 1;
}

void ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, CFTypeRef cf, const void *a3)
{
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3802000000;
  v14[3] = __Block_byref_object_copy__54;
  v14[4] = __Block_byref_object_dispose__55;
  if (cf)
  {
    CFTypeRef v5 = CFRetain(cf);
    char v6 = v16 | 1;
  }
  else
  {
    CFTypeRef v5 = 0;
    char v6 = -1;
  }
  CFTypeRef v15 = v5;
  char v16 = v6;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3802000000;
  v11[3] = __Block_byref_object_copy__56;
  void v11[4] = __Block_byref_object_dispose__57;
  if (a3)
  {
    CFTypeRef v7 = CFRetain(a3);
    char v8 = v13 | 1;
  }
  else
  {
    CFTypeRef v7 = 0;
    char v8 = -1;
  }
  CFTypeRef cfa = v7;
  char v13 = v8;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_58;
  v9[3] = &unk_1E523C2B8;
  v9[5] = v14;
  v9[6] = v11;
  v9[4] = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 40);
  nw_queue_context_async(*(void **)(v10 + 832), v9);
  _Block_object_dispose(v11, 8);
  if ((v13 & 1) != 0 && cfa) {
    CFRelease(cfa);
  }
  _Block_object_dispose(v14, 8);
  if (v16)
  {
    if (v15) {
      CFRelease(v15);
    }
  }
}

uint64_t nw_http_authentication_send_challenge(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    CFTypeRef v5 = gLogObj;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_send_challenge";
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s http authentication calling out to challenge handler", buf, 0xCu);
      }
      nw_authentication_challenge_set_attempt_count(*(void **)(v4 + 640), *(_DWORD *)(v4 + 1052));
      ++*(_DWORD *)(v4 + 1052);
      nw_protocol_plugin_retry_begin_async(v4 + 344);
      char v6 = *(NSObject **)(v4 + 768);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke;
      block[3] = &unk_1E523C3A0;
      block[5] = v4;
      block[6] = a1;
      block[4] = a2;
      dispatch_async(v6, block);
      return 2;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_http_authentication_send_challenge";
    char v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v8, &v18, &v17)) {
      goto LABEL_34;
    }
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v18;
      if (os_log_type_enabled(v9, v18))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_send_challenge";
        os_log_type_t v11 = "%{public}s called with null http_authentication";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v18;
      if (os_log_type_enabled(v9, v18))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_send_challenge";
        os_log_type_t v11 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = v18;
    BOOL v15 = os_log_type_enabled(v9, v18);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_send_challenge";
        os_log_type_t v11 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v15)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v20 = "nw_http_authentication_send_challenge";
      __int16 v21 = 2082;
      BOOL v22 = backtrace_string;
      os_log_type_t v14 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v20 = "nw_http_authentication_send_challenge";
  char v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v8, &v18, &v17)) {
    goto LABEL_34;
  }
  if (v18 != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v18;
      if (os_log_type_enabled(v9, v18))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_send_challenge";
        os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = v18;
    BOOL v13 = os_log_type_enabled(v9, v18);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_send_challenge";
        os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v20 = "nw_http_authentication_send_challenge";
      __int16 v21 = 2082;
      BOOL v22 = backtrace_string;
      os_log_type_t v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v9, v10, v14, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = v18;
  if (os_log_type_enabled(v9, v18))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_http_authentication_send_challenge";
    os_log_type_t v11 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
  }
LABEL_34:
  if (v8) {
    free(v8);
  }
  return 1;
}

void ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2(uint64_t a1, void *a2, char a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v6 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = "nw_http_authentication_send_challenge_block_invoke_2";
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s http authentication returned from challenge handler", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v14 = 0x3802000000;
  BOOL v15 = __Block_byref_object_copy__74;
  char v16 = __Block_byref_object_dispose__75;
  if (a2)
  {
    CFTypeRef v7 = os_retain(a2);
    char v8 = v18 | 1;
  }
  else
  {
    CFTypeRef v7 = 0;
    char v8 = -1;
  }
  uint64_t object = v7;
  char v18 = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_76;
  v10[3] = &unk_1E523C350;
  char v12 = a3;
  long long v11 = *(_OWORD *)(a1 + 40);
  uint64_t v9 = *(void **)(v11 + 832);
  v10[4] = *(void *)(a1 + 32);
  v10[5] = &buf;
  nw_queue_context_async_if_needed(v9, v10);
  _Block_object_dispose(&buf, 8);
  if (v18)
  {
    if (object) {
      os_release(object);
    }
  }
}

uint64_t __Block_byref_object_copy__74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__75(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_76(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    int v28 = 136446210;
    os_log_type_t v29 = "nw_http_authentication_send_challenge_block_invoke";
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s http authentication returned from challenge handler async", (uint8_t *)&v28, 0xCu);
  }
  if (nw_protocol_plugin_retry_end_async(*(void *)(a1 + 48) + 344))
  {
    *(_WORD *)(*(void *)(a1 + 48) + 1062) = *(_WORD *)(*(void *)(a1 + 48) + 1062) & 0xFFFE | *(unsigned __int8 *)(a1 + 64);
    int type = nw_authentication_challenge_get_type(*(void **)(*(void *)(a1 + 48) + 640));
    uint64_t v4 = *(void *)(a1 + 48);
    CFTypeRef v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v5)
    {
      if (*(void *)(v4 + 640))
      {
        char v6 = v5;
        BOOL v7 = v6[2] == 0;

        uint64_t v4 = *(void *)(a1 + 48);
        if (!v7)
        {
          char v8 = *(void **)(v4 + 688);
          if (v8)
          {
            nw_authentication_credential_storage_set_default_credential(v8, *(void **)(v4 + 640), *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
            uint64_t v4 = *(void *)(a1 + 48);
          }
        }
      }
    }
    __int16 v9 = *(_WORD *)(v4 + 1062);
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v11 = *(void *)(v10 + 40);
    *(void *)(v10 + 40) = 0;
    uint64_t v12 = *(void *)(a1 + 48);
    if ((v9 & 0x10) != 0)
    {
      char v23 = *(unsigned char *)(v12 + 680);
      if (v23)
      {
        os_log_type_t v24 = *(void **)(v12 + 672);
        if (v24)
        {
          os_release(v24);
          char v23 = *(unsigned char *)(v12 + 680);
        }
      }
      *(void *)(v12 + 672) = v11;
      *(unsigned char *)(v12 + 680) = v23 | 1;
      uint64_t v25 = *(void *)(a1 + 48);
      *(_DWORD *)(v25 + 1048) = type;
      uint64_t v16 = *(void *)(a1 + 56);
      char v17 = *(_CFHTTPAuthentication **)(v25 + 864);
      char v18 = *(void **)(v25 + 672);
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = type;
      int v21 = 1;
    }
    else
    {
      char v13 = *(unsigned char *)(v12 + 664);
      if (v13)
      {
        uint64_t v14 = *(void **)(v12 + 656);
        if (v14)
        {
          os_release(v14);
          char v13 = *(unsigned char *)(v12 + 664);
        }
      }
      *(void *)(v12 + 656) = v11;
      *(unsigned char *)(v12 + 664) = v13 | 1;
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)(v15 + 1044) = type;
      uint64_t v16 = *(void *)(a1 + 56);
      char v17 = *(_CFHTTPAuthentication **)(v15 + 848);
      char v18 = *(void **)(v15 + 656);
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = type;
      int v21 = 0;
    }
    nw_http_authentication_apply_authorization(v16, v17, v18, v20, 1, v21, 1, v19);
    *(_WORD *)(*(void *)(a1 + 48) + 1062) &= ~0x200u;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 48);
    if ((*(unsigned char *)(v22 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v26 = __nwlog_obj();
        BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG);
        uint64_t v22 = *(void *)(a1 + 48);
        if (v27)
        {
          int v28 = 136446722;
          os_log_type_t v29 = "nw_http_authentication_send_challenge_block_invoke";
          __int16 v30 = 2082;
          uint64_t v31 = v22 + 114;
          __int16 v32 = 2080;
          __int16 v33 = " ";
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", (uint8_t *)&v28, 0x20u);
          uint64_t v22 = *(void *)(a1 + 48);
        }
      }
    }
    nw_http_authentication_destroy(v22);
  }
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(const void **)(a1 + 40);
    if (v2) {
      CFRelease(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_58(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_plugin_retry_end_async(a1[7] + 344))
  {
    uint64_t v2 = *(void *)(a1[5] + 8);
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3 && *(void *)(*(void *)(a1[6] + 8) + 40))
    {
      *(void *)(v2 + 40) = 0;
      uint64_t v4 = a1[7];
      char v5 = *(unsigned char *)(v4 + 984);
      if (v5)
      {
        char v6 = *(const void **)(v4 + 976);
        if (v6)
        {
          CFRelease(v6);
          char v5 = *(unsigned char *)(v4 + 984);
        }
      }
      *(void *)(v4 + 976) = v3;
      *(unsigned char *)(v4 + 984) = v5 | 1;
      CFStringRef v7 = *(const __CFString **)(*(void *)(a1[6] + 8) + 40);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      v16[2] = ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_59;
      v16[3] = &__block_descriptor_tmp_60;
      v16[4] = a1[7];
      nw_utilities_get_c_string_from_cfstring(v7, 0x201u, v16);
      *(_DWORD *)(a1[7] + 1044) = 4;
      char v8 = *(void (**)(void))(a1[4] + 16);
LABEL_18:
      v8();
      return;
    }
    if (!nw_authentication_challenge_try_next_protection_space(*(void **)(a1[7] + 640)))
    {
      if ((*(unsigned char *)(a1[7] + 198) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v14 = __nwlog_obj();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = a1[7] + 114;
            *(_DWORD *)long long buf = 136446722;
            char v18 = "nw_http_authentication_ask_accounts_for_creds_block_invoke_2";
            __int16 v19 = 2082;
            uint64_t v20 = v15;
            __int16 v21 = 2080;
            uint64_t v22 = " ";
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAccounts failed to return a credential, ran out of schemes to try", buf, 0x20u);
          }
        }
      }
      char v8 = *(void (**)(void))(a1[4] + 16);
      goto LABEL_18;
    }
    uint64_t v10 = a1[8];
    uint64_t v11 = a1[4];
    nw_http_authentication_send_challenge(v10, v11);
  }
  else
  {
    uint64_t v9 = a1[7];
    if ((*(unsigned char *)(v9 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v12 = __nwlog_obj();
        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
        uint64_t v9 = a1[7];
        if (v13)
        {
          *(_DWORD *)long long buf = 136446722;
          char v18 = "nw_http_authentication_ask_accounts_for_creds_block_invoke";
          __int16 v19 = 2082;
          uint64_t v20 = v9 + 114;
          __int16 v21 = 2080;
          uint64_t v22 = " ";
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", buf, 0x20u);
          uint64_t v9 = a1[7];
        }
      }
    }
    nw_http_authentication_destroy(v9);
  }
}

void ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_59(uint64_t a1, uint64_t a2)
{
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(v2 + 832);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2;
  v5[3] = &unk_1E523C248;
  uint64_t v4 = a1[6];
  v5[6] = a2;
  v5[7] = v4;
  v5[4] = a1[4];
  void v5[5] = v2;
  nw_queue_context_async_if_needed(v3, v5);
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2(uint64_t *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!nw_protocol_plugin_retry_end_async(a1[5] + 344))
  {
    uint64_t v7 = a1[5];
    if ((*(unsigned char *)(v7 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        char v17 = __nwlog_obj();
        BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
        uint64_t v7 = a1[5];
        if (v18)
        {
          *(_DWORD *)long long buf = 136446722;
          int v28 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke_2";
          __int16 v29 = 2082;
          __int16 v30 = (const char *)(v7 + 114);
          __int16 v31 = 2080;
          uint64_t v32 = (uint64_t)" ";
          _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", buf, 0x20u);
          uint64_t v7 = a1[5];
        }
      }
    }
    nw_http_authentication_destroy(v7);
    return;
  }
  uint64_t v2 = a1[5];
  if (!a1[6])
  {
    if (!(*(unsigned char *)(v2 + 198) & 1 | (gLogDatapath == 0)))
    {
      __int16 v21 = __nwlog_obj();
      BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
      uint64_t v2 = a1[5];
      if (v22)
      {
        *(_DWORD *)long long buf = 136446722;
        int v28 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke_3";
        __int16 v29 = 2082;
        __int16 v30 = (const char *)(v2 + 114);
        __int16 v31 = 2080;
        uint64_t v32 = (uint64_t)" ";
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sauthbroker didn't return a cred, sending challenge", buf, 0x20u);
        uint64_t v2 = a1[5];
      }
    }
    *(_WORD *)(v2 + 1062) |= 0x80u;
    nw_http_authentication_send_challenge(a1[7], a1[4]);
    return;
  }
  if (!(*(unsigned char *)(v2 + 198) & 1 | (gLogDatapath == 0)))
  {
    __int16 v19 = __nwlog_obj();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
    uint64_t v2 = a1[5];
    if (v20)
    {
      *(_DWORD *)long long buf = 136446722;
      int v28 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke";
      __int16 v29 = 2082;
      __int16 v30 = (const char *)(v2 + 114);
      __int16 v31 = 2080;
      uint64_t v32 = (uint64_t)" ";
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sapplying credential authbroker provided", buf, 0x20u);
      uint64_t v2 = a1[5];
    }
  }
  uint64_t v3 = *(unsigned int *)(v2 + 1052) + 1;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(v2 + 1052) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      uint64_t v23 = __nwlog_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *(unsigned int *)(a1[5] + 1052);
        *(_DWORD *)long long buf = 136446978;
        int v28 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke";
        __int16 v29 = 2082;
        __int16 v30 = "http_authentication->auth_challenge_count";
        __int16 v31 = 2048;
        uint64_t v32 = 1;
        __int16 v33 = 2048;
        uint64_t v34 = v24;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
      }
    }
    *(_DWORD *)(a1[5] + 1052) = -1;
    char v5 = (const void *)a1[6];
    if (v5) {
      goto LABEL_7;
    }
  }
  else
  {
    char v5 = (const void *)a1[6];
    if (v5)
    {
LABEL_7:
      CFTypeRef v6 = CFRetain(v5);
      goto LABEL_16;
    }
  }
  CFTypeRef v6 = 0;
LABEL_16:
  uint64_t v8 = a1[5];
  char v9 = *(unsigned char *)(v8 + 1000);
  if (v9)
  {
    uint64_t v10 = *(const void **)(v8 + 992);
    if (v10)
    {
      CFRelease(v10);
      char v9 = *(unsigned char *)(v8 + 1000);
    }
  }
  *(void *)(v8 + 992) = v6;
  *(unsigned char *)(v8 + 1000) = v9 | 1;
  uint64_t v11 = -[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
  uint64_t v12 = a1[5];
  char v13 = *(unsigned char *)(v12 + 680);
  if (v13)
  {
    uint64_t v14 = *(void **)(v12 + 672);
    if (v14)
    {
      os_release(v14);
      char v13 = *(unsigned char *)(v12 + 680);
    }
  }
  *(void *)(v12 + 672) = v11;
  *(unsigned char *)(v12 + 680) = v13 | 1;
  CFStringRef Username = (const __CFString *)CFURLCredentialGetUsername();
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 0x40000000;
  v26[2] = ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_46;
  v26[3] = &__block_descriptor_tmp_47_14177;
  v26[4] = a1[5];
  nw_utilities_get_c_string_from_cfstring(Username, 0x201u, v26);
  CFStringRef v16 = (const __CFString *)CFURLCredentialCopyPassword();
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  v25[2] = ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2_48;
  v25[3] = &__block_descriptor_tmp_49_14178;
  v25[4] = a1[5];
  nw_utilities_get_c_string_from_cfstring(v16, 0x201u, v25);
  nw_authentication_credential_set_persistence(*(void **)(a1[5] + 672), 1);
  if (nw_http_authentication_apply_authorization(a1[7], *(_CFHTTPAuthentication **)(a1[5] + 864), *(void **)(a1[5] + 672), *(_DWORD *)(a1[5] + 1048), 1, 1, 0, a1[4]))
  {
    (*(void (**)(uint64_t, void, void, BOOL))(a1[4] + 16))(a1[4], *(void *)(a1[5] + 960), 0, (*(_DWORD *)(a1[5] + 1048) & 0xFFFFFFFE) == 4);
    if (!v16) {
      return;
    }
  }
  else
  {
    (*(void (**)(void))(a1[4] + 16))();
    if (!v16) {
      return;
    }
  }
  CFRelease(v16);
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_46(uint64_t a1, const char *a2)
{
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2_48(uint64_t a1, const char *a2)
{
}

BOOL ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, void *a2)
{
  http_authentication = (_CFHTTPAuthentication *)nw_authentication_credential_cache_entry_get_http_authentication(a2);
  int IsValid = CFHTTPAuthenticationIsValid(http_authentication, 0);
  if (http_authentication) {
    os_release(http_authentication);
  }
  return IsValid == 0;
}

uint64_t __Block_byref_object_copy__14188(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__14189(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

BOOL ___ZL45nw_http_authentication_copy_protocol_metadataP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  BOOL is_http_connection = nw_protocol_metadata_is_http_connection(a3);
  if (is_http_connection)
  {
    if (v3) {
      uint64_t v3 = os_retain(v3);
    }
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    char v7 = *(unsigned char *)(v6 + 48);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(unsigned char *)(v6 + 48);
      }
    }
    *(void *)(v6 + 40) = v3;
    *(unsigned char *)(v6 + 48) = v7 | 1;
  }
  return !is_http_connection;
}

void ___ZL45nw_protocol_http_authentication_get_callbacksv_block_invoke()
{
  nw_protocol_http_authentication_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F6A390 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F6A3D0 = (uint64_t)nw_protocol_common_get_input_frames;
  qword_1E8F6A3D8 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F6A3E0 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F6A3F0 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F6A3F8 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F6A408 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F6A400 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F6A448 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F6A450 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F6A398 = (uint64_t)nw_protocol_common_connect;
  qword_1E8F6A3A8 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F6A3A0 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F6A3B0 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F6A3C0 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F6A3C8 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F6A438 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F6A440 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F6A488 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F6A3B8 = (uint64_t)nw_protocol_common_error;
  qword_1E8F6A480 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F6A478 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F6A460 = (uint64_t)nw_protocol_common_copy_info;
  qword_1E8F6A430 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F6A458 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F6A410 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F6A418 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F6A420 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F6A428 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F6A3E8 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F6A388 = (uint64_t)nw_protocol_http_authentication_remove_input_handler;
}

uint64_t nw_protocol_http_authentication_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      v15[2] = ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v15[3] = &__block_descriptor_tmp_121;
      v15[4] = handle;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      v13[2] = ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v13[3] = &__block_descriptor_tmp_122;
      char v14 = a3;
      v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
    char v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &v17, &v16)) {
      goto LABEL_32;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
        uint64_t v8 = "%{public}s called with null http_authentication";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v16)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
        uint64_t v8 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
        uint64_t v8 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
      __int16 v20 = 2082;
      __int16 v21 = backtrace_string;
      uint64_t v11 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
  char v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v5, &v17, &v16)) {
    goto LABEL_32;
  }
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
        uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
        uint64_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
      __int16 v20 = 2082;
      __int16 v21 = backtrace_string;
      uint64_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = v17;
  if (os_log_type_enabled(v6, v17))
  {
    *(_DWORD *)long long buf = 136446210;
    __int16 v19 = "nw_protocol_http_authentication_remove_input_handler";
    uint64_t v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5) {
    free(v5);
  }
  return 0;
}

void ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      BOOL v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(void *)(v2 + 328) = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(v3 + 464);
  if (v4)
  {
    char v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      char v4 = *(unsigned char *)(v3 + 464);
    }
  }
  *(void *)(v3 + 456) = 0;
  *(unsigned char *)(v3 + 464) = v4 | 1;
  char v6 = *(unsigned char *)(v3 + 512);
  if (v6)
  {
    os_log_type_t v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      char v6 = *(unsigned char *)(v3 + 512);
    }
  }
  *(void *)(v3 + 504) = 0;
  *(unsigned char *)(v3 + 512) = v6 | 1;
}

void ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    nw_http_authentication_destroy(*(void *)(a1 + 32));
  }
}

double __nw_protocol_http_authentication_identifier_block_invoke()
{
  strcpy((char *)&nw_protocol_http_authentication_identifier::protocol_identifier, "http_authentication");
  *(void *)&double result = 0x100000005;
  qword_1E8F6A50C = 0x100000005;
  return result;
}

void sub_183732780(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183732804(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18373285C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1837328B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1837329EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183733988(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_183733BC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183733D50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183733EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183734084(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183734210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183734330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183734410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_construct_composite_bonjour_name(char *fullName, unint64_t a2, char *service, char *regtype, char *domain, uint64_t a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!fullName)
  {
    char v16 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32)) {
      goto LABEL_97;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
          __int16 v20 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
          __int16 v20 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      if (!v26) {
        goto LABEL_74;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
      __int16 v36 = 2082;
      uint64_t v37 = backtrace_string;
      BOOL v27 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_96;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    __int16 v20 = "%{public}s called with null buffer";
LABEL_95:
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
    goto LABEL_96;
  }
  unint64_t v6 = a2;
  if (!a2)
  {
    __int16 v21 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32)) {
      goto LABEL_97;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
          __int16 v20 = "%{public}s called with null buffer_len, backtrace limit exceeded";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v28 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
          __int16 v20 = "%{public}s called with null buffer_len, no backtrace";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      if (!v28) {
        goto LABEL_74;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
      __int16 v36 = 2082;
      uint64_t v37 = backtrace_string;
      BOOL v27 = "%{public}s called with null buffer_len, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_96;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    __int16 v20 = "%{public}s called with null buffer_len";
    goto LABEL_95;
  }
  if (!service)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32)) {
      goto LABEL_97;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
          __int16 v20 = "%{public}s called with null name, backtrace limit exceeded";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v29 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
          __int16 v20 = "%{public}s called with null name, no backtrace";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      if (!v29) {
        goto LABEL_74;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
      __int16 v36 = 2082;
      uint64_t v37 = backtrace_string;
      BOOL v27 = "%{public}s called with null name, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_96;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    __int16 v20 = "%{public}s called with null name";
    goto LABEL_95;
  }
  if (!regtype)
  {
    uint64_t v23 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32)) {
      goto LABEL_97;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_96;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
      __int16 v20 = "%{public}s called with null type";
      goto LABEL_95;
    }
    if (!v32)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
        __int16 v20 = "%{public}s called with null type, backtrace limit exceeded";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v30 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
        __int16 v20 = "%{public}s called with null type, no backtrace";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    if (!v30) {
      goto LABEL_74;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    __int16 v36 = 2082;
    uint64_t v37 = backtrace_string;
    BOOL v27 = "%{public}s called with null type, dumping backtrace:%{public}s";
LABEL_73:
    _os_log_impl(&dword_1830D4000, v18, v19, v27, buf, 0x16u);
    goto LABEL_74;
  }
  if (!domain)
  {
    uint64_t v24 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32)) {
      goto LABEL_97;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
        __int16 v20 = "%{public}s called with null domain";
        goto LABEL_95;
      }
LABEL_96:

LABEL_97:
      if (v17) {
        free(v17);
      }
      return 0;
    }
    if (!v32)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
        __int16 v20 = "%{public}s called with null domain, backtrace limit exceeded";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v31 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
        __int16 v20 = "%{public}s called with null domain, no backtrace";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    if (v31)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
      __int16 v36 = 2082;
      uint64_t v37 = backtrace_string;
      BOOL v27 = "%{public}s called with null domain, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
LABEL_74:

    free(backtrace_string);
    goto LABEL_97;
  }
  os_log_type_t v7 = fullName;
  *fullName = 0;
  if (a2 <= 0x401)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
      int v9 = "%{public}s Insufficient buffer size";
LABEL_12:
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0xCu);
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if (DNSServiceConstructFullName(fullName, service, regtype, domain))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v35 = "nw_endpoint_construct_composite_bonjour_name";
      int v9 = "%{public}s Failed to construct composite";
      goto LABEL_12;
    }
LABEL_13:

    return 0;
  }
  if (a6)
  {
    BOOL v12 = v7;
    unint64_t v13 = v6;
    while (*v12)
    {
      ++v12;
      if (!--v13) {
        goto LABEL_23;
      }
    }
    if (v13 >= 2) {
      *v12++ = 64;
    }
    *BOOL v12 = 0;
LABEL_23:
    while (*v7)
    {
      ++v7;
      if (!--v6) {
        return 1;
      }
    }
    if (v6 < 2)
    {
LABEL_31:
      char *v7 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      while (1)
      {
        int v15 = *(unsigned __int8 *)(a6 + v14);
        v7[v14] = v15;
        if (!v15) {
          break;
        }
        --v6;
        ++v14;
        if (v6 <= 1)
        {
          v7 += v14;
          goto LABEL_31;
        }
      }
    }
  }
  return 1;
}

const char *__cdecl nw_endpoint_get_bonjour_service_name(nw_endpoint_t endpoint)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = endpoint;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v26 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
    BOOL v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
            __int16 v39 = 2082;
            *(void *)int v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v24 = (char *)v27;
    goto LABEL_23;
  }
  uint64_t v3 = v1;
  int v4 = [v3 type];

  if (v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    os_log_type_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)long long buf = 136446466;
    uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
    __int16 v39 = 1024;
    *(_DWORD *)int v40 = v8;
    LODWORD(v34) = 18;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          BOOL v12 = v7;
          int v13 = [v12 type];

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        uint64_t v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            os_log_type_t v17 = v7;
            int v18 = [v17 type];

            *(_DWORD *)long long buf = 136446722;
            uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
            __int16 v39 = 1024;
            *(_DWORD *)int v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          uint64_t v22 = v7;
          int v23 = [v22 type];

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          __int16 v20 = v7;
          int v21 = [v20 type];

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_name";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      Class isa = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  Class isa = (const char *)v3[29].isa;
LABEL_25:

  return isa;
}

void sub_183735534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *__cdecl nw_endpoint_get_bonjour_service_type(nw_endpoint_t endpoint)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = endpoint;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v26 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
    BOOL v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
            __int16 v39 = 2082;
            *(void *)int v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v24 = (char *)v27;
    goto LABEL_23;
  }
  uint64_t v3 = v1;
  int v4 = [v3 type];

  if (v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    os_log_type_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)long long buf = 136446466;
    uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
    __int16 v39 = 1024;
    *(_DWORD *)int v40 = v8;
    LODWORD(v34) = 18;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          BOOL v12 = v7;
          int v13 = [v12 type];

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        uint64_t v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            os_log_type_t v17 = v7;
            int v18 = [v17 type];

            *(_DWORD *)long long buf = 136446722;
            uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
            __int16 v39 = 1024;
            *(_DWORD *)int v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          uint64_t v22 = v7;
          int v23 = [v22 type];

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          __int16 v20 = v7;
          int v21 = [v20 type];

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_service_type";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      Class isa = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  Class isa = (const char *)v3[30].isa;
LABEL_25:

  return isa;
}

void sub_183735B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_bonjour_fullname(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v26 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
    BOOL v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
            __int16 v39 = 2082;
            *(void *)int v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v24 = (char *)v27;
    goto LABEL_23;
  }
  uint64_t v3 = v1;
  int v4 = [v3 type];

  if (v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    os_log_type_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)long long buf = 136446466;
    uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
    __int16 v39 = 1024;
    *(_DWORD *)int v40 = v8;
    LODWORD(v34) = 18;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          BOOL v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        uint64_t v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            os_log_type_t v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)long long buf = 136446722;
            uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
            __int16 v39 = 1024;
            *(_DWORD *)int v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          uint64_t v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          __int16 v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_bonjour_fullname";
          __int16 v39 = 1024;
          *(_DWORD *)int v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[32];
LABEL_25:

  return v5;
}

void sub_1837361BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_ids_info_create(const char *a1, const char *a2, const char *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "nw_ids_info_create";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v45.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v45, &type)) {
      goto LABEL_62;
    }
    if (LOBYTE(v45.receiver) == 17)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, receiver, "%{public}s called with null session_id", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v39 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v39, "%{public}s called with null session_id, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v31 = (os_log_type_t)v45.receiver;
    BOOL v32 = os_log_type_enabled(v16, (os_log_type_t)v45.receiver);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s called with null session_id, no backtrace", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (v32)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v47 = "nw_ids_info_create";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s called with null session_id, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  if (!a2)
  {
    int v18 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "nw_ids_info_create";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v45.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v45, &type)) {
      goto LABEL_62;
    }
    if (LOBYTE(v45.receiver) == 17)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v19 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null pseudonym", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v40 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v40, "%{public}s called with null pseudonym, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v33 = (os_log_type_t)v45.receiver;
    BOOL v34 = os_log_type_enabled(v16, (os_log_type_t)v45.receiver);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v33, "%{public}s called with null pseudonym, no backtrace", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (v34)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v47 = "nw_ids_info_create";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v33, "%{public}s called with null pseudonym, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  os_log_type_t v7 = v6;
  if (!a3)
  {
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "nw_ids_info_create";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v45.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v45, &type)) {
      goto LABEL_62;
    }
    if (LOBYTE(v45.receiver) == 17)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v20 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v20, "%{public}s called with null push_token", buf, 0xCu);
      }
LABEL_85:

      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v41 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v41, "%{public}s called with null push_token, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v35 = (os_log_type_t)v45.receiver;
    BOOL v36 = os_log_type_enabled(v16, (os_log_type_t)v45.receiver);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_1830D4000, v16, v35, "%{public}s called with null push_token, no backtrace", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (v36)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v47 = "nw_ids_info_create";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v35, "%{public}s called with null push_token, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_55:

    goto LABEL_61;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446978;
    os_log_type_t v47 = "nw_ids_info_create";
    __int16 v48 = 2080;
    uint64_t v49 = (void *)a1;
    __int16 v50 = 2080;
    BOOL v51 = a2;
    __int16 v52 = 2080;
    CFStringRef v53 = a3;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s Creating IDS info with sessionId='%s', pseudonym='%s', push_token='%s'", buf, 0x2Au);
  }

  int v8 = [NWConcrete_nw_ids_info alloc];
  if (!v8) {
    goto LABEL_64;
  }
  v45.os_log_type_t receiver = v8;
  v45.super_class = (Class)NWConcrete_nw_ids_info;
  int v9 = objc_msgSendSuper2(&v45, sel_init);
  if (!v9)
  {
    int v21 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if ((__nwlog_fault(v15, &type, &v43) & 1) == 0) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s [super init] failed", buf, 0xCu);
      }
LABEL_88:

LABEL_62:
      if (v15) {
        free(v15);
      }
LABEL_64:
      int v9 = 0;
      goto LABEL_12;
    }
    if (!v43)
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
        _os_log_impl(&dword_1830D4000, v22, v42, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v22 = __nwlog_obj();
    os_log_type_t v37 = type;
    BOOL v38 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
        _os_log_impl(&dword_1830D4000, v22, v37, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v38)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v22, v37, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_61:
    free(backtrace_string);
    goto LABEL_62;
  }
  BOOL v10 = strdup(a1);
  if (!v10)
  {
    uint64_t v24 = __nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "strict_strdup";
    uint64_t v25 = (void *)_os_log_send_and_compose_impl();

    id result = (id)__nwlog_abort((uint64_t)v25);
    if (result) {
      goto LABEL_89;
    }
    free(v25);
  }
  v9[1] = v10;
  os_log_type_t v11 = strdup(a2);
  if (!v11)
  {
    BOOL v26 = __nwlog_obj();
    os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "strict_strdup";
    BOOL v27 = (void *)_os_log_send_and_compose_impl();

    id result = (id)__nwlog_abort((uint64_t)v27);
    if (result) {
      goto LABEL_89;
    }
    free(v27);
  }
  v9[2] = v11;
  BOOL v12 = strdup(a3);
  if (!v12)
  {
    BOOL v28 = __nwlog_obj();
    os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "strict_strdup";
    os_log_type_t v29 = (void *)_os_log_send_and_compose_impl();

    id result = (id)__nwlog_abort((uint64_t)v29);
    if (!result)
    {
      free(v29);
      goto LABEL_11;
    }
LABEL_89:
    __break(1u);
    return result;
  }
LABEL_11:
  v9[3] = v12;
LABEL_12:

  return v9;
}

void sub_183736E14(_Unwind_Exception *exception_object)
{
}

uint64_t nw_ids_info_get_session_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 1);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_ids_info_get_session_id";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_session_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null info", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_ids_info_get_session_id";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_session_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_session_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null info, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_ids_info_get_pseudonym(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_ids_info_get_pseudonym";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_pseudonym";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null info", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_ids_info_get_pseudonym";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_pseudonym";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_pseudonym";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null info, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_ids_info_get_push_token(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 3);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_ids_info_get_push_token";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_push_token";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null info", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_ids_info_get_push_token";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_push_token";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_ids_info_get_push_token";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null info, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __Block_byref_object_copy__14781(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14782(uint64_t a1)
{
}

uint64_t nw_advertise_descriptor_copy_description(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    int v3 = *((_DWORD *)v1 + 2);
    if (v3 == 2)
    {
      os_log_type_t v8 = v1[7];
      if (!v8) {
        os_log_type_t v8 = "<NULL>";
      }
      asprintf((char **)buf, "%s.%s scope:%x route:%x", v1[6], v8, *((_DWORD *)v1 + 16), *((_DWORD *)v1 + 17));
    }
    else if (v3 == 1)
    {
      int v4 = "<NULL>";
      uint64_t v5 = v1[2];
      if (!v5) {
        uint64_t v5 = "<NULL>";
      }
      id v6 = v1[5];
      if (v1[4]) {
        int v4 = v1[4];
      }
      if (v6) {
        id v6 = (const char *)*((void *)v6 + 2);
      }
      if ((_BYTE)v1[9]) {
        os_log_type_t v7 = " noAutoRename";
      }
      else {
        os_log_type_t v7 = "";
      }
      asprintf((char **)buf, "%s.%s.%s txtLength:%zu%s", v5, v1[3], v4, (size_t)v6, v7);
    }
    uint64_t v9 = *(void *)buf;
    goto LABEL_18;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_advertise_descriptor_copy_description";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_advertise_descriptor_copy_description";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_advertise_descriptor_copy_description";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_advertise_descriptor_copy_description";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_advertise_descriptor_copy_description";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v12) {
    free(v12);
  }
  uint64_t v9 = 0;
LABEL_18:

  return v9;
}

void sub_183738E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_advertise_descriptor_t nw_advertise_descriptor_create_bonjour_service(const char *name, const char *type, const char *domain)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!type)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v37 = "nw_advertise_descriptor_create_bonjour_service";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v35.receiver) = 16;
    os_log_type_t typea = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, &v35, &typea)) {
      goto LABEL_54;
    }
    if (LOBYTE(v35.receiver) == 17)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v35.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v35.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v37 = "nw_advertise_descriptor_create_bonjour_service";
        _os_log_impl(&dword_1830D4000, v15, receiver, "%{public}s called with null type", buf, 0xCu);
      }
    }
    else if (typea)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v27 = (os_log_type_t)v35.receiver;
      BOOL v28 = os_log_type_enabled(v15, (os_log_type_t)v35.receiver);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v37 = "nw_advertise_descriptor_create_bonjour_service";
          __int16 v38 = 2082;
          os_log_type_t v39 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_41;
      }
      if (v28)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v37 = "nw_advertise_descriptor_create_bonjour_service";
        _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s called with null type, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v31 = (os_log_type_t)v35.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v35.receiver))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v37 = "nw_advertise_descriptor_create_bonjour_service";
        _os_log_impl(&dword_1830D4000, v15, v31, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_54;
  }
  id v6 = [NWConcrete_nw_advertise_descriptor alloc];
  if (!v6) {
    return 0;
  }
  v35.os_log_type_t receiver = v6;
  v35.super_class = (Class)NWConcrete_nw_advertise_descriptor;
  os_log_type_t v7 = objc_msgSendSuper2(&v35, sel_init);
  os_log_type_t v8 = v7;
  if (!v7)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t typea = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if ((__nwlog_fault(v14, &typea, &v33) & 1) == 0) {
      goto LABEL_54;
    }
    if (typea == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = typea;
      if (os_log_type_enabled(v18, typea))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s [super init] failed", buf, 0xCu);
      }
LABEL_53:

LABEL_54:
      if (v14) {
        free(v14);
      }
      return 0;
    }
    if (!v33)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v32 = typea;
      if (os_log_type_enabled(v18, typea))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_1830D4000, v18, v32, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v18 = __nwlog_obj();
    os_log_type_t v29 = typea;
    BOOL v30 = os_log_type_enabled(v18, typea);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v30)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
      __int16 v38 = 2082;
      os_log_type_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_41:
    free(backtrace_string);
    goto LABEL_54;
  }
  *((_DWORD *)v7 + 2) = 1;
  if (name)
  {
    uint64_t v9 = strdup(name);
    if (!v9)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v37 = "strict_strdup";
      os_log_type_t v23 = (void *)_os_log_send_and_compose_impl();

      nw_advertise_descriptor_t result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v23);
      if (result) {
        goto LABEL_57;
      }
      free(v23);
    }
    v8[2].Class isa = (Class)v9;
  }
  os_log_type_t v10 = strdup(type);
  if (!v10)
  {
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v37 = "strict_strdup";
    int v21 = (void *)_os_log_send_and_compose_impl();

    nw_advertise_descriptor_t result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v21);
    if (result) {
      goto LABEL_57;
    }
    free(v21);
  }
  v8[3].Class isa = (Class)v10;
  if (v10[strlen(v10) - 1] == 46) {
    v10[strlen(type) - 1] = 0;
  }
  if (!domain) {
    goto LABEL_13;
  }
  BOOL v11 = strdup(domain);
  if (v11)
  {
LABEL_12:
    v8[4].Class isa = (Class)v11;
LABEL_13:
    LOBYTE(v8[9].isa) &= ~1u;
    return v8;
  }
  uint64_t v24 = __nwlog_obj();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v37 = "strict_strdup";
  uint64_t v25 = (void *)_os_log_send_and_compose_impl();

  nw_advertise_descriptor_t result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v25);
  if (!result)
  {
    free(v25);
    goto LABEL_12;
  }
LABEL_57:
  __break(1u);
  return result;
}

void sub_183739608(_Unwind_Exception *exception_object)
{
}

id nw_advertise_descriptor_create_application_service_with_bundle_id(const char *a1, const char *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v12, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        char v13 = __nwlog_obj();
        os_log_type_t receiver = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v13, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v13, receiver, "%{public}s called with null application_service_name", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v24 = (os_log_type_t)v41.receiver;
        BOOL v25 = os_log_type_enabled(v13, (os_log_type_t)v41.receiver);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)long long buf = 136446466;
            char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
            __int16 v44 = 2082;
            objc_super v45 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null application_service_name, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }
        if (v25)
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null application_service_name, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v13 = __nwlog_obj();
        os_log_type_t v29 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v13, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null application_service_name, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_47:
    if (v12) {
      free(v12);
    }
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  int v4 = [NWConcrete_nw_advertise_descriptor alloc];
  if (!v4) {
    goto LABEL_55;
  }
  v41.os_log_type_t receiver = v4;
  v41.super_class = (Class)NWConcrete_nw_advertise_descriptor;
  uint64_t v5 = objc_msgSendSuper2(&v41, sel_init);
  id v6 = v5;
  if (!v5)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v16, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v39)
      {
        BOOL v26 = (char *)__nw_create_backtrace_string();
        BOOL v17 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v17, type);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)long long buf = 136446466;
            char v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
            __int16 v44 = 2082;
            objc_super v45 = v26;
            _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v26);
          goto LABEL_53;
        }
        if (v28)
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
          _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v17 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
          _os_log_impl(&dword_1830D4000, v17, v30, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_53:
    if (v16) {
      free(v16);
    }
LABEL_55:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v31 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v32, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v33 = (id)gLogObj;
        os_log_type_t v34 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v33, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s [nw_advertise_descriptor_t init] failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        objc_super v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v33 = (id)gLogObj;
        os_log_type_t v36 = (os_log_type_t)v41.receiver;
        BOOL v37 = os_log_type_enabled(v33, (os_log_type_t)v41.receiver);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)long long buf = 136446466;
            char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
            __int16 v44 = 2082;
            objc_super v45 = v35;
            _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s [nw_advertise_descriptor_t init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_71;
        }
        if (v37)
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s [nw_advertise_descriptor_t init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v33 = (id)gLogObj;
        os_log_type_t v38 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v33, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)long long buf = 136446210;
          char v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s [nw_advertise_descriptor_t init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_71:
    if (v32) {
      free(v32);
    }
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  *((_DWORD *)v5 + 2) = 2;
  os_log_type_t v7 = strdup(a1);
  if (!v7)
  {
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446210;
    char v43 = "strict_strdup";
    os_log_type_t v20 = (void *)_os_log_send_and_compose_impl();

    id result = (id)__nwlog_abort((uint64_t)v20);
    if (result) {
      goto LABEL_74;
    }
    free(v20);
    v6[6] = 0;
    if (!a2) {
      goto LABEL_8;
    }
LABEL_6:
    os_log_type_t v8 = strdup(a2);
    if (v8)
    {
LABEL_7:
      v6[7] = v8;
      goto LABEL_8;
    }
    int v21 = __nwlog_obj();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446210;
    char v43 = "strict_strdup";
    __int16 v22 = (void *)_os_log_send_and_compose_impl();

    id result = (id)__nwlog_abort((uint64_t)v22);
    if (!result)
    {
      free(v22);
      goto LABEL_7;
    }
LABEL_74:
    __break(1u);
    return result;
  }
  v6[6] = v7;
  if (a2) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v9 = v6;
LABEL_9:

LABEL_10:

  return v9;
}

void sub_183739ED8(_Unwind_Exception *exception_object)
{
}

uint64_t nw_advertise_descriptor_get_invitation_scope(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
        __int16 v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      uint64_t v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (v1[2] != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Advertise descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
          __int16 v23 = 2082;
          os_log_type_t v24 = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Advertise descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Advertise descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_scope";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Advertise descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  uint64_t v3 = v1[16];
LABEL_24:

  return v3;
}

uint64_t nw_advertise_descriptor_get_invitation_route(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
        __int16 v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      uint64_t v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (v1[2] != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Advertise descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
          __int16 v23 = 2082;
          os_log_type_t v24 = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Advertise descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Advertise descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_get_invitation_route";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Advertise descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  uint64_t v3 = v1[17];
LABEL_24:

  return v3;
}

BOOL nw_advertise_descriptor_is_equal(void *a1, void *a2, char a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  BOOL is_equal = v5 == v6;
  if (v5 == v6 || !v5 || !v6) {
    goto LABEL_34;
  }
  os_log_type_t v9 = (const char *)*((void *)v5 + 2);
  BOOL v10 = (const char *)*((void *)v7 + 2);
  if (v9 && v10)
  {
    if (strcmp(v9, v10)) {
      goto LABEL_33;
    }
  }
  else if (v9 != v10)
  {
    goto LABEL_33;
  }
  os_log_type_t v11 = (const char *)*((void *)v5 + 3);
  os_log_type_t v12 = (const char *)*((void *)v7 + 3);
  if (v11 && v12)
  {
    if (strcmp(v11, v12)) {
      goto LABEL_33;
    }
  }
  else if (v11 != v12)
  {
    goto LABEL_33;
  }
  char v13 = (const char *)*((void *)v5 + 4);
  os_log_type_t v14 = (const char *)*((void *)v7 + 4);
  if (v13 && v14)
  {
    if (strcmp(v13, v14)) {
      goto LABEL_33;
    }
  }
  else if (v13 != v14)
  {
    goto LABEL_33;
  }
  os_log_type_t v15 = (const char *)*((void *)v5 + 6);
  os_log_type_t v16 = (const char *)*((void *)v7 + 6);
  if (v15 && v16)
  {
    if (strcmp(v15, v16)) {
      goto LABEL_33;
    }
  }
  else if (v15 != v16)
  {
    goto LABEL_33;
  }
  BOOL v17 = (const char *)*((void *)v5 + 7);
  os_log_type_t v18 = (const char *)*((void *)v7 + 7);
  if (!v17 || !v18)
  {
    if (v17 == v18) {
      goto LABEL_29;
    }
LABEL_33:
    BOOL is_equal = 0;
    goto LABEL_34;
  }
  if (strcmp(v17, v18)) {
    goto LABEL_33;
  }
LABEL_29:
  if (*((_DWORD *)v5 + 16) != *((_DWORD *)v7 + 16)) {
    goto LABEL_33;
  }
  int v19 = *((_DWORD *)v5 + 17);
  int v20 = *((_DWORD *)v7 + 17);
  BOOL is_equal = v19 == v20;
  if (v19 == v20 && (a3 & 1) == 0) {
    BOOL is_equal = nw_txt_record_is_equal(*((nw_txt_record_t *)v5 + 5), *((nw_txt_record_t *)v7 + 5));
  }
LABEL_34:

  return is_equal;
}

void sub_18373AA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_advertise_descriptor_get_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[2];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_advertise_descriptor_get_type";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_advertise_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_advertise_descriptor_get_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_advertise_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_advertise_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_advertise_descriptor_get_bonjour_name(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 1)
    {
      uint64_t v3 = *((void *)v1 + 2);
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_bonjour_name";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_bonjour_name";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_bonjour_name";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_bonjour_name";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_4:

  return v3;
}

uint64_t nw_advertise_descriptor_get_bonjour_type(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 1)
    {
      uint64_t v3 = *((void *)v1 + 3);
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_bonjour_type";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_bonjour_type";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_bonjour_type";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_bonjour_type";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_4:

  return v3;
}

uint64_t nw_advertise_descriptor_get_bonjour_domain(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 1)
    {
      uint64_t v3 = *((void *)v1 + 4);
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_bonjour_domain";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_bonjour_domain";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_bonjour_domain";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_bonjour_domain";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_4:

  return v3;
}

void nw_advertise_descriptor_set_no_auto_rename(nw_advertise_descriptor_t advertise_descriptor, BOOL no_auto_rename)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_advertise_descriptor_t v3 = advertise_descriptor;
  nw_advertise_descriptor_t v4 = v3;
  if (!v3)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (LODWORD(v3[1].isa) == 1)
  {
    LOBYTE(v3[9].isa) = (uint64_t)v3[9].isa & 0xFE | no_auto_rename;
    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  id v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v22 = "nw_advertise_descriptor_set_no_auto_rename";
    __int16 v23 = 2082;
    uint64_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

BOOL nw_advertise_descriptor_get_no_auto_rename(nw_advertise_descriptor_t advertise_descriptor)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  nw_advertise_descriptor_t v1 = advertise_descriptor;
  nw_advertise_descriptor_t v2 = v1;
  if (v1)
  {
    if (LODWORD(v1[1].isa) == 1)
    {
      BOOL v3 = (uint64_t)v1[9].isa & 1;
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_no_auto_rename";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_no_auto_rename";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v21 = "nw_advertise_descriptor_get_no_auto_rename";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          int v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        int v21 = "nw_advertise_descriptor_get_no_auto_rename";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_4:

  return v3;
}

void nw_advertise_descriptor_set_txt_record(nw_advertise_descriptor_t advertise_descriptor, const void *txt_record, size_t txt_length)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_advertise_descriptor_t v5 = advertise_descriptor;
  p_Class isa = &v5->isa;
  if (!v5)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v26 = "nw_advertise_descriptor_set_txt_record";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v26 = "nw_advertise_descriptor_set_txt_record";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v26 = "nw_advertise_descriptor_set_txt_record";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_43:
        free(v10);
        goto LABEL_8;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v26 = "nw_advertise_descriptor_set_txt_record";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v26 = "nw_advertise_descriptor_set_txt_record";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (LODWORD(v5[1].isa) == 1)
  {
    if (txt_record && txt_length)
    {
      nw_txt_record_t v7 = nw_txt_record_create_with_bytes((const uint8_t *)txt_record, txt_length);
      Class isa = (Class)p_isa[5];
      p_isa[5] = v7;
    }
    else
    {
      Class isa = v5[5].isa;
      v5[5].Class isa = 0;
    }

    goto LABEL_8;
  }
  BOOL v13 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v26 = "nw_advertise_descriptor_set_txt_record";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  char v18 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v20)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v26 = "nw_advertise_descriptor_set_txt_record";
    __int16 v27 = 2082;
    BOOL v28 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_43;
  }
LABEL_8:
}

void sub_18373C950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_advertise_descriptor_get_txt_record(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_advertise_descriptor_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v16)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_28;
  }
  if (*((_DWORD *)v3 + 2) != 1)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s invalid advertise descriptor type", buf, 0xCu);
      }
LABEL_40:

LABEL_41:
      if (v9) {
        free(v9);
      }
      goto LABEL_43;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v18)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v25 = "nw_advertise_descriptor_get_txt_record";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_28:

    free(backtrace_string);
    goto LABEL_41;
  }
  if (a2)
  {
    uint64_t v5 = *((void *)v3 + 5);
    if (v5) {
      uint64_t v5 = *(void *)(v5 + 16);
    }
    *a2 = v5;
  }
  uint64_t v6 = *((void *)v3 + 5);
  if (!v6)
  {
LABEL_43:
    uint64_t v7 = 0;
    goto LABEL_44;
  }
  uint64_t v7 = *(void *)(v6 + 8);
LABEL_44:

  return v7;
}

void nw_advertise_descriptor_set_txt_record_object(nw_advertise_descriptor_t advertise_descriptor, nw_txt_record_t txt_record)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_advertise_descriptor_t v3 = advertise_descriptor;
  nw_advertise_descriptor_t v4 = txt_record;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v22 = "nw_advertise_descriptor_set_txt_record_object";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v22 = "nw_advertise_descriptor_set_txt_record_object";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          char v22 = "nw_advertise_descriptor_set_txt_record_object";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        char v22 = "nw_advertise_descriptor_set_txt_record_object";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v22 = "nw_advertise_descriptor_set_txt_record_object";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (LODWORD(v3[1].isa) == 1)
  {
    objc_storeStrong((id *)&v3[5].isa, txt_record);
    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v22 = "nw_advertise_descriptor_set_txt_record_object";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      char v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      char v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)long long buf = 136446210;
      char v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)long long buf = 136446466;
    char v22 = "nw_advertise_descriptor_set_txt_record_object";
    __int16 v23 = 2082;
    uint64_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

nw_txt_record_t nw_advertise_descriptor_copy_txt_record_object(nw_advertise_descriptor_t advertise_descriptor)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  nw_advertise_descriptor_t v1 = advertise_descriptor;
  nw_advertise_descriptor_t v2 = v1;
  if (v1)
  {
    if (LODWORD(v1[1].isa) == 1)
    {
      nw_advertise_descriptor_t v3 = v1[5].isa;
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  nw_advertise_descriptor_t v3 = 0;
LABEL_4:

  return v3;
}

nw_advertise_descriptor_t nw_advertise_descriptor_create_application_service(const char *application_service_name)
{
  if (nw_utilities_get_self_name::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_11_44681);
  }
  nw_advertise_descriptor_create_application_service_with_bundle_id(application_service_name, (const char *)nw_utilities_get_self_name::name);
  return (nw_advertise_descriptor_t)objc_claimAutoreleasedReturnValue();
}

const char *__cdecl nw_advertise_descriptor_get_application_service_name(nw_advertise_descriptor_t advertise_descriptor)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  nw_advertise_descriptor_t v1 = advertise_descriptor;
  nw_advertise_descriptor_t v2 = v1;
  if (v1)
  {
    if (LODWORD(v1[1].isa) == 2)
    {
      Class isa = (const char *)v1[6].isa;
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  Class isa = 0;
LABEL_4:

  return isa;
}

uint64_t nw_advertise_descriptor_get_bundle_id(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_advertise_descriptor_t v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 2)
    {
      uint64_t v3 = *((void *)v1 + 7);
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_4:

  return v3;
}

void nw_advertise_descriptor_set_invitation(void *a1, int a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_advertise_descriptor_set_invitation";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v24 = "nw_advertise_descriptor_set_invitation";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (!v21)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v24 = "nw_advertise_descriptor_set_invitation";
          _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v24 = "nw_advertise_descriptor_set_invitation";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v24 = "nw_advertise_descriptor_set_invitation";
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v8) {
      goto LABEL_23;
    }
LABEL_22:
    free(v8);
    goto LABEL_23;
  }
  if (v5[2] == 2)
  {
    v5[16] = a2;
    v5[17] = a3;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  uint64_t v24 = "nw_advertise_descriptor_set_invitation";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_advertise_descriptor_set_invitation";
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s Advertise descriptor not of type application service", buf, 0xCu);
    }
LABEL_20:

    goto LABEL_21;
  }
  if (!v21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_advertise_descriptor_set_invitation";
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s Advertise descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_20;
  }
  os_log_type_t v11 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = (id)gLogObj;
  os_log_type_t v12 = type;
  BOOL v13 = os_log_type_enabled(v9, type);
  if (!v11)
  {
    if (v13)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_advertise_descriptor_set_invitation";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Advertise descriptor not of type application service, no backtrace", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (v13)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v24 = "nw_advertise_descriptor_set_invitation";
    __int16 v25 = 2082;
    __int16 v26 = v11;
    _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Advertise descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v11);
  if (v8) {
    goto LABEL_22;
  }
LABEL_23:
}

_DWORD *nw_error_create_posix_error(int a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_advertise_descriptor_t v2 = [NWConcrete_nw_error alloc];
    return -[NWConcrete_nw_error initWithDomain:code:](v2, 1, a1);
  }
  nw_advertise_descriptor_t v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v14 = "nw_error_create_posix_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_error_create_posix_error";
        os_log_type_t v8 = "%{public}s called with null error_code";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v14 = "nw_error_create_posix_error";
            __int16 v15 = 2082;
            os_log_type_t v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null error_code, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v10) {
          goto LABEL_19;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_error_create_posix_error";
        os_log_type_t v8 = "%{public}s called with null error_code, no backtrace";
        goto LABEL_18;
      }
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_error_create_posix_error";
        os_log_type_t v8 = "%{public}s called with null error_code, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  return 0;
}

_DWORD *nw_error_create_tls_error(int a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_advertise_descriptor_t v2 = [NWConcrete_nw_error alloc];
    return -[NWConcrete_nw_error initWithDomain:code:](v2, 3, a1);
  }
  nw_advertise_descriptor_t v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v14 = "nw_error_create_tls_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_error_create_tls_error";
        os_log_type_t v8 = "%{public}s called with null error_code";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v14 = "nw_error_create_tls_error";
            __int16 v15 = 2082;
            os_log_type_t v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null error_code, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v10) {
          goto LABEL_19;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_error_create_tls_error";
        os_log_type_t v8 = "%{public}s called with null error_code, no backtrace";
        goto LABEL_18;
      }
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_error_create_tls_error";
        os_log_type_t v8 = "%{public}s called with null error_code, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  return 0;
}

_DWORD *nw_error_create_error_with_inferred_domain(int a1)
{
  if (a1 >> 8 == 16776959) {
    return nw_error_create_dns_error(a1);
  }
  if ((a1 + 9899) > 0x63) {
    return nw_error_create_posix_error(a1);
  }
  return nw_error_create_tls_error(a1);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_error_t v1 = error;
  nw_error_t v2 = v1;
  if (v1)
  {
    nw_error_domain_t isa = (nw_error_domain_t)v1[1].isa;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_error_get_error_domain";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_error_get_error_domain";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null error", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_error_get_error_domain";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_error_get_error_domain";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_error_get_error_domain";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  nw_error_domain_t isa = nw_error_domain_invalid;
LABEL_3:

  return isa;
}

uint64_t nw_error_is_equal(void *a1, void *a2)
{
  uint64_t v3 = a1;
  nw_advertise_descriptor_t v4 = a2;
  if (v3 && v4)
  {
    if (v3[2] != v4[2])
    {
      uint64_t v6 = 0;
      goto LABEL_10;
    }
    BOOL v5 = v3[3] == v4[3];
  }
  else
  {
    BOOL v5 = v3 == v4;
  }
  uint64_t v6 = v5;
LABEL_10:

  return v6;
}

void *nw_nexus_create_with_options(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v59[13] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v57 = "nw_nexus_create_with_options";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v22, &type, &v54)) {
      goto LABEL_95;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = gLogObj;
      os_log_type_t v24 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v25 = "%{public}s called with null name";
    }
    else
    {
      if (v54)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v30 = gLogObj;
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v57 = "nw_nexus_create_with_options";
            __int16 v58 = 2082;
            *(void *)char v59 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
LABEL_95:
          if (!v22) {
            return 0;
          }
LABEL_96:
          free(v22);
          return 0;
        }
        if (!v32) {
          goto LABEL_95;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v57 = "nw_nexus_create_with_options";
        __int16 v25 = "%{public}s called with null name, no backtrace";
        objc_super v45 = v30;
        os_log_type_t v46 = v31;
        goto LABEL_53;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = gLogObj;
      os_log_type_t v24 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v25 = "%{public}s called with null name, backtrace limit exceeded";
    }
    objc_super v45 = v23;
    os_log_type_t v46 = v24;
LABEL_53:
    uint32_t v47 = 12;
LABEL_94:
    _os_log_impl(&dword_1830D4000, v45, v46, v25, buf, v47);
    goto LABEL_95;
  }
  uint64_t v8 = os_nexus_controller_create();
  if (!v8)
  {
    int v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v57 = "nw_nexus_create_with_options";
    __int16 v58 = 1024;
    *(_DWORD *)char v59 = v26;
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v22, &type, &v54)) {
      goto LABEL_95;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = gLogObj;
      os_log_type_t v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v26;
      __int16 v25 = "%{public}s os_nexus_controller_create() %{darwin.errno}d";
LABEL_93:
      objc_super v45 = v27;
      os_log_type_t v46 = v28;
      uint32_t v47 = 18;
      goto LABEL_94;
    }
    if (!v54)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = gLogObj;
      os_log_type_t v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v26;
      __int16 v25 = "%{public}s os_nexus_controller_create() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_93;
    }
    BOOL v37 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v27 = gLogObj;
    os_log_type_t v28 = type;
    BOOL v38 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v37)
    {
      if (!v38) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v26;
      __int16 v25 = "%{public}s os_nexus_controller_create() %{darwin.errno}d, no backtrace";
      goto LABEL_93;
    }
    if (v38)
    {
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v26;
      v59[2] = 2082;
      *(void *)&v59[3] = v37;
      char v39 = "%{public}s os_nexus_controller_create() %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_63:
      _os_log_impl(&dword_1830D4000, v27, v28, v39, buf, 0x1Cu);
    }
LABEL_64:
    free(v37);
    if (!v22) {
      return 0;
    }
    goto LABEL_96;
  }
  uint64_t v9 = v8;
  objc_opt_class();
  uint64_t v10 = _os_object_alloc();
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v57 = "nw_nexus_create_with_options";
    char v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v33, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v34 = gLogObj;
        os_log_type_t v35 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v57 = "nw_nexus_create_with_options";
          os_log_type_t v36 = "%{public}s nw_nexus_obj_alloc failed";
LABEL_74:
          BOOL v51 = v34;
          os_log_type_t v52 = v35;
LABEL_75:
          _os_log_impl(&dword_1830D4000, v51, v52, v36, buf, 0xCu);
        }
      }
      else if (v54)
      {
        objc_super v41 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v42 = gLogObj;
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v41)
        {
          if (v44)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v57 = "nw_nexus_create_with_options";
            __int16 v58 = 2082;
            *(void *)char v59 = v41;
            _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s nw_nexus_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v41);
          goto LABEL_76;
        }
        if (v44)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v57 = "nw_nexus_create_with_options";
          os_log_type_t v36 = "%{public}s nw_nexus_obj_alloc failed, no backtrace";
          BOOL v51 = v42;
          os_log_type_t v52 = v43;
          goto LABEL_75;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v34 = gLogObj;
        os_log_type_t v35 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v57 = "nw_nexus_create_with_options";
          os_log_type_t v36 = "%{public}s nw_nexus_obj_alloc failed, backtrace limit exceeded";
          goto LABEL_74;
        }
      }
    }
LABEL_76:
    if (v33) {
      free(v33);
    }
    os_nexus_controller_destroy();
    return 0;
  }
  BOOL v11 = (void *)v10;
  uint64_t v12 = 0;
  uint64_t v13 = v10 + 24;
  unint64_t v14 = 64;
  while (1)
  {
    int v15 = *(unsigned __int8 *)(a1 + v12);
    *(unsigned char *)(v13 + v12) = v15;
    if (!v15) {
      break;
    }
    --v14;
    ++v12;
    if (v14 <= 1)
    {
      *(unsigned char *)(v13 + v12) = 0;
      break;
    }
  }
  *(void *)(v10 + 16) = v9;
  if (!os_nexus_attr_create())
  {
    int v40 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v57 = "nw_nexus_create_with_options";
    __int16 v58 = 1024;
    *(_DWORD *)char v59 = v40;
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v22, &type, &v54)) {
      goto LABEL_95;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = gLogObj;
      os_log_type_t v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v40;
      __int16 v25 = "%{public}s os_nexus_attr_create() %{darwin.errno}d";
      goto LABEL_93;
    }
    if (!v54)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v40;
      __int16 v25 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_93;
    }
    BOOL v37 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v27 = gLogObj;
    os_log_type_t v28 = type;
    BOOL v50 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v37)
    {
      if (!v50) {
        goto LABEL_95;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v40;
      __int16 v25 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, no backtrace";
      goto LABEL_93;
    }
    if (v50)
    {
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v57 = "nw_nexus_create_with_options";
      __int16 v58 = 1024;
      *(_DWORD *)char v59 = v40;
      v59[2] = 2082;
      *(void *)&v59[3] = v37;
      char v39 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_63;
    }
    goto LABEL_64;
  }
  if (a2) {
    os_nexus_attr_set();
  }
  if (a3) {
    os_nexus_attr_set();
  }
  if (a4) {
    os_nexus_attr_set();
  }
  os_nexus_attr_set();
  int v16 = os_nexus_controller_register_provider();
  os_nexus_attr_destroy();
  if (v16)
  {
    int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v57 = "nw_nexus_create_with_options";
    __int16 v58 = 1024;
    *(_DWORD *)char v59 = v17;
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v18, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v57 = "nw_nexus_create_with_options";
          __int16 v58 = 1024;
          *(_DWORD *)char v59 = v17;
          char v21 = "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d";
LABEL_87:
          _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0x12u);
        }
      }
      else if (v54)
      {
        __int16 v48 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = gLogObj;
        os_log_type_t v20 = type;
        BOOL v49 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)long long buf = 136446722;
            os_log_type_t v57 = "nw_nexus_create_with_options";
            __int16 v58 = 1024;
            *(_DWORD *)char v59 = v17;
            v59[2] = 2082;
            *(void *)&v59[3] = v48;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(v48);
          goto LABEL_88;
        }
        if (v49)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v57 = "nw_nexus_create_with_options";
          __int16 v58 = 1024;
          *(_DWORD *)char v59 = v17;
          char v21 = "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d, no backtrace";
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v57 = "nw_nexus_create_with_options";
          __int16 v58 = 1024;
          *(_DWORD *)char v59 = v17;
          char v21 = "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_87;
        }
      }
    }
LABEL_88:
    if (v18) {
      free(v18);
    }
    os_release(v11);
    return 0;
  }
  return v11;
}

void *nw_nexus_create(uint64_t a1)
{
  return nw_nexus_create_with_options(a1, 0, 0, 0);
}

void nw_nexus_remove_instance()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (os_nexus_controller_free_provider_instance())
  {
    int v0 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    uint64_t v10 = "nw_nexus_remove_instance";
    __int16 v11 = 1024;
    int v12 = v0;
    nw_error_t v1 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v7 = 0;
    if (!__nwlog_fault(v1, &type, &v7)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_error_t v2 = gLogObj;
      os_log_type_t v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v10 = "nw_nexus_remove_instance";
      __int16 v11 = 1024;
      int v12 = v0;
      nw_advertise_descriptor_t v4 = "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d";
    }
    else if (v7)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_error_t v2 = gLogObj;
      os_log_type_t v3 = type;
      BOOL v6 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v6)
        {
          *(_DWORD *)long long buf = 136446722;
          uint64_t v10 = "nw_nexus_remove_instance";
          __int16 v11 = 1024;
          int v12 = v0;
          __int16 v13 = 2082;
          unint64_t v14 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_16;
      }
      if (!v6)
      {
LABEL_16:
        if (v1) {
          free(v1);
        }
        return;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v10 = "nw_nexus_remove_instance";
      __int16 v11 = 1024;
      int v12 = v0;
      nw_advertise_descriptor_t v4 = "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_error_t v2 = gLogObj;
      os_log_type_t v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v10 = "nw_nexus_remove_instance";
      __int16 v11 = 1024;
      int v12 = v0;
      nw_advertise_descriptor_t v4 = "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v2, v3, v4, buf, 0x12u);
    goto LABEL_16;
  }
}

BOOL nw_nexus_create_channel_to_new_instance_and_context(uint64_t a1, _DWORD *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  memset(uu, 0, sizeof(uu));
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
    nw_advertise_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v34) = 16;
    out[0] = 0;
    if (!__nwlog_fault(v4, &v34, out)) {
      goto LABEL_79;
    }
    if (v34 == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = v34;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v34)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      char v7 = "%{public}s called with null nexus";
    }
    else
    {
      if (out[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v14 = gLogObj;
        os_log_type_t v15 = v34;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v34);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null nexus, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_79;
        }
        if (!v16) {
          goto LABEL_79;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
        char v7 = "%{public}s called with null nexus, no backtrace";
        char v21 = v14;
        os_log_type_t v22 = v15;
LABEL_44:
        uint32_t v23 = 12;
LABEL_78:
        _os_log_impl(&dword_1830D4000, v21, v22, v7, buf, v23);
        goto LABEL_79;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = v34;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v34)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      char v7 = "%{public}s called with null nexus, backtrace limit exceeded";
    }
    char v21 = v8;
    os_log_type_t v22 = v9;
    goto LABEL_44;
  }
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  long long v34 = 0uLL;
  if (os_nexus_controller_alloc_provider_instance())
  {
    int v3 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v3;
    nw_advertise_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v3;
      char v7 = "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d";
      goto LABEL_77;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v3;
      char v7 = "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_77;
    }
    __int16 v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v3;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v11;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(v11);
      if (!v4) {
        return 0;
      }
      goto LABEL_80;
    }
    if (v12)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v3;
      char v7 = "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d, no backtrace";
LABEL_77:
      char v21 = v5;
      os_log_type_t v22 = v6;
      uint32_t v23 = 18;
      goto LABEL_78;
    }
LABEL_79:
    if (!v4) {
      return 0;
    }
LABEL_80:
    free(v4);
    return 0;
  }
  getpid();
  if (os_nexus_controller_bind_provider_instance())
  {
    int v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    nw_advertise_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      char v7 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d";
      goto LABEL_77;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      char v7 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_77;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v18)
    {
      if (!v19) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      char v7 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, no backtrace";
      goto LABEL_77;
    }
    if (v19)
    {
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v18;
      os_log_type_t v20 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_37:
      _os_log_impl(&dword_1830D4000, v5, v6, v20, buf, 0x1Cu);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  *(_OWORD *)uu = v34;
  *(void *)&long long v34 = 0;
  if (!os_nexus_attr_create())
  {
    int v24 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v24;
    nw_advertise_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      char v7 = "%{public}s os_nexus_attr_create() %{darwin.errno}d";
      goto LABEL_77;
    }
    if (!v29)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      char v7 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_77;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    BOOL v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v27 = os_log_type_enabled(v5, type);
    if (!v18)
    {
      if (!v27) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      char v7 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, no backtrace";
      goto LABEL_77;
    }
    if (v27)
    {
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v18;
      os_log_type_t v20 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (os_nexus_controller_read_provider_attr())
  {
    int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v17;
    nw_advertise_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      char v7 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d";
      goto LABEL_77;
    }
    if (!v29)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      char v7 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_77;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    BOOL v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v26 = os_log_type_enabled(v5, type);
    if (!v18)
    {
      if (!v26) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      char v7 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d, no backtrace";
      goto LABEL_77;
    }
    if (v26)
    {
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v18;
      os_log_type_t v20 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_37;
    }
LABEL_38:
    free(v18);
    goto LABEL_79;
  }
  os_nexus_attr_get();
  os_nexus_attr_destroy();
  *(void *)&buf[8] = 16;
  if ((void)v34) {
    unsigned char buf[12] = 1;
  }
  *(void *)long long buf = out;
  BOOL v25 = nw_channel_create_with_attributes(a2, uu, 1u, (uint64_t)buf);
  if (!v25) {
    nw_nexus_remove_instance();
  }
  return v25;
}

BOOL nw_nexus_create_channel_to_new_instance(uint64_t a1)
{
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  nw_error_t v2 = (id)nw_context_copy_implicit_context::implicit_context;

  return nw_nexus_create_channel_to_new_instance_and_context(a1, v2);
}

void nw_nexus_close_channel_and_instance(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
    nw_error_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v2, &type, &v14)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
      BOOL v5 = "%{public}s called with null nexus";
LABEL_29:
      BOOL v12 = v3;
      os_log_type_t v13 = v4;
LABEL_30:
      _os_log_impl(&dword_1830D4000, v12, v13, v5, buf, 0xCu);
      goto LABEL_31;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
      BOOL v5 = "%{public}s called with null nexus, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_31;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
      BOOL v5 = "%{public}s called with null nexus, no backtrace";
      goto LABEL_36;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nexus, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_31:
    if (!v2) {
      return;
    }
    goto LABEL_32;
  }
  if (a2)
  {
    *(_OWORD *)long long buf = *(_OWORD *)(a2 + 88);
    nw_channel_close(a2);
    nw_nexus_remove_instance();
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
  nw_error_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v2, &type, &v14)) {
    goto LABEL_31;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    os_log_type_t v4 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_31;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
    BOOL v5 = "%{public}s called with null channel";
    goto LABEL_29;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    os_log_type_t v4 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_31;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
    BOOL v5 = "%{public}s called with null channel, backtrace limit exceeded";
    goto LABEL_29;
  }
  int v10 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v7 = gLogObj;
  os_log_type_t v8 = type;
  BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v10)
  {
    if (v11)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
      BOOL v5 = "%{public}s called with null channel, no backtrace";
LABEL_36:
      BOOL v12 = v7;
      os_log_type_t v13 = v8;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  if (v11)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_nexus_close_channel_and_instance";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v10;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v2) {
LABEL_32:
  }
    free(v2);
}

void nw_nexus_close(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      os_nexus_controller_destroy();
      *(void *)(a1 + 16) = 0;
    }
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v15 = "nw_nexus_close";
  nw_error_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v2, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v15 = "nw_nexus_close";
      BOOL v5 = "%{public}s called with null nexus";
LABEL_15:
      int v10 = v3;
      os_log_type_t v11 = v4;
LABEL_16:
      _os_log_impl(&dword_1830D4000, v10, v11, v5, buf, 0xCu);
      goto LABEL_17;
    }
    if (!v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v15 = "nw_nexus_close";
      BOOL v5 = "%{public}s called with null nexus, backtrace limit exceeded";
      goto LABEL_15;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v15 = "nw_nexus_close";
        __int16 v16 = 2082;
        uint64_t v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nexus, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_17;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v15 = "nw_nexus_close";
      BOOL v5 = "%{public}s called with null nexus, no backtrace";
      int v10 = v7;
      os_log_type_t v11 = v8;
      goto LABEL_16;
    }
  }
LABEL_17:
  if (v2) {
    free(v2);
  }
}

uint64_t nw_protocol_default_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)long long buf = 136446210;
    BOOL v25 = "nw_protocol_default_reset";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_reset";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v21 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v25 = "nw_protocol_default_reset";
          __int16 v26 = 2082;
          BOOL v27 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4) {
          goto LABEL_28;
        }
        return 0;
      }
      if (!v21) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_reset";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_reset";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    char v14 = v18;
    os_log_type_t v15 = v19;
    uint32_t v16 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)long long buf = 136446466;
  BOOL v25 = "nw_protocol_default_reset";
  __int16 v26 = 2082;
  BOOL v27 = identifier;
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v4, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      char v7 = a1->identifier;
      if (!v7) {
        char v7 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_reset";
      __int16 v26 = 2082;
      BOOL v27 = v7;
      os_log_type_t v8 = "%{public}s Reset is not supported on default callback for %{public}s";
LABEL_25:
      char v14 = v5;
      os_log_type_t v15 = v6;
      uint32_t v16 = 22;
LABEL_26:
      _os_log_impl(&dword_1830D4000, v14, v15, v8, buf, v16);
      goto LABEL_27;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      char v12 = a1->identifier;
      if (!v12) {
        char v12 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_reset";
      __int16 v26 = 2082;
      BOOL v27 = v12;
      os_log_type_t v8 = "%{public}s Reset is not supported on default callback for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    BOOL v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10) {
        goto LABEL_27;
      }
      os_log_type_t v13 = a1->identifier;
      if (!v13) {
        os_log_type_t v13 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_reset";
      __int16 v26 = 2082;
      BOOL v27 = v13;
      os_log_type_t v8 = "%{public}s Reset is not supported on default callback for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v10)
    {
      os_log_type_t v11 = a1->identifier;
      if (!v11) {
        os_log_type_t v11 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      BOOL v25 = "nw_protocol_default_reset";
      __int16 v26 = 2082;
      BOOL v27 = v11;
      __int16 v28 = 2082;
      char v29 = v9;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Reset is not supported on default callback for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v9);
  }
LABEL_27:
  if (v4) {
LABEL_28:
  }
    free(v4);
  return 0;
}

void nw_protocol_default_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        CFStreamError error = (void (*)(void))callbacks->error;
        if (error)
        {
          error();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v14 = "nw_protocol_default_error";
  BOOL v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_error";
      os_log_type_t v8 = "%{public}s called with null protocol";
      goto LABEL_21;
    }
    if (!v11)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_error";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446466;
        char v14 = "nw_protocol_default_error";
        __int16 v15 = 2082;
        uint32_t v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_error";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_22:
  if (v5) {
    free(v5);
  }
}

void nw_protocol_default_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        connected = (void (*)(void))callbacks->connected;
        if (connected)
        {
          connected();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v14 = "nw_protocol_default_connected";
  BOOL v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_connected";
      os_log_type_t v8 = "%{public}s called with null protocol";
      goto LABEL_21;
    }
    if (!v11)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_connected";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446466;
        char v14 = "nw_protocol_default_connected";
        __int16 v15 = 2082;
        uint32_t v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_connected";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_22:
  if (v5) {
    free(v5);
  }
}

uint64_t nw_protocol_default_get_output_interface(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v14 = "nw_protocol_default_get_output_interface";
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_get_output_interface";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          char v14 = "nw_protocol_default_get_output_interface";
          __int16 v15 = 2082;
          uint32_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v10)
      {
LABEL_22:
        if (v5) {
          free(v5);
        }
        return 0;
      }
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_get_output_interface";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      char v14 = "nw_protocol_default_get_output_interface";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_22;
  }
  output_handler = a1->output_handler;
  if (!output_handler) {
    return 0;
  }
  callbacks = output_handler->callbacks;
  if (!callbacks) {
    return 0;
  }
  get_output_interface = (uint64_t (*)(void))callbacks->get_output_interface;
  if (!get_output_interface) {
    return 0;
  }

  return get_output_interface();
}

void nw_protocol_default_link_state(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 24);
      if (v2)
      {
        uint64_t v3 = *(void (**)(void))(v2 + 104);
        if (v3)
        {
          v3();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v13 = "nw_protocol_default_link_state";
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v13 = "nw_protocol_default_link_state";
      os_log_type_t v7 = "%{public}s called with null protocol";
      goto LABEL_21;
    }
    if (!v10)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v13 = "nw_protocol_default_link_state";
      os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v13 = "nw_protocol_default_link_state";
        __int16 v14 = 2082;
        __int16 v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v13 = "nw_protocol_default_link_state";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_22:
  if (v4) {
    free(v4);
  }
}

uint64_t nw_protocol_default_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)long long buf = 136446210;
    char v29 = "nw_protocol_default_get_output_frames";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      char v29 = "nw_protocol_default_get_output_frames";
      char v12 = "%{public}s called with null protocol";
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v25 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)long long buf = 136446466;
          char v29 = "nw_protocol_default_get_output_frames";
          __int16 v30 = 2082;
          os_log_type_t v31 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v8) {
          goto LABEL_28;
        }
        return 0;
      }
      if (!v25) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      char v29 = "nw_protocol_default_get_output_frames";
      char v12 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      char v29 = "nw_protocol_default_get_output_frames";
      char v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    uint64_t v18 = v22;
    os_log_type_t v19 = v23;
    uint32_t v20 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)long long buf = 136446466;
  char v29 = "nw_protocol_default_get_output_frames";
  __int16 v30 = 2082;
  os_log_type_t v31 = identifier;
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v8, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      char v11 = a1->identifier;
      if (!v11) {
        char v11 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      char v29 = "nw_protocol_default_get_output_frames";
      __int16 v30 = 2082;
      os_log_type_t v31 = v11;
      char v12 = "%{public}s Default protocol handler does not support get_output_frames for %{public}s";
LABEL_25:
      uint64_t v18 = v9;
      os_log_type_t v19 = v10;
      uint32_t v20 = 22;
LABEL_26:
      _os_log_impl(&dword_1830D4000, v18, v19, v12, buf, v20);
      goto LABEL_27;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      uint64_t v16 = a1->identifier;
      if (!v16) {
        uint64_t v16 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      char v29 = "nw_protocol_default_get_output_frames";
      __int16 v30 = 2082;
      os_log_type_t v31 = v16;
      char v12 = "%{public}s Default protocol handler does not support get_output_frames for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    os_log_type_t v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_27;
      }
      uint64_t v17 = a1->identifier;
      if (!v17) {
        uint64_t v17 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      char v29 = "nw_protocol_default_get_output_frames";
      __int16 v30 = 2082;
      os_log_type_t v31 = v17;
      char v12 = "%{public}s Default protocol handler does not support get_output_frames for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v14)
    {
      __int16 v15 = a1->identifier;
      if (!v15) {
        __int16 v15 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      char v29 = "nw_protocol_default_get_output_frames";
      __int16 v30 = 2082;
      os_log_type_t v31 = v15;
      __int16 v32 = 2082;
      char v33 = v13;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s Default protocol handler does not support get_output_frames for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v13);
  }
LABEL_27:
  if (v8) {
LABEL_28:
  }
    free(v8);
  return 0;
}

uint64_t nw_protocol_default_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v7 = gLogObj;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      identifier = (nw_protocol_identifier *)"invalid";
      if (a1->identifier) {
        identifier = a1->identifier;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v19 = "nw_protocol_default_get_input_frames";
      __int16 v20 = 2082;
      BOOL v21 = identifier;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Default protocol handler does not support get_input_frames for %{public}s", buf, 0x16u);
    }
    return 0;
  }
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v19 = "nw_protocol_default_get_input_frames";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v19 = "nw_protocol_default_get_input_frames";
      os_log_type_t v13 = "%{public}s called with null protocol";
      goto LABEL_20;
    }
    if (!v16)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v19 = "nw_protocol_default_get_input_frames";
      os_log_type_t v13 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v19 = "nw_protocol_default_get_input_frames";
        __int16 v20 = 2082;
        BOOL v21 = (nw_protocol_identifier *)backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v15)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v19 = "nw_protocol_default_get_input_frames";
      os_log_type_t v13 = "%{public}s called with null protocol, no backtrace";
LABEL_20:
      _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_21:
  if (v10) {
    free(v10);
  }
  return 0;
}

uint64_t nw_protocol_default_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)long long buf = 136446210;
    BOOL v25 = "nw_protocol_default_remove_input_handler";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_remove_input_handler";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v21 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v25 = "nw_protocol_default_remove_input_handler";
          __int16 v26 = 2082;
          BOOL v27 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4) {
          goto LABEL_28;
        }
        return 0;
      }
      if (!v21) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_remove_input_handler";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_remove_input_handler";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    BOOL v14 = v18;
    os_log_type_t v15 = v19;
    uint32_t v16 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)long long buf = 136446466;
  BOOL v25 = "nw_protocol_default_remove_input_handler";
  __int16 v26 = 2082;
  BOOL v27 = identifier;
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v4, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      os_log_type_t v7 = a1->identifier;
      if (!v7) {
        os_log_type_t v7 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_remove_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v7;
      os_log_type_t v8 = "%{public}s Default protocol handler does not support remove_input_handler for %{public}s";
LABEL_25:
      BOOL v14 = v5;
      os_log_type_t v15 = v6;
      uint32_t v16 = 22;
LABEL_26:
      _os_log_impl(&dword_1830D4000, v14, v15, v8, buf, v16);
      goto LABEL_27;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      os_log_type_t v12 = a1->identifier;
      if (!v12) {
        os_log_type_t v12 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_remove_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v12;
      os_log_type_t v8 = "%{public}s Default protocol handler does not support remove_input_handler for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    BOOL v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10) {
        goto LABEL_27;
      }
      os_log_type_t v13 = a1->identifier;
      if (!v13) {
        os_log_type_t v13 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_remove_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v13;
      os_log_type_t v8 = "%{public}s Default protocol handler does not support remove_input_handler for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v10)
    {
      char v11 = a1->identifier;
      if (!v11) {
        char v11 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      BOOL v25 = "nw_protocol_default_remove_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v11;
      __int16 v28 = 2082;
      char v29 = v9;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Default protocol handler does not support remove_input_handler for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v9);
  }
LABEL_27:
  if (v4) {
LABEL_28:
  }
    free(v4);
  return 0;
}

uint64_t nw_protocol_default_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v7, &type, &v28)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null protocol";
      goto LABEL_65;
    }
    if (!v28)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v21 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v24 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_65;
    }
    if (!v24) {
      goto LABEL_52;
    }
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
    __int16 v32 = 2082;
    char v33 = (nw_protocol *)backtrace_string;
    BOOL v25 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_51;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v7, &type, &v28)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null old_input_handler";
      goto LABEL_65;
    }
    if (!v28)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v21 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v26 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null old_input_handler, no backtrace";
      goto LABEL_65;
    }
    if (!v26) {
      goto LABEL_52;
    }
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
    __int16 v32 = 2082;
    char v33 = (nw_protocol *)backtrace_string;
    BOOL v25 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_51:
    _os_log_impl(&dword_1830D4000, v21, v22, v25, buf, 0x16u);
    goto LABEL_52;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v7, &type, &v28)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null new_input_handler";
      goto LABEL_65;
    }
    if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v27 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
          __int16 v32 = 2082;
          char v33 = (nw_protocol *)backtrace_string;
          BOOL v25 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
          goto LABEL_51;
        }
LABEL_52:
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v27) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null new_input_handler, no backtrace";
    }
    else
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
      char v11 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
    }
LABEL_65:
    uint64_t v18 = v21;
    os_log_type_t v19 = v22;
    uint32_t v20 = 12;
    goto LABEL_22;
  }
  if (a1->default_input_handler != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    default_input_handler = a1->default_input_handler;
    *(_DWORD *)long long buf = 136446722;
    os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
    __int16 v32 = 2048;
    char v33 = default_input_handler;
    __int16 v34 = 2048;
    uint64_t v35 = a2;
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v7, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          BOOL v10 = a1->default_input_handler;
          *(_DWORD *)long long buf = 136446722;
          os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
          __int16 v32 = 2048;
          char v33 = v10;
          __int16 v34 = 2048;
          uint64_t v35 = a2;
          char v11 = "%{public}s Old input handler does not match (%p != %p)";
LABEL_21:
          uint64_t v18 = v8;
          os_log_type_t v19 = v9;
          uint32_t v20 = 32;
LABEL_22:
          _os_log_impl(&dword_1830D4000, v18, v19, v11, buf, v20);
        }
      }
      else if (v28)
      {
        os_log_type_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = gLogObj;
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v13)
        {
          if (v14)
          {
            os_log_type_t v15 = a1->default_input_handler;
            *(_DWORD *)long long buf = 136446978;
            os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
            __int16 v32 = 2048;
            char v33 = v15;
            __int16 v34 = 2048;
            uint64_t v35 = a2;
            __int16 v36 = 2082;
            BOOL v37 = v13;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v13);
          goto LABEL_23;
        }
        if (v14)
        {
          uint64_t v17 = a1->default_input_handler;
          *(_DWORD *)long long buf = 136446722;
          os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
          __int16 v32 = 2048;
          char v33 = v17;
          __int16 v34 = 2048;
          uint64_t v35 = a2;
          char v11 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
          goto LABEL_21;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint32_t v16 = a1->default_input_handler;
          *(_DWORD *)long long buf = 136446722;
          os_log_type_t v31 = "nw_protocol_default_replace_input_handler";
          __int16 v32 = 2048;
          char v33 = v16;
          __int16 v34 = 2048;
          uint64_t v35 = a2;
          char v11 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_21;
        }
      }
    }
LABEL_23:
    if (v7) {
      free(v7);
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
  if (!a3->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
  }
  return 1;
}

uint64_t nw_protocol_default_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)long long buf = 136446210;
    BOOL v25 = "nw_protocol_default_add_input_handler";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_add_input_handler";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v21 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v25 = "nw_protocol_default_add_input_handler";
          __int16 v26 = 2082;
          BOOL v27 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4) {
          goto LABEL_28;
        }
        return 0;
      }
      if (!v21) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_add_input_handler";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v25 = "nw_protocol_default_add_input_handler";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    BOOL v14 = v18;
    os_log_type_t v15 = v19;
    uint32_t v16 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)long long buf = 136446466;
  BOOL v25 = "nw_protocol_default_add_input_handler";
  __int16 v26 = 2082;
  BOOL v27 = identifier;
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v4, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      os_log_type_t v7 = a1->identifier;
      if (!v7) {
        os_log_type_t v7 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_add_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v7;
      os_log_type_t v8 = "%{public}s Default protocol handler does not support add_input_handler for %{public}s";
LABEL_25:
      BOOL v14 = v5;
      os_log_type_t v15 = v6;
      uint32_t v16 = 22;
LABEL_26:
      _os_log_impl(&dword_1830D4000, v14, v15, v8, buf, v16);
      goto LABEL_27;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      os_log_type_t v12 = a1->identifier;
      if (!v12) {
        os_log_type_t v12 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_add_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v12;
      os_log_type_t v8 = "%{public}s Default protocol handler does not support add_input_handler for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    os_log_type_t v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10) {
        goto LABEL_27;
      }
      os_log_type_t v13 = a1->identifier;
      if (!v13) {
        os_log_type_t v13 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v25 = "nw_protocol_default_add_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v13;
      os_log_type_t v8 = "%{public}s Default protocol handler does not support add_input_handler for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v10)
    {
      char v11 = a1->identifier;
      if (!v11) {
        char v11 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      BOOL v25 = "nw_protocol_default_add_input_handler";
      __int16 v26 = 2082;
      BOOL v27 = v11;
      __int16 v28 = 2082;
      char v29 = v9;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Default protocol handler does not support add_input_handler for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v9);
  }
LABEL_27:
  if (v4) {
LABEL_28:
  }
    free(v4);
  return 0;
}

BOOL nw_protocol_http_cookie_create()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v0 = malloc_type_calloc(1uLL, 0x1C0uLL, 0xEAFB8F1AuLL);
  if (!v0)
  {
    os_log_type_t v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446722;
    os_log_type_t v8 = "strict_calloc";
    __int16 v9 = 2048;
    uint64_t v10 = 1;
    __int16 v11 = 2048;
    uint64_t v12 = 448;
    BOOL v5 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  v0[26] = 0u;
  v0[27] = 0u;
  v0[24] = 0u;
  v0[25] = 0u;
  v0[22] = 0u;
  v0[23] = 0u;
  v0[20] = 0u;
  v0[21] = 0u;
  v0[18] = 0u;
  v0[19] = 0u;
  v0[16] = 0u;
  v0[17] = 0u;
  v0[14] = 0u;
  v0[15] = 0u;
  v0[12] = 0u;
  v0[13] = 0u;
  v0[10] = 0u;
  v0[11] = 0u;
  v0[8] = 0u;
  v0[9] = 0u;
  v0[6] = 0u;
  v0[7] = 0u;
  v0[4] = 0u;
  v0[5] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *int v0 = 0u;
  v0[1] = 0u;
  if (nw_protocol_http_cookie_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15821);
  }
  *((void *)v0 + 2) = &nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier;
  if (nw_protocol_http_cookie_get_callbacks(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_cookie_get_callbacks(void)::onceToken, &__block_literal_global_23_15822);
  }
  *((void *)v0 + 3) = &nw_protocol_http_cookie_get_callbacks(void)::protocol_callbacks;
  *((void *)v0 + 5) = v0;
  if ((*((unsigned char *)v0 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v8 = "nw_protocol_http_cookie_create";
        __int16 v9 = 2082;
        uint64_t v10 = (uint64_t)v0 + 114;
        __int16 v11 = 2080;
        uint64_t v12 = (uint64_t)" ";
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
  }
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
  }
  id v1 = (id)nw_protocol_copy_http_cookie_definition_http_cookie_definition;
  *((void *)v0 + 8) = (char *)v0 + 104;
  nw_protocol_plugin_name_set_callbacks((uint64_t)v0, (uint64_t)nw_protocol_http_cookie_create::$_0::__invoke);
  *((void *)v0 + 25) = 0;
  *((void *)v0 + 9) = (char *)v0 + 200;
  *((void *)v0 + 26) = (char *)v0 + 200;
  *((void *)v0 + 27) = 0;
  *((void *)v0 + 28) = (char *)v0 + 216;
  *((void *)v0 + 29) = 0;
  *((void *)v0 + 30) = (char *)v0 + 232;
  *((unsigned char *)v0 + 340) = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  id v2 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v0, v2, (uint64_t)nw_protocol_http_cookie_create::$_1::__invoke, (uint64_t)nw_protocol_http_cookie_create::$_2::__invoke);
  if (v2) {
    os_release(v2);
  }
  *((void *)v0 + 10) = (char *)v0 + 344;
  if (v1) {
    os_release(v1);
  }
  return (BOOL)v0;
}

void nw_protocol_http_cookie_create::$_2::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v111[4] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v107[0] = 0;
    if (!__nwlog_fault(v23, type, v107)) {
      goto LABEL_117;
    }
    if (type[0] == 17)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null protocol";
    }
    else if (v107[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      BOOL v32 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "operator()";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_117:
        if (!v23) {
          return;
        }
        goto LABEL_118;
      }
      if (!v32) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_116;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v107[0] = 0;
    if (!__nwlog_fault(v23, type, v107)) {
      goto LABEL_117;
    }
    if (type[0] != 17)
    {
      if (!v107[0])
      {
        BOOL v24 = __nwlog_obj();
        os_log_type_t v25 = type[0];
        if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
          goto LABEL_117;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        __int16 v26 = "%{public}s called with null http_cookie, backtrace limit exceeded";
        goto LABEL_116;
      }
      char v33 = (char *)__nw_create_backtrace_string();
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      BOOL v34 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
      if (!v33)
      {
        if (!v34) {
          goto LABEL_117;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        __int16 v26 = "%{public}s called with null http_cookie, no backtrace";
        goto LABEL_116;
      }
      if (!v34) {
        goto LABEL_70;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v33;
      uint64_t v35 = "%{public}s called with null http_cookie, dumping backtrace:%{public}s";
      goto LABEL_69;
    }
    BOOL v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
      goto LABEL_117;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    __int16 v26 = "%{public}s called with null http_cookie";
LABEL_116:
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
    goto LABEL_117;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v107[0] = 0;
    if (!__nwlog_fault(v23, type, v107)) {
      goto LABEL_117;
    }
    if (type[0] == 17)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null metadata";
      goto LABEL_116;
    }
    if (!v107[0])
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_116;
    }
    char v33 = (char *)__nw_create_backtrace_string();
    BOOL v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v36 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
    if (!v33)
    {
      if (!v36) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_116;
    }
    if (!v36) {
      goto LABEL_70;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "operator()";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v33;
    uint64_t v35 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_69:
    _os_log_impl(&dword_1830D4000, v24, v25, v35, buf, 0x16u);
    goto LABEL_70;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v107[0] = 0;
    if (!__nwlog_fault(v23, type, v107)) {
      goto LABEL_117;
    }
    if (type[0] == 17)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null completion";
      goto LABEL_116;
    }
    if (!v107[0])
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_116;
    }
    char v33 = (char *)__nw_create_backtrace_string();
    BOOL v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v37 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
    if (!v33)
    {
      if (!v37) {
        goto LABEL_117;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      __int16 v26 = "%{public}s called with null completion, no backtrace";
      goto LABEL_116;
    }
    if (v37)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v33;
      uint64_t v35 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_69;
    }
LABEL_70:
    free(v33);
    if (!v23) {
      return;
    }
LABEL_118:
    free(v23);
    return;
  }
  *(void *)long long buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  os_log_type_t v103 = __Block_byref_object_copy__15850;
  os_log_type_t v104 = __Block_byref_object_dispose__15851;
  uint64_t object = nw_http_metadata_copy_request(a3);
  v106 |= 1u;
  os_log_type_t v8 = *(void **)(*(void *)&buf[8] + 40);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)os_log_type_t type = 136446210;
    *(void *)&type[4] = "operator()";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    v107[0] = 16;
    LOBYTE(v111[0]) = 0;
    if (!__nwlog_fault(v27, v107, v111)) {
      goto LABEL_122;
    }
    if (v107[0] == 17)
    {
      __int16 v28 = __nwlog_obj();
      os_log_type_t v29 = v107[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)v107[0])) {
        goto LABEL_122;
      }
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&type[4] = "operator()";
      uint64_t v30 = "%{public}s called with null request";
    }
    else if (LOBYTE(v111[0]))
    {
      uint64_t v38 = (char *)__nw_create_backtrace_string();
      __int16 v28 = __nwlog_obj();
      os_log_type_t v29 = v107[0];
      BOOL v39 = os_log_type_enabled(v28, (os_log_type_t)v107[0]);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&type[4] = "operator()";
          *(_WORD *)&type[12] = 2082;
          *(void *)&type[14] = v38;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null request, dumping backtrace:%{public}s", type, 0x16u);
        }
        free(v38);
        goto LABEL_122;
      }
      if (!v39)
      {
LABEL_122:
        if (v27) {
          free(v27);
        }
        goto LABEL_28;
      }
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&type[4] = "operator()";
      uint64_t v30 = "%{public}s called with null request, no backtrace";
    }
    else
    {
      __int16 v28 = __nwlog_obj();
      os_log_type_t v29 = v107[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)v107[0])) {
        goto LABEL_122;
      }
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&type[4] = "operator()";
      uint64_t v30 = "%{public}s called with null request, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v28, v29, v30, type, 0xCu);
    goto LABEL_122;
  }
  id v9 = v8;
  char has_method = _nw_http_request_has_method((uint64_t)v9);

  BOOL v11 = (has_method & 1) != 0 || nw_http_request_has_method(*(void **)(*(void *)&buf[8] + 40), (uint64_t)"HEAD");
  *(unsigned char *)(v5 + 360) = *(unsigned char *)(v5 + 360) & 0xFE | v11;
  if (!nw_http_fields_have_field_with_name(*(void **)(*(void *)&buf[8] + 40), (unint64_t)"Cookie"))
  {
    parameters = (void *)nw_protocol_get_parameters(*(void *)(v5 + 48));
    if (parameters) {
      uint64_t v13 = os_retain(parameters);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = nw_parameters_copy_protocol_options_legacy(v13, (nw_protocol *)v5);
    id v15 = nw_http_cookie_options_copy_cookie_storage(v14);
    uint32_t v16 = nw_parameters_copy_url_endpoint(v13);
    uint64_t v17 = v16;
    if (!v15)
    {
LABEL_19:
      if (!v17) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    os_log_type_t v95 = v16;
    uint64_t v18 = v14;
    os_log_type_t v19 = v18;
    if (v18)
    {
      uint32_t v20 = nw_protocol_options_copy_definition(v18);
      if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
      }
      uint64_t v17 = v95;
      BOOL is_equal = nw_protocol_definition_is_equal(v20, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

      if (is_equal)
      {
        *(void *)char v107 = 0;
        *(void *)&v107[8] = v107;
        *(void *)&v107[16] = 0x2020000000;
        LOBYTE(v108) = 0;
        *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
        *(void *)&os_log_type_t type[8] = 3221225472;
        *(void *)&type[16] = __nw_http_cookie_options_get_should_not_send_cookies_block_invoke;
        BOOL v99 = &unk_1E5248E90;
        os_log_type_t v100 = v107;
        nw_protocol_options_access_handle(v19, type);
        BOOL v22 = *(unsigned char *)(*(void *)&v107[8] + 24) == 0;
        _Block_object_dispose(v107, 8);

        if (!v22) {
          goto LABEL_19;
        }
LABEL_139:
        if (!v17) {
          goto LABEL_22;
        }
        if (nw_endpoint_get_type(v17) != nw_endpoint_type_url) {
          goto LABEL_20;
        }
        CFTypeRef v94 = nw_endpoint_copy_cfurl(v17);
        if (!v94) {
          goto LABEL_20;
        }
        v97[0] = 0;
        v97[1] = v97;
        v97[2] = 0x2000000000;
        v97[3] = 0;
        CFTypeRef v91 = nw_parameters_copy_main_document_cfurl(v13);
        cf = (const void *)nw_http_cookie_options_copy_site_for_cookies(v19);
        BOOL is_top_level_navigation = nw_http_cookie_options_get_is_top_level_navigation(v19);
        char v56 = *(unsigned char *)(v5 + 360);
        uint64_t cookie_partition_identifier = nw_http_cookie_options_get_cookie_partition_identifier(v19);
        os_log_type_t v57 = v19;
        __int16 v58 = v57;
        if (v19)
        {
          char v59 = nw_protocol_options_copy_definition(v57);
          if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
          }
          BOOL v60 = nw_protocol_definition_is_equal(v59, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

          if (v60)
          {
            *(void *)char v107 = 0;
            *(void *)&v107[8] = v107;
            *(void *)&v107[16] = 0x2020000000;
            LOBYTE(v108) = 0;
            *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
            *(void *)&os_log_type_t type[8] = 3221225472;
            *(void *)&type[16] = __nw_http_cookie_options_get_allow_only_partitioned_cookies_block_invoke;
            BOOL v99 = &unk_1E5248E90;
            os_log_type_t v100 = v107;
            nw_protocol_options_access_handle(v58, type);
            BOOL v61 = *(unsigned char *)(*(void *)&v107[8] + 24) != 0;
            _Block_object_dispose(v107, 8);
LABEL_147:

            *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
            *(void *)&os_log_type_t type[8] = 0x40000000;
            *(void *)&type[16] = ___ZZ30nw_protocol_http_cookie_createENK3__2clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke;
            BOOL v99 = &unk_1E523C6F0;
            os_log_type_t v100 = v97;
            uint64_t v101 = buf;
            CFURLRef v84 = (id *)v15;
            char v87 = type;
            id v96 = v84[1];
            __int16 v62 = cf;
            if (cf)
            {
              uint64_t v63 = v56 & 1;
              v111[0] = cf;
              v110[0] = @"_kCFHTTPCookiePolicyPropertySiteForCookies";
              v110[1] = @"_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation";
              char v64 = [NSNumber numberWithBool:is_top_level_navigation];
              v111[1] = v64;
              v110[2] = @"_kCFHTTPCookiePolicyPropertyIsSafeRequest";
              os_log_type_t v65 = [NSNumber numberWithBool:v63];
              v111[2] = v65;
              v110[3] = @"_kCFHTTPCookiePolicyPropertyAllowOnlyPartitionedCookies";
              os_log_type_t v66 = [NSNumber numberWithBool:v61];
              v111[3] = v66;
              __int16 v67 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v111 forKeys:v110 count:4];

              __int16 v62 = cf;
            }
            else
            {
              __int16 v67 = 0;
            }
            if (cookie_partition_identifier)
            {
              v68 = objc_msgSend(NSString, "stringWithUTF8String:");
            }
            else
            {
              v68 = 0;
            }
            *(void *)char v107 = MEMORY[0x1E4F143A8];
            *(void *)&v107[8] = 3221225472;
            *(void *)&v107[16] = __nw_http_cookie_enumerate_block_invoke;
            v108 = &unk_1E5249F20;
            uint64_t v69 = v87;
            id v109 = v69;
            [v96 _getCookiesForURL:v94 mainDocumentURL:v91 partition:v68 policyProperties:v67 completionHandler:v107];

            if (v62) {
              CFRelease(cf);
            }
            if (v91) {
              CFRelease(v91);
            }
            _Block_object_dispose(v97, 8);
            CFRelease(v94);
LABEL_20:
            os_release(v17);
LABEL_21:
            if (!v15)
            {
LABEL_23:
              if (v14) {
                os_release(v14);
              }
              if (v13) {
                os_release(v13);
              }
              goto LABEL_27;
            }
LABEL_22:
            os_release(v15);
            goto LABEL_23;
          }
          os_log_type_t v74 = __nwlog_obj();
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
          uint64_t v71 = (char *)_os_log_send_and_compose_impl();

          v107[0] = 16;
          LOBYTE(v111[0]) = 0;
          if (__nwlog_fault(v71, v107, v111))
          {
            if (v107[0] == 17)
            {
              os_log_type_t v72 = __nwlog_obj();
              os_log_type_t v75 = v107[0];
              if (os_log_type_enabled(v72, (os_log_type_t)v107[0]))
              {
                *(_DWORD *)os_log_type_t type = 136446210;
                *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
                _os_log_impl(&dword_1830D4000, v72, v75, "%{public}s protocol options are not http_cookie", type, 0xCu);
              }
LABEL_184:

              goto LABEL_191;
            }
            if (!LOBYTE(v111[0]))
            {
              os_log_type_t v72 = __nwlog_obj();
              os_log_type_t v82 = v107[0];
              if (os_log_type_enabled(v72, (os_log_type_t)v107[0]))
              {
                *(_DWORD *)os_log_type_t type = 136446210;
                *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
                _os_log_impl(&dword_1830D4000, v72, v82, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", type, 0xCu);
              }
              goto LABEL_184;
            }
            v79 = (char *)__nw_create_backtrace_string();
            os_log_type_t v77 = __nwlog_obj();
            os_log_type_t v86 = v107[0];
            BOOL v80 = os_log_type_enabled(v77, (os_log_type_t)v107[0]);
            if (v79)
            {
              if (v80)
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = v79;
                _os_log_impl(&dword_1830D4000, v77, v86, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", type, 0x16u);
              }

              free(v79);
              if (!v71) {
                goto LABEL_193;
              }
              goto LABEL_192;
            }
            if (v80)
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl(&dword_1830D4000, v77, v86, "%{public}s protocol options are not http_cookie, no backtrace", type, 0xCu);
            }
            goto LABEL_190;
          }
        }
        else
        {
          uint64_t v70 = __nwlog_obj();
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
          uint64_t v71 = (char *)_os_log_send_and_compose_impl();

          v107[0] = 16;
          LOBYTE(v111[0]) = 0;
          if (!__nwlog_fault(v71, v107, v111)) {
            goto LABEL_191;
          }
          if (v107[0] == 17)
          {
            os_log_type_t v72 = __nwlog_obj();
            os_log_type_t v73 = v107[0];
            if (os_log_type_enabled(v72, (os_log_type_t)v107[0]))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s called with null options", type, 0xCu);
            }
            goto LABEL_184;
          }
          if (!LOBYTE(v111[0]))
          {
            os_log_type_t v72 = __nwlog_obj();
            os_log_type_t v81 = v107[0];
            if (os_log_type_enabled(v72, (os_log_type_t)v107[0]))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl(&dword_1830D4000, v72, v81, "%{public}s called with null options, backtrace limit exceeded", type, 0xCu);
            }
            goto LABEL_184;
          }
          os_log_type_t v76 = (char *)__nw_create_backtrace_string();
          os_log_type_t v77 = __nwlog_obj();
          os_log_type_t v85 = v107[0];
          BOOL v78 = os_log_type_enabled(v77, (os_log_type_t)v107[0]);
          if (!v76)
          {
            if (v78)
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl(&dword_1830D4000, v77, v85, "%{public}s called with null options, no backtrace", type, 0xCu);
            }
LABEL_190:

            goto LABEL_191;
          }
          if (v78)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            *(void *)&type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
            *(_WORD *)&type[12] = 2082;
            *(void *)&type[14] = v76;
            _os_log_impl(&dword_1830D4000, v77, v85, "%{public}s called with null options, dumping backtrace:%{public}s", type, 0x16u);
          }

          free(v76);
        }
LABEL_191:
        if (!v71)
        {
LABEL_193:
          BOOL v61 = 0;
          uint64_t v17 = v95;
          goto LABEL_147;
        }
LABEL_192:
        free(v71);
        goto LABEL_193;
      }
      objc_super v45 = __nwlog_obj();
      *(_DWORD *)char v107 = 136446210;
      *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
      os_log_type_t v42 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v111[0]) = 16;
      LOBYTE(v110[0]) = 0;
      if (__nwlog_fault(v42, v111, v110))
      {
        os_log_type_t v93 = v42;
        if (LOBYTE(v111[0]) == 17)
        {
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v46 = v111[0];
          if (os_log_type_enabled(v43, v111[0]))
          {
            *(_DWORD *)char v107 = 136446210;
            *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
            _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s protocol options are not http_cookie", v107, 0xCu);
          }
LABEL_81:

          os_log_type_t v42 = v93;
          goto LABEL_136;
        }
        if (LOBYTE(v110[0]))
        {
          BOOL v51 = __nw_create_backtrace_string();
          __int16 v48 = __nwlog_obj();
          os_log_type_t v52 = v111[0];
          BOOL v53 = os_log_type_enabled(v48, v111[0]);
          BOOL v90 = (char *)v51;
          if (v51)
          {
            if (v53)
            {
              *(_DWORD *)char v107 = 136446466;
              *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
              *(_WORD *)&v107[12] = 2082;
              *(void *)&v107[14] = v51;
              _os_log_impl(&dword_1830D4000, v48, v52, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", v107, 0x16u);
            }

            os_log_type_t v42 = v93;
            uint64_t v17 = v95;
            free(v90);
            if (!v93) {
              goto LABEL_138;
            }
            goto LABEL_137;
          }
          if (v53)
          {
            *(_DWORD *)char v107 = 136446210;
            *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
            _os_log_impl(&dword_1830D4000, v48, v52, "%{public}s protocol options are not http_cookie, no backtrace", v107, 0xCu);
          }
        }
        else
        {
          __int16 v48 = __nwlog_obj();
          os_log_type_t v55 = v111[0];
          if (os_log_type_enabled(v48, v111[0]))
          {
            *(_DWORD *)char v107 = 136446210;
            *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
            _os_log_impl(&dword_1830D4000, v48, v55, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", v107, 0xCu);
          }
        }
        goto LABEL_135;
      }
LABEL_136:
      if (!v42)
      {
LABEL_138:

        goto LABEL_139;
      }
LABEL_137:
      free(v42);
      goto LABEL_138;
    }
    int v40 = __nwlog_obj();
    *(_DWORD *)char v107 = 136446210;
    *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
    uint64_t v41 = _os_log_send_and_compose_impl();

    os_log_type_t v42 = (char *)v41;
    uint64_t v17 = v95;
    LOBYTE(v111[0]) = 16;
    LOBYTE(v110[0]) = 0;
    if (!__nwlog_fault(v42, v111, v110)) {
      goto LABEL_136;
    }
    os_log_type_t v93 = v42;
    if (LOBYTE(v111[0]) == 17)
    {
      os_log_type_t v43 = __nwlog_obj();
      os_log_type_t v44 = v111[0];
      if (os_log_type_enabled(v43, v111[0]))
      {
        *(_DWORD *)char v107 = 136446210;
        *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null options", v107, 0xCu);
      }
      goto LABEL_81;
    }
    if (LOBYTE(v110[0]))
    {
      uint32_t v47 = __nw_create_backtrace_string();
      __int16 v48 = __nwlog_obj();
      os_log_type_t v49 = v111[0];
      BOOL v50 = os_log_type_enabled(v48, v111[0]);
      BOOL v89 = (char *)v47;
      if (v47)
      {
        if (v50)
        {
          *(_DWORD *)char v107 = 136446466;
          *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
          *(_WORD *)&v107[12] = 2082;
          *(void *)&v107[14] = v47;
          _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s called with null options, dumping backtrace:%{public}s", v107, 0x16u);
        }

        os_log_type_t v42 = v93;
        uint64_t v17 = v95;
        free(v89);
        goto LABEL_136;
      }
      if (v50)
      {
        *(_DWORD *)char v107 = 136446210;
        *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s called with null options, no backtrace", v107, 0xCu);
      }
    }
    else
    {
      __int16 v48 = __nwlog_obj();
      os_log_type_t v54 = v111[0];
      if (os_log_type_enabled(v48, v111[0]))
      {
        *(_DWORD *)char v107 = 136446210;
        *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_1830D4000, v48, v54, "%{public}s called with null options, backtrace limit exceeded", v107, 0xCu);
      }
    }
LABEL_135:

    os_log_type_t v42 = v93;
    uint64_t v17 = v95;
    goto LABEL_136;
  }
LABEL_27:
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
LABEL_28:
  _Block_object_dispose(buf, 8);
  if (v106)
  {
    if (object) {
      os_release(object);
    }
  }
}

void sub_183745B24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15850(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15851(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZZ30nw_protocol_http_cookie_createENK3__2clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke(uint64_t a1, char *__s, const char *a3)
{
  memset(&v13, 0, sizeof(v13));
  if (__s)
  {
    size_t v6 = strlen(__s);
    std::string::append(&v13, __s, v6);
    std::string::append(&v13, "=", 1uLL);
    if (a3)
    {
      size_t v7 = strlen(a3);
      std::string::append(&v13, a3, v7);
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = *(void *)(v8 + 24);
    char v10 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
      if (v13.__r_.__value_.__l.__size_ + v9 > 0x3202A)
      {
LABEL_12:
        operator delete(v13.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if (v9 + (unint64_t)HIBYTE(v13.__r_.__value_.__r.__words[2]) > 0x3202A) {
        return;
      }
    }
    *(void *)(v8 + 24) = v9 + size + 2;
    if (v10 >= 0) {
      uint64_t v12 = &v13;
    }
    else {
      uint64_t v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    nw_http_fields_append_advanced(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), (unint64_t)"Cookie", -1, (char *)v12, 0xFFFFFFFFFFFFFFFFLL, &__block_literal_global_18_15860);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_12;
    }
  }
}

uint64_t ___ZZ30nw_protocol_http_cookie_createENK3__2clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return nw_http_field_set_indexing_strategy(a2, 1u);
}

void nw_protocol_http_cookie_create::$_1::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    v128[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v128, type)) {
      goto LABEL_120;
    }
    if (v128[0] == 17)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null protocol";
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      BOOL v27 = os_log_type_enabled(v23, (os_log_type_t)v128[0]);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "operator()";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_120:
        if (!v22) {
          return;
        }
        goto LABEL_121;
      }
      if (!v27) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_119;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    v128[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v128, type)) {
      goto LABEL_120;
    }
    if (v128[0] != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = v128[0];
        if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
          goto LABEL_120;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        os_log_type_t v25 = "%{public}s called with null http_cookie, backtrace limit exceeded";
        goto LABEL_119;
      }
      __int16 v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      BOOL v29 = os_log_type_enabled(v23, (os_log_type_t)v128[0]);
      if (!v28)
      {
        if (!v29) {
          goto LABEL_120;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        os_log_type_t v25 = "%{public}s called with null http_cookie, no backtrace";
        goto LABEL_119;
      }
      if (!v29) {
        goto LABEL_72;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v28;
      uint64_t v30 = "%{public}s called with null http_cookie, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = v128[0];
    if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
      goto LABEL_120;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v25 = "%{public}s called with null http_cookie";
LABEL_119:
    _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
    goto LABEL_120;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    v128[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v128, type)) {
      goto LABEL_120;
    }
    if (v128[0] != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = v128[0];
        if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
          goto LABEL_120;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        os_log_type_t v25 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_119;
      }
      __int16 v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      BOOL v31 = os_log_type_enabled(v23, (os_log_type_t)v128[0]);
      if (!v28)
      {
        if (!v31) {
          goto LABEL_120;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        os_log_type_t v25 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_119;
      }
      if (!v31) {
        goto LABEL_72;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v28;
      uint64_t v30 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = v128[0];
    if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
      goto LABEL_120;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v25 = "%{public}s called with null other_protocol";
    goto LABEL_119;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    v128[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v128, type)) {
      goto LABEL_120;
    }
    if (v128[0] != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = v128[0];
        if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
          goto LABEL_120;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        os_log_type_t v25 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_119;
      }
      __int16 v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      BOOL v32 = os_log_type_enabled(v23, (os_log_type_t)v128[0]);
      if (!v28)
      {
        if (!v32) {
          goto LABEL_120;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        os_log_type_t v25 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_119;
      }
      if (!v32) {
        goto LABEL_72;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v28;
      uint64_t v30 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = v128[0];
    if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
      goto LABEL_120;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    os_log_type_t v25 = "%{public}s called with null metadata";
    goto LABEL_119;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    v128[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v128, type)) {
      goto LABEL_120;
    }
    if (v128[0] == 17)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null completion";
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_119;
    }
    __int16 v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = v128[0];
    BOOL v33 = os_log_type_enabled(v23, (os_log_type_t)v128[0]);
    if (!v28)
    {
      if (!v33) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null completion, no backtrace";
      goto LABEL_119;
    }
    if (!v33) {
      goto LABEL_72;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "operator()";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v28;
    uint64_t v30 = "%{public}s called with null completion, dumping backtrace:%{public}s";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v23, v24, v30, buf, 0x16u);
    goto LABEL_72;
  }
  id v8 = nw_http_metadata_copy_response(a3);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    v128[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v128, type)) {
      goto LABEL_120;
    }
    if (v128[0] == 17)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null response";
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = v128[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)v128[0])) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null response, backtrace limit exceeded";
      goto LABEL_119;
    }
    __int16 v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = v128[0];
    BOOL v34 = os_log_type_enabled(v23, (os_log_type_t)v128[0]);
    if (!v28)
    {
      if (!v34) {
        goto LABEL_120;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      os_log_type_t v25 = "%{public}s called with null response, no backtrace";
      goto LABEL_119;
    }
    if (v34)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v28;
      uint64_t v30 = "%{public}s called with null response, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
LABEL_72:
    free(v28);
    if (!v22) {
      return;
    }
LABEL_121:
    free(v22);
    return;
  }
  id v9 = v8;
  int status_code = _nw_http_response_get_status_code();

  if (status_code == 101 || (status_code - 100) > 0x63)
  {
    parameters = (void *)nw_protocol_get_parameters(*(void *)(v5 + 48));
    if (parameters) {
      uint64_t v12 = os_retain(parameters);
    }
    else {
      uint64_t v12 = 0;
    }
    std::string v13 = nw_parameters_copy_protocol_options_legacy(v12, (nw_protocol *)v5);
    id v14 = nw_http_cookie_options_copy_cookie_storage(v13);
    __int16 v114 = v12;
    endpoint = nw_parameters_copy_url_endpoint(v12);
    if (!v14)
    {
LABEL_19:
      (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
      uint32_t v20 = endpoint;
      if (!endpoint)
      {
        BOOL v21 = v12;
        if (!v14)
        {
LABEL_229:
          if (!v13) {
            goto LABEL_231;
          }
          goto LABEL_230;
        }
LABEL_227:
        os_release(v14);
        if (!v13)
        {
LABEL_231:
          if (v21) {
            os_release(v21);
          }
          goto LABEL_233;
        }
LABEL_230:
        os_release(v13);
        goto LABEL_231;
      }
LABEL_226:
      os_release(v20);
      BOOL v21 = v114;
      if (!v14) {
        goto LABEL_229;
      }
      goto LABEL_227;
    }
    BOOL v113 = v13;
    id v15 = v13;
    uint32_t v16 = v15;
    if (v15)
    {
      uint64_t v17 = nw_protocol_options_copy_definition(v15);
      if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
      }
      BOOL is_equal = nw_protocol_definition_is_equal(v17, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

      if (is_equal)
      {
        *(void *)v128 = 0;
        *(void *)&v128[8] = v128;
        *(void *)&v128[16] = 0x2020000000;
        LOBYTE(v129) = 0;
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_http_cookie_options_get_should_not_save_cookies_block_invoke;
        BOOL v119 = &unk_1E5248E90;
        CFAllocatorRef v120 = v128;
        nw_protocol_options_access_handle(v16, buf);
        BOOL v19 = *(unsigned char *)(*(void *)&v128[8] + 24) == 0;
        _Block_object_dispose(v128, 8);

        if (!v19) {
          goto LABEL_19;
        }
LABEL_138:
        uint32_t v20 = endpoint;
        if (!endpoint)
        {
          (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
          BOOL v21 = v114;
          goto LABEL_227;
        }
        if (nw_endpoint_get_type(endpoint) != nw_endpoint_type_url) {
          goto LABEL_225;
        }
        id v109 = v14;
        CFTypeRef v50 = nw_endpoint_copy_cfurl(endpoint);
        uint64_t cookie_partition_identifier = nw_http_cookie_options_get_cookie_partition_identifier(v16);
        id v52 = v9;
        if (v50)
        {
          id v53 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __nw_http_cookie_parse_block_invoke;
          BOOL v119 = &unk_1E5247B58;
          uint64_t v121 = cookie_partition_identifier;
          CFTypeRef v122 = v50;
          CFTypeRef v110 = v50;
          os_log_type_t v54 = v53;
          CFAllocatorRef v120 = v54;
          id v55 = v52;
          char v56 = buf;
          _nw_http_fields_enumerate_by_name((uint64_t)v55, (unint64_t)"Set-Cookie", v56);

          if ([v54 count]) {
            BOOL v111 = (const void *)[v54 copy];
          }
          else {
            BOOL v111 = 0;
          }

          uint32_t v20 = endpoint;
          os_log_type_t v57 = v110;
          if (!v111)
          {
LABEL_224:
            CFRelease(v57);
            id v14 = v109;
LABEL_225:
            (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
            goto LABEL_226;
          }
          __int16 v58 = v16;
          if (!v16)
          {
            char v59 = v58;
            v68 = __nwlog_obj();
            *(_DWORD *)v128 = 136446210;
            *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
            LODWORD(v104) = 12;
            os_log_type_t v103 = v128;
            uint64_t v69 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t v117 = OS_LOG_TYPE_ERROR;
            char v116 = 0;
            if (!__nwlog_fault(v69, &v117, &v116)) {
              goto LABEL_207;
            }
            if (v117 == OS_LOG_TYPE_FAULT)
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v71 = v117;
              if (os_log_type_enabled(v70, v117))
              {
                *(_DWORD *)v128 = 136446210;
                *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s called with null options", v128, 0xCu);
              }
            }
            else if (v116)
            {
              os_log_type_t v77 = (char *)__nw_create_backtrace_string();
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v78 = v117;
              BOOL v79 = os_log_type_enabled(v70, v117);
              if (v77)
              {
                if (v79)
                {
                  *(_DWORD *)v128 = 136446466;
                  *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
                  *(_WORD *)&v128[12] = 2082;
                  *(void *)&v128[14] = v77;
                  _os_log_impl(&dword_1830D4000, v70, v78, "%{public}s called with null options, dumping backtrace:%{public}s", v128, 0x16u);
                }

                free(v77);
                if (!v69) {
                  goto LABEL_209;
                }
                goto LABEL_208;
              }
              if (v79)
              {
                *(_DWORD *)v128 = 136446210;
                *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_1830D4000, v70, v78, "%{public}s called with null options, no backtrace", v128, 0xCu);
              }
            }
            else
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v84 = v117;
              if (os_log_type_enabled(v70, v117))
              {
                *(_DWORD *)v128 = 136446210;
                *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_1830D4000, v70, v84, "%{public}s called with null options, backtrace limit exceeded", v128, 0xCu);
              }
            }
            goto LABEL_206;
          }
          char v59 = v58;
          BOOL v60 = nw_protocol_options_copy_definition(v58);
          if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_18_74238);
          }
          BOOL v61 = nw_protocol_definition_is_equal(v60, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

          if (v61)
          {
            *(void *)v128 = 0;
            *(void *)&v128[8] = v128;
            *(void *)&v128[16] = 0x3032000000;
            v129 = __Block_byref_object_copy__74035;
            uint64_t v130 = __Block_byref_object_dispose__74036;
            id v131 = 0;
            *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
            uint64_t v124 = 3221225472;
            v125 = __nw_http_cookie_options_copy_transform_callback_block_invoke;
            char v126 = (__CFString *)&unk_1E5248E90;
            v127 = v128;
            nw_protocol_options_access_handle(v59, type);
            aBlock = (uint64_t (**)(void *, const void *))_Block_copy(*(const void **)(*(void *)&v128[8]
                                                                                               + 40));
            _Block_object_dispose(v128, 8);

            if (aBlock)
            {
              __int16 v62 = (const void *)aBlock[2](aBlock, v111);
              if (v62) {
                CFTypeRef v63 = CFRetain(v62);
              }
              else {
                CFTypeRef v63 = 0;
              }
              CFRelease(v111);
              char v105 = 0;
LABEL_211:
              CFTypeRef v107 = nw_parameters_copy_main_document_cfurl(v114);
              os_log_type_t v86 = (const void *)nw_http_cookie_options_copy_site_for_cookies(v59);
              BOOL is_top_level_navigation = nw_http_cookie_options_get_is_top_level_navigation(v59);
              char v88 = *(unsigned char *)(v5 + 360);
              char v106 = v109;
              __int16 v112 = v63;
              if (v63)
              {
                if (v86)
                {
                  *(void *)v128 = v86;
                  *(void *)os_log_type_t type = @"_kCFHTTPCookiePolicyPropertySiteForCookies";
                  uint64_t v124 = @"_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation";
                  BOOL v89 = [NSNumber numberWithBool:is_top_level_navigation];
                  *(void *)&v128[8] = v89;
                  v125 = (uint64_t (*)(uint64_t, uint64_t))@"_kCFHTTPCookiePolicyPropertyIsSafeRequest";
                  BOOL v90 = [NSNumber numberWithBool:v88 & 1];
                  char v126 = @"_kCFHTTPCookiePolicyPropertyAllowHTTPOnlyOverwrite";
                  *(void *)&v128[16] = v90;
                  v129 = (void *(*)(uint64_t, uint64_t))MEMORY[0x1E4F1CC38];
                  CFTypeRef v91 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v128 forKeys:type count:4];

                  os_log_type_t v93 = v106;
                  char v92 = v107;
                }
                else
                {
                  CFTypeRef v91 = 0;
                  os_log_type_t v93 = v106;
                  char v92 = v107;
                }
                objc_msgSend(v93[1], "_setCookies:forURL:mainDocumentURL:policyProperties:", v112, v110, v92, v91, v103, v104);

LABEL_216:
                if (v86) {
                  CFRelease(v86);
                }
                uint32_t v20 = endpoint;
                if (v92) {
                  CFRelease(v92);
                }
                os_log_type_t v57 = v110;
                if ((v105 & 1) == 0) {
                  _Block_release(aBlock);
                }
                if (v112) {
                  CFRelease(v112);
                }
                goto LABEL_224;
              }
              CFTypeRef v94 = __nwlog_obj();
              *(_DWORD *)v128 = 136446210;
              *(void *)&v128[4] = "nw_http_cookie_set";
              os_log_type_t v95 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v117 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v95, type, &v117))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  id v96 = __nwlog_obj();
                  os_log_type_t v97 = type[0];
                  if (os_log_type_enabled(v96, type[0]))
                  {
                    *(_DWORD *)v128 = 136446210;
                    *(void *)&v128[4] = "nw_http_cookie_set";
                    _os_log_impl(&dword_1830D4000, v96, v97, "%{public}s called with null cookies", v128, 0xCu);
                  }
                }
                else
                {
                  if (v117)
                  {
                    char v98 = (char *)__nw_create_backtrace_string();
                    BOOL v99 = __nwlog_obj();
                    os_log_type_t v100 = type[0];
                    BOOL v101 = os_log_type_enabled(v99, type[0]);
                    if (v98)
                    {
                      if (v101)
                      {
                        *(_DWORD *)v128 = 136446466;
                        *(void *)&v128[4] = "nw_http_cookie_set";
                        *(_WORD *)&v128[12] = 2082;
                        *(void *)&v128[14] = v98;
                        _os_log_impl(&dword_1830D4000, v99, v100, "%{public}s called with null cookies, dumping backtrace:%{public}s", v128, 0x16u);
                      }

                      free(v98);
                    }
                    else
                    {
                      if (v101)
                      {
                        *(_DWORD *)v128 = 136446210;
                        *(void *)&v128[4] = "nw_http_cookie_set";
                        _os_log_impl(&dword_1830D4000, v99, v100, "%{public}s called with null cookies, no backtrace", v128, 0xCu);
                      }
                    }
                    goto LABEL_252;
                  }
                  id v96 = __nwlog_obj();
                  os_log_type_t v102 = type[0];
                  if (os_log_type_enabled(v96, type[0]))
                  {
                    *(_DWORD *)v128 = 136446210;
                    *(void *)&v128[4] = "nw_http_cookie_set";
                    _os_log_impl(&dword_1830D4000, v96, v102, "%{public}s called with null cookies, backtrace limit exceeded", v128, 0xCu);
                  }
                }
              }
LABEL_252:
              if (v95) {
                free(v95);
              }
              std::string v13 = v113;
              os_log_type_t v93 = v106;
              char v92 = v107;
              goto LABEL_216;
            }
LABEL_210:
            aBlock = 0;
            char v105 = 1;
            CFTypeRef v63 = v111;
            goto LABEL_211;
          }
          os_log_type_t v72 = __nwlog_obj();
          *(_DWORD *)v128 = 136446210;
          *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
          LODWORD(v104) = 12;
          os_log_type_t v103 = v128;
          uint64_t v69 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v117 = OS_LOG_TYPE_ERROR;
          char v116 = 0;
          if (__nwlog_fault(v69, &v117, &v116))
          {
            if (v117 == OS_LOG_TYPE_FAULT)
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v73 = v117;
              if (os_log_type_enabled(v70, v117))
              {
                *(_DWORD *)v128 = 136446210;
                *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_1830D4000, v70, v73, "%{public}s protocol options are not http_cookie", v128, 0xCu);
              }
LABEL_206:

              goto LABEL_207;
            }
            if (!v116)
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v85 = v117;
              if (os_log_type_enabled(v70, v117))
              {
                *(_DWORD *)v128 = 136446210;
                *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_1830D4000, v70, v85, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", v128, 0xCu);
              }
              goto LABEL_206;
            }
            BOOL v80 = (char *)__nw_create_backtrace_string();
            uint64_t v70 = __nwlog_obj();
            os_log_type_t v81 = v117;
            BOOL v82 = os_log_type_enabled(v70, v117);
            if (!v80)
            {
              if (v82)
              {
                *(_DWORD *)v128 = 136446210;
                *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_1830D4000, v70, v81, "%{public}s protocol options are not http_cookie, no backtrace", v128, 0xCu);
              }
              goto LABEL_206;
            }
            if (v82)
            {
              *(_DWORD *)v128 = 136446466;
              *(void *)&v128[4] = "nw_http_cookie_options_copy_transform_callback";
              *(_WORD *)&v128[12] = 2082;
              *(void *)&v128[14] = v80;
              _os_log_impl(&dword_1830D4000, v70, v81, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", v128, 0x16u);
            }

            free(v80);
          }
LABEL_207:
          if (!v69)
          {
LABEL_209:

            std::string v13 = v113;
            goto LABEL_210;
          }
LABEL_208:
          free(v69);
          goto LABEL_209;
        }
        char v64 = __nwlog_obj();
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
        os_log_type_t v65 = (char *)_os_log_send_and_compose_impl();

        v128[0] = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v65, v128, type))
        {
          if (v128[0] == 17)
          {
            os_log_type_t v66 = __nwlog_obj();
            os_log_type_t v67 = v128[0];
            if (os_log_type_enabled(v66, (os_log_type_t)v128[0]))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
              _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null url", buf, 0xCu);
            }
          }
          else if (type[0])
          {
            os_log_type_t v74 = (char *)__nw_create_backtrace_string();
            os_log_type_t v66 = __nwlog_obj();
            os_log_type_t v75 = v128[0];
            BOOL v76 = os_log_type_enabled(v66, (os_log_type_t)v128[0]);
            if (v74)
            {
              if (v76)
              {
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v74;
                _os_log_impl(&dword_1830D4000, v66, v75, "%{public}s called with null url, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v74);
              goto LABEL_192;
            }
            if (v76)
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
              _os_log_impl(&dword_1830D4000, v66, v75, "%{public}s called with null url, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            os_log_type_t v66 = __nwlog_obj();
            os_log_type_t v83 = v128[0];
            if (os_log_type_enabled(v66, (os_log_type_t)v128[0]))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
              _os_log_impl(&dword_1830D4000, v66, v83, "%{public}s called with null url, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_192:
        if (v65) {
          free(v65);
        }

        std::string v13 = v113;
        uint32_t v20 = endpoint;
        goto LABEL_225;
      }
      BOOL v39 = __nwlog_obj();
      *(_DWORD *)v128 = 136446210;
      *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
      LODWORD(v104) = 12;
      os_log_type_t v103 = v128;
      BOOL v36 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v117 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v36, type, &v117))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          BOOL v37 = __nwlog_obj();
          os_log_type_t v40 = type[0];
          if (os_log_type_enabled(v37, type[0]))
          {
            *(_DWORD *)v128 = 136446210;
            *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s protocol options are not http_cookie", v128, 0xCu);
          }
LABEL_78:

          goto LABEL_135;
        }
        if (v117)
        {
          objc_super v45 = (char *)__nw_create_backtrace_string();
          os_log_type_t v42 = __nwlog_obj();
          os_log_type_t v46 = type[0];
          BOOL v47 = os_log_type_enabled(v42, type[0]);
          if (v45)
          {
            if (v47)
            {
              *(_DWORD *)v128 = 136446466;
              *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
              *(_WORD *)&v128[12] = 2082;
              *(void *)&v128[14] = v45;
              _os_log_impl(&dword_1830D4000, v42, v46, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", v128, 0x16u);
            }

            std::string v13 = v113;
            free(v45);
            if (!v36) {
              goto LABEL_137;
            }
            goto LABEL_136;
          }
          if (v47)
          {
            *(_DWORD *)v128 = 136446210;
            *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            _os_log_impl(&dword_1830D4000, v42, v46, "%{public}s protocol options are not http_cookie, no backtrace", v128, 0xCu);
          }
        }
        else
        {
          os_log_type_t v42 = __nwlog_obj();
          os_log_type_t v49 = type[0];
          if (os_log_type_enabled(v42, type[0]))
          {
            *(_DWORD *)v128 = 136446210;
            *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", v128, 0xCu);
          }
        }
        goto LABEL_134;
      }
LABEL_135:
      if (!v36)
      {
LABEL_137:

        goto LABEL_138;
      }
LABEL_136:
      free(v36);
      goto LABEL_137;
    }
    uint64_t v35 = __nwlog_obj();
    *(_DWORD *)v128 = 136446210;
    *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
    LODWORD(v104) = 12;
    os_log_type_t v103 = v128;
    BOOL v36 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v117 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v36, type, &v117)) {
      goto LABEL_135;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (os_log_type_enabled(v37, type[0]))
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
        _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null options", v128, 0xCu);
      }
      goto LABEL_78;
    }
    if (v117)
    {
      uint64_t v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v43 = type[0];
      BOOL v44 = os_log_type_enabled(v42, type[0]);
      if (v41)
      {
        if (v44)
        {
          *(_DWORD *)v128 = 136446466;
          *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          *(_WORD *)&v128[12] = 2082;
          *(void *)&v128[14] = v41;
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null options, dumping backtrace:%{public}s", v128, 0x16u);
        }

        std::string v13 = v113;
        free(v41);
        goto LABEL_135;
      }
      if (v44)
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null options, no backtrace", v128, 0xCu);
      }
    }
    else
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v48 = type[0];
      if (os_log_type_enabled(v42, type[0]))
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "nw_http_cookie_options_get_should_not_save_cookies";
        _os_log_impl(&dword_1830D4000, v42, v48, "%{public}s called with null options, backtrace limit exceeded", v128, 0xCu);
      }
    }
LABEL_134:

    std::string v13 = v113;
    goto LABEL_135;
  }
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
LABEL_233:

  os_release(v9);
}

void sub_183747964(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http_cookie_create::$_0::__invoke(nw_protocol_http_cookie_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

void ___ZL37nw_protocol_http_cookie_get_callbacksv_block_invoke()
{
  nw_protocol_http_cookie_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F69AF8 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F69B38 = (uint64_t)nw_protocol_common_get_input_frames;
  qword_1E8F69B40 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F69B48 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F69B58 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F69B60 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F69B70 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F69B68 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F69BB0 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F69BB8 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F69B00 = (uint64_t)nw_protocol_common_connect;
  qword_1E8F69B10 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F69B08 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F69B18 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F69B28 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F69B30 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F69BA0 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F69BA8 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F69BF0 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F69B20 = (uint64_t)nw_protocol_common_error;
  qword_1E8F69BE8 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F69BE0 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F69BC8 = (uint64_t)nw_protocol_common_copy_info;
  qword_1E8F69B98 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F69BC0 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F69B78 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F69B80 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F69B88 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F69B90 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F69B50 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F69AF0 = (uint64_t)nw_protocol_http_cookie_remove_input_handler;
}

uint64_t nw_protocol_http_cookie_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v22 = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &v22, &v21)) {
      goto LABEL_49;
    }
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = v22;
      if (!os_log_type_enabled(v9, v22)) {
        goto LABEL_49;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
      BOOL v11 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      goto LABEL_49;
    }
    if (!v21)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
        BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v10 = v22;
    BOOL v14 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
        BOOL v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v14) {
      goto LABEL_35;
    }
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
    __int16 v25 = 2082;
    __int16 v26 = backtrace_string;
    id v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v9, v10, v15, buf, 0x16u);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v22 = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &v22, &v21)) {
      goto LABEL_49;
    }
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = v22;
      if (!os_log_type_enabled(v9, v22)) {
        goto LABEL_49;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
      BOOL v11 = "%{public}s called with null http_cookie";
      goto LABEL_48;
    }
    if (!v21)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
        BOOL v11 = "%{public}s called with null http_cookie, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v10 = v22;
    BOOL v16 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
        BOOL v11 = "%{public}s called with null http_cookie, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v16) {
      goto LABEL_35;
    }
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
    __int16 v25 = 2082;
    __int16 v26 = backtrace_string;
    id v15 = "%{public}s called with null http_cookie, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
  if (a2)
  {
    if ((handle[198] & 1) == 0 && gLogDatapath)
    {
      uint64_t v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
        __int16 v25 = 2082;
        __int16 v26 = handle + 114;
        __int16 v27 = 2080;
        __int16 v28 = " ";
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke;
    v20[3] = &__block_descriptor_tmp_24;
    v20[4] = handle;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_25_15923;
    char v19 = a3;
    v18[4] = a1;
    v18[5] = handle;
    return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v20, (uint64_t)v18);
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
  id v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &v22, &v21)) {
    goto LABEL_49;
  }
  if (v22 != OS_LOG_TYPE_FAULT)
  {
    if (!v21)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
        BOOL v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v9 = __nwlog_obj();
    os_log_type_t v10 = v22;
    BOOL v17 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
        BOOL v11 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v17)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      id v15 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
LABEL_35:
    free(backtrace_string);
    goto LABEL_49;
  }
  id v9 = __nwlog_obj();
  os_log_type_t v10 = v22;
  if (os_log_type_enabled(v9, v22))
  {
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v24 = "nw_protocol_http_cookie_remove_input_handler";
    BOOL v11 = "%{public}s called with null input_protocol";
    goto LABEL_48;
  }
LABEL_49:
  if (v8) {
    free(v8);
  }
  return 0;
}

void ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v2 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v3 = 136446210;
      os_log_type_t v4 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v3, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v1 + 200));
  *(void *)(v1 + 328) = 0;
}

void ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 48)) {
    return;
  }
  *(void *)(*(void *)(a1 + 32) + 40) = 0;
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 288))
    {
      id v2 = *(void **)(v1 + 280);
      if (v2) {
        os_release(v2);
      }
    }
    *(void *)(v1 + 280) = 0;
    if (*(unsigned char *)(v1 + 272))
    {
      int v3 = *(void **)(v1 + 264);
      if (v3) {
        os_release(v3);
      }
    }
    *(void *)(v1 + 264) = 0;
    if (*(unsigned char *)(v1 + 256))
    {
      os_log_type_t v4 = *(void **)(v1 + 248);
      if (v4) {
        os_release(v4);
      }
    }
    free((void *)v1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v14 = "nw_protocol_http_cookie_destroy";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_29;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_http_cookie_destroy";
      id v8 = "%{public}s called with null http_cookie";
      goto LABEL_28;
    }
    if (!v11)
    {
      size_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_29;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_http_cookie_destroy";
      id v8 = "%{public}s called with null http_cookie, backtrace limit exceeded";
      goto LABEL_28;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v14 = "nw_protocol_http_cookie_destroy";
        __int16 v15 = 2082;
        BOOL v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_29;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_http_cookie_destroy";
      id v8 = "%{public}s called with null http_cookie, no backtrace";
LABEL_28:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_29:
  if (v5) {
    free(v5);
  }
}

double __nw_protocol_http_cookie_identifier_block_invoke()
{
  strcpy((char *)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier, "http_cookie");
  *(void *)&double result = 0x100000005;
  qword_1E8F69AD8 = 0x100000005;
  return result;
}

void sub_183749AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18374AA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)NWConcrete_nw_socks5_connection;
  [(_Unwind_Exception *)&a14 dealloc];
  _Unwind_Resume(a1);
}

void sub_18374AEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_socks5_connection_validate_udp_association_block_invoke_2(id *a1)
{
  uint64_t v45 = 0;
  os_log_type_t v46 = &v45;
  uint64_t v47 = 0x2020000000;
  char v48 = 0;
  id v2 = a1[4];
  if (*((unsigned __int8 *)v2 + 56) != 255 && (char)v2[20] < 0)
  {
    uint64_t v17 = (void *)v2[4];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v55 = 0;
      char v56 = &v55;
      uint64_t v57 = 0x2020000000;
      char v58 = 0;
      char v19 = v18 + 34;
      id location = (id)MEMORY[0x1E4F143A8];
      uint64_t v50 = 3221225472;
      BOOL v51 = __nw_connection_is_cancelled_or_failed_block_invoke;
      id v52 = &unk_1E524B978;
      os_log_type_t v54 = &v55;
      uint32_t v20 = v18;
      id v53 = v20;
      os_unfair_lock_lock(v19);
      v51((uint64_t)&location);
      os_unfair_lock_unlock(v19);
      LODWORD(v19) = *((unsigned __int8 *)v56 + 24);

      _Block_object_dispose(&v55, 8);
      if (!v19)
      {
        id v21 = *((id *)a1[4] + 21);
        os_log_type_t v22 = v21;
        if (v21)
        {
          os_log_type_t v23 = (os_unfair_lock_s *)v21;
          uint64_t v55 = 0;
          char v56 = &v55;
          uint64_t v57 = 0x2020000000;
          char v58 = 0;
          os_log_type_t v24 = v23 + 34;
          id location = (id)MEMORY[0x1E4F143A8];
          uint64_t v50 = 3221225472;
          BOOL v51 = __nw_connection_is_cancelled_or_failed_block_invoke;
          id v52 = &unk_1E524B978;
          os_log_type_t v54 = &v55;
          __int16 v25 = v23;
          id v53 = v25;
          os_unfair_lock_lock(v24);
          v51((uint64_t)&location);
          os_unfair_lock_unlock(v24);
          LODWORD(v24) = *((unsigned __int8 *)v56 + 24);

          _Block_object_dispose(&v55, 8);
          if (!v24) {
            *((unsigned char *)v46 + 24) = 1;
          }
        }
      }
    }
  }
  if (*((unsigned char *)v46 + 24))
  {
    int v3 = *((id *)a1[4] + 21);
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
    }
    os_log_type_t v4 = (id)g_tcp_definition;
    nw_protocol_metadata_t v5 = nw_connection_copy_protocol_metadata(v3, v4);

    if (v5)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v6 = (id)nw_context_copy_implicit_context::implicit_context;
      v39[0] = MEMORY[0x1E4F143A8];
      v39[1] = 3221225472;
      v39[2] = __nw_socks5_connection_validate_udp_association_block_invoke_4;
      v39[3] = &unk_1E5249868;
      id v40 = a1[4];
      uint64_t v41 = v3;
      os_log_type_t v42 = v5;
      nw_queue_context_async_if_needed(v6, v39);
    }
    objc_initWeak(&location, a1[4]);
    id v7 = *((id *)a1[4] + 5);
    ++*((_DWORD *)a1[4] + 22);
    id v8 = a1[4];
    uint64_t v9 = v8[10];
    if (v9)
    {
      nw_queue_cancel_source(v9);
      *((void *)a1[4] + 10) = 0;
      id v8 = a1[4];
    }
    int v10 = *((_DWORD *)v8 + 22);
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = __nw_socks5_connection_validate_udp_association_block_invoke_8;
    v34[3] = &unk_1E523C778;
    objc_copyWeak(&v38, &location);
    id v35 = a1[5];
    id v37 = a1[6];
    id v11 = v7;
    id v36 = v11;
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __nw_socks5_connection_validate_udp_association_block_invoke_4_11;
    v26[3] = &unk_1E523C7C8;
    objc_copyWeak(&v32, &location);
    id v27 = a1[5];
    id v30 = a1[6];
    id v12 = v11;
    id v28 = v12;
    BOOL v31 = &v45;
    int v33 = v10;
    std::string v13 = v3;
    uint64_t v29 = v13;
    BOOL source = nw_queue_context_create_source(0, 2, 3, 0, v34, v26);
    dispatch_time_t v15 = dispatch_time(0x8000000000000000, 5000000000);
    nw_queue_set_timer_values(source, v15, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    nw_queue_activate_source(source);
    *((void *)a1[4] + 10) = source;

    objc_destroyWeak(&v32);
    objc_destroyWeak(&v38);

    objc_destroyWeak(&location);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_3;
    block[3] = &unk_1E524AFA8;
    BOOL v16 = a1[5];
    BOOL v44 = a1[6];
    dispatch_async(v16, block);
    std::string v13 = v44;
  }

  _Block_object_dispose(&v45, 8);
}

void sub_18374B65C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v4 - 176));
  _Block_object_dispose((const void *)(v4 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_socks5_connection_validate_udp_association_block_invoke_4(uint64_t a1)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 136446722;
    os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke_4";
    __int16 v25 = 2114;
    uint64_t v26 = v3;
    __int16 v27 = 2114;
    v28[0] = v4;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ enabling keep alives for %{public}@", buf, 0x20u);
  }

  if (nw_tcp_reset_keepalives(*(void **)(a1 + 48), 1, 5, 1, 1))
  {
    int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
    __int16 v25 = 2114;
    uint64_t v26 = v7;
    __int16 v27 = 1024;
    LODWORD(v28[0]) = v5;
    id v8 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v11;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        id v12 = "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d";
LABEL_18:
        uint64_t v18 = v9;
        os_log_type_t v19 = v10;
        goto LABEL_19;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v17;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        id v12 = "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_20:

          if (!v8) {
            return;
          }
LABEL_14:
          free(v8);
          return;
        }
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v20;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        id v12 = "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d, no backtrace";
        uint64_t v18 = v9;
        os_log_type_t v19 = v14;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v18, v19, v12, buf, 0x1Cu);
        goto LABEL_20;
      }
      if (v15)
      {
        uint64_t v16 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446978;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v16;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        WORD2(v28[0]) = 2082;
        *(void *)((char *)v28 + 6) = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
      }

      free(backtrace_string);
    }
    if (!v8) {
      return;
    }
    goto LABEL_14;
  }
}

void __nw_socks5_connection_validate_udp_association_block_invoke_8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __nw_socks5_connection_validate_udp_association_block_invoke_3_10;
    v9[3] = &unk_1E524BAA8;
    int v5 = &v10;
    id v10 = WeakRetained;
    id v6 = v9;
    uint64_t v7 = v4;
  }
  else
  {
    id v8 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_2_9;
    block[3] = &unk_1E524AFA8;
    int v5 = &v12;
    id v12 = *(id *)(a1 + 48);
    id v6 = block;
    uint64_t v7 = v8;
  }
  dispatch_async(v7, v6);
}

void __nw_socks5_connection_validate_udp_association_block_invoke_4_11(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_6;
    block[3] = &unk_1E523C7A0;
    uint64_t v12 = *(void *)(a1 + 64);
    int v5 = &v8;
    id v8 = WeakRetained;
    int v13 = *(_DWORD *)(a1 + 80);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 56);
    dispatch_async(v4, block);
  }
  else
  {
    id v6 = *(NSObject **)(a1 + 32);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_socks5_connection_validate_udp_association_block_invoke_5;
    v14[3] = &unk_1E524AFA8;
    int v5 = &v15;
    id v15 = *(id *)(a1 + 56);
    dispatch_async(v6, v14);
  }
}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_socks5_connection_validate_udp_association_block_invoke_6(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 56) != 255 && *(_DWORD *)(a1 + 72) == *(_DWORD *)(v2 + 88))
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v25 = 0;
      uint64_t v26 = &v25;
      uint64_t v27 = 0x2020000000;
      char v28 = 0;
      int v5 = v4 + 34;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_connection_is_cancelled_or_failed_block_invoke;
      v22[3] = &unk_1E524B978;
      os_log_type_t v24 = &v25;
      id v6 = v4;
      os_log_type_t v23 = v6;
      os_unfair_lock_lock(v5);
      __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)v22);
      os_unfair_lock_unlock(v5);
      LODWORD(v5) = *((unsigned __int8 *)v26 + 24);

      _Block_object_dispose(&v25, 8);
      if (!v5)
      {
        uint64_t v7 = *(NSObject **)(a1 + 40);
        if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
        }
        id v8 = (id)g_tcp_definition;
        nw_protocol_metadata_t v9 = nw_connection_copy_protocol_metadata(v7, v8);

        if (nw_context_copy_implicit_context::onceToken != -1) {
          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
        }
        id v10 = (id)nw_context_copy_implicit_context::implicit_context;
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 3221225472;
        v18[2] = __nw_socks5_connection_validate_udp_association_block_invoke_7;
        v18[3] = &unk_1E5249868;
        id v19 = *(id *)(a1 + 32);
        id v20 = *(id *)(a1 + 40);
        id v11 = v9;
        char v21 = v11;
        nw_queue_context_async_if_needed(v10, v18);

        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      }
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_12;
  block[3] = &unk_1E5242B38;
  uint64_t v12 = *(NSObject **)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  id v16 = v13;
  uint64_t v17 = v14;
  dispatch_async(v12, block);
}

void sub_18374C06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_18374C098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_socks5_connection_validate_udp_association_block_invoke_7(uint64_t a1)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 136446722;
    os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke_7";
    __int16 v25 = 2114;
    uint64_t v26 = v3;
    __int16 v27 = 2114;
    v28[0] = v4;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ disabling keep alives for %{public}@", buf, 0x20u);
  }

  if (nw_tcp_reset_keepalives(*(void **)(a1 + 48), 0, 0, 0, 0))
  {
    int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
    __int16 v25 = 2114;
    uint64_t v26 = v7;
    __int16 v27 = 1024;
    LODWORD(v28[0]) = v5;
    id v8 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_protocol_metadata_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v11;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        uint64_t v12 = "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d";
LABEL_18:
        uint64_t v18 = v9;
        os_log_type_t v19 = v10;
        goto LABEL_19;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_protocol_metadata_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v17;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        uint64_t v12 = "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_protocol_metadata_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_20:

          if (!v8) {
            return;
          }
LABEL_14:
          free(v8);
          return;
        }
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v20;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        uint64_t v12 = "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d, no backtrace";
        uint64_t v18 = v9;
        os_log_type_t v19 = v14;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v18, v19, v12, buf, 0x1Cu);
        goto LABEL_20;
      }
      if (v15)
      {
        uint64_t v16 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446978;
        os_log_type_t v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v16;
        __int16 v27 = 1024;
        LODWORD(v28[0]) = v5;
        WORD2(v28[0]) = 2082;
        *(void *)((char *)v28 + 6) = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
      }

      free(backtrace_string);
    }
    if (!v8) {
      return;
    }
    goto LABEL_14;
  }
}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_12(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_2_9(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_socks5_connection_validate_udp_association_block_invoke_3_10(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 80);
  if (v2)
  {
    nw_queue_cancel_source(v2);
    *(void *)(*(void *)(a1 + 32) + 80) = 0;
  }
}

void __nw_socks5_connection_set_cancel_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v2;
}

void __nw_socks5_connection_start_block_invoke(uint64_t a1)
{
}

void nw_socks5_connection_start_on_queue(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  id v5 = a2;
  nw_connection_t v6 = v4[4];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = ___ZL35nw_socks5_connection_start_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObject_block_invoke;
  v17[3] = &unk_1E524BAA8;
  uint64_t v7 = v4;
  uint64_t v18 = v7;
  nw_connection_set_read_close_handler(v6, v17);
  id v8 = v4[4];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = ___ZL35nw_socks5_connection_start_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObject_block_invoke_142;
  handler[3] = &unk_1E524BB98;
  nw_protocol_metadata_t v9 = v7;
  BOOL v15 = v9;
  id v10 = v5;
  id v16 = v10;
  nw_connection_set_state_changed_handler(v8, handler);
  nw_connection_set_queue(v4[4], v9[5]);
  nw_connection_start(v4[4]);
  uint64_t v11 = mach_continuous_time();
  if (v11 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v11;
  }
  v9[17] = (nw_connection_t)v12;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v13 = (id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v20 = "nw_socks5_connection_start_on_queue";
    __int16 v21 = 2114;
    os_log_type_t v22 = v9;
    _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s %{public}@ started connection", buf, 0x16u);
  }

  if (!v9[2]) {
    objc_storeStrong((id *)v9 + 2, a1);
  }
}

void sub_18374C7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_cancel_on_queue(void *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3[56] != 255)
  {
    if (v4 && !*((void *)v3 + 19)) {
      objc_storeStrong((id *)v3 + 19, a2);
    }
    uint64_t v6 = *((void *)v3 + 17);
    if (v6)
    {
      uint64_t v7 = mach_continuous_time();
      if (v7 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v7;
      }
      double v9 = (double)(unint64_t)nw_delta_nanos(v6, v8) * 0.000000001;
    }
    else
    {
      double v9 = 0.0;
    }
    unint64_t v10 = *((void *)v3 + 16);
    if (*((void *)v3 + 14))
    {
      uint64_t v11 = *((void *)v3 + 15);
      if (v11)
      {
        uint64_t v12 = mach_continuous_time();
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        v10 += nw_delta_nanos(v11, v13);
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *((void *)v3 + 23);
      uint64_t v16 = *((void *)v3 + 24);
      uint64_t v17 = *((void *)v3 + 25);
      uint64_t v18 = *((void *)v3 + 26);
      uint64_t v19 = *((void *)v3 + 19);
      uint64_t v20 = *((void *)v3 + 14);
      *(_DWORD *)long long buf = 136448514;
      uint64_t v26 = "nw_socks5_connection_cancel_on_queue";
      __int16 v27 = 2114;
      char v28 = v3;
      __int16 v29 = 2048;
      uint64_t v30 = v15;
      __int16 v31 = 2048;
      uint64_t v32 = v16;
      __int16 v33 = 2048;
      uint64_t v34 = v17;
      __int16 v35 = 2048;
      uint64_t v36 = v18;
      __int16 v37 = 2048;
      double v38 = (double)v10 * 0.000000001;
      __int16 v39 = 2048;
      double v40 = v9;
      __int16 v41 = 2114;
      uint64_t v42 = v19;
      __int16 v43 = 2048;
      uint64_t v44 = v20;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ outRead %llu, outWrite %llu, inRead %llu, inWrite %llu, busyTime %0.3fs, totalTime %0.3fs, error %{public}@, busyCount %llu", buf, 0x66u);
    }

    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = ___ZL36nw_socks5_connection_cancel_on_queueP31NWConcrete_nw_socks5_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke;
    v23[3] = &unk_1E523FCB0;
    __int16 v21 = v3;
    os_log_type_t v24 = v21;
    nw_socks5_connection_send_reply_on_queue(v21, 0, v23);
    v3[56] = -1;
    uint64_t v22 = *((void *)v21 + 10);
    if (v22)
    {
      nw_queue_cancel_source(v22);
      *((void *)v21 + 10) = 0;
    }
  }
}

void sub_18374CA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_inner_connection_read_handler_on_queue(void *a1, void *a2, int a3, int a4, size_t a5)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  double v9 = a1;
  unint64_t v10 = a2;
  uint64_t v11 = v10;
  if (v9->sc_state == 255 || (*((unsigned char *)v9 + 160) & 1) != 0) {
    goto LABEL_103;
  }
  if (v10) {
    size_t size = dispatch_data_get_size(v10);
  }
  else {
    size_t size = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&v9->sc_parent);
  if (a4 || size < a5)
  {
    if (!a4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = (id)gLogObj;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        uint64_t v23 = "not";
        *(_DWORD *)long long buf = 136447234;
        *(void *)&buf[14] = v9;
        if (a3) {
          uint64_t v23 = "is";
        }
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = size;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = a5;
        *(_WORD *)&buf[42] = 2082;
        *(void *)&buf[44] = v23;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection read data len %zu < %zu %{public}s_complete", buf, 0x34u);
      }

      goto LABEL_34;
    }
    if (a4 == 55 && *((char *)v9 + 160) < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v21 = (id)gLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 55;
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring error %d", buf, 0x1Cu);
      }

      nw_socks5_connection_inner_connection_read_on_queue(v9);
      goto LABEL_102;
    }
    switch(a4)
    {
      case 6:
      case 32:
      case 49:
      case 50:
      case 51:
      case 53:
      case 54:
      case 57:
      case 60:
      case 61:
      case 65:
      case 96:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (id)gLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          __int16 v25 = "not";
          *(_DWORD *)long long buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          if (a3) {
            __int16 v25 = "is";
          }
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          *(_WORD *)&buf[32] = 2082;
          *(void *)&buf[34] = v25;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = a4;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
        }

        goto LABEL_34;
      default:
        __int16 v62 = __nwlog_obj();
        *(_DWORD *)long long buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&buf[14] = v9;
        if (a3) {
          CFTypeRef v63 = "is";
        }
        else {
          CFTypeRef v63 = "not";
        }
        *(void *)&unsigned char buf[24] = size;
        *(_WORD *)&buf[32] = 2082;
        *(void *)&buf[34] = v63;
        *(_WORD *)&buf[42] = 1024;
        *(_DWORD *)&buf[44] = a4;
        char v64 = (char *)_os_log_send_and_compose_impl();

        type[0].os_log_type_t sa_len = 16;
        __str[0] = 0;
        if (!__nwlog_fault(v64, type, __str)) {
          goto LABEL_212;
        }
        if (type[0].sa_len == 17)
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t sa_len = type[0].sa_len;
          if (os_log_type_enabled(v65, (os_log_type_t)type[0].sa_len))
          {
            *(_DWORD *)long long buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v63;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = a4;
            _os_log_impl(&dword_1830D4000, v65, sa_len, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
          }
        }
        else if (__str[0])
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v145 = type[0].sa_len;
          BOOL v78 = os_log_type_enabled(v65, (os_log_type_t)type[0].sa_len);
          if (backtrace_string)
          {
            if (v78)
            {
              *(_DWORD *)long long buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v9;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = size;
              *(_WORD *)&buf[32] = 2082;
              *(void *)&buf[34] = v63;
              *(_WORD *)&buf[42] = 1024;
              *(_DWORD *)&buf[44] = a4;
              *(_WORD *)&buf[48] = 2082;
              *(void *)&buf[50] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v65, v145, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x3Au);
            }

            free(backtrace_string);
            goto LABEL_212;
          }
          if (v78)
          {
            *(_DWORD *)long long buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v63;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = a4;
            _os_log_impl(&dword_1830D4000, v65, v145, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, no backtrace", buf, 0x30u);
          }
        }
        else
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v88 = type[0].sa_len;
          if (os_log_type_enabled(v65, (os_log_type_t)type[0].sa_len))
          {
            *(_DWORD *)long long buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v63;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = a4;
            _os_log_impl(&dword_1830D4000, v65, v88, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, backtrace limit exceeded", buf, 0x30u);
          }
        }

LABEL_212:
        if (v64) {
          free(v64);
        }
LABEL_34:
        if (v9->sc_state != 200)
        {
LABEL_101:
          nw_socks5_connection_cancel_on_queue(v9, 0);
          goto LABEL_102;
        }
        nw_socks5_connection_increment_busy_on_queue(v9, WeakRetained);
        p_super = &v9->sc_out_connection->super;
        completion[0] = MEMORY[0x1E4F143A8];
        completion[1] = 3221225472;
        completion[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke;
        completion[3] = &unk_1E523C7F0;
        v173 = v9;
        id v174 = WeakRetained;
        nw_connection_send(p_super, 0, (nw_content_context_t)&__block_literal_global_6_42258, 1, completion);

LABEL_102:
LABEL_103:

        return;
    }
  }
  if (gLogDatapath)
  {
    v133 = __nwlog_obj();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
    {
      v134 = "not";
      *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(_DWORD *)long long buf = 136446978;
      *(void *)&buf[14] = v9;
      if (a3) {
        v134 = "is";
      }
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = size;
      *(_WORD *)&buf[32] = 2082;
      *(void *)&buf[34] = v134;
      _os_log_impl(&dword_1830D4000, v133, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ read %zu bytes %{public}s_complete from inner connection", buf, 0x2Au);
    }
  }
  if (!v11 || !size) {
    goto LABEL_102;
  }
  int sc_state = v9->sc_state;
  switch(v9->sc_state)
  {
    case 0u:
    case 1u:
    case 7u:
    case 8u:
    case 0x65u:
    case 0x68u:
    case 0x69u:
      goto LABEL_12;
    case 2u:
      *(_WORD *)&type[0].os_log_type_t sa_len = 0;
      if (size == 2)
      {
        nw_dispatch_data_copyout(v11, (uint64_t)type, 2);
        if (type[0].sa_len == 5)
        {
          int sa_family = type[0].sa_family;
          os_log_type_t v46 = __nwlog_obj();
          double v38 = v46;
          if (sa_family)
          {
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v9;
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = type[0].sa_len;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = type[0].sa_family;
              _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for version %u nMethods %u", buf, 0x22u);
            }

            v9->int sc_state = 3;
            nw_socks5_connection_inner_connection_read_range_on_queue(v9, type[0].sa_family, type[0].sa_family);
            goto LABEL_102;
          }
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
            goto LABEL_217;
          }
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          os_log_type_t v73 = "%{public}s %{public}@ connection received zero nMethods";
          os_log_type_t v74 = v38;
          uint32_t v75 = 22;
        }
        else
        {
          double v38 = __nwlog_obj();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            goto LABEL_217;
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = type[0].sa_len;
          os_log_type_t v73 = "%{public}s %{public}@ connection received unsupported socks version %u";
          os_log_type_t v74 = v38;
          uint32_t v75 = 28;
        }
      }
      else
      {
        double v38 = __nwlog_obj();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = size;
        os_log_type_t v73 = "%{public}s %{public}@ connection received unexpected number of bytes %zu";
        os_log_type_t v74 = v38;
        uint32_t v75 = 32;
      }
      _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_ERROR, v73, buf, v75);
      goto LABEL_217;
    case 3u:
      if (size >= 0x100)
      {
        uint64_t v36 = __nwlog_obj();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }
        goto LABEL_175;
      }
      nw_dispatch_data_copyout(v11, (uint64_t)buf, 255);
      uint64_t v71 = 0;
      while (buf[v71])
      {
        if (size == ++v71)
        {
          __int16 v43 = __nwlog_obj();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&type[0].os_log_type_t sa_len = 136446466;
            *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&type[0].sa_data[10] = 2114;
            *(void *)&type[0].sa_data[12] = v9;
            _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ unsupported auth methods", &type[0].sa_len, 0x16u);
          }
          goto LABEL_125;
        }
      }
      os_log_type_t v84 = __nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)&type[0].os_log_type_t sa_len = 136446466;
        *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&type[0].sa_data[10] = 2114;
        *(void *)&type[0].sa_data[12] = v9;
        _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ picking auth method: none", &type[0].sa_len, 0x16u);
      }

      v9->int sc_state = 4;
      *(_WORD *)&type[0].os_log_type_t sa_len = 5;
      os_log_type_t v85 = dispatch_data_create(type, 2uLL, 0, 0);
      nw_socks5_connection_increment_busy_on_queue(v9, WeakRetained);
      os_log_type_t v86 = &v9->sc_in_connection->super;
      v154[0] = MEMORY[0x1E4F143A8];
      v154[1] = 3221225472;
      v154[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_157;
      v154[3] = &unk_1E523C7F0;
      v155 = v9;
      id v156 = WeakRetained;
      nw_connection_send(v86, v85, (nw_content_context_t)&__block_literal_global_42249, 1, v154);

      goto LABEL_102;
    case 4u:
      *(_DWORD *)&type[0].os_log_type_t sa_len = 0;
      if (size != 4)
      {
        double v38 = __nwlog_obj();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = size;
        v68 = "%{public}s %{public}@ connection received unexpected number of bytes %zu";
        uint64_t v69 = v38;
        uint32_t v70 = 32;
        goto LABEL_182;
      }
      nw_dispatch_data_copyout(v11, (uint64_t)type, 4);
      if (type[0].sa_len != 5)
      {
        double v38 = __nwlog_obj();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = type[0].sa_len;
        v68 = "%{public}s %{public}@ connection received unsupported socks version %u";
        goto LABEL_181;
      }
      if (type[0].sa_family != 1)
      {
        double v38 = __nwlog_obj();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = type[0].sa_family;
        v68 = "%{public}s %{public}@ connection received unsupported command %u";
        goto LABEL_181;
      }
      if (type[0].sa_data[1] <= 4u && ((1 << type[0].sa_data[1]) & 0x1A) != 0)
      {
        __int16 v33 = __nwlog_obj();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = type[0].sa_len;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = type[0].sa_family;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = type[0].sa_data[1];
          _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for version %u command %u addressType %u", buf, 0x28u);
        }

        int v34 = type[0].sa_data[1];
        v9->sc_out_address_os_log_type_t type = type[0].sa_data[1];
        switch(v34)
        {
          case 1:
            unsigned int v35 = 4;
            break;
          case 3:
            unsigned int v35 = 1;
            break;
          case 4:
            unsigned int v35 = 16;
            break;
          default:
            id v109 = __nwlog_obj();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              sc_out_address_os_log_type_t type = v9->sc_out_address_type;
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v9;
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = sc_out_address_type;
              _os_log_impl(&dword_1830D4000, v109, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ address type %u not handled", buf, 0x1Cu);
            }

            nw_socks5_connection_cancel_on_queue(v9, 0);
            unsigned int v35 = 0;
            break;
        }
        v9->int sc_state = 5;
        nw_socks5_connection_inner_connection_read_range_on_queue(v9, v35, v35);
        goto LABEL_102;
      }
      double v38 = __nwlog_obj();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = type[0].sa_data[1];
        v68 = "%{public}s %{public}@ connection received unsupported address type %u";
LABEL_181:
        uint64_t v69 = v38;
        uint32_t v70 = 28;
LABEL_182:
        _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_ERROR, v68, buf, v70);
        goto LABEL_217;
      }
      goto LABEL_217;
    case 5u:
      int v40 = v9->sc_out_address_type;
      if (v40 == 1 || v40 == 4)
      {
        if ((v40 != 1 || size == 4) && (v40 != 4 || size == 16)) {
          goto LABEL_150;
        }
        uint64_t v36 = __nwlog_obj();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }
LABEL_175:

        goto LABEL_101;
      }
      if (v40 != 3 || !v9->sc_out_address_domain_length)
      {
        if (size == 1)
        {
          type[0].os_log_type_t sa_len = 0;
          nw_dispatch_data_copyout(v11, (uint64_t)type, 1);
          int v41 = type[0].sa_len;
          uint64_t v42 = __nwlog_obj();
          __int16 v43 = v42;
          if (v41)
          {
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v9;
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = type[0].sa_len;
              _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request has address length %u", buf, 0x1Cu);
            }

            unsigned int v44 = type[0].sa_len;
            v9->sc_out_address_domain_length = type[0].sa_len;
            nw_socks5_connection_inner_connection_read_range_on_queue(v9, v44, v44);
          }
          else
          {
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v9;
              _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ address length is zero", buf, 0x16u);
            }
LABEL_125:

            nw_socks5_connection_cancel_on_queue(v9, 0);
          }
          goto LABEL_102;
        }
        uint64_t v36 = __nwlog_obj();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }
        goto LABEL_175;
      }
LABEL_150:
      if (v40 == 3) {
        size_t v79 = size + 1;
      }
      else {
        size_t v79 = size;
      }
      if (!v79)
      {
        uint64_t v137 = __nwlog_obj();
        os_log_type_enabled(v137, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "strict_malloc";
        v138 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v138)) {
          goto LABEL_306;
        }
        free(v138);
      }
      BOOL v80 = (char *)malloc_type_malloc(v79, 0xF2B69DE5uLL);
      if (v80) {
        goto LABEL_155;
      }
      v139 = __nwlog_obj();
      os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "strict_malloc";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v79;
      v140 = (void *)_os_log_send_and_compose_impl();

      if (!__nwlog_abort((uint64_t)v140))
      {
        free(v140);
LABEL_155:
        v9->sc_out_address.byte_pointer = v80;
        nw_dispatch_data_copyout(v11, (uint64_t)v80, size);
        int v81 = v9->sc_out_address_type;
        if (v81 == 3)
        {
          v9->sc_out_address.byte_pointer[size] = 0;
          int v81 = v9->sc_out_address_type;
        }
        switch(v81)
        {
          case 4:
            BOOL v82 = __nwlog_obj();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v97 = inet_ntop(2, v9->sc_out_address.byte_pointer, buf, 0x2Eu);
              *(_DWORD *)&type[0].os_log_type_t sa_len = 136446722;
              *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&type[0].sa_data[10] = 2114;
              *(void *)&type[0].sa_data[12] = v9;
              *(_WORD *)&type[1].sa_data[4] = 2082;
              *(void *)&type[1].sa_data[6] = v97;
              _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for ipv6 %{public}s", &type[0].sa_len, 0x20u);
            }
            break;
          case 3:
            os_log_type_t v95 = __nwlog_obj();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
            {
              byte_pointer = v9->sc_out_address.byte_pointer;
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v9;
              *(_WORD *)&unsigned char buf[22] = 2082;
              *(void *)&unsigned char buf[24] = byte_pointer;
              _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for domain %{public}s", buf, 0x20u);
            }

            goto LABEL_224;
          case 1:
            BOOL v82 = __nwlog_obj();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v83 = inet_ntop(2, v9->sc_out_address.byte_pointer, (char *)type, 0x10u);
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v9;
              *(_WORD *)&unsigned char buf[22] = 2082;
              *(void *)&unsigned char buf[24] = v83;
              _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for ipv4 %{public}s", buf, 0x20u);
            }
            break;
          default:
LABEL_224:
            v9->int sc_state = 6;
            nw_socks5_connection_inner_connection_read_range_on_queue(v9, 2u, 2u);
            goto LABEL_102;
        }

        goto LABEL_224;
      }
LABEL_306:
      __break(1u);
      return;
    case 6u:
      *(_WORD *)&type[0].os_log_type_t sa_len = 0;
      if (size != 2)
      {
        BOOL v76 = __nwlog_obj();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }

        nw_socks5_connection_cancel_on_queue(v9, 0);
        goto LABEL_102;
      }
      nw_dispatch_data_copyout(v11, (uint64_t)type, 2);
      uint64_t v47 = __nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = bswap32(*(unsigned __int16 *)&type[0].sa_len) >> 16;
        _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for port %u", buf, 0x1Cu);
      }

      int v48 = v9->sc_out_address_type;
      switch(v48)
      {
        case 4:
          *(_WORD *)long long buf = 7708;
          *(_WORD *)&buf[2] = *(_WORD *)&type[0].sa_len;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_OWORD *)&buf[8] = *(_OWORD *)v9->sc_out_address.byte_pointer;
          *(_DWORD *)&unsigned char buf[24] = 0;
          nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)buf);
          break;
        case 3:
          *(_WORD *)&uint8_t buf[4] = 0;
          *(_DWORD *)long long buf = 0;
          snprintf(buf, 6uLL, "%u", bswap32(*(unsigned __int16 *)&type[0].sa_len) >> 16);
          nw_endpoint_t address = nw_endpoint_create_host(v9->sc_out_address.byte_pointer, buf);
          break;
        case 1:
          *(_WORD *)long long buf = 528;
          *(_WORD *)&buf[2] = *(_WORD *)&type[0].sa_len;
          *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)v9->sc_out_address.byte_pointer;
          *(void *)&buf[8] = 0;
          nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)buf);
          break;
        default:
          nw_endpoint_t v89 = 0;
          goto LABEL_188;
      }
      nw_endpoint_t v89 = address;
LABEL_188:
      BOOL v90 = v9->sc_out_address.byte_pointer;
      if (v90)
      {
        free(v90);
        v9->sc_out_address.byte_pointer = 0;
      }
      CFTypeRef v91 = __nwlog_obj();
      char v92 = v91;
      if (v89)
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(v89);
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2082;
          *(void *)&unsigned char buf[24] = logging_description;
          _os_log_impl(&dword_1830D4000, v92, OS_LOG_TYPE_INFO, "%{public}s %{public}@ instantiated endpoint: %{public}s", buf, 0x20u);
        }

        v9->int sc_state = 7;
        nw_socks5_connection_connect_outer_on_queue(v9, v89, 0);
      }
      else
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          _os_log_impl(&dword_1830D4000, v92, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed to instantiate endpoint", buf, 0x16u);
        }

        nw_socks5_connection_cancel_on_queue(v9, 0);
      }

      goto LABEL_102;
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
      goto LABEL_102;
    case 0x66u:
      *(_WORD *)&type[0].os_log_type_t sa_len = 0;
      if (size == 2)
      {
        nw_dispatch_data_copyout(v11, (uint64_t)type, 2);
        unsigned int v50 = bswap32(*(unsigned __int16 *)&type[0].sa_len);
        unsigned int v51 = HIWORD(v50);
        v9->int sc_shoes_request_length_hbo = HIWORD(v50);
        id v52 = __nwlog_obj();
        double v38 = v52;
        if (v51 > 3)
        {
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
          {
            int sc_shoes_request_length_hbo = v9->sc_shoes_request_length_hbo;
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = sc_shoes_request_length_hbo;
            _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ shoes client request with length %u", buf, 0x1Cu);
          }

          v9->int sc_state = 103;
          nw_socks5_connection_inner_connection_read_range_on_queue(v9, v9->sc_shoes_request_length_hbo, v9->sc_shoes_request_length_hbo);
          goto LABEL_102;
        }
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        int v53 = v9->sc_shoes_request_length_hbo;
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = v53;
        os_log_type_t v54 = "%{public}s %{public}@ connection received invalid shoes request length %u";
        uint64_t v55 = v38;
        uint32_t v56 = 28;
      }
      else
      {
        double v38 = __nwlog_obj();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = size;
        os_log_type_t v54 = "%{public}s %{public}@ shoes_connected connection received unexpected number of bytes %zu";
        uint64_t v55 = v38;
        uint32_t v56 = 32;
      }
      _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_ERROR, v54, buf, v56);
      goto LABEL_217;
    case 0x67u:
      if (size != v9->sc_shoes_request_length_hbo)
      {
        uint64_t v36 = __nwlog_obj();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          int v72 = v9->sc_shoes_request_length_hbo;
          *(_DWORD *)long long buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v72;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ shoes_got_length connection received unexpected number of bytes %zu (expected %u)", buf, 0x26u);
        }
        goto LABEL_175;
      }
      memset(&buf[32], 0, 229);
      if (size >= 0x103) {
        uint64_t v37 = 259;
      }
      else {
        uint64_t v37 = size;
      }
      memset(buf, 0, 32);
      nw_dispatch_data_copyout(v11, (uint64_t)&buf[2], v37);
      switch(buf[2])
      {
        case 1:
        case 4:
          if (size >= (unint64_t)buf[5] + 4)
          {
            LOWORD(v176) = 0;
            *(_DWORD *)__str = 0;
            snprintf(__str, 6uLL, "%u", bswap32(*(unsigned __int16 *)&buf[3]) >> 16);
            memset(type, 0, sizeof(type));
            LODWORD(v94) = buf[5];
            if (buf[5])
            {
              uint64_t v104 = &buf[6];
              char v105 = type;
              uint64_t v106 = buf[5];
              while (1)
              {
                int v107 = *v104;
                v105->os_log_type_t sa_len = v107;
                if (!v107) {
                  break;
                }
                char v105 = (sockaddr *)((char *)v105 + 1);
                ++v104;
                if (!--v106) {
                  goto LABEL_250;
                }
              }
            }
            else
            {
              char v105 = type;
LABEL_250:
              v105->os_log_type_t sa_len = 0;
            }
            nw_endpoint_t host = nw_endpoint_create_host((const char *)type, __str);
            goto LABEL_252;
          }
          double v38 = __nwlog_obj();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].os_log_type_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          __int16 v39 = "%{public}s %{public}@ shoes_got_length connection received hostname request too short %zu";
          goto LABEL_207;
        case 2:
        case 5:
          if (size > 0x12)
          {
            *(void *)&type[0].os_log_type_t sa_len = 7708;
            *(_DWORD *)&type[1].sa_data[6] = unk_183D5CF68;
            *(_WORD *)type[0].sa_data = *(_WORD *)&buf[3];
            *(sockaddr *)&type[0].sa_data[6] = *(sockaddr *)&buf[5];
            nw_endpoint_t v98 = nw_endpoint_create_address(type);
            unsigned int v99 = 19;
            goto LABEL_253;
          }
          double v38 = __nwlog_obj();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].os_log_type_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          __int16 v39 = "%{public}s %{public}@ shoes_got_length connection received IPv6 request too short %zu";
          goto LABEL_207;
        case 3:
        case 6:
          if (size > 6)
          {
            type[0] = (sockaddr)xmmword_183E23448;
            *(_WORD *)type[0].sa_data = *(_WORD *)&buf[3];
            *(_DWORD *)&type[0].sa_data[2] = *(_DWORD *)&buf[5];
            nw_endpoint_t v98 = nw_endpoint_create_address(type);
            unsigned int v99 = 7;
            goto LABEL_253;
          }
          double v38 = __nwlog_obj();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].os_log_type_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          __int16 v39 = "%{public}s %{public}@ shoes_got_length connection received IPv4 request too short %zu";
          goto LABEL_207;
        case 7:
        case 8:
          size_t v94 = buf[5];
          if (size >= (unint64_t)buf[5] + 4)
          {
            size_t v100 = strnlen(&buf[6], buf[5]);
            if (v100 >= v94)
            {
              __int16 v43 = __nwlog_obj();
              if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                goto LABEL_125;
              }
              *(_DWORD *)&type[0].os_log_type_t sa_len = 136446466;
              *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&type[0].sa_data[10] = 2114;
              *(void *)&type[0].sa_data[12] = v9;
              v108 = "%{public}s %{public}@ failed to parse bonjour name";
            }
            else
            {
              BOOL v101 = &buf[v100 + 7];
              size_t v102 = strnlen(v101, v94 - (v100 + 1)) + v100 + 1;
              if (v102 >= v94)
              {
                __int16 v43 = __nwlog_obj();
                if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_125;
                }
                *(_DWORD *)&type[0].os_log_type_t sa_len = 136446466;
                *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                *(_WORD *)&type[0].sa_data[10] = 2114;
                *(void *)&type[0].sa_data[12] = v9;
                v108 = "%{public}s %{public}@ failed to parse bonjour type";
              }
              else
              {
                os_log_type_t domain = &buf[v102 + 7];
                if (strnlen(domain, v94 - (v102 + 1)) + v102 + 1 < v94)
                {
                  nw_endpoint_t host = nw_endpoint_create_bonjour_service(&buf[6], v101, domain);
LABEL_252:
                  nw_endpoint_t v98 = host;
                  unsigned int v99 = v94 + 4;
LABEL_253:
                  if (v98)
                  {
                    *(void *)&type[0].os_log_type_t sa_len = 0;
                    *(void *)&type[0].sa_data[6] = type;
                    *(void *)&type[1].os_log_type_t sa_len = 0x3032000000;
                    *(void *)&type[1].sa_data[6] = __Block_byref_object_copy__16230;
                    *(void *)&type[2].os_log_type_t sa_len = __Block_byref_object_dispose__16231;
                    *(void *)&type[2].sa_data[6] = 0;
                    uint64_t v168 = 0;
                    v169 = &v168;
                    uint64_t v170 = 0x2020000000;
                    __int16 v171 = 0;
                    if (buf[2] <= 8u && ((1 << buf[2]) & 0x170) != 0 || *((char *)v9 + 160) < 0)
                    {
                      nw_parameters_t secure_udp = nw_parameters_create_secure_udp(&__block_literal_global_19196, &__block_literal_global_98);
                      __int16 v112 = *(void **)(*(void *)&type[0].sa_data[6] + 40);
                      *(void *)(*(void *)&type[0].sa_data[6] + 40) = secure_udp;

                      *((unsigned char *)v9 + 160) |= 0x20u;
                    }
                    else
                    {
                      nw_parameters_t secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_19196, &__block_literal_global_98);
                      uint64_t v132 = *(void **)(*(void *)&type[0].sa_data[6] + 40);
                      *(void *)(*(void *)&type[0].sa_data[6] + 40) = secure_tcp;
                    }
                    nw_path_t v113 = nw_connection_copy_current_path(&v9->sc_in_connection->super);
                    nw_path_t domaina = v113;
                    if (v113)
                    {
                      Class isa = v113[28].isa;
                      if (isa)
                      {
                        char v115 = isa;
                        applier[0] = MEMORY[0x1E4F143A8];
                        applier[1] = 3221225472;
                        applier[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_148;
                        applier[3] = &unk_1E5249BA8;
                        applier[4] = type;
                        xpc_dictionary_apply(v115, applier);
                      }
                      else
                      {
                        char v115 = 0;
                      }
                    }
                    unsigned int v117 = v9->sc_shoes_request_length_hbo;
                    if (v99 < v117)
                    {
                      unsigned __int16 v118 = v117 - v99;
                      BOOL v119 = __nwlog_obj();
                      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136446722;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        __int16 v177 = 2114;
                        v178 = v9;
                        __int16 v179 = 1024;
                        int v180 = v118;
                        _os_log_impl(&dword_1830D4000, v119, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ received shoes tlv(s) with total tlv buffer length %u", (uint8_t *)__str, 0x1Cu);
                      }

                      v162[0] = MEMORY[0x1E4F143A8];
                      v162[1] = 3221225472;
                      v162[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_153;
                      v162[3] = &unk_1E523C818;
                      v163 = v9;
                      v165 = type;
                      v164 = v98;
                      v166 = &v168;
                      nw_shoes_tlv_parser(&buf[v99 + 2], v118, v162);
                    }
                    nw_socks5_server_call_outer_connection_handler(WeakRetained, v98, *(void **)(*(void *)&type[0].sa_data[6] + 40));
                    if (*((char *)v9 + 160) & 0x80000000) == 0 || (*((unsigned char *)v9 + 161))
                    {
                      v129 = __nwlog_obj();
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136447234;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        __int16 v177 = 2114;
                        v178 = v9;
                        __int16 v179 = 1024;
                        int v180 = buf[2];
                        __int16 v181 = 2048;
                        size_t v182 = size;
                        __int16 v183 = 2112;
                        nw_endpoint_t v184 = v98;
                        _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ got shoes request type %u inner length %zu to %@", (uint8_t *)__str, 0x30u);
                      }

                      v9->int sc_state = 104;
                      nw_path_t v130 = domaina;
                      nw_socks5_connection_connect_outer_on_queue(v9, v98, *(void **)(*(void *)&type[0].sa_data[6] + 40));
                    }
                    else
                    {
                      *((unsigned char *)v9 + 161) |= 1u;
                      CFAllocatorRef v120 = __nwlog_obj();
                      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136446466;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        __int16 v177 = 2114;
                        v178 = v9;
                        _os_log_impl(&dword_1830D4000, v120, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ creating udp associated connection", (uint8_t *)__str, 0x16u);
                      }

                      if (*((_WORD *)v169 + 12))
                      {
                        p_sc_in_udp_associated_tcp_connection = (void **)&v9->sc_in_udp_associated_tcp_connection;
                        objc_storeStrong((id *)&v9->sc_in_udp_associated_tcp_connection, v9->sc_in_connection);
                        posix_CFStreamError error = nw_connection_copy_connected_remote_endpoint(v9->sc_in_udp_associated_tcp_connection);
                        hostname = nw_endpoint_get_hostname(posix_error);
                        BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(hostname, *((unsigned __int16 *)v169 + 12));
                        if (host_with_numeric_port)
                        {
                          local_endpoint = nw_connection_copy_connected_local_endpoint(*p_sc_in_udp_associated_tcp_connection);
                          id v142 = nw_connection_copy_connected_path(*p_sc_in_udp_associated_tcp_connection);
                          interface = nw_path_copy_interface(v142);
                          nw_interface_type_t v123 = nw_interface_get_type(interface);
                          uint64_t v124 = nw_parameters_create();
                          v125 = nw_parameters_copy_default_protocol_stack(v124);
                          options = nw_udp_create_options();
                          nw_protocol_stack_set_transport_protocol(v125, options);

                          nw_parameters_set_reuse_local_address(v124, 1);
                          nw_parameters_set_required_interface_type(v124, v123);
                          nw_parameters_set_local_endpoint(v124, local_endpoint);
                          sc_queue = v9->sc_queue;
                          v157[0] = MEMORY[0x1E4F143A8];
                          v157[1] = 3221225472;
                          v157[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_155;
                          v157[3] = &unk_1E523C840;
                          v158 = v9;
                          id v159 = (id)host_with_numeric_port;
                          v128 = v124;
                          v160 = v128;
                          v161 = v11;
                          nw_socks5_server_register_udp_associate_request(WeakRetained, v158, v159, sc_queue, v157);
                        }
                        else
                        {
                          local_endpoint = nw_error_create_posix_error(14);
                          nw_socks5_connection_cancel_on_queue(v9, local_endpoint);
                        }
                      }
                      else
                      {
                        posix_CFStreamError error = nw_error_create_posix_error(22);
                        nw_socks5_connection_cancel_on_queue(v9, posix_error);
                      }

                      nw_path_t v130 = domaina;
                    }

                    _Block_object_dispose(&v168, 8);
                    _Block_object_dispose(type, 8);
                  }
                  else
                  {
LABEL_260:
                    char v116 = __nwlog_obj();
                    if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)&type[0].os_log_type_t sa_len = 136446978;
                      *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                      *(_WORD *)&type[0].sa_data[10] = 2114;
                      *(void *)&type[0].sa_data[12] = v9;
                      *(_WORD *)&type[1].sa_data[4] = 1024;
                      *(_DWORD *)&type[1].sa_data[6] = buf[2];
                      *(_WORD *)&type[1].sa_data[10] = 2048;
                      *(void *)&type[1].sa_data[12] = size;
                      _os_log_impl(&dword_1830D4000, v116, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ shoes_got_length connection received invalid request type %u length %zu", &type[0].sa_len, 0x26u);
                    }

                    nw_socks5_connection_cancel_on_queue(v9, 0);
                  }
                  goto LABEL_102;
                }
                __int16 v43 = __nwlog_obj();
                if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_125;
                }
                *(_DWORD *)&type[0].os_log_type_t sa_len = 136446466;
                *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                *(_WORD *)&type[0].sa_data[10] = 2114;
                *(void *)&type[0].sa_data[12] = v9;
                v108 = "%{public}s %{public}@ failed to parse bonjour domain";
              }
            }
            _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, v108, &type[0].sa_len, 0x16u);
            goto LABEL_125;
          }
          double v38 = __nwlog_obj();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].os_log_type_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          __int16 v39 = "%{public}s %{public}@ shoes_got_length connection received bonjour request too short %zu";
LABEL_207:
          _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_ERROR, v39, &type[0].sa_len, 0x20u);
          break;
        default:
          goto LABEL_260;
      }
LABEL_217:

      nw_socks5_connection_cancel_on_queue(v9, 0);
      goto LABEL_102;
    default:
      if (sc_state == 200)
      {
        if (gLogDatapath)
        {
          __int16 v135 = __nwlog_obj();
          if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
          {
            v136 = "not";
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(_DWORD *)long long buf = 136446978;
            *(void *)&buf[14] = v9;
            if (a3) {
              v136 = "is";
            }
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v136;
            _os_log_impl(&dword_1830D4000, v135, OS_LOG_TYPE_DEBUG, "%{public}s READY STATE %{public}@ read %zu bytes %{public}s_complete from inner connection", buf, 0x2Au);
          }
        }
        v9->sc_in_connection_bytes_read += size;
        char v58 = &__block_literal_global_42249;
        id v59 = &__block_literal_global_42249;
        if (!a3 || (*((unsigned char *)v9 + 160) & 0x20) != 0)
        {
          char v61 = 0;
        }
        else
        {
          id v60 = &__block_literal_global_6_42258;

          char v61 = 1;
          char v58 = &__block_literal_global_6_42258;
        }
        nw_socks5_connection_increment_busy_on_queue(v9, WeakRetained);
        os_log_type_t v67 = &v9->sc_out_connection->super;
        v149[0] = MEMORY[0x1E4F143A8];
        v149[1] = 3221225472;
        v149[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_158;
        v149[3] = &unk_1E523C868;
        v150 = v9;
        char v153 = v61;
        id v151 = WeakRetained;
        size_t v152 = size;
        nw_connection_send(v67, v11, v58, 1, v149);

        goto LABEL_102;
      }
      if (sc_state != 255) {
        goto LABEL_102;
      }
LABEL_12:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      int v16 = v9->sc_state;
      *(_DWORD *)long long buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = size;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v16;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();

      type[0].os_log_type_t sa_len = 16;
      __str[0] = 0;
      if (!__nwlog_fault(v17, type, __str)) {
        goto LABEL_99;
      }
      if (type[0].sa_len == 17)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type[0].sa_len;
        if (os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len))
        {
          int v20 = v9->sc_state;
          *(_DWORD *)long long buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v20;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u", buf, 0x26u);
        }
      }
      else if (__str[0])
      {
        __int16 v27 = (char *)__nw_create_backtrace_string();
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v28 = type[0].sa_len;
        BOOL v29 = os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len);
        if (v27)
        {
          if (v29)
          {
            int v30 = v9->sc_state;
            *(_DWORD *)long long buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = size;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v30;
            *(_WORD *)&buf[38] = 2082;
            *(void *)&buf[40] = v27;
            _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, dumping backtrace:%{public}s", buf, 0x30u);
          }

          free(v27);
          goto LABEL_99;
        }
        if (v29)
        {
          int v57 = v9->sc_state;
          *(_DWORD *)long long buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v57;
          _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, no backtrace", buf, 0x26u);
        }
      }
      else
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v31 = type[0].sa_len;
        if (os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len))
        {
          int v32 = v9->sc_state;
          *(_DWORD *)long long buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v32;
          _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, backtrace limit exceeded", buf, 0x26u);
        }
      }

LABEL_99:
      if (v17) {
        free(v17);
      }
      goto LABEL_101;
  }
}

void sub_18374F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a71, 8);

  _Unwind_Resume(a1);
}

void nw_socks5_connection_inner_connection_read_range_on_queue(NWConcrete_nw_socks5_connection *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (a2 - 1 < a3)
  {
    if (gLogDatapath)
    {
      id v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
        __int16 v23 = 2114;
        *(void *)os_log_type_t v24 = v5;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ reading on inner connection", buf, 0x16u);
      }
    }
    sc_in_connection = v5->sc_in_connection;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___ZL57nw_socks5_connection_inner_connection_read_range_on_queueP31NWConcrete_nw_socks5_connectionjj_block_invoke;
    v16[3] = &unk_1E523C890;
    uint64_t v17 = v5;
    unsigned int v18 = a2;
    nw_connection_receive_internal(sc_in_connection, 0, a2, a3, v16);

    goto LABEL_11;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446722;
  uint64_t v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
  __int16 v23 = 1024;
  *(_DWORD *)os_log_type_t v24 = a2;
  *(_WORD *)&v24[4] = 1024;
  *(_DWORD *)&v24[6] = a3;
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v8, &type, &v19)) {
    goto LABEL_9;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    double v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446722;
      uint64_t v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
      __int16 v23 = 1024;
      *(_DWORD *)os_log_type_t v24 = a2;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = a3;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s unexpected minBytes %u maxBytes %u", buf, 0x18u);
    }
LABEL_8:

LABEL_9:
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    free(v8);
    goto LABEL_11;
  }
  if (!v19)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    double v9 = (id)gLogObj;
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446722;
      uint64_t v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
      __int16 v23 = 1024;
      *(_DWORD *)os_log_type_t v24 = a2;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = a3;
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s unexpected minBytes %u maxBytes %u, backtrace limit exceeded", buf, 0x18u);
    }
    goto LABEL_8;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  double v9 = (id)gLogObj;
  os_log_type_t v12 = type;
  BOOL v13 = os_log_type_enabled(v9, type);
  if (!backtrace_string)
  {
    if (v13)
    {
      *(_DWORD *)long long buf = 136446722;
      uint64_t v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
      __int16 v23 = 1024;
      *(_DWORD *)os_log_type_t v24 = a2;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = a3;
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s unexpected minBytes %u maxBytes %u, no backtrace", buf, 0x18u);
    }
    goto LABEL_8;
  }
  if (v13)
  {
    *(_DWORD *)long long buf = 136446978;
    uint64_t v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
    __int16 v23 = 1024;
    *(_DWORD *)os_log_type_t v24 = a2;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = a3;
    __int16 v25 = 2082;
    uint64_t v26 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s unexpected minBytes %u maxBytes %u, dumping backtrace:%{public}s", buf, 0x22u);
  }

  free(backtrace_string);
  if (v8) {
    goto LABEL_10;
  }
LABEL_11:
}

void sub_18374FDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void ___ZL57nw_socks5_connection_inner_connection_read_range_on_queueP31NWConcrete_nw_socks5_connectionjj_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v14 = a2;
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = v10;
  if (v10)
  {
    os_log_type_t v12 = (unsigned int *)v10;
    uint64_t v13 = v12[3];
  }
  else
  {
    uint64_t v13 = 0;
  }
  nw_socks5_connection_inner_connection_read_handler_on_queue(*(void *)(a1 + 32), v14, a4, v13, *(unsigned int *)(a1 + 40));
}

void sub_18374FEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_inner_connection_read_on_queue(NWConcrete_nw_socks5_connection *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if ((*((unsigned char *)v1 + 160) & 0x20) != 0)
  {
    uint64_t v3 = v1;
    if (gLogDatapath)
    {
      uint64_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v7 = 136446466;
        *(void *)&v7[4] = "nw_socks5_connection_inner_connection_read_message_on_queue";
        *(_WORD *)&v7[12] = 2114;
        *(void *)&v7[14] = v3;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ reading message on inner connection", v7, 0x16u);
      }
    }
    sc_in_connection = v3->sc_in_connection;
    *(void *)id v7 = MEMORY[0x1E4F143A8];
    *(void *)&v7[8] = 3221225472;
    *(void *)&v7[16] = ___ZL59nw_socks5_connection_inner_connection_read_message_on_queueP31NWConcrete_nw_socks5_connection_block_invoke;
    uint64_t v8 = &unk_1E52427C0;
    id v5 = v3;
    id v9 = v5;
    nw_connection_receive_internal(sc_in_connection, 0, 0xFFFFFFFF, 0xFFFFFFFF, v7);
  }
  else
  {
    nw_socks5_connection_inner_connection_read_range_on_queue(v1, 1u, 0xFFFFFFFF);
  }
}

void sub_183750054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_increment_busy_on_queue(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a1;
  id v3 = a2;
  id v4 = v3;
  if (!v3) {
    goto LABEL_19;
  }
  id v5 = v3;
  uint64_t v6 = v5;
  if (*((unsigned char *)v5 + 136))
  {
    int v7 = *((_DWORD *)v5 + 33);
    if (v7 != -1)
    {
      *((_DWORD *)v5 + 33) = v7 + 1;
LABEL_12:
      os_log_type_t v12 = v6;
      uint64_t v13 = v12 + 6;
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_socks5_server_handle_busy_changed_block_invoke;
      uint64_t v26 = &unk_1E524BAA8;
      uint64_t v27 = v12;
      os_unfair_lock_lock(v12 + 6);
      (*(void (**)(unsigned char *))&buf[16])(buf);
      os_unfair_lock_unlock(v13);

      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_increment_busy";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_server_increment_busy";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s ss_busy_count overflow", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socks5_server_increment_busy";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s ss_busy_count overflow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
        if (v20)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_server_increment_busy";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s ss_busy_count overflow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_server_increment_busy";
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s ss_busy_count overflow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9) {
      goto LABEL_12;
    }
LABEL_11:
    free(v9);
    goto LABEL_12;
  }
LABEL_13:

  id v14 = v22;
  uint64_t v15 = v22[14];
  if (!v15)
  {
    uint64_t v16 = mach_continuous_time();
    if (v16 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    id v14 = v22;
    v22[15] = v17;
    uint64_t v15 = v22[14];
  }
  v14[14] = v15 + 1;
LABEL_19:
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 56) == 255) {
    goto LABEL_15;
  }
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446466;
      uint64_t v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
      __int16 v28 = 2114;
      uint64_t v29 = v9;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}@ out connection write close done", buf, 0x16u);
    }
    goto LABEL_12;
  }
  id v4 = v3;
  int v5 = v4[3];

  if ((v5 - 6) > 0x3B || ((1 << (v5 - 6)) & 0x8C9B80004000001) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    __int16 v28 = 2114;
    uint64_t v29 = v12;
    __int16 v30 = 1024;
    int v31 = v5;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v28 = 2114;
          uint64_t v29 = v16;
          __int16 v30 = 1024;
          int v31 = v5;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s %{public}@ out connection write close error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v14 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v19)
          {
            uint64_t v20 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v28 = 2114;
            uint64_t v29 = v20;
            __int16 v30 = 1024;
            int v31 = v5;
            __int16 v32 = 2082;
            __int16 v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s %{public}@ out connection write close error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v19)
        {
          uint64_t v23 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v28 = 2114;
          uint64_t v29 = v23;
          __int16 v30 = 1024;
          int v31 = v5;
          _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s %{public}@ out connection write close error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        id v14 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v28 = 2114;
          uint64_t v29 = v22;
          __int16 v30 = 1024;
          int v31 = v5;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s %{public}@ out connection write close error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
LABEL_32:
    if (v13) {
      free(v13);
    }
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    __int16 v28 = 2114;
    uint64_t v29 = v8;
    __int16 v30 = 1024;
    int v31 = v5;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ out connection write close error %{darwin.errno}d", buf, 0x1Cu);
  }
LABEL_12:

LABEL_13:
  *(unsigned char *)(*(void *)(a1 + 32) + 160) |= 1u;
  uint64_t v10 = *(unsigned __int8 **)(a1 + 32);
  if ((~v10[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v10, v3);
  }
LABEL_15:
}

void sub_183750940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16230(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16231(uint64_t a1)
{
}

uint64_t ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_148(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  size_t length = 0;
  data = (const char *)xpc_dictionary_get_data(v4, "data", &length);
  uint64_t v6 = data;
  uint64_t v7 = 1;
  if (data && length >= 0xD8)
  {
    unint64_t v8 = *((unsigned int *)data + 53);
    if (length == v8 + 216
      && !strcmp(data + 16, "com.apple.networkrelay")
      && ((int v9 = strcmp(v6 + 48, "CompanionProxyConfig"), (v8 - 0x10000) >= 0xFFFF0001)
        ? (BOOL v10 = v9 == 0)
        : (BOOL v10 = 0),
          v10))
    {
      nw_parameters_update_with_data(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (uint64_t)(v6 + 216), v8);
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 1;
    }
  }

  return v7;
}

void sub_183750A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_153(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id *)&unk_1EB267000;
  int v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *a2;
    if (v6 > 9) {
      uint64_t v7 = "unknown";
    }
    else {
      uint64_t v7 = off_1E523A4C0[v6];
    }
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    __int16 v62 = 2114;
    uint64_t v63 = v8;
    __int16 v64 = 2082;
    *(void *)os_log_type_t v65 = v7;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ processing shoes tlv: %{public}s", buf, 0x20u);
  }

  switch(*a2)
  {
    case 1u:
      unsigned int v9 = *(unsigned __int16 *)(a2 + 1);
      if (v9 != 1024)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446978;
          char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v62 = 2114;
          uint64_t v63 = v50;
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = __rev16(v9);
          *(_WORD *)&uint8_t v65[4] = 2048;
          *(void *)&v65[6] = 4;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u != %zu)", buf, 0x26u);
        }
        goto LABEL_78;
      }
      int v10 = bswap32(*(_DWORD *)(a2 + 3));
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        __int16 v62 = 2114;
        uint64_t v63 = v12;
        __int16 v64 = 1024;
        *(_DWORD *)os_log_type_t v65 = v10;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ applying traffic class %u to inner and outer connections", buf, 0x1Cu);
      }

      nw_parameters_set_traffic_class(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v10);
      nw_connection_reset_traffic_class(*(void **)(*(void *)(a1 + 32) + 32), v10);
      break;
    case 2u:
      unsigned int v20 = *(unsigned __int16 *)(a2 + 1);
      if (!*(_WORD *)(a2 + 1))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v53 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446978;
          char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v62 = 2114;
          uint64_t v63 = v53;
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = __rev16(v20);
          *(_WORD *)&uint8_t v65[4] = 2048;
          *(void *)&v65[6] = 1;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u < %zu)", buf, 0x26u);
        }
        goto LABEL_78;
      }
      unsigned __int8 v21 = a2[3];
      if (v21)
      {
        if ((a2[3] & 0x80) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v22 = (id)gLogObj;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v23;
            _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting expensive networks on outer connection", buf, 0x16u);
          }

          nw_parameters_set_prohibit_expensive(*(nw_parameters_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 1);
          unsigned __int8 v21 = a2[3];
        }
        if ((v21 & 0x20) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v24 = (id)gLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v25;
            _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting wifi networks on outer connection", buf, 0x16u);
          }

          nw_parameters_prohibit_interface_type(*(nw_parameters_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), nw_interface_type_wifi);
          unsigned __int8 v21 = a2[3];
        }
        if ((v21 & 0x40) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v26 = (id)gLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v27;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting cellular networks on outer connection", buf, 0x16u);
          }

          nw_parameters_prohibit_interface_type(*(nw_parameters_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), nw_interface_type_cellular);
          unsigned __int8 v21 = a2[3];
        }
        if ((v21 & 0x10) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v28 = (id)gLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v29;
            _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting constrained networks on outer connection", buf, 0x16u);
          }

          nw_parameters_set_prohibit_constrained(*(nw_parameters_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 1);
          unsigned __int8 v21 = a2[3];
        }
        if (v21)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v30 = (id)gLogObj;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v31;
            _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to prefer wi-fi", buf, 0x16u);
          }

          *(unsigned char *)(*(void *)(a1 + 32) + 160) |= 0x40u;
          unsigned __int8 v21 = a2[3];
        }
        if ((v21 & 2) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v32 = (id)gLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v33 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v33;
            _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to fetch connected endpoint", buf, 0x16u);
          }

          *(unsigned char *)(*(void *)(a1 + 32) + 161) |= 2u;
          unsigned __int8 v21 = a2[3];
        }
        if ((v21 & 4) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v34 = (id)gLogObj;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v35 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v35;
            _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to fetch resolved endpoints", buf, 0x16u);
          }

          *(unsigned char *)(*(void *)(a1 + 32) + 161) |= 4u;
        }
      }
      break;
    case 3u:
      if (*(_WORD *)(a2 + 1))
      {
        size_t v13 = __rev16(*(unsigned __int16 *)(a2 + 1));
        id v14 = malloc_type_calloc(1uLL, v13 + 1, 0xEAFB8F1AuLL);
        if (!v14)
        {
          char v58 = __nwlog_obj();
          os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long buf = 136446722;
          char v61 = "strict_calloc";
          __int16 v62 = 2048;
          uint64_t v63 = 1;
          __int16 v64 = 2048;
          *(void *)os_log_type_t v65 = v13 + 1;
          id v59 = (void *)_os_log_send_and_compose_impl();

          if (__nwlog_abort((uint64_t)v59))
          {
            __break(1u);
            JUMPOUT(0x18375198CLL);
          }
          free(v59);
          id v4 = (id *)&unk_1EB267000;
        }
        memcpy(v14, a2 + 3, v13);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = v4[237];
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v62 = 2114;
          uint64_t v63 = v16;
          __int16 v64 = 2082;
          *(void *)os_log_type_t v65 = v14;
          _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ setting bundle id on outer connection to %{public}s", buf, 0x20u);
        }

        nw_parameters_set_source_application_by_bundle_id_internal(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), (const char *)v14);
        if (v14) {
          free(v14);
        }
      }
      break;
    case 5u:
      unsigned int v36 = *(unsigned __int16 *)(a2 + 1);
      if (v36 != 768)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v51 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136447234;
          char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v62 = 2114;
          uint64_t v63 = v51;
          __int16 v64 = 2080;
          *(void *)os_log_type_t v65 = "multipath";
          *(_WORD *)&v65[8] = 1024;
          *(_DWORD *)&v65[10] = __rev16(v36);
          __int16 v66 = 2048;
          uint64_t v67 = 3;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length for %s (%u != %zu)", buf, 0x30u);
        }
        goto LABEL_78;
      }
      nw_multipath_service_t v37 = a2[3];
      unsigned int v38 = *((unsigned __int16 *)a2 + 2);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v39 = (id)gLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446978;
        char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        __int16 v62 = 2114;
        uint64_t v63 = v40;
        __int16 v64 = 1024;
        *(_DWORD *)os_log_type_t v65 = v37;
        *(_WORD *)&uint8_t v65[4] = 1024;
        *(_DWORD *)&v65[6] = __rev16(v38);
        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ setting multipath on outer connection to service: %u/alternate_port: %u", buf, 0x22u);
      }

      nw_parameters_set_multipath_service(*(nw_parameters_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v37);
      nw_endpoint_set_alternate_port(*(void **)(a1 + 40), v38);
      break;
    case 6u:
      unsigned int v41 = *(unsigned __int16 *)(a2 + 1);
      if (v41 != 512)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v52 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446978;
          char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v62 = 2114;
          uint64_t v63 = v52;
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = __rev16(v41);
          *(_WORD *)&uint8_t v65[4] = 2048;
          *(void *)&v65[6] = 1;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u < %zu)", buf, 0x26u);
        }
        goto LABEL_78;
      }
      uint64_t v42 = *(void *)(a1 + 32);
      if ((*(unsigned char *)(v42 + 161) & 1) == 0)
      {
        *(unsigned char *)(v42 + 160) |= 0x80u;
        *(_WORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v43 = *(void *)(a1 + 32);
          int v44 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          *(_DWORD *)long long buf = 136446722;
          char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v62 = 2114;
          uint64_t v63 = v43;
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = v44;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to create UDP association to inner connection port: %u", buf, 0x1Cu);
        }
        goto LABEL_78;
      }
      break;
    case 9u:
      unsigned int v17 = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16;
      if (v17 > 3)
      {
        int v45 = *(_DWORD *)(a2 + 3);
        if (!v45) {
          return;
        }
        if (v45)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v54 = (id)gLogObj;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v55 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v55;
            _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requiring interface type wifi on outer connection", buf, 0x16u);
          }

          int v48 = *(NSObject **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          nw_interface_type_t v49 = nw_interface_type_wifi;
        }
        else if ((v45 & 2) != 0)
        {
          uint32_t v56 = __nwlog_obj();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v57 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v57;
            _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requiring interface type cellular on outer connection", buf, 0x16u);
          }

          int v48 = *(NSObject **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          nw_interface_type_t v49 = nw_interface_type_cellular;
        }
        else
        {
          if ((v45 & 4) == 0) {
            return;
          }
          os_log_type_t v46 = __nwlog_obj();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v47 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446466;
            char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v62 = 2114;
            uint64_t v63 = v47;
            _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requiring interface type wired on outer connection", buf, 0x16u);
          }

          int v48 = *(NSObject **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          nw_interface_type_t v49 = nw_interface_type_wired;
        }
        nw_parameters_set_required_interface_type(v48, v49);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446978;
          char v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v62 = 2114;
          uint64_t v63 = v19;
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = v17;
          *(_WORD *)&uint8_t v65[4] = 2048;
          *(void *)&v65[6] = 4;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u < %zu)", buf, 0x26u);
        }
LABEL_78:
      }
      break;
    default:
      return;
  }
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_155(uint64_t a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 56) != 255)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    int v5 = v4;
    if (a2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v15 = 136446466;
        uint64_t v16 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        __int16 v17 = 2114;
        uint64_t v18 = v6;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ successfully registered udp association", (uint8_t *)&v15, 0x16u);
      }

      nw_connection_t v7 = nw_connection_create(*(nw_endpoint_t *)(a1 + 40), *(nw_parameters_t *)(a1 + 48));
      uint64_t v8 = *(void *)(a1 + 32);
      unsigned int v9 = *(void **)(v8 + 32);
      *(void *)(v8 + 32) = v7;

      int v10 = *(void **)(a1 + 56);
      id v11 = (unsigned __int8 *)*(id *)(a1 + 32);
      id v12 = v10;
      int v13 = v11[56];
      if (v13 != 200 && v13 != 255)
      {
        v11[56] = 101;
        nw_socks5_connection_start_on_queue(v11, v12);
      }
    }
    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v15 = 136446466;
        uint64_t v16 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        __int16 v17 = 2114;
        uint64_t v18 = v14;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed to register udp association", (uint8_t *)&v15, 0x16u);
      }

      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
    }
  }
}

void sub_183751B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_connect_outer_on_queue(void *a1, void *a2, void *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t v6 = a2;
  nw_parameters_t secure_tcp = a3;
  if (!secure_tcp)
  {
    nw_parameters_t secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_19196, &__block_literal_global_98);
    if (!secure_tcp)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v29 = (id)gLogObj;
      *(_DWORD *)uint64_t v53 = 136446210;
      *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
      __int16 v30 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      char v46 = 0;
      if (__nwlog_fault(v30, buf, &v46))
      {
        if (buf[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v31 = (id)gLogObj;
          os_log_type_t v32 = buf[0];
          if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)uint64_t v53 = 136446210;
            *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s nw_parameters_create_secure_tcp failed", v53, 0xCu);
          }
        }
        else if (v46)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            uint64_t v35 = (char *)backtrace_string;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unsigned int v36 = (id)gLogObj;
            os_log_type_t v37 = buf[0];
            if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)uint64_t v53 = 136446466;
              *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
              *(_WORD *)&v53[12] = 2082;
              *(void *)&v53[14] = v35;
              _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s nw_parameters_create_secure_tcp failed, dumping backtrace:%{public}s", v53, 0x16u);
            }

            free(v35);
            if (!v30) {
              goto LABEL_28;
            }
            goto LABEL_27;
          }
          uint64_t v31 = __nwlog_obj();
          os_log_type_t v40 = buf[0];
          if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)uint64_t v53 = 136446210;
            *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
            _os_log_impl(&dword_1830D4000, v31, v40, "%{public}s nw_parameters_create_secure_tcp failed, no backtrace", v53, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v31 = (id)gLogObj;
          os_log_type_t v39 = buf[0];
          if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)uint64_t v53 = 136446210;
            *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
            _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s nw_parameters_create_secure_tcp failed, backtrace limit exceeded", v53, 0xCu);
          }
        }
      }
      if (!v30)
      {
LABEL_28:
        uint64_t v33 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 12);
        nw_socks5_connection_cancel_on_queue(v5, v33);
        int v13 = v33;
        goto LABEL_29;
      }
LABEL_27:
      free(v30);
      goto LABEL_28;
    }
  }
  unsigned int v8 = v5[160];
  unsigned int v9 = secure_tcp;
  Class isa = v9[13].isa;
  int v11 = *((unsigned __int16 *)isa + 54);
  Class isa = (Class)((char *)isa + 108);
  unsigned int v12 = v11 & 0xFFFFFFFD | (*((unsigned __int8 *)isa + 2) << 16);
  *(_WORD *)Class isa = v11 & 0xFFFD | (v8 >> 1) & 2;
  *((unsigned char *)isa + 2) = BYTE2(v12);

  int v13 = v9;
  v13[12].Class isa = (Class)((unint64_t)v13[12].isa & 0xFFFFFFFFFFFFFF3FLL | 0x80);

  nw_connection_t v14 = nw_connection_create(v6, v13);
  int v15 = (void *)*((void *)v5 + 18);
  *((void *)v5 + 18) = v14;

  if (!*((void *)v5 + 18))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)uint64_t v53 = 136446210;
    *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    char v46 = 0;
    if (__nwlog_fault(v22, buf, &v46))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        os_log_type_t v24 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v53 = 136446210;
          *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s nw_connection_create failed", v53, 0xCu);
        }
      }
      else if (v46)
      {
        uint64_t v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        os_log_type_t v27 = buf[0];
        BOOL v28 = os_log_type_enabled(v23, (os_log_type_t)buf[0]);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)uint64_t v53 = 136446466;
            *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
            *(_WORD *)&v53[12] = 2082;
            *(void *)&v53[14] = v26;
            _os_log_impl(&dword_1830D4000, v23, v27, "%{public}s nw_connection_create failed, dumping backtrace:%{public}s", v53, 0x16u);
          }

          free(v26);
          if (!v22) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        if (v28)
        {
          *(_DWORD *)uint64_t v53 = 136446210;
          *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
          _os_log_impl(&dword_1830D4000, v23, v27, "%{public}s nw_connection_create failed, no backtrace", v53, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        os_log_type_t v38 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v53 = 136446210;
          *(void *)&v53[4] = "nw_socks5_connection_connect_outer_on_queue";
          _os_log_impl(&dword_1830D4000, v23, v38, "%{public}s nw_connection_create failed, backtrace limit exceeded", v53, 0xCu);
        }
      }
    }
    if (!v22)
    {
LABEL_14:
      uint64_t v25 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 12);
      nw_socks5_connection_cancel_on_queue(v5, v25);

      goto LABEL_29;
    }
LABEL_13:
    free(v22);
    goto LABEL_14;
  }
  *(void *)uint64_t v53 = 0;
  *(void *)&v53[8] = v53;
  *(void *)&v53[16] = 0x3032000000;
  os_log_type_t v54 = __Block_byref_object_copy__16230;
  uint64_t v55 = __Block_byref_object_dispose__16231;
  id WeakRetained = objc_loadWeakRetained((id *)v5 + 3);
  uint64_t v16 = *((void *)v5 + 18);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke;
  handler[3] = &unk_1E523FCB0;
  __int16 v17 = v5;
  int v45 = v17;
  nw_connection_set_viability_changed_handler(v16, handler);
  uint64_t v18 = *((void *)v5 + 18);
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  v41[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_160;
  v41[3] = &unk_1E523C8E0;
  uint64_t v19 = v17;
  uint64_t v42 = v19;
  uint64_t v43 = v53;
  nw_connection_set_state_changed_handler(v18, v41);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unsigned int v20 = (id)gLogObj;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446722;
    int v48 = "nw_socks5_connection_connect_outer_on_queue";
    __int16 v49 = 2114;
    uint64_t v50 = v19;
    __int16 v51 = 2112;
    uint64_t v52 = v6;
    _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ connecting to remote %@", buf, 0x20u);
  }

  nw_connection_set_queue(*((nw_connection_t *)v5 + 18), v19[5]);
  nw_socks5_connection_increment_busy_on_queue(v19, *(void **)(*(void *)&v53[8] + 40));
  nw_connection_start(*((nw_connection_t *)v5 + 18));

  _Block_object_dispose(v53, 8);
LABEL_29:
}

void sub_183752458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_157(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  id v4 = *(NWConcrete_nw_socks5_connection **)(a1 + 32);
  if (v4->sc_state != 255)
  {
    if (!v3)
    {
      nw_socks5_connection_inner_connection_read_range_on_queue(v4, 4u, 4u);
      goto LABEL_12;
    }
    int v5 = v3;
    int v6 = v5[3];

    if ((v6 - 6) <= 0x3B && ((1 << (v6 - 6)) & 0x8C9B80004000001) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        uint64_t v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        __int16 v27 = 2114;
        uint64_t v28 = v9;
        __int16 v29 = 1024;
        int v30 = v6;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d", buf, 0x1Cu);
      }

LABEL_10:
      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    __int16 v27 = 2114;
    uint64_t v28 = v11;
    __int16 v29 = 1024;
    int v30 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          uint64_t v15 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v27 = 2114;
          uint64_t v28 = v15;
          __int16 v29 = 1024;
          int v30 = v6;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v13 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v18)
          {
            uint64_t v19 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v27 = 2114;
            uint64_t v28 = v19;
            __int16 v29 = 1024;
            int v30 = v6;
            __int16 v31 = 2082;
            os_log_type_t v32 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v18)
        {
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v27 = 2114;
          uint64_t v28 = v22;
          __int16 v29 = 1024;
          int v30 = v6;
          _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        int v13 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v13, type))
        {
          uint64_t v21 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v27 = 2114;
          uint64_t v28 = v21;
          __int16 v29 = 1024;
          int v30 = v6;
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
LABEL_29:
    if (v12) {
      free(v12);
    }
    goto LABEL_10;
  }
LABEL_12:
}

void sub_1837528F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_158(uint64_t a1, void *a2)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 56) == 255) {
    goto LABEL_31;
  }
  if (v3)
  {
    int v5 = v3;
    int v6 = v5[3];

    int v7 = *(char *)(*(void *)(a1 + 32) + 160);
    if (v7 < 0)
    {
      uint64_t v19 = (v6 - 6);
      if (v19 <= 0x3B)
      {
        if (((1 << (v6 - 6)) & 0x8C9B80004000001) != 0)
        {
LABEL_24:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (id)gLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v22 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446722;
            unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v42 = 2114;
            uint64_t v43 = v22;
            __int16 v44 = 1024;
            LODWORD(v45[0]) = v6;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write out error %{darwin.errno}d", buf, 0x1Cu);
          }

LABEL_27:
          nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
          goto LABEL_31;
        }
        if (v19 == 49)
        {
LABEL_6:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v8 = (id)gLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v9 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446722;
            unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v42 = 2114;
            uint64_t v43 = v9;
            __int16 v44 = 2112;
            v45[0] = v5;
            _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring write out error %@", buf, 0x20u);
          }

          nw_socks5_connection_inner_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
          goto LABEL_31;
        }
      }
    }
    else
    {
      if ((v7 & 0x20) != 0 && v6 == 55) {
        goto LABEL_6;
      }
      if ((v6 - 6) <= 0x3B && ((1 << (v6 - 6)) & 0x8C9B80004000001) != 0) {
        goto LABEL_24;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    uint64_t v24 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    __int16 v42 = 2114;
    uint64_t v43 = v24;
    __int16 v44 = 1024;
    LODWORD(v45[0]) = v6;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v25, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          uint64_t v28 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v42 = 2114;
          uint64_t v43 = v28;
          __int16 v44 = 1024;
          LODWORD(v45[0]) = v6;
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s %{public}@ write out error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v31)
          {
            uint64_t v32 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446978;
            unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            __int16 v42 = 2114;
            uint64_t v43 = v32;
            __int16 v44 = 1024;
            LODWORD(v45[0]) = v6;
            WORD2(v45[0]) = 2082;
            *(void *)((char *)v45 + 6) = backtrace_string;
            _os_log_impl(&dword_1830D4000, v26, v30, "%{public}s %{public}@ write out error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v31)
        {
          uint64_t v35 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v42 = 2114;
          uint64_t v43 = v35;
          __int16 v44 = 1024;
          LODWORD(v45[0]) = v6;
          _os_log_impl(&dword_1830D4000, v26, v30, "%{public}s %{public}@ write out error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v26, type))
        {
          uint64_t v34 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          __int16 v42 = 2114;
          uint64_t v43 = v34;
          __int16 v44 = 1024;
          LODWORD(v45[0]) = v6;
          _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s %{public}@ write out error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
LABEL_48:
    if (v25) {
      free(v25);
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 136446722;
    unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    __int16 v42 = 2114;
    uint64_t v43 = v11;
    __int16 v44 = 2048;
    v45[0] = v12;
    int v13 = "%{public}s %{public}@ wrote %zu bytes is_complete into outer connection";
    os_log_type_t v14 = v10;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_12;
  }
  if (!gLogDatapath)
  {
    *(void *)(v4 + 192) += *(void *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 32);
    goto LABEL_30;
  }
  id v10 = __nwlog_obj();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v36 = *(void *)(a1 + 32);
    uint64_t v37 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 136446722;
    unsigned int v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    __int16 v42 = 2114;
    uint64_t v43 = v36;
    __int16 v44 = 2048;
    v45[0] = v37;
    int v13 = "%{public}s %{public}@ wrote %zu bytes not_complete into outer connection";
    os_log_type_t v14 = v10;
    os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
LABEL_12:
    _os_log_impl(&dword_1830D4000, v14, v15, v13, buf, 0x20u);
  }
LABEL_13:

  int v16 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(*(void *)(a1 + 32) + 192) += *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  if (!v16)
  {
LABEL_30:
    nw_socks5_connection_inner_connection_read_on_queue((NWConcrete_nw_socks5_connection *)v17);
    goto LABEL_31;
  }
  *(unsigned char *)(v17 + 160) |= 1u;
  BOOL v18 = *(unsigned __int8 **)(a1 + 32);
  if ((~v18[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v18, 0);
  }
LABEL_31:
}

void sub_183752FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_decrement_busy_on_queue(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a1;
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_20;
  }
  id v5 = v3;
  int v6 = v5;
  if (*((unsigned char *)v5 + 136))
  {
    int v7 = *((_DWORD *)v5 + 33);
    if (v7)
    {
      *((_DWORD *)v5 + 33) = v7 - 1;
LABEL_12:
      uint64_t v12 = v6;
      int v13 = v12 + 6;
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_socks5_server_handle_busy_changed_block_invoke;
      uint64_t v28 = &unk_1E524BAA8;
      __int16 v29 = v12;
      os_unfair_lock_lock(v12 + 6);
      (*(void (**)(unsigned char *))&buf[16])(buf);
      os_unfair_lock_unlock(v13);

      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_decrement_busy";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_server_decrement_busy";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s ss_busy_count underflow", buf, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socks5_server_decrement_busy";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s ss_busy_count underflow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
        if (v22)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_server_decrement_busy";
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s ss_busy_count underflow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_server_decrement_busy";
          _os_log_impl(&dword_1830D4000, v10, v23, "%{public}s ss_busy_count underflow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9) {
      goto LABEL_12;
    }
LABEL_11:
    free(v9);
    goto LABEL_12;
  }
LABEL_13:

  uint64_t v14 = v24[14];
  if (!v14 || (uint64_t v15 = v14 - 1, (v24[14] = v15) == 0))
  {
    uint64_t v16 = v24[15];
    if (v16)
    {
      uint64_t v17 = mach_continuous_time();
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      uint64_t v19 = v24[16] + nw_delta_nanos(v16, v18);
      v24[15] = 0;
      v24[16] = v19;
    }
  }
LABEL_20:
}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke(uint64_t a1, char a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v7 = 136446466;
      id v8 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      __int16 v9 = 2114;
      uint64_t v10 = v4;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ out connection no longer viable, cancelling", (uint8_t *)&v7, 0x16u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 160) |= 1u;
    id v5 = *(void **)(a1 + 32);
    int v6 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
    nw_socks5_connection_cancel_on_queue(v5, v6);
  }
}

void sub_18375350C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_160(uint64_t a1, unsigned int a2, void *a3)
{
  v56[2] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2 != 2)
  {
    int v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v6)
    {
      nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), v6);
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = 0;
    }
  }
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 56) == 255) {
    goto LABEL_56;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5) {
      uint64_t v10 = "unknown";
    }
    else {
      uint64_t v10 = off_1E523DF08[a2];
    }
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    __int16 v53 = 2114;
    uint64_t v54 = v11;
    __int16 v55 = 2082;
    v56[0] = v10;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}@ out connection event %{public}s", buf, 0x20u);
  }

  if (a2 == 4)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 160) |= 1u;
    uint64_t v12 = *(unsigned __int8 **)(a1 + 32);
    if ((~v12[160] & 3) == 0)
    {
      nw_socks5_connection_cancel_on_queue(v12, v5);
      goto LABEL_56;
    }
    if (!v5) {
      goto LABEL_56;
    }
    goto LABEL_16;
  }
  if (!v5)
  {
    if (a2 != 3) {
      goto LABEL_56;
    }
    uint64_t v18 = *(void *)(a1 + 32);
    unsigned int v19 = *(unsigned __int8 *)(v18 + 56);
    if (v19 <= 0x67)
    {
      if (v19 == 7)
      {
        *(unsigned char *)(v18 + 56) = 8;
LABEL_50:
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_161;
        aBlock[3] = &unk_1E523FCB0;
        os_log_type_t v39 = *(void **)(a1 + 32);
        char v38 = (uint64_t *)(a1 + 32);
        int v48 = v39;
        os_log_type_t v40 = _Block_copy(aBlock);
        uint64_t v41 = *v38;
        if (*(unsigned char *)(*v38 + 56) == 105 && (*(unsigned char *)(v41 + 161) & 4) != 0)
        {
          __int16 v42 = *(NSObject **)(v41 + 144);
          uint64_t v43 = *(NSObject **)(v41 + 40);
          access_block[0] = MEMORY[0x1E4F143A8];
          access_block[1] = 3221225472;
          access_block[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_162;
          access_block[3] = &unk_1E523C8B8;
          id v45 = (id)v41;
          id v46 = v40;
          nw_connection_access_establishment_report(v42, v43, access_block);
        }
        else
        {
          nw_socks5_connection_send_reply_on_queue((void *)v41, 1, v40);
        }

        uint64_t v15 = v48;
        goto LABEL_55;
      }
      if (v19 == 8) {
        goto LABEL_56;
      }
    }
    else
    {
      if (v19 == 200 || v19 == 105) {
        goto LABEL_56;
      }
      if (v19 == 104)
      {
        *(unsigned char *)(v18 + 56) = 105;
        goto LABEL_50;
      }
    }
    os_log_type_t v20 = __nwlog_obj();
    uint64_t v21 = *(void *)(a1 + 32);
    int v22 = *(unsigned __int8 *)(v21 + 56);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    __int16 v53 = 2114;
    uint64_t v54 = v21;
    __int16 v55 = 1024;
    LODWORD(v56[0]) = v22;
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v23, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          uint64_t v26 = *(void *)(a1 + 32);
          int v27 = *(unsigned __int8 *)(v26 + 56);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          __int16 v53 = 2114;
          uint64_t v54 = v26;
          __int16 v55 = 1024;
          LODWORD(v56[0]) = v27;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s %{public}@ out connection ready from unexpected state %u", buf, 0x1Cu);
        }
      }
      else if (v49)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v24 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v30)
          {
            uint64_t v31 = *(void *)(a1 + 32);
            int v32 = *(unsigned __int8 *)(v31 + 56);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
            __int16 v53 = 2114;
            uint64_t v54 = v31;
            __int16 v55 = 1024;
            LODWORD(v56[0]) = v32;
            WORD2(v56[0]) = 2082;
            *(void *)((char *)v56 + 6) = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s %{public}@ out connection ready from unexpected state %u, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }
        if (v30)
        {
          uint64_t v36 = *(void *)(a1 + 32);
          int v37 = *(unsigned __int8 *)(v36 + 56);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          __int16 v53 = 2114;
          uint64_t v54 = v36;
          __int16 v55 = 1024;
          LODWORD(v56[0]) = v37;
          _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s %{public}@ out connection ready from unexpected state %u, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v24 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          uint64_t v34 = *(void *)(a1 + 32);
          int v35 = *(unsigned __int8 *)(v34 + 56);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          __int16 v53 = 2114;
          uint64_t v54 = v34;
          __int16 v55 = 1024;
          LODWORD(v56[0]) = v35;
          _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s %{public}@ out connection ready from unexpected state %u, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
LABEL_47:
    if (v23) {
      free(v23);
    }
    nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
    goto LABEL_50;
  }
  uint64_t v12 = *(unsigned __int8 **)(a1 + 32);
LABEL_16:
  int v13 = v12[56];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v14 = (id)gLogObj;
  uint64_t v15 = v14;
  if (v13 == 200)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446722;
      uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      __int16 v53 = 2114;
      uint64_t v54 = v16;
      __int16 v55 = 2114;
      v56[0] = v5;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ ignoring out connection event error %{public}@", buf, 0x20u);
    }
LABEL_55:

    goto LABEL_56;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v52 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    __int16 v53 = 2114;
    uint64_t v54 = v17;
    __int16 v55 = 2114;
    v56[0] = v5;
    _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ out connection event error %{public}@", buf, 0x20u);
  }

  nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
LABEL_56:
}

void sub_183753C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_161(uint64_t a1, int a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(v2 + 56);
  if (v3 != 255)
  {
    if (!a2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v22 = (id)gLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
LABEL_26:

        nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
        return;
      }
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446466;
      id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      __int16 v47 = 2114;
      uint64_t v48 = v20;
      uint64_t v21 = "%{public}s %{public}@ failed to write reply";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, v21, buf, 0x16u);
      goto LABEL_26;
    }
    if (v3 != 105 && v3 != 8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v22 = (id)gLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446466;
      id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      __int16 v47 = 2114;
      uint64_t v48 = v24;
      uint64_t v21 = "%{public}s %{public}@ wrote reply but ended in bad state";
      goto LABEL_25;
    }
    *(unsigned char *)(v2 + 56) = -56;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446466;
      id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      __int16 v47 = 2114;
      uint64_t v48 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ successfully wrote reply", buf, 0x16u);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    char v9 = *(unsigned char *)(v8 + 160);
    if ((v9 & 0xA0) != 0x20) {
      goto LABEL_53;
    }
    uint64_t v10 = *(NSObject **)(v8 + 32);
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
    }
    uint64_t v11 = (id)g_tcp_definition;
    nw_protocol_metadata_t v12 = nw_connection_copy_protocol_metadata(v10, v11);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v13 = (id)gLogObj;
    uint64_t v14 = v13;
    if (!v12)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446466;
        id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
        __int16 v47 = 2114;
        uint64_t v48 = v25;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ metadata for inner connection is nil -- unable to setting TCP no delay", buf, 0x16u);
      }

      goto LABEL_48;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446466;
      id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      __int16 v47 = 2114;
      uint64_t v48 = v15;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}@ setting TCP no delay on inner connection", buf, 0x16u);
    }

    if (!nw_tcp_set_no_delay(v12, 1))
    {
LABEL_48:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v38 = (id)gLogObj;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        uint64_t v39 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446466;
        id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
        __int16 v47 = 2114;
        uint64_t v48 = v39;
        _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_INFO, "%{public}s %{public}@ adding UDP framer", buf, 0x16u);
      }

      if (nw_shoes_copy_udp_framer_definition::onceToken != -1) {
        dispatch_once(&nw_shoes_copy_udp_framer_definition::onceToken, &__block_literal_global_27067);
      }
      os_log_type_t v40 = (id)nw_shoes_copy_udp_framer_definition::definition;
      uint64_t v41 = *(void **)(*(void *)(a1 + 32) + 32);
      nw_protocol_options_t options = nw_framer_create_options(v40);
      nw_connection_append_and_start_application_protocol(v41, options);

      uint64_t v8 = *(void *)(a1 + 32);
      char v9 = *(unsigned char *)(v8 + 160);
LABEL_53:
      *(unsigned char *)(v8 + 160) = v9 | 0x10;
      nw_socks5_connection_outer_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
      nw_socks5_connection_inner_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
      return;
    }
    int v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = (id)gLogObj;
    uint64_t v18 = v17;
    if (v16 == 22)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
        __int16 v47 = 2114;
        uint64_t v48 = v19;
        __int16 v49 = 1024;
        int v50 = 22;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d", buf, 0x1Cu);
      }

      goto LABEL_48;
    }
    uint64_t v26 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    __int16 v47 = 2114;
    uint64_t v48 = v26;
    __int16 v49 = 1024;
    int v50 = v16;
    int v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v27, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          uint64_t v30 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          __int16 v47 = 2114;
          uint64_t v48 = v30;
          __int16 v49 = 1024;
          int v50 = v16;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v33)
          {
            uint64_t v34 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446978;
            id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
            __int16 v47 = 2114;
            uint64_t v48 = v34;
            __int16 v49 = 1024;
            int v50 = v16;
            __int16 v51 = 2082;
            uint64_t v52 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }
        if (v33)
        {
          uint64_t v37 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          __int16 v47 = 2114;
          uint64_t v48 = v37;
          __int16 v49 = 1024;
          int v50 = v16;
          _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v28, type))
        {
          uint64_t v36 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          id v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          __int16 v47 = 2114;
          uint64_t v48 = v36;
          __int16 v49 = 1024;
          int v50 = v16;
          _os_log_impl(&dword_1830D4000, v28, v35, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
LABEL_46:
    if (v27) {
      free(v27);
    }
    goto LABEL_48;
  }
}

void sub_18375442C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_162(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 56) != 255)
  {
    objc_storeStrong((id *)(v4 + 176), a2);
    nw_socks5_connection_send_reply_on_queue(*(void **)(a1 + 32), 1, *(void **)(a1 + 40));
  }
}

void sub_1837544D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_add_prefer_wifi_request(NWConcrete_nw_socks5_connection *a1)
{
  uint64_t v1 = a1;
  if (!v1->sc_prefer_wifi_path_evaluator)
  {
    nw_parameters_t v2 = nw_parameters_create();
    xpc_object_t v3 = xpc_array_create(0, 0);
    xpc_object_t v4 = xpc_array_create(0, 0);
    xpc_array_set_string(v3, 0xFFFFFFFFFFFFFFFFLL, "com.apple.networkrelay");
    xpc_array_set_string(v4, 0xFFFFFFFFFFFFFFFFLL, "PreferWiFi");
    nw_parameters_set_required_netagent_classes(v2, v3, v4);
    nw_parameters_t v5 = nw_connection_copy_parameters(&v1->sc_out_connection->super);
    effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v5);
    if (effective_bundle_id) {
      nw_parameters_set_account_id(v2, effective_bundle_id);
    }
    evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, v2);
    objc_initWeak(&location, v1);
    sc_queue = v1->sc_queue;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZL44nw_socks5_connection_add_prefer_wifi_requestP31NWConcrete_nw_socks5_connection_block_invoke;
    v9[3] = &unk_1E524B478;
    objc_copyWeak(&v10, &location);
    nw_path_evaluator_set_update_handler(evaluator_for_endpoint, sc_queue, v9);
    objc_storeStrong((id *)&v1->sc_prefer_wifi_path_evaluator, evaluator_for_endpoint);
    nw_socks5_connection_assert_prefer_wifi(v1);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&location);
  }
}

void sub_1837546E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke(uint64_t a1, void *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_2;
  v3[3] = &unk_1E523EE10;
  v3[4] = *(void *)(a1 + 32);
  nw_resolution_report_enumerate_endpoints(a2, v3);
  return 0;
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t v4 = a3;
  nw_endpoint_t address = nw_endpoint_get_address(v4);
  if (address) {
    *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += address->sa_len + 3;
  }

  return 1;
}

void sub_18375481C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_169(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = a3;
  nw_endpoint_t address = (sockaddr *)nw_endpoint_get_address(v4);
  if (address
    && *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < *(unsigned __int16 *)(a1 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v10 = 136446722;
      uint64_t v11 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
      __int16 v12 = 2114;
      uint64_t v13 = v7;
      __int16 v14 = 2082;
      uint64_t v15 = "resolved_endpoint";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ sending reply tlv: %{public}s", (uint8_t *)&v10, 0x20u);
    }

    uint64_t v8 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += nw_shoes_add_tlv(*(void *)(a1 + 48) + v8, (unsigned __int16)(*(_WORD *)(a1 + 56) - v8), 8u, address->sa_len, address);
  }

  return 1;
}

void sub_1837549A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_170(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (!v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_8;
  }
  xpc_object_t v4 = v3;
  int v5 = v4[3];

  switch(v5)
  {
    case 6:
    case 32:
    case 49:
    case 50:
    case 51:
    case 53:
    case 54:
    case 57:
    case 60:
    case 61:
    case 65:
    case 89:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446722;
        uint64_t v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
        __int16 v25 = 2114;
        uint64_t v26 = v7;
        __int16 v27 = 1024;
        int v28 = v5;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write in request reply error %{darwin.errno}d", buf, 0x1Cu);
      }

LABEL_6:
      nw_socks5_connection_cancel_on_queue(*(void *)(a1 + 32), 0);
      (*(void (**)(void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), 0);
LABEL_8:

      return;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446722;
      uint64_t v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
      __int16 v25 = 2114;
      uint64_t v26 = v9;
      __int16 v27 = 1024;
      int v28 = v5;
      int v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v21 = 0;
      if (!__nwlog_fault(v10, &type, &v21)) {
        goto LABEL_25;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          uint64_t v13 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
          __int16 v25 = 2114;
          uint64_t v26 = v13;
          __int16 v27 = 1024;
          int v28 = v5;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s %{public}@ write in request reply error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            uint64_t v17 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
            __int16 v25 = 2114;
            uint64_t v26 = v17;
            __int16 v27 = 1024;
            int v28 = v5;
            __int16 v29 = 2082;
            uint64_t v30 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s %{public}@ write in request reply error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v16)
        {
          uint64_t v20 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
          __int16 v25 = 2114;
          uint64_t v26 = v20;
          __int16 v27 = 1024;
          int v28 = v5;
          _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s %{public}@ write in request reply error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          uint64_t v19 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
          __int16 v25 = 2114;
          uint64_t v26 = v19;
          __int16 v27 = 1024;
          int v28 = v5;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s %{public}@ write in request reply error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

LABEL_25:
      if (v10) {
        free(v10);
      }
      goto LABEL_6;
  }
}

void sub_183754E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    BOOL v5 = nw_array_create();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  nw_array_append(v4, v3);

  return 1;
}

void ___ZL44nw_socks5_connection_add_prefer_wifi_requestP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1)
{
  id WeakRetained = (NWConcrete_nw_socks5_connection *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained->sc_state != 255) {
    nw_socks5_connection_assert_prefer_wifi(WeakRetained);
  }
}

void sub_183755060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_assert_prefer_wifi(NWConcrete_nw_socks5_connection *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  sc_prefer_wifi_path_evaluator = (os_unfair_lock_s *)v1->sc_prefer_wifi_path_evaluator;
  if (sc_prefer_wifi_path_evaluator)
  {
    id v3 = sc_prefer_wifi_path_evaluator + 24;
    uint64_t v4 = sc_prefer_wifi_path_evaluator;
    os_unfair_lock_lock(v3);
    BOOL v5 = (NWConcrete_nw_path *)v4[6];
    os_unfair_lock_unlock(v3);

    nw_path_status_t status = nw_path_get_status(&v5->super);
    if (status != nw_path_status_satisfied)
    {
      nw_path_status_t v8 = status;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_assert_prefer_wifi";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v1;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = v8;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %@ waiting to add prefer wi-fi request (%u)", buf, 0x1Cu);
      }

      v1->sc_prefer_wifi_previous_path_nw_path_status_t status = v8;
      goto LABEL_41;
    }
    if (v1->sc_prefer_wifi_previous_path_status == 1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_assert_prefer_wifi";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v1;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %@ ignoring path update to add prefer wi-fi request", buf, 0x16u);
      }

      goto LABEL_41;
    }
    v1->sc_prefer_wifi_previous_path_nw_path_status_t status = 1;
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    if (v5 && (network_agent_dictionary = v5->network_agent_dictionary) != 0)
    {
      uint64_t v11 = network_agent_dictionary;
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = ___ZL39nw_socks5_connection_assert_prefer_wifiP31NWConcrete_nw_socks5_connection_block_invoke;
      applier[3] = &__block_descriptor_40_e37_B24__0r_8__NSObject_OS_xpc_object__16l;
      applier[4] = uu;
      xpc_dictionary_apply(v11, applier);
    }
    else
    {
      uint64_t v11 = 0;
    }
    if (!uuid_is_null(uu))
    {
      memset(buf, 0, 37);
      uuid_unparse(uu, (char *)buf);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)os_log_type_t type = 136446722;
        uint64_t v26 = "nw_socks5_connection_assert_prefer_wifi";
        __int16 v27 = 2112;
        int v28 = v1;
        __int16 v29 = 2080;
        uint64_t v30 = buf;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s %@ adding prefer wi-fi request, asserting agent %s", (uint8_t *)type, 0x20u);
      }

      if (!nw_path_agent_action(v5, uu, 131))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_log_type_t type = 136446722;
          uint64_t v26 = "nw_socks5_connection_assert_prefer_wifi";
          __int16 v27 = 2112;
          int v28 = v1;
          __int16 v29 = 2080;
          uint64_t v30 = buf;
          _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s %@ failed to assert prefer wi-fi agent(%s)", (uint8_t *)type, 0x20u);
        }
      }
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_socks5_connection_assert_prefer_wifi";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "com.apple.networkrelay";
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&unsigned char buf[24] = "PreferWiFi";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v13, type, &v22))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v14 = (id)gLogObj;
        os_log_type_t v15 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_assert_prefer_wifi";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "com.apple.networkrelay";
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(void *)&unsigned char buf[24] = "PreferWiFi";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Unable to determine agent uuid for %s/%s", buf, 0x20u);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v14 = __nwlog_obj();
        os_log_type_t v19 = type[0];
        BOOL v20 = os_log_type_enabled(v14, type[0]);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)long long buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_assert_prefer_wifi";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "com.apple.networkrelay";
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&unsigned char buf[24] = "PreferWiFi";
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s Unable to determine agent uuid for %s/%s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          if (!v13) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        if (v20)
        {
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_assert_prefer_wifi";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "com.apple.networkrelay";
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(void *)&unsigned char buf[24] = "PreferWiFi";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s Unable to determine agent uuid for %s/%s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __int16 v14 = __nwlog_obj();
        os_log_type_t v21 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_assert_prefer_wifi";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "com.apple.networkrelay";
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(void *)&unsigned char buf[24] = "PreferWiFi";
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s Unable to determine agent uuid for %s/%s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v13)
    {
LABEL_40:

LABEL_41:
      goto LABEL_42;
    }
LABEL_39:
    free(v13);
    goto LABEL_40;
  }
LABEL_42:
}

void sub_183755724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 ___ZL39nw_socks5_connection_assert_prefer_wifiP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0;
  data = (__n128 *)xpc_dictionary_get_data(xdict, "data", &length);
  if (data
    && length >= 0xD8
    && length == data[13].n128_u32[1] + 216
    && !strcmp((const char *)&data[1], "com.apple.networkrelay")
    && !strcmp((const char *)&data[3], "PreferWiFi"))
  {
    __n128 result = *data;
    *(__n128 *)*(void *)(a1 + 32) = *data;
  }
  return result;
}

void nw_socks5_connection_outer_connection_read_on_queue(NWConcrete_nw_socks5_connection *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (gLogDatapath)
  {
    uint64_t v4 = __nwlog_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136446466;
      nw_path_status_t v8 = "nw_socks5_connection_outer_connection_read_on_queue";
      __int16 v9 = 2114;
      int v10 = v1;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ reading on outer connection", buf, 0x16u);
    }
  }
  sc_out_connection = v1->sc_out_connection;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke;
  v5[3] = &unk_1E52427C0;
  id v3 = v1;
  uint64_t v6 = v3;
  nw_connection_receive_internal(sc_out_connection, 0, 1u, 0xFFFFFFFF, v5);
}

void sub_18375593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  __int16 v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = v11;
  if (v11)
  {
    uint64_t v13 = v11;
    int v14 = v13[3];
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v15 + 56) != 255 && (*(unsigned char *)(v15 + 160) & 2) == 0)
  {
    if (v9)
    {
      size_t size = dispatch_data_get_size(v9);
      size_t v17 = size;
      if (!v14 && size)
      {
        if (gLogDatapath)
        {
          int v50 = __nwlog_obj();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v51 = *(void *)(a1 + 32);
            uint64_t v52 = "not";
            __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            __int16 v67 = 2114;
            *(_DWORD *)long long buf = 136446978;
            if (a4) {
              uint64_t v52 = "is";
            }
            uint64_t v68 = v51;
            __int16 v69 = 2048;
            uint32_t v70 = (const char *)v17;
            __int16 v71 = 2082;
            int v72 = v52;
            _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ read %zu bytes %{public}s_complete from outer connection", buf, 0x2Au);
          }

          uint64_t v15 = *(void *)(a1 + 32);
        }
        *(void *)(v15 + 184) += v17;
        os_log_type_t v18 = &__block_literal_global_42249;
        id v19 = &__block_literal_global_42249;
        uint64_t v20 = *(void *)(a1 + 32);
        if (!a4 || (*(unsigned char *)(v20 + 160) & 0x20) != 0)
        {
          char v22 = 0;
        }
        else
        {
          id v21 = &__block_literal_global_6_42258;

          uint64_t v20 = *(void *)(a1 + 32);
          char v22 = 1;
          os_log_type_t v18 = &__block_literal_global_6_42258;
        }
        id WeakRetained = objc_loadWeakRetained((id *)(v20 + 24));
        nw_socks5_connection_increment_busy_on_queue(*(void **)(a1 + 32), WeakRetained);
        os_log_type_t v35 = *(void **)(a1 + 32);
        uint64_t v36 = v35[4];
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 3221225472;
        v55[2] = ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_165;
        v55[3] = &unk_1E523C868;
        uint32_t v56 = v35;
        id v33 = WeakRetained;
        char v59 = v22;
        id v57 = v33;
        size_t v58 = v17;
        nw_connection_send(v36, v9, v18, 1, v55);

        goto LABEL_30;
      }
      if (v14) {
        goto LABEL_16;
      }
    }
    else if (v14)
    {
      size_t v17 = 0;
LABEL_16:
      switch(v14)
      {
        case 6:
        case 32:
        case 49:
        case 50:
        case 51:
        case 53:
        case 54:
        case 57:
        case 60:
        case 61:
        case 65:
        case 96:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v23 = (id)gLogObj;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = *(void *)(a1 + 32);
            __int16 v25 = "not";
            __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            *(_DWORD *)long long buf = 136447234;
            __int16 v67 = 2114;
            if (a4) {
              __int16 v25 = "is";
            }
            uint64_t v68 = v24;
            __int16 v69 = 2048;
            uint32_t v70 = (const char *)v17;
            __int16 v71 = 2082;
            int v72 = v25;
            __int16 v73 = 1024;
            int v74 = v14;
            _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
          }

          goto LABEL_27;
        default:
          uint64_t v37 = __nwlog_obj();
          uint64_t v38 = *(void *)(a1 + 32);
          uint64_t v39 = "not";
          __int16 v67 = 2114;
          *(_DWORD *)long long buf = 136447234;
          __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          if (a4) {
            uint64_t v39 = "is";
          }
          uint64_t v68 = v38;
          __int16 v69 = 2048;
          uint32_t v70 = (const char *)v17;
          __int16 v71 = 2082;
          uint64_t v54 = v39;
          int v72 = v39;
          __int16 v73 = 1024;
          int v74 = v14;
          os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v63 = 0;
          if (!__nwlog_fault(v40, &type, &v63)) {
            goto LABEL_50;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v41 = __nwlog_obj();
            os_log_type_t v42 = type;
            if (os_log_type_enabled(v41, type))
            {
              uint64_t v43 = *(void *)(a1 + 32);
              *(_DWORD *)long long buf = 136447234;
              __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
              __int16 v67 = 2114;
              uint64_t v68 = v43;
              __int16 v69 = 2048;
              uint32_t v70 = (const char *)v17;
              __int16 v71 = 2082;
              int v72 = v54;
              __int16 v73 = 1024;
              int v74 = v14;
              _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
            }
          }
          else if (v63)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            uint64_t v41 = __nwlog_obj();
            os_log_type_t v53 = type;
            BOOL v45 = os_log_type_enabled(v41, type);
            if (backtrace_string)
            {
              if (v45)
              {
                uint64_t v46 = *(void *)(a1 + 32);
                *(_DWORD *)long long buf = 136447490;
                __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
                __int16 v67 = 2114;
                uint64_t v68 = v46;
                __int16 v69 = 2048;
                uint32_t v70 = (const char *)v17;
                __int16 v71 = 2082;
                int v72 = v54;
                __int16 v73 = 1024;
                int v74 = v14;
                __int16 v75 = 2082;
                BOOL v76 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v41, v53, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x3Au);
              }

              free(backtrace_string);
              goto LABEL_50;
            }
            if (v45)
            {
              uint64_t v49 = *(void *)(a1 + 32);
              *(_DWORD *)long long buf = 136447234;
              __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
              __int16 v67 = 2114;
              uint64_t v68 = v49;
              __int16 v69 = 2048;
              uint32_t v70 = (const char *)v17;
              __int16 v71 = 2082;
              int v72 = v54;
              __int16 v73 = 1024;
              int v74 = v14;
              _os_log_impl(&dword_1830D4000, v41, v53, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, no backtrace", buf, 0x30u);
            }
          }
          else
          {
            uint64_t v41 = __nwlog_obj();
            os_log_type_t v47 = type;
            if (os_log_type_enabled(v41, type))
            {
              uint64_t v48 = *(void *)(a1 + 32);
              *(_DWORD *)long long buf = 136447234;
              __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
              __int16 v67 = 2114;
              uint64_t v68 = v48;
              __int16 v69 = 2048;
              uint32_t v70 = (const char *)v17;
              __int16 v71 = 2082;
              int v72 = v54;
              __int16 v73 = 1024;
              int v74 = v14;
              _os_log_impl(&dword_1830D4000, v41, v47, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, backtrace limit exceeded", buf, 0x30u);
            }
          }

LABEL_50:
          if (v40) {
            free(v40);
          }
LABEL_27:
          id v29 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
          nw_socks5_connection_increment_busy_on_queue(*(void **)(a1 + 32), v29);
          uint64_t v30 = *(void **)(a1 + 32);
          uint64_t v31 = v30[4];
          completion[0] = MEMORY[0x1E4F143A8];
          completion[1] = 3221225472;
          completion[2] = ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_164;
          completion[3] = &unk_1E523C7F0;
          char v61 = v30;
          uint64_t v32 = v29;
          __int16 v62 = v32;
          nw_connection_send(v31, 0, (nw_content_context_t)&__block_literal_global_6_42258, 1, completion);

          id v33 = v61;
          os_log_type_t v18 = v32;
LABEL_30:

          goto LABEL_31;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      int v28 = "not";
      __int16 v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
      *(_DWORD *)long long buf = 136446722;
      if (a4) {
        int v28 = "is";
      }
      __int16 v67 = 2114;
      uint64_t v68 = v27;
      __int16 v69 = 2082;
      uint32_t v70 = v28;
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ out connection read data len 0 %{public}s_complete", buf, 0x20u);
    }

    goto LABEL_27;
  }
LABEL_31:
}

void sub_1837561B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_164(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 56) == 255) {
    goto LABEL_15;
  }
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446466;
      uint64_t v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
      __int16 v28 = 2114;
      uint64_t v29 = v9;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}@ in connection write close done", buf, 0x16u);
    }
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  int v5 = v4[3];

  if ((v5 - 6) > 0x3B || ((1 << (v5 - 6)) & 0x8C9B80004000001) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    __int16 v28 = 2114;
    uint64_t v29 = v12;
    __int16 v30 = 1024;
    int v31 = v5;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          __int16 v28 = 2114;
          uint64_t v29 = v16;
          __int16 v30 = 1024;
          int v31 = v5;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s %{public}@ in connection write close error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v14 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v19)
          {
            uint64_t v20 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            __int16 v28 = 2114;
            uint64_t v29 = v20;
            __int16 v30 = 1024;
            int v31 = v5;
            __int16 v32 = 2082;
            id v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s %{public}@ in connection write close error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v19)
        {
          uint64_t v23 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          __int16 v28 = 2114;
          uint64_t v29 = v23;
          __int16 v30 = 1024;
          int v31 = v5;
          _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s %{public}@ in connection write close error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        int v14 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          __int16 v28 = 2114;
          uint64_t v29 = v22;
          __int16 v30 = 1024;
          int v31 = v5;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s %{public}@ in connection write close error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
LABEL_32:
    if (v13) {
      free(v13);
    }
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    __int16 v28 = 2114;
    uint64_t v29 = v8;
    __int16 v30 = 1024;
    int v31 = v5;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection write close error %{darwin.errno}d", buf, 0x1Cu);
  }
LABEL_12:

LABEL_13:
  *(unsigned char *)(*(void *)(a1 + 32) + 160) |= 2u;
  id v10 = *(unsigned __int8 **)(a1 + 32);
  if ((~v10[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v10, 0);
  }
LABEL_15:
}

void sub_183756850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_message_on_queueP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v14 = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = v10;
  if (v10)
  {
    uint64_t v12 = (unsigned int *)v10;
    uint64_t v13 = v12[3];
  }
  else
  {
    uint64_t v13 = 0;
  }
  nw_socks5_connection_inner_connection_read_handler_on_queue(*(void *)(a1 + 32), v14, a4, v13, 1);
}

void sub_183756910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_socks5_connection_cancel_on_queueP31NWConcrete_nw_socks5_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  nw_parameters_t v2 = (void *)v1[2];
  if (v2)
  {
    v1[2] = 0;

    uint64_t v1 = *(void **)(a1 + 32);
  }
  uint64_t v4 = v1;
  uint64_t v5 = v4[6];
  if (v5)
  {
    uint64_t v7 = v4;
    (*(void (**)(void))(v5 + 16))();
    uint64_t v6 = (void *)v7[6];
    v7[6] = 0;

    uint64_t v4 = v7;
  }
}

void sub_1837569B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_drain_and_cancel_in_on_queue(void *a1, char a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v6 = a3;
  if (!v5->sc_in_connection)
  {
LABEL_8:
    v6[2](v6);
    goto LABEL_9;
  }
  if ((a2 & 1) == 0)
  {
    nw_socks5_connection_remove_prefer_wifi_request(v5);
    nw_connection_cancel(&v5->sc_in_connection->super);
    sc_in_connection = v5->sc_in_connection;
    v5->sc_in_connection = 0;

    sc_in_udp_associated_tcp_connection = v5->sc_in_udp_associated_tcp_connection;
    if (sc_in_udp_associated_tcp_connection)
    {
      id v11 = sc_in_udp_associated_tcp_connection;
      nw_connection_cancel_inner(v11, 1);

      uint64_t v12 = v5->sc_in_udp_associated_tcp_connection;
      v5->sc_in_udp_associated_tcp_connection = 0;
    }
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446466;
    size_t v17 = "nw_socks5_connection_drain_and_cancel_in_on_queue";
    __int16 v18 = 2114;
    BOOL v19 = v5;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}@ draining inner", buf, 0x16u);
  }

  uint64_t v8 = v5->sc_in_connection;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___ZL49nw_socks5_connection_drain_and_cancel_in_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvvE_block_invoke;
  v13[3] = &unk_1E5248DC0;
  id v14 = v5;
  os_log_type_t v15 = v6;
  nw_connection_receive_internal(v8, 0, 1u, 0xFFFFFFFF, v13);

LABEL_9:
}

void sub_183756BA8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void ___ZL49nw_socks5_connection_drain_and_cancel_in_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvvE_block_invoke(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  id v9 = a5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (v8) {
      size_t size = dispatch_data_get_size(v8);
    }
    else {
      size_t size = 0;
    }
    uint64_t v13 = "not_";
    int v15 = 136447234;
    uint64_t v16 = "nw_socks5_connection_drain_and_cancel_in_on_queue_block_invoke";
    uint64_t v18 = v11;
    __int16 v17 = 2114;
    if (a4) {
      uint64_t v13 = "is_";
    }
    __int16 v19 = 2048;
    size_t v20 = size;
    __int16 v21 = 2082;
    uint64_t v22 = v13;
    __int16 v23 = 2114;
    id v24 = v9;
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}@ drained inner %zu bytes %{public}s_complete error %{public}@", (uint8_t *)&v15, 0x34u);
  }

  if (v9) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = a4 ^ 1u;
  }
  nw_socks5_connection_drain_and_cancel_in_on_queue(*(void *)(a1 + 32), v14, *(void *)(a1 + 40));
}

void sub_183756D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_socks5_connection_cancel_block_invoke(uint64_t a1)
{
}

uint64_t **nw::object::operator new()
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&dword_1EB267830);
  uint64_t v0 = qword_1EB267810;
  if (!qword_1EB267810)
  {
    qword_1EB267810 = 72;
    Class Class = objc_getClass((const char *)nw_string::_class(void)::instance);
    if (Class)
    {
      nw_parameters_t v2 = Class;
      id v3 = sel_registerName("dealloc");
      uint64_t v4 = imp_implementationWithBlock(&__block_literal_global_16482);
      class_replaceMethod(v2, v3, v4, "");
LABEL_4:
      uint64_t v0 = qword_1EB267810;
      goto LABEL_5;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "init";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v21, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "init";
        id v24 = "%{public}s called with null objc_cls";
        goto LABEL_104;
      }
      if (!v37)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "init";
        id v24 = "%{public}s called with null objc_cls, backtrace limit exceeded";
        goto LABEL_104;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v31 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v40 = "init";
          __int16 v41 = 2082;
          os_log_type_t v42 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null objc_cls, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_105;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "init";
        id v24 = "%{public}s called with null objc_cls, no backtrace";
LABEL_104:
        _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
      }
    }
LABEL_105:
    if (v21) {
      free(v21);
    }
    goto LABEL_4;
  }
LABEL_5:
  if (v0 != 72)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "get_object_from_pool";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v11, &type, &v37)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v40 = "get_object_from_pool";
      uint64_t v14 = "%{public}s called with null (m_obj_size == size)";
    }
    else if (v37)
    {
      int v15 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v40 = "get_object_from_pool";
          __int16 v41 = 2082;
          os_log_type_t v42 = v15;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null (m_obj_size == size), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v15);
        goto LABEL_55;
      }
      if (!v16)
      {
LABEL_55:
        if (v11) {
          free(v11);
        }
        goto LABEL_57;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v40 = "get_object_from_pool";
      uint64_t v14 = "%{public}s called with null (m_obj_size == size), no backtrace";
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v40 = "get_object_from_pool";
      uint64_t v14 = "%{public}s called with null (m_obj_size == size), backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
    goto LABEL_55;
  }
  uint64_t v5 = qword_1EB267828;
  if (!qword_1EB267828)
  {
LABEL_57:
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EB267830);
    goto LABEL_58;
  }
  BOOL v6 = (unint64_t)qword_1EB267808 >= 0x48;
  qword_1EB267808 -= 72;
  if (!v6)
  {
    if (gLogDatapath)
    {
      uint64_t v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446978;
        os_log_type_t v40 = "get_object_from_pool";
        __int16 v41 = 2082;
        os_log_type_t v42 = "m_pool_size";
        __int16 v43 = 2048;
        uint64_t v44 = qword_1EB267810;
        __int16 v45 = 2048;
        uint64_t v46 = qword_1EB267808;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    qword_1EB267808 = 0;
    uint64_t v5 = qword_1EB267828;
  }
  uint64_t v7 = (void **)qword_1EB267820;
  uint64_t v8 = *(uint64_t ***)(qword_1EB267820 + 16);
  uint64_t v9 = *(void *)qword_1EB267820;
  *(void *)(v9 + 8) = *(void *)(qword_1EB267820 + 8);
  *v7[1] = v9;
  qword_1EB267828 = v5 - 1;
  free(v7);
  os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EB267830);
  if (!v8)
  {
LABEL_58:
    __int16 v32 = objc_getClass((const char *)nw_string::_class(void)::instance);
    if (v32)
    {
      Instance = (uint64_t **)class_createInstance(v32, 0x48uLL);
      if (Instance)
      {
        uint64_t v8 = Instance;
        Instance[2] = &nw_string::_class(void)::instance;
        return v8;
      }
      __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v40 = "operator new";
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (!__nwlog_fault(v17, &type, &v37)) {
        goto LABEL_99;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "operator new";
          size_t v20 = "%{public}s called with null obj";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v37)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "operator new";
          size_t v20 = "%{public}s called with null obj, backtrace limit exceeded";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      uint64_t v26 = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v36 = os_log_type_enabled(v18, type);
      if (!v26)
      {
        if (v36)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "operator new";
          size_t v20 = "%{public}s called with null obj, no backtrace";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (v36)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v40 = "operator new";
        __int16 v41 = 2082;
        os_log_type_t v42 = v26;
        __int16 v28 = "%{public}s called with null obj, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v40 = "operator new";
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (!__nwlog_fault(v17, &type, &v37)) {
        goto LABEL_99;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "operator new";
          size_t v20 = "%{public}s called with null objc_cls";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v37)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "operator new";
          size_t v20 = "%{public}s called with null objc_cls, backtrace limit exceeded";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      uint64_t v26 = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v35 = os_log_type_enabled(v18, type);
      if (!v26)
      {
        if (v35)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "operator new";
          size_t v20 = "%{public}s called with null objc_cls, no backtrace";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (v35)
      {
LABEL_44:
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v40 = "operator new";
        __int16 v41 = 2082;
        os_log_type_t v42 = v26;
        __int16 v28 = "%{public}s called with null objc_cls, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
    }
LABEL_79:
    free(v26);
    goto LABEL_99;
  }
  if (v8[2] == &nw_string::_class(void)::instance)
  {
    id v10 = objc_getClass((const char *)nw_string::_class(void)::instance);
    if (v10)
    {
      objc_constructInstance(v10, v8);
      return v8;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "operator new";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v17, &type, &v37)) {
      goto LABEL_99;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "operator new";
        size_t v20 = "%{public}s called with null objc_cls";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    if (!v37)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "operator new";
        size_t v20 = "%{public}s called with null objc_cls, backtrace limit exceeded";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    uint64_t v26 = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v29 = os_log_type_enabled(v18, type);
    if (!v26)
    {
      if (v29)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "operator new";
        size_t v20 = "%{public}s called with null objc_cls, no backtrace";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    if (v29) {
      goto LABEL_44;
    }
    goto LABEL_79;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v40 = "operator new";
  __int16 v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (!__nwlog_fault(v17, &type, &v37)) {
    goto LABEL_99;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "operator new";
        size_t v20 = "%{public}s called with null (obj->m_cls == cls), backtrace limit exceeded";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    uint64_t v26 = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v27 = os_log_type_enabled(v18, type);
    if (!v26)
    {
      if (v27)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "operator new";
        size_t v20 = "%{public}s called with null (obj->m_cls == cls), no backtrace";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    if (v27)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v40 = "operator new";
      __int16 v41 = 2082;
      os_log_type_t v42 = v26;
      __int16 v28 = "%{public}s called with null (obj->m_cls == cls), dumping backtrace:%{public}s";
LABEL_78:
      _os_log_impl(&dword_1830D4000, v18, v19, v28, buf, 0x16u);
      goto LABEL_79;
    }
    goto LABEL_79;
  }
  uint64_t v18 = __nwlog_obj();
  os_log_type_t v19 = type;
  if (os_log_type_enabled(v18, type))
  {
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "operator new";
    size_t v20 = "%{public}s called with null (obj->m_cls == cls)";
LABEL_98:
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
  }
LABEL_99:
  if (v17) {
    free(v17);
  }
  return 0;
}

void ___ZN2nw6object9class_def4initEm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = nw::object::cls(*(uint64_t **)(a2 + 16));
  uint64_t v4 = nw::object::class_def::lookup_method(v3, nw::object::__destroy_def_instance, qword_1EB267920);
  if (v5) {
    BOOL v6 = (v5 & 1 | v4) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (v4) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    uint64_t v9 = (void (*)(void *))v4;
    id v10 = (void *)(a2 + (v5 >> 1));
    if (v5) {
      uint64_t v9 = *(void (**)(void *))(*v10 + v9);
    }
    v9(v10);
    return;
  }
  nw::object::cls(*(uint64_t **)(a2 + 16));
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)long long buf = 136446466;
  size_t v20 = "bad_method_lookup";
  __int16 v21 = 2080;
  uint64_t v22 = "object::destroy";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)long long buf = 136446466;
      size_t v20 = "bad_method_lookup";
      __int16 v21 = 2080;
      uint64_t v22 = "object::destroy";
      uint64_t v14 = "%{public}s unable to lookup %s";
      goto LABEL_30;
    }
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)long long buf = 136446466;
      size_t v20 = "bad_method_lookup";
      __int16 v21 = 2080;
      uint64_t v22 = "object::destroy";
      uint64_t v14 = "%{public}s unable to lookup %s, backtrace limit exceeded";
      goto LABEL_30;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = gLogObj;
    os_log_type_t v13 = type;
    BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)long long buf = 136446722;
        size_t v20 = "bad_method_lookup";
        __int16 v21 = 2080;
        uint64_t v22 = "object::destroy";
        __int16 v23 = 2082;
        id v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s unable to lookup %s, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v16)
    {
      *(_DWORD *)long long buf = 136446466;
      size_t v20 = "bad_method_lookup";
      __int16 v21 = 2080;
      uint64_t v22 = "object::destroy";
      uint64_t v14 = "%{public}s unable to lookup %s, no backtrace";
LABEL_30:
      _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0x16u);
    }
  }
LABEL_31:
  if (v11) {
    free(v11);
  }
}

uint64_t NWPBBrowseDescriptorReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  BOOL v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 < v7)
  {
    id v10 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      uint64_t v12 = (unsigned char *)(a2 + *v8);
      if (*v12) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0) {
        goto LABEL_39;
      }
      uint64_t v15 = *v3;
      unint64_t v16 = *(void *)(a2 + v15);
      if (v16 == -1 || v16 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v17 = v16 + 1;
      int v18 = *(char *)(*(void *)(a2 + *v10) + v16);
      *(void *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v18 & 0x7F) << 7;
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v19 = *v3;
      unint64_t v20 = *(void *)(a2 + v19);
      if (v20 == -1 || v20 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v21 = v20 + 1;
      int v22 = *(char *)(*(void *)(a2 + *v10) + v20);
      *(void *)(a2 + v19) = v21;
      v14 |= (unint64_t)(v22 & 0x7F) << 14;
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v23 = *v3;
      unint64_t v24 = *(void *)(a2 + v23);
      if (v24 == -1 || v24 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v25 = v24 + 1;
      int v26 = *(char *)(*(void *)(a2 + *v10) + v24);
      *(void *)(a2 + v23) = v25;
      v14 |= (unint64_t)(v26 & 0x7F) << 21;
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v29 = v28 + 1;
      int v30 = *(char *)(*(void *)(a2 + *v10) + v28);
      *(void *)(a2 + v27) = v29;
      v14 |= (unint64_t)(v30 & 0x7F) << 28;
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v31 = *v3;
      unint64_t v32 = *(void *)(a2 + v31);
      if (v32 == -1 || v32 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v33 = v32 + 1;
      int v34 = *(char *)(*(void *)(a2 + *v10) + v32);
      *(void *)(a2 + v31) = v33;
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v35 = *v3;
      unint64_t v36 = *(void *)(a2 + v35);
      if (v36 == -1 || v36 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v37 = v36 + 1;
      int v38 = *(char *)(*(void *)(a2 + *v10) + v36);
      *(void *)(a2 + v35) = v37;
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v39 = *v3;
      unint64_t v40 = *(void *)(a2 + v39);
      if (v40 == -1 || v40 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v41 = v40 + 1;
      int v42 = *(char *)(*(void *)(a2 + *v10) + v40);
      *(void *)(a2 + v39) = v41;
      if ((v42 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v43 = *v3;
      unint64_t v44 = *(void *)(a2 + v43);
      if (v44 == -1 || v44 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v45 = v44 + 1;
      int v46 = *(char *)(*(void *)(a2 + *v10) + v44);
      *(void *)(a2 + v43) = v45;
      if ((v46 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v47 = *v3;
      unint64_t v48 = *(void *)(a2 + v47);
      if (v48 == -1 || v48 >= *(void *)(a2 + *v6))
      {
LABEL_37:
        uint64_t v12 = (unsigned char *)(a2 + *v8);
        goto LABEL_38;
      }
      unint64_t v49 = v48 + 1;
      int v50 = *(char *)(*(void *)(a2 + *v10) + v48);
      *(void *)(a2 + v47) = v49;
      if (v50 < 0)
      {
        unint64_t v14 = 0;
        int v51 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_41;
      }
LABEL_39:
      int v51 = *(unsigned __int8 *)(a2 + *v8);
      if (*(unsigned char *)(a2 + *v8)) {
        unint64_t v14 = 0;
      }
LABEL_41:
      if (v51) {
        BOOL v52 = 1;
      }
      else {
        BOOL v52 = (v14 & 7) == 4;
      }
      if (v52) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if ((v14 >> 3) == 1)
      {
        os_log_type_t v53 = objc_alloc_init(NWPBServiceBrowse);
        objc_storeStrong((id *)(a1 + 8), v53);
        if (!PBReaderPlaceMark() || !NWPBServiceBrowseReadFrom((uint64_t)v53, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
      uint64_t v4 = *v3;
      unint64_t v5 = *(void *)(a2 + v4);
      unint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
    }
    unint64_t v14 = 0;
LABEL_38:
    *uint64_t v12 = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v8) == 0;
}

uint64_t __Block_byref_object_copy__16663(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16664(uint64_t a1)
{
}

BOOL ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
  unint64_t v7 = *(unsigned char **)(a1 + 40);
  if (v7)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v45 = __nwlog_obj();
    os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    int v46 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v46);
    if (result)
    {
LABEL_45:
      __break(1u);
      return result;
    }
    free(v46);
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v47 = __nwlog_obj();
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  unint64_t v48 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v48);
  if (result) {
    goto LABEL_45;
  }
  free(v48);
LABEL_3:
  int v8 = *a2;
  unsigned char *v7 = v8;
  if (v8)
  {
    int v9 = a2[1];
    v7[1] = v9;
    if (v9)
    {
      int v10 = a2[2];
      v7[2] = v10;
      if (v10)
      {
        int v11 = a2[3];
        v7[3] = v11;
        if (v11)
        {
          int v12 = a2[4];
          v7[4] = v12;
          if (v12)
          {
            int v13 = a2[5];
            v7[5] = v13;
            if (v13)
            {
              int v14 = a2[6];
              v7[6] = v14;
              if (v14)
              {
                int v15 = a2[7];
                v7[7] = v15;
                if (v15)
                {
                  int v16 = a2[8];
                  v7[8] = v16;
                  if (v16)
                  {
                    int v17 = a2[9];
                    v7[9] = v17;
                    if (v17)
                    {
                      int v18 = a2[10];
                      v7[10] = v18;
                      if (v18)
                      {
                        int v19 = a2[11];
                        v7[11] = v19;
                        if (v19)
                        {
                          int v20 = a2[12];
                          v7[12] = v20;
                          if (v20)
                          {
                            int v21 = a2[13];
                            v7[13] = v21;
                            if (v21)
                            {
                              int v22 = a2[14];
                              v7[14] = v22;
                              if (v22)
                              {
                                int v23 = a2[15];
                                v7[15] = v23;
                                if (v23)
                                {
                                  int v24 = a2[16];
                                  v7[16] = v24;
                                  if (v24)
                                  {
                                    int v25 = a2[17];
                                    v7[17] = v25;
                                    if (v25)
                                    {
                                      int v26 = a2[18];
                                      v7[18] = v26;
                                      if (v26)
                                      {
                                        int v27 = a2[19];
                                        v7[19] = v27;
                                        if (v27)
                                        {
                                          int v28 = a2[20];
                                          v7[20] = v28;
                                          if (v28)
                                          {
                                            int v29 = a2[21];
                                            v7[21] = v29;
                                            if (v29)
                                            {
                                              int v30 = a2[22];
                                              v7[22] = v30;
                                              if (v30)
                                              {
                                                int v31 = a2[23];
                                                v7[23] = v31;
                                                if (v31)
                                                {
                                                  int v32 = a2[24];
                                                  unsigned char v7[24] = v32;
                                                  if (v32)
                                                  {
                                                    int v33 = a2[25];
                                                    v7[25] = v33;
                                                    if (v33)
                                                    {
                                                      int v34 = a2[26];
                                                      v7[26] = v34;
                                                      if (v34)
                                                      {
                                                        int v35 = a2[27];
                                                        v7[27] = v35;
                                                        if (v35)
                                                        {
                                                          int v36 = a2[28];
                                                          v7[28] = v36;
                                                          if (v36)
                                                          {
                                                            int v37 = a2[29];
                                                            v7[29] = v37;
                                                            if (v37)
                                                            {
                                                              int v38 = a2[30];
                                                              v7[30] = v38;
                                                              if (v38)
                                                              {
                                                                int v39 = a2[31];
                                                                v7[31] = v39;
                                                                if (v39)
                                                                {
                                                                  int v40 = a2[32];
                                                                  v7[32] = v40;
                                                                  if (v40)
                                                                  {
                                                                    int v41 = a2[33];
                                                                    v7[33] = v41;
                                                                    if (v41)
                                                                    {
                                                                      int v42 = a2[34];
                                                                      v7[34] = v42;
                                                                      if (v42)
                                                                      {
                                                                        int v43 = a2[35];
                                                                        v7[35] = v43;
                                                                        if (v43) {
                                                                          v7[36] = 0;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 0;
}

void ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_2_85(uint64_t a1)
{
}

uint64_t ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_86(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_90(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_flow_replay_add_candidate_output_handler(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    __int16 v67 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v127 = "nw_endpoint_handler_get_mode";
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault(v68, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v69 = __nwlog_obj();
        os_log_type_t v70 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v69 = __nwlog_obj();
        os_log_type_t v76 = type;
        BOOL v77 = os_log_type_enabled(v69, type);
        if (backtrace_string)
        {
          if (v77)
          {
            *(_DWORD *)long long buf = 136446466;
            v127 = "nw_endpoint_handler_get_mode";
            __int16 v128 = 2082;
            v129 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v69, v76, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_134;
        }
        if (v77)
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v69, v76, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v69 = __nwlog_obj();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v69, v100, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_134:
    if (v68) {
      free(v68);
    }
    unsigned int mode = 0;
LABEL_137:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v101 = (id)gLogObj;
    if (mode > 5) {
      size_t v102 = "unknown-mode";
    }
    else {
      size_t v102 = off_1E523FB08[mode];
    }
    *(_DWORD *)long long buf = 136446722;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    __int16 v128 = 2082;
    v129 = (void *)v102;
    __int16 v130 = 2082;
    id v131 = "flow";
    int v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault(v72, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v73 = (id)gLogObj;
        os_log_type_t v103 = type;
        if (os_log_type_enabled(v73, type))
        {
          if (mode > 5) {
            uint64_t v104 = "unknown-mode";
          }
          else {
            uint64_t v104 = off_1E523FB08[mode];
          }
          *(_DWORD *)long long buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          __int16 v128 = 2082;
          v129 = (void *)v104;
          __int16 v130 = 2082;
          id v131 = "flow";
          _os_log_impl(&dword_1830D4000, v73, v103, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v124)
      {
        char v105 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v73 = (id)gLogObj;
        os_log_type_t v106 = type;
        BOOL v107 = os_log_type_enabled(v73, type);
        if (v105)
        {
          if (v107)
          {
            if (mode > 5) {
              v108 = "unknown-mode";
            }
            else {
              v108 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446978;
            v127 = "nw_flow_replay_add_candidate_output_handler";
            __int16 v128 = 2082;
            v129 = (void *)v108;
            __int16 v130 = 2082;
            id v131 = "flow";
            __int16 v132 = 2082;
            v133 = v105;
            _os_log_impl(&dword_1830D4000, v73, v106, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v105);
          if (!v72) {
            goto LABEL_171;
          }
          goto LABEL_170;
        }
        if (v107)
        {
          if (mode > 5) {
            BOOL v111 = "unknown-mode";
          }
          else {
            BOOL v111 = off_1E523FB08[mode];
          }
          *(_DWORD *)long long buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          __int16 v128 = 2082;
          v129 = (void *)v111;
          __int16 v130 = 2082;
          id v131 = "flow";
          _os_log_impl(&dword_1830D4000, v73, v106, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v73 = (id)gLogObj;
        os_log_type_t v109 = type;
        if (os_log_type_enabled(v73, type))
        {
          if (mode > 5) {
            CFTypeRef v110 = "unknown-mode";
          }
          else {
            CFTypeRef v110 = off_1E523FB08[mode];
          }
          *(_DWORD *)long long buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          __int16 v128 = 2082;
          v129 = (void *)v110;
          __int16 v130 = 2082;
          id v131 = "flow";
          _os_log_impl(&dword_1830D4000, v73, v109, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_168;
    }
    goto LABEL_169;
  }
  unsigned int mode = v5->mode;

  if (mode != 2) {
    goto LABEL_137;
  }
  if (!a2)
  {
    __int16 v71 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    int v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (!__nwlog_fault(v72, &type, &v124)) {
      goto LABEL_169;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v73 = __nwlog_obj();
      os_log_type_t v74 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)long long buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null flow_protocol", buf, 0xCu);
      }
    }
    else if (v124)
    {
      os_log_type_t v88 = (char *)__nw_create_backtrace_string();
      __int16 v73 = __nwlog_obj();
      os_log_type_t v89 = type;
      BOOL v90 = os_log_type_enabled(v73, type);
      if (v88)
      {
        if (v90)
        {
          *(_DWORD *)long long buf = 136446466;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          __int16 v128 = 2082;
          v129 = v88;
          _os_log_impl(&dword_1830D4000, v73, v89, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v88);
        if (!v72) {
          goto LABEL_171;
        }
        goto LABEL_170;
      }
      if (v90)
      {
        *(_DWORD *)long long buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_1830D4000, v73, v89, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v73 = __nwlog_obj();
      os_log_type_t v113 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)long long buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_1830D4000, v73, v113, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_168;
  }
  if (!a3)
  {
    BOOL v78 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    int v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (!__nwlog_fault(v72, &type, &v124)) {
      goto LABEL_169;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v73 = __nwlog_obj();
      os_log_type_t v79 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)long long buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_1830D4000, v73, v79, "%{public}s called with null candidate_output_handler", buf, 0xCu);
      }
LABEL_168:

      goto LABEL_169;
    }
    if (!v124)
    {
      __int16 v73 = __nwlog_obj();
      os_log_type_t v114 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)long long buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_1830D4000, v73, v114, "%{public}s called with null candidate_output_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_168;
    }
    CFTypeRef v91 = (char *)__nw_create_backtrace_string();
    __int16 v73 = __nwlog_obj();
    os_log_type_t v92 = type;
    BOOL v93 = os_log_type_enabled(v73, type);
    if (!v91)
    {
      if (v93)
      {
        *(_DWORD *)long long buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_1830D4000, v73, v92, "%{public}s called with null candidate_output_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_168;
    }
    if (v93)
    {
      *(_DWORD *)long long buf = 136446466;
      v127 = "nw_flow_replay_add_candidate_output_handler";
      __int16 v128 = 2082;
      v129 = v91;
      _os_log_impl(&dword_1830D4000, v73, v92, "%{public}s called with null candidate_output_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v91);
LABEL_169:
    if (!v72)
    {
LABEL_171:
      uint64_t v16 = 0;
      goto LABEL_172;
    }
LABEL_170:
    free(v72);
    goto LABEL_171;
  }
  int v8 = nw_endpoint_handler_copy_flow(v6);
  int v9 = v8;
  if (!v8)
  {
    BOOL v80 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    int v81 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault(v81, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v82 = __nwlog_obj();
        os_log_type_t v83 = type;
        if (os_log_type_enabled(v82, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v124)
      {
        size_t v94 = (char *)__nw_create_backtrace_string();
        BOOL v82 = __nwlog_obj();
        os_log_type_t v95 = type;
        BOOL v96 = os_log_type_enabled(v82, type);
        if (v94)
        {
          if (v96)
          {
            *(_DWORD *)long long buf = 136446466;
            v127 = "nw_flow_replay_add_candidate_output_handler";
            __int16 v128 = 2082;
            v129 = v94;
            _os_log_impl(&dword_1830D4000, v82, v95, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v94);
          goto LABEL_194;
        }
        if (v96)
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          _os_log_impl(&dword_1830D4000, v82, v95, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v82 = __nwlog_obj();
        os_log_type_t v115 = type;
        if (os_log_type_enabled(v82, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          _os_log_impl(&dword_1830D4000, v82, v115, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_194:
    if (v81) {
      free(v81);
    }
    goto LABEL_75;
  }
  uint64_t v10 = *((void *)v8 + 94);
  if (!v10)
  {
    os_log_type_t v84 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v127 = "nw_protocol_utilities_add_input_handler";
    os_log_type_t v85 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault(v85, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v86 = __nwlog_obj();
        os_log_type_t v87 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s called with null input_protocol", buf, 0xCu);
        }
      }
      else if (v124)
      {
        os_log_type_t v97 = (char *)__nw_create_backtrace_string();
        os_log_type_t v86 = __nwlog_obj();
        os_log_type_t v98 = type;
        BOOL v99 = os_log_type_enabled(v86, type);
        if (v97)
        {
          if (v99)
          {
            *(_DWORD *)long long buf = 136446466;
            v127 = "nw_protocol_utilities_add_input_handler";
            __int16 v128 = 2082;
            v129 = v97;
            _os_log_impl(&dword_1830D4000, v86, v98, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v97);
          goto LABEL_199;
        }
        if (v99)
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_1830D4000, v86, v98, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v86 = __nwlog_obj();
        os_log_type_t v116 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v127 = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_1830D4000, v86, v116, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_199:
    if (v85) {
      free(v85);
    }
    goto LABEL_53;
  }
  int v11 = (void *)(a2 + 96);
  if (a2 + 96 == v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446466;
    v127 = "nw_protocol_utilities_add_input_handler";
    __int16 v128 = 2048;
    v129 = v11;
    int v18 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault((const char *)v18, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)long long buf = 136446466;
          v127 = "nw_protocol_utilities_add_input_handler";
          __int16 v128 = 2048;
          v129 = v11;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
        }
      }
      else if (v124)
      {
        int v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v19 = (id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v19, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)long long buf = 136446722;
            v127 = "nw_protocol_utilities_add_input_handler";
            __int16 v128 = 2048;
            v129 = v11;
            __int16 v130 = 2082;
            id v131 = v22;
            _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v22);
          if (!v18) {
            goto LABEL_53;
          }
LABEL_52:
          free(v18);
          goto LABEL_53;
        }
        if (v24)
        {
          *(_DWORD *)long long buf = 136446466;
          v127 = "nw_protocol_utilities_add_input_handler";
          __int16 v128 = 2048;
          v129 = v11;
          _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v19 = (id)gLogObj;
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)long long buf = 136446466;
          v127 = "nw_protocol_utilities_add_input_handler";
          __int16 v128 = 2048;
          v129 = v11;
          _os_log_impl(&dword_1830D4000, v19, v35, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
        }
      }
    }
    if (!v18) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  int v12 = *(void **)(a2 + 120);
  if (!v12 || !*v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446466;
      v127 = "nw_protocol_utilities_add_input_handler";
      __int16 v128 = 2048;
      v129 = (void *)(a2 + 96);
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
    }

    goto LABEL_53;
  }
  if ((nw_protocol_add_input_handler(a2 + 96, v10) & 1) == 0)
  {
LABEL_53:
    int v43 = v6;
    BOOL v44 = (*((unsigned char *)v43 + 268) & 0x20) == 0;

    if (v44)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v45 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        int v46 = v43;

        uint64_t v47 = v46;
        BOOL v48 = (*((unsigned char *)v43 + 268) & 1) == 0;

        if (v48) {
          unint64_t v49 = "";
        }
        else {
          unint64_t v49 = "dry-run ";
        }
        nw_endpoint_t v50 = nw_endpoint_handler_copy_endpoint(v47);
        logging_description = nw_endpoint_get_logging_description(v50);
        BOOL v52 = v47;
        os_log_type_t v53 = v52;
        uint64_t v54 = v52[30];
        if (v54 > 5) {
          __int16 v55 = "unknown-state";
        }
        else {
          __int16 v55 = off_1E523FB38[v54];
        }
        nw_interface_type_t v123 = v55;

        uint32_t v56 = v53;
        id v57 = v56;
        size_t v58 = "path";
        switch(v6->mode)
        {
          case 0:
            break;
          case 1:
            size_t v58 = "resolver";
            break;
          case 2:
            size_t v58 = nw_endpoint_flow_mode_string(v56[31]);
            break;
          case 3:
            size_t v58 = "proxy";
            break;
          case 4:
            size_t v58 = "fallback";
            break;
          case 5:
            size_t v58 = "transform";
            break;
          default:
            size_t v58 = "unknown-mode";
            break;
        }

        uint64_t v121 = v45;
        char v59 = v57;
        os_unfair_lock_lock((os_unfair_lock_t)v59 + 28);
        id v60 = v59[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v59 + 28);

        id_str = v46->id_str;
        id v62 = v60;
        char v63 = v62;
        uint64_t v64 = *((void *)v9 + 94);
        os_log_type_t v65 = "invalid";
        if (v64)
        {
          __int16 v66 = *(const char **)(v64 + 16);
          if (v66) {
            os_log_type_t v65 = v66;
          }
        }
        *(_DWORD *)long long buf = 136448002;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        __int16 v128 = 2082;
        v129 = id_str;
        __int16 v130 = 2082;
        id v131 = v49;
        __int16 v132 = 2082;
        v133 = (void *)logging_description;
        __int16 v134 = 2082;
        unint64_t v45 = v121;
        __int16 v135 = v123;
        __int16 v136 = 2082;
        uint64_t v137 = v58;
        __int16 v138 = 2114;
        id v139 = v62;
        __int16 v140 = 2082;
        *(void *)v141 = v65;
        _os_log_impl(&dword_1830D4000, v121, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach protocol %{public}s to replay protocol", buf, 0x52u);
      }
    }
    goto LABEL_75;
  }
  uint64_t internal = *(void *)(a2 + 288);
  if (!internal)
  {
    uint64_t internal = nw_hash_table_create_internal(5u, 8, (const void *(*)(const void *, unsigned int *))nw_replay_hash_get_key, (unsigned int (*)(const void *, unsigned int))nw_replay_hash_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_replay_hash_matches_key, (void (*)(void *))nw_replay_hash_release);
    if (internal) {
      *(_DWORD *)(internal + 48) &= ~2u;
    }
    *(void *)(a2 + 288) = internal;
  }
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  BOOL v14 = nw_hash_table_add_object(internal, a3, (char *)&type);
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    int v25 = v6;
    BOOL v26 = (*((unsigned char *)v25 + 268) & 0x20) == 0;

    if (v26)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v27 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v25);
        int v29 = nw_endpoint_handler_dry_run_string(v25);
        unsigned __int16 v118 = v9;
        nw_endpoint_t v30 = nw_endpoint_handler_copy_endpoint(v25);
        int v31 = nw_endpoint_get_logging_description(v30);
        int v32 = nw_endpoint_handler_state_string(v25);
        int v33 = nw_endpoint_handler_mode_string(v25);
        id v34 = nw_endpoint_handler_copy_current_path(v25);
        *(_DWORD *)long long buf = 136448258;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        __int16 v128 = 2082;
        v129 = (void *)id_string;
        __int16 v130 = 2082;
        id v131 = v29;
        __int16 v132 = 2082;
        v133 = (void *)v31;
        __int16 v134 = 2082;
        __int16 v135 = v32;
        __int16 v136 = 2082;
        uint64_t v137 = v33;
        __int16 v138 = 2114;
        id v139 = v34;
        __int16 v140 = 1042;
        *(_DWORD *)v141 = 16;
        *(_WORD *)&v141[4] = 2098;
        *(void *)&v141[6] = a3;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay already has output handler registered for %{public,uuid_t}.16P", buf, 0x58u);

        int v9 = v118;
      }
    }
    goto LABEL_75;
  }
  uint64_t v15 = v14;
  *(void *)nw_hash_node_get_extra(v14) = 0;
  if ((nw_protocol_add_input_handler(a3, a2 + 96) & 1) == 0)
  {
    int v36 = v6;
    BOOL v37 = (*((unsigned char *)v36 + 268) & 0x20) == 0;

    if (v37)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v38 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        int v39 = nw_endpoint_handler_get_id_string(v36);
        BOOL v119 = v9;
        CFAllocatorRef v120 = nw_endpoint_handler_dry_run_string(v36);
        nw_endpoint_t v122 = nw_endpoint_handler_copy_endpoint(v36);
        unsigned int v117 = nw_endpoint_get_logging_description(v122);
        int v40 = nw_endpoint_handler_state_string(v36);
        int v41 = nw_endpoint_handler_mode_string(v36);
        id v42 = nw_endpoint_handler_copy_current_path(v36);
        *(_DWORD *)long long buf = 136448258;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        __int16 v128 = 2082;
        v129 = (void *)v39;
        __int16 v130 = 2082;
        id v131 = v120;
        __int16 v132 = 2082;
        v133 = (void *)v117;
        __int16 v134 = 2082;
        __int16 v135 = v40;
        __int16 v136 = 2082;
        uint64_t v137 = v41;
        __int16 v138 = 2114;
        id v139 = v42;
        __int16 v140 = 2048;
        *(void *)v141 = a2 + 96;
        *(_WORD *)&v141[8] = 2048;
        *(void *)&v141[10] = a3;
        _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Unable to add input handler using replay protocol %p and protocol %p", buf, 0x5Cu);

        int v9 = v119;
      }
    }
    nw_hash_table_remove_node(*(void *)(a2 + 288), v15);
LABEL_75:
    uint64_t v16 = 0;
    goto LABEL_76;
  }
  nw_flow_replay_send_initial_data_to_candidates(v6, (nw_flow_protocol *)a2);
  uint64_t v16 = 1;
LABEL_76:

LABEL_172:
  return v16;
}

void sub_183759F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_send_initial_data_to_candidates(NWConcrete_nw_endpoint_handler *a1, nw_flow_protocol *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    unint64_t v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v40 = "nw_endpoint_handler_get_mode";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v8, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)long long buf = 136446466;
            int v40 = "nw_endpoint_handler_get_mode";
            __int16 v41 = 2082;
            id v42 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v17)
        {
          *(_DWORD *)long long buf = 136446210;
          int v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v9 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_35:
    if (v8) {
      free(v8);
    }
    unsigned int mode = 0;
    goto LABEL_38;
  }
  unsigned int mode = v3->mode;

  if (mode != 2)
  {
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v22 = (id)gLogObj;
    if (mode > 5) {
      os_log_type_t v23 = "unknown-mode";
    }
    else {
      os_log_type_t v23 = off_1E523FB08[mode];
    }
    *(_DWORD *)long long buf = 136446722;
    int v40 = "nw_flow_replay_send_initial_data_to_candidates";
    __int16 v41 = 2082;
    id v42 = (void *)v23;
    __int16 v43 = 2082;
    BOOL v44 = "flow";
    int v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v37))
    {
LABEL_70:
      if (!v12) {
        goto LABEL_72;
      }
LABEL_71:
      free(v12);
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v13 = (id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        if (mode > 5) {
          int v25 = "unknown-mode";
        }
        else {
          int v25 = off_1E523FB08[mode];
        }
        *(_DWORD *)long long buf = 136446722;
        int v40 = "nw_flow_replay_send_initial_data_to_candidates";
        __int16 v41 = 2082;
        id v42 = (void *)v25;
        __int16 v43 = 2082;
        BOOL v44 = "flow";
        _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
      goto LABEL_69;
    }
    if (!v37)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v13 = (id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v13, type))
      {
        if (mode > 5) {
          int v31 = "unknown-mode";
        }
        else {
          int v31 = off_1E523FB08[mode];
        }
        *(_DWORD *)long long buf = 136446722;
        int v40 = "nw_flow_replay_send_initial_data_to_candidates";
        __int16 v41 = 2082;
        id v42 = (void *)v31;
        __int16 v43 = 2082;
        BOOL v44 = "flow";
        _os_log_impl(&dword_1830D4000, v13, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_69;
    }
    BOOL v26 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v13 = (id)gLogObj;
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v13, type);
    if (!v26)
    {
      if (v28)
      {
        if (mode > 5) {
          int v32 = "unknown-mode";
        }
        else {
          int v32 = off_1E523FB08[mode];
        }
        *(_DWORD *)long long buf = 136446722;
        int v40 = "nw_flow_replay_send_initial_data_to_candidates";
        __int16 v41 = 2082;
        id v42 = (void *)v32;
        __int16 v43 = 2082;
        BOOL v44 = "flow";
        _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
      goto LABEL_69;
    }
    if (v28)
    {
      if (mode > 5) {
        int v29 = "unknown-mode";
      }
      else {
        int v29 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446978;
      int v40 = "nw_flow_replay_send_initial_data_to_candidates";
      __int16 v41 = 2082;
      id v42 = (void *)v29;
      __int16 v43 = 2082;
      BOOL v44 = "flow";
      __int16 v45 = 2082;
      int v46 = v26;
      _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
    }

    free(v26);
    if (v12) {
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  if (a2)
  {
    if (a2->fast_open_frames.tqh_first)
    {
      if (a2->fast_open_frame_finalized_count)
      {
        candidate_output_handlers = (char *)a2->candidate_output_handlers;
        if (candidate_output_handlers)
        {
          v34[0] = MEMORY[0x1E4F143A8];
          v34[1] = 3221225472;
          v34[2] = ___ZL46nw_flow_replay_send_initial_data_to_candidatesP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocol_block_invoke;
          v34[3] = &unk_1E523CB38;
          os_log_type_t v35 = v4;
          int v36 = a2;
          nw_hash_table_apply(candidate_output_handlers, (uint64_t)v34);
        }
      }
    }
    goto LABEL_72;
  }
  int v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  int v40 = "nw_flow_replay_send_initial_data_to_candidates";
  int v12 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (!__nwlog_fault((const char *)v12, &type, &v37)) {
    goto LABEL_70;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)long long buf = 136446210;
      int v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null flow_protocol", buf, 0xCu);
    }
LABEL_69:

    goto LABEL_70;
  }
  if (!v37)
  {
    int v13 = __nwlog_obj();
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)long long buf = 136446210;
      int v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_69;
  }
  int v18 = (char *)__nw_create_backtrace_string();
  int v13 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v13, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)long long buf = 136446210;
      int v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_69;
  }
  if (v20)
  {
    *(_DWORD *)long long buf = 136446466;
    int v40 = "nw_flow_replay_send_initial_data_to_candidates";
    __int16 v41 = 2082;
    id v42 = v18;
    _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v12) {
    goto LABEL_71;
  }
LABEL_72:
}

uint64_t ___ZL46nw_flow_replay_send_initial_data_to_candidatesP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (object)
  {
    uint64_t v6 = *(void *)(object + 24);
    if (v6)
    {
      if (*(void *)(v6 + 88) && *(void *)(v6 + 96))
      {
        unint64_t v7 = (unsigned int *)extra;
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v45 = a1;
        while (1)
        {
          id v9 = *(id *)(a1 + 32);
          os_log_type_t v10 = v9;
          if (*v7 >= *(_DWORD *)(v8 + 328))
          {

            return 1;
          }
          v74[0] = 0;
          v74[1] = v74;
          int v75 = 0;
          v74[2] = 0x2020000000;
          uint64_t v68 = 0;
          __int16 v69 = &v68;
          uint64_t v70 = 0x3032000000;
          __int16 v71 = __Block_byref_object_copy__16663;
          int v72 = __Block_byref_object_dispose__16664;
          id v73 = 0;
          v62[0] = MEMORY[0x1E4F143A8];
          v62[1] = 3221225472;
          char v63 = ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke;
          uint64_t v64 = &unk_1E523CB60;
          __int16 v66 = &v68;
          __int16 v67 = v7;
          os_log_type_t v65 = v74;
          uint64_t v11 = *(void *)(v8 + 296);
          do
          {
            if (!v11) {
              break;
            }
            uint64_t v12 = *(void *)(v11 + 16);
            char v13 = ((uint64_t (*)(void *))v63)(v62);
            uint64_t v11 = v12;
          }
          while ((v13 & 1) != 0);
          uint64_t v14 = v69[5];
          if (!v14)
          {
            _Block_object_dispose(&v68, 8);

            _Block_object_dispose(v74, 8);
            return 1;
          }
          uint64_t v15 = v7[1];
          unsigned int v46 = *v7;
          uint64_t v16 = *(void *)(v14 + 112);
          if (v16)
          {
            if ((*(_WORD *)(v14 + 204) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(v14, *(void *)(v14 + 88)))
            {
              LODWORD(v16) = *(_DWORD *)(v14 + 52);
              uint64_t v17 = *(unsigned int *)(v14 + 56);
              if (v16) {
                LODWORD(v16) = v16 - (v17 + *(_DWORD *)(v14 + 60));
              }
              uint64_t v18 = *(void *)(v14 + 112) + v17;
              goto LABEL_20;
            }
            LODWORD(v16) = 0;
          }
          uint64_t v18 = 0;
LABEL_20:
          unsigned int v19 = *(unsigned __int8 *)(v69[5] + 186);
          uint64_t v20 = (v16 - v15);
          v61[0] = 0;
          v61[1] = v61;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)(object + 24) + 88))(object, v8 + 96, 1, v20, 2, v61))
          {
            uint64_t v57 = 0;
            size_t v58 = &v57;
            int v60 = 0;
            uint64_t v59 = 0x2020000000;
            v47[0] = MEMORY[0x1E4F143A8];
            v47[1] = 3221225472;
            BOOL v48 = ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke_91;
            unint64_t v49 = &unk_1E523CB88;
            int v55 = v20;
            uint64_t v52 = v18 + v15;
            os_log_type_t v53 = v7;
            uint64_t v54 = v8;
            nw_endpoint_t v50 = &v57;
            int v51 = &v68;
            char v56 = v19 >> 7;
            uint64_t v21 = v61[0];
            do
            {
              if (!v21) {
                break;
              }
              uint64_t v22 = *(void *)(v21 + 32);
              char v23 = ((uint64_t (*)(void *))v48)(v47);
              uint64_t v21 = v22;
            }
            while ((v23 & 1) != 0);
            a1 = v45;
            if (v61[0])
            {
              if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                int v25 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_endpoint_handler_get_id_string(v10);
                  __int16 v43 = nw_endpoint_handler_dry_run_string(v10);
                  nw_endpoint_t v27 = nw_endpoint_handler_copy_endpoint(v10);
                  logging_description = nw_endpoint_get_logging_description(v27);
                  int v39 = nw_endpoint_handler_state_string(v10);
                  char v37 = nw_endpoint_handler_mode_string(v10);
                  id v28 = nw_endpoint_handler_copy_current_path(v10);
                  int v29 = *((_DWORD *)v58 + 6);
                  *(_DWORD *)long long buf = 136448258;
                  BOOL v77 = "nw_flow_replay_send_one_frame";
                  __int16 v78 = 2082;
                  os_log_type_t v79 = id_string;
                  os_log_type_t v30 = v28;
                  __int16 v80 = 2082;
                  int v81 = v43;
                  __int16 v82 = 2082;
                  os_log_type_t v83 = logging_description;
                  __int16 v84 = 2082;
                  os_log_type_t v85 = v39;
                  __int16 v86 = 2082;
                  os_log_type_t v87 = v37;
                  __int16 v88 = 2114;
                  id v89 = v28;
                  __int16 v90 = 1024;
                  int v91 = v29;
                  __int16 v92 = 1024;
                  int v93 = v20;
                  _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sending %u/%u early bytes", buf, 0x54u);
                }
              }
              (*(void (**)(uint64_t, void *))(*(void *)(object + 24) + 96))(object, v61);
            }
            _Block_object_dispose(&v57, 8);
          }
          else
          {
            a1 = v45;
            if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              int v31 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
              {
                int v32 = nw_endpoint_handler_get_id_string(v10);
                BOOL v44 = nw_endpoint_handler_dry_run_string(v10);
                nw_endpoint_t v33 = nw_endpoint_handler_copy_endpoint(v10);
                id v42 = nw_endpoint_get_logging_description(v33);
                int v40 = nw_endpoint_handler_state_string(v10);
                int v38 = nw_endpoint_handler_mode_string(v10);
                id v34 = nw_endpoint_handler_copy_current_path(v10);
                *(_DWORD *)long long buf = 136448002;
                BOOL v77 = "nw_flow_replay_send_one_frame";
                __int16 v78 = 2082;
                os_log_type_t v79 = v32;
                os_log_type_t v35 = v34;
                __int16 v80 = 2082;
                int v81 = v44;
                __int16 v82 = 2082;
                os_log_type_t v83 = v42;
                __int16 v84 = 2082;
                os_log_type_t v85 = v40;
                __int16 v86 = 2082;
                os_log_type_t v87 = v38;
                __int16 v88 = 2114;
                id v89 = v34;
                __int16 v90 = 1024;
                int v91 = v20;
                _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Unable to send %u early bytes", buf, 0x4Eu);
              }
            }
          }
          BOOL v24 = *v7 > v46;
          _Block_object_dispose(&v68, 8);

          _Block_object_dispose(v74, 8);
          if (v24)
          {
            uint64_t v8 = *(void *)(a1 + 40);
            if (*v7 < *(_DWORD *)(v8 + 328)) {
              continue;
            }
          }
          return 1;
        }
      }
    }
  }
  return 1;
}

void sub_18375AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v53 - 240), 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  int v7 = **(_DWORD **)(a1 + 48);
  if (v6 == v7) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  else {
    *(_DWORD *)(v5 + 24) = v6 + 1;
  }

  return v6 != v7;
}

uint64_t ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke_91(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (nw_frame_uses_external_data((uint64_t)v3))
  {
    unsigned int v4 = nw_frame_unclaimed_length(v3);
    unsigned int v6 = v4;
    unsigned int v7 = *(_DWORD *)(a1 + 72);
    if (v4 < v7)
    {
      if (v4)
      {
        uint64_t v16 = dispatch_data_create(*(const void **)(a1 + 48), v4, 0, 0);
        nw_frame_set_external_data((uint64_t)v3, v16, 0);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v6;
        *(_DWORD *)(*(void *)(a1 + 56) + 4) += v6;
      }
      nw_frame_claim((uint64_t)v3, v5, v6, 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v17, v6, 0);
      BOOL v10 = v6 >= v7;
    }
    else
    {
      if (v7)
      {
        uint64_t v8 = dispatch_data_create(*(const void **)(a1 + 48), *(unsigned int *)(a1 + 72), 0, 0);
        nw_frame_set_external_data((uint64_t)v3, v8, 0);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += *(_DWORD *)(a1 + 72);
        *(_DWORD *)(*(void *)(a1 + 56) + 4) += *(_DWORD *)(a1 + 72);
      }
      **(void **)(a1 + 56) = (**(_DWORD **)(a1 + 56) + 1);
      nw_frame_claim((uint64_t)v3, v5, *(_DWORD *)(a1 + 72), 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v9, *(_DWORD *)(a1 + 72), 0);
      v3[186] = v3[186] & 0x7F | ((*(unsigned char *)(a1 + 76) != 0) << 7);
      BOOL v10 = v6 >= v7;
    }
  }
  else
  {
    LODWORD(__n) = 0;
    uint64_t v11 = (void *)nw_frame_unclaimed_bytes((uint64_t)v3, &__n);
    unsigned int v13 = __n;
    unsigned int v14 = *(_DWORD *)(a1 + 72);
    if (__n < v14)
    {
      int v18 = __n;
      if (__n && v11)
      {
        memcpy(v11, *(const void **)(a1 + 48), __n);
        int v18 = __n;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += __n;
        *(_DWORD *)(*(void *)(a1 + 56) + 4) += v18;
      }
      nw_frame_claim((uint64_t)v3, v12, v18, 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v19, __n, 0);
    }
    else
    {
      if (v14)
      {
        memcpy(v11, *(const void **)(a1 + 48), *(unsigned int *)(a1 + 72));
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += *(_DWORD *)(a1 + 72);
      }
      **(void **)(a1 + 56) = (**(_DWORD **)(a1 + 56) + 1);
      nw_frame_claim((uint64_t)v3, v12, *(_DWORD *)(a1 + 72), 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v15, *(_DWORD *)(a1 + 72), 0);
      v3[186] = v3[186] & 0x7F | ((*(unsigned char *)(a1 + 76) != 0) << 7);
    }
    BOOL v10 = v13 >= v14;
  }
  int v20 = v10;
  nw_frame_inherit_metadata(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), (uint64_t)v3, v20);

  return 1;
}

BOOL nw_replay_hash_matches_key(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t __nw_flow_replay_select_output_handler_block_invoke(void *a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object == a1[5])
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  else
  {
    uint64_t v5 = object;
    nw_hash_table_remove_node(*(void *)(a1[6] + 288), a2);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6)
      {
        unsigned int v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8);
        if (v7) {
          v7(v5, a1[6] + 96, 1);
        }
      }
    }
  }
  return 1;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_16877()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t __nw_endpoint_flow_cleanup_protocol_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  uint64_t v5 = *((void *)v3 + 4);
  uint64_t v6 = (void *)*((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    uint64_t v6 = (void *)*((void *)v3 + 5);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 280) = v6;
  }
  void *v6 = v5;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);

  return 1;
}

uint64_t __nw_endpoint_flow_cleanup_protocol_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 288), a2);
  uint64_t v5 = *(void *)(a1 + 32);
  if (object != *(void *)(v5 + 128) || (*(_WORD *)(v5 + 332) & 0x800) != 0)
  {
    if (object)
    {
      uint64_t v7 = *(void *)(object + 24);
      if (v7)
      {
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
        if (v8) {
          v8(object, v5 + 96, 1);
        }
      }
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136446466;
      uint64_t v11 = "nw_endpoint_flow_cleanup_protocol_block_invoke_2";
      __int16 v12 = 2048;
      uint64_t v13 = object;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Not tearing down replay selected output handler %p", (uint8_t *)&v10, 0x16u);
    }
  }
  return 1;
}

uint64_t __nw_endpoint_flow_cleanup_protocol_block_invoke_69(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_flow_replay_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (id *)a1->handle;
    id v5 = handle[20];
    uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = (unsigned int *)v5;
      uint64_t v8 = v7[29];

      if (v8 == 2)
      {
        if (a1->output_handler == a2)
        {
          default_input_handler = a1->default_input_handler;
          if (default_input_handler)
          {
            callbacks = default_input_handler->callbacks;
            if (callbacks)
            {
              disconnected = (void (*)(void))callbacks->disconnected;
              if (disconnected) {
                disconnected();
              }
            }
          }
        }
        else if (handle[36])
        {
          id v9 = handle[23];
          v31[0] = MEMORY[0x1E4F143A8];
          v31[1] = 3221225472;
          v31[2] = ___ZL27nw_flow_replay_disconnectedP11nw_protocolS0__block_invoke;
          v31[3] = &unk_1E5249DC0;
          int v32 = v7;
          nw_endpoint_t v33 = a2;
          id v34 = a1;
          nw_queue_context_async(v9, v31);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          if (v8 > 5) {
            uint64_t v11 = "unknown-mode";
          }
          else {
            uint64_t v11 = off_1E523FB08[v8];
          }
          *(_DWORD *)long long buf = 136446722;
          int v38 = "nw_flow_replay_disconnected";
          __int16 v39 = 2082;
          int v40 = (void *)v11;
          __int16 v41 = 2082;
          id v42 = "flow";
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_17:

      return;
    }
    uint64_t v19 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v38 = "nw_flow_replay_disconnected";
    int v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v20, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v38 = "nw_flow_replay_disconnected";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)long long buf = 136446466;
            int v38 = "nw_flow_replay_disconnected";
            __int16 v39 = 2082;
            int v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (v28)
        {
          *(_DWORD *)long long buf = 136446210;
          int v38 = "nw_flow_replay_disconnected";
          _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v38 = "nw_flow_replay_disconnected";
          _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_53:
    if (v20) {
      free(v20);
    }
    goto LABEL_17;
  }
  uint64_t v15 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  int v38 = "nw_flow_replay_disconnected";
  uint64_t v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (__nwlog_fault(v16, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v35)
    {
      char v23 = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v17, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)long long buf = 136446466;
          int v38 = "nw_flow_replay_disconnected";
          __int16 v39 = 2082;
          int v40 = v23;
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_48;
      }
      if (v25)
      {
        *(_DWORD *)long long buf = 136446210;
        int v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v29, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_48:
  if (v16) {
    free(v16);
  }
}

void sub_18375BC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL27nw_flow_replay_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v7 = (uint64_t *)nw_endpoint_handler_copy_flow(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
  if (v7)
  {
    uint64_t v2 = v7[83];
    if (v2)
    {
      BOOL node = nw_hash_table_get_node(v7[83], *(void *)(a1 + 40), 0);
      if (node)
      {
        nw_hash_table_remove_node(v2, node);
        uint64_t v4 = *(void *)(a1 + 40);
        if (v4)
        {
          uint64_t v5 = *(void *)(v4 + 24);
          if (v5)
          {
            uint64_t v6 = *(void (**)(void))(v5 + 8);
            if (v6) {
              v6();
            }
          }
        }
      }
    }
  }
}

void sub_18375BD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(id *)(v5 + 160);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = (unsigned int *)v6;
      uint64_t v9 = v8[29];

      if (v9 == 2)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            __int16 v12 = *(uint64_t (**)(void))(v11 + 152);
            if (v12)
            {
              uint64_t v13 = v12();
LABEL_17:

              return v13;
            }
          }
        }
        else
        {
          uint64_t v16 = *(char **)(v5 + 288);
          if (v16)
          {
            v34[0] = MEMORY[0x1E4F143A8];
            v34[1] = 3221225472;
            v34[2] = ___ZL38nw_flow_replay_unregister_notificationP11nw_protocolS0_31nw_protocol_notification_type_t_block_invoke;
            v34[3] = &__block_descriptor_44_e23_B16__0__nw_hash_node__8l;
            void v34[4] = a1;
            int v35 = a3;
            nw_hash_table_apply(v16, (uint64_t)v34);
            uint64_t v13 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          if (v9 > 5) {
            uint64_t v15 = "unknown-mode";
          }
          else {
            uint64_t v15 = off_1E523FB08[v9];
          }
          *(_DWORD *)long long buf = 136446722;
          __int16 v39 = "nw_flow_replay_unregister_notification";
          __int16 v40 = 2082;
          __int16 v41 = (void *)v15;
          __int16 v42 = 2082;
          uint64_t v43 = "flow";
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_16:
      uint64_t v13 = 0;
      goto LABEL_17;
    }
    os_log_type_t v22 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v39 = "nw_flow_replay_unregister_notification";
    char v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v23, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v39 = "nw_flow_replay_unregister_notification";
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v39 = "nw_flow_replay_unregister_notification";
            __int16 v40 = 2082;
            __int16 v41 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v31)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v39 = "nw_flow_replay_unregister_notification";
          _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v39 = "nw_flow_replay_unregister_notification";
          _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v23) {
      free(v23);
    }
    goto LABEL_16;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v39 = "nw_flow_replay_unregister_notification";
  uint64_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v19, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v39 = "nw_flow_replay_unregister_notification";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v36)
    {
      BOOL v26 = (char *)__nw_create_backtrace_string();
      int v20 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v20, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v39 = "nw_flow_replay_unregister_notification";
          __int16 v40 = 2082;
          __int16 v41 = v26;
          _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_48;
      }
      if (v28)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v39 = "nw_flow_replay_unregister_notification";
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v20 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v39 = "nw_flow_replay_unregister_notification";
        _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_48:
  if (v19) {
    free(v19);
  }
  return 0;
}

void sub_18375C348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_flow_replay_unregister_notificationP11nw_protocolS0_31nw_protocol_notification_type_t_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 152);
      if (v4) {
        v4();
      }
    }
  }
  return 0;
}

uint64_t nw_flow_replay_register_notification(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(id *)(v9 + 160);
    uint64_t v11 = v10;
    if (v10)
    {
      __int16 v12 = (unsigned int *)v10;
      uint64_t v13 = v12[29];

      if (v13 == 2)
      {
        uint64_t v14 = *(void *)(a1 + 32);
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 24);
          if (v15)
          {
            uint64_t v16 = *(uint64_t (**)(void))(v15 + 144);
            if (v16)
            {
              uint64_t v17 = v16();
LABEL_17:

              return v17;
            }
          }
        }
        else
        {
          int v20 = *(char **)(v9 + 288);
          if (v20)
          {
            v38[0] = MEMORY[0x1E4F143A8];
            v38[1] = 3221225472;
            v38[2] = ___ZL36nw_flow_replay_register_notificationP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
            v38[3] = &__block_descriptor_60_e23_B16__0__nw_hash_node__8l;
            int v39 = a3;
            v38[4] = a1;
            v38[5] = a4;
            v38[6] = a5;
            nw_hash_table_apply(v20, (uint64_t)v38);
            uint64_t v17 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          if (v13 > 5) {
            uint64_t v19 = "unknown-mode";
          }
          else {
            uint64_t v19 = off_1E523FB08[v13];
          }
          *(_DWORD *)long long buf = 136446722;
          uint64_t v43 = "nw_flow_replay_register_notification";
          __int16 v44 = 2082;
          uint64_t v45 = (void *)v19;
          __int16 v46 = 2082;
          uint64_t v47 = "flow";
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_16:
      uint64_t v17 = 0;
      goto LABEL_17;
    }
    BOOL v26 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v43 = "nw_flow_replay_register_notification";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (__nwlog_fault(v27, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v43 = "nw_flow_replay_register_notification";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v28 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v43 = "nw_flow_replay_register_notification";
            __int16 v44 = 2082;
            uint64_t v45 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v34, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v35)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v43 = "nw_flow_replay_register_notification";
          _os_log_impl(&dword_1830D4000, v28, v34, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v28 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v43 = "nw_flow_replay_register_notification";
          _os_log_impl(&dword_1830D4000, v28, v37, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v27) {
      free(v27);
    }
    goto LABEL_16;
  }
  os_log_type_t v22 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v43 = "nw_flow_replay_register_notification";
  char v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (__nwlog_fault(v23, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v43 = "nw_flow_replay_register_notification";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v40)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v24, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v43 = "nw_flow_replay_register_notification";
          __int16 v44 = 2082;
          uint64_t v45 = v30;
          _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
        goto LABEL_48;
      }
      if (v32)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v43 = "nw_flow_replay_register_notification";
        _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v43 = "nw_flow_replay_register_notification";
        _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_48:
  if (v23) {
    free(v23);
  }
  return 0;
}

void sub_18375C9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_flow_replay_register_notificationP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 144);
      if (v4) {
        v4();
      }
    }
  }
  return 0;
}

BOOL nw_flow_replay_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return a1->output_handler == 0;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v13 = "nw_flow_replay_waiting_for_output";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v13 = "nw_flow_replay_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v13 = "nw_flow_replay_waiting_for_output";
            __int16 v14 = 2082;
            uint64_t v15 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v13 = "nw_flow_replay_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v13 = "nw_flow_replay_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_flow_replay_get_message_properties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!a3) {
      return;
    }
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(id *)(v5 + 160);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = (unsigned int *)v6;
      uint64_t v9 = v8[29];

      if (v9 == 2)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            __int16 v12 = *(void (**)(void))(v11 + 248);
            if (v12) {
              v12();
            }
          }
        }
        else
        {
          uint64_t v15 = *(char **)(v5 + 288);
          if (v15)
          {
            v32[0] = MEMORY[0x1E4F143A8];
            v32[1] = 3221225472;
            v32[2] = ___ZL37nw_flow_replay_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke;
            v32[3] = &__block_descriptor_48_e23_B16__0__nw_hash_node__8l;
            v32[4] = a1;
            void v32[5] = a3;
            nw_hash_table_apply(v15, (uint64_t)v32);
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          if (v9 > 5) {
            __int16 v14 = "unknown-mode";
          }
          else {
            __int16 v14 = off_1E523FB08[v9];
          }
          *(_DWORD *)long long buf = 136446722;
          os_log_type_t v36 = "nw_flow_replay_get_message_properties";
          __int16 v37 = 2082;
          int v38 = (void *)v14;
          __int16 v39 = 2082;
          char v40 = "flow";
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_17:

      return;
    }
    int v20 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v36 = "nw_flow_replay_get_message_properties";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v36 = "nw_flow_replay_get_message_properties";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v36 = "nw_flow_replay_get_message_properties";
            __int16 v37 = 2082;
            int v38 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (v29)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v36 = "nw_flow_replay_get_message_properties";
          _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v36 = "nw_flow_replay_get_message_properties";
          _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_53:
    if (v21) {
      free(v21);
    }
    goto LABEL_17;
  }
  uint64_t v16 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v36 = "nw_flow_replay_get_message_properties";
  uint64_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v17, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v33)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v36 = "nw_flow_replay_get_message_properties";
          __int16 v37 = 2082;
          int v38 = v24;
          _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_45;
      }
      if (v26)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_45:
  if (v17) {
    free(v17);
  }
}

void sub_18375D280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_flow_replay_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 248);
      if (v4) {
        v4();
      }
    }
  }
  return 0;
}

void nw_flow_replay_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    id v4 = *((id *)handle + 20);
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = (unsigned int *)v4;
      uint64_t v7 = v6[29];

      if (v7 == 2)
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            disconnect = (void (*)(void))callbacks->disconnect;
            if (disconnect) {
              disconnect();
            }
          }
        }
        else
        {
          uint64_t v13 = (char *)*((void *)handle + 36);
          if (v13)
          {
            v30[0] = MEMORY[0x1E4F143A8];
            v30[1] = 3221225472;
            v30[2] = ___ZL25nw_flow_replay_disconnectP11nw_protocolS0__block_invoke;
            v30[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v30[4] = a1;
            nw_hash_table_apply(v13, (uint64_t)v30);
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if (v7 > 5) {
            __int16 v12 = "unknown-mode";
          }
          else {
            __int16 v12 = off_1E523FB08[v7];
          }
          *(_DWORD *)long long buf = 136446722;
          os_log_type_t v34 = "nw_flow_replay_disconnect";
          __int16 v35 = 2082;
          os_log_type_t v36 = (void *)v12;
          __int16 v37 = 2082;
          int v38 = "flow";
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_16:

      return;
    }
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v34 = "nw_flow_replay_disconnect";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v19, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v34 = "nw_flow_replay_disconnect";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v20 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v34 = "nw_flow_replay_disconnect";
            __int16 v35 = 2082;
            os_log_type_t v36 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }
        if (v27)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v34 = "nw_flow_replay_disconnect";
          _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v20 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v34 = "nw_flow_replay_disconnect";
          _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_52:
    if (v19) {
      free(v19);
    }
    goto LABEL_16;
  }
  __int16 v14 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v34 = "nw_flow_replay_disconnect";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v15, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v31)
    {
      os_log_type_t v22 = (char *)__nw_create_backtrace_string();
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v34 = "nw_flow_replay_disconnect";
          __int16 v35 = 2082;
          os_log_type_t v36 = v22;
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        goto LABEL_47;
      }
      if (v24)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_47:
  if (v15) {
    free(v15);
  }
}

void sub_18375D8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL25nw_flow_replay_disconnectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      id v4 = *(void (**)(void))(v3 + 32);
      if (v4) {
        v4();
      }
    }
  }
  return 1;
}

uint64_t nw_flow_replay_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    id v4 = *((id *)handle + 20);
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = (unsigned int *)v4;
      uint64_t v7 = v6[29];

      if (v7 == 2)
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            connect = (uint64_t (*)(void))callbacks->connect;
            if (connect)
            {
              uint64_t v11 = connect();
LABEL_17:

              return v11;
            }
          }
        }
        else
        {
          __int16 v14 = (char *)*((void *)handle + 36);
          if (v14)
          {
            v32[0] = MEMORY[0x1E4F143A8];
            v32[1] = 3221225472;
            v32[2] = ___ZL22nw_flow_replay_connectP11nw_protocolS0__block_invoke;
            v32[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v32[4] = a1;
            nw_hash_table_apply(v14, (uint64_t)v32);
            uint64_t v11 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          if (v7 > 5) {
            uint64_t v13 = "unknown-mode";
          }
          else {
            uint64_t v13 = off_1E523FB08[v7];
          }
          *(_DWORD *)long long buf = 136446722;
          os_log_type_t v36 = "nw_flow_replay_connect";
          __int16 v37 = 2082;
          int v38 = (void *)v13;
          __int16 v39 = 2082;
          char v40 = "flow";
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_16:
      uint64_t v11 = 0;
      goto LABEL_17;
    }
    int v20 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v36 = "nw_flow_replay_connect";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v36 = "nw_flow_replay_connect";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v36 = "nw_flow_replay_connect";
            __int16 v37 = 2082;
            int v38 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v29)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v36 = "nw_flow_replay_connect";
          _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v36 = "nw_flow_replay_connect";
          _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v21) {
      free(v21);
    }
    goto LABEL_16;
  }
  uint64_t v16 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v36 = "nw_flow_replay_connect";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v17, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v36 = "nw_flow_replay_connect";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v33)
    {
      BOOL v24 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v36 = "nw_flow_replay_connect";
          __int16 v37 = 2082;
          int v38 = v24;
          _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_48;
      }
      if (v26)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v36 = "nw_flow_replay_connect";
        _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v36 = "nw_flow_replay_connect";
        _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_48:
  if (v17) {
    free(v17);
  }
  return 0;
}

void sub_18375DF2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL22nw_flow_replay_connectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      id v4 = *(void (**)(void))(v3 + 24);
      if (v4) {
        v4();
      }
    }
  }
  return 1;
}

uint64_t nw_flow_replay_updated_path(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(id *)(v5 + 160);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = (unsigned int *)v6;
      uint64_t v9 = v8[29];

      if (v9 == 2)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            __int16 v12 = *(uint64_t (**)(void))(v11 + 168);
            if (v12)
            {
              uint64_t v13 = v12();
LABEL_17:

              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v16 = *(char **)(v5 + 288);
          if (v16)
          {
            v34[0] = MEMORY[0x1E4F143A8];
            v34[1] = 3221225472;
            v34[2] = ___ZL27nw_flow_replay_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke;
            v34[3] = &unk_1E523CB38;
            uint64_t v36 = a1;
            id v35 = v4;
            nw_hash_table_apply(v16, (uint64_t)v34);

            uint64_t v13 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          if (v9 > 5) {
            uint64_t v15 = "unknown-mode";
          }
          else {
            uint64_t v15 = off_1E523FB08[v9];
          }
          *(_DWORD *)long long buf = 136446722;
          char v40 = "nw_flow_replay_updated_path";
          __int16 v41 = 2082;
          __int16 v42 = (void *)v15;
          __int16 v43 = 2082;
          __int16 v44 = "flow";
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_16:
      uint64_t v13 = 0;
      goto LABEL_17;
    }
    os_log_type_t v22 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v40 = "nw_flow_replay_updated_path";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v23, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v40 = "nw_flow_replay_updated_path";
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v24 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)long long buf = 136446466;
            char v40 = "nw_flow_replay_updated_path";
            __int16 v41 = 2082;
            __int16 v42 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v31)
        {
          *(_DWORD *)long long buf = 136446210;
          char v40 = "nw_flow_replay_updated_path";
          _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v24 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v40 = "nw_flow_replay_updated_path";
          _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v23) {
      free(v23);
    }
    goto LABEL_16;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v40 = "nw_flow_replay_updated_path";
  os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v40 = "nw_flow_replay_updated_path";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v37)
    {
      BOOL v26 = (char *)__nw_create_backtrace_string();
      int v20 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v20, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)long long buf = 136446466;
          char v40 = "nw_flow_replay_updated_path";
          __int16 v41 = 2082;
          __int16 v42 = v26;
          _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_48;
      }
      if (v28)
      {
        *(_DWORD *)long long buf = 136446210;
        char v40 = "nw_flow_replay_updated_path";
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v20 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v40 = "nw_flow_replay_updated_path";
        _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_48:
  if (v19) {
    free(v19);
  }
  uint64_t v13 = 0;
LABEL_18:

  return v13;
}

void sub_18375E5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_flow_replay_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      id v4 = *(void (**)(void))(v3 + 168);
      if (v4) {
        v4();
      }
    }
  }
  return 1;
}

void nw_flow_replay_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (nw_flow_protocol *)a1->handle;
    id v4 = handle->handler;
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = v4;
      uint64_t mode = v6->mode;

      if (mode == 2)
      {
        nw_flow_replay_send_initial_data_to_candidates(v6, handle);
        default_input_handler = a1->default_input_handler;
        if (default_input_handler)
        {
          callbacks = default_input_handler->callbacks;
          if (callbacks)
          {
            output_available = (void (*)(void))callbacks->output_available;
            if (output_available) {
              output_available();
            }
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if (mode > 5) {
            __int16 v12 = "unknown-mode";
          }
          else {
            __int16 v12 = off_1E523FB08[mode];
          }
          *(_DWORD *)long long buf = 136446722;
          os_log_type_t v32 = "nw_flow_replay_output_available";
          __int16 v33 = 2082;
          os_log_type_t v34 = (void *)v12;
          __int16 v35 = 2082;
          uint64_t v36 = "flow";
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_14:

      return;
    }
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v32 = "nw_flow_replay_output_available";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v32 = "nw_flow_replay_output_available";
            __int16 v33 = 2082;
            os_log_type_t v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v26)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_50:
    if (v18) {
      free(v18);
    }
    goto LABEL_14;
  }
  uint64_t v13 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v32 = "nw_flow_replay_output_available";
  __int16 v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v14, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v32 = "nw_flow_replay_output_available";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v29)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v15, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v32 = "nw_flow_replay_output_available";
          __int16 v33 = 2082;
          os_log_type_t v34 = v21;
          _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_45;
      }
      if (v23)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v32 = "nw_flow_replay_output_available";
        _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v32 = "nw_flow_replay_output_available";
        _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_45:
  if (v14) {
    free(v14);
  }
}

void sub_18375EBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    output_handler = a1->output_handler;
    if (output_handler)
    {
      callbacks = output_handler->callbacks;
      if (callbacks && (output_finished = (void (*)(void))callbacks->output_finished) != 0)
      {
        output_finished();
      }
      else
      {
        id v6 = __nwlog_obj();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          identifier = (nw_protocol_identifier *)"<null>";
          if (a1->identifier) {
            identifier = a1->identifier;
          }
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_flow_replay_output_finished";
          __int16 v19 = 2082;
          os_log_type_t v20 = identifier;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Protocol %{public}s does not support output finished", buf, 0x16u);
        }
      }
    }
    return;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_flow_replay_output_finished";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v9, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_flow_replay_output_finished";
        __int16 v12 = "%{public}s called with null protocol";
LABEL_26:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v18 = "nw_flow_replay_output_finished";
            __int16 v19 = 2082;
            os_log_type_t v20 = (nw_protocol_identifier *)backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (!v14) {
          goto LABEL_27;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_flow_replay_output_finished";
        __int16 v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_26;
      }
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_flow_replay_output_finished";
        __int16 v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
LABEL_27:
  }
LABEL_28:
  if (v9) {
    free(v9);
  }
}

uint64_t nw_flow_replay_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (nw_flow_protocol *)a1->handle;
    uint64_t v5 = handle->handler;
    id v6 = v5;
    if (v5)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v7[29];

      if (v8 == 2)
      {
        if (handle->fast_open_frames.tqh_first)
        {
          *(void *)long long buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000;
          LOBYTE(v47) = 0;
          v37[0] = MEMORY[0x1E4F143A8];
          v37[1] = 3221225472;
          int v38 = ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          __int16 v39 = &unk_1E523CC98;
          __int16 v42 = handle;
          __int16 v43 = a2;
          uint64_t v9 = v7;
          char v40 = v9;
          __int16 v41 = buf;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first) {
              break;
            }
            os_log_type_t v11 = (nw_frame *)*((void *)tqh_first + 4);
            char v12 = ((uint64_t (*)(void *))v38)(v37);
            tqh_first = v11;
          }
          while ((v12 & 1) != 0);
          if (*(unsigned char *)(*(void *)&buf[8] + 24)) {
            nw_flow_replay_send_initial_data_to_candidates(v9, handle);
          }

          _Block_object_dispose(buf, 8);
        }
        output_handler = a1->output_handler;
        if (!output_handler)
        {
          uint64_t v16 = 1;
          goto LABEL_23;
        }
        callbacks = output_handler->callbacks;
        if (callbacks)
        {
          finalize_output_frames = (uint64_t (*)(void))callbacks->finalize_output_frames;
          if (finalize_output_frames)
          {
            uint64_t v16 = finalize_output_frames();
LABEL_23:

            return v16;
          }
        }
        os_log_type_t v28 = __nwlog_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support finalize_output_frames", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          if (v8 > 5) {
            os_log_type_t v18 = "unknown-mode";
          }
          else {
            os_log_type_t v18 = off_1E523FB08[v8];
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v18;
          *(_WORD *)&unsigned char buf[22] = 2082;
          uint64_t v47 = "flow";
          _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_22:
      uint64_t v16 = 0;
      goto LABEL_23;
    }
    BOOL v24 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v25, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v26 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v34 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }
        if (v34)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v26 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v36, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_63:
    if (v25) {
      free(v25);
    }
    goto LABEL_22;
  }
  os_log_type_t v20 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v44)
    {
      char v29 = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v29;
          _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        goto LABEL_57;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v22, v35, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_57:
  if (v21) {
    free(v21);
  }
  return 0;
}

void sub_18375F5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (nw_frame_get_finalizer_context((uint64_t)v3) == *(void *)(a1 + 48))
  {
    uint64_t v4 = v3[4];
    uint64_t v5 = (void *)v3[5];
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      uint64_t v5 = (void *)v3[5];
    }
    else
    {
      *(void *)(*(void *)(a1 + 56) + 8) = v5;
    }
    *uint64_t v5 = v4;
    v3[4] = 0;
    void v3[5] = 0;
    v21[0] = 0;
    v21[1] = v21;
    int v22 = 0;
    v21[2] = 0x2020000000;
    uint64_t v6 = *(void *)(a1 + 48);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    BOOL v14 = ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2;
    char v15 = &unk_1E523CC70;
    os_log_type_t v18 = v21;
    uint64_t v20 = v6;
    uint64_t v16 = v3;
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v17 = v7;
    uint64_t v19 = v8;
    uint64_t v9 = *(void *)(v6 + 296);
    do
    {
      if (!v9) {
        break;
      }
      uint64_t v10 = *(void *)(v9 + 16);
      char v11 = ((uint64_t (*)(void *))v14)(v13);
      uint64_t v9 = v10;
    }
    while ((v11 & 1) != 0);

    _Block_object_dispose(v21, 8);
  }

  return 1;
}

BOOL ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  int v8 = *(_DWORD *)(v5 + 24);
  uint64_t v6 = (int *)(v5 + 24);
  int v7 = v8;
  int v9 = *(_DWORD *)(*(void *)(a1 + 64) + 328);
  if (v8 != v9)
  {
    int v10 = v7;
LABEL_19:
    int *v6 = v10 + 1;
    goto LABEL_20;
  }
  if (*(id *)(a1 + 32) == v3)
  {
    if (gLogDatapath)
    {
      id v80 = v3;
      int v58 = *(_DWORD *)(*(void *)(a1 + 64) + 328);
      char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40));
      int v9 = v58;
      uint64_t v4 = v80;
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v60 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          char v61 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          nw_endpoint_t v62 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          logging_description = nw_endpoint_get_logging_description(v62);
          uint64_t v64 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          os_log_type_t v65 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v66 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          int v67 = nw_frame_unclaimed_length(*(_DWORD **)(a1 + 32));
          *(_DWORD *)long long buf = 136448002;
          __int16 v84 = "nw_flow_replay_finalize_output_frames_block_invoke_2";
          __int16 v85 = 2082;
          __int16 v86 = id_string;
          __int16 v87 = 2082;
          __int16 v88 = v61;
          __int16 v89 = 2082;
          __int16 v90 = logging_description;
          __int16 v91 = 2082;
          __int16 v92 = v64;
          __int16 v93 = 2082;
          uint64_t v94 = v65;
          __int16 v95 = 2114;
          id v96 = v66;
          __int16 v97 = 1024;
          LODWORD(v98) = v67;
          _os_log_impl(&dword_1830D4000, v60, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received %u early bytes for fast open", buf, 0x4Eu);
        }
        uint64_t v4 = v80;
        int v9 = v58;
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    uint64_t v6 = (int *)(*(void *)(a1 + 64) + 328);
    int v10 = *v6;
    goto LABEL_19;
  }
  int v77 = *(_DWORD *)(*(void *)(a1 + 64) + 328);
  id v79 = v3;
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v11 = (id)gconnectionLogObj;
    char v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
    uint64_t v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
    nw_endpoint_t v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
    char v15 = nw_endpoint_get_logging_description(v14);
    uint64_t v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
    id v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
    id v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
    *(_DWORD *)long long buf = 136447746;
    __int16 v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
    __int16 v85 = 2082;
    __int16 v86 = v12;
    __int16 v87 = 2082;
    __int16 v88 = v13;
    __int16 v89 = 2082;
    __int16 v90 = v15;
    __int16 v91 = 2082;
    __int16 v92 = v16;
    __int16 v93 = 2082;
    uint64_t v94 = v17;
    __int16 v95 = 2114;
    id v96 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v19, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v20 = (id)gconnectionLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          int v22 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          os_log_type_t v23 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          log = v20;
          nw_endpoint_t v24 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          uint64_t v68 = v19;
          os_log_type_t v25 = nw_endpoint_get_logging_description(v24);
          BOOL v26 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          os_log_type_t v27 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v28 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)long long buf = 136447746;
          __int16 v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          __int16 v85 = 2082;
          __int16 v86 = v22;
          __int16 v87 = 2082;
          __int16 v88 = v23;
          __int16 v89 = 2082;
          __int16 v90 = v25;
          __int16 v91 = 2082;
          __int16 v92 = v26;
          __int16 v93 = 2082;
          uint64_t v94 = v27;
          __int16 v95 = 2114;
          id v96 = v28;
          uint64_t v20 = log;
          _os_log_impl(&dword_1830D4000, log, v21, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame", buf, 0x48u);

          uint64_t v19 = v68;
        }
      }
      else if (v81)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          os_log_type_t v32 = (char *)backtrace_string;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v33 = (id)gconnectionLogObj;
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v33, type))
          {
            os_log_type_t v35 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
            os_log_type_t v36 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
            loga = v33;
            uint64_t v37 = v35;
            __int16 v69 = v19;
            nw_endpoint_t v76 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
            int v38 = nw_endpoint_get_logging_description(v76);
            __int16 v39 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
            char v40 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
            id v41 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
            *(_DWORD *)long long buf = 136448002;
            __int16 v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
            __int16 v85 = 2082;
            __int16 v86 = v37;
            __int16 v87 = 2082;
            __int16 v88 = v36;
            __int16 v89 = 2082;
            __int16 v90 = v38;
            __int16 v91 = 2082;
            __int16 v92 = v39;
            __int16 v93 = 2082;
            uint64_t v94 = v40;
            __int16 v95 = 2114;
            id v96 = v41;
            __int16 v97 = 2082;
            os_log_type_t v98 = v32;
            os_log_type_t v33 = loga;
            _os_log_impl(&dword_1830D4000, loga, v34, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame, dumping backtrace:%{public}s", buf, 0x52u);

            uint64_t v19 = v69;
          }

          free(v32);
          if (!v19) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v20 = (id)gconnectionLogObj;
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v20, type))
        {
          int v51 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          uint64_t v52 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          logc = v20;
          nw_endpoint_t v53 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          __int16 v71 = v19;
          uint64_t v54 = nw_endpoint_get_logging_description(v53);
          int v55 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          char v56 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v57 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)long long buf = 136447746;
          __int16 v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          __int16 v85 = 2082;
          __int16 v86 = v51;
          __int16 v87 = 2082;
          __int16 v88 = v52;
          __int16 v89 = 2082;
          __int16 v90 = v54;
          __int16 v91 = 2082;
          __int16 v92 = v55;
          __int16 v93 = 2082;
          uint64_t v94 = v56;
          __int16 v95 = 2114;
          id v96 = v57;
          uint64_t v20 = logc;
          _os_log_impl(&dword_1830D4000, logc, v50, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame, no backtrace", buf, 0x48u);

          uint64_t v19 = v71;
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v20 = (id)gconnectionLogObj;
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v20, type))
        {
          __int16 v43 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          char v44 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          logb = v20;
          nw_endpoint_t v45 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          uint64_t v70 = v19;
          __int16 v46 = nw_endpoint_get_logging_description(v45);
          uint64_t v47 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          uint64_t v48 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v49 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)long long buf = 136447746;
          __int16 v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          __int16 v85 = 2082;
          __int16 v86 = v43;
          __int16 v87 = 2082;
          __int16 v88 = v44;
          __int16 v89 = 2082;
          __int16 v90 = v46;
          __int16 v91 = 2082;
          __int16 v92 = v47;
          __int16 v93 = 2082;
          uint64_t v94 = v48;
          __int16 v95 = 2114;
          id v96 = v49;
          uint64_t v20 = logb;
          _os_log_impl(&dword_1830D4000, logb, v42, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame, backtrace limit exceeded", buf, 0x48u);

          uint64_t v19 = v70;
        }
      }
    }
    if (v19) {
LABEL_15:
    }
      free(v19);
  }
LABEL_16:
  nw_frame_finalize(*(void *)(a1 + 32));
  uint64_t v4 = v79;
  int v9 = v77;
LABEL_20:
  BOOL v29 = v7 != v9;

  return v29;
}

void sub_18375FF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL nw_flow_replay_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v31 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v32, type, &v57))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v57)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v41 = type[0];
        BOOL v42 = os_log_type_enabled(v33, type[0]);
        if (backtrace_string)
        {
          if (v42)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_72;
        }
        if (v42)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v33, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_72:
    if (v32) {
      free(v32);
    }
    return 0;
  }
  LODWORD(v7) = a4;
  handle = a1->handle;
  id v10 = *((id *)handle + 20);
  id v11 = v10;
  if (!v10)
  {
    os_log_type_t v35 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, type, &v57))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v38 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v57)
      {
        __int16 v43 = (char *)__nw_create_backtrace_string();
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v44 = type[0];
        BOOL v45 = os_log_type_enabled(v37, type[0]);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v43;
            _os_log_impl(&dword_1830D4000, v37, v44, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          goto LABEL_78;
        }
        if (v45)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v37, v44, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v47 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v37, v47, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_78:
    if (v36) {
      free(v36);
    }
    goto LABEL_37;
  }
  char v12 = (NWConcrete_nw_endpoint_handler *)v10;
  uint64_t mode = v12->mode;

  if (mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      if (mode > 5) {
        os_log_type_t v23 = "unknown-mode";
      }
      else {
        os_log_type_t v23 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v23;
      *(_WORD *)&unsigned char buf[22] = 2082;
      char v63 = "flow";
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }

    goto LABEL_37;
  }
  if (*((void *)handle + 37))
  {
    if (*((_DWORD *)handle + 82))
    {
      if (*((void *)handle + 16))
      {
        nw_endpoint_t v14 = (char *)*((void *)handle + 36);
        if (v14)
        {
          *(void *)os_log_type_t type = 0;
          uint64_t v59 = type;
          uint64_t v60 = 0x2020000000;
          char v61 = 0;
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL56nw_flow_replay_selected_candidate_has_early_data_to_sendP16nw_flow_protocol_block_invoke;
          char v63 = (const char *)&unk_1E523CC48;
          uint64_t v64 = type;
          os_log_type_t v65 = handle;
          nw_hash_table_apply(v14, (uint64_t)buf);
          int v15 = *((unsigned __int8 *)v59 + 24);
          _Block_object_dispose(type, 8);
          if (v15)
          {
            nw_flow_replay_send_initial_data_to_candidates(v12, (nw_flow_protocol *)handle);
            if (*((void *)handle + 37))
            {
              if (*((_DWORD *)handle + 82))
              {
                if (*((void *)handle + 16))
                {
                  uint64_t v16 = (char *)*((void *)handle + 36);
                  if (v16)
                  {
                    *(void *)os_log_type_t type = 0;
                    uint64_t v59 = type;
                    uint64_t v60 = 0x2020000000;
                    char v61 = 0;
                    *(void *)long long buf = MEMORY[0x1E4F143A8];
                    *(void *)&buf[8] = 3221225472;
                    *(void *)&buf[16] = ___ZL56nw_flow_replay_selected_candidate_has_early_data_to_sendP16nw_flow_protocol_block_invoke;
                    char v63 = (const char *)&unk_1E523CC48;
                    uint64_t v64 = type;
                    os_log_type_t v65 = handle;
                    nw_hash_table_apply(v16, (uint64_t)buf);
                    int v17 = *((unsigned __int8 *)v59 + 24);
                    _Block_object_dispose(type, 8);
                    uint64_t v18 = 0;
                    if (v17) {
                      goto LABEL_38;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      get_output_frames = (uint64_t (*)(void))callbacks->get_output_frames;
      if (get_output_frames)
      {
        uint64_t v18 = get_output_frames();
LABEL_38:

        return v18;
      }
    }
    __int16 v39 = __nwlog_obj();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
      _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support get_output_frames", buf, 0xCu);
    }

LABEL_37:
    uint64_t v18 = 0;
    goto LABEL_38;
  }
  *(_DWORD *)os_log_type_t type = 0;
  uint64_t v18 = 0;
  if (nw_frame_array_get_frame_count((uint64_t *)handle + 37, 0, type) > 3 || *(_DWORD *)type > 0x7CFu) {
    goto LABEL_38;
  }
  if (2000 - *(_DWORD *)type >= v7) {
    size_t v7 = v7;
  }
  else {
    size_t v7 = (2000 - *(_DWORD *)type);
  }
  if (!v7) {
    goto LABEL_30;
  }
  nw_endpoint_t v24 = malloc_type_calloc(1uLL, v7, 0xEAFB8F1AuLL);
  if (v24) {
    goto LABEL_31;
  }
  os_log_type_t v25 = __nwlog_obj();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = 1;
  *(_WORD *)&unsigned char buf[22] = 2048;
  char v63 = (const char *)v7;
  BOOL v26 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
LABEL_30:
    nw_endpoint_t v24 = 0;
LABEL_31:
    id v28 = (char *)(id)nw_frame_create(0, (uint64_t)v24, v7, (uint64_t)nw_flow_replay_frame_finalizer, (uint64_t)handle);
    if (v28)
    {
      *((_WORD *)v28 + 102) |= 1u;
      *((void *)v28 + 2) = 0;
      BOOL v29 = (void *)*((void *)handle + 38);
      *((void *)v28 + 3) = v29;
      *BOOL v29 = v28;
      *((void *)handle + 38) = v28 + 16;
      *((void *)v28 + 4) = 0;
      tqh_last = a6->tqh_last;
      *((void *)v28 + 5) = tqh_last;
      *tqh_last = (nw_frame *)v28;
      a6->tqh_last = (nw_frame **)(v28 + 32);
      uint64_t v18 = 1;
LABEL_33:

      goto LABEL_38;
    }
    uint64_t v48 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
    id v49 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v57 = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (__nwlog_fault(v49, &v57, &v56))
    {
      if (v57 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v50 = __nwlog_obj();
        os_log_type_t v51 = v57;
        if (os_log_type_enabled(v50, v57))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null additional_reference", buf, 0xCu);
        }
      }
      else if (v56)
      {
        uint64_t v52 = (char *)__nw_create_backtrace_string();
        os_log_type_t v50 = __nwlog_obj();
        os_log_type_t v53 = v57;
        BOOL v54 = os_log_type_enabled(v50, v57);
        if (v52)
        {
          if (v54)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v52;
            _os_log_impl(&dword_1830D4000, v50, v53, "%{public}s called with null additional_reference, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v52);
          goto LABEL_96;
        }
        if (v54)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v50, v53, "%{public}s called with null additional_reference, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v50 = __nwlog_obj();
        os_log_type_t v55 = v57;
        if (os_log_type_enabled(v50, v57))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_1830D4000, v50, v55, "%{public}s called with null additional_reference, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_96:
    if (v49) {
      free(v49);
    }
    uint64_t v18 = 0;
    id v28 = 0;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

void sub_183760B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_frame_finalizer(void *a1, uint64_t a2, uint64_t a3)
{
  size_t v7 = a1;
  buffer = (void *)nw_frame_get_buffer((uint64_t)v7, 0);
  if (buffer) {
    free(buffer);
  }
  uint64_t v5 = v7[2];
  uint64_t v6 = (void *)v7[3];
  if (v5)
  {
    *(void *)(v5 + 24) = v6;
    uint64_t v6 = (void *)v7[3];
  }
  else
  {
    *(void *)(a3 + 304) = v6;
  }
  void *v6 = v5;
  v7[2] = 0;
  v7[3] = 0;
}

BOOL ___ZL56nw_flow_replay_selected_candidate_has_early_data_to_sendP16nw_flow_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = (_DWORD *)nw_hash_node_get_extra(a2);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v6 + 128);
  if (object == v7 && *extra < *(_DWORD *)(v6 + 328)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return object != v7;
}

uint64_t nw_flow_replay_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    id v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_flow_replay_get_input_frames";
    char v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v12, &type, &v18)) {
      goto LABEL_26;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v21 = "nw_flow_replay_get_input_frames";
        int v15 = "%{public}s called with null protocol";
LABEL_24:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v21 = "nw_flow_replay_get_input_frames";
            __int16 v22 = 2082;
            os_log_type_t v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (!v17) {
          goto LABEL_25;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v21 = "nw_flow_replay_get_input_frames";
        int v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_24;
      }
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v21 = "nw_flow_replay_get_input_frames";
        int v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
LABEL_25:

LABEL_26:
    if (v12) {
      free(v12);
    }
    return 0;
  }
  output_handler = a1->output_handler;
  if (!output_handler) {
    return 0;
  }
  callbacks = output_handler->callbacks;
  if (!callbacks || (get_input_frames = (uint64_t (*)(void))callbacks->get_input_frames) == 0)
  {
    id v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v21 = "nw_flow_replay_get_input_frames";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support get_input_frames", buf, 0xCu);
    }

    return 0;
  }

  return get_input_frames();
}

uint64_t nw_flow_replay_remove_input_handler(nw_protocol *a1, nw_protocol *a2, char a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    id v7 = *((id *)handle + 20);
    int v8 = v7;
    if (v7)
    {
      int v9 = (unsigned int *)v7;
      uint64_t v10 = v9[29];

      if (v10 == 2)
      {
        if (a2 && a2->output_handler == a1) {
          nw_protocol_set_output_handler((uint64_t)a2, 0);
        }
        if (a1->default_input_handler == a2)
        {
          nw_protocol_set_input_handler((uint64_t)a1, 0);
          output_handler = a1->output_handler;
          if (output_handler)
          {
            callbacks = output_handler->callbacks;
            if (callbacks)
            {
              remove_input_handler = (void (*)(void))callbacks->remove_input_handler;
              if (remove_input_handler) {
                remove_input_handler();
              }
            }
          }
          else
          {
            char v18 = (char *)*((void *)handle + 36);
            if (v18)
            {
              v35[0] = MEMORY[0x1E4F143A8];
              v35[1] = 3221225472;
              v35[2] = ___ZL35nw_flow_replay_remove_input_handlerP11nw_protocolS0_b_block_invoke;
              v35[3] = &__block_descriptor_49_e23_B16__0__nw_hash_node__8l;
              v35[4] = handle;
              v35[5] = a1;
              char v36 = a3;
              nw_hash_table_apply(v18, (uint64_t)v35);
            }
          }
          uint64_t v16 = 1;
          goto LABEL_19;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          if (v10 > 5) {
            int v15 = "unknown-mode";
          }
          else {
            int v15 = off_1E523FB08[v10];
          }
          *(_DWORD *)long long buf = 136446722;
          char v40 = "nw_flow_replay_remove_input_handler";
          __int16 v41 = 2082;
          BOOL v42 = (void *)v15;
          __int16 v43 = 2082;
          os_log_type_t v44 = "flow";
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
LABEL_18:
      uint64_t v16 = 0;
LABEL_19:

      return v16;
    }
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v40 = "nw_flow_replay_remove_input_handler";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v24, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v40 = "nw_flow_replay_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)long long buf = 136446466;
            char v40 = "nw_flow_replay_remove_input_handler";
            __int16 v41 = 2082;
            BOOL v42 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v31, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_59;
        }
        if (v32)
        {
          *(_DWORD *)long long buf = 136446210;
          char v40 = "nw_flow_replay_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v25, v31, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v40 = "nw_flow_replay_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_59:
    if (v24) {
      free(v24);
    }
    goto LABEL_18;
  }
  uint64_t v19 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v40 = "nw_flow_replay_remove_input_handler";
  uint64_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v20, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v37)
    {
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v21, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)long long buf = 136446466;
          char v40 = "nw_flow_replay_remove_input_handler";
          __int16 v41 = 2082;
          BOOL v42 = v27;
          _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
        goto LABEL_53;
      }
      if (v29)
      {
        *(_DWORD *)long long buf = 136446210;
        char v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v21, v33, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_53:
  if (v20) {
    free(v20);
  }
  return 0;
}

void sub_183761560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_flow_replay_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 288), a2);
  if (object)
  {
    uint64_t v5 = *(void *)(object + 24);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, void, void))(v5 + 8);
      if (v6) {
        v6(object, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
      }
    }
  }
  return 1;
}

uint64_t nw_flow_replay_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      if (!a2->output_handler) {
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
      }
      return 1;
    }
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v18 = "nw_flow_replay_add_input_handler";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v18 = "nw_flow_replay_add_input_handler";
          int v9 = "%{public}s called with null input_protocol";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v15)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v18 = "nw_flow_replay_add_input_handler";
          int v9 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v14 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446210;
          char v18 = "nw_flow_replay_add_input_handler";
          int v9 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v14) {
        goto LABEL_24;
      }
      *(_DWORD *)long long buf = 136446466;
      char v18 = "nw_flow_replay_add_input_handler";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      uint64_t v13 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v7, v8, v13, buf, 0x16u);
LABEL_24:

      free(backtrace_string);
    }
  }
  else
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v18 = "nw_flow_replay_add_input_handler";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v18 = "nw_flow_replay_add_input_handler";
          int v9 = "%{public}s called with null protocol";
LABEL_33:
          _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
        }
LABEL_34:

        goto LABEL_35;
      }
      if (!v15)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v18 = "nw_flow_replay_add_input_handler";
          int v9 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446210;
          char v18 = "nw_flow_replay_add_input_handler";
          int v9 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v12) {
        goto LABEL_24;
      }
      *(_DWORD *)long long buf = 136446466;
      char v18 = "nw_flow_replay_add_input_handler";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      uint64_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
  }
LABEL_35:
  if (v6) {
    free(v6);
  }
  return 0;
}

NWConcrete_nw_endpoint_flow *nw_flow_copy_flow_divert_endpoint(NWConcrete_nw_endpoint_flow *a1)
{
  if (a1) {
    uint64_t v2 = a1;
  }
  return a1;
}

uint64_t nw_flow_updated_path()
{
  return 1;
}

uint64_t ___ZL17nw_flow_connectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  return 1;
}

void ___ZL17nw_flow_connectedP11nw_protocolS0__block_invoke_101(uint64_t a1)
{
  nw_endpoint_handler_handle_failure(*(void **)(a1 + 32));
  uint64_t v2 = *(_WORD **)(a1 + 32);
  id v3 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
  *((_DWORD *)v2 + 20) = 589825;
  id v4 = v3;
  nw_endpoint_handler_report(v2, 0, v2 + 40, v3);
}

void sub_183761B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_connect(nw_protocol *a1, nw_protocol *a2)
{
  handle = a1->handle;
  if (handle && (id v3 = (void *)handle[20]) != 0) {
    return nw_endpoint_flow_connect(v3);
  }
  else {
    return 0;
  }
}

void ___ZL26nw_flow_passthrough_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, NWConcrete_nw_endpoint_handler *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v3 = nw_endpoint_handler_copy_flow(a2);
  id v4 = v3;
  if (v3)
  {
    nw_protocol_notify((void *)v3 + 47, *(void *)(a1 + 40), 22);
    goto LABEL_15;
  }
  if (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32))) {
    goto LABEL_15;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v5 = (id)gconnectionLogObj;
  id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
  id v7 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
  nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
  logging_description = nw_endpoint_get_logging_description(v8);
  uint64_t v10 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
  id v11 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
  id v12 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
  *(_DWORD *)long long buf = 136448002;
  os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
  __int16 v58 = 2082;
  uint64_t v59 = id_string;
  __int16 v60 = 2082;
  char v61 = v7;
  __int16 v62 = 2082;
  char v63 = logging_description;
  __int16 v64 = 2082;
  os_log_type_t v65 = v10;
  __int16 v66 = 2082;
  int v67 = v11;
  __int16 v68 = 2114;
  id v69 = v12;
  __int16 v70 = 2048;
  uint64_t v71 = 0;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if ((__nwlog_fault(v13, &type, &v54) & 1) == 0) {
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v14 = (id)gconnectionLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      uint64_t v16 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      BOOL v17 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      id v49 = v13;
      __int16 v19 = nw_endpoint_get_logging_description(v18);
      uint64_t v20 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      uint64_t v21 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v22 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136448002;
      os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = v16;
      __int16 v60 = 2082;
      char v61 = v17;
      __int16 v62 = 2082;
      char v63 = v19;
      __int16 v64 = 2082;
      os_log_type_t v65 = v20;
      __int16 v66 = 2082;
      int v67 = v21;
      __int16 v68 = 2114;
      id v69 = v22;
      __int16 v70 = 2048;
      uint64_t v71 = 0;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol", buf, 0x52u);

      uint64_t v13 = v49;
    }
LABEL_12:

LABEL_13:
    if (!v13) {
      goto LABEL_15;
    }
LABEL_14:
    free(v13);
    goto LABEL_15;
  }
  if (!v54)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v14 = (id)gconnectionLogObj;
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v14, type))
    {
      os_log_type_t v34 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      os_log_type_t v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v36 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      os_log_type_t v51 = v13;
      char v37 = nw_endpoint_get_logging_description(v36);
      os_log_type_t v38 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      __int16 v39 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v40 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136448002;
      os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = v34;
      __int16 v60 = 2082;
      char v61 = v35;
      __int16 v62 = 2082;
      char v63 = v37;
      __int16 v64 = 2082;
      os_log_type_t v65 = v38;
      __int16 v66 = 2082;
      int v67 = v39;
      __int16 v68 = 2114;
      id v69 = v40;
      __int16 v70 = 2048;
      uint64_t v71 = 0;
      _os_log_impl(&dword_1830D4000, v14, v33, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, backtrace limit exceeded", buf, 0x52u);

      uint64_t v13 = v51;
    }
    goto LABEL_12;
  }
  backtrace_string = __nw_create_backtrace_string();
  if (!backtrace_string)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v14 = (id)gconnectionLogObj;
    os_log_type_t v41 = type;
    if (os_log_type_enabled(v14, type))
    {
      BOOL v42 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      __int16 v43 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v44 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      uint64_t v52 = v13;
      uint64_t v45 = nw_endpoint_get_logging_description(v44);
      os_log_type_t v46 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      os_log_type_t v47 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v48 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136448002;
      os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = v42;
      __int16 v60 = 2082;
      char v61 = v43;
      __int16 v62 = 2082;
      char v63 = v45;
      __int16 v64 = 2082;
      os_log_type_t v65 = v46;
      __int16 v66 = 2082;
      int v67 = v47;
      __int16 v68 = 2114;
      id v69 = v48;
      __int16 v70 = 2048;
      uint64_t v71 = 0;
      _os_log_impl(&dword_1830D4000, v14, v41, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, no backtrace", buf, 0x52u);

      uint64_t v13 = v52;
    }
    goto LABEL_12;
  }
  uint64_t v24 = (char *)backtrace_string;
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  os_log_type_t v25 = (id)gconnectionLogObj;
  os_log_type_t v26 = type;
  if (os_log_type_enabled(v25, type))
  {
    os_log_type_t v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
    os_log_type_t v53 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
    nw_endpoint_t v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
    os_log_type_t v50 = v13;
    BOOL v29 = nw_endpoint_get_logging_description(v28);
    os_log_type_t v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
    os_log_type_t v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
    id v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
    *(_DWORD *)long long buf = 136448258;
    os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
    __int16 v58 = 2082;
    uint64_t v59 = v27;
    __int16 v60 = 2082;
    char v61 = v53;
    __int16 v62 = 2082;
    char v63 = v29;
    __int16 v64 = 2082;
    os_log_type_t v65 = v30;
    __int16 v66 = 2082;
    int v67 = v31;
    __int16 v68 = 2114;
    id v69 = v32;
    __int16 v70 = 2048;
    uint64_t v71 = 0;
    __int16 v72 = 2082;
    id v73 = v24;
    _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, dumping backtrace:%{public}s", buf, 0x5Cu);

    uint64_t v13 = v50;
  }

  free(v24);
  if (v13) {
    goto LABEL_14;
  }
LABEL_15:
}

void sub_18376237C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_passthrough_supports_external_data(nw_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    id v3 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v13 = "nw_flow_passthrough_supports_external_data";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v4, &type, &v10)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v13 = "nw_flow_passthrough_supports_external_data";
        id v7 = "%{public}s called with null protocol";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v13 = "nw_flow_passthrough_supports_external_data";
            __int16 v14 = 2082;
            os_log_type_t v15 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v9) {
          goto LABEL_20;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v13 = "nw_flow_passthrough_supports_external_data";
        id v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_19;
      }
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v13 = "nw_flow_passthrough_supports_external_data";
        id v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

LABEL_21:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler) {
    return 0;
  }

  return nw_protocol_supports_external_data((uint64_t)default_input_handler);
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_95(uint64_t a1, NWConcrete_nw_endpoint_handler *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v3 = nw_endpoint_handler_copy_flow(a2);
  id v4 = v3;
  if (v3)
  {
    nw_protocol_notify((void *)v3 + 47, *(void *)(a1 + 40), 22);
    goto LABEL_15;
  }
  if (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32))) {
    goto LABEL_15;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v5 = (id)gconnectionLogObj;
  id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
  id v7 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
  nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
  logging_description = nw_endpoint_get_logging_description(v8);
  char v10 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
  id v11 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
  id v12 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
  *(_DWORD *)long long buf = 136448002;
  os_log_type_t v57 = "nw_flow_notify_block_invoke";
  __int16 v58 = 2082;
  uint64_t v59 = id_string;
  __int16 v60 = 2082;
  char v61 = v7;
  __int16 v62 = 2082;
  char v63 = logging_description;
  __int16 v64 = 2082;
  os_log_type_t v65 = v10;
  __int16 v66 = 2082;
  int v67 = v11;
  __int16 v68 = 2114;
  id v69 = v12;
  __int16 v70 = 2048;
  uint64_t v71 = 0;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if ((__nwlog_fault(v13, &type, &v54) & 1) == 0) {
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v14 = (id)gconnectionLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      uint64_t v16 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      BOOL v17 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      id v49 = v13;
      __int16 v19 = nw_endpoint_get_logging_description(v18);
      uint64_t v20 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      uint64_t v21 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v22 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136448002;
      os_log_type_t v57 = "nw_flow_notify_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = v16;
      __int16 v60 = 2082;
      char v61 = v17;
      __int16 v62 = 2082;
      char v63 = v19;
      __int16 v64 = 2082;
      os_log_type_t v65 = v20;
      __int16 v66 = 2082;
      int v67 = v21;
      __int16 v68 = 2114;
      id v69 = v22;
      __int16 v70 = 2048;
      uint64_t v71 = 0;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol", buf, 0x52u);

      uint64_t v13 = v49;
    }
LABEL_12:

LABEL_13:
    if (!v13) {
      goto LABEL_15;
    }
LABEL_14:
    free(v13);
    goto LABEL_15;
  }
  if (!v54)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v14 = (id)gconnectionLogObj;
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v14, type))
    {
      os_log_type_t v34 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      os_log_type_t v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v36 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      os_log_type_t v51 = v13;
      char v37 = nw_endpoint_get_logging_description(v36);
      os_log_type_t v38 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      __int16 v39 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v40 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136448002;
      os_log_type_t v57 = "nw_flow_notify_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = v34;
      __int16 v60 = 2082;
      char v61 = v35;
      __int16 v62 = 2082;
      char v63 = v37;
      __int16 v64 = 2082;
      os_log_type_t v65 = v38;
      __int16 v66 = 2082;
      int v67 = v39;
      __int16 v68 = 2114;
      id v69 = v40;
      __int16 v70 = 2048;
      uint64_t v71 = 0;
      _os_log_impl(&dword_1830D4000, v14, v33, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, backtrace limit exceeded", buf, 0x52u);

      uint64_t v13 = v51;
    }
    goto LABEL_12;
  }
  backtrace_string = __nw_create_backtrace_string();
  if (!backtrace_string)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v14 = (id)gconnectionLogObj;
    os_log_type_t v41 = type;
    if (os_log_type_enabled(v14, type))
    {
      BOOL v42 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      __int16 v43 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v44 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      uint64_t v52 = v13;
      uint64_t v45 = nw_endpoint_get_logging_description(v44);
      os_log_type_t v46 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      os_log_type_t v47 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v48 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136448002;
      os_log_type_t v57 = "nw_flow_notify_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = v42;
      __int16 v60 = 2082;
      char v61 = v43;
      __int16 v62 = 2082;
      char v63 = v45;
      __int16 v64 = 2082;
      os_log_type_t v65 = v46;
      __int16 v66 = 2082;
      int v67 = v47;
      __int16 v68 = 2114;
      id v69 = v48;
      __int16 v70 = 2048;
      uint64_t v71 = 0;
      _os_log_impl(&dword_1830D4000, v14, v41, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, no backtrace", buf, 0x52u);

      uint64_t v13 = v52;
    }
    goto LABEL_12;
  }
  uint64_t v24 = (char *)backtrace_string;
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  os_log_type_t v25 = (id)gconnectionLogObj;
  os_log_type_t v26 = type;
  if (os_log_type_enabled(v25, type))
  {
    os_log_type_t v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
    os_log_type_t v53 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
    nw_endpoint_t v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
    os_log_type_t v50 = v13;
    BOOL v29 = nw_endpoint_get_logging_description(v28);
    os_log_type_t v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
    os_log_type_t v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
    id v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
    *(_DWORD *)long long buf = 136448258;
    os_log_type_t v57 = "nw_flow_notify_block_invoke";
    __int16 v58 = 2082;
    uint64_t v59 = v27;
    __int16 v60 = 2082;
    char v61 = v53;
    __int16 v62 = 2082;
    char v63 = v29;
    __int16 v64 = 2082;
    os_log_type_t v65 = v30;
    __int16 v66 = 2082;
    int v67 = v31;
    __int16 v68 = 2114;
    id v69 = v32;
    __int16 v70 = 2048;
    uint64_t v71 = 0;
    __int16 v72 = 2082;
    id v73 = v24;
    _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, dumping backtrace:%{public}s", buf, 0x5Cu);

    uint64_t v13 = v50;
  }

  free(v24);
  if (v13) {
    goto LABEL_14;
  }
LABEL_15:
}

void sub_183762E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_trainer_bottom_inject_input(uint64_t a1, NSObject *a2, int a3, const void *a4, size_t size, char a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      id v12 = 0;
      int v13 = 0;
      if (a4)
      {
        unsigned int v14 = size;
        if (size)
        {
          id v12 = malloc_type_malloc(size, 0xF2B69DE5uLL);
          if (!v12)
          {
            id v32 = __nwlog_obj();
            os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long buf = 136446466;
            id v40 = "strict_malloc";
            __int16 v41 = 2048;
            BOOL v42 = (char *)v14;
            os_log_type_t v33 = (void *)_os_log_send_and_compose_impl();
            BOOL result = __nwlog_abort((uint64_t)v33);
            if (result)
            {
              __break(1u);
              return result;
            }
            free(v33);
          }
          memcpy(v12, a4, v14);
          int v13 = v14;
        }
      }
      uint64_t v15 = nw_frame_create(0, (uint64_t)v12, v13, (uint64_t)nw_protocol_trainer_frame_finalizer, a1);
      uint64_t v16 = v15;
      if (a2) {
        nw_frame_set_metadata(v15, a2, 1, a3);
      }
      if (v12) {
        nw_frame_set_buffer_used_malloc(v16, 1);
      }
      if (v16)
      {
        *(unsigned char *)(v16 + 186) = *(unsigned char *)(v16 + 186) & 0xFC | a6 & 3;
        *(void *)(v16 + 16) = 0;
        BOOL v17 = *(uint64_t **)(v7 + 80);
        *(void *)(v16 + 24) = v17;
        uint64_t *v17 = v16;
        *(void *)(v7 + 80) = v16 + 16;
        *(void *)(v16 + 32) = 0;
        uint64_t v18 = v16 + 32;
        __int16 v19 = *(uint64_t **)(v7 + 96);
        *(void *)(v16 + 40) = v19;
        uint64_t *v19 = v16;
LABEL_13:
        *(void *)(v7 + 96) = v18;
        return 1;
      }
      __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      id v40 = "__nw_frame_set_ecn_flag";
      os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (__nwlog_fault(v25, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v26 = __nwlog_obj();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)long long buf = 136446210;
            id v40 = "__nw_frame_set_ecn_flag";
            nw_endpoint_t v28 = "%{public}s called with null frame";
LABEL_60:
            _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0xCu);
          }
        }
        else if (v37)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v26 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v36 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v36)
            {
              *(_DWORD *)long long buf = 136446466;
              id v40 = "__nw_frame_set_ecn_flag";
              __int16 v41 = 2082;
              BOOL v42 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_61;
          }
          if (v36)
          {
            *(_DWORD *)long long buf = 136446210;
            id v40 = "__nw_frame_set_ecn_flag";
            nw_endpoint_t v28 = "%{public}s called with null frame, no backtrace";
            goto LABEL_60;
          }
        }
        else
        {
          os_log_type_t v26 = __nwlog_obj();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)long long buf = 136446210;
            id v40 = "__nw_frame_set_ecn_flag";
            nw_endpoint_t v28 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_60;
          }
        }
      }
LABEL_61:
      if (v25) {
        free(v25);
      }
      MEMORY[0x10] = 0;
      MEMORY[0x18] = *(void *)(v7 + 80);
      *MEMORY[0x18] = 0;
      *(void *)(v7 + 80) = 16;
      uint64_t v18 = 32;
      MEMORY[0x20] = 0;
      MEMORY[0x28] = *(void *)(v7 + 96);
      *MEMORY[0x28] = 0;
      goto LABEL_13;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v40 = "nw_protocol_trainer_bottom_inject_input";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v21, &type, &v37)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        uint64_t v24 = "%{public}s called with null trainer";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (!v37)
    {
      id v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        uint64_t v24 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    BOOL v29 = (char *)__nw_create_backtrace_string();
    id v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v34 = os_log_type_enabled(v22, type);
    if (!v29)
    {
      if (v34)
      {
        *(_DWORD *)long long buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        uint64_t v24 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v34)
    {
      *(_DWORD *)long long buf = 136446466;
      id v40 = "nw_protocol_trainer_bottom_inject_input";
      __int16 v41 = 2082;
      BOOL v42 = v29;
      os_log_type_t v31 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  id v40 = "nw_protocol_trainer_bottom_inject_input";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (!__nwlog_fault(v21, &type, &v37)) {
    goto LABEL_55;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      id v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        uint64_t v24 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    BOOL v29 = (char *)__nw_create_backtrace_string();
    id v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v30 = os_log_type_enabled(v22, type);
    if (!v29)
    {
      if (v30)
      {
        *(_DWORD *)long long buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        uint64_t v24 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v30)
    {
      *(_DWORD *)long long buf = 136446466;
      id v40 = "nw_protocol_trainer_bottom_inject_input";
      __int16 v41 = 2082;
      BOOL v42 = v29;
      os_log_type_t v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
      _os_log_impl(&dword_1830D4000, v22, v23, v31, buf, 0x16u);
    }
LABEL_38:
    free(v29);
    goto LABEL_55;
  }
  id v22 = __nwlog_obj();
  os_log_type_t v23 = type;
  if (os_log_type_enabled(v22, type))
  {
    *(_DWORD *)long long buf = 136446210;
    id v40 = "nw_protocol_trainer_bottom_inject_input";
    uint64_t v24 = "%{public}s called with null protocol";
LABEL_54:
    _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
  }
LABEL_55:
  if (v21) {
    free(v21);
  }
  return 0;
}

void nw_protocol_trainer_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
      char v10 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_37:
        if (!v7) {
          return;
        }
        goto LABEL_38;
      }
      if (!v12) {
        goto LABEL_37;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
      char v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      nw_endpoint_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
      char v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_36:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_37;
  }
  uint64_t v3 = a3[5];
  if (v3)
  {
    nw_frame_free_buffer((uint64_t)a1);
    nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
    uint64_t v5 = *((void *)a1 + 2);
    os_log_type_t v6 = (void *)*((void *)a1 + 3);
    if (v5)
    {
      *(void *)(v5 + 24) = v6;
      os_log_type_t v6 = (void *)*((void *)a1 + 3);
    }
    else
    {
      *(void *)(v3 + 80) = v6;
    }
    void *v6 = v5;
    *((void *)a1 + 2) = 0;
    *((void *)a1 + 3) = 0;
    os_release(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15)) {
    goto LABEL_37;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    nw_endpoint_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
    char v10 = "%{public}s called with null trainer";
    goto LABEL_36;
  }
  if (!v15)
  {
    nw_endpoint_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
    char v10 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_36;
  }
  int v13 = (char *)__nw_create_backtrace_string();
  nw_endpoint_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
    char v10 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_36;
  }
  if (v14)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
    __int16 v19 = 2082;
    uint64_t v20 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
LABEL_38:
  }
    free(v7);
}

uint64_t nw_protocol_trainer_bottom_notify_input(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_33;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
        nw_endpoint_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10) {
          goto LABEL_33;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
        nw_endpoint_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
        __int16 v17 = 2082;
        uint64_t v18 = backtrace_string;
        id v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
      }
LABEL_23:
      free(backtrace_string);
      goto LABEL_33;
    }
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_33;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
    nw_endpoint_t v8 = "%{public}s called with null protocol";
LABEL_32:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
LABEL_33:
    if (v5) {
      free(v5);
    }
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
      nw_endpoint_t v8 = "%{public}s called with null trainer";
      goto LABEL_32;
    }
    if (!v13)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
      nw_endpoint_t v8 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
        __int16 v17 = 2082;
        uint64_t v18 = backtrace_string;
        id v11 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (!v12) {
      goto LABEL_33;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
    nw_endpoint_t v8 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_32;
  }
  *(_DWORD *)(v2 + 188) = a2;
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    return result;
  }
  id v4 = *(void (**)(void))(*(void *)(result + 24) + 64);
  if (v4)
  {
    v4();
    return 1;
  }
  return 0;
}

uint64_t nw_protocol_trainer_bottom_check_output(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 136);
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      os_log_type_t v25 = __Block_byref_object_copy__17522;
      os_log_type_t v26 = __Block_byref_object_dispose__17523;
      uint64_t object = 0;
      char v28 = -1;
      if (v3)
      {
        if (!*(void *)(v3 + 112)
          || (*(_WORD *)(v3 + 204) & 0x100) != 0
          && g_channel_check_validity
          && !g_channel_check_validity(v3, *(void *)(v3 + 88)))
        {
          uint64_t v7 = 0;
          uint64_t v9 = 0;
        }
        else
        {
          int v6 = *(_DWORD *)(v3 + 52);
          uint64_t v5 = *(unsigned int *)(v3 + 56);
          if (v6) {
            uint64_t v7 = (v6 - (v5 + *(_DWORD *)(v3 + 60)));
          }
          else {
            uint64_t v7 = 0;
          }
          uint64_t v9 = *(void *)(v3 + 112) + v5;
        }
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 0x40000000;
        v21[2] = __nw_protocol_trainer_bottom_check_output_block_invoke;
        void v21[3] = &unk_1E523CD20;
        void v21[4] = buf;
        nw_frame_foreach_protocol_metadata(v3, 0, (uint64_t)v21);
        uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 16))(a2, *(void *)(*(void *)&buf[8] + 40), v9, v7);
        uint64_t v10 = *(void *)(v3 + 32);
        id v11 = *(void **)(v3 + 40);
        if (v10)
        {
          *(void *)(v10 + 40) = v11;
          id v11 = *(void **)(v3 + 40);
        }
        else
        {
          *(void *)(v2 + 144) = v11;
        }
        *id v11 = v10;
        *(void *)(v3 + 32) = 0;
        *(void *)(v3 + 40) = 0;
        nw_frame_finalize(v3);
      }
      else
      {
        uint64_t v8 = 0;
      }
      _Block_object_dispose(buf, 8);
      if ((v28 & 1) != 0 && object) {
        os_release(object);
      }
      return v8;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v13, &type, &v22)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null trainer";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v22)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v20)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v19 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
  char v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v13, &type, &v22)) {
    goto LABEL_49;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v18)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_1830D4000, v14, v15, v19, buf, 0x16u);
    }
LABEL_39:
    free(backtrace_string);
    goto LABEL_49;
  }
  BOOL v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  if (os_log_type_enabled(v14, type))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
    uint64_t v16 = "%{public}s called with null protocol";
LABEL_48:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
  }
LABEL_49:
  if (v13) {
    free(v13);
  }
  return 0;
}

uint64_t __Block_byref_object_copy__17522(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__17523(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __nw_protocol_trainer_bottom_check_output_block_invoke(uint64_t a1, void *object)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    BOOL v5 = nw_array_create();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    char v7 = *(unsigned char *)(v6 + 48);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(unsigned char *)(v6 + 48);
      }
    }
    *(void *)(v6 + 40) = v5;
    *(unsigned char *)(v6 + 48) = v7 | 1;
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  nw_array_append(v4, object);
  return 1;
}

uint64_t nw_protocol_trainer_top_check_input(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_46;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        os_log_type_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (!v17) {
          goto LABEL_46;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        os_log_type_t v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        BOOL v18 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
        _os_log_impl(&dword_1830D4000, v13, v14, v18, buf, 0x16u);
      }
LABEL_36:
      free(backtrace_string);
      goto LABEL_46;
    }
    char v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    os_log_type_t v15 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
LABEL_46:
    if (v12) {
      free(v12);
    }
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
      os_log_type_t v15 = "%{public}s called with null trainer";
      goto LABEL_45;
    }
    if (!v22)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
      os_log_type_t v15 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        BOOL v18 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v19) {
      goto LABEL_46;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    os_log_type_t v15 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_45;
  }
  uint64_t v3 = *(void *)(v2 + 120);
  if (!v3) {
    return 0;
  }
  *(void *)long long buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  os_log_type_t v25 = __Block_byref_object_copy__17522;
  os_log_type_t v26 = __Block_byref_object_dispose__17523;
  uint64_t object = 0;
  char v28 = -1;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  v21[2] = __nw_protocol_trainer_top_check_input_block_invoke;
  void v21[3] = &unk_1E523CD48;
  void v21[4] = buf;
  nw_frame_foreach_protocol_metadata(v3, 0, (uint64_t)v21);
  if (!*(void *)(v3 + 112)
    || (*(_WORD *)(v3 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(v3, *(void *)(v3 + 88)))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 52);
    uint64_t v5 = *(unsigned int *)(v3 + 56);
    if (v6) {
      uint64_t v7 = (v6 - (v5 + *(_DWORD *)(v3 + 60)));
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(v3 + 112) + v5;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 16))(a2, *(void *)(*(void *)&buf[8] + 40), v8, v7);
  uint64_t v10 = *(void *)(v3 + 32);
  id v11 = *(void **)(v3 + 40);
  if (v10)
  {
    *(void *)(v10 + 40) = v11;
    id v11 = *(void **)(v3 + 40);
  }
  else
  {
    *(void *)(v2 + 128) = v11;
  }
  *id v11 = v10;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  nw_frame_finalize(v3);
  _Block_object_dispose(buf, 8);
  if ((v28 & 1) != 0 && object) {
    os_release(object);
  }
  return v9;
}

uint64_t __nw_protocol_trainer_top_check_input_block_invoke(uint64_t a1, void *object)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    BOOL v5 = nw_array_create();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    char v7 = *(unsigned char *)(v6 + 48);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(unsigned char *)(v6 + 48);
      }
    }
    *(void *)(v6 + 40) = v5;
    *(unsigned char *)(v6 + 48) = v7 | 1;
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  nw_array_append(v4, object);
  return 1;
}

BOOL nw_protocol_trainer_top_inject_output(uint64_t a1, NSObject *a2, int a3, const void *a4, size_t size)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v18, &type, &v28)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
        uint64_t v21 = "%{public}s called with null protocol";
LABEL_41:
        _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
      }
LABEL_42:
      if (v18) {
        free(v18);
      }
      return 0;
    }
    if (!v28)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
        uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v19 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v23 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
        uint64_t v21 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v23)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
      __int16 v32 = 2082;
      os_log_type_t v33 = backtrace_string;
      uint64_t v24 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_31:
      _os_log_impl(&dword_1830D4000, v19, v20, v24, buf, 0x16u);
    }
LABEL_32:
    free(backtrace_string);
    goto LABEL_42;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v18, &type, &v28)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
        uint64_t v21 = "%{public}s called with null trainer";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (!v28)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
        uint64_t v21 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v19 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v27 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
        uint64_t v21 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v27)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
      __int16 v32 = 2082;
      os_log_type_t v33 = backtrace_string;
      uint64_t v24 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  uint64_t v10 = 0;
  int v11 = 0;
  if (a4)
  {
    unsigned int v12 = size;
    if (size)
    {
      uint64_t v10 = malloc_type_malloc(size, 0xF2B69DE5uLL);
      if (!v10)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v31 = "strict_malloc";
        __int16 v32 = 2048;
        os_log_type_t v33 = (char *)v12;
        os_log_type_t v26 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v26);
        if (result)
        {
          __break(1u);
          return result;
        }
        free(v26);
      }
      memcpy(v10, a4, v12);
      int v11 = v12;
    }
  }
  uint64_t v13 = nw_frame_create(0, (uint64_t)v10, v11, (uint64_t)nw_protocol_trainer_frame_finalizer, a1);
  os_log_type_t v14 = (void *)v13;
  if (a2) {
    nw_frame_set_metadata(v13, a2, 0, a3);
  }
  if (v10) {
    nw_frame_set_buffer_used_malloc((uint64_t)v14, 1);
  }
  v14[2] = 0;
  os_log_type_t v15 = *(void **)(v6 + 80);
  v14[3] = v15;
  *os_log_type_t v15 = v14;
  *(void *)(v6 + 80) = v14 + 2;
  void v14[4] = 0;
  uint64_t v16 = *(void **)(v6 + 112);
  void v14[5] = v16;
  void *v16 = v14;
  *(void *)(v6 + 112) = v14 + 4;
  ++*(_DWORD *)(v6 + 192);
  return 1;
}

uint64_t nw_protocol_trainer_top_flush_output(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v10, type, &v27)) {
      goto LABEL_41;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v27)
      {
        int v11 = __nwlog_obj();
        os_log_type_t v12 = type[0];
        if (!os_log_type_enabled(v11, type[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
        uint64_t v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (!backtrace_string)
      {
        if (!v15) {
          goto LABEL_41;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
        uint64_t v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
        _os_log_impl(&dword_1830D4000, v11, v12, v16, buf, 0x16u);
      }
LABEL_31:
      free(backtrace_string);
      goto LABEL_41;
    }
    int v11 = __nwlog_obj();
    os_log_type_t v12 = type[0];
    if (!os_log_type_enabled(v11, type[0])) {
      goto LABEL_41;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
    uint64_t v13 = "%{public}s called with null protocol";
LABEL_40:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
LABEL_41:
    if (v10) {
      free(v10);
    }
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v10, type, &v27)) {
      goto LABEL_41;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
      uint64_t v13 = "%{public}s called with null trainer";
      goto LABEL_40;
    }
    if (!v27)
    {
      int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
      uint64_t v13 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v11 = __nwlog_obj();
    os_log_type_t v12 = type[0];
    BOOL v17 = os_log_type_enabled(v11, type[0]);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v16 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    if (!v17) {
      goto LABEL_41;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
    uint64_t v13 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_40;
  }
  if (!*(_DWORD *)(v2 + 192) || !*(void *)(v2 + 104)) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    BOOL v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 88);
    if (v5 && *(void *)(v4 + 96))
    {
      *(void *)os_log_type_t type = 0;
      os_log_type_t v26 = type;
      v5(v3, a1, 1, 0xFFFFFFFFLL);
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      char v29 = 1;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      BOOL v19 = (uint64_t (*)(void *))__nw_protocol_trainer_top_flush_output_block_invoke;
      os_log_type_t v20 = &unk_1E523CD98;
      uint64_t v21 = buf;
      char v22 = type;
      uint64_t v23 = v2;
      uint64_t v24 = a1;
      uint64_t v6 = *(void *)type;
      do
      {
        if (!v6) {
          break;
        }
        uint64_t v7 = *(void *)(v6 + 32);
        char v8 = v19(v18);
        uint64_t v6 = v7;
      }
      while ((v8 & 1) != 0);
      uint64_t v3 = (*(uint64_t (**)(uint64_t, os_log_type_t *))(*(void *)(v3 + 24) + 96))(v3, type);
      _Block_object_dispose(buf, 8);
      return v3;
    }
    return 0;
  }
  return v3;
}

uint64_t __nw_protocol_trainer_top_flush_output_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    uint64_t v4 = *(void *)(a1[6] + 104);
    if (v4)
    {
      unsigned int v41 = 0;
      BOOL v5 = (void *)nw_frame_unclaimed_bytes(a2, &v41);
      if (!*(void *)(v4 + 112)
        || (*(_WORD *)(v4 + 204) & 0x100) != 0
        && g_channel_check_validity
        && !g_channel_check_validity(v4, *(void *)(v4 + 88)))
      {
        unsigned int v8 = 0;
        int v11 = 0;
      }
      else
      {
        int v7 = *(_DWORD *)(v4 + 52);
        uint64_t v6 = *(unsigned int *)(v4 + 56);
        if (v7) {
          unsigned int v8 = v7 - (v6 + *(_DWORD *)(v4 + 60));
        }
        else {
          unsigned int v8 = 0;
        }
        int v11 = (const void *)(*(void *)(v4 + 112) + v6);
      }
      uint64_t v37 = 0;
      os_log_type_t v38 = &v37;
      uint64_t v39 = 0x2000000000;
      char v40 = 0;
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 0x40000000;
      v36[2] = __nw_protocol_trainer_top_flush_output_block_invoke_2;
      v36[3] = &unk_1E523CD70;
      v36[4] = &v37;
      v36[5] = a2;
      nw_frame_foreach_protocol_metadata(v4, 0, (uint64_t)v36);
      if (!*((unsigned char *)v38 + 24) && (!v5 || !v11 || v41 < v8))
      {
        *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
        uint64_t v24 = *(void *)(a2 + 32);
        os_log_type_t v25 = *(void **)(a2 + 40);
        if (v24)
        {
          *(void *)(v24 + 40) = v25;
          os_log_type_t v25 = *(void **)(a2 + 40);
        }
        else
        {
          *(void *)(a1[5] + 8) = v25;
        }
        *os_log_type_t v25 = v24;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        nw_frame_finalize(a2);
        uint64_t v29 = *(void *)(v4 + 32);
        uint64_t v30 = *(void **)(v4 + 40);
        if (v29)
        {
          *(void *)(v29 + 40) = v30;
          uint64_t v30 = *(void **)(v4 + 40);
        }
        else
        {
          *(void *)(a1[6] + 112) = v30;
        }
        *uint64_t v30 = v29;
        *(void *)(v4 + 32) = 0;
        *(void *)(v4 + 40) = 0;
LABEL_51:
        nw_frame_finalize(v4);
        _Block_object_dispose(&v37, 8);
        return 1;
      }
      if (v5 && v11)
      {
        memcpy(v5, v11, v8);
        nw_frame_claim(a2, v12, v8, 0);
        nw_frame_collapse(a2);
        nw_frame_unclaim(a2, v13, v8, 0);
      }
      uint64_t v14 = *(void *)(v4 + 32);
      BOOL v15 = *(void **)(v4 + 40);
      if (v14)
      {
        *(void *)(v14 + 40) = v15;
        BOOL v15 = *(void **)(v4 + 40);
      }
      else
      {
        *(void *)(a1[6] + 112) = v15;
      }
      *BOOL v15 = v14;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      uint64_t v16 = a1[6];
      int v17 = *(_DWORD *)(v16 + 192);
      *(_DWORD *)(v16 + 192) = v17 - 1;
      if (v17) {
        goto LABEL_51;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = *(unsigned int *)(a1[6] + 192);
      *(_DWORD *)long long buf = 136446978;
      uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
      __int16 v44 = 2082;
      uint64_t v45 = "trainer->injected_output_count";
      __int16 v46 = 2048;
      uint64_t v47 = 1;
      __int16 v48 = 2048;
      uint64_t v49 = v18;
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v19, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v22 = *(unsigned int *)(a1[6] + 192);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            __int16 v44 = 2082;
            uint64_t v45 = "trainer->injected_output_count";
            __int16 v46 = 2048;
            uint64_t v47 = 1;
            __int16 v48 = 2048;
            uint64_t v49 = v22;
            uint64_t v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_47:
            _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x2Au);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = gLogObj;
          os_log_type_t v21 = type;
          BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v27)
            {
              uint64_t v28 = *(unsigned int *)(a1[6] + 192);
              *(_DWORD *)long long buf = 136447234;
              uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
              __int16 v44 = 2082;
              uint64_t v45 = "trainer->injected_output_count";
              __int16 v46 = 2048;
              uint64_t v47 = 1;
              __int16 v48 = 2048;
              uint64_t v49 = v28;
              __int16 v50 = 2082;
              os_log_type_t v51 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(backtrace_string);
            goto LABEL_48;
          }
          if (v27)
          {
            uint64_t v32 = *(unsigned int *)(a1[6] + 192);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            __int16 v44 = 2082;
            uint64_t v45 = "trainer->injected_output_count";
            __int16 v46 = 2048;
            uint64_t v47 = 1;
            __int16 v48 = 2048;
            uint64_t v49 = v32;
            uint64_t v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_47;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v31 = *(unsigned int *)(a1[6] + 192);
            *(_DWORD *)long long buf = 136446978;
            uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            __int16 v44 = 2082;
            uint64_t v45 = "trainer->injected_output_count";
            __int16 v46 = 2048;
            uint64_t v47 = 1;
            __int16 v48 = 2048;
            uint64_t v49 = v31;
            uint64_t v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_47;
          }
        }
      }
LABEL_48:
      if (v19) {
        free(v19);
      }
      *(_DWORD *)(a1[6] + 192) = 0;
      goto LABEL_51;
    }
  }
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void **)(a2 + 40);
  if (v9)
  {
    *(void *)(v9 + 40) = v10;
    uint64_t v10 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(a1[5] + 8) = v10;
  }
  void *v10 = v9;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t __nw_protocol_trainer_top_flush_output_block_invoke_2(uint64_t a1, NSObject *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t nw_protocol_trainer_top_connect(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v15 = "nw_protocol_trainer_top_connect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null protocol";
      goto LABEL_35;
    }
    if (!v12)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_35;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      __int16 v16 = 2082;
      int v17 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_36:
    if (!v4) {
      return 0;
    }
LABEL_37:
    free(v4);
    return 0;
  }
  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v15 = "nw_protocol_trainer_top_connect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null trainer";
      goto LABEL_35;
    }
    if (!v12)
    {
      BOOL v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_35;
    }
    uint64_t v10 = (char *)__nw_create_backtrace_string();
    BOOL v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v15 = "nw_protocol_trainer_top_connect";
        __int16 v16 = 2082;
        int v17 = v10;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v10);
      if (!v4) {
        return 0;
      }
      goto LABEL_37;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null trainer, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 24) + 24);
  if (!v2) {
    return 0;
  }

  return v2();
}

uint64_t nw_protocol_trainer_top_disconnect(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_disconnect";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_33;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v11)
      {
        uint64_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (!backtrace_string)
      {
        if (!v8) {
          goto LABEL_33;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }
      if (v8)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v14 = "nw_protocol_trainer_top_disconnect";
        __int16 v15 = 2082;
        __int16 v16 = backtrace_string;
        BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
      }
LABEL_23:
      free(backtrace_string);
      goto LABEL_33;
    }
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_33;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_disconnect";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_32:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
LABEL_33:
    if (v3) {
      free(v3);
    }
    return 0;
  }
  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_disconnect";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_top_disconnect";
      os_log_type_t v6 = "%{public}s called with null trainer";
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_top_disconnect";
      os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v14 = "nw_protocol_trainer_top_disconnect";
        __int16 v15 = 2082;
        __int16 v16 = backtrace_string;
        BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (!v10) {
      goto LABEL_33;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_disconnect";
    os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_32;
  }
  uint64_t result = *(void *)(a1 + 32);
  if (!result) {
    return result;
  }
  uint64_t v2 = *(void (**)(void))(*(void *)(result + 24) + 32);
  if (v2)
  {
    v2();
    return 1;
  }
  return 0;
}

uint64_t nw_protocol_trainer_top_expect_connected(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return *(unsigned char *)(v1 + 196) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_trainer_top_expect_disconnected(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return (*(unsigned __int8 *)(v1 + 196) >> 1) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_trainer_bottom_expect_disconnect(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return (*(unsigned __int8 *)(v1 + 196) >> 2) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_trainer_bottom_expect_reset(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return (*(unsigned __int8 *)(v1 + 196) >> 3) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

BOOL nw_protocol_trainer_expect_frames_consumed(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return *(void *)(v1 + 72) == 0;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

void nw_protocol_trainer_set_local(uint64_t a1, void *object)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_set_local";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_set_local";
      int v7 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v15 = "nw_protocol_trainer_set_local";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v4) {
          return;
        }
LABEL_37:
        free(v4);
        return;
      }
      if (!v9) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_set_local";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_set_local";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_36;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    if (object) {
      uint64_t v3 = os_retain(object);
    }
    else {
      uint64_t v3 = 0;
    }
    *(void *)(v2 + 160) = v3;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v15 = "nw_protocol_trainer_set_local";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_set_local";
    int v7 = "%{public}s called with null trainer";
    goto LABEL_35;
  }
  if (!v12)
  {
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_set_local";
    int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_35;
  }
  BOOL v10 = (char *)__nw_create_backtrace_string();
  os_log_type_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_set_local";
    int v7 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_35;
  }
  if (v11)
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v15 = "nw_protocol_trainer_set_local";
    __int16 v16 = 2082;
    uint64_t v17 = v10;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4) {
    goto LABEL_37;
  }
}

uint64_t *nw_protocol_trainer_top_identifier()
{
  if (nw_protocol_trainer_top_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_trainer_top_identifier::onceToken, &__block_literal_global_17653);
  }
  return &g_trainer_top_protocol_identifier;
}

BOOL __nw_protocol_trainer_top_identifier_block_invoke()
{
  unk_1E8F7911C = 0;
  unk_1E8F79114 = 0;
  dword_1E8F79124 = 0;
  strcpy((char *)&g_trainer_top_protocol_identifier, "trainer_top");
  qword_1E8F79128 = 0x100000000;
  g_trainer_top_protocol_callbacks = (uint64_t)nw_protocol_default_add_input_handler;
  qword_1E8F79140 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F79178 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F791E8 = (uint64_t)nw_protocol_default_input_finished;
  qword_1E8F791F0 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F79238 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F79180 = (uint64_t)nw_protocol_default_get_input_frames;
  qword_1E8F79188 = (uint64_t)nw_protocol_default_get_output_frames;
  qword_1E8F79190 = (uint64_t)nw_protocol_default_finalize_output_frames;
  qword_1E8F79228 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F79198 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F791D8 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F791F8 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79200 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F79148 = (uint64_t)nw_protocol_default_connect;
  qword_1E8F79150 = (uint64_t)nw_protocol_default_disconnect;
  qword_1E8F79168 = (uint64_t)nw_protocol_default_error;
  qword_1E8F79230 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F791E0 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F79208 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F79210 = (uint64_t)nw_protocol_default_copy_info;
  qword_1E8F791C0 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F791C8 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F791D0 = (uint64_t)nw_protocol_default_notify;
  qword_1E8F79218 = (uint64_t)nw_protocol_default_add_listen_handler;
  qword_1E8F79220 = (uint64_t)nw_protocol_default_remove_listen_handler;
  qword_1E8F79138 = (uint64_t)nw_protocol_trainer_remove_input_handler;
  qword_1E8F79158 = (uint64_t)nw_protocol_trainer_connected;
  qword_1E8F79160 = (uint64_t)nw_protocol_trainer_disconnected;
  qword_1E8F79170 = (uint64_t)nw_protocol_trainer_input_available;
  qword_1E8F791A8 = (uint64_t)nw_protocol_trainer_get_path;
  qword_1E8F791A0 = (uint64_t)nw_protocol_trainer_get_parameters;
  qword_1E8F791B0 = (uint64_t)nw_protocol_trainer_get_local;
  qword_1E8F791B8 = (uint64_t)nw_protocol_trainer_get_remote;
  return nw_protocol_register_extended(&g_trainer_top_protocol_identifier, (uint64_t)nw_protocol_trainer_top_create);
}

BOOL nw_protocol_trainer_top_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xC8uLL, 0x68FF3B34uLL))
  {
    os_log_type_t v5 = memptr;
    if (memptr)
    {
LABEL_3:
      v5[6] = 0u;
      v5[7] = 0u;
      void v5[8] = 0u;
      v5[9] = 0u;
      *((void *)v5 + 24) = 0;
      v5[10] = 0u;
      v5[11] = 0u;
      void v5[4] = 0u;
      void v5[5] = 0u;
      v5[2] = 0u;
      v5[3] = 0u;
      *os_log_type_t v5 = 0u;
      v5[1] = 0u;
      *((void *)v5 + 2) = &g_trainer_top_protocol_identifier;
      *((void *)v5 + 3) = &g_trainer_top_protocol_callbacks;
      *((void *)v5 + 5) = v5;
      *((void *)v5 + 10) = (char *)v5 + 72;
      *((void *)v5 + 12) = (char *)v5 + 88;
      *((void *)v5 + 14) = (char *)v5 + 104;
      *((void *)v5 + 16) = (char *)v5 + 120;
      *((void *)v5 + 18) = (char *)v5 + 136;
      if (a2)
      {
        *((void *)v5 + 19) = os_retain(a2);
        if (a3)
        {
LABEL_5:
          os_log_type_t v6 = os_retain(a3);
LABEL_8:
          *((void *)v5 + 21) = v6;
          *(void *)uuid_t out = 0;
          *(void *)&out[8] = 0;
          uuid_generate_random(out);
          *((void *)v5 + 22) = nw_path_create_static(a2, a3, 1, out, 0, 0, 1, 0, 0, 0, 0);
          *((_DWORD *)v5 + 46) = 0;
          return (BOOL)v5;
        }
      }
      else
      {
        *((void *)v5 + 19) = 0;
        if (a3) {
          goto LABEL_5;
        }
      }
      os_log_type_t v6 = 0;
      goto LABEL_8;
    }
  }
  BOOL v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uuid_t out = 136446722;
  *(void *)&out[4] = "strict_memalign";
  *(_WORD *)&out[12] = 2048;
  *(void *)&out[14] = 8;
  __int16 v12 = 2048;
  uint64_t v13 = 200;
  BOOL v9 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    os_log_type_t v5 = memptr;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_trainer_get_remote(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[19];
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_remote";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_remote";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_remote";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_remote";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_remote";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_get_remote";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_remote";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_remote";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_remote";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_remote";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_trainer_get_local(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[20];
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_local";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_local";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_local";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_local";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_local";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_get_local";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_local";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_local";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_local";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_local";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_trainer_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[21];
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_parameters";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_parameters";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_parameters";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_parameters";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_get_parameters";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_parameters";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_parameters";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_parameters";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_parameters";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_trainer_get_path(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[22];
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_path";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_path";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_path";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_path";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_path";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_get_path";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_path";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_get_path";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_get_path";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_get_path";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

void nw_protocol_trainer_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20)) {
      goto LABEL_38;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (!os_log_type_enabled(v8, v21)) {
        goto LABEL_38;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
      BOOL v10 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      BOOL v12 = os_log_type_enabled(v8, v21);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v7) {
          return;
        }
LABEL_39:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
      BOOL v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (!os_log_type_enabled(v8, v21)) {
        goto LABEL_38;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
      BOOL v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a2)
    {
      get_input_frames = (unsigned int (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, unsigned char *))a2->callbacks->get_input_frames;
      if (get_input_frames)
      {
        *(void *)long long buf = 0;
        *(void *)&buf[8] = buf;
        if (get_input_frames(a2, a1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, buf))
        {
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 0x40000000;
          __int16 v16 = ___ZL35nw_protocol_trainer_input_availableP11nw_protocolS0__block_invoke;
          uint64_t v17 = &__block_descriptor_tmp_23_17708;
          uint64_t v18 = buf;
          BOOL v19 = handle;
          uint64_t v4 = *(void *)buf;
          do
          {
            if (!v4) {
              break;
            }
            uint64_t v5 = *(void *)(v4 + 32);
            char v6 = ((uint64_t (*)(void *))v16)(v15);
            uint64_t v4 = v5;
          }
          while ((v6 & 1) != 0);
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &v21, &v20)) {
    goto LABEL_38;
  }
  if (v21 == OS_LOG_TYPE_FAULT)
  {
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    if (!os_log_type_enabled(v8, v21)) {
      goto LABEL_38;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
    BOOL v10 = "%{public}s called with null trainer";
    goto LABEL_37;
  }
  if (!v20)
  {
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    if (!os_log_type_enabled(v8, v21)) {
      goto LABEL_38;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
    BOOL v10 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_37;
  }
  uint64_t v13 = (char *)__nw_create_backtrace_string();
  BOOL v8 = __nwlog_obj();
  os_log_type_t v9 = v21;
  BOOL v14 = os_log_type_enabled(v8, v21);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
    BOOL v10 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_39;
  }
}

uint64_t ___ZL35nw_protocol_trainer_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v2 = (void *)(a2 + 32);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v4;
  }
  *uint64_t v4 = v3;
  *uint64_t v2 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(void **)(v5 + 128);
  *(void *)(a2 + 40) = v6;
  void *v6 = a2;
  *(void *)(v5 + 128) = v2;
  return 1;
}

void nw_protocol_trainer_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_disconnected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_trainer_disconnected";
      char v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v14 = "nw_protocol_trainer_disconnected";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v3) {
          return;
        }
LABEL_35:
        free(v3);
        return;
      }
      if (!v8) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_trainer_disconnected";
      char v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_trainer_disconnected";
      char v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a1->output_handler == a2) {
      handle[196] |= 2u;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v14 = "nw_protocol_trainer_disconnected";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_disconnected";
    char v6 = "%{public}s called with null trainer";
    goto LABEL_33;
  }
  if (!v11)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_disconnected";
    char v6 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_33;
  }
  os_log_type_t v9 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_34;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_disconnected";
    char v6 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_33;
  }
  if (v10)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v14 = "nw_protocol_trainer_disconnected";
    __int16 v15 = 2082;
    __int16 v16 = v9;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3) {
    goto LABEL_35;
  }
}

void nw_protocol_trainer_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_connected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_trainer_connected";
      char v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v14 = "nw_protocol_trainer_connected";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v3) {
          return;
        }
LABEL_35:
        free(v3);
        return;
      }
      if (!v8) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_trainer_connected";
      char v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "nw_protocol_trainer_connected";
      char v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a1->output_handler == a2) {
      handle[196] |= 1u;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v14 = "nw_protocol_trainer_connected";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_connected";
    char v6 = "%{public}s called with null trainer";
    goto LABEL_33;
  }
  if (!v11)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_connected";
    char v6 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_33;
  }
  os_log_type_t v9 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_34;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_connected";
    char v6 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_33;
  }
  if (v10)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v14 = "nw_protocol_trainer_connected";
    __int16 v15 = 2082;
    __int16 v16 = v9;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3) {
    goto LABEL_35;
  }
}

uint64_t nw_protocol_trainer_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v27 = "nw_protocol_trainer_remove_input_handler";
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v16, &type, &v24)) {
      goto LABEL_57;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_57;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v27 = "nw_protocol_trainer_remove_input_handler";
        BOOL v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_56;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_57;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v27 = "nw_protocol_trainer_remove_input_handler";
        BOOL v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_56;
      }
      if (v21)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v27 = "nw_protocol_trainer_remove_input_handler";
        __int16 v28 = 2082;
        uint64_t v29 = backtrace_string;
        uint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
        _os_log_impl(&dword_1830D4000, v17, v18, v22, buf, 0x16u);
      }
LABEL_47:
      free(backtrace_string);
      goto LABEL_57;
    }
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_57;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v27 = "nw_protocol_trainer_remove_input_handler";
    BOOL v19 = "%{public}s called with null protocol";
LABEL_56:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
LABEL_57:
    if (v16) {
      free(v16);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v27 = "nw_protocol_trainer_remove_input_handler";
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v16, &type, &v24)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_57;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v27 = "nw_protocol_trainer_remove_input_handler";
      BOOL v19 = "%{public}s called with null trainer";
      goto LABEL_56;
    }
    if (!v24)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_57;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v27 = "nw_protocol_trainer_remove_input_handler";
      BOOL v19 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v27 = "nw_protocol_trainer_remove_input_handler";
        __int16 v28 = 2082;
        uint64_t v29 = backtrace_string;
        uint64_t v22 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v23) {
      goto LABEL_57;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v27 = "nw_protocol_trainer_remove_input_handler";
    BOOL v19 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_56;
  }
  if (a2 && a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2) {
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  output_handler = a1->output_handler;
  if (output_handler) {
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  }
  if (a3)
  {
    while (1)
    {
      os_log_type_t v9 = (void *)handle[9];
      if (!v9) {
        break;
      }
      uint64_t v10 = v9[2];
      char v11 = (void *)v9[3];
      if (v10)
      {
        *(void *)(v10 + 24) = v11;
        char v11 = (void *)v9[3];
      }
      else
      {
        handle[10] = v11;
      }
      *char v11 = v10;
      v9[2] = 0;
      v9[3] = 0;
      if (nw_frame_uses_external_data((uint64_t)v9)) {
        nw_frame_set_external_data((uint64_t)v9, 0, 0);
      }
      else {
        nw_frame_free_buffer((uint64_t)v9);
      }
      nw_frame_reset((uint64_t)v9, 0, 0, 0, 0);
      os_release(v9);
    }
    BOOL v12 = (void *)handle[19];
    if (v12)
    {
      os_release(v12);
      handle[19] = 0;
    }
    uint64_t v13 = (void *)handle[20];
    if (v13)
    {
      os_release(v13);
      handle[20] = 0;
    }
    BOOL v14 = (void *)handle[21];
    if (v14)
    {
      os_release(v14);
      handle[21] = 0;
    }
    __int16 v15 = (void *)handle[22];
    if (v15) {
      os_release(v15);
    }
    a1->handle = 0;
    free(handle);
  }
  return 1;
}

uint64_t *nw_protocol_trainer_bottom_identifier()
{
  if (nw_protocol_trainer_bottom_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_trainer_bottom_identifier::onceToken, &__block_literal_global_15_17739);
  }
  return &g_trainer_bottom_protocol_identifier;
}

BOOL __nw_protocol_trainer_bottom_identifier_block_invoke()
{
  unk_1E8F7925F = 0;
  unk_1E8F79257 = 0;
  byte_1E8F79267 = 0;
  strcpy((char *)g_trainer_bottom_protocol_identifier, "trainer_bottom");
  qword_1E8F79268 = 0x100000000;
  qword_1E8F79280 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F792B0 = (uint64_t)nw_protocol_default_input_available;
  qword_1E8F792B8 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F79328 = (uint64_t)nw_protocol_default_input_finished;
  qword_1E8F79330 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F79378 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F79368 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F792D8 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F792E0 = (uint64_t)nw_protocol_default_get_parameters;
  qword_1E8F792F0 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F792F8 = (uint64_t)nw_protocol_default_get_remote;
  qword_1E8F792E8 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F79318 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F79338 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79340 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F79298 = (uint64_t)nw_protocol_default_connected;
  qword_1E8F792A0 = (uint64_t)nw_protocol_default_disconnected;
  qword_1E8F792A8 = (uint64_t)nw_protocol_default_error;
  qword_1E8F79320 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F79348 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F79350 = (uint64_t)nw_protocol_default_copy_info;
  qword_1E8F79300 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F79308 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F79310 = (uint64_t)nw_protocol_default_notify;
  qword_1E8F79358 = (uint64_t)nw_protocol_default_add_listen_handler;
  qword_1E8F79360 = (uint64_t)nw_protocol_default_remove_listen_handler;
  g_trainer_bottom_protocol_callbacks = (uint64_t)nw_protocol_trainer_add_input_handler;
  qword_1E8F79278 = (uint64_t)nw_protocol_trainer_remove_input_handler;
  qword_1E8F792C0 = (uint64_t)nw_protocol_trainer_bottom_get_input_frames;
  qword_1E8F792C8 = (uint64_t)nw_protocol_trainer_bottom_get_output_frames;
  qword_1E8F792D0 = (uint64_t)nw_protocol_trainer_bottom_finalize_output_frames;
  qword_1E8F79288 = (uint64_t)nw_protocol_trainer_connect;
  qword_1E8F79290 = (uint64_t)nw_protocol_trainer_disconnect;
  qword_1E8F79370 = (uint64_t)nw_protocol_trainer_reset;
  return nw_protocol_register_extended(g_trainer_bottom_protocol_identifier, (uint64_t)nw_protocol_trainer_bottom_create);
}

BOOL nw_protocol_trainer_bottom_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xC8uLL, 0x68FF3B34uLL))
  {
    os_log_type_t v5 = memptr;
    if (memptr)
    {
LABEL_3:
      v5[6] = 0u;
      v5[7] = 0u;
      void v5[8] = 0u;
      v5[9] = 0u;
      *((void *)v5 + 24) = 0;
      v5[10] = 0u;
      v5[11] = 0u;
      void v5[4] = 0u;
      void v5[5] = 0u;
      v5[2] = 0u;
      v5[3] = 0u;
      *os_log_type_t v5 = 0u;
      v5[1] = 0u;
      *((void *)v5 + 2) = &g_trainer_bottom_protocol_identifier;
      *((void *)v5 + 3) = &g_trainer_bottom_protocol_callbacks;
      *((void *)v5 + 5) = v5;
      *((void *)v5 + 10) = (char *)v5 + 72;
      *((void *)v5 + 12) = (char *)v5 + 88;
      *((void *)v5 + 14) = (char *)v5 + 104;
      *((void *)v5 + 16) = (char *)v5 + 120;
      *((void *)v5 + 18) = (char *)v5 + 136;
      if (a2)
      {
        *((void *)v5 + 19) = os_retain(a2);
        if (a3)
        {
LABEL_5:
          char v6 = os_retain(a3);
LABEL_8:
          *((void *)v5 + 21) = v6;
          *(void *)uuid_t out = 0;
          *(void *)&out[8] = 0;
          uuid_generate_random(out);
          *((void *)v5 + 22) = nw_path_create_static(a2, a3, 1, out, 0, 0, 1, 0, 0, 0, 0);
          *((_DWORD *)v5 + 46) = 0;
          return (BOOL)v5;
        }
      }
      else
      {
        *((void *)v5 + 19) = 0;
        if (a3) {
          goto LABEL_5;
        }
      }
      char v6 = 0;
      goto LABEL_8;
    }
  }
  BOOL v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uuid_t out = 136446722;
  *(void *)&out[4] = "strict_memalign";
  *(_WORD *)&out[12] = 2048;
  *(void *)&out[14] = 8;
  __int16 v12 = 2048;
  uint64_t v13 = 200;
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    os_log_type_t v5 = memptr;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_trainer_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (a1->default_input_handler == a2) {
        handle[196] |= 8u;
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_reset";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_reset";
        int v7 = "%{public}s called with null trainer";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_reset";
        int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_reset";
        int v7 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v15 = "nw_protocol_trainer_reset";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v15 = "nw_protocol_trainer_reset";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_34;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_reset";
        int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_reset";
        int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v15 = "nw_protocol_trainer_reset";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  os_log_type_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_reset";
    int v7 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_34:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_protocol_trainer_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_disconnect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_disconnect";
      int v7 = "%{public}s called with null protocol";
      goto LABEL_38;
    }
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_disconnect";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_39;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_disconnect";
      int v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_38;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v15 = "nw_protocol_trainer_disconnect";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_39:
    if (!v4) {
      return;
    }
    goto LABEL_40;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_disconnect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_disconnect";
      int v7 = "%{public}s called with null trainer";
      goto LABEL_38;
    }
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_disconnect";
      int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_38;
    }
    uint64_t v10 = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v15 = "nw_protocol_trainer_disconnect";
        __int16 v16 = 2082;
        uint64_t v17 = v10;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v10);
      if (!v4) {
        return;
      }
LABEL_40:
      free(v4);
      return;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_disconnect";
      int v7 = "%{public}s called with null trainer, no backtrace";
LABEL_38:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  if (a1->default_input_handler == a2)
  {
    handle[196] |= 4u;
    if (!a2) {
      return;
    }
  }
  else if (!a2)
  {
    return;
  }
  disconnected = (void (*)(nw_protocol *, nw_protocol *))a2->callbacks->disconnected;
  if (disconnected)
  {
    disconnected(a2, a1);
  }
}

uint64_t nw_protocol_trainer_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1->handle)
    {
      if (a2)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))a2->callbacks->connected;
        if (connected) {
          connected(a2, a1);
        }
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_connect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_connect";
        int v7 = "%{public}s called with null trainer";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_connect";
        int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_connect";
        int v7 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v15 = "nw_protocol_trainer_connect";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v15 = "nw_protocol_trainer_connect";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_35;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_connect";
        int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v15 = "nw_protocol_trainer_connect";
        int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v15 = "nw_protocol_trainer_connect";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  os_log_type_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)long long buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_connect";
    int v7 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_35:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_trainer_bottom_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      __int16 v16 = ___ZL49nw_protocol_trainer_bottom_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      uint64_t v17 = &__block_descriptor_tmp_25_17782;
      uint64_t v18 = a2;
      BOOL v19 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        uint64_t v4 = (nw_frame *)*((void *)tqh_first + 4);
        char v5 = ((uint64_t (*)(void *))v16)(v15);
        tqh_first = v4;
      }
      while ((v5 & 1) != 0);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20)) {
      goto LABEL_35;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null trainer";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v20)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v14 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v14)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
      __int16 v24 = 2082;
      os_log_type_t v25 = backtrace_string;
      uint64_t v13 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &v21, &v20)) {
    goto LABEL_35;
  }
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v12 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
      __int16 v24 = 2082;
      os_log_type_t v25 = backtrace_string;
      uint64_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v8, v9, v13, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  BOOL v8 = __nwlog_obj();
  os_log_type_t v9 = v21;
  if (os_log_type_enabled(v8, v21))
  {
    *(_DWORD *)long long buf = 136446210;
    BOOL v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
    uint64_t v10 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_35:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t ___ZL49nw_protocol_trainer_bottom_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v2 = (void *)(a2 + 32);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v4;
  }
  *uint64_t v4 = v3;
  *uint64_t v2 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  os_log_type_t v6 = *(void **)(v5 + 144);
  *(void *)(a2 + 40) = v6;
  void *v6 = a2;
  *(void *)(v5 + 144) = v2;
  return 1;
}

uint64_t nw_protocol_trainer_bottom_get_output_frames(nw_protocol *a1, nw_protocol *a2, int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (a4 | a3 || a5 != 1)
      {
        uint64_t v14 = 0;
        if (a5 && a4)
        {
          LODWORD(v14) = 0;
          for (unsigned int i = 0; i < a4; i += v16)
          {
            if (a4 - i >= 0x2400) {
              size_t v16 = 9216;
            }
            else {
              size_t v16 = a4 - i;
            }
            BOOL v17 = nw_calloc_type<unsigned char>(v16);
            uint64_t v18 = nw_frame_create(0, v17, v16, (uint64_t)nw_protocol_trainer_frame_finalizer, (uint64_t)a1);
            nw_frame_set_buffer_used_malloc(v18, 1);
            *(void *)(v18 + 16) = 0;
            BOOL v19 = (uint64_t *)handle[10];
            *(void *)(v18 + 24) = v19;
            uint64_t *v19 = v18;
            handle[10] = v18 + 16;
            *(void *)(v18 + 32) = 0;
            tqh_last = a6->tqh_last;
            *(void *)(v18 + 40) = tqh_last;
            *tqh_last = (nw_frame *)v18;
            a6->tqh_last = (nw_frame **)(v18 + 32);
            uint64_t v14 = (v14 + 1);
            if (v14 >= a5) {
              break;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = nw_frame_create(0, 0, 0, (uint64_t)nw_protocol_trainer_frame_finalizer, (uint64_t)a1);
        *(void *)(v11 + 16) = 0;
        BOOL v12 = (uint64_t *)handle[10];
        *(void *)(v11 + 24) = v12;
        *BOOL v12 = v11;
        handle[10] = v11 + 16;
        *(void *)(v11 + 32) = 0;
        uint64_t v13 = a6->tqh_last;
        *(void *)(v11 + 40) = v13;
        *uint64_t v13 = (nw_frame *)v11;
        a6->tqh_last = (nw_frame **)(v11 + 32);
        return 1;
      }
      return v14;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v22, &type, &v30)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        os_log_type_t v25 = "%{public}s called with null trainer";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (!v30)
    {
      BOOL v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        os_log_type_t v25 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v29 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        os_log_type_t v25 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v29)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
      __int16 v34 = 2082;
      os_log_type_t v35 = backtrace_string;
      __int16 v28 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
  uint64_t v22 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (!__nwlog_fault(v22, &type, &v30)) {
    goto LABEL_42;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v30)
    {
      BOOL v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        os_log_type_t v25 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v27 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        os_log_type_t v25 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v27)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
      __int16 v34 = 2082;
      os_log_type_t v35 = backtrace_string;
      __int16 v28 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_31:
      _os_log_impl(&dword_1830D4000, v23, v24, v28, buf, 0x16u);
    }
LABEL_32:
    free(backtrace_string);
    goto LABEL_42;
  }
  BOOL v23 = __nwlog_obj();
  os_log_type_t v24 = type;
  if (os_log_type_enabled(v23, type))
  {
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
    os_log_type_t v25 = "%{public}s called with null protocol";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
  }
LABEL_42:
  if (v22) {
    free(v22);
  }
  return 0;
}

uint64_t nw_protocol_trainer_bottom_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      int v38 = 0;
      *(void *)&buf[16] = 0x2000000000;
      *(void *)os_log_type_t type = 0;
      os_log_type_t v33 = type;
      int v35 = 0;
      uint64_t v34 = 0x2000000000;
      unsigned int v7 = handle[47];
      if (v7 >= a5) {
        unsigned int v8 = a5;
      }
      else {
        unsigned int v8 = handle[47];
      }
      if (v7) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = a5;
      }
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 0x40000000;
      os_log_type_t v24 = ___ZL43nw_protocol_trainer_bottom_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      os_log_type_t v25 = &unk_1E523CE20;
      uint64_t v26 = buf;
      BOOL v27 = type;
      unsigned int v30 = v9;
      int v31 = a4;
      __int16 v28 = handle;
      BOOL v29 = a6;
      uint64_t v10 = *((void *)handle + 11);
      do
      {
        if (!v10) {
          break;
        }
        uint64_t v11 = *(void *)(v10 + 32);
        char v12 = ((uint64_t (*)(void *))v24)(v23);
        uint64_t v10 = v11;
      }
      while ((v12 & 1) != 0);
      uint64_t v13 = *(unsigned int *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(type, 8);
      _Block_object_dispose(buf, 8);
      return v13;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v15, type, &v36)) {
      goto LABEL_41;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      size_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v18 = "%{public}s called with null trainer";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (!v36)
    {
      size_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v18 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v16 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v22 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v18 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (v22)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v21 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
  __int16 v15 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (!__nwlog_fault(v15, type, &v36)) {
    goto LABEL_41;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v36)
    {
      size_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v16 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v20 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (v20)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
      _os_log_impl(&dword_1830D4000, v16, v17, v21, buf, 0x16u);
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_41;
  }
  size_t v16 = __nwlog_obj();
  os_log_type_t v17 = type[0];
  if (os_log_type_enabled(v16, type[0]))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
    uint64_t v18 = "%{public}s called with null protocol";
LABEL_40:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
  }
LABEL_41:
  if (v15) {
    free(v15);
  }
  return 0;
}

uint64_t ___ZL43nw_protocol_trainer_bottom_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= *(_DWORD *)(a1 + 64)) {
    return 0;
  }
  int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + v4) > *(_DWORD *)(a1 + 68)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned int v8 = *(void **)(a2 + 40);
  os_log_type_t v6 = (void *)(a2 + 32);
  if (v7)
  {
    *(void *)(v7 + 40) = v8;
    unsigned int v8 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 48) + 96) = v8;
  }
  *unsigned int v8 = v7;
  void *v6 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void **)(v9 + 8);
  *(void *)(a2 + 40) = v10;
  void *v10 = a2;
  *(void *)(v9 + 8) = v6;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v4;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return 1;
}

uint64_t nw_protocol_trainer_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
      if (!a2->output_handler) {
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      }
      uint64_t v4 = mach_continuous_time();
      if (v4 <= 1) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v4;
      }
      handle[8] = v5;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v18 = "nw_protocol_trainer_add_input_handler";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v18 = "nw_protocol_trainer_add_input_handler";
        uint64_t v10 = "%{public}s called with null trainer";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v15)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v18 = "nw_protocol_trainer_add_input_handler";
        uint64_t v10 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v18 = "nw_protocol_trainer_add_input_handler";
        uint64_t v10 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v14)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v18 = "nw_protocol_trainer_add_input_handler";
      __int16 v19 = 2082;
      BOOL v20 = backtrace_string;
      uint64_t v13 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v18 = "nw_protocol_trainer_add_input_handler";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15)) {
    goto LABEL_37;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v18 = "nw_protocol_trainer_add_input_handler";
        uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v18 = "nw_protocol_trainer_add_input_handler";
        uint64_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v12)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v18 = "nw_protocol_trainer_add_input_handler";
      __int16 v19 = 2082;
      BOOL v20 = backtrace_string;
      uint64_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v8, v9, v13, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  unsigned int v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v18 = "nw_protocol_trainer_add_input_handler";
    uint64_t v10 = "%{public}s called with null protocol";
LABEL_36:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_37:
  if (v7) {
    free(v7);
  }
  return 0;
}

void sub_18376C6F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void nw_remote_packet_input_available(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    id v5 = *(id *)(a1 + 40);
    objc_sync_enter(v5);
    uint64_t v6 = [v5 receiveWindowPacketCount];
    objc_sync_exit(v5);

    if (!v6) {
      break;
    }
    id v20 = 0;
    uint64_t v21 = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id *))(*(void *)(a2 + 24) + 80))(a2, a1, 1, 0xFFFFFFFFLL, v6, &v20))break; {
    uint64_t v7 = [MEMORY[0x1E4F1CA48] array];
    }
    id v8 = v20;
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      do
      {
        uint64_t v10 = *(void **)(v9 + 32);
        if (!v10 && !*(void *)(v9 + 40)) {
          uint64_t v10 = 0;
        }
        id v11 = v10;
        if (*(void *)(v9 + 112)
          && ((*(_WORD *)(v9 + 204) & 0x100) == 0
           || !g_channel_check_validity
           || g_channel_check_validity(v9, *(void *)(v9 + 88))))
        {
          int v12 = *(_DWORD *)(v9 + 52);
          if (v12)
          {
            uint64_t v13 = *(unsigned int *)(v9 + 56);
            int v14 = v13 + *(_DWORD *)(v9 + 60);
            uint64_t v15 = (v12 - v14);
            if (v12 != v14)
            {
              uint64_t v16 = *(void *)(v9 + 112);
              if (v16)
              {
                os_log_type_t v17 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v16 + v13 length:v15];
                [v7 addObject:v17];
              }
            }
          }
        }
        uint64_t v18 = *(void *)(v9 + 32);
        __int16 v19 = *(void **)(v9 + 40);
        if (v18)
        {
          *(void *)(v18 + 40) = v19;
          __int16 v19 = *(void **)(v9 + 40);
        }
        else
        {
          uint64_t v21 = *(void *)(v9 + 40);
        }
        void *v19 = v18;
        *(void *)(v9 + 32) = 0;
        *(void *)(v9 + 40) = 0;
        nw_frame_finalize(v9);

        uint64_t v9 = (uint64_t)v11;
      }
      while (v11);
    }
    uint64_t v4 = [v5 delegate];
    [v4 sendRemotePackets:v7];
  }
}

void sub_18376D200(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void nw_remote_packet_output_available(uint64_t a1, uint64_t a2)
{
  id v10 = *(id *)(a1 + 40);
  uint64_t v4 = [v10 writeRequests];
  objc_sync_enter(v4);
  while (1)
  {
    id v5 = [v10 writeRequests];
    uint64_t v6 = [v5 count];

    if (!v6) {
      break;
    }
    uint64_t v7 = [v10 writeRequests];
    id v8 = [v7 firstObject];

    if (!nw_remote_director_write_request(a1, a2, v8))
    {

      break;
    }
    uint64_t v9 = [v10 writeRequests];
    [v9 removeObjectAtIndex:0];
  }
  objc_sync_exit(v4);
}

void sub_18376E070(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18376E4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)_NWAdvertiser;
  [(_Unwind_Exception *)&a14 dealloc];
  _Unwind_Resume(a1);
}

void sub_18376E7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_description_block_invoke(uint64_t a1)
{
  uint64_t v2 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(*(void *)(a1 + 32) + 16), 0);
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 176))
  {
    BOOL v4 = nw_path_copy_description(*(void **)(v3 + 176));
    uint64_t v3 = *(void *)(a1 + 32);
    id v5 = *(void **)(v3 + 264);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = (char *)nw_advertise_descriptor_copy_description(v5);
      uint64_t v3 = *(void *)(a1 + 32);
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v4 = 0;
    id v5 = *(void **)(v3 + 264);
    if (v5) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  uint64_t v7 = (char **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  id_string = nw_listener_get_id_string((void *)v3);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(unsigned int *)(v9 + 128);
  if (v10 > 4) {
    id v11 = "<unknown>";
  }
  else {
    id v11 = off_1E523D0E0[v10];
  }
  description = nw_endpoint_get_description(*(void **)(v9 + 280));
  uint64_t v13 = "<NULL>";
  if (v4) {
    int v14 = (const char *)v4;
  }
  else {
    int v14 = "<NULL>";
  }
  if (v6) {
    uint64_t v13 = v6;
  }
  asprintf(v7, "[%s %s, local endpoint: %s, parameters: %s, port: %d, path %s, service: %s]", id_string, v11, description, v2, *(unsigned __int16 *)(*(void *)(a1 + 32) + 300), v14, v13);
  if (v6) {
    free(v6);
  }
  if (v2) {
    free(v2);
  }
  if (v4)
  {
    free((void *)v4);
  }
}

void sub_18376F058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18063(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18064(uint64_t a1)
{
}

void sub_18376F284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18376F7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_cancel_complete_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v1 = a1;
  *((unsigned char *)v1 + 302) &= ~1u;
  nw_listener_set_state_on_queue(v1, 4, 0);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL36nw_listener_cancel_complete_on_queueP22NWConcrete_nw_listener_block_invoke;
  aBlock[3] = &unk_1E524BAA8;
  uint64_t v2 = v1;
  uint64_t v6 = v2;
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
  v3[2](v3);
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);

  BOOL v4 = (void *)*((void *)v2 + 32);
  *((void *)v2 + 32) = 0;
}

void sub_18376F8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(*(void **)(a1 + 32), v3);
  if (socket_inbox_match_on_queue)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      uint64_t v6 = (id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446722;
        uint64_t v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        __int16 v11 = 2082;
        int v12 = id_string;
        __int16 v13 = 2112;
        id v14 = socket_inbox_match_on_queue;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] keeping existing multicast socket inbox: %@", (uint8_t *)&v9, 0x20u);
      }
    }
    nw_array_append(*(void *)(a1 + 40), socket_inbox_match_on_queue);
  }

  return 1;
}

void sub_18376FA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (!v5)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v11, &type, &v27)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446466;
          unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11) {
          goto LABEL_4;
        }
LABEL_39:
        free(v11);
        goto LABEL_4;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v7)
  {
    nw_context_assert_queue(*((void **)v5 + 3));
    int v9 = *((void *)v5 + 4);
    enumerate_block[0] = MEMORY[0x1E4F143A8];
    enumerate_block[1] = 3221225472;
    enumerate_block[2] = ___ZL66nw_listener_enumerate_multicast_parameters_for_descriptor_on_queueP22NWConcrete_nw_listenerPU33objcproto22OS_nw_group_descriptor8NSObjectU13block_pointerFbPU27objcproto16OS_nw_parametersS1_E_block_invoke;
    enumerate_block[3] = &unk_1E523D070;
    id v25 = v5;
    id v26 = v8;
    nw_group_descriptor_enumerate_endpoints(v9, enumerate_block);

    goto LABEL_4;
  }
  id v14 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
  __int16 v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v11, &type, &v27)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)long long buf = 136446210;
      unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v27)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)long long buf = 136446210;
      unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  __int16 v19 = (char *)__nw_create_backtrace_string();
  int v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)long long buf = 136446210;
      unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v21)
  {
    *(_DWORD *)long long buf = 136446466;
    unsigned int v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
    __int16 v31 = 2082;
    uint64_t v32 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_18376FFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_204(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (nw_proxy_config_supports_listeners(v4))
  {
    stack = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(*(void *)(a1 + 32) + 16));
    id v79 = nw_protocol_stack_copy_transport_protocol(stack);
    nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v79);
    id v6 = v4;
    id v7 = v5;
    id v80 = v7;
    if (v6)
    {
      if (v7)
      {
        if (*((void *)v6 + 1))
        {
          if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
          }
          id v8 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
          BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v80, (uint64_t)v8);

          uint64_t v10 = v80;
          if (is_equal_unsafe)
          {
            if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
              dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
            }
            uint64_t v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
          }
          identifier = nw_protocol_definition_get_identifier(v10);
          if (identifier)
          {
            *(void *)long long buf = 0;
            asprintf((char **)buf, "%s%s", "LISTEN-", identifier);
            int should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v6, *(const char **)buf, 0);
            __int16 v78 = nw_dictionary_copy_value(*((void *)v6 + 1), *(uint64_t *)buf);
            if (*(void *)buf) {
              free(*(void **)buf);
            }
LABEL_56:

            id v36 = nw_proxy_config_copy_endpoint(v6);
            id v37 = *(id *)(a1 + 32);
            id v76 = v36;
            nw_context_assert_queue(*((void **)v37 + 3));
            *(void *)long long buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000;
            id v96 = __Block_byref_object_copy__18063;
            __int16 v97 = __Block_byref_object_dispose__18064;
            id v98 = 0;
            int v38 = (atomic_uchar *)*((void *)v37 + 20);
            *(void *)&long long v90 = MEMORY[0x1E4F143A8];
            *((void *)&v90 + 1) = 3221225472;
            __int16 v91 = ___ZL46nw_listener_copy_proxy_connection_for_endpointP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
            __int16 v92 = &unk_1E524A2E8;
            uint64_t v39 = v76;
            __int16 v93 = v39;
            uint64_t v94 = buf;
            nw_array_apply(v38, (uint64_t)&v90);
            id v40 = *(id *)(*(void *)&buf[8] + 40);

            _Block_object_dispose(buf, 8);
            if (v40)
            {
LABEL_84:

LABEL_85:
              goto LABEL_86;
            }
            uint64_t v41 = *(void *)(*(void *)(a1 + 32) + 16);
            if (v41 && !nw_path_parameters_get_logging_disabled(*(void *)(v41 + 104)))
            {
              if (__nwlog_listener_log::onceToken != -1) {
                dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
              }
              BOOL v42 = (id)glistenerLogObj;
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
                *(_DWORD *)long long buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = id_string;
                *(_WORD *)&unsigned char buf[22] = 2112;
                id v96 = (uint64_t (*)(uint64_t, uint64_t))v39;
                _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Found listener proxy to %@, creating a new connection", buf, 0x20u);
              }
            }
            id v44 = *(id *)(*(void *)(a1 + 32) + 16);
            uint64_t v45 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v44, 0, 0);

            nw_parameters_set_server_mode(v45, 0);
            nw_parameters_set_proxy_applied(v45, 1);
            int v75 = nw_parameters_copy_default_protocol_stack(v45);
            nw_protocol_stack_clear_application_protocols(v75);
            if (should_proxy_transport_at_level == 2)
            {
              nw_protocol_stack_append_application_protocol(v75, v79);
              nw_protocol_options_t v47 = nw_protocol_stack_copy_internet_protocol(stack);
              nw_protocol_stack_append_application_protocol(v75, v47);

              __int16 v46 = v75;
            }
            else
            {
              __int16 v46 = v75;
              if (should_proxy_transport_at_level == 3) {
                nw_protocol_stack_append_application_protocol(v75, v79);
              }
            }
            iterate_block[0] = MEMORY[0x1E4F143A8];
            iterate_block[1] = 3221225472;
            iterate_block[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_205;
            iterate_block[3] = &unk_1E5248AE8;
            __int16 v48 = v46;
            __int16 v87 = v48;
            nw_protocol_stack_iterate_application_protocols(v78, iterate_block);
            uint64_t v49 = nw_protocol_stack_copy_transport_protocol(v78);
            if (v49)
            {
              nw_protocol_stack_set_original_proxied_transport_protocol(v48, v79);
              nw_protocol_stack_set_transport_protocol(v48, v49);
            }
            uint64_t v74 = v49;
            long long v90 = 0uLL;
            nw_path_get_client_id(*(void **)(*(void *)(a1 + 32) + 176), &v90);
            __int16 v50 = v45;
            os_log_type_t v51 = v50;
            if (v50)
            {
              *(_OWORD *)&v50[3].Class isa = v90;
              goto LABEL_72;
            }
            __int16 v64 = __nwlog_obj();
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
            id v73 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t v89 = OS_LOG_TYPE_ERROR;
            char v88 = 0;
            if (__nwlog_fault(v73, &v89, &v88))
            {
              if (v89 == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v65 = __nwlog_obj();
                os_log_type_t v66 = v89;
                if (os_log_type_enabled(v65, v89))
                {
                  *(_DWORD *)long long buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                  _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s called with null parameters", buf, 0xCu);
                }
              }
              else
              {
                if (v88)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __int16 v68 = __nwlog_obj();
                  os_log_type_t type = v89;
                  BOOL v69 = os_log_type_enabled(v68, v89);
                  if (backtrace_string)
                  {
                    if (v69)
                    {
                      *(_DWORD *)long long buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = backtrace_string;
                      _os_log_impl(&dword_1830D4000, v68, type, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_119;
                  }
                  if (v69)
                  {
                    *(_DWORD *)long long buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                    _os_log_impl(&dword_1830D4000, v68, type, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  __int16 v68 = __nwlog_obj();
                  os_log_type_t v71 = v89;
                  if (os_log_type_enabled(v68, v89))
                  {
                    *(_DWORD *)long long buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                    _os_log_impl(&dword_1830D4000, v68, v71, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
                  }
                }
              }
            }
LABEL_119:
            if (v73) {
              free(v73);
            }
LABEL_72:

            nw_connection_t v52 = nw_connection_create(v39, v51);
            uint64_t v53 = *(void *)(a1 + 32);
            if (v52)
            {
              uint64_t v54 = *(void *)(v53 + 160);
              if (!v54)
              {
                BOOL v55 = nw_array_create();
                uint64_t v56 = *(void *)(a1 + 32);
                os_log_type_t v57 = *(void **)(v56 + 160);
                *(void *)(v56 + 160) = v55;

                uint64_t v54 = *(void *)(*(void *)(a1 + 32) + 160);
              }
              nw_array_append(v54, v52);
              *(void *)long long buf = 0;
              *(void *)&buf[8] = buf;
              *(void *)&buf[16] = 0x3032000000;
              id v96 = __Block_byref_object_copy__18063;
              __int16 v97 = __Block_byref_object_dispose__18064;
              id v98 = 0;
              handler[0] = MEMORY[0x1E4F143A8];
              handler[1] = 3221225472;
              handler[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_206;
              handler[3] = &unk_1E523CFD0;
              id v82 = *(id *)(a1 + 32);
              __int16 v58 = v52;
              os_log_type_t v83 = v58;
              __int16 v84 = v51;
              __int16 v85 = buf;
              nw_connection_set_state_changed_handler(v58, handler);
              BOOL v59 = nw_queue_copy_current_workloop();
              nw_connection_set_queue(v58, (dispatch_queue_t)v59);

              nw_connection_start(v58);
              _Block_object_dispose(buf, 8);
            }
            else
            {
              uint64_t v60 = *(void *)(v53 + 16);
              if (v60 && !nw_path_parameters_get_logging_disabled(*(void *)(v60 + 104)))
              {
                if (__nwlog_listener_log::onceToken != -1) {
                  dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
                }
                char v61 = (id)glistenerLogObj;
                if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                {
                  __int16 v62 = nw_listener_get_id_string(*(void **)(a1 + 32));
                  *(_DWORD *)long long buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke_2";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v62;
                  *(_WORD *)&unsigned char buf[22] = 2112;
                  id v96 = (uint64_t (*)(uint64_t, uint64_t))v39;
                  _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Failed to create proxy connection to %@", buf, 0x20u);
                }
              }
            }

            if (!v52) {
              goto LABEL_85;
            }
            goto LABEL_84;
          }
          BOOL v21 = __nwlog_obj();
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

          LOBYTE(v90) = 16;
          os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v22, &v90, &v89)) {
            goto LABEL_109;
          }
          if (v90 == 17)
          {
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v24 = v90;
            if (os_log_type_enabled(v23, (os_log_type_t)v90))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null transport_identifier", buf, 0xCu);
            }
          }
          else if (v89)
          {
            __int16 v31 = (char *)__nw_create_backtrace_string();
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v32 = v90;
            BOOL v33 = os_log_type_enabled(v23, (os_log_type_t)v90);
            if (v31)
            {
              if (v33)
              {
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v31;
                _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null transport_identifier, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v31);
              goto LABEL_109;
            }
            if (v33)
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null transport_identifier, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v70 = v90;
            if (os_log_type_enabled(v23, (os_log_type_t)v90))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              _os_log_impl(&dword_1830D4000, v23, v70, "%{public}s called with null transport_identifier, backtrace limit exceeded", buf, 0xCu);
            }
          }

LABEL_109:
          if (v22) {
            free(v22);
          }
          int should_proxy_transport_at_level = 0;
LABEL_112:
          __int16 v78 = 0;
          goto LABEL_56;
        }
LABEL_55:
        int should_proxy_transport_at_level = 0;
        __int16 v78 = 0;
        uint64_t v10 = v80;
        goto LABEL_56;
      }
      os_log_type_t v17 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
      BOOL v18 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v90) = 16;
      os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v18, &v90, &v89))
      {
        if (v90 == 17)
        {
          __int16 v19 = __nwlog_obj();
          os_log_type_t v20 = v90;
          if (os_log_type_enabled(v19, (os_log_type_t)v90))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null transport_protocol", buf, 0xCu);
          }
        }
        else if (v89)
        {
          __int16 v28 = (char *)__nw_create_backtrace_string();
          __int16 v19 = __nwlog_obj();
          os_log_type_t v29 = v90;
          BOOL v30 = os_log_type_enabled(v19, (os_log_type_t)v90);
          if (v28)
          {
            if (v30)
            {
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v28;
              _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v28);
            goto LABEL_100;
          }
          if (v30)
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null transport_protocol, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __int16 v19 = __nwlog_obj();
          os_log_type_t v35 = v90;
          if (os_log_type_enabled(v19, (os_log_type_t)v90))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            _os_log_impl(&dword_1830D4000, v19, v35, "%{public}s called with null transport_protocol, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_100:
      if (v18) {
        free(v18);
      }
      int should_proxy_transport_at_level = 0;
      uint64_t v10 = 0;
      goto LABEL_112;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
    id v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v90) = 16;
    os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v14, &v90, &v89))
    {
      if (v90 == 17)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = v90;
        if (os_log_type_enabled(v15, (os_log_type_t)v90))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v89)
      {
        id v25 = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v26 = v90;
        BOOL v27 = os_log_type_enabled(v15, (os_log_type_t)v90);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v25;
            _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          goto LABEL_53;
        }
        if (v27)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v34 = v90;
        if (os_log_type_enabled(v15, (os_log_type_t)v90))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          _os_log_impl(&dword_1830D4000, v15, v34, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_53:
    if (v14) {
      free(v14);
    }
    goto LABEL_55;
  }
LABEL_86:

  return 1;
}

void sub_183770FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    id v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      uint64_t v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke_4";
      __int16 v11 = 2082;
      int v12 = id_string;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling retired inbox: %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
  nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1;
}

void sub_1837711D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3_213(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    id v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      uint64_t v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke_3";
      __int16 v11 = 2082;
      int v12 = id_string;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Removing flow registration: %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
  nw_path_flow_registration_close(v4);
  nw_array_remove_object(*(void *)(*(void *)(a1 + 32) + 152), (uint64_t)v4);

  return 1;
}

void sub_18377132C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_214(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v45 = 0uLL;
  nw_path_get_client_id(*(void **)(*(void *)(a1 + 32) + 176), &v45);
  id socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(*(void **)(a1 + 32), v3);
  if (socket_inbox_match_on_queue)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      id v6 = (id)glistenerLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v35 = 136446722;
      id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      __int16 v37 = 2082;
      int v38 = id_string;
      __int16 v39 = 2112;
      id v40 = socket_inbox_match_on_queue;
      id v8 = "%{public}s [%{public}s] Keeping existing multicast socket inbox: %@";
      int v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_INFO;
      uint32_t v11 = 32;
LABEL_8:
      _os_log_impl(&dword_1830D4000, v9, v10, v8, (uint8_t *)&v35, v11);
LABEL_25:
    }
  }
  else
  {
    int v12 = -[nw_listener_inbox_socket initWithParameters:delegate:necpUUID:]([nw_listener_inbox_socket alloc], v3, *(void **)(a1 + 32), &v45);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v15)
    {
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v24 && !nw_path_parameters_get_logging_disabled(*(void *)(v24 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        id v25 = (id)glistenerLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v26 = nw_listener_get_id_string(*(void **)(a1 + 32));
          BOOL v27 = *(void **)(*(void *)(a1 + 32) + 208);
          int v35 = 136446722;
          id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v37 = 2082;
          int v38 = v26;
          __int16 v39 = 2114;
          id v40 = v27;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] failed to create multicast listener inbox with parameters %{public}@", (uint8_t *)&v35, 0x20u);
        }
      }
      __int16 v28 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
      id v6 = *(NSObject **)(v29 + 40);
      *(void *)(v29 + 40) = v28;
      goto LABEL_25;
    }
    [v15 setMulticast:1];
    uint64_t v16 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    BOOL v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 16);
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      if (v19 && !nw_path_parameters_get_logging_disabled(*(void *)(v19 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        id v6 = (id)glistenerLogObj;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_25;
        }
        os_log_type_t v20 = nw_listener_get_id_string(*(void **)(a1 + 32));
        BOOL v21 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 208);
        int v35 = 136447234;
        id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        __int16 v37 = 2082;
        int v38 = v20;
        __int16 v39 = 2114;
        id v40 = v21;
        __int16 v41 = 2114;
        uint64_t v42 = v22;
        __int16 v43 = 2114;
        uint64_t v44 = v23;
        id v8 = "%{public}s [%{public}s] Error %{public}@ starting multicast inbox %{public}@. Parameters: %{public}@";
        int v9 = v6;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        uint32_t v11 = 52;
        goto LABEL_8;
      }
    }
    else
    {
      if (v19 && !nw_path_parameters_get_logging_disabled(*(void *)(v19 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        __int16 v31 = (id)glistenerLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          os_log_type_t v32 = nw_listener_get_id_string(*(void **)(a1 + 32));
          BOOL v33 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          uint64_t v34 = *(void *)(*(void *)(a1 + 32) + 208);
          int v35 = 136446978;
          id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v37 = 2082;
          int v38 = v32;
          __int16 v39 = 2114;
          id v40 = v33;
          __int16 v41 = 2114;
          uint64_t v42 = v34;
          _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Started multicast inbox %{public}@ with parameters %{public}@", (uint8_t *)&v35, 0x2Au);
        }
      }
      nw_array_append(*(void *)(*(void *)(a1 + 32) + 144), *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    }
  }

  return 1;
}

void sub_1837717D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_listener_save_local_endpoint_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_path_flow_is_assigned(v4)
    && (nw_path_flow_is_defunct(v4) & 1) == 0
    && (id v5 = nw_path_flow_copy_local_endpoint(v4)) != 0)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

void nw_listener_stop_advertising_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *((id *)v1 + 34);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        -[_NWAdvertiser stop](*(void *)(*((void *)&v10 + 1) + 8 * v5++));
      }
      while (v3 != v5);
      uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v3);
  }

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL37nw_listener_stop_advertising_on_queueP22NWConcrete_nw_listener_block_invoke;
  aBlock[3] = &unk_1E524BAA8;
  uint64_t v6 = v1;
  int v9 = v6;
  id v7 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
  v7[2](v7);
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
}

void sub_1837719F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_183771FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_start_advertising_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 272))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (!v3 || nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104))) {
      goto LABEL_15;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    id v4 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)long long buf = 136446466;
    uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
    __int16 v24 = 2082;
    id v25 = id_string;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v6, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        id v7 = (id)glistenerLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          int v9 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)long long buf = 136446466;
          uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          __int16 v24 = 2082;
          id v25 = v9;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s [%{public}s] advertisers already set", buf, 0x16u);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        id v7 = (id)glistenerLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v15)
          {
            uint64_t v16 = nw_listener_get_id_string(*(void **)(a1 + 32));
            *(_DWORD *)long long buf = 136446722;
            uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
            __int16 v24 = 2082;
            id v25 = v16;
            __int16 v26 = 2082;
            BOOL v27 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s [%{public}s] advertisers already set, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          if (!v6) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        if (v15)
        {
          uint64_t v19 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)long long buf = 136446466;
          uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          __int16 v24 = 2082;
          id v25 = v19;
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s [%{public}s] advertisers already set, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        id v7 = (id)glistenerLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          BOOL v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)long long buf = 136446466;
          uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          __int16 v24 = 2082;
          id v25 = v18;
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s [%{public}s] advertisers already set, backtrace limit exceeded", buf, 0x16u);
        }
      }
    }
    if (!v6)
    {
LABEL_15:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      return;
    }
LABEL_14:
    free(v6);
    goto LABEL_15;
  }
  v28[0] = *(void *)(a1 + 40);
  uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:1];
  uint64_t v11 = *(void *)(a1 + 32);
  long long v12 = *(void **)(v11 + 272);
  *(void *)(v11 + 272) = v10;
}

void sub_183772E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  _Unwind_Resume(a1);
}

void sub_183772FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1837731B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_183773270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _NWAdvertiser_dnssd_handler(_DNSServiceRef_t *a1, int a2, int a3, const char *a4, const char *a5, const char *a6, void *a7)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  long long v13 = a7;
  __int16 v37 = v13;
  if (v13 && v13[8] == a1)
  {
    nw_context_assert_queue(*((void **)v13[1] + 3));
    uint64_t v14 = *((void *)v37[1] + 2);
    if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      BOOL v15 = (id)glistenerLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_listener_get_id_string(v37[1]);
        *(_DWORD *)long long buf = 136447746;
        *(void *)&uint8_t buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
        os_log_type_t v17 = "<NULL>";
        *(_WORD *)&unsigned char buf[12] = 2082;
        if (a4) {
          BOOL v18 = a4;
        }
        else {
          BOOL v18 = "<NULL>";
        }
        *(void *)&buf[14] = id_string;
        *(_WORD *)&unsigned char buf[22] = 1024;
        if (a5) {
          uint64_t v19 = a5;
        }
        else {
          uint64_t v19 = "<NULL>";
        }
        *(_DWORD *)__int16 v58 = a2;
        if (a6) {
          os_log_type_t v17 = a6;
        }
        *(_WORD *)&v58[4] = 1024;
        *(_DWORD *)&v58[6] = a3;
        *(_WORD *)&v58[10] = 2082;
        *(void *)&v58[12] = v18;
        *(_WORD *)&v58[20] = 2082;
        *(void *)&v58[22] = v19;
        *(_WORD *)&v58[30] = 2082;
        BOOL v59 = v17;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] flags=0x%x, error=%d, name=%{public}s, type=%{public}s, domain=%{public}s", buf, 0x40u);
      }
    }
    id WeakRetained = objc_loadWeakRetained(v37 + 3);
    BOOL v21 = WeakRetained;
    if (a3)
    {
      dns_CFStreamError error = nw_error_create_dns_error(a3);
      uint64_t v23 = *((void *)v37[1] + 2);
      if (v23 && !nw_path_parameters_get_logging_disabled(*(void *)(v23 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        __int16 v24 = (id)glistenerLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v25 = nw_listener_get_id_string(v37[1]);
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v25;
          *(_WORD *)&unsigned char buf[22] = 2114;
          *(void *)__int16 v58 = dns_error;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Error advertising bonjour service: %{public}@", buf, 0x20u);
        }
      }
      __int16 v26 = v37[1];
      if (a3 == -65570)
      {
        uint64_t v27 = v26[2];
        if (v27 && !nw_path_parameters_get_logging_disabled(*(void *)(v27 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          __int16 v28 = (id)glistenerLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            uint64_t v29 = nw_listener_get_id_string(v37[1]);
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v29;
            _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] advertising denied by policy", buf, 0x16u);
          }
        }
      }
      else
      {
        nw_listener_set_state_on_queue(v26, 3, dns_error);
      }

      nw_endpoint_t bonjour_service = 0;
    }
    else
    {
      nw_endpoint_t bonjour_service = 0;
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (!WeakRetained)
            {
              nw_endpoint_t bonjour_service = nw_endpoint_create_bonjour_service(a4, a5, a6);
              if ((a2 & 2) != 0)
              {
                uint64_t v51 = 0;
                nw_connection_t v52 = &v51;
                uint64_t v53 = 0x3032000000;
                uint64_t v54 = __Block_byref_object_copy__18063;
                BOOL v55 = __Block_byref_object_dispose__18064;
                id v56 = 0;
                uint64_t v45 = 0;
                uint64_t v46 = &v45;
                uint64_t v47 = 0x3032000000;
                __int16 v48 = __Block_byref_object_copy__5;
                uint64_t v49 = __Block_byref_object_dispose__6;
                id v50 = 0;
                v43[0] = 0;
                v43[1] = v43;
                v43[2] = 0x3032000000;
                v43[3] = __Block_byref_object_copy__18063;
                v43[4] = __Block_byref_object_dispose__18064;
                id v44 = 0;
                __int16 v31 = (os_unfair_lock_s *)v37[1];
                *(void *)long long buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = __65___NWAdvertiser_handleBonjourUpdateFlags_error_name_type_domain___block_invoke;
                *(void *)__int16 v58 = &unk_1E523CE68;
                *(void *)&v58[8] = v37;
                nw_endpoint_t bonjour_service = bonjour_service;
                *(void *)&v58[16] = bonjour_service;
                *(void *)&v58[24] = &v51;
                BOOL v59 = (const char *)&v45;
                uint64_t v60 = v43;
                os_log_type_t v32 = (void (**)(void))_Block_copy(buf);
                v31 += 2;
                os_unfair_lock_lock(v31);
                v32[2](v32);
                os_unfair_lock_unlock(v31);

                if (bonjour_service)
                {
                  if (v46[5])
                  {
                    BOOL v33 = (void *)v52[5];
                    if (v33)
                    {
                      dispatch_qos_class_t v34 = *((_DWORD *)v37[1] + 18);
                      block[0] = MEMORY[0x1E4F143A8];
                      block[1] = 3221225472;
                      block[2] = __65___NWAdvertiser_handleBonjourUpdateFlags_error_name_type_domain___block_invoke_2;
                      block[3] = &unk_1E523CE90;
                      id v40 = v43;
                      __int16 v41 = &v45;
                      __int16 v39 = bonjour_service;
                      char v42 = 1;
                      int v35 = v33;
                      dispatch_block_t v36 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v34, 0, block);
                      dispatch_async(v35, v36);
                    }
                  }
                }

                _Block_object_dispose(v43, 8);
                _Block_object_dispose(&v45, 8);

                _Block_object_dispose(&v51, 8);
              }
            }
          }
        }
      }
    }
  }
}

void sub_183773884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1837739D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183773A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id *nw_listener_reconcile_advertised_endpoints(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v9 = a1;
  id v10 = a2;
  uint64_t v11 = a3;
  id v12 = a4;
  long long v13 = a5;
  uint64_t v14 = v9[2];
  if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    BOOL v15 = (id)glistenerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = v9;
      os_log_type_t v17 = v16 + 42;

      *(_DWORD *)long long buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_listener_reconcile_advertised_endpoints";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v17;
      *(_WORD *)&unsigned char buf[22] = 2112;
      char v63 = (uint64_t (*)(uint64_t, uint64_t))v11;
      LOWORD(v64) = 2112;
      *(void *)((char *)&v64 + 2) = v12;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Reconciling advertised endpoints %@ for path %@", buf, 0x2Au);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  char v63 = __Block_byref_object_copy__18063;
  *(void *)&long long v64 = __Block_byref_object_dispose__18064;
  *((void *)&v64 + 1) = 0;
  uint64_t v55 = 0;
  id v56 = &v55;
  uint64_t v57 = 0x3032000000;
  __int16 v58 = __Block_byref_object_copy__18063;
  BOOL v59 = __Block_byref_object_dispose__18064;
  id v60 = 0;
  uint64_t v51 = 0;
  nw_connection_t v52 = &v51;
  uint64_t v53 = 0x2020000000;
  uint64_t v54 = 0;
  if (v11)
  {
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 3221225472;
    v43[2] = ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke;
    v43[3] = &unk_1E5249768;
    __int16 v48 = &v55;
    id v44 = v10;
    id v45 = v12;
    uint64_t v46 = v9;
    uint64_t v47 = v13;
    uint64_t v49 = buf;
    id v50 = &v51;
    nw_array_apply(v11, (uint64_t)v43);
  }
  if (!v13 || nw_advertise_descriptor_get_type(v13[2]) == 2)
  {
    nw_listener_set_device_id(v9, v52[3]);
    nw_listener_set_authorized_keys(v9, (void *)v56[5]);
  }
  if (v10)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v18 = v10;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v39 objects:v61 count:16];
    if (v19)
    {
      uint64_t v20 = *(void *)v40;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v40 != v20) {
            objc_enumerationMutation(v18);
          }
          uint64_t v22 = *(void *)(*((void *)&v39 + 1) + 8 * i);
          if (([*(id *)(*(void *)&buf[8] + 40) containsObject:v22] & 1) == 0) {
            -[_NWAdvertiser stop](v22);
          }
        }
        uint64_t v19 = [v18 countByEnumeratingWithState:&v39 objects:v61 count:16];
      }
      while (v19);
    }
  }
  if (!v12) {
    goto LABEL_36;
  }
  uint64_t v23 = *(void **)(*(void *)&buf[8] + 40);
  if (v23)
  {
    if ([v23 count]) {
      goto LABEL_36;
    }
  }
  __int16 v24 = (id *)v12;
  id v25 = v24[6];

  if (!v25 || (__int16 v26 = v25, v27 = v26[2], v26, v27 != 2))
  {
LABEL_35:

LABEL_36:
    __int16 v28 = (id *)*(id *)(*(void *)&buf[8] + 40);
    goto LABEL_37;
  }
  __int16 v28 = v24;
  uint64_t v29 = (atomic_uchar *)v28[9];

  if (!v29) {
    goto LABEL_34;
  }
  uint64_t v33 = 0;
  dispatch_qos_class_t v34 = &v33;
  uint64_t v35 = 0x3032000000;
  dispatch_block_t v36 = __Block_byref_object_copy__18063;
  __int16 v37 = __Block_byref_object_dispose__18064;
  id v38 = 0;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke_199;
  v32[3] = &unk_1E5248058;
  v32[4] = &v33;
  nw_array_apply(v29, (uint64_t)v32);
  uint64_t v30 = v34[5];
  if (v30)
  {
    nw_listener_set_state_on_queue(v9, 3, (void *)v34[5]);
    __int16 v28 = (id *)*(id *)(*(void *)&buf[8] + 40);
  }
  _Block_object_dispose(&v33, 8);

  if (!v30)
  {
LABEL_34:

    goto LABEL_35;
  }

LABEL_37:
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);

  _Block_object_dispose(buf, 8);
  return v28;
}

void sub_183773FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50)
{
  _Block_object_dispose(&a15, 8);

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);

  _Block_object_dispose((const void *)(v57 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = nw_endpoint_copy_public_keys(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8);
    id v7 = *(void **)(v6 + 40);
    if (v7)
    {
      uint64_t v8 = [v7 arrayByAddingObjectsFromArray:v5];
      uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }
    else
    {
      id v11 = v5;
      id v10 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v11;
    }
  }
  nw_endpoint_set_txt_record(v4, 0);
  id v12 = v4;
  if (nw_endpoint_get_type(v12) == nw_endpoint_type_bonjour_service)
  {
    bonjour_service_os_log_type_t domain = nw_endpoint_get_bonjour_service_domain(v12);
    bonjour_service_name = nw_endpoint_get_bonjour_service_name(v12);
    bonjour_service_os_log_type_t type = nw_endpoint_get_bonjour_service_type(v12);
    nw_endpoint_t bonjour_service = nw_advertise_descriptor_create_bonjour_service(bonjour_service_name, bonjour_service_type, bonjour_service_domain);
    os_log_type_t v17 = nw_endpoint_copy_txt_record(v12);
    nw_advertise_descriptor_set_txt_record_object(bonjour_service, v17);

    nw_advertise_descriptor_set_no_auto_rename(bonjour_service, 1);
    if (bonjour_service)
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      id v18 = *(id *)(a1 + 32);
      uint64_t v19 = [v18 countByEnumeratingWithState:&v82 objects:v94 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v83;
        while (2)
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v83 != v20) {
              objc_enumerationMutation(v18);
            }
            uint64_t v22 = *(void ***)(*((void *)&v82 + 1) + 8 * i);
            if (nw_advertise_descriptor_is_equal(bonjour_service, v22[2], 0))
            {
              __int16 v24 = v22;
              goto LABEL_58;
            }
          }
          uint64_t v19 = [v18 countByEnumeratingWithState:&v82 objects:v94 count:16];
          if (v19) {
            continue;
          }
          break;
        }
      }

      id v18 = (id)nw_path_copy_derived_parameters(*(void **)(a1 + 40));
      uint64_t v23 = -[_NWAdvertiser initFor:descriptor:parent:parameters:]((id *)[_NWAdvertiser alloc], *(void **)(a1 + 48), bonjour_service, *(void **)(a1 + 56), v18);
      if (v23)
      {
        __int16 v24 = v23;
        if (![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count]) {
          goto LABEL_50;
        }
        id v25 = (nw_parameters_t *)*(id *)(a1 + 48);
        if (!nw_parameters_get_include_peer_to_peer(v25[2])
          || nw_parameters_get_multipath_service(v25[2]) == nw_multipath_service_disabled
          || (nw_parameters_t v26 = v25[33]) == 0)
        {

          goto LABEL_50;
        }
        BOOL v27 = nw_advertise_descriptor_get_type(v26) == 2;

        if (!v27)
        {
LABEL_50:
          uint64_t v46 = *(void *)(*(void *)(a1 + 48) + 16);
          if (v46 && !nw_path_parameters_get_logging_disabled(*(void *)(v46 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
            }
            uint64_t v47 = (id)glistenerLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
            {
              id_string = nw_listener_get_id_string(*(void **)(a1 + 48));
              *(_DWORD *)long long buf = 136446722;
              id v96 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
              __int16 v97 = 2082;
              id v98 = id_string;
              __int16 v99 = 2112;
              uint64_t v100 = (uint64_t)bonjour_service;
              _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Creating new advertiser for %@", buf, 0x20u);
            }
          }
          -[_NWAdvertiser start](v24);
LABEL_58:

          uint64_t v49 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
          if (v49)
          {
            [v49 arrayByAddingObject:v24];
          }
          else
          {
            __int16 v93 = v24;
            [MEMORY[0x1E4F1C978] arrayWithObjects:&v93 count:1];
          uint64_t v50 = };
          uint64_t v51 = *(void *)(*(void *)(a1 + 72) + 8);
          nw_connection_t v52 = *(void **)(v51 + 40);
          *(void *)(v51 + 40) = v50;

          if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)) {
            *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = nw_endpoint_get_device_id(v12);
          }
          goto LABEL_83;
        }
        uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 16);
        if (v28 && !nw_path_parameters_get_logging_disabled(*(void *)(v28 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          uint64_t v29 = (id)glistenerLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            uint64_t v30 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)long long buf = 136446466;
            id v96 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            __int16 v97 = 2082;
            id v98 = v30;
            _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Got new keys, starting advertising timer", buf, 0x16u);
          }
        }
        id v31 = *(id *)(a1 + 48);
        nw_context_assert_queue(*((void **)v31 + 3));
        uint64_t v32 = *((void *)v31 + 31);
        nw_listener_stop_advertise_timer_on_queue((NWConcrete_nw_listener *)v31);
        *(void *)char v88 = MEMORY[0x1E4F143A8];
        uint64_t v89 = 3221225472;
        long long v90 = ___ZL42nw_listener_start_advertise_timer_on_queueP22NWConcrete_nw_listener_block_invoke;
        __int16 v91 = &unk_1E524BAA8;
        uint64_t v33 = (char *)v31;
        __int16 v92 = v33;
        *((void *)v31 + 31) = nw_queue_context_create_source(0, 2, 3, 0, v88, 0);
        if (v32)
        {
LABEL_106:
          uint64_t v74 = *((void *)v31 + 31);
          dispatch_time_t v75 = dispatch_time(0x8000000000000000, 30000000000);
          nw_queue_set_timer_values(v74, v75, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          nw_queue_activate_source(*((void *)v31 + 31));
          uint64_t v76 = *((void *)v33 + 2);
          if (v76 && !nw_path_parameters_get_logging_disabled(*(void *)(v76 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
            }
            int v77 = (id)glistenerLogObj;
            if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 136446466;
              id v96 = "nw_listener_start_advertise_timer_on_queue";
              __int16 v97 = 2082;
              id v98 = v33 + 42;
              _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Started advertise listener timeout", buf, 0x16u);
            }
          }
          goto LABEL_50;
        }
        int v34 = (unsigned __int16)(*((_WORD *)v33 + 120))++ + 1;
        if ((v34 & 0x10000) == 0)
        {
LABEL_99:
          uint64_t v70 = *((void *)v33 + 2);
          if (v70 && !nw_path_parameters_get_logging_disabled(*(void *)(v70 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
            }
            os_log_type_t v71 = (id)glistenerLogObj;
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              __int16 v72 = nw_listener_get_id_string(v33);
              int v73 = *((unsigned __int16 *)v33 + 120);
              *(_DWORD *)long long buf = 136446722;
              id v96 = "nw_listener_start_advertise_timer_on_queue";
              __int16 v97 = 2082;
              id v98 = v72;
              __int16 v99 = 1024;
              LODWORD(v100) = v73;
              _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Incrementing AWDL usage to %d for timer", buf, 0x1Cu);
            }
          }
          goto LABEL_106;
        }
        uint64_t v35 = __nwlog_obj();
        dispatch_block_t v36 = (char *)*((unsigned __int16 *)v33 + 120);
        *(_DWORD *)long long buf = 136446978;
        id v96 = "nw_listener_start_advertise_timer_on_queue";
        __int16 v97 = 2082;
        id v98 = "listener->awdl_use_count";
        __int16 v99 = 2048;
        uint64_t v100 = 1;
        __int16 v101 = 2048;
        size_t v102 = v36;
        char v81 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v86 = 0;
        if (__nwlog_fault(v81, &type, &v86))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v37 = __nwlog_obj();
            os_log_type_t v79 = type;
            if (os_log_type_enabled(v37, type))
            {
              id v38 = (char *)*((unsigned __int16 *)v33 + 120);
              *(_DWORD *)long long buf = 136446978;
              id v96 = "nw_listener_start_advertise_timer_on_queue";
              __int16 v97 = 2082;
              id v98 = "listener->awdl_use_count";
              __int16 v99 = 2048;
              uint64_t v100 = 1;
              __int16 v101 = 2048;
              size_t v102 = v38;
              _os_log_impl(&dword_1830D4000, v37, v79, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
            }
          }
          else
          {
            if (v86)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              id v80 = __nwlog_obj();
              os_log_type_t v78 = type;
              BOOL v64 = os_log_type_enabled(v80, type);
              if (backtrace_string)
              {
                if (v64)
                {
                  uint64_t v65 = (char *)*((unsigned __int16 *)v33 + 120);
                  *(_DWORD *)long long buf = 136447234;
                  id v96 = "nw_listener_start_advertise_timer_on_queue";
                  __int16 v97 = 2082;
                  id v98 = "listener->awdl_use_count";
                  __int16 v99 = 2048;
                  uint64_t v100 = 1;
                  __int16 v101 = 2048;
                  size_t v102 = v65;
                  __int16 v103 = 2082;
                  uint64_t v104 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v80, v78, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }

                free(backtrace_string);
                goto LABEL_96;
              }
              if (v64)
              {
                BOOL v69 = (char *)*((unsigned __int16 *)v33 + 120);
                *(_DWORD *)long long buf = 136446978;
                id v96 = "nw_listener_start_advertise_timer_on_queue";
                __int16 v97 = 2082;
                id v98 = "listener->awdl_use_count";
                __int16 v99 = 2048;
                uint64_t v100 = 1;
                __int16 v101 = 2048;
                size_t v102 = v69;
                _os_log_impl(&dword_1830D4000, v80, v78, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
              }
            }
            else
            {
              os_log_type_t v66 = __nwlog_obj();
              os_log_type_t v67 = type;
              id v80 = v66;
              if (os_log_type_enabled(v66, type))
              {
                __int16 v68 = (char *)*((unsigned __int16 *)v33 + 120);
                *(_DWORD *)long long buf = 136446978;
                id v96 = "nw_listener_start_advertise_timer_on_queue";
                __int16 v97 = 2082;
                id v98 = "listener->awdl_use_count";
                __int16 v99 = 2048;
                uint64_t v100 = 1;
                __int16 v101 = 2048;
                size_t v102 = v68;
                _os_log_impl(&dword_1830D4000, v80, v67, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
              }
            }
          }
        }
LABEL_96:
        if (v81) {
          free(v81);
        }
        *((_WORD *)v33 + 120) = -1;
        goto LABEL_99;
      }
      uint64_t v39 = *(void *)(*(void *)(a1 + 48) + 16);
      if (!v39 || nw_path_parameters_get_logging_disabled(*(void *)(v39 + 104)))
      {
LABEL_82:

        __int16 v24 = 0;
LABEL_83:

        goto LABEL_84;
      }
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      id v40 = (id)glistenerLogObj;
      long long v41 = nw_listener_get_id_string(*(void **)(a1 + 48));
      *(_DWORD *)long long buf = 136446722;
      id v96 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
      __int16 v97 = 2082;
      id v98 = v41;
      __int16 v99 = 2112;
      uint64_t v100 = (uint64_t)bonjour_service;
      long long v42 = (char *)_os_log_send_and_compose_impl();

      v88[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v42, v88, &type))
      {
        if (v88[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          __int16 v43 = (id)glistenerLogObj;
          os_log_type_t v44 = v88[0];
          if (os_log_type_enabled(v43, v88[0]))
          {
            id v45 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)long long buf = 136446722;
            id v96 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            __int16 v97 = 2082;
            id v98 = v45;
            __int16 v99 = 2112;
            uint64_t v100 = (uint64_t)bonjour_service;
            _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s [%{public}s] failed to create advertiser for %@", buf, 0x20u);
          }
        }
        else if (type)
        {
          uint64_t v53 = __nw_create_backtrace_string();
          if (v53)
          {
            uint64_t v54 = (char *)v53;
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
            }
            uint64_t v55 = (id)glistenerLogObj;
            os_log_type_t v56 = v88[0];
            if (os_log_type_enabled(v55, v88[0]))
            {
              uint64_t v57 = nw_listener_get_id_string(*(void **)(a1 + 48));
              *(_DWORD *)long long buf = 136446978;
              id v96 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
              __int16 v97 = 2082;
              id v98 = v57;
              __int16 v99 = 2112;
              uint64_t v100 = (uint64_t)bonjour_service;
              __int16 v101 = 2082;
              size_t v102 = v54;
              _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s [%{public}s] failed to create advertiser for %@, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v54);
            goto LABEL_80;
          }
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          __int16 v43 = (id)glistenerLogObj;
          os_log_type_t v60 = v88[0];
          if (os_log_type_enabled(v43, v88[0]))
          {
            uint64_t v61 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)long long buf = 136446722;
            id v96 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            __int16 v97 = 2082;
            id v98 = v61;
            __int16 v99 = 2112;
            uint64_t v100 = (uint64_t)bonjour_service;
            _os_log_impl(&dword_1830D4000, v43, v60, "%{public}s [%{public}s] failed to create advertiser for %@, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          __int16 v43 = (id)glistenerLogObj;
          os_log_type_t v58 = v88[0];
          if (os_log_type_enabled(v43, v88[0]))
          {
            BOOL v59 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)long long buf = 136446722;
            id v96 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            __int16 v97 = 2082;
            id v98 = v59;
            __int16 v99 = 2112;
            uint64_t v100 = (uint64_t)bonjour_service;
            _os_log_impl(&dword_1830D4000, v43, v58, "%{public}s [%{public}s] failed to create advertiser for %@, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_80:
      if (v42) {
        free(v42);
      }
      goto LABEL_82;
    }
  }
  else
  {
  }
LABEL_84:

  return 1;
}

void sub_183774E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_device_id(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_device_id_block_invoke;
    aBlock[3] = &unk_1E52491B0;
    uint64_t v16 = a2;
    BOOL v15 = v3;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 2);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v20 = "nw_listener_set_device_id";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v20 = "nw_listener_set_device_id";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183775244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_authorized_keys(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_authorized_keys_block_invoke;
    aBlock[3] = &unk_1E524B9A0;
    id v16 = v4;
    char v17 = v3;
    uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v21 = "nw_listener_set_authorized_keys";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v19 = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, &v19, &v18))
  {
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = v19;
      BOOL v13 = os_log_type_enabled(v9, v19);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v21 = "nw_listener_set_authorized_keys";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void sub_1837755A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_183775A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Block_object_dispose((const void *)(v35 - 256), 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke_199(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nw_path_flow_copy_error(v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) == 0;
  return v8;
}

void __nw_listener_set_authorized_keys_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
  }
  else
  {
    int v3 = gLogFDOverride;

    if (v3 == -1) {
      goto LABEL_34;
    }
  }
  uint64_t v4 = [*(id *)(a1 + 32) count];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 16);
  if (v4)
  {
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      uint64_t v6 = (id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 40));
        *(_DWORD *)long long buf = 136446466;
        id v25 = "nw_listener_set_authorized_keys_block_invoke";
        __int16 v26 = 2082;
        BOOL v27 = id_string;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Resetting authorized keys", buf, 0x16u);
      }
    }
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    BOOL v8 = *(id *)(a1 + 32);
    uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v30 count:16];
    if (v9)
    {
      uint64_t v11 = *(void *)v21;
      *(void *)&long long v10 = 136446722;
      long long v19 = v10;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 16);
          if (v13)
          {
            os_log_type_t v14 = *(void **)(*((void *)&v20 + 1) + 8 * v12);
            if (!nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
            {
              if (__nwlog_listener_log::onceToken != -1) {
                dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
              }
              BOOL v15 = (id)glistenerLogObj;
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                id v16 = nw_listener_get_id_string(*(void **)(a1 + 40));
                uint64_t v17 = [v14 hash];
                *(_DWORD *)long long buf = v19;
                id v25 = "nw_listener_set_authorized_keys_block_invoke";
                __int16 v26 = 2082;
                BOOL v27 = v16;
                __int16 v28 = 2048;
                uint64_t v29 = v17;
                _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Authorized key #0x%lx", buf, 0x20u);
              }
            }
          }
          ++v12;
        }
        while (v9 != v12);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v30 count:16];
      }
      while (v9);
    }
  }
  else
  {
    if (!v5 || nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104))) {
      goto LABEL_34;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    BOOL v8 = (id)glistenerLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      char v18 = nw_listener_get_id_string(*(void **)(a1 + 40));
      *(_DWORD *)long long buf = 136446466;
      id v25 = "nw_listener_set_authorized_keys_block_invoke";
      __int16 v26 = 2082;
      BOOL v27 = v18;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] No keys provided", buf, 0x16u);
    }
  }

LABEL_34:
  if (objc_msgSend(*(id *)(a1 + 32), "count", v19, (void)v20)) {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 216), *(id *)(a1 + 32));
  }
}

void sub_183775F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_device_id_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const char **)(a1 + 40);
  if (v2)
  {
    if (*(void *)(*(void *)(a1 + 32) + 232))
    {
      free(*(void **)(*(void *)(a1 + 32) + 232));
      *(void *)(*(void *)(a1 + 32) + 232) = 0;
      uint64_t v2 = *(const char **)(a1 + 40);
      if (!v2)
      {
        uint64_t v4 = __nwlog_obj();
        os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
        uint64_t v5 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v5)) {
          goto LABEL_11;
        }
        free(v5);
        uint64_t v2 = 0;
      }
    }
    int v3 = strdup(v2);
    if (v3)
    {
LABEL_5:
      *(void *)(*(void *)(a1 + 32) + 232) = v3;
      return;
    }
    uint64_t v6 = __nwlog_obj();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    id v7 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v7))
    {
      free(v7);
      goto LABEL_5;
    }
LABEL_11:
    __break(1u);
  }
}

void nw_listener_stop_advertise_timer_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  if (*((void *)v1 + 31))
  {
    uint64_t v2 = *((void *)v1 + 2);
    if (v2 && !nw_path_parameters_get_logging_disabled(*(void *)(v2 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      int v3 = (id)glistenerLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = v1;
        uint64_t v5 = (char *)v4 + 42;

        int v6 = 136446466;
        id v7 = "nw_listener_stop_advertise_timer_on_queue";
        __int16 v8 = 2082;
        uint64_t v9 = v5;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Stopping listener timeout", (uint8_t *)&v6, 0x16u);
      }
    }
    nw_queue_cancel_source(*((void *)v1 + 31));
    *((void *)v1 + 31) = 0;
  }
}

void sub_1837762A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_listener_start_advertise_timer_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v2 && !nw_path_parameters_get_logging_disabled(*(void *)(v2 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    int v3 = (id)glistenerLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v5 = 136446466;
      int v6 = "nw_listener_start_advertise_timer_on_queue_block_invoke";
      __int16 v7 = 2082;
      __int16 v8 = id_string;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Advertise listener timeout", (uint8_t *)&v5, 0x16u);
    }
  }
  nw_listener_adjust_awdl_usage_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), 0);
  *(void *)(*(void *)(a1 + 32) + 248) = 0;
}

void nw_listener_adjust_awdl_usage_on_queue(NWConcrete_nw_listener *a1, int a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  nw_context_assert_queue(*((void **)v3 + 3));
  int v4 = *((unsigned __int16 *)v3 + 120);
  if (a2)
  {
    *((_WORD *)v3 + 120) = v4 + 1;
    if (((v4 + 1) & 0x10000) == 0)
    {
LABEL_11:
      uint64_t v11 = *((void *)v3 + 2);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        uint64_t v12 = (id)glistenerLogObj;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
          goto LABEL_33;
        }
        uint64_t v13 = v3;

        int v14 = *((unsigned __int16 *)v3 + 120);
        *(_DWORD *)long long buf = 136446722;
        uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
        __int16 v50 = 2082;
        uint64_t v51 = (char *)v13 + 42;
        __int16 v52 = 1024;
        LODWORD(v53) = v14;
        BOOL v15 = "%{public}s [%{public}s] Incrementing AWDL usage to %d";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, v15, buf, 0x1Cu);
LABEL_33:

        goto LABEL_34;
      }
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    uint64_t v6 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)long long buf = 136446978;
    uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
    __int16 v50 = 2082;
    uint64_t v51 = "listener->awdl_use_count";
    __int16 v52 = 2048;
    uint64_t v53 = 1;
    __int16 v54 = 2048;
    uint64_t v55 = v6;
    __int16 v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v7, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          uint64_t v10 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1;
          __int16 v54 = 2048;
          uint64_t v55 = v10;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v8 = (id)gLogObj;
        os_log_type_t v33 = type;
        BOOL v34 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v34)
          {
            uint64_t v35 = *((unsigned __int16 *)v3 + 120);
            *(_DWORD *)long long buf = 136447234;
            uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
            __int16 v50 = 2082;
            uint64_t v51 = "listener->awdl_use_count";
            __int16 v52 = 2048;
            uint64_t v53 = 1;
            __int16 v54 = 2048;
            uint64_t v55 = v35;
            __int16 v56 = 2082;
            uint64_t v57 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v33, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(backtrace_string);
          if (!v7) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        if (v34)
        {
          uint64_t v44 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1;
          __int16 v54 = 2048;
          uint64_t v55 = v44;
          _os_log_impl(&dword_1830D4000, v8, v33, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v8 = (id)gLogObj;
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v8, type))
        {
          uint64_t v41 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1;
          __int16 v54 = 2048;
          uint64_t v55 = v41;
          _os_log_impl(&dword_1830D4000, v8, v40, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }
    }
    if (!v7)
    {
LABEL_10:
      *((_WORD *)v3 + 120) = -1;
      goto LABEL_11;
    }
LABEL_9:
    free(v7);
    goto LABEL_10;
  }
  *((_WORD *)v3 + 120) = v4 - 1;
  if ((v4 - 1) >= 0x10000)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    uint64_t v17 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)long long buf = 136446978;
    uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
    __int16 v50 = 2082;
    uint64_t v51 = "listener->awdl_use_count";
    __int16 v52 = 2048;
    uint64_t v53 = 1;
    __int16 v54 = 2048;
    uint64_t v55 = v17;
    char v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v18, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          uint64_t v21 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1;
          __int16 v54 = 2048;
          uint64_t v55 = v21;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v46)
      {
        dispatch_block_t v36 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v19 = (id)gLogObj;
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v19, type);
        if (v36)
        {
          if (v38)
          {
            uint64_t v39 = *((unsigned __int16 *)v3 + 120);
            *(_DWORD *)long long buf = 136447234;
            uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
            __int16 v50 = 2082;
            uint64_t v51 = "listener->awdl_use_count";
            __int16 v52 = 2048;
            uint64_t v53 = 1;
            __int16 v54 = 2048;
            uint64_t v55 = v39;
            __int16 v56 = 2082;
            uint64_t v57 = v36;
            _os_log_impl(&dword_1830D4000, v19, v37, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v36);
          if (!v18) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        if (v38)
        {
          uint64_t v45 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1;
          __int16 v54 = 2048;
          uint64_t v55 = v45;
          _os_log_impl(&dword_1830D4000, v19, v37, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v19 = (id)gLogObj;
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v19, type))
        {
          uint64_t v43 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1;
          __int16 v54 = 2048;
          uint64_t v55 = v43;
          _os_log_impl(&dword_1830D4000, v19, v42, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }
    }
    if (!v18)
    {
LABEL_25:
      *((_WORD *)v3 + 120) = 0;
      goto LABEL_26;
    }
LABEL_24:
    free(v18);
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v22 = *((void *)v3 + 2);
  if (v22 && !nw_path_parameters_get_logging_disabled(*(void *)(v22 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    uint64_t v12 = (id)glistenerLogObj;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
      goto LABEL_33;
    }
    long long v23 = v3;

    int v24 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
    __int16 v50 = 2082;
    uint64_t v51 = (char *)v23 + 42;
    __int16 v52 = 1024;
    LODWORD(v53) = v24;
    BOOL v15 = "%{public}s [%{public}s] Decrementing AWDL usage to %d";
    goto LABEL_32;
  }
LABEL_34:
  if (!v4 && *((_WORD *)v3 + 120))
  {
    uint64_t v25 = *((void *)v3 + 2);
    if (v25 && !nw_path_parameters_get_logging_disabled(*(void *)(v25 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      __int16 v26 = (id)glistenerLogObj;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        BOOL v27 = v3;

        *(_DWORD *)long long buf = 136446466;
        uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
        __int16 v50 = 2082;
        uint64_t v51 = (char *)v27 + 42;
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Start advertising over AWDL", buf, 0x16u);
      }
    }
    __int16 v28 = v3;
    nw_context_assert_queue(*((void **)v3 + 3));
    if (*((_DWORD *)v28 + 32) != 2 || (*((unsigned char *)v28 + 302) & 1) != 0) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v4 && !*((_WORD *)v3 + 120))
  {
    uint64_t v29 = *((void *)v3 + 2);
    if (v29 && !nw_path_parameters_get_logging_disabled(*(void *)(v29 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      uint64_t v30 = (id)glistenerLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = v3;

        *(_DWORD *)long long buf = 136446466;
        uint64_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
        __int16 v50 = 2082;
        uint64_t v51 = (char *)v31 + 42;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Stop advertising over AWDL", buf, 0x16u);
      }
    }
    __int16 v28 = v3;
    nw_context_assert_queue(*((void **)v3 + 3));
    if (*((_DWORD *)v28 + 32) != 2 || (*((unsigned char *)v28 + 302) & 1) != 0) {
      goto LABEL_58;
    }
LABEL_57:
    nw_listener_stop_advertising_on_queue(v28);
    nw_listener_start_advertising_on_queue(v28);
LABEL_58:
  }
}

void sub_183776E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183777090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183777180(_Unwind_Exception *exception_object)
{
}

void ___ZL37nw_listener_stop_advertising_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 272);
  *(void *)(v1 + 272) = 0;
}

void nw_listener_teardown_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  uint64_t v2 = v1;
  nw_context_assert_queue(*((void **)v1 + 3));
  int v3 = (void *)*((void *)v2 + 18);
  if (v3)
  {
    int v4 = v3;
    id v5 = (void *)*((void *)v2 + 18);
    *((void *)v2 + 18) = 0;

    uint64_t v13 = MEMORY[0x1E4F143A8];
    uint64_t v14 = 3221225472;
    BOOL v15 = ___ZL39nw_listener_cancel_all_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke;
    id v16 = &unk_1E524AE18;
    uint64_t v17 = v2;
    nw_array_apply(v4, (uint64_t)&v13);
  }
  uint64_t v6 = v2;
  nw_context_assert_queue(*((void **)v1 + 3));
  __int16 v7 = (void *)*((void *)v6 + 20);
  if (v7)
  {
    __int16 v8 = v7;
    os_log_type_t v9 = (void *)*((void *)v6 + 20);
    *((void *)v6 + 20) = 0;

    uint64_t v13 = MEMORY[0x1E4F143A8];
    uint64_t v14 = 3221225472;
    BOOL v15 = ___ZL49nw_listener_cancel_all_proxy_connections_on_queueP22NWConcrete_nw_listener_block_invoke;
    id v16 = &unk_1E524AE18;
    uint64_t v17 = v6;
    nw_array_apply(v8, (uint64_t)&v13);
  }
  nw_listener_stop_advertising_on_queue(v6);
  uint64_t v10 = (void *)*((void *)v6 + 21);
  if (v10)
  {
    nw_path_evaluator_cancel(v10);
    uint64_t v11 = (void *)*((void *)v6 + 21);
    *((void *)v6 + 21) = 0;
  }
  uint64_t v12 = (void *)*((void *)v6 + 19);
  *((void *)v6 + 19) = 0;

  nw_listener_stop_advertise_timer_on_queue(v6);
}

void sub_18377733C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL39nw_listener_cancel_all_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    uint64_t v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      uint64_t v10 = "nw_listener_cancel_all_inboxes_on_queue_block_invoke";
      __int16 v11 = 2082;
      uint64_t v12 = id_string;
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling all inboxes: %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
  nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1;
}

void sub_183777498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL49nw_listener_cancel_all_proxy_connections_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    uint64_t v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      uint64_t v10 = "nw_listener_cancel_all_proxy_connections_on_queue_block_invoke";
      __int16 v11 = 2082;
      uint64_t v12 = id_string;
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling proxy connection: %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
  nw_connection_cancel(v4);

  return 1;
}

void sub_1837775EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_cancel_inbox_on_queue(NWConcrete_nw_listener *a1, nw_listener_inbox *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  int v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if ([(nw_listener_inbox *)v4 cancel])
  {
    ++*((_DWORD *)v3 + 74);
    uint64_t v5 = *((void *)v3 + 2);
    if (v5)
    {
      if (!nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        uint64_t v6 = (id)glistenerLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          __int16 v7 = v3;
          __int16 v8 = (char *)v7 + 42;

          int v9 = *((_DWORD *)v3 + 74);
          int v10 = 136446978;
          __int16 v11 = "nw_listener_cancel_inbox_on_queue";
          __int16 v12 = 2082;
          __int16 v13 = v8;
          __int16 v14 = 2114;
          uint64_t v15 = v4;
          __int16 v16 = 1024;
          int v17 = v9;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Adding deferral for %{public}@ -> %d", (uint8_t *)&v10, 0x26u);
        }
      }
    }
  }
}

void sub_183777768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL46nw_listener_copy_proxy_connection_for_endpointP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  nw_endpoint_t v6 = nw_connection_copy_endpoint(v5);
  int is_equal = nw_endpoint_is_equal(v6, *(void **)(a1 + 32), 0);
  if (is_equal) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }

  return is_equal ^ 1u;
}

void sub_183777804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_205(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = nw_protocol_options_copy(a2);
  nw_protocol_stack_append_application_protocol(v2, v3);
}

void sub_183777870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_206(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
  __int16 v7 = &qword_1E8F6A000;
  __int16 v8 = &qword_1E8F6A000;
  if (v6 && !nw_path_parameters_get_logging_disabled(*(void *)(v6 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    int v9 = (id)glistenerLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      if (a2 > 5) {
        __int16 v11 = "unknown";
      }
      else {
        __int16 v11 = off_1E523DF08[a2];
      }
      *(_DWORD *)long long buf = 136446978;
      __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      __int16 v55 = 2082;
      __int16 v56 = (char *)id_string;
      __int16 v57 = 2082;
      uint64_t v58 = (void *)v11;
      __int16 v59 = 2112;
      id v60 = v5;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Proxy connection moved to state %{public}s (%@)", buf, 0x2Au);
    }
  }
  if (a2 == 3)
  {
    uint64_t listener_protocol_on_nw_queue = nw_connection_get_listener_protocol_on_nw_queue(*(void **)(a1 + 40), *(void **)(a1 + 48), 1);
    if (listener_protocol_on_nw_queue)
    {
      __int16 v13 = -[nw_listener_inbox_protocol initWithProtocol:delegate:]([nw_listener_inbox_protocol alloc], listener_protocol_on_nw_queue, *(void **)(a1 + 32));
      uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;

      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 16);
      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
      {
        if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          int v17 = (id)glistenerLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            uint64_t v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
            long long v19 = *(void **)(listener_protocol_on_nw_queue + 16);
            *(_DWORD *)long long buf = 136446722;
            __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
            __int16 v55 = 2082;
            __int16 v56 = (char *)v18;
            __int16 v57 = 2082;
            uint64_t v58 = v19;
            _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Created inbox for proxy protocol %{public}s", buf, 0x20u);
          }
        }
        nw_array_append(*(void *)(*(void *)(a1 + 32) + 144), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        goto LABEL_77;
      }
      if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        BOOL v34 = (id)glistenerLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = nw_listener_get_id_string(*(void **)(a1 + 32));
          dispatch_block_t v36 = *(void **)(listener_protocol_on_nw_queue + 16);
          *(_DWORD *)long long buf = 136446722;
          __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v55 = 2082;
          __int16 v56 = (char *)v35;
          __int16 v57 = 2082;
          uint64_t v58 = v36;
          _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Failed to create inbox for %{public}s", buf, 0x20u);
        }
      }
      uint64_t v32 = *(id *)(a1 + 32);
      os_log_type_t v37 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 12);
      nw_listener_set_state_on_queue(v32, 3, v37);
    }
    else
    {
      uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v29 && !nw_path_parameters_get_logging_disabled(*(void *)(v29 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        uint64_t v30 = (id)glistenerLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          uint64_t v31 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)long long buf = 136446466;
          __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v55 = 2082;
          __int16 v56 = (char *)v31;
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener could not find protocol to join in connection", buf, 0x16u);
        }
      }
      uint64_t v32 = *(id *)(a1 + 32);
      os_log_type_t v33 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      nw_listener_set_state_on_queue(v32, 3, v33);
    }
LABEL_76:

    goto LABEL_77;
  }
  if ((a2 & 0xFFFFFFFE) != 4) {
    goto LABEL_77;
  }
  os_log_type_t v20 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v21 = *(void **)(a1 + 32);
  if (v20)
  {
    uint64_t v22 = v21;
    long long v23 = v20;
    if (v22)
    {
      nw_context_assert_queue(*((void **)v22 + 3));
      if (*((_DWORD *)v22 + 32) != 2 || (v22[302] & 1) != 0)
      {
        uint64_t v38 = *((void *)v22 + 2);
        if (v38 && !nw_path_parameters_get_logging_disabled(*(void *)(v38 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          uint64_t v39 = (id)glistenerLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v54 = "nw_listener_teardown_protocol_inbox";
            __int16 v55 = 2082;
            __int16 v56 = v22 + 42;
            _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener is not ready, ignoring teardown protocol inbox", buf, 0x16u);
          }
        }
      }
      else
      {
        uint64_t v24 = *((void *)v22 + 2);
        if (v24 && !nw_path_parameters_get_logging_disabled(*(void *)(v24 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          uint64_t v25 = (id)glistenerLogObj;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v54 = "nw_listener_teardown_protocol_inbox";
            __int16 v55 = 2082;
            __int16 v56 = v22 + 42;
            _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] tearing down protocol inbox", buf, 0x16u);
          }
        }
        uint64_t v26 = *((void *)v22 + 18);
        if (v26 && nw_array_remove_object(v26, (uint64_t)v23))
        {
          uint64_t v27 = *((void *)v22 + 2);
          if (v27 && !nw_path_parameters_get_logging_disabled(*(void *)(v27 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
            }
            __int16 v28 = (id)glistenerLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136446722;
              __int16 v54 = "nw_listener_teardown_protocol_inbox";
              __int16 v55 = 2082;
              __int16 v56 = v22 + 42;
              __int16 v57 = 2114;
              uint64_t v58 = v23;
              _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling protocol inbox: %{public}@", buf, 0x20u);
            }
          }
          nw_listener_resume_inbox((NWConcrete_nw_listener *)v22, v23);
          nw_listener_cancel_inbox_on_queue((NWConcrete_nw_listener *)v22, v23);
        }
      }
LABEL_67:

      uint64_t v21 = *(void **)(a1 + 32);
      goto LABEL_68;
    }
    os_log_type_t v42 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v54 = "nw_listener_teardown_protocol_inbox";
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();

    __int16 v7 = &qword_1E8F6A000;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v43, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v54 = "nw_listener_teardown_protocol_inbox";
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null listener", buf, 0xCu);
        }
      }
      else
      {
        if (v51)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v47 = __nwlog_obj();
          os_log_type_t v48 = type;
          BOOL v49 = os_log_type_enabled(v47, type);
          if (backtrace_string)
          {
            if (v49)
            {
              *(_DWORD *)long long buf = 136446466;
              __int16 v54 = "nw_listener_teardown_protocol_inbox";
              __int16 v55 = 2082;
              __int16 v56 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
            }

            __int16 v8 = &qword_1E8F6A000;
            __int16 v7 = &qword_1E8F6A000;
            free(backtrace_string);
          }
          else
          {
            if (v49)
            {
              *(_DWORD *)long long buf = 136446210;
              __int16 v54 = "nw_listener_teardown_protocol_inbox";
              _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null listener, no backtrace", buf, 0xCu);
            }

            __int16 v8 = &qword_1E8F6A000;
            __int16 v7 = &qword_1E8F6A000;
          }
          goto LABEL_94;
        }
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v54 = "nw_listener_teardown_protocol_inbox";
          _os_log_impl(&dword_1830D4000, v44, v50, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
        }
      }

      __int16 v7 = &qword_1E8F6A000;
    }
LABEL_94:
    if (v43) {
      free(v43);
    }
    goto LABEL_67;
  }
LABEL_68:
  if (a2 == 4)
  {
    nw_array_remove_object(v21[20], *(void *)(a1 + 40));
    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    uint64_t v21 = *(void **)(a1 + 32);
  }
  uint64_t v40 = v21[2];
  if (v40 && !nw_path_parameters_get_logging_disabled(*(void *)(v40 + 104)))
  {
    if (v7[417] != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    uint64_t v32 = (id)v8[418];
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      uint64_t v41 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136446466;
      __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      __int16 v55 = 2082;
      __int16 v56 = (char *)v41;
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Tore down inbox for proxy protocol", buf, 0x16u);
    }
    goto LABEL_76;
  }
LABEL_77:
}

void sub_183778270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_resume_inbox(NWConcrete_nw_listener *a1, nw_listener_inbox *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  int v4 = a2;
  [(nw_listener_inbox *)v4 resume];
  uint64_t v5 = *((void *)v3 + 2);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    uint64_t v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v7 = v3;
      __int16 v8 = (char *)v7 + 42;

      int v9 = 136446722;
      int v10 = "nw_listener_resume_inbox";
      __int16 v11 = 2082;
      __int16 v12 = v8;
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Resumed for %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
}

void sub_183778400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL66nw_listener_enumerate_multicast_parameters_for_descriptor_on_queueP22NWConcrete_nw_listenerPU33objcproto22OS_nw_group_descriptor8NSObjectU13block_pointerFbPU27objcproto16OS_nw_parametersS1_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  id v4 = *(id *)(*(void *)(a1 + 32) + 208);
  BOOL v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v4, 0, 0);

  nw_parameters_set_local_endpoint((nw_parameters_t)v5, v3);
  uint64_t v6 = nw_endpoint_copy_interface(v3);
  nw_interface_t v7 = nw_parameters_copy_required_interface((nw_parameters_t)v5);
  nw_interface_t v8 = v7;
  if (!v6) {
    goto LABEL_5;
  }
  if (!v7 || nw_interface_shallow_compare(v6, v7))
  {
    nw_parameters_require_interface((nw_parameters_t)v5, v6);
LABEL_5:
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();

    BOOL v5 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    __int16 v12 = (id)glistenerLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v14 = 136446978;
      uint64_t v15 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue_block_invoke";
      __int16 v16 = 2082;
      int v17 = id_string;
      __int16 v18 = 2112;
      long long v19 = v3;
      __int16 v20 = 2112;
      nw_interface_t v21 = v8;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] skipping multicast group %@, does not match interface %@ required by parameters", (uint8_t *)&v14, 0x2Au);
    }
  }
  uint64_t v9 = 1;
LABEL_6:

  return v9;
}

void sub_183778600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_listener_cancel_complete_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(void **)(v4 + 88);
  *(void *)(v4 + 88) = 0;

  uint64_t v6 = *(void *)(a1 + 32);
  nw_interface_t v7 = *(void **)(v6 + 96);
  *(void *)(v6 + 96) = 0;

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 112);
  *(void *)(v8 + 112) = 0;

  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 120);
  *(void *)(v10 + 120) = 0;

  uint64_t v12 = *(void *)(a1 + 32);
  __int16 v13 = *(void **)(v12 + 176);
  *(void *)(v12 + 176) = 0;
}

void sub_183778934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1837799E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v42 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_183779E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_listener_state_to_string(unsigned int a1)
{
  if (a1 > 4) {
    return "<unknown>";
  }
  else {
    return off_1E523D0E0[a1];
  }
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (v1)
  {
    uint64_t v2 = [NWConcrete_nw_listener alloc];
    int v3 = v1;
    BOOL v4 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v3, 0, 0);

    BOOL v5 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:](v2, (void *)v4, 0);
    goto LABEL_3;
  }
  nw_interface_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_listener_create";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_listener_create";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_listener_create";
          __int16 v19 = 2082;
          __int16 v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_listener_create";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_listener_create";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  BOOL v5 = 0;
LABEL_3:

  return (nw_listener_t)v5;
}

void sub_18377A150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_listener_create_with_launchd_key(void *a1, const char *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  nw_allow_use_of_dispatch_internal();
  if (!v3)
  {
    nw_interface_t v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v25 = "nw_listener_create_with_launchd_key";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v22)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v25 = "nw_listener_create_with_launchd_key";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
LABEL_40:
    if (v8) {
      free(v8);
    }
    nw_listener_t v4 = 0;
    goto LABEL_5;
  }
  if (!a2)
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v25 = "nw_listener_create_with_launchd_key";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null key", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v22)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null key, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v25 = "nw_listener_create_with_launchd_key";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
    goto LABEL_40;
  }
  nw_listener_t v4 = nw_listener_create(v3);
  BOOL v5 = strdup(a2);
  if (v5)
  {
LABEL_4:
    v4[7].Class isa = (Class)v5;
LABEL_5:

    return (BOOL)v4;
  }
  BOOL v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446210;
  uint64_t v25 = "strict_strdup";
  os_log_type_t v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void sub_18377A6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_listener_create_multicast(void *a1, void *a2, const char *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  nw_allow_use_of_dispatch_internal();
  if (!v5)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v33 = "nw_listener_create_multicast";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v17, &type, &v30)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v33 = "nw_listener_create_multicast";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v17) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      if (v24)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_47;
  }
  if (!v6)
  {
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v33 = "nw_listener_create_multicast";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v17, &type, &v30)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v30)
    {
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v18, type);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v33 = "nw_listener_create_multicast";
          __int16 v34 = 2082;
          uint64_t v35 = v25;
          _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
LABEL_48:
        if (!v17)
        {
LABEL_50:
          BOOL v13 = 0;
          goto LABEL_14;
        }
LABEL_49:
        free(v17);
        goto LABEL_50;
      }
      if (v27)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (a3) {
    nw_interface_t v7 = a3;
  }
  else {
    nw_interface_t v7 = "0";
  }
  id v8 = nw_listener_copy_parameters_with_port(v6, v7, 0);
  uint64_t v9 = v8;
  if (v8)
  {
    os_log_type_t v10 = (unsigned __int8 *)v8;
    int v11 = v10[92];

    if (v11 != 2)
    {
      os_log_type_t v14 = nw_group_descriptor_copy(v5);
      BOOL v13 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]([NWConcrete_nw_listener alloc], v10, v14);

      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v33 = "nw_listener_create_multicast";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Cannot create multicast listener with stream mode parameters", buf, 0xCu);
    }
  }
  BOOL v13 = 0;
LABEL_13:

LABEL_14:
  return v13;
}

void sub_18377AC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_listener_t nw_listener_create_with_connection(nw_connection_t connection, nw_parameters_t parameters)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  nw_listener_t v4 = connection;
  id v5 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (!v4)
  {
    uint64_t v25 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v44 = "nw_listener_create_with_connection";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v26, &type, &v41)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v27 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v44 = "nw_listener_create_with_connection";
          __int16 v45 = 2082;
          char v46 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v26) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }
      if (v33)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v27 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_65;
  }
  if (!v5)
  {
    os_log_type_t v29 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v44 = "nw_listener_create_with_connection";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v26, &type, &v41)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v27 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v41)
    {
      __int16 v34 = (char *)__nw_create_backtrace_string();
      BOOL v27 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v44 = "nw_listener_create_with_connection";
          __int16 v45 = 2082;
          char v46 = v34;
          _os_log_impl(&dword_1830D4000, v27, v35, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
LABEL_66:
        if (!v26)
        {
LABEL_68:
          uint64_t v9 = 0;
          goto LABEL_32;
        }
LABEL_67:
        free(v26);
        goto LABEL_68;
      }
      if (v36)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v27, v35, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v27 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v27, v38, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_65:

    goto LABEL_66;
  }
  id v6 = [NWConcrete_nw_listener alloc];
  nw_interface_t v7 = v5;
  BOOL v8 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v7, 0, 0);

  uint64_t v9 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:](v6, (void *)v8, 0);
  if (v9)
  {
    objc_storeStrong((id *)&v9[6].isa, connection);
    os_log_type_t v10 = v7;
    id v11 = *((id *)v10[13].isa + 17);

    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    v39[2] = __nw_listener_create_with_connection_block_invoke;
    v39[3] = &unk_1E524BAA8;
    os_log_type_t v12 = v4;
    uint64_t v40 = v12;
    nw_queue_context_async(v11, v39);

    Class isa = v9[2].isa;
    if (isa && !nw_path_parameters_get_logging_disabled(*((void *)isa + 13)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      os_log_type_t v14 = (id)glistenerLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446722;
        uint64_t v44 = "nw_listener_create_with_connection";
        __int16 v45 = 2082;
        char v46 = (char *)&v9[5].isa + 2;
        __int16 v47 = 2114;
        os_log_type_t v48 = v12;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] created from connection: %{public}@", buf, 0x20u);
      }
    }
    char v15 = v9;

    goto LABEL_31;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  uint64_t v44 = "nw_listener_create_with_connection";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (__nwlog_fault(v17, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (id)gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s [nw_listener initWithParameters:] failed", buf, 0xCu);
      }
    }
    else if (v41)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (id)gLogObj;
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v44 = "nw_listener_create_with_connection";
          __int16 v45 = 2082;
          char v46 = v20;
          _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s [nw_listener initWithParameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        if (!v17) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      if (v22)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s [nw_listener initWithParameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (id)gLogObj;
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s [nw_listener initWithParameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v17) {
LABEL_30:
  }
    free(v17);
LABEL_31:

LABEL_32:
  return v9;
}

void sub_18377B59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_create_with_connection_block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void **)*(id *)(a1 + 32);
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
            __int16 v22 = 2082;
            os_log_type_t v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v16)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_39:
    if (v11) {
      free(v11);
    }
    goto LABEL_14;
  }
  nw_context_assert_queue(v1[3]);
  int v3 = v2[18];
  if (v3)
  {
    nw_listener_t v4 = nw_endpoint_handler_copy_connected_flow_handler(v3);
    if (!v4)
    {
      if (!nw_endpoint_handler_has_connected_flow(v2[18]))
      {
        nw_interface_t v7 = v2[2];
        if (v7 && !nw_path_parameters_get_logging_disabled(v7[13]))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v8 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            int v9 = *((_DWORD *)v2 + 112);
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
            __int16 v22 = 1024;
            LODWORD(v23) = v9;
            _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no available handler", buf, 0x12u);
          }
        }
        nw_listener_t v4 = 0;
        goto LABEL_13;
      }
      nw_listener_t v4 = v2[18];
    }
    nw_endpoint_flow_pre_attach_protocols(v4, 0);
LABEL_13:

    goto LABEL_14;
  }
  id v5 = v2[2];
  if (v5 && !nw_path_parameters_get_logging_disabled(v5[13]))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    nw_listener_t v4 = (NWConcrete_nw_endpoint_handler *)(id)gconnectionLogObj;
    if (os_log_type_enabled(&v4->super, OS_LOG_TYPE_ERROR))
    {
      int v6 = *((_DWORD *)v2 + 112);
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
      __int16 v22 = 1024;
      LODWORD(v23) = v6;
      _os_log_impl(&dword_1830D4000, &v4->super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no parent handler", buf, 0x12u);
    }
    goto LABEL_13;
  }
LABEL_14:
}

void sub_18377BA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_allow_new_connection_inline(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_allow_new_connection_inline_block_invoke;
    aBlock[3] = &unk_1E524BAA8;
    os_log_type_t v13 = v1;
    int v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    goto LABEL_3;
  }
  nw_listener_t v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_18377BDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_allow_new_connection_inline_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 128))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
    nw_listener_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start";
LABEL_17:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_18;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, backtra"
             "ce limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_19:

          if (!v4) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_19;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4)
    {
LABEL_13:
      uint64_t v1 = *(void *)(a1 + 32);
      goto LABEL_14;
    }
LABEL_12:
    free(v4);
    goto LABEL_13;
  }
LABEL_14:
  *(unsigned char *)(v1 + 302) |= 4u;
}

void nw_listener_register_client_demux_options_if_needed(void *a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  BOOL v8 = v7;
  if (!v5)
  {
    BOOL v10 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v11, &type, &v33)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
          __int16 v37 = 2082;
          os_log_type_t v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11) {
          goto LABEL_5;
        }
LABEL_56:
        free(v11);
        goto LABEL_5;
      }
      if (v20)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    char v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v11, &type, &v33)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null demux_options", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v33)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null demux_options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null demux_options, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
      __int16 v37 = 2082;
      os_log_type_t v38 = v21;
      _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null demux_options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    BOOL v16 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v11, &type, &v33)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null inbound_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v33)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s called with null inbound_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null inbound_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
      __int16 v37 = 2082;
      os_log_type_t v38 = v21;
      _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null inbound_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v21);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v9 = (void *)v5[3];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __nw_listener_register_client_demux_options_if_needed_block_invoke;
  v29[3] = &unk_1E5249868;
  os_log_type_t v30 = v5;
  id v31 = v8;
  id v32 = v6;
  nw_queue_context_async_if_needed(v9, v29);

LABEL_5:
}

void sub_18377C838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_register_client_demux_options_if_needed_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(*(void *)(a1 + 32) + 128) == 2)
  {
    *(void *)uuid_t uu = 0;
    *(void *)&uu[8] = 0;
    id v2 = nw_connection_copy_connected_path(*(void **)(a1 + 40));
    nw_path_get_client_id(v2, uu);
    if (!uuid_is_null(uu))
    {
      id v3 = *(atomic_uchar **)(*(void *)(a1 + 32) + 160);
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      v5[2] = __nw_listener_register_client_demux_options_if_needed_block_invoke_53;
      v5[3] = &unk_1E5243340;
      id v6 = *(id *)(a1 + 48);
      id v7 = uu;
      nw_array_apply(v3, (uint64_t)v5);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_listener_t v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uuid_t uu = 136446210;
      *(void *)&uu[4] = "nw_listener_register_client_demux_options_if_needed_block_invoke";
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s ignoring client demux options registration", uu, 0xCu);
    }
  }
}

void sub_18377C9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_register_client_demux_options_if_needed_block_invoke_53(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  nw_listener_t v4 = a3;
  if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
  }
  if (nw_protocol_masque_listener_get_definition(void)::definition
    && (id v5 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition)) != 0)
  {
    id v6 = os_retain(v5);
  }
  else
  {
    id v6 = 0;
  }
  nw_protocol_metadata_t v7 = nw_connection_copy_protocol_metadata(v4, v6);

  if (v7)
  {
    nw_masque_listener_add_client_demux_pattern(v7, *(void *)(a1 + 32), *(const unsigned __int8 **)(a1 + 40));
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = 136446210;
      os_log_type_t v11 = "nw_listener_register_client_demux_options_if_needed_block_invoke";
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s no metadata for masque listener", (uint8_t *)&v10, 0xCu);
    }
  }
  return 1;
}

void sub_18377CB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_advertise_descriptor(nw_listener_t listener, nw_advertise_descriptor_t advertise_descriptor)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_listener_t v3 = listener;
  nw_listener_t v4 = advertise_descriptor;
  if (v3)
  {
    Class isa = v3[3].isa;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_listener_set_advertise_descriptor_block_invoke;
    v14[3] = &unk_1E524B9A0;
    os_log_type_t v15 = v3;
    BOOL v16 = v4;
    nw_queue_context_async(isa, v14);

    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v20 = "nw_listener_set_advertise_descriptor";
  nw_protocol_metadata_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v20 = "nw_listener_set_advertise_descriptor";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_18377CEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_descriptor_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(*(void *)(a1 + 32) + 264);
  nw_listener_t v3 = *(os_unfair_lock_s **)(a1 + 32);
  if (v2 || !*(void *)&v3[68]._os_unfair_lock_opaque)
  {
LABEL_5:
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    BOOL v25 = __nw_listener_set_advertise_descriptor_block_invoke_55;
    os_log_type_t v26 = &unk_1E524B9A0;
    os_log_type_t v27 = v3;
    id v28 = *(id *)(a1 + 40);
    id v6 = (void (**)(void))_Block_copy(&aBlock);
    nw_protocol_metadata_t v7 = v3 + 2;
    os_unfair_lock_lock(v7);
    v6[2](v6);
    os_unfair_lock_unlock(v7);

    uint64_t v8 = *(void *)(a1 + 32);
    if (*(_DWORD *)(v8 + 128) == 2 && (*(unsigned char *)(v8 + 302) & 1) == 0)
    {
      if (nw_advertise_descriptor_is_equal(v2, *(void **)(a1 + 40), 1))
      {
        if (!nw_advertise_descriptor_is_equal(v2, *(void **)(a1 + 40), 0))
        {
          os_log_type_t v9 = *(void **)(*(void *)(a1 + 32) + 272);
          if (v9)
          {
            if ([v9 count] == 1)
            {
              int v10 = [*(id *)(*(void *)(a1 + 32) + 272) objectAtIndexedSubscript:0];
              BOOL v11 = v10[8] == 0;

              if (!v11)
              {
                BOOL v12 = *(NSObject **)(a1 + 40);
                if (v12)
                {
                  nw_txt_record_t v13 = nw_advertise_descriptor_copy_txt_record_object(v12);
                  nw_txt_record_t v14 = v13;
                  if (v13)
                  {
                    uint16_t isa = (uint16_t)v13[2].isa;
                    Class v16 = v13[1].isa;
LABEL_20:
                    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 272), "objectAtIndexedSubscript:", 0, v21, v22, aBlock, v24, v25, v26, v27);
                    char v17 = (DNSServiceRef *)objc_claimAutoreleasedReturnValue();
                    DNSServiceErrorType updated = DNSServiceUpdateRecord(v17[8], 0, 0, isa, v16, 0);

                    if (updated)
                    {
                      os_log_type_t v19 = *(void **)(a1 + 32);
                      dns_CFStreamError error = nw_error_create_dns_error(updated);
                      nw_listener_set_state_on_queue(v19, 3, dns_error);
                    }
                    goto LABEL_16;
                  }
                  uint16_t isa = 0;
                }
                else
                {
                  uint16_t isa = 0;
                  nw_txt_record_t v14 = 0;
                }
                Class v16 = 0;
                goto LABEL_20;
              }
            }
          }
        }
      }
      else
      {
        nw_listener_stop_advertising_on_queue(*(NWConcrete_nw_listener **)(a1 + 32));
        nw_listener_start_advertising_on_queue(*(NWConcrete_nw_listener **)(a1 + 32));
      }
    }
LABEL_16:

    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_listener_t v4 = (id)gLogObj;
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  int v29 = 136446210;
  os_log_type_t v30 = "nw_listener_set_advertise_descriptor_block_invoke";
  LODWORD(v22) = 12;
  __int16 v21 = &v29;
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
    nw_listener_t v3 = *(os_unfair_lock_s **)(a1 + 32);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_18377D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_descriptor_block_invoke_55(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 40);
  if (!v2)
  {
    os_log_type_t v9 = 0;
    goto LABEL_51;
  }
  nw_listener_t v3 = v2;
  nw_listener_t v4 = v3;
  int v5 = *((_DWORD *)v3 + 2);
  if (v5 == 2)
  {
    uint64_t bonjour_service = nw_advertise_descriptor_create_application_service_with_bundle_id(v3[6], v3[7]);
    if (bonjour_service)
    {
      *(_DWORD *)(bonjour_service + 64) = nw_advertise_descriptor_get_invitation_scope(v4);
      *(_DWORD *)(bonjour_service + 68) = nw_advertise_descriptor_get_invitation_route(v4);
      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      char v33 = "nw_advertise_descriptor_copy";
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s Failed to allocate copy", buf, 0xCu);
    }
    goto LABEL_23;
  }
  if (v5 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    char v33 = "nw_advertise_descriptor_copy";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v11, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)long long buf = 136446466;
            char v33 = "nw_advertise_descriptor_copy";
            __int16 v34 = 2082;
            os_log_type_t v35 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
        if (v16)
        {
          *(_DWORD *)long long buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v11) {
      goto LABEL_49;
    }
LABEL_48:
    free(v11);
    goto LABEL_49;
  }
  uint64_t bonjour_service = (uint64_t)nw_advertise_descriptor_create_bonjour_service(v3[2], v3[3], v3[4]);
  if (!bonjour_service)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      char v33 = "nw_advertise_descriptor_copy";
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s Failed to allocate copy", buf, 0xCu);
    }
LABEL_23:

LABEL_49:
    obj = 0;
    goto LABEL_50;
  }
  nw_protocol_metadata_t v7 = v4[5];
  if (v7) {
    nw_txt_record_t v8 = nw_txt_record_create_with_bytes(*((const uint8_t **)v7 + 1), *((void *)v7 + 2));
  }
  else {
    nw_txt_record_t v8 = 0;
  }
  os_log_type_t v18 = *(void **)(bonjour_service + 40);
  *(void *)(bonjour_service + 40) = v8;

  *(unsigned char *)(bonjour_service + 72) = *(unsigned char *)(bonjour_service + 72) & 0xFE | (_BYTE)v4[9] & 1;
LABEL_29:
  obj = (void *)bonjour_service;
  if (!nw_advertise_descriptor_is_equal(v4, (void *)bonjour_service, 0))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    char v33 = "nw_advertise_descriptor_copy";
    BOOL v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v20, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v21 = (id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s deep copy of advertise descriptor doesn't match original", buf, 0xCu);
        }
      }
      else if (v30)
      {
        uint64_t v23 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v21 = (id)gLogObj;
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v21, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)long long buf = 136446466;
            char v33 = "nw_advertise_descriptor_copy";
            __int16 v34 = 2082;
            os_log_type_t v35 = v23;
            _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s deep copy of advertise descriptor doesn't match original, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          if (!v20) {
            goto LABEL_50;
          }
          goto LABEL_63;
        }
        if (v25)
        {
          *(_DWORD *)long long buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s deep copy of advertise descriptor doesn't match original, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v21 = (id)gLogObj;
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s deep copy of advertise descriptor doesn't match original, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (v20) {
LABEL_63:
    }
      free(v20);
  }
LABEL_50:

  os_log_type_t v9 = obj;
LABEL_51:
  obja = v9;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 264), v9);
  if (v2)
  {
  }
}

void sub_18377D9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_advertised_endpoint_changed_handler(nw_listener_t listener, nw_listener_advertised_endpoint_changed_handler_t handler)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_listener_t v3 = listener;
  nw_listener_advertised_endpoint_changed_handler_t v4 = handler;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_advertised_endpoint_changed_handler_block_invoke;
    aBlock[3] = &unk_1E524B950;
    os_log_type_t v15 = v3;
    id v16 = v4;
    int v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    v5[2](v5);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);

    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
  nw_protocol_metadata_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_18377DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertised_endpoint_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      nw_listener_advertised_endpoint_changed_handler_t v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_advertised_endpoint_changed_handler_block_invoke";
        __int16 v11 = 2082;
        BOOL v12 = id_string;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set advertise handler after cancel", (uint8_t *)&v9, 0x16u);
      }
    }
  }
  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 120);
    *(void *)(v7 + 120) = v6;
  }
}

id nw_listener_copy_local_endpoint(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    BOOL v20 = __Block_byref_object_copy__18063;
    __int16 v21 = __Block_byref_object_dispose__18064;
    id v22 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_copy_local_endpoint_block_invoke;
    aBlock[3] = &unk_1E524B978;
    id v16 = buf;
    os_log_type_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    id v4 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_3:

  return v4;
}

void sub_18377E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_local_endpoint_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 280));
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v3 = (id *)(v2 + 40);
  if (!v4)
  {
    int v5 = *(void **)(*(void *)(a1 + 32) + 288);
    objc_storeStrong(v3, v5);
  }
}

void nw_listener_set_new_connection_group_handler(nw_listener_t listener, nw_listener_new_connection_group_handler_t handler)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_listener_t v3 = listener;
  nw_listener_new_connection_group_handler_t v4 = handler;
  if (nw_parameters_has_multiplexed_protocol_in_stack(v3[2].isa))
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __nw_listener_set_new_connection_group_handler_block_invoke;
    v10[3] = &unk_1E524B950;
    os_log_type_t v11 = v3;
    id v12 = v4;
    int v5 = (void (**)(void))_Block_copy(v10);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    v5[2](v5);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);

    id v6 = v11;
LABEL_9:

    goto LABEL_10;
  }
  Class isa = v3[2].isa;
  if (isa && !nw_path_parameters_get_logging_disabled(*((void *)isa + 13)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    id v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      nw_txt_record_t v8 = v3;
      os_log_type_t v9 = v8 + 42;

      *(_DWORD *)long long buf = 136446466;
      nw_txt_record_t v14 = "nw_listener_set_new_connection_group_handler";
      __int16 v15 = 2082;
      id v16 = v9;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set a connection group handler without a multiplex protocol", buf, 0x16u);
    }
    goto LABEL_9;
  }
LABEL_10:
}

void sub_18377E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void __nw_listener_set_new_connection_group_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      nw_listener_new_connection_group_handler_t v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_new_connection_group_handler_block_invoke";
        __int16 v11 = 2082;
        id v12 = id_string;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set new connection group handler after cancel", (uint8_t *)&v9, 0x16u);
      }
    }
  }
  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 96);
    *(void *)(v7 + 96) = v6;
  }
}

void nw_listener_set_new_packet_handler(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_new_packet_handler_block_invoke;
    aBlock[3] = &unk_1E524B950;
    __int16 v15 = v3;
    id v16 = v4;
    int v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v20 = "nw_listener_set_new_packet_handler";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v20 = "nw_listener_set_new_packet_handler";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_18377E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_new_packet_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      id v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_new_packet_handler_block_invoke";
        __int16 v11 = 2082;
        BOOL v12 = id_string;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set new packet handler after cancel", (uint8_t *)&v9, 0x16u);
      }
    }
  }
  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 112);
    *(void *)(v7 + 112) = v6;
  }
}

uint32_t nw_listener_get_new_connection_limit(nw_listener_t listener)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = listener;
  uint64_t v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_get_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E524B978;
    id v16 = buf;
    __int16 v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    uint32_t v4 = *(_DWORD *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_txt_record_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint32_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_18377EE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_get_new_connection_limit_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 104);
  return result;
}

void nw_listener_set_new_connection_limit(nw_listener_t listener, uint32_t new_connection_limit)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = listener;
  uint32_t v4 = (os_unfair_lock_s *)v3;
  if (v3)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v25 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E524A1F8;
    int v20 = buf;
    int v5 = v3;
    id v19 = v5;
    uint32_t v21 = new_connection_limit;
    id v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v6[2](v6);
    os_unfair_lock_unlock(v4 + 2);

    if (*(unsigned char *)(*(void *)&buf[8] + 24))
    {
      Class isa = v5[3].isa;
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = __nw_listener_set_new_connection_limit_block_invoke_2;
      v16[3] = &unk_1E524BAA8;
      char v17 = v5;
      nw_queue_context_async(isa, v16);
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  nw_txt_record_t v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v23 = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v9, &v23, &v22))
  {
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = v23;
      if (os_log_type_enabled(v10, v23))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v13 = v23;
      BOOL v14 = os_log_type_enabled(v10, v23);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v15 = v23;
      if (os_log_type_enabled(v10, v23))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v9) {
    free(v9);
  }
LABEL_5:
}

void sub_18377F26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_set_new_connection_limit_block_invoke(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 104) != v1;
  if (*(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24)) {
    *(_DWORD *)(*(void *)(result + 32) + 104) = v1;
  }
  return result;
}

void __nw_listener_set_new_connection_limit_block_invoke_2(uint64_t a1)
{
}

void nw_listener_resume_all_inboxes_if_suspended_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    uint64_t v3 = (atomic_uchar *)*((void *)v2 + 18);
    if (v3)
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___ZL52nw_listener_resume_all_inboxes_if_suspended_on_queueP22NWConcrete_nw_listener_block_invoke;
      v12[3] = &unk_1E524AE18;
      os_log_type_t v13 = v2;
      nw_array_apply(v3, (uint64_t)v12);
    }
    goto LABEL_4;
  }
  uint32_t v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v5) {
    free(v5);
  }
LABEL_4:
}

void sub_18377F5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL52nw_listener_resume_all_inboxes_if_suspended_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint32_t v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    id v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      BOOL v10 = "nw_listener_resume_all_inboxes_if_suspended_on_queue_block_invoke";
      __int16 v11 = 2082;
      BOOL v12 = id_string;
      __int16 v13 = 2114;
      char v14 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Resuming inbox %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
  nw_listener_resume_inbox(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1;
}

void sub_18377F730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_listener_update_trigger_agents_on_queueP22NWConcrete_nw_listener_block_invoke(xpc_object_t *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = v4;
  if (!v4)
  {
    id v6 = 0;
LABEL_5:
    uint64_t v7 = *((void *)a1[7] + 2);
    if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      nw_txt_record_t v8 = (id)glistenerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(a1[7]);
        BOOL v10 = "<NULL>";
        *(_DWORD *)char v17 = 136446722;
        *(void *)&void v17[4] = "nw_listener_update_trigger_agents_on_queue_block_invoke";
        *(_WORD *)&v17[12] = 2082;
        if (v6) {
          BOOL v10 = v6;
        }
        *(void *)&v17[14] = id_string;
        *(_WORD *)&v17[22] = 2082;
        *(void *)&v17[24] = v10;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Invalid value: %{public}s", v17, 0x20u);
      }
    }
    if (v6) {
      free(v6);
    }
    goto LABEL_21;
  }
  if (object_getClass(v4) != (Class)MEMORY[0x1E4F14600])
  {
    id v6 = (char *)MEMORY[0x185319370](v5);
    goto LABEL_5;
  }
  memset(v17, 0, sizeof(v17));
  bytes = xpc_uuid_get_bytes(v5);
  uuid_unparse(bytes, v17);
  BOOL v12 = xpc_dictionary_get_value(a1[4], v17);
  uint64_t v13 = xpc_dictionary_get_value(a1[5], v17);
  char v14 = (void *)v13;
  if (v12)
  {
    if (v13)
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(v12, "generation");
      if (uint64 == xpc_dictionary_get_uint64(v14, "generation")) {
        xpc_array_append_value(a1[6], v5);
      }
    }
  }

LABEL_21:
  return 1;
}

void sub_18377F954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_teardown_protocol_inboxes(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_context(v1[2]);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_listener_teardown_protocol_inboxes_block_invoke;
    v12[3] = &unk_1E524BAA8;
    uint64_t v13 = v2;
    nw_queue_context_async(v3, v12);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v17 = "nw_listener_teardown_protocol_inboxes";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          char v17 = "nw_listener_teardown_protocol_inboxes";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        char v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_18377FC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_teardown_protocol_inboxes_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) != 2 || (*(unsigned char *)(v2 + 302) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v2 + 16);
    if (v9 && !nw_path_parameters_get_logging_disabled(*(void *)(v9 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      nw_txt_record_t v8 = (id)glistenerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)long long buf = 136446466;
        char v14 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        __int16 v15 = 2082;
        id v16 = id_string;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener is not ready, ignoring teardown protocol inboxes", buf, 0x16u);
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      id v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)long long buf = 136446466;
        char v14 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        __int16 v15 = 2082;
        id v16 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] tearing down protocol inboxes", buf, 0x16u);
      }
    }
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = v6[18];
    if (v7)
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __nw_listener_teardown_protocol_inboxes_block_invoke_59;
      v11[3] = &unk_1E523CF30;
      BOOL v12 = v6;
      nw_array_remove_objects(v7, (uint64_t)v11);
      nw_txt_record_t v8 = v12;
LABEL_18:
    }
  }
}

uint64_t __nw_listener_teardown_protocol_inboxes_block_invoke_59(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  objc_opt_class();
  isKindOfClass Class = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      id v6 = (id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446722;
        BOOL v10 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        __int16 v11 = 2082;
        BOOL v12 = id_string;
        __int16 v13 = 2114;
        char v14 = v3;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling protocol inbox: %{public}@", (uint8_t *)&v9, 0x20u);
      }
    }
    nw_listener_resume_inbox(*(NWConcrete_nw_listener **)(a1 + 32), v3);
    nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v3);
  }

  return isKindOfClass & 1;
}

void sub_18378004C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_cancel(nw_listener_t listener)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_listener_t v1 = listener;
  nw_listener_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_context(v1[2].isa);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_listener_cancel_block_invoke;
    v12[3] = &unk_1E524BAA8;
    __int16 v13 = v2;
    nw_queue_context_async(v3, v12);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v17 = "nw_listener_cancel";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_listener_cancel";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v17 = "nw_listener_cancel";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_listener_cancel";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_listener_cancel";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183780364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_cancel_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4 || (*(unsigned char *)(v2 + 302) & 1) != 0)
  {
    uint64_t v8 = *(void *)(v2 + 16);
    if (v8 && !nw_path_parameters_get_logging_disabled(*(void *)(v8 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      os_log_type_t v9 = (id)glistenerLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v11 = 136446466;
        BOOL v12 = "nw_listener_cancel_block_invoke";
        __int16 v13 = 2082;
        char v14 = id_string;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener is already cancelled, ignoring cancel", (uint8_t *)&v11, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      id v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v11 = 136446466;
        BOOL v12 = "nw_listener_cancel_block_invoke";
        __int16 v13 = 2082;
        char v14 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancel", (uint8_t *)&v11, 0x16u);
      }
    }
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = (NWConcrete_nw_listener **)(a1 + 32);
    *(unsigned char *)(v7 + 302) |= 1u;
    nw_listener_resume_all_inboxes_if_suspended_on_queue(*v6);
    nw_listener_teardown_on_queue(*v6);
    if (!*((_DWORD *)*v6 + 74)) {
      nw_listener_cancel_complete_on_queue(*v6);
    }
  }
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_listener_t v1 = listener;
  uint64_t v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v20 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_get_port_block_invoke;
    aBlock[3] = &unk_1E524B978;
    id v16 = buf;
    uint64_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    uint16_t v4 = *(_WORD *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_get_port";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_get_port";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint16_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_1837808D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_get_port_block_invoke(uint64_t result)
{
  *(_WORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_WORD *)(*(void *)(result + 32) + 300);
  return result;
}

id nw_listener_copy_advertise_descriptor(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_listener_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    __int16 v20 = __Block_byref_object_copy__18063;
    uint64_t v21 = __Block_byref_object_dispose__18064;
    id v22 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_copy_advertise_descriptor_block_invoke;
    aBlock[3] = &unk_1E524B978;
    id v16 = buf;
    uint64_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    id v4 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_3:

  return v4;
}

void sub_183780C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_advertise_descriptor_block_invoke(uint64_t a1)
{
}

id nw_listener_copy_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_listener_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  id v16 = "nw_listener_copy_parameters";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          id v16 = "nw_listener_copy_parameters";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        id v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void __nw_listener_get_path_uuid_block_invoke(uint64_t a1)
{
  nw_listener_t v1 = *(_OWORD **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 176);
  if (v2)
  {
    id v3 = v2;
    _OWORD *v1 = *(_OWORD *)(v3 + 120);
  }
  else
  {
    id v4 = *(unsigned __int8 **)(a1 + 40);
    uuid_clear(v4);
  }
}

void nw_listener_simulate_mDNSResponder_crash(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_listener_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_simulate_mDNSResponder_crash_block_invoke;
    aBlock[3] = &unk_1E524BAA8;
    char v13 = v1;
    id v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1837812F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_simulate_mDNSResponder_crash_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 272);
  if (v2)
  {
    if ([v2 count] == 1)
    {
      id v3 = [*(id *)(*(void *)(a1 + 32) + 272) objectAtIndexedSubscript:0];
      uint64_t v4 = v3[8];

      if (v4)
      {
        uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 272) objectAtIndexedSubscript:0];
        dnssd_sock_t v6 = DNSServiceRefSockFD(v5[8]);

        shutdown(v6, 2);
      }
    }
  }
}

void sub_1837813C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_advertise_endpoints(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = (void *)v3[3];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_listener_set_advertise_endpoints_block_invoke;
    v14[3] = &unk_1E524B9A0;
    uint64_t v15 = v3;
    id v16 = v4;
    nw_queue_context_async(v5, v14);

    goto LABEL_3;
  }
  dnssd_sock_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v20 = "nw_listener_set_advertise_endpoints";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v20 = "nw_listener_set_advertise_endpoints";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_1837816E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_endpoints_block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 128);
  if (v3 == 2)
  {
    if (!*(void *)(v2 + 264))
    {
      os_log_type_t v18 = nw_listener_reconcile_advertised_endpoints((void *)v2, *(void **)(v2 + 272), *(void **)(a1 + 40), *(void **)(v2 + 176), 0);
      uint64_t v19 = *(os_unfair_lock_s **)(a1 + 32);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_listener_set_advertise_endpoints_block_invoke_63;
      aBlock[3] = &unk_1E524B9A0;
      uint64_t v36 = v19;
      uint64_t v20 = v18;
      __int16 v37 = v20;
      __int16 v21 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock(v19 + 2);
      v21[2](v21);
      os_unfair_lock_unlock(v19 + 2);

      return;
    }
    uint64_t v4 = *(void *)(v2 + 16);
    if (!v4 || nw_path_parameters_get_logging_disabled(*(void *)(v4 + 104))) {
      return;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    id v5 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)long long buf = 136446466;
    char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
    __int16 v42 = 2082;
    uint64_t v43 = id_string;
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v7, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        os_log_type_t v8 = (id)glistenerLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          BOOL v10 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)long long buf = 136446466;
          char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          __int16 v42 = 2082;
          uint64_t v43 = v10;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s [%{public}s] Called on listener with advertise descriptor set", buf, 0x16u);
        }
LABEL_64:

        goto LABEL_65;
      }
      if (!v38)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        os_log_type_t v8 = (id)glistenerLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v8, type))
        {
          char v30 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)long long buf = 136446466;
          char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          __int16 v42 = 2082;
          uint64_t v43 = v30;
          _os_log_impl(&dword_1830D4000, v8, v29, "%{public}s [%{public}s] Called on listener with advertise descriptor set, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      os_log_type_t v8 = (id)glistenerLogObj;
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          char v33 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)long long buf = 136446466;
          char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          __int16 v42 = 2082;
          uint64_t v43 = v33;
          _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s [%{public}s] Called on listener with advertise descriptor set, no backtrace", buf, 0x16u);
        }
        goto LABEL_64;
      }
      if (v24)
      {
        char v25 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)long long buf = 136446722;
        char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
        __int16 v42 = 2082;
        uint64_t v43 = v25;
        __int16 v44 = 2082;
        __int16 v45 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s [%{public}s] Called on listener with advertise descriptor set, dumping backtrace:%{public}s", buf, 0x20u);
      }
      goto LABEL_47;
    }
LABEL_65:
    if (!v7) {
      return;
    }
    goto LABEL_66;
  }
  uint64_t v11 = *(void *)(v2 + 16);
  if (v3 > 1)
  {
    if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      id v16 = (id)glistenerLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        char v17 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)long long buf = 136446466;
        char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
        __int16 v42 = 2082;
        uint64_t v43 = v17;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Ignoring, listener is no longer ready", buf, 0x16u);
      }
    }
    return;
  }
  if (!v11 || nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104))) {
    return;
  }
  if (__nwlog_listener_log::onceToken != -1) {
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
  }
  id v12 = (id)glistenerLogObj;
  os_log_type_t v13 = nw_listener_get_id_string(*(void **)(a1 + 32));
  *(_DWORD *)long long buf = 136446466;
  char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
  __int16 v42 = 2082;
  uint64_t v43 = v13;
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (!__nwlog_fault(v7, &type, &v38)) {
    goto LABEL_65;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    os_log_type_t v8 = (id)glistenerLogObj;
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v8, type))
    {
      uint64_t v15 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136446466;
      char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
      __int16 v42 = 2082;
      uint64_t v43 = v15;
      _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s [%{public}s] Called before listener was ready", buf, 0x16u);
    }
    goto LABEL_64;
  }
  if (!v38)
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    os_log_type_t v8 = (id)glistenerLogObj;
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v8, type))
    {
      id v32 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136446466;
      char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
      __int16 v42 = 2082;
      uint64_t v43 = v32;
      _os_log_impl(&dword_1830D4000, v8, v31, "%{public}s [%{public}s] Called before listener was ready, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_64;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  if (__nwlog_listener_log::onceToken != -1) {
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
  }
  os_log_type_t v8 = (id)glistenerLogObj;
  os_log_type_t v26 = type;
  BOOL v27 = os_log_type_enabled(v8, type);
  if (!backtrace_string)
  {
    if (v27)
    {
      __int16 v34 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 136446466;
      char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
      __int16 v42 = 2082;
      uint64_t v43 = v34;
      _os_log_impl(&dword_1830D4000, v8, v26, "%{public}s [%{public}s] Called before listener was ready, no backtrace", buf, 0x16u);
    }
    goto LABEL_64;
  }
  if (v27)
  {
    id v28 = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)long long buf = 136446722;
    char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
    __int16 v42 = 2082;
    uint64_t v43 = v28;
    __int16 v44 = 2082;
    __int16 v45 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v8, v26, "%{public}s [%{public}s] Called before listener was ready, dumping backtrace:%{public}s", buf, 0x20u);
  }
LABEL_47:

  free(backtrace_string);
  if (v7) {
LABEL_66:
  }
    free(v7);
}

void sub_183781F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_endpoints_block_invoke_63(uint64_t a1)
{
}

void sub_1837826CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

BOOL NWPBServiceBrowseReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  dnssd_sock_t v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  os_log_type_t v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 < v7)
  {
    BOOL v10 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      os_log_type_t v14 = (unsigned char *)(a2 + *v8);
      if (*v14) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v15 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0) {
        goto LABEL_40;
      }
      uint64_t v17 = *v3;
      unint64_t v18 = *(void *)(a2 + v17);
      if (v18 == -1 || v18 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v19 = v18 + 1;
      int v20 = *(char *)(*(void *)(a2 + *v10) + v18);
      *(void *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v21 = *v3;
      unint64_t v22 = *(void *)(a2 + v21);
      if (v22 == -1 || v22 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v23 = v22 + 1;
      int v24 = *(char *)(*(void *)(a2 + *v10) + v22);
      *(void *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v25 = *v3;
      unint64_t v26 = *(void *)(a2 + v25);
      if (v26 == -1 || v26 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v27 = v26 + 1;
      int v28 = *(char *)(*(void *)(a2 + *v10) + v26);
      *(void *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v29 = *v3;
      unint64_t v30 = *(void *)(a2 + v29);
      if (v30 == -1 || v30 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v31 = v30 + 1;
      int v32 = *(char *)(*(void *)(a2 + *v10) + v30);
      *(void *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v35 = v34 + 1;
      int v36 = *(char *)(*(void *)(a2 + *v10) + v34);
      *(void *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v37 = *v3;
      unint64_t v38 = *(void *)(a2 + v37);
      if (v38 == -1 || v38 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v39 = v38 + 1;
      int v40 = *(char *)(*(void *)(a2 + *v10) + v38);
      *(void *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v41 = *v3;
      unint64_t v42 = *(void *)(a2 + v41);
      if (v42 == -1 || v42 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v43 = v42 + 1;
      int v44 = *(char *)(*(void *)(a2 + *v10) + v42);
      *(void *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v45 = *v3;
      unint64_t v46 = *(void *)(a2 + v45);
      if (v46 == -1 || v46 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v47 = v46 + 1;
      int v48 = *(char *)(*(void *)(a2 + *v10) + v46);
      *(void *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v49 = *v3;
      unint64_t v50 = *(void *)(a2 + v49);
      if (v50 == -1 || v50 >= *(void *)(a2 + *v6))
      {
LABEL_38:
        os_log_type_t v14 = (unsigned char *)(a2 + *v8);
        goto LABEL_39;
      }
      unint64_t v51 = v50 + 1;
      int v52 = *(char *)(*(void *)(a2 + *v10) + v50);
      *(void *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        unint64_t v16 = 0;
        int v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      int v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(unsigned char *)(a2 + *v8)) {
        unint64_t v16 = 0;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if ((v16 >> 3) == 2)
      {
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 8;
LABEL_4:
        os_log_type_t v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      }
      if ((v16 >> 3) == 1)
      {
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 16;
        goto LABEL_4;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_5:
      uint64_t v4 = *v3;
      unint64_t v5 = *(void *)(a2 + v4);
      unint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
    }
    unint64_t v16 = 0;
LABEL_39:
    unsigned char *v14 = 1;
    goto LABEL_40;
  }
  return *(unsigned char *)(a2 + *v8) == 0;
}

uint64_t nw_parameters_get_prohibit_joining_protocols(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_listener_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[98] >> 7;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_prohibit_joining_protocols";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_prohibit_joining_protocols";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_allow_joining_connected_fd(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 99) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_allow_joining_connected_fd";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_allow_joining_connected_fd";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_allow_duplicate_state_updates(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 2) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_allow_duplicate_state_updates";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_allow_duplicate_state_updates";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_always_open_listener_socket(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 3) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_always_open_listener_socket";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_always_open_listener_socket";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_allow_internet_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[100] >> 5) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_allow_internet_fallback";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_allow_internet_fallback";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_stricter_path_scoping(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 101) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_stricter_path_scoping";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_stricter_path_scoping";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_prevents_system_http_proxy_authentication(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[101] >> 3) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parameters_get_prefer_no_proxy(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = HIBYTE(*((unsigned __int16 *)v1[13].isa + 54)) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_no_proxy_path_selection(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 9) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_privacy_proxy_fail_closed(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 100) >> 6) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 10) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke(void *a1, uint64_t a2, xpc_object_t xuint)
{
  unsigned int value = xpc_uint64_get_value(xuint);
  if (value > 4) {
    dnssd_sock_t v6 = "unknown";
  }
  else {
    dnssd_sock_t v6 = off_1E524BC28[value];
  }
  unint64_t v7 = ", ";
  if (!a2) {
    unint64_t v7 = "";
  }
  int v8 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v7, v6);
  if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v8)
  {
    **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  else if (v8 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8) + 24) += v8;
    *(void *)(*(void *)(a1[5] + 8) + 24) -= v8;
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_2(void *a1, uint64_t a2, xpc_object_t xuint)
{
  int value = xpc_uint64_get_value(xuint);
  if (value <= 1001)
  {
    if (!value)
    {
      dnssd_sock_t v6 = "other";
      goto LABEL_13;
    }
    if (value == 1001)
    {
      dnssd_sock_t v6 = "wifi_infrastructure";
      goto LABEL_13;
    }
  }
  else
  {
    switch(value)
    {
      case 1002:
        dnssd_sock_t v6 = "wifi_awdl";
        goto LABEL_13;
      case 4001:
        dnssd_sock_t v6 = "coprocessor";
        goto LABEL_13;
      case 5001:
        dnssd_sock_t v6 = "companion";
        goto LABEL_13;
    }
  }
  dnssd_sock_t v6 = "unknown";
LABEL_13:
  unint64_t v7 = ", ";
  if (!a2) {
    unint64_t v7 = "";
  }
  int v8 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v7, v6);
  if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v8)
  {
    **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  else if (v8 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8) + 24) += v8;
    *(void *)(*(void *)(a1[5] + 8) + 24) -= v8;
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_3(void *a1, uint64_t a2, xpc_object_t xuint)
{
  int value = xpc_uint64_get_value(xuint);
  if (value <= 1001)
  {
    if (!value)
    {
      dnssd_sock_t v6 = "other";
      goto LABEL_13;
    }
    if (value == 1001)
    {
      dnssd_sock_t v6 = "wifi_infrastructure";
      goto LABEL_13;
    }
  }
  else
  {
    switch(value)
    {
      case 1002:
        dnssd_sock_t v6 = "wifi_awdl";
        goto LABEL_13;
      case 4001:
        dnssd_sock_t v6 = "coprocessor";
        goto LABEL_13;
      case 5001:
        dnssd_sock_t v6 = "companion";
        goto LABEL_13;
    }
  }
  dnssd_sock_t v6 = "unknown";
LABEL_13:
  unint64_t v7 = ", ";
  if (!a2) {
    unint64_t v7 = "";
  }
  int v8 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v7, v6);
  if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v8)
  {
    **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  else if (v8 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8) + 24) += v8;
    *(void *)(*(void *)(a1[5] + 8) + 24) -= v8;
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  string = xpc_dictionary_get_string(v5, "name");
  uint64_t uint64 = xpc_dictionary_get_uint64(v5, "index");
  int v8 = ", ";
  if (!a2) {
    int v8 = "";
  }
  os_log_type_t v9 = "?";
  if (string) {
    os_log_type_t v9 = string;
  }
  int v10 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s(%llu)", v8, v9, uint64);
  if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v10)
  {
    **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  else if (v10 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8) + 24) += v10;
    *(void *)(*(void *)(a1[5] + 8) + 24) -= v10;
  }
  BOOL v11 = *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;

  return v11;
}

void sub_1837850D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_5(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_6(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_7(void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_8(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_9(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_10(void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_11(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_12(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_13(void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_14(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_15(void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_16(void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf(*(char **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(void *)(*(void *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(unsigned char **)(*(void *)(a1[4] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
}

BOOL __nw_protocol_stack_includes_protocol_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v4);
  if (is_equal_unsafe) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  BOOL v6 = !is_equal_unsafe;

  return v6;
}

void sub_183785E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _nw_parameters_configure_protocol_disable_block_invoke()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  BOOL v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1) {
      return;
    }
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s _nw_parameters_configure_protocol_disable called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, v7, "%{public}s _nw_parameters_configure_protocol_disable called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_parameters_t v2 = (id)gLogObj;
  os_log_type_t v5 = type;
  BOOL v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_parameters_configure_protocol_disable called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
    __int16 v12 = 2082;
    char v13 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_parameters_configure_protocol_disable called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1) {
LABEL_7:
  }
    free(v1);
}

void _nw_parameters_configure_protocol_default_configuration_block_invoke_2()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  BOOL v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1) {
      return;
    }
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
      _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
      _os_log_impl(&dword_1830D4000, v2, v7, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_parameters_t v2 = (id)gLogObj;
  os_log_type_t v5 = type;
  BOOL v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
      _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
    __int16 v12 = 2082;
    char v13 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1) {
LABEL_7:
  }
    free(v1);
}

void _nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  BOOL v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1) {
      return;
    }
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
      _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
      _os_log_impl(&dword_1830D4000, v2, v7, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_parameters_t v2 = (id)gLogObj;
  os_log_type_t v5 = type;
  BOOL v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
      _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
    __int16 v12 = 2082;
    char v13 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1) {
LABEL_7:
  }
    free(v1);
}

NWConcrete_nw_protocol_stack *nw_protocol_stack_create_empty()
{
  return objc_alloc_init(NWConcrete_nw_protocol_stack);
}

uint64_t __nw_protocol_stack_copy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  nw_protocol_definition_t v4 = nw_protocol_options_copy(a3);
  nw_array_append(v3, v4);

  return 1;
}

uint64_t __nw_protocol_stack_iterate_application_protocols_block_invoke(uint64_t a1)
{
  return 1;
}

BOOL __nw_protocol_stack_insert_application_protocol_before_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a1[4] == a3;
  int v3 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    *(void *)(*(void *)(a1[6] + 8) + 24) = a2;
  }
  return v3 == 0;
}

BOOL __nw_protocol_stack_insert_application_protocol_before_block_invoke_2(void *a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a1[4] == a3;
  int v3 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    *(void *)(*(void *)(a1[6] + 8) + 24) = a2;
  }
  return v3 == 0;
}

const char *nw_protocol_stack_copy_description(void *a1)
{
  id v1 = a1;
  uint64_t v24 = 0;
  uint64_t v25 = (const char **)&v24;
  uint64_t v26 = 0x2020000000;
  uint64_t v27 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  int v23 = 0;
  uint64_t v22 = 0x2020000000;
  nw_parameters_t v2 = (atomic_uchar *)v1[1];
  if (v2)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_protocol_stack_copy_description_block_invoke;
    v19[3] = &unk_1E5248260;
    v19[4] = &v24;
    v19[5] = &v20;
    nw_array_apply(v2, (uint64_t)v19);
  }
  int v3 = (atomic_uchar *)v1[2];
  if (v3)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __nw_protocol_stack_copy_description_block_invoke_2;
    v18[3] = &unk_1E5248260;
    void v18[4] = &v24;
    v18[5] = &v20;
    nw_array_apply(v3, (uint64_t)v18);
  }
  nw_protocol_definition_t v4 = (void *)v1[3];
  if (v4)
  {
    os_log_type_t v5 = v4;
    id v6 = v5[1];

    identifier = nw_protocol_definition_get_identifier(v6);
    nw_append_format(v25 + 3, "transport [%u]: %s\n", *((_DWORD *)v21 + 6), identifier);
    ++*((_DWORD *)v21 + 6);
  }
  char v8 = (void *)v1[4];
  if (v8)
  {
    os_log_type_t v9 = v8;
    id v10 = v9[1];

    BOOL v11 = nw_protocol_definition_get_identifier(v10);
    nw_append_format(v25 + 3, "secondary transport [%u]: %s\n", *((_DWORD *)v21 + 6), v11);
    ++*((_DWORD *)v21 + 6);
  }
  __int16 v12 = (void *)v1[6];
  if (v12)
  {
    char v13 = v12;
    id v14 = v13[1];

    char v15 = nw_protocol_definition_get_identifier(v14);
    nw_append_format(v25 + 3, "internet [%u]: %s\n", *((_DWORD *)v21 + 6), v15);
    ++*((_DWORD *)v21 + 6);
  }
  unint64_t v16 = v25[3];
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);

  return v16;
}

uint64_t __nw_protocol_stack_copy_description_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  nw_append_format((const char **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), "persistent application [%u]: %s\n", *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), identifier);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return 1;
}

uint64_t __nw_protocol_stack_copy_description_block_invoke_2(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  nw_append_format((const char **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), "application [%u]: %s\n", *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), identifier);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return 1;
}

void nw_protocol_stack_remove_protocol(void *a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
    int v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v45 = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v23, &v45, &v44)) {
      goto LABEL_53;
    }
    if (v45 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v25 = v45;
      if (os_log_type_enabled(v24, v45))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v29 = v45;
      BOOL v30 = os_log_type_enabled(v24, v45);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v23) {
          goto LABEL_19;
        }
LABEL_54:
        free(v23);
        goto LABEL_19;
      }
      if (v30)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v34 = v45;
      if (os_log_type_enabled(v24, v45))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (v4)
  {
    id v6 = (void *)*((void *)v3 + 1);
    if (v6)
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      unint64_t v47 = __Block_byref_object_copy__19403;
      int v48 = __Block_byref_object_dispose__19404;
      id v49 = v6;
      os_log_type_t v7 = (atomic_uchar *)*((void *)v3 + 1);
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      v40[2] = __nw_protocol_stack_remove_protocol_block_invoke;
      v40[3] = &unk_1E5244660;
      id v41 = v5;
      unint64_t v43 = buf;
      id v42 = v3;
      nw_array_apply(v7, (uint64_t)v40);
      objc_storeStrong((id *)v3 + 1, *(id *)(*(void *)&buf[8] + 40));

      _Block_object_dispose(buf, 8);
    }
    char v8 = (void *)*((void *)v3 + 2);
    if (v8)
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      unint64_t v47 = __Block_byref_object_copy__19403;
      int v48 = __Block_byref_object_dispose__19404;
      id v49 = v8;
      os_log_type_t v9 = (atomic_uchar *)*((void *)v3 + 2);
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 3221225472;
      v36[2] = __nw_protocol_stack_remove_protocol_block_invoke_2;
      v36[3] = &unk_1E5244660;
      id v37 = v5;
      unint64_t v39 = buf;
      id v38 = v3;
      nw_array_apply(v9, (uint64_t)v36);
      objc_storeStrong((id *)v3 + 2, *(id *)(*(void *)&buf[8] + 40));

      _Block_object_dispose(buf, 8);
    }
    id v10 = (void *)*((void *)v3 + 3);
    if (v10)
    {
      BOOL v11 = v10;
      id v12 = v11[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v12))
      {
        char v13 = (void *)*((void *)v3 + 3);
        *((void *)v3 + 3) = 0;
      }
    }
    id v14 = (void *)*((void *)v3 + 4);
    if (v14)
    {
      char v15 = v14;
      id v16 = v15[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v16))
      {
        __int16 v17 = (void *)*((void *)v3 + 4);
        *((void *)v3 + 4) = 0;
      }
    }
    unint64_t v18 = (void *)*((void *)v3 + 6);
    if (v18)
    {
      uint64_t v19 = v18;
      id v20 = v19[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v20))
      {
        uint64_t v21 = (void *)*((void *)v3 + 6);
        *((void *)v3 + 6) = 0;
      }
    }
    goto LABEL_19;
  }
  uint64_t v26 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
  int v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v45 = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (!__nwlog_fault(v23, &v45, &v44)) {
    goto LABEL_53;
  }
  if (v45 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v24 = __nwlog_obj();
    os_log_type_t v27 = v45;
    if (os_log_type_enabled(v24, v45))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null definition", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v44)
  {
    uint64_t v24 = __nwlog_obj();
    os_log_type_t v35 = v45;
    if (os_log_type_enabled(v24, v45))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_52;
  }
  unint64_t v31 = (char *)__nw_create_backtrace_string();
  uint64_t v24 = __nwlog_obj();
  os_log_type_t v32 = v45;
  BOOL v33 = os_log_type_enabled(v24, v45);
  if (!v31)
  {
    if (v33)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_1830D4000, v24, v32, "%{public}s called with null definition, no backtrace", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (v33)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v31;
    _os_log_impl(&dword_1830D4000, v24, v32, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v31);
  if (v23) {
    goto LABEL_54;
  }
LABEL_19:
}

void sub_18378727C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19403(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19404(uint64_t a1)
{
}

BOOL __nw_protocol_stack_remove_protocol_block_invoke(uint64_t *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(a1[4], (uint64_t)v5);
  if (is_equal_unsafe)
  {
    BOOL v7 = nw_array_duplicate_array_without_object(*(void *)(a1[5] + 8), v4);
    uint64_t v8 = *(void *)(a1[6] + 8);
    os_log_type_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  return !is_equal_unsafe;
}

void sub_183787344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_protocol_stack_remove_protocol_block_invoke_2(uint64_t *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(a1[4], (uint64_t)v5);
  if (is_equal_unsafe)
  {
    BOOL v7 = nw_array_duplicate_array_without_object(*(void *)(a1[5] + 16), v4);
    uint64_t v8 = *(void *)(a1[6] + 8);
    os_log_type_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  return !is_equal_unsafe;
}

void sub_1837873E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  if (nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v5)
    || nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 40), (uint64_t)v5))
  {
    BOOL v6 = nw_array_create();
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    os_log_type_t v9 = *(atomic_uchar **)(*(void *)(a1 + 48) + 8);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_protocol_stack_replace_protocol_block_invoke_2;
    v14[3] = &unk_1E5244660;
    char v15 = v4;
    long long v13 = *(_OWORD *)(a1 + 56);
    id v10 = (id)v13;
    long long v16 = v13;
    nw_array_apply(v9, (uint64_t)v14);

    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_18378751C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke_4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8) + 40), v5);

  return 1;
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8) + 40), v5);

  return 1;
}

void nw_protocol_stack_replace_protocol_with_handle(void *a1, uint64_t a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  nw_protocol_definition_t v5 = a1;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    int v23 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v48 = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v24, &v48, &v47)) {
      goto LABEL_54;
    }
    if (v48 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = v48;
      if (os_log_type_enabled(v25, v48))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v30 = v48;
      BOOL v31 = os_log_type_enabled(v25, v48);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_54:
        if (!v24) {
          goto LABEL_20;
        }
LABEL_55:
        free(v24);
        goto LABEL_20;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v35 = v48;
      if (os_log_type_enabled(v25, v48))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_53:

    goto LABEL_54;
  }
  if (v6)
  {
    id v8 = v5[1];
    if (v8)
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v50 = __Block_byref_object_copy__19403;
      unint64_t v51 = __Block_byref_object_dispose__19404;
      id v52 = v8;
      os_log_type_t v9 = (atomic_uchar *)v5[1];
      v42[0] = MEMORY[0x1E4F143A8];
      v42[1] = 3221225472;
      v42[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke;
      v42[3] = &unk_1E523D1D8;
      os_log_type_t v45 = buf;
      uint64_t v46 = a2;
      unint64_t v43 = v5;
      id v44 = v7;
      nw_array_apply(v9, (uint64_t)v42);
      id v10 = *(void **)(*(void *)&buf[8] + 40);
      if (v10) {
        objc_storeStrong(v5 + 1, v10);
      }

      _Block_object_dispose(buf, 8);
    }
    id v11 = v5[2];
    if (v11)
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v50 = __Block_byref_object_copy__19403;
      unint64_t v51 = __Block_byref_object_dispose__19404;
      id v52 = v11;
      id v12 = (atomic_uchar *)v5[2];
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 3221225472;
      void v37[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_3;
      v37[3] = &unk_1E523D1D8;
      int v40 = buf;
      uint64_t v41 = a2;
      id v38 = v5;
      id v39 = v7;
      nw_array_apply(v12, (uint64_t)v37);
      long long v13 = *(void **)(*(void *)&buf[8] + 40);
      if (v13) {
        objc_storeStrong(v5 + 2, v13);
      }

      _Block_object_dispose(buf, 8);
    }
    id v14 = v5[3];
    if (v14)
    {
      char v15 = v14;
      uint64_t v16 = v15[2];

      if (v16 == a2) {
        objc_storeStrong(v5 + 3, a3);
      }
    }
    id v17 = v5[4];
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v19 = v18[2];

      if (v19 == a2) {
        objc_storeStrong(v5 + 4, a3);
      }
    }
    id v20 = v5[6];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = v21[2];

      if (v22 == a2) {
        objc_storeStrong(v5 + 6, a3);
      }
    }
    goto LABEL_20;
  }
  os_log_type_t v27 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
  uint64_t v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v48 = OS_LOG_TYPE_ERROR;
  char v47 = 0;
  if (!__nwlog_fault(v24, &v48, &v47)) {
    goto LABEL_54;
  }
  if (v48 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v28 = v48;
    if (os_log_type_enabled(v25, v48))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null new_options", buf, 0xCu);
    }
    goto LABEL_53;
  }
  if (!v47)
  {
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v36 = v48;
    if (os_log_type_enabled(v25, v48))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null new_options, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_53;
  }
  os_log_type_t v32 = (char *)__nw_create_backtrace_string();
  os_log_type_t v25 = __nwlog_obj();
  os_log_type_t v33 = v48;
  BOOL v34 = os_log_type_enabled(v25, v48);
  if (!v32)
  {
    if (v34)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null new_options, no backtrace", buf, 0xCu);
    }
    goto LABEL_53;
  }
  if (v34)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v32;
    _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null new_options, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v32);
  if (v24) {
    goto LABEL_55;
  }
LABEL_20:
}

BOOL __nw_protocol_stack_replace_protocol_with_handle_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  uint64_t v6 = *(void *)(a1 + 56);
  if (protocol_handle == v6)
  {
    BOOL v7 = nw_array_create();
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    os_log_type_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = *(atomic_uchar **)(*(void *)(a1 + 32) + 8);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_2;
    v14[3] = &unk_1E5244660;
    id v15 = v4;
    long long v13 = *(_OWORD *)(a1 + 40);
    id v11 = (id)v13;
    long long v16 = v13;
    nw_array_apply(v10, (uint64_t)v14);
  }
  return protocol_handle != v6;
}

BOOL __nw_protocol_stack_replace_protocol_with_handle_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  uint64_t v6 = *(void *)(a1 + 56);
  if (protocol_handle == v6)
  {
    BOOL v7 = nw_array_create();
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    os_log_type_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = *(atomic_uchar **)(*(void *)(a1 + 32) + 16);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_4;
    v14[3] = &unk_1E5244660;
    id v15 = v4;
    long long v13 = *(_OWORD *)(a1 + 40);
    id v11 = (id)v13;
    long long v16 = v13;
    nw_array_apply(v10, (uint64_t)v14);
  }
  return protocol_handle != v6;
}

uint64_t __nw_protocol_stack_replace_protocol_with_handle_block_invoke_4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8) + 40), v5);

  return 1;
}

uint64_t __nw_protocol_stack_replace_protocol_with_handle_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8) + 40), v5);

  return 1;
}

uint64_t __nw_protocol_stack_is_equal_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 8), a2);
  uint64_t is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return is_equal;
}

void sub_183788014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 16), a2);
  uint64_t is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return is_equal;
}

void sub_1837880A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_stack_get_hash(void *a1)
{
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x2020000000;
    uint64_t v14 = 0;
    id v3 = v1[1];
    if (v3)
    {
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __nw_protocol_stack_get_hash_block_invoke;
      v10[3] = &unk_1E5248058;
      void v10[4] = &v11;
      nw_array_apply(v3, (uint64_t)v10);
    }
    id v4 = v2[2];
    if (v4)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __nw_protocol_stack_get_hash_block_invoke_2;
      v9[3] = &unk_1E5248058;
      void v9[4] = &v11;
      nw_array_apply(v4, (uint64_t)v9);
    }
    uint64_t hash = nw_protocol_options_get_hash(v2[3]);
    v12[3] ^= hash;
    uint64_t v6 = nw_protocol_options_get_hash(v2[6]);
    uint64_t v7 = v12[3] ^ v6;
    v12[3] = v7;
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_183788200(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= nw_protocol_options_get_hash(v4);

  return 1;
}

void sub_183788264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_get_hash_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= nw_protocol_options_get_hash(v4);

  return 1;
}

void sub_1837882BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_parameters_copy_description(NWConcrete_nw_parameters *a1)
{
  return nw_parameters_copy_description_internal(a1, 0);
}

id *nw_parameters_create_empty_stack()
{
  id v0 = [NWConcrete_nw_parameters alloc];
  id v1 = objc_alloc_init(NWConcrete_nw_protocol_stack);
  uint64_t v2 = -[NWConcrete_nw_parameters initWithStack:]((id *)&v0->super.isa, v1);

  return v2;
}

void sub_183788328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_application_service(void)
{
  nw_parameters_t v0 = nw_parameters_create();
  nw_parameters_set_always_open_listener_socket(v0, 0);
  nw_parameters_set_data_mode(v0, 2u);
  *((_WORD *)v0[13].isa + 50) |= 0x100u;
  return v0;
}

void sub_183788384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_always_open_listener_socket(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x8000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFF7FFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  id v17 = "nw_parameters_set_always_open_listener_socket";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          id v17 = "nw_parameters_set_always_open_listener_socket";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        id v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_tfo(void *a1, BOOL a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = 4;
      if (!a2) {
        uint64_t v7 = 0;
      }
      *((void *)&v4->value + 11) = *((void *)&v4->value + 11) & 0xFFFFFFFFFFFFFFFBLL | v7;
      nw_tcp_options_set_enable_fast_open(v5, a2);
    }

    goto LABEL_7;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v19 = "nw_parameters_set_tfo";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v19 = "nw_parameters_set_tfo";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v9) {
    free(v9);
  }
LABEL_7:
}

void sub_18378891C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_add_protocol_stack_member_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(_DWORD *)(a1 + 48) == a2) {
    nw_array_append(*(void *)(a1 + 32), *(void **)(a1 + 40));
  }
  nw_array_append(*(void *)(a1 + 32), v5);

  return 1;
}

NSObject *nw_parameters_create_quic_connection(void *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v28 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v53 = "nw_parameters_create_quic_connection";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v29, &type, &v50)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }
    }
    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v53 = "nw_parameters_create_quic_connection";
          __int16 v54 = 2082;
          __int16 v55 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_98;
      }
      if (v36)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_1830D4000, v30, v44, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_97:

    goto LABEL_98;
  }
  if (v1 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
  {
    if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v3 = (id)gLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s QUIC is disabled, cannot create QUIC connection", buf, 0xCu);
      }

      goto LABEL_7;
    }
    nw_parameters_t v5 = nw_parameters_create();
    if (v5)
    {
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
      }
      nw_protocol_options_t options = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
      nw_protocol_options_set_prohibit_joining(options);
      if (options)
      {
        uint64_t v7 = v5[19].isa;
        uint64_t v8 = v7;
        if (v7)
        {
          objc_storeStrong(v7 + 3, options);
          if (v2 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
            v2[2](v2, options);
          }
          BYTE4(v5[11].isa) = 2;
          id v4 = v5;
LABEL_16:

LABEL_57:
          goto LABEL_58;
        }
        int v40 = __nwlog_obj();
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v50 = 0;
        if (__nwlog_fault(v41, &type, &v50))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            id v42 = __nwlog_obj();
            os_log_type_t v43 = type;
            if (os_log_type_enabled(v42, type))
            {
              *(_DWORD *)long long buf = 136446210;
              uint64_t v53 = "nw_parameters_create_quic_connection";
              _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null stack", buf, 0xCu);
            }
          }
          else if (v50)
          {
            uint64_t v46 = (char *)__nw_create_backtrace_string();
            id v42 = __nwlog_obj();
            os_log_type_t v47 = type;
            BOOL v48 = os_log_type_enabled(v42, type);
            if (v46)
            {
              if (v48)
              {
                *(_DWORD *)long long buf = 136446466;
                uint64_t v53 = "nw_parameters_create_quic_connection";
                __int16 v54 = 2082;
                __int16 v55 = v46;
                _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v46);
              goto LABEL_111;
            }
            if (v48)
            {
              *(_DWORD *)long long buf = 136446210;
              uint64_t v53 = "nw_parameters_create_quic_connection";
              _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null stack, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            id v42 = __nwlog_obj();
            os_log_type_t v49 = type;
            if (os_log_type_enabled(v42, type))
            {
              *(_DWORD *)long long buf = 136446210;
              uint64_t v53 = "nw_parameters_create_quic_connection";
              _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_111:
        if (v41) {
          free(v41);
        }
        id v4 = 0;
        goto LABEL_16;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v53 = "nw_parameters_create_quic_connection";
      BOOL v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (__nwlog_fault(v14, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)long long buf = 136446210;
            uint64_t v53 = "nw_parameters_create_quic_connection";
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s nw_quic_create_connection_options failed", buf, 0xCu);
          }
        }
        else if (v50)
        {
          __int16 v20 = __nw_create_backtrace_string();
          if (v20)
          {
            uint64_t v21 = (char *)v20;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v22 = (id)gLogObj;
            os_log_type_t v23 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)long long buf = 136446466;
              uint64_t v53 = "nw_parameters_create_quic_connection";
              __int16 v54 = 2082;
              __int16 v55 = v21;
              _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_quic_create_connection_options failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v21);
            if (!v14) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v26 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)long long buf = 136446210;
            uint64_t v53 = "nw_parameters_create_quic_connection";
            _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s nw_quic_create_connection_options failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)long long buf = 136446210;
            uint64_t v53 = "nw_parameters_create_quic_connection";
            _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s nw_quic_create_connection_options failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v14)
      {
LABEL_56:
        id v4 = 0;
        goto LABEL_57;
      }
LABEL_55:
      free(v14);
      goto LABEL_56;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    uint64_t v53 = "nw_parameters_create_quic_connection";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v10, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }
      else if (v50)
      {
        id v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v11, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v53 = "nw_parameters_create_quic_connection";
            __int16 v54 = 2082;
            __int16 v55 = v17;
            _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (!v10) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_1830D4000, v11, v24, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v10)
    {
LABEL_47:
      id v4 = 0;
LABEL_58:

      goto LABEL_59;
    }
LABEL_46:
    free(v10);
    goto LABEL_47;
  }
  os_log_type_t v32 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v53 = "nw_parameters_create_quic_connection";
  os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (__nwlog_fault(v29, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v50)
    {
      id v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v30, type);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v53 = "nw_parameters_create_quic_connection";
          __int16 v54 = 2082;
          __int16 v55 = v37;
          _os_log_impl(&dword_1830D4000, v30, v38, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        if (!v29) {
          goto LABEL_7;
        }
        goto LABEL_99;
      }
      if (v39)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_1830D4000, v30, v38, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_1830D4000, v30, v45, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_97;
  }
LABEL_98:
  if (v29) {
LABEL_99:
  }
    free(v29);
LABEL_7:
  id v4 = 0;
LABEL_59:

  return v4;
}

void sub_1837896BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *nw_parameters_create_quic_stream(void *a1, void *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  nw_parameters_t v5 = v4;
  if (v3)
  {
    if (!v4)
    {
      BOOL v36 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v67 = "nw_parameters_create_quic_stream";
      os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (!__nwlog_fault(v33, &type, &v64)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null configure_quic_connection", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (!v64)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v57, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v34 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v46, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v47)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        __int16 v68 = 2082;
        BOOL v69 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v34, v46, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_103;
    }
    if (v3 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
    {
      os_log_type_t v38 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v67 = "nw_parameters_create_quic_stream";
      os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (!__nwlog_fault(v33, &type, &v64)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (!v64)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v58, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v34 = __nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v48, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v49)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        __int16 v68 = 2082;
        BOOL v69 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v34, v48, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_103;
    }
    if (v4 != (void (**)(id, id))&__block_literal_global_19196)
    {
      if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s QUIC is disabled, cannot create QUIC stream", buf, 0xCu);
        }

        goto LABEL_9;
      }
      nw_parameters_t v8 = nw_parameters_create();
      if (v8)
      {
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
        }
        nw_protocol_options_t options = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (options)
        {
          id v10 = v8[19].isa;
          os_log_type_t v11 = v10;
          if (v10)
          {
            objc_storeStrong(v10 + 3, options);
            if (v3 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
              v3[2](v3, options);
            }
            if (v5 != (void (**)(id, id))&__block_literal_global_98)
            {
              id v12 = nw_quic_stream_copy_shared_connection_options(options);
              v5[2](v5, v12);
            }
            BYTE4(v8[11].isa) = 2;
            v8[12].Class isa = (Class)((unint64_t)v8[12].isa | 0x400000);
            uint64_t v7 = v8;
LABEL_20:

LABEL_61:
            goto LABEL_62;
          }
          id v52 = __nwlog_obj();
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          uint64_t v53 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v64 = 0;
          if (__nwlog_fault(v53, &type, &v64))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __int16 v54 = __nwlog_obj();
              os_log_type_t v55 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)long long buf = 136446210;
                os_log_type_t v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s called with null stack", buf, 0xCu);
              }
            }
            else if (v64)
            {
              id v60 = (char *)__nw_create_backtrace_string();
              __int16 v54 = __nwlog_obj();
              os_log_type_t v61 = type;
              BOOL v62 = os_log_type_enabled(v54, type);
              if (v60)
              {
                if (v62)
                {
                  *(_DWORD *)long long buf = 136446466;
                  os_log_type_t v67 = "nw_parameters_create_quic_stream";
                  __int16 v68 = 2082;
                  BOOL v69 = v60;
                  _os_log_impl(&dword_1830D4000, v54, v61, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v60);
                goto LABEL_147;
              }
              if (v62)
              {
                *(_DWORD *)long long buf = 136446210;
                os_log_type_t v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_1830D4000, v54, v61, "%{public}s called with null stack, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __int16 v54 = __nwlog_obj();
              os_log_type_t v63 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)long long buf = 136446210;
                os_log_type_t v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_1830D4000, v54, v63, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_147:
          if (v53) {
            free(v53);
          }
          uint64_t v7 = 0;
          goto LABEL_20;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v17 = (id)gLogObj;
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v64 = 0;
        if (__nwlog_fault(v18, &type, &v64))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v19 = (id)gLogObj;
            os_log_type_t v20 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)long long buf = 136446210;
              os_log_type_t v67 = "nw_parameters_create_quic_stream";
              _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
            }
          }
          else if (v64)
          {
            os_log_type_t v24 = __nw_create_backtrace_string();
            if (v24)
            {
              os_log_type_t v25 = (char *)v24;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v26 = (id)gLogObj;
              os_log_type_t v27 = type;
              if (os_log_type_enabled(v26, type))
              {
                *(_DWORD *)long long buf = 136446466;
                os_log_type_t v67 = "nw_parameters_create_quic_stream";
                __int16 v68 = 2082;
                BOOL v69 = v25;
                _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v25);
              if (!v18) {
                goto LABEL_60;
              }
              goto LABEL_59;
            }
            BOOL v19 = __nwlog_obj();
            os_log_type_t v30 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)long long buf = 136446210;
              os_log_type_t v67 = "nw_parameters_create_quic_stream";
              _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s nw_quic_create_stream_options failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v19 = (id)gLogObj;
            os_log_type_t v29 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)long long buf = 136446210;
              os_log_type_t v67 = "nw_parameters_create_quic_stream";
              _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (!v18)
        {
LABEL_60:
          uint64_t v7 = 0;
          goto LABEL_61;
        }
LABEL_59:
        free(v18);
        goto LABEL_60;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v67 = "nw_parameters_create_quic_stream";
      BOOL v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (__nwlog_fault(v14, &type, &v64))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s nw_parameters_create failed", buf, 0xCu);
          }
        }
        else if (v64)
        {
          uint64_t v21 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v22 = type;
          BOOL v23 = os_log_type_enabled(v15, type);
          if (v21)
          {
            if (v23)
            {
              *(_DWORD *)long long buf = 136446466;
              os_log_type_t v67 = "nw_parameters_create_quic_stream";
              __int16 v68 = 2082;
              BOOL v69 = v21;
              _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v21);
            if (!v14) {
              goto LABEL_51;
            }
            goto LABEL_50;
          }
          if (v23)
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v28 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_1830D4000, v15, v28, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v14)
      {
LABEL_51:
        uint64_t v7 = 0;
LABEL_62:

        goto LABEL_63;
      }
LABEL_50:
      free(v14);
      goto LABEL_51;
    }
    int v40 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v67 = "nw_parameters_create_quic_stream";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v64 = 0;
    if (__nwlog_fault(v33, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
        }
LABEL_133:

        goto LABEL_134;
      }
      if (!v64)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v59, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v34 = __nwlog_obj();
      os_log_type_t v50 = type;
      BOOL v51 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_1830D4000, v34, v50, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v51)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        __int16 v68 = 2082;
        BOOL v69 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v34, v50, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_103:

      free(backtrace_string);
      if (!v33) {
        goto LABEL_9;
      }
      goto LABEL_135;
    }
  }
  else
  {
    os_log_type_t v32 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v67 = "nw_parameters_create_quic_stream";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v64 = 0;
    if (!__nwlog_fault(v33, &type, &v64)) {
      goto LABEL_134;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v34 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null configure_quic_stream", buf, 0xCu);
      }
      goto LABEL_133;
    }
    if (!v64)
    {
      BOOL v34 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        _os_log_impl(&dword_1830D4000, v34, v56, "%{public}s called with null configure_quic_stream, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_133;
    }
    id v42 = (char *)__nw_create_backtrace_string();
    BOOL v34 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v44 = os_log_type_enabled(v34, type);
    if (!v42)
    {
      if (v44)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s called with null configure_quic_stream, no backtrace", buf, 0xCu);
      }
      goto LABEL_133;
    }
    if (v44)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v67 = "nw_parameters_create_quic_stream";
      __int16 v68 = 2082;
      BOOL v69 = v42;
      _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s called with null configure_quic_stream, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v42);
  }
LABEL_134:
  if (v33) {
LABEL_135:
  }
    free(v33);
LABEL_9:
  uint64_t v7 = 0;
LABEL_63:

  return v7;
}

void sub_18378A848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_quic(nw_parameters_configure_protocol_block_t configure_quic)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  nw_parameters_configure_protocol_block_t v1 = configure_quic;
  uint64_t v2 = (void (**)(void, void))v1;
  if (v1)
  {
    if (v1 == &__block_literal_global_19196)
    {
      os_log_type_t v32 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v58 = "nw_parameters_create_quic";
      os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (!__nwlog_fault(v29, &type, &v55)) {
        goto LABEL_113;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (!v55)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_1830D4000, v30, v49, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_1830D4000, v30, v40, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (v41)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v58 = "nw_parameters_create_quic";
        __int16 v59 = 2082;
        id v60 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v40, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_88;
    }
    if (v1 != &__block_literal_global_98)
    {
      if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v3 = (id)gLogObj;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s QUIC is disabled, cannot create QUIC parameters", buf, 0xCu);
        }

        goto LABEL_8;
      }
      nw_parameters_t v5 = nw_parameters_create();
      if (v5)
      {
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
        }
        nw_protocol_options_t options = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (options)
        {
          uint64_t v7 = v5[19].isa;
          nw_parameters_t v8 = v7;
          if (v7)
          {
            objc_storeStrong(v7 + 3, options);
            ((void (**)(void, NWConcrete_nw_protocol_options *))v2)[2](v2, options);
            BYTE4(v5[11].isa) = 2;
            v5[12].Class isa = (Class)((unint64_t)v5[12].isa | 0x400000);
            id v4 = v5;
LABEL_15:

LABEL_56:
            goto LABEL_57;
          }
          BOOL v44 = __nwlog_obj();
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v55 = 0;
          if (__nwlog_fault(v45, &type, &v55))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v46 = __nwlog_obj();
              os_log_type_t v47 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)long long buf = 136446210;
                os_log_type_t v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null stack", buf, 0xCu);
              }
            }
            else if (v55)
            {
              BOOL v51 = (char *)__nw_create_backtrace_string();
              os_log_type_t v46 = __nwlog_obj();
              os_log_type_t v52 = type;
              BOOL v53 = os_log_type_enabled(v46, type);
              if (v51)
              {
                if (v53)
                {
                  *(_DWORD *)long long buf = 136446466;
                  os_log_type_t v58 = "nw_parameters_create_quic";
                  __int16 v59 = 2082;
                  id v60 = v51;
                  _os_log_impl(&dword_1830D4000, v46, v52, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v51);
                goto LABEL_126;
              }
              if (v53)
              {
                *(_DWORD *)long long buf = 136446210;
                os_log_type_t v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_1830D4000, v46, v52, "%{public}s called with null stack, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              os_log_type_t v46 = __nwlog_obj();
              os_log_type_t v54 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)long long buf = 136446210;
                os_log_type_t v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_1830D4000, v46, v54, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_126:
          if (v45) {
            free(v45);
          }
          id v4 = 0;
          goto LABEL_15;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v13 = (id)gLogObj;
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v58 = "nw_parameters_create_quic";
        BOOL v14 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v55 = 0;
        if (__nwlog_fault(v14, &type, &v55))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v15 = (id)gLogObj;
            os_log_type_t v16 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)long long buf = 136446210;
              os_log_type_t v58 = "nw_parameters_create_quic";
              _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
            }
          }
          else if (v55)
          {
            os_log_type_t v20 = __nw_create_backtrace_string();
            if (v20)
            {
              uint64_t v21 = (char *)v20;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v22 = (id)gLogObj;
              os_log_type_t v23 = type;
              if (os_log_type_enabled(v22, type))
              {
                *(_DWORD *)long long buf = 136446466;
                os_log_type_t v58 = "nw_parameters_create_quic";
                __int16 v59 = 2082;
                id v60 = v21;
                _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v21);
              if (!v14) {
                goto LABEL_55;
              }
              goto LABEL_54;
            }
            os_log_type_t v15 = __nwlog_obj();
            os_log_type_t v26 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)long long buf = 136446210;
              os_log_type_t v58 = "nw_parameters_create_quic";
              _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s nw_quic_create_stream_options failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v15 = (id)gLogObj;
            os_log_type_t v25 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)long long buf = 136446210;
              os_log_type_t v58 = "nw_parameters_create_quic";
              _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (!v14)
        {
LABEL_55:
          id v4 = 0;
          goto LABEL_56;
        }
LABEL_54:
        free(v14);
        goto LABEL_55;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v58 = "nw_parameters_create_quic";
      id v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (__nwlog_fault(v10, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v58 = "nw_parameters_create_quic";
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s nw_parameters_create failed", buf, 0xCu);
          }
        }
        else if (v55)
        {
          id v17 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v18 = type;
          BOOL v19 = os_log_type_enabled(v11, type);
          if (v17)
          {
            if (v19)
            {
              *(_DWORD *)long long buf = 136446466;
              os_log_type_t v58 = "nw_parameters_create_quic";
              __int16 v59 = 2082;
              id v60 = v17;
              _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v17);
            if (!v10) {
              goto LABEL_46;
            }
            goto LABEL_45;
          }
          if (v19)
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v58 = "nw_parameters_create_quic";
            _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v58 = "nw_parameters_create_quic";
            _os_log_impl(&dword_1830D4000, v11, v24, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v10)
      {
LABEL_46:
        id v4 = 0;
LABEL_57:

        goto LABEL_58;
      }
LABEL_45:
      free(v10);
      goto LABEL_46;
    }
    BOOL v34 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v58 = "nw_parameters_create_quic";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v29, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration))", buf, 0xCu);
        }
LABEL_112:

        goto LABEL_113;
      }
      if (!v55)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_1830D4000, v30, v50, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_1830D4000, v30, v42, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), no backtrace", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (v43)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v58 = "nw_parameters_create_quic";
        __int16 v59 = 2082;
        id v60 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v42, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_88:

      free(backtrace_string);
      if (!v29) {
        goto LABEL_8;
      }
      goto LABEL_114;
    }
  }
  else
  {
    os_log_type_t v28 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v58 = "nw_parameters_create_quic";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55)) {
      goto LABEL_113;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v58 = "nw_parameters_create_quic";
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null configure_quic", buf, 0xCu);
      }
      goto LABEL_112;
    }
    if (!v55)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v58 = "nw_parameters_create_quic";
        _os_log_impl(&dword_1830D4000, v30, v48, "%{public}s called with null configure_quic, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_112;
    }
    BOOL v36 = (char *)__nw_create_backtrace_string();
    os_log_type_t v30 = __nwlog_obj();
    os_log_type_t v37 = type;
    BOOL v38 = os_log_type_enabled(v30, type);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v58 = "nw_parameters_create_quic";
        _os_log_impl(&dword_1830D4000, v30, v37, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }
      goto LABEL_112;
    }
    if (v38)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v58 = "nw_parameters_create_quic";
      __int16 v59 = 2082;
      id v60 = v36;
      _os_log_impl(&dword_1830D4000, v30, v37, "%{public}s called with null configure_quic, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v36);
  }
LABEL_113:
  if (v29) {
LABEL_114:
  }
    free(v29);
LABEL_8:
  id v4 = 0;
LABEL_58:

  return v4;
}

void sub_18378B7B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_migrating_peer_to_peer(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(_DWORD *)(*((void *)v1 + 13) + 103) = 2;
    *(_WORD *)(*((void *)v1 + 13) + 108) |= 0x20u;
    *((void *)v1 + 12) |= 0x10000004000uLL;
    goto LABEL_3;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v14 = "nw_parameters_set_migrating_peer_to_peer";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_parameters_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_parameters_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v14 = "nw_parameters_set_migrating_peer_to_peer";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_parameters_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void nw_parameters_set_no_fallback(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 32;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFDF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  char v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_fallback";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_fallback";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_local_only(nw_parameters_t parameters, BOOL local_only)
{
  BOOL v2 = local_only;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x4000;
    if (!v2) {
      uint64_t v5 = 0;
    }
    v3[12].Class isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFFFFFBFFFLL | v5);
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v17 = "nw_parameters_set_local_only";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v17 = "nw_parameters_set_local_only";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_stricter_path_scoping(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x10000000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFEFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v17 = "nw_parameters_set_stricter_path_scoping";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v17 = "nw_parameters_set_stricter_path_scoping";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

nw_parameters_t nw_parameters_create_peer_to_peer_migrating_quic(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v6, &type, &v23)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null configure_quic", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v23)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v20, "%{public}s called with null configure_quic, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v15)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      __int16 v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null configure_quic, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(backtrace_string);
    goto LABEL_54;
  }
  if (v1 == &__block_literal_global_19196)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v6, &type, &v23)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v23)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v21, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v17)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      __int16 v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (v1 != &__block_literal_global_98)
  {
    nw_parameters_t quic = nw_parameters_create_quic(v1);
    nw_parameters_set_migrating_peer_to_peer(quic);
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v6, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration))", buf, 0xCu);
      }
LABEL_53:

      goto LABEL_54;
    }
    if (!v23)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v22, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v19)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      __int16 v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
LABEL_54:
  if (v6) {
    free(v6);
  }
  nw_parameters_t quic = 0;
LABEL_5:

  return quic;
}

void sub_18378C97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *nw_parameters_create_quic_stream_with_tls_fallback(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  os_log_type_t v10 = a2;
  os_log_type_t v11 = a3;
  id v145 = a4;
  os_log_type_t v12 = a5;
  v146 = v12;
  v144 = v9;
  if (v9)
  {
    if (v12)
    {
      if (v10)
      {
        if (v11)
        {
          if (v10 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
          {
            __int16 v101 = __nwlog_obj();
            *(_DWORD *)long long buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            __int16 v92 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __int16 v93 = __nwlog_obj();
                os_log_type_t v102 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v93, v102, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
                }
                goto LABEL_255;
              }
              if (!v147)
              {
                __int16 v93 = __nwlog_obj();
                os_log_type_t v131 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v93, v131, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_255;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              v108 = __nwlog_obj();
              os_log_type_t v117 = type;
              BOOL v118 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v118)
                {
                  *(_DWORD *)long long buf = 136446466;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  __int16 v151 = 2082;
                  size_t v152 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v108, v117, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
                }
                goto LABEL_226;
              }
              if (v118)
              {
                *(_DWORD *)long long buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v108, v117, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
              }
              goto LABEL_281;
            }
          }
          else if (v11 == (void (**)(id, id))&__block_literal_global_19196)
          {
            __int16 v103 = __nwlog_obj();
            *(_DWORD *)long long buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            __int16 v92 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __int16 v93 = __nwlog_obj();
                os_log_type_t v104 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v93, v104, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
                }
                goto LABEL_255;
              }
              if (!v147)
              {
                __int16 v93 = __nwlog_obj();
                os_log_type_t v132 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v93, v132, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_255;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              v108 = __nwlog_obj();
              os_log_type_t v119 = type;
              BOOL v120 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v120)
                {
                  *(_DWORD *)long long buf = 136446466;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  __int16 v151 = 2082;
                  size_t v152 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v108, v119, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
                }
                goto LABEL_226;
              }
              if (v120)
              {
                *(_DWORD *)long long buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v108, v119, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
              }
LABEL_281:
            }
          }
          else
          {
            if (v12 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
            {
              nw_parameters_t v13 = nw_parameters_create();
              if (v13)
              {
                os_log_type_t v14 = (void *)nw_protocol_boringssl_copy_definition();
                nw_protocol_options_t options = nw_protocol_create_options(v14);

                if (options)
                {
                  os_log_type_t v16 = options;
                  v143 = v16;
                  if (v9 != &__block_literal_global_101) {
                    (*((void (**)(id, NWConcrete_nw_protocol_options *))v9 + 2))(v9, v16);
                  }
                  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
                    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
                  }
                  BOOL v17 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
                  if (v17)
                  {
                    os_log_type_t v18 = v13[19].isa;
                    __int16 v140 = v18;
                    if (v18)
                    {
                      objc_storeStrong(v18 + 3, v17);
                      if (v10 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
                        v10[2](v10, v17);
                      }
                      id v142 = nw_quic_stream_copy_shared_connection_options(v17);
                      nw_quic_connection_set_sec_protocol_options(v142, v143);
                      if (v11 != (void (**)(id, id))&__block_literal_global_98) {
                        v11[2](v11, v142);
                      }
                      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
                        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
                      }
                      BOOL v19 = nw_protocol_create_options((void *)g_tcp_definition);
                      v141 = v19;
                      if (v19)
                      {
                        if (v146 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
                          v146[2](v146, v19);
                        }
                        os_log_type_t v20 = objc_alloc_init(NWConcrete_nw_protocol_transform);
                        if (v20)
                        {
                          os_log_type_t v21 = objc_alloc_init(NWConcrete_nw_protocol_transform);
                          os_log_type_t v22 = v21;
                          if (v21)
                          {
                            if (v145)
                            {
                              char v23 = v21;
                              id v24 = v145;
                              objc_storeStrong(v23 + 4, a4);
                            }
                            uint64_t v25 = v20;
                            *((unsigned char *)v25 + 8) |= 2u;

                            nw_protocol_transform_append_protocol(v25, 3, v17);
                            os_log_type_t v26 = v25;
                            v26->fallback_uint64_t mode = 2;

                            __int16 v27 = v26;
                            *((unsigned char *)v25 + 8) |= 0x10u;

                            os_log_type_t v28 = v22;
                            *((unsigned char *)v28 + 8) |= 2u;

                            uint64_t v29 = nw_protocol_options_copy(v143);
                            nw_protocol_transform_append_protocol(v28, 4, v29);

                            nw_protocol_transform_append_protocol(v28, 3, v141);
                            os_log_type_t v30 = v28;
                            *((unsigned char *)v28 + 8) |= 0x10u;

                            BOOL v31 = nw_array_create();
                            Class isa = v13[20].isa;
                            v13[20].Class isa = (Class)v31;

                            nw_array_append((uint64_t)v13[20].isa, v27);
                            nw_array_append((uint64_t)v13[20].isa, v30);
                            BYTE4(v13[11].isa) = 2;
                            os_log_type_t v33 = v13;
LABEL_149:

                            goto LABEL_150;
                          }
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          id v72 = (id)gLogObj;
                          *(_DWORD *)long long buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          int v73 = (char *)_os_log_send_and_compose_impl();

                          os_log_type_t type = OS_LOG_TYPE_ERROR;
                          char v147 = 0;
                          if (__nwlog_fault(v73, &type, &v147))
                          {
                            if (type == OS_LOG_TYPE_FAULT)
                            {
                              uint64_t v74 = __nwlog_obj();
                              os_log_type_t v75 = type;
                              if (os_log_type_enabled(v74, type))
                              {
                                *(_DWORD *)long long buf = 136446210;
                                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                              }
                            }
                            else
                            {
                              if (v147)
                              {
                                char v81 = (char *)__nw_create_backtrace_string();
                                long long v82 = __nwlog_obj();
                                os_log_type_t v83 = type;
                                log = v82;
                                BOOL v84 = os_log_type_enabled(v82, type);
                                if (v81)
                                {
                                  if (v84)
                                  {
                                    *(_DWORD *)long long buf = 136446466;
                                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                    __int16 v151 = 2082;
                                    size_t v152 = v81;
                                    _os_log_impl(&dword_1830D4000, log, v83, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                                  }

                                  free(v81);
                                }
                                else
                                {
                                  if (v84)
                                  {
                                    *(_DWORD *)long long buf = 136446210;
                                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                    _os_log_impl(&dword_1830D4000, log, v83, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                                  }
                                }
                                goto LABEL_146;
                              }
                              uint64_t v74 = __nwlog_obj();
                              os_log_type_t v88 = type;
                              if (os_log_type_enabled(v74, type))
                              {
                                *(_DWORD *)long long buf = 136446210;
                                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                _os_log_impl(&dword_1830D4000, v74, v88, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                              }
                            }
                          }
LABEL_146:
                          if (v73) {
                            free(v73);
                          }
                          os_log_type_t v33 = 0;
                          goto LABEL_149;
                        }
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        id v63 = (id)gLogObj;
                        *(_DWORD *)long long buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        char v64 = (char *)_os_log_send_and_compose_impl();

                        os_log_type_t type = OS_LOG_TYPE_ERROR;
                        char v147 = 0;
                        if (__nwlog_fault(v64, &type, &v147))
                        {
                          if (type == OS_LOG_TYPE_FAULT)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            uint64_t v65 = (id)gLogObj;
                            os_log_type_t v66 = type;
                            if (os_log_type_enabled(v65, type))
                            {
                              *(_DWORD *)long long buf = 136446210;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                            }
LABEL_75:

                            goto LABEL_137;
                          }
                          if (!v147)
                          {
                            uint64_t v65 = __nwlog_obj();
                            os_log_type_t v87 = type;
                            if (os_log_type_enabled(v65, type))
                            {
                              *(_DWORD *)long long buf = 136446210;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              _os_log_impl(&dword_1830D4000, v65, v87, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                            }
                            goto LABEL_75;
                          }
                          uint64_t v76 = (char *)__nw_create_backtrace_string();
                          int v77 = __nwlog_obj();
                          os_log_type_t v78 = type;
                          BOOL v79 = os_log_type_enabled(v77, type);
                          if (v76)
                          {
                            if (v79)
                            {
                              *(_DWORD *)long long buf = 136446466;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              __int16 v151 = 2082;
                              size_t v152 = v76;
                              _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                            }

                            free(v76);
                            if (!v64) {
                              goto LABEL_139;
                            }
                            goto LABEL_138;
                          }
                          if (v79)
                          {
                            *(_DWORD *)long long buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                          }
                        }
LABEL_137:
                        if (!v64)
                        {
LABEL_139:
                          os_log_type_t v33 = 0;
LABEL_150:

                          goto LABEL_151;
                        }
LABEL_138:
                        free(v64);
                        goto LABEL_139;
                      }
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      id v54 = (id)gLogObj;
                      *(_DWORD *)long long buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      char v55 = (char *)_os_log_send_and_compose_impl();

                      os_log_type_t type = OS_LOG_TYPE_ERROR;
                      char v147 = 0;
                      if (__nwlog_fault(v55, &type, &v147))
                      {
                        if (type == OS_LOG_TYPE_FAULT)
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          os_log_type_t v56 = (id)gLogObj;
                          os_log_type_t v57 = type;
                          if (os_log_type_enabled(v56, type))
                          {
                            *(_DWORD *)long long buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
                          }
LABEL_61:

                          goto LABEL_128;
                        }
                        if (!v147)
                        {
                          os_log_type_t v56 = __nwlog_obj();
                          os_log_type_t v86 = type;
                          if (os_log_type_enabled(v56, type))
                          {
                            *(_DWORD *)long long buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl(&dword_1830D4000, v56, v86, "%{public}s nw_tcp_create_options failed, backtrace limit exceeded", buf, 0xCu);
                          }
                          goto LABEL_61;
                        }
                        os_log_type_t v67 = (char *)__nw_create_backtrace_string();
                        __int16 v68 = __nwlog_obj();
                        os_log_type_t v69 = type;
                        BOOL v70 = os_log_type_enabled(v68, type);
                        if (v67)
                        {
                          if (v70)
                          {
                            *(_DWORD *)long long buf = 136446466;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            __int16 v151 = 2082;
                            size_t v152 = v67;
                            _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
                          }

                          free(v67);
                          if (!v55) {
                            goto LABEL_130;
                          }
                          goto LABEL_129;
                        }
                        if (v70)
                        {
                          *(_DWORD *)long long buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s nw_tcp_create_options failed, no backtrace", buf, 0xCu);
                        }
                      }
LABEL_128:
                      if (!v55)
                      {
LABEL_130:
                        os_log_type_t v33 = 0;
LABEL_151:

LABEL_152:
                        goto LABEL_153;
                      }
LABEL_129:
                      free(v55);
                      goto LABEL_130;
                    }
                    nw_interface_type_t v123 = __nwlog_obj();
                    *(_DWORD *)long long buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    char v124 = (char *)_os_log_send_and_compose_impl();

                    os_log_type_t type = OS_LOG_TYPE_ERROR;
                    char v147 = 0;
                    if (__nwlog_fault(v124, &type, &v147))
                    {
                      if (type == OS_LOG_TYPE_FAULT)
                      {
                        v125 = __nwlog_obj();
                        os_log_type_t v126 = type;
                        if (os_log_type_enabled(v125, type))
                        {
                          *(_DWORD *)long long buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          _os_log_impl(&dword_1830D4000, v125, v126, "%{public}s called with null stack", buf, 0xCu);
                        }
                      }
                      else
                      {
                        if (v147)
                        {
                          __int16 v134 = (char *)__nw_create_backtrace_string();
                          __int16 v135 = __nwlog_obj();
                          os_log_type_t v136 = type;
                          BOOL v137 = os_log_type_enabled(v135, type);
                          if (v134)
                          {
                            if (v137)
                            {
                              *(_DWORD *)long long buf = 136446466;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              __int16 v151 = 2082;
                              size_t v152 = v134;
                              _os_log_impl(&dword_1830D4000, v135, v136, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                            }

                            free(v134);
                          }
                          else
                          {
                            if (v137)
                            {
                              *(_DWORD *)long long buf = 136446210;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              _os_log_impl(&dword_1830D4000, v135, v136, "%{public}s called with null stack, no backtrace", buf, 0xCu);
                            }
                          }
                          goto LABEL_288;
                        }
                        v125 = __nwlog_obj();
                        os_log_type_t v138 = type;
                        if (os_log_type_enabled(v125, type))
                        {
                          *(_DWORD *)long long buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          _os_log_impl(&dword_1830D4000, v125, v138, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
                        }
                      }
                    }
LABEL_288:
                    if (v124) {
                      free(v124);
                    }
                    os_log_type_t v33 = 0;
                    goto LABEL_152;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v46 = (id)gLogObj;
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v147 = 0;
                  if (__nwlog_fault(v47, &type, &v147))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      os_log_type_t v48 = (id)gLogObj;
                      os_log_type_t v49 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)long long buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
                      }
                    }
                    else if (v147)
                    {
                      os_log_type_t v58 = __nw_create_backtrace_string();
                      if (v58)
                      {
                        __int16 v59 = (char *)v58;
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        id v60 = (id)gLogObj;
                        os_log_type_t v61 = type;
                        if (os_log_type_enabled(v60, type))
                        {
                          *(_DWORD *)long long buf = 136446466;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          __int16 v151 = 2082;
                          size_t v152 = v59;
                          _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v59);
                        if (!v47) {
                          goto LABEL_121;
                        }
                        goto LABEL_120;
                      }
                      os_log_type_t v48 = __nwlog_obj();
                      os_log_type_t v85 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)long long buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl(&dword_1830D4000, v48, v85, "%{public}s nw_quic_create_stream_options failed, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      os_log_type_t v48 = (id)gLogObj;
                      os_log_type_t v80 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)long long buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl(&dword_1830D4000, v48, v80, "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded", buf, 0xCu);
                      }
                    }
                  }
                  if (!v47)
                  {
LABEL_121:
                    os_log_type_t v33 = 0;
LABEL_153:

                    goto LABEL_154;
                  }
LABEL_120:
                  free(v47);
                  goto LABEL_121;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v38 = (id)gLogObj;
                *(_DWORD *)long long buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t type = OS_LOG_TYPE_ERROR;
                char v147 = 0;
                if (__nwlog_fault(v39, &type, &v147))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v40 = (id)gLogObj;
                    os_log_type_t v41 = type;
                    if (os_log_type_enabled(v40, type))
                    {
                      *(_DWORD *)long long buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s nw_tls_create_options failed", buf, 0xCu);
                    }
LABEL_39:

                    goto LABEL_105;
                  }
                  if (!v147)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v40 = (id)gLogObj;
                    os_log_type_t v71 = type;
                    if (os_log_type_enabled(v40, type))
                    {
                      *(_DWORD *)long long buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      _os_log_impl(&dword_1830D4000, v40, v71, "%{public}s nw_tls_create_options failed, backtrace limit exceeded", buf, 0xCu);
                    }
                    goto LABEL_39;
                  }
                  os_log_type_t v50 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v51 = (id)gLogObj;
                  os_log_type_t v52 = type;
                  BOOL v53 = os_log_type_enabled(v51, type);
                  if (v50)
                  {
                    if (v53)
                    {
                      *(_DWORD *)long long buf = 136446466;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      __int16 v151 = 2082;
                      size_t v152 = v50;
                      _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v50);
                    if (!v39) {
                      goto LABEL_107;
                    }
                    goto LABEL_106;
                  }
                  if (v53)
                  {
                    *(_DWORD *)long long buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
                  }
                }
LABEL_105:
                if (!v39)
                {
LABEL_107:
                  os_log_type_t v33 = 0;
LABEL_154:

                  goto LABEL_155;
                }
LABEL_106:
                free(v39);
                goto LABEL_107;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v34 = (id)gLogObj;
              *(_DWORD *)long long buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v147 = 0;
              if (__nwlog_fault(v35, &type, &v147))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v36 = (id)gLogObj;
                  os_log_type_t v37 = type;
                  if (os_log_type_enabled(v36, type))
                  {
                    *(_DWORD *)long long buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s nw_parameters_create failed", buf, 0xCu);
                  }
LABEL_34:

                  goto LABEL_85;
                }
                if (!v147)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v36 = (id)gLogObj;
                  os_log_type_t v62 = type;
                  if (os_log_type_enabled(v36, type))
                  {
                    *(_DWORD *)long long buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    _os_log_impl(&dword_1830D4000, v36, v62, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
                  }
                  goto LABEL_34;
                }
                os_log_type_t v42 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v43 = (id)gLogObj;
                os_log_type_t v44 = type;
                BOOL v45 = os_log_type_enabled(v43, type);
                if (v42)
                {
                  if (v45)
                  {
                    *(_DWORD *)long long buf = 136446466;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    __int16 v151 = 2082;
                    size_t v152 = v42;
                    _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v42);
                  if (!v35) {
                    goto LABEL_87;
                  }
                  goto LABEL_86;
                }
                if (v45)
                {
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
                }
              }
LABEL_85:
              if (!v35)
              {
LABEL_87:
                os_log_type_t v33 = 0;
LABEL_155:

                uint64_t v89 = v146;
                goto LABEL_156;
              }
LABEL_86:
              free(v35);
              goto LABEL_87;
            }
            uint64_t v105 = __nwlog_obj();
            *(_DWORD *)long long buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            __int16 v92 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __int16 v93 = __nwlog_obj();
                os_log_type_t v106 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v93, v106, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
                }
LABEL_255:

                goto LABEL_227;
              }
              if (!v147)
              {
                __int16 v93 = __nwlog_obj();
                os_log_type_t v133 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v93, v133, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_255;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              v108 = __nwlog_obj();
              os_log_type_t v121 = type;
              BOOL v122 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v122)
                {
                  *(_DWORD *)long long buf = 136446466;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  __int16 v151 = 2082;
                  size_t v152 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v108, v121, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
                }
LABEL_226:

                free(backtrace_string);
                goto LABEL_227;
              }
              if (v122)
              {
                *(_DWORD *)long long buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v108, v121, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
              }
              goto LABEL_281;
            }
          }
        }
        else
        {
          __int16 v99 = __nwlog_obj();
          *(_DWORD *)long long buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          __int16 v92 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v147 = 0;
          if (__nwlog_fault(v92, &type, &v147))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __int16 v93 = __nwlog_obj();
              os_log_type_t v100 = type;
              if (os_log_type_enabled(v93, type))
              {
                *(_DWORD *)long long buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v93, v100, "%{public}s called with null configure_quic_connection", buf, 0xCu);
              }
              goto LABEL_255;
            }
            if (!v147)
            {
              __int16 v93 = __nwlog_obj();
              os_log_type_t v130 = type;
              if (os_log_type_enabled(v93, type))
              {
                *(_DWORD *)long long buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v93, v130, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_255;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            v108 = __nwlog_obj();
            os_log_type_t v115 = type;
            BOOL v116 = os_log_type_enabled(v108, type);
            if (backtrace_string)
            {
              if (v116)
              {
                *(_DWORD *)long long buf = 136446466;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                __int16 v151 = 2082;
                size_t v152 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v108, v115, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              goto LABEL_226;
            }
            if (v116)
            {
              *(_DWORD *)long long buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              _os_log_impl(&dword_1830D4000, v108, v115, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
            }
            goto LABEL_281;
          }
        }
      }
      else
      {
        __int16 v97 = __nwlog_obj();
        *(_DWORD *)long long buf = 136446210;
        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
        __int16 v92 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v147 = 0;
        if (__nwlog_fault(v92, &type, &v147))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v93 = __nwlog_obj();
            os_log_type_t v98 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)long long buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              _os_log_impl(&dword_1830D4000, v93, v98, "%{public}s called with null configure_quic_stream", buf, 0xCu);
            }
            goto LABEL_255;
          }
          if (!v147)
          {
            __int16 v93 = __nwlog_obj();
            os_log_type_t v129 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)long long buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              _os_log_impl(&dword_1830D4000, v93, v129, "%{public}s called with null configure_quic_stream, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_255;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v108 = __nwlog_obj();
          os_log_type_t v113 = type;
          BOOL v114 = os_log_type_enabled(v108, type);
          if (backtrace_string)
          {
            if (v114)
            {
              *(_DWORD *)long long buf = 136446466;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              __int16 v151 = 2082;
              size_t v152 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v108, v113, "%{public}s called with null configure_quic_stream, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_226;
          }
          if (v114)
          {
            *(_DWORD *)long long buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            _os_log_impl(&dword_1830D4000, v108, v113, "%{public}s called with null configure_quic_stream, no backtrace", buf, 0xCu);
          }
          goto LABEL_281;
        }
      }
    }
    else
    {
      __int16 v95 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
      __int16 v92 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v147 = 0;
      if (__nwlog_fault(v92, &type, &v147))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v93 = __nwlog_obj();
          os_log_type_t v96 = type;
          if (os_log_type_enabled(v93, type))
          {
            *(_DWORD *)long long buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            _os_log_impl(&dword_1830D4000, v93, v96, "%{public}s called with null configure_tcp_fallback", buf, 0xCu);
          }
          goto LABEL_255;
        }
        if (!v147)
        {
          __int16 v93 = __nwlog_obj();
          os_log_type_t v128 = type;
          if (os_log_type_enabled(v93, type))
          {
            *(_DWORD *)long long buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            _os_log_impl(&dword_1830D4000, v93, v128, "%{public}s called with null configure_tcp_fallback, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_255;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v108 = __nwlog_obj();
        os_log_type_t v111 = type;
        BOOL v112 = os_log_type_enabled(v108, type);
        if (backtrace_string)
        {
          if (v112)
          {
            *(_DWORD *)long long buf = 136446466;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            __int16 v151 = 2082;
            size_t v152 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v108, v111, "%{public}s called with null configure_tcp_fallback, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_226;
        }
        if (v112)
        {
          *(_DWORD *)long long buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          _os_log_impl(&dword_1830D4000, v108, v111, "%{public}s called with null configure_tcp_fallback, no backtrace", buf, 0xCu);
        }
        goto LABEL_281;
      }
    }
  }
  else
  {
    __int16 v91 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
    __int16 v92 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v147 = 0;
    if (__nwlog_fault(v92, &type, &v147))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v93 = __nwlog_obj();
        os_log_type_t v94 = type;
        if (os_log_type_enabled(v93, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null configure_security", buf, 0xCu);
        }
        goto LABEL_255;
      }
      if (!v147)
      {
        __int16 v93 = __nwlog_obj();
        os_log_type_t v127 = type;
        if (os_log_type_enabled(v93, type))
        {
          *(_DWORD *)long long buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          _os_log_impl(&dword_1830D4000, v93, v127, "%{public}s called with null configure_security, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_255;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v108 = __nwlog_obj();
      os_log_type_t v109 = type;
      BOOL v110 = os_log_type_enabled(v108, type);
      if (backtrace_string)
      {
        if (v110)
        {
          *(_DWORD *)long long buf = 136446466;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          __int16 v151 = 2082;
          size_t v152 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v108, v109, "%{public}s called with null configure_security, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_226;
      }
      if (v110)
      {
        *(_DWORD *)long long buf = 136446210;
        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v108, v109, "%{public}s called with null configure_security, no backtrace", buf, 0xCu);
      }
      goto LABEL_281;
    }
  }
LABEL_227:
  uint64_t v89 = v146;
  if (v92) {
    free(v92);
  }
  os_log_type_t v33 = 0;
LABEL_156:

  return v33;
}

void sub_18378EC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

NSObject *nw_parameters_create_secure_tcp_or_quic_stream(void *a1, void *a2, void *a3, void *a4)
{
  return nw_parameters_create_quic_stream_with_tls_fallback(a1, a2, a3, 0, a4);
}

nw_parameters_t nw_parameters_create_custom_ip(uint8_t custom_ip_protocol_number, nw_parameters_configure_protocol_block_t configure_ip)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v3 = configure_ip;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __int16 v27 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v52 = "nw_parameters_create_custom_ip";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v28, &type, &v49)) {
      goto LABEL_96;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null configure_ip", buf, 0xCu);
      }
    }
    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          __int16 v53 = 2082;
          id v54 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null configure_ip, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v28) {
          goto LABEL_98;
        }
        goto LABEL_97;
      }
      if (v35)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null configure_ip, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v29, v46, "%{public}s called with null configure_ip, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_95;
  }
  if (v3 == (void (**)(nw_parameters_configure_protocol_block_t, void))&__block_literal_global_19196)
  {
    BOOL v31 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v52 = "nw_parameters_create_custom_ip";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v28, &type, &v49)) {
      goto LABEL_96;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v49)
    {
      BOOL v36 = (char *)__nw_create_backtrace_string();
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v29, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          __int16 v53 = 2082;
          id v54 = v36;
          _os_log_impl(&dword_1830D4000, v29, v37, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
LABEL_96:
        if (!v28)
        {
LABEL_98:
          id v9 = 0;
          goto LABEL_52;
        }
LABEL_97:
        free(v28);
        goto LABEL_98;
      }
      if (v38)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v29, v37, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_95:

    goto LABEL_96;
  }
  nw_parameters_t v5 = nw_parameters_create();
  if (v5)
  {
    nw_protocol_options_t options = nw_custom_ip_create_options(custom_ip_protocol_number);
    if (options)
    {
      int v7 = v5[19].isa;
      os_log_type_t v8 = v7;
      if (v7)
      {
        objc_storeStrong(v7 + 3, options);
        if (v4 != (void (**)(nw_parameters_configure_protocol_block_t, void))&__block_literal_global_98) {
          ((void (**)(nw_parameters_configure_protocol_block_t, id))v4)[2](v4, v8[6]);
        }
        BYTE4(v5[11].isa) = 1;
        id v9 = v5;
LABEL_9:

LABEL_50:
        goto LABEL_51;
      }
      os_log_type_t v39 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v52 = "nw_parameters_create_custom_ip";
      os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v49 = 0;
      if (__nwlog_fault(v40, &type, &v49))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v41 = __nwlog_obj();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v49)
        {
          BOOL v43 = (char *)__nw_create_backtrace_string();
          os_log_type_t v41 = __nwlog_obj();
          os_log_type_t v44 = type;
          BOOL v45 = os_log_type_enabled(v41, type);
          if (v43)
          {
            if (v45)
            {
              *(_DWORD *)long long buf = 136446466;
              os_log_type_t v52 = "nw_parameters_create_custom_ip";
              __int16 v53 = 2082;
              id v54 = v43;
              _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v43);
            goto LABEL_105;
          }
          if (v45)
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v41 = __nwlog_obj();
          os_log_type_t v48 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_1830D4000, v41, v48, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_105:
      if (v40) {
        free(v40);
      }
      id v9 = 0;
      goto LABEL_9;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v52 = "nw_parameters_create_custom_ip";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v15, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s nw_custom_ip_create_options failed", buf, 0xCu);
        }
      }
      else if (v49)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v16, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v52 = "nw_parameters_create_custom_ip";
            __int16 v53 = 2082;
            id v54 = v21;
            _os_log_impl(&dword_1830D4000, v16, v22, "%{public}s nw_custom_ip_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v15) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
        if (v23)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          _os_log_impl(&dword_1830D4000, v16, v22, "%{public}s nw_custom_ip_create_options failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (id)gLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s nw_custom_ip_create_options failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v15)
    {
LABEL_49:
      id v9 = 0;
      goto LABEL_50;
    }
LABEL_48:
    free(v15);
    goto LABEL_49;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v52 = "nw_parameters_create_custom_ip";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v49 = 0;
  if (__nwlog_fault(v11, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }
    else if (v49)
    {
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          __int16 v53 = 2082;
          id v54 = v18;
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        if (!v11) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v20)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v11) {
LABEL_39:
  }
    free(v11);
LABEL_40:
  id v9 = 0;
LABEL_51:

LABEL_52:
  return v9;
}

void sub_18378F964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *nw_parameters_create_legacy_tcp_socket(void *a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    BOOL v23 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v24, &type, &v37)) {
      goto LABEL_87;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null configure_tcp", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          __int16 v41 = 2082;
          os_log_type_t v42 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null configure_tcp, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v24) {
          goto LABEL_89;
        }
        goto LABEL_88;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null configure_tcp, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_86;
  }
  if (v1 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
  {
    __int16 v27 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v24, &type, &v37)) {
      goto LABEL_87;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v37)
    {
      os_log_type_t v32 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v25, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          __int16 v41 = 2082;
          os_log_type_t v42 = v32;
          _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
LABEL_87:
        if (!v24)
        {
LABEL_89:
          nw_parameters_t v5 = 0;
          goto LABEL_53;
        }
LABEL_88:
        free(v24);
        goto LABEL_89;
      }
      if (v34)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_86:

    goto LABEL_87;
  }
  nw_parameters_t v3 = nw_parameters_create();
  if (v3)
  {
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
    }
    nw_protocol_options_t options = nw_protocol_create_options((void *)g_tcp_definition);
    if (options)
    {
      if (nw_parameters_add_protocol_stack_member(v3, 3, 0, options))
      {
        if (v2 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
          v2[2](v2, options);
        }
        BYTE4(v3[11].isa) = 2;
        *((_WORD *)v3[13].isa + 50) |= 0x10u;
        nw_parameters_t v5 = v3;
        goto LABEL_51;
      }
LABEL_50:
      nw_parameters_t v5 = 0;
LABEL_51:

      goto LABEL_52;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v11, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
        }
      }
      else if (v37)
      {
        os_log_type_t v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v12, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
            __int16 v41 = 2082;
            os_log_type_t v42 = v17;
            _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (!v11) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s nw_tcp_create_options failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s nw_tcp_create_options failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v11) {
      goto LABEL_50;
    }
LABEL_49:
    free(v11);
    goto LABEL_50;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v7, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }
    else if (v37)
    {
      id v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          __int16 v41 = 2082;
          os_log_type_t v42 = v14;
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v14);
        if (!v7) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v7) {
LABEL_40:
  }
    free(v7);
LABEL_41:
  nw_parameters_t v5 = 0;
LABEL_52:

LABEL_53:
  return v5;
}

void sub_183790400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_parameters_copy_extended_description(NWConcrete_nw_parameters *a1)
{
  return nw_parameters_copy_description_internal(a1, 1);
}

void nw_parameters_set_account_id(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    int v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v20 = "nw_parameters_set_account_id";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v20 = "nw_parameters_set_account_id";
            __int16 v21 = 2082;
            os_log_type_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v8) {
      free(v8);
    }
    goto LABEL_8;
  }
  nw_parameters_t v5 = *(void **)(v3[13] + 112);
  if (v5)
  {
    free(v5);
    *(void *)(v4[13] + 112) = 0;
  }
  if (!a2 || strlen(a2) - 1 > 0x3FE) {
    goto LABEL_8;
  }
  id v6 = strdup(a2);
  if (v6)
  {
LABEL_7:
    *(void *)(v4[13] + 112) = v6;
LABEL_8:

    return;
  }
  id v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v20 = "strict_strdup";
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v15))
  {
    free(v15);
    goto LABEL_7;
  }
  __break(1u);
}

void nw_parameters_set_attribution_context(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    int v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v20 = "nw_parameters_set_attribution_context";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v20 = "nw_parameters_set_attribution_context";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v20 = "nw_parameters_set_attribution_context";
            __int16 v21 = 2082;
            os_log_type_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v20 = "nw_parameters_set_attribution_context";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v20 = "nw_parameters_set_attribution_context";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v8) {
      free(v8);
    }
    goto LABEL_8;
  }
  nw_parameters_t v5 = *(void **)(v3[13] + 120);
  if (v5)
  {
    free(v5);
    *(void *)(v4[13] + 120) = 0;
  }
  if (!a2 || strlen(a2) - 1 > 0x3FE) {
    goto LABEL_8;
  }
  id v6 = strdup(a2);
  if (v6)
  {
LABEL_7:
    *(void *)(v4[13] + 120) = v6;
LABEL_8:

    return;
  }
  id v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v20 = "strict_strdup";
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v15))
  {
    free(v15);
    goto LABEL_7;
  }
  __break(1u);
}

nw_parameters_t nw_parameters_copy(nw_parameters_t parameters)
{
  id v1 = parameters;
  BOOL v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v1, 0, 0);

  return (nw_parameters_t)v2;
}

void sub_183790B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_copy_connected(void *a1)
{
  id v1 = a1;
  BOOL v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v1, 1, 0);

  return v2;
}

void sub_183790BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_shallow_copy(void *a1)
{
  id v1 = a1;
  BOOL v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v1, 0, 1);

  return v2;
}

void sub_183790C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_privacy_context(nw_parameters_t parameters, nw_privacy_context_t privacy_context)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = privacy_context;
  nw_parameters_t v5 = v4;
  if (!v3)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v23 = "nw_parameters_set_privacy_context";
    int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v23 = "nw_parameters_set_privacy_context";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_parameters_set_context(v3, v4);
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v23 = "nw_parameters_set_privacy_context";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null privacy_context", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v23 = "nw_parameters_set_privacy_context";
    __int16 v24 = 2082;
    os_log_type_t v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_1837910D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_interface_t v4 = interface;
  nw_interface_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      unsigned int isa = v4[1].isa;
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v7 = (id)nw_context_copy_implicit_context::implicit_context;
      os_log_type_t v8 = nw_path_copy_interface_with_generation(v7, isa, 0);

      BOOL v9 = nw_interface_shallow_compare(v8, v5);
      Class v10 = v3[13].isa;
      if (v9) {
        os_log_type_t v11 = v8;
      }
      else {
        os_log_type_t v11 = (NWConcrete_nw_interface *)v5;
      }
      os_log_type_t v12 = v11;
      os_log_type_t v13 = (void *)*((void *)v10 + 21);
      *((void *)v10 + 21) = v12;
    }
    else
    {
      Class v14 = v3[13].isa;
      os_log_type_t v15 = (void *)*((void *)v14 + 21);
      *((void *)v14 + 21) = 0;
    }
    goto LABEL_10;
  }
  os_log_type_t v16 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v27 = "nw_parameters_require_interface";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v27 = "nw_parameters_require_interface";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v22)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v17) {
    free(v17);
  }
LABEL_10:
}

void sub_18379141C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_required_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    Class isa = v3[13].isa;
    if ((*((_WORD *)isa + 50) & 0x100) != 0) {
      *((_DWORD *)isa + 23) = interface_type;
    }
    else {
      *((_DWORD *)isa + 19) = interface_type;
    }
    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v17 = "nw_parameters_set_required_interface_type";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v17 = "nw_parameters_set_required_interface_type";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_next_hop_required_interface_type(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 92) = a2;
    goto LABEL_3;
  }
  nw_interface_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_required_interface_subtype(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    if ((*(_WORD *)(v5 + 100) & 0x100) != 0) {
      *(_DWORD *)(v5 + 96) = a2;
    }
    else {
      *(_DWORD *)(v5 + 80) = a2;
    }
    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_required_interface_subtype";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_required_interface_subtype";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_next_hop_required_interface_subtype(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 96) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_only_primary_requires_type(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 32;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100) = *(_WORD *)(*((void *)v3 + 13) + 100) & 0xFFDF | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_only_primary_requires_type";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_only_primary_requires_type";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_parameters_clear_custom_proxy_configs(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = (void *)*((void *)v1 + 22);
    *((void *)v1 + 22) = 0;

    goto LABEL_3;
  }
  nw_parameters_t v4 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
  __int16 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void nw_parameters_set_proxy_configuration(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  xpc_object_t v5 = v4;
  xpc_object_t objects = v4;
  if (v3)
  {
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E4F14590])
    {
      xpc_object_t v7 = xpc_array_create(&objects, 1uLL);
      os_log_type_t v8 = v7;
      if (v7)
      {
        id v9 = nw_proxy_configs_create_with_schema_array(v7);
        BOOL v10 = (void *)v3[22];
        v3[22] = v9;
      }
      xpc_object_t v5 = objects;
    }
    else
    {
      id v6 = (void *)v3[22];
      v3[22] = 0;
    }
    goto LABEL_8;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v23 = "nw_parameters_set_proxy_configuration";
  char v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v23 = "nw_parameters_set_proxy_configuration";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v12) {
    free(v12);
  }
LABEL_8:
}

void sub_1837926F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_effective_proxy_config(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 23, a2);
    goto LABEL_3;
  }
  xpc_object_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_parameters_copy_effective_proxy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1[23];
    goto LABEL_3;
  }
  xpc_object_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_effective_audit_token(void *a1, long long *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    long long v5 = *a2;
    *(_OWORD *)(v3 + 56) = a2[1];
    *(_OWORD *)(v3 + 40) = v5;
    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_effective_audit_token";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_effective_audit_token";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void nw_parameters_set_proxy_bundle_id(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    xpc_object_t v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_parameters_set_proxy_bundle_id";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v20 = "nw_parameters_set_proxy_bundle_id";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v8) {
      free(v8);
    }
    goto LABEL_8;
  }
  long long v5 = (void *)v3[15];
  if (v5)
  {
    free(v5);
    v4[15] = 0;
  }
  if (!a2 || strlen(a2) - 1 > 0x3FE) {
    goto LABEL_8;
  }
  id v6 = strdup(a2);
  if (v6)
  {
LABEL_7:
    v4[15] = v6;
LABEL_8:

    return;
  }
  char v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446210;
  uint64_t v20 = "strict_strdup";
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v15))
  {
    free(v15);
    goto LABEL_7;
  }
  __break(1u);
}

BOOL nw_parameters_get_proxy_bundle_id(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v14, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
            __int16 v27 = 2082;
            __int16 v28 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_40:
    if (v14) {
      free(v14);
    }
    uint64_t v11 = 0;
    goto LABEL_21;
  }
  if (*((void *)v1 + 15))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (void *)v2[15];
      *(_DWORD *)long long buf = 136446466;
      uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
      __int16 v27 = 2080;
      __int16 v28 = v4;
      long long v5 = "%{public}s Using configured proxy bundle ID %s";
      id v6 = v3;
      uint32_t v7 = 22;
LABEL_18:
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  os_log_type_t v8 = (const char *)*((void *)v1 + 14);
  if (v8)
  {
    *((void *)v1 + 15) = 0;
  }
  else
  {
    if (nw_parameters_copy_self_proxy_bundle_id(void)::onceToken[0] != -1) {
      dispatch_once(nw_parameters_copy_self_proxy_bundle_id(void)::onceToken, &__block_literal_global_396);
    }
    os_log_type_t v8 = (const char *)v2[14];
    v2[15] = 0;
    if (!v8)
    {
      if (nw_utilities_get_self_bundle_id::onceToken != -1) {
        dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_9);
      }
      os_log_type_t v8 = (const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
      if (!nw_utilities_get_self_bundle_id::bundle_identifier_string) {
        goto LABEL_20;
      }
    }
  }
  if (strlen(v8) - 1 > 0x3FE)
  {
LABEL_16:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v2[14];
      *(_DWORD *)long long buf = 136446722;
      uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
      __int16 v27 = 2080;
      __int16 v28 = (void *)v8;
      __int16 v29 = 2080;
      uint64_t v30 = v10;
      long long v5 = "%{public}s Using set bundle ID %s (effective %s)";
      id v6 = v3;
      uint32_t v7 = 32;
      goto LABEL_18;
    }
LABEL_19:

LABEL_20:
    uint64_t v11 = v2[15];
LABEL_21:

    return v11;
  }
  os_log_type_t v9 = strdup(v8);
  if (v9)
  {
LABEL_15:
    v2[15] = v9;
    goto LABEL_16;
  }
  __int16 v21 = __nwlog_obj();
  os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446210;
  uint64_t v26 = "strict_strdup";
  BOOL v22 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v22);
  if (!result)
  {
    free(v22);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

void ___ZL39nw_parameters_copy_self_proxy_bundle_idv_block_invoke()
{
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_9);
  }
}

void nw_parameters_set_e_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((void *)v3 + 13) + 24) = *a2;
    goto LABEL_3;
  }
  long long v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_e_proc_uuid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_e_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_e_proc_uuid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_e_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_e_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_source_application_by_external_bundle_id(void *a1, const char *a2)
{
}

uint64_t nw_parameters_get_effective_process_name(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[14];
    if (!v3)
    {
      id v4 = v1;
      if (uuid_is_null((const unsigned __int8 *)(v4[13] + 24)))
      {
      }
      else
      {
        int v18 = uuid_compare((const unsigned __int8 *)(v4[13] + 24), (const unsigned __int8 *)(v4[13] + 8));

        if (v18)
        {
          *(_OWORD *)uuid_t uu = *(_OWORD *)(v4[13] + 24);
          if (!uuid_is_null(uu))
          {
            BOOL v19 = nw_utilities_copy_bundle_id_for_uuid(uu);
            if (v19)
            {
              nw_parameters_set_effective_bundle_id(v4, (const char *)v19);
              free((void *)v19);
            }
          }
        }
      }
      *(_OWORD *)os_log_type_t type = 0u;
      long long v35 = 0u;
      if (nw_copy_current_audit_token(type))
      {
        long long v5 = v4;
        id v6 = v5;
        long long v7 = *(_OWORD *)(v5 + 56);
        *(_OWORD *)uuid_t uu = *(_OWORD *)(v5 + 40);
        *(_OWORD *)&unsigned __int8 uu[16] = v7;
        if (*(void *)uu | *(void *)&uu[8] | (unint64_t)v7 | *((void *)&v7 + 1))
        {
          BOOL v11 = *((void *)v5 + 5) == *(void *)type
             && *((void *)v5 + 6) == *(void *)&type[8]
             && *((void *)v5 + 7) == (void)v35
             && *((void *)v5 + 8) == *((void *)&v35 + 1);

          if (!v11)
          {
            os_log_type_t v12 = (long long *)(v6 + 40);
            long long v36 = 0u;
            long long v37 = 0u;
            char v13 = v6;
            char v14 = v13;
            long long v15 = v12[1];
            *(_OWORD *)uuid_t uu = *v12;
            *(_OWORD *)&unsigned __int8 uu[16] = v15;
            if (*(void *)uu | *(void *)&uu[8] | (unint64_t)v15 | *((void *)&v15 + 1))
            {
              long long v16 = v12[1];
              long long v36 = *v12;
              long long v37 = v16;
            }

            v33[2] = v36;
            v33[3] = v37;
            if ((unint64_t)v36 | *((void *)&v36 + 1) | (unint64_t)v37 | *((void *)&v37 + 1))
            {
              v33[0] = v36;
              v33[1] = v37;
              BOOL v17 = nw_utilities_copy_bundle_id_for_audit_token(v33);
              if (v17)
              {
                nw_parameters_set_effective_bundle_id(v14, (const char *)v17);
                free((void *)v17);
              }
            }
          }
        }
        else
        {
        }
      }
      pid_t v20 = getpid();
      int v21 = *(_DWORD *)(v4[13] + 64);
      if (v21 >= 1 && v21 != v20)
      {
        BOOL v23 = nw_utilities_copy_bundle_id_for_pid(v21);
        if (v23)
        {
          nw_parameters_set_effective_bundle_id(v4, (const char *)v23);
          free((void *)v23);
        }
      }
      uint64_t v3 = v2[14];
      if (!v3)
      {
        if (nw_utilities_get_self_name::onceToken != -1) {
          dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_11_44681);
        }
        uint64_t v3 = nw_utilities_get_self_name::name;
      }
    }
    goto LABEL_40;
  }
  os_log_type_t v25 = __nwlog_obj();
  *(_DWORD *)uuid_t uu = 136446210;
  *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
  uint64_t v26 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v36) = 0;
  if (__nwlog_fault(v26, type, &v36))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null parameters", uu, 0xCu);
      }
    }
    else if ((_BYTE)v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v27 = __nwlog_obj();
      os_log_type_t v30 = type[0];
      BOOL v31 = os_log_type_enabled(v27, type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)uuid_t uu = 136446466;
          *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
          *(_WORD *)&uu[12] = 2082;
          *(void *)&uu[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null parameters, dumping backtrace:%{public}s", uu, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_57;
      }
      if (v31)
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null parameters, no backtrace", uu, 0xCu);
      }
    }
    else
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s called with null parameters, backtrace limit exceeded", uu, 0xCu);
      }
    }
  }
LABEL_57:
  if (v26) {
    free(v26);
  }
  uint64_t v3 = 0;
LABEL_40:

  return v3;
}

void sub_183793EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_pid(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 64) = a2;
    goto LABEL_3;
  }
  long long v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  long long v16 = "nw_parameters_set_pid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_pid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      long long v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          long long v16 = "nw_parameters_set_pid";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_pid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_pid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_uid(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 68) = a2;
    goto LABEL_3;
  }
  long long v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  long long v16 = "nw_parameters_set_uid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_uid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      long long v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          long long v16 = "nw_parameters_set_uid";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_uid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_uid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_application_id(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    uu[0] = 0;
    if (!__nwlog_fault(v11, type, uu)) {
      goto LABEL_49;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (uu[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v18 = type[0];
      BOOL v19 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v11) {
          goto LABEL_12;
        }
LABEL_50:
        free(v11);
        goto LABEL_12;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v4)
  {
    memset(buf, 0, 32);
    nw_application_id_get_audit_token(v4, buf);
    if (*(void *)buf | *(void *)&buf[8] | *(void *)&buf[16] | *(void *)&buf[24])
    {
      long long v6 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v3 + 40) = *(_OWORD *)buf;
      *(_OWORD *)(v3 + 56) = v6;
    }
    memset(uu, 0, sizeof(uu));
    nw_application_id_get_uuid(v5, uu);
    if (!uuid_is_null(uu)) {
      *(_OWORD *)(*((void *)v3 + 13) + 24) = *(_OWORD *)uu;
    }
    long long v7 = v5;
    os_log_type_t v8 = (const char *)v7[10];

    if (v8) {
      nw_parameters_set_effective_bundle_id(v3, v8);
    }
    os_log_type_t v9 = v7;
    *(_OWORD *)BOOL v31 = *(_OWORD *)(v9 + 88);

    if (!uuid_is_null(v31)) {
      *(_OWORD *)(*((void *)v3 + 13) + 40) = *(_OWORD *)v31;
    }
    if (gLogDatapath)
    {
      long long v16 = __nwlog_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)os_log_type_t type = 136446722;
        uint64_t v26 = "nw_parameters_set_application_id";
        __int16 v27 = 2112;
        os_log_type_t v28 = v9;
        __int16 v29 = 2112;
        os_log_type_t v30 = v3;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s set %@ on %@", (uint8_t *)type, 0x20u);
      }
    }
    goto LABEL_12;
  }
  char v14 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  uu[0] = 0;
  if (!__nwlog_fault(v11, type, uu)) {
    goto LABEL_49;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type[0];
    if (os_log_type_enabled(v12, type[0]))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null application_id", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!uu[0])
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v24 = type[0];
    if (os_log_type_enabled(v12, type[0]))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
      _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  pid_t v20 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v21 = type[0];
  BOOL v22 = os_log_type_enabled(v12, type[0]);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v22)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v20;
    _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v11) {
    goto LABEL_50;
  }
LABEL_12:
}

void sub_1837949FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_persona(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((void *)v3 + 13) + 40) = *a2;
    goto LABEL_3;
  }
  long long v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  long long v16 = "nw_parameters_set_persona";
  long long v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      long long v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          long long v16 = "nw_parameters_set_persona";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        long long v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_use_persona(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      int v9 = 0x80000;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFF7FFFF;
    *(_WORD *)uint64_t v6 = v10;
    *(unsigned char *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v22 = "nw_parameters_set_use_persona";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_persona";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v22 = "nw_parameters_set_use_persona";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_persona";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_persona";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

uint64_t nw_parameters_get_use_persona(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int8 *)(*((void *)v1 + 13) + 110) >> 3) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_use_persona";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_persona";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_use_persona";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_persona";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_persona";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_main_document_url(void *a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2 && *a2)
    {
      nw_endpoint_t url = nw_endpoint_create_url(a2);
      uint64_t v6 = (void *)v4[26];
      v4[26] = url;
    }
    else
    {
      uint64_t v6 = (void *)v3[26];
      v3[26] = 0;
    }

    goto LABEL_7;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_main_document_url";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_main_document_url";
          __int16 v19 = 2082;
          pid_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v8) {
    free(v8);
  }
LABEL_7:
}

void sub_1837954D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_parameters_get_main_document_url(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v17 = "nw_parameters_get_main_document_url";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v17 = "nw_parameters_get_main_document_url";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = v1[26];
  if (!v3)
  {
LABEL_22:
    nw_endpoint_t url = 0;
    goto LABEL_23;
  }
  nw_endpoint_t url = nw_endpoint_get_url(v3);
LABEL_23:

  return url;
}

void sub_183795784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef nw_parameters_copy_main_document_cfurl(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v17 = "nw_parameters_copy_main_document_cfurl";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v17 = "nw_parameters_copy_main_document_cfurl";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = (void *)*((void *)v1 + 26);
  if (!v3)
  {
LABEL_22:
    CFTypeRef v4 = 0;
    goto LABEL_23;
  }
  CFTypeRef v4 = nw_endpoint_copy_cfurl(v3);
LABEL_23:

  return v4;
}

void sub_183795A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_delegated_unique_pid(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  CFTypeRef v4 = v3;
  if (v3)
  {
    *(void *)(*((void *)v3 + 13) + 56) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_delegated_unique_pid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_delegated_unique_pid";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_required_address_family(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  CFTypeRef v4 = v3;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v22 = "nw_parameters_set_required_address_family";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)long long buf = 136446466;
            BOOL v22 = "nw_parameters_set_required_address_family";
            __int16 v23 = 2082;
            os_log_type_t v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v17)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v13 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_29:
    if (v12) {
      free(v12);
    }
    goto LABEL_12;
  }
  uint64_t v5 = *(void **)(v3[19] + 48);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = v6[1];

    if (nw_protocol_setup_ip_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_53153);
    }
    id v8 = (id)g_ip_definition;
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

    if (!is_equal_unsafe) {
      goto LABEL_11;
    }
    if (a2 == 2)
    {
      nw_ip_version_t v10 = nw_ip_version_4;
    }
    else
    {
      if (a2 != 30)
      {
LABEL_11:

        goto LABEL_12;
      }
      nw_ip_version_t v10 = nw_ip_version_6;
    }
    nw_ip_options_set_version(*(nw_protocol_options_t *)(v4[19] + 48), v10);
    goto LABEL_11;
  }
LABEL_12:
}

void sub_183796010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_local_address_preference(void *a1, nw_ip_local_address_preference_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  CFTypeRef v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(void **)(v3[19] + 48);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = v6[1];

      if (nw_protocol_setup_ip_definition(void)::onceToken != -1) {
        dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_53153);
      }
      id v8 = (id)g_ip_definition;
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

      if (is_equal_unsafe) {
        nw_ip_options_set_local_address_preference(*(nw_protocol_options_t *)(v4[19] + 48), a2);
      }
    }
    goto LABEL_8;
  }
  nw_ip_version_t v10 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v21 = "nw_parameters_set_local_address_preference";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v21 = "nw_parameters_set_local_address_preference";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v11) {
    free(v11);
  }
LABEL_8:
}

void sub_183796348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_parameters_get_upper_transport_protocol_options_block_invoke(uint64_t a1, void *a2)
{
  nw_protocol_options_t options = a2;
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  id v4 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(options);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

void sub_183796438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
  BOOL v2 = reuse_local_address;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 256;
    if (!v2) {
      uint64_t v5 = 0;
    }
    v3[12].Class isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFFFFFFEFFLL | v5);
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

const char *nw_data_mode_to_string(unsigned int a1)
{
  if (a1 > 3) {
    return "unknown";
  }
  else {
    return off_1E523D450[a1];
  }
}

void nw_parameters_set_expected_workload(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((void *)v3 + 9) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_set_expected_workload";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_set_expected_workload";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_parameters_get_expected_workload(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 9);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_get_expected_workload";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_get_expected_workload";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_channel_teardown_delay(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((void *)v3 + 10) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_set_channel_teardown_delay";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_set_channel_teardown_delay";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_parameters_get_channel_teardown_delay(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 10);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_get_channel_teardown_delay";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_get_channel_teardown_delay";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_channel_demux_options(void *a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __int16 v22 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v39 = "nw_parameters_set_channel_demux_options";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v19, &type, &v36)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v39 = "nw_parameters_set_channel_demux_options";
          __int16 v40 = 2082;
          uint64_t v41 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_56:
        if (!v19)
        {
LABEL_19:

          return;
        }
LABEL_57:
        free(v19);
        goto LABEL_19;
      }
      if (v26)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_55:

    goto LABEL_56;
  }
  if (!v4)
  {
    uint64_t v15 = *(void *)(*((void *)v3 + 13) + 176);
    if (v15)
    {
      objc_storeStrong((id *)(v15 + 128), 0);
      uint64_t v16 = *(void *)(*((void *)v3 + 13) + 176);
      __int16 v17 = *(void **)(v16 + 136);
      *(void *)(v16 + 136) = 0;
    }
    goto LABEL_19;
  }
  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
  }
  if (!nw_protocol_demux_copy_definition::definition)
  {
    if (nw_protocol_options_matches_definition(v5, 0)) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  uint64_t v6 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
  BOOL v7 = nw_protocol_options_matches_definition(v5, v6);
  if (v6) {
    os_release(v6);
  }
  if (!v7)
  {
LABEL_21:
    __int16 v18 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v39 = "nw_parameters_set_channel_demux_options";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v19, &type, &v36)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null nw_protocol_options_is_demux(demux_options)", buf, 0xCu);
      }
    }
    else if (v36)
    {
      __int16 v27 = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v20, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v39 = "nw_parameters_set_channel_demux_options";
          __int16 v40 = 2082;
          uint64_t v41 = (uint64_t)v27;
          _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null nw_protocol_options_is_demux(demux_options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_57;
      }
      if (v29)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null nw_protocol_options_is_demux(demux_options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s called with null nw_protocol_options_is_demux(demux_options), backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_55;
  }
LABEL_9:
  uint64_t v8 = *(void *)(*((void *)v3 + 13) + 176);
  if (v8) {
    goto LABEL_12;
  }
  os_log_type_t v9 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v9)
  {
LABEL_11:
    *(void *)(*((void *)v3 + 13) + 176) = v9;
    uint64_t v8 = *(void *)(*((void *)v3 + 13) + 176);
LABEL_12:
    objc_storeStrong((id *)(v8 + 128), a2);
    if (!uuid_is_null(v3 + 8))
    {
      os_log_type_t v10 = *(void **)(*(void *)(*((void *)v3 + 13) + 176) + 136);
      if (!v10)
      {
        xpc_object_t v11 = xpc_array_create(0, 0);
        uint64_t v12 = *(void *)(*((void *)v3 + 13) + 176);
        char v13 = *(void **)(v12 + 136);
        *(void *)(v12 + 136) = v11;

        os_log_type_t v10 = *(void **)(*(void *)(*((void *)v3 + 13) + 176) + 136);
      }
      xpc_array_set_uuid(v10, 0xFFFFFFFFFFFFFFFFLL, v3 + 8);
      char v14 = (void *)*((void *)v3 + 17);
      if (v14)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_parameters_set_channel_demux_options_block_invoke;
        applier[3] = &unk_1E524B4A0;
        long long v35 = v3;
        xpc_array_apply(v14, applier);
      }
    }
    goto LABEL_19;
  }
  os_log_type_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446722;
  uint64_t v39 = "strict_calloc";
  __int16 v40 = 2048;
  uint64_t v41 = 1;
  __int16 v42 = 2048;
  uint64_t v43 = 144;
  BOOL v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    os_log_type_t v9 = 0;
    goto LABEL_11;
  }
  __break(1u);
}

void sub_18379788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_set_channel_demux_options_block_invoke(uint64_t a1, int a2, xpc_object_t value)
{
  return 1;
}

void nw_parameters_set_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((void *)v3 + 13) + 8) = *a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v16 = "nw_parameters_set_proc_uuid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v16 = "nw_parameters_set_proc_uuid";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_parent_id(NWConcrete_nw_parameters *a1, const unsigned __int8 *a2)
{
}

void nw_parameters_add_parent_id(void *a1, const unsigned __int8 *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = (unsigned __int8 *)v3;
  if (!v3)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v30 = "nw_parameters_add_parent_id";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v30 = "nw_parameters_add_parent_id";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_47:
        if (!v14) {
          goto LABEL_13;
        }
LABEL_48:
        free(v14);
        goto LABEL_13;
      }
      if (v21)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_46:

    goto LABEL_47;
  }
  if (a2)
  {
    if (uuid_is_null(v3 + 8))
    {
      *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v5 = (void *)*((void *)v4 + 17);
      if (!v5)
      {
        xpc_object_t v6 = xpc_array_create(0, 0);
        BOOL v7 = (void *)*((void *)v4 + 17);
        *((void *)v4 + 17) = v6;

        uint64_t v5 = (void *)*((void *)v4 + 17);
      }
      xpc_array_set_uuid(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    }
    uint64_t v8 = *(void *)(*((void *)v4 + 13) + 176);
    if (v8 && *(void *)(v8 + 128))
    {
      os_log_type_t v9 = *(void **)(v8 + 136);
      if (!v9)
      {
        xpc_object_t v10 = xpc_array_create(0, 0);
        uint64_t v11 = *(void *)(*((void *)v4 + 13) + 176);
        os_log_type_t v12 = *(void **)(v11 + 136);
        *(void *)(v11 + 136) = v10;

        os_log_type_t v9 = *(void **)(*(void *)(*((void *)v4 + 13) + 176) + 136);
      }
      xpc_array_set_uuid(v9, 0xFFFFFFFFFFFFFFFFLL, a2);
    }
    goto LABEL_13;
  }
  __int16 v17 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v30 = "nw_parameters_add_parent_id";
  char v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v14, &type, &v27)) {
    goto LABEL_47;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null parent_id", buf, 0xCu);
    }
    goto LABEL_46;
  }
  if (!v27)
  {
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v26 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null parent_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_46;
  }
  __int16 v22 = (char *)__nw_create_backtrace_string();
  uint64_t v15 = __nwlog_obj();
  os_log_type_t v23 = type;
  BOOL v24 = os_log_type_enabled(v15, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null parent_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_46;
  }
  if (v24)
  {
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v30 = "nw_parameters_add_parent_id";
    __int16 v31 = 2082;
    os_log_type_t v32 = v22;
    _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null parent_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v22);
  if (v14) {
    goto LABEL_48;
  }
LABEL_13:
}

void sub_1837980C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_get_parent_id(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v22 = "nw_parameters_get_parent_id";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v22 = "nw_parameters_get_parent_id";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 8);
    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v22 = "nw_parameters_get_parent_id";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null destination", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    BOOL v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null destination, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v14 = (char *)__nw_create_backtrace_string();
  BOOL v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null destination, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v22 = "nw_parameters_get_parent_id";
    __int16 v23 = 2082;
    BOOL v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_parameters_iterate_parent_ids_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    bytes = xpc_uuid_get_bytes(v4);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, const uint8_t *))(v6 + 16))(v6, bytes);
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

void sub_1837985E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_dry_run(void *a1, unsigned int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFFELL | a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_set_dry_run";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_set_dry_run";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_prohibit_expensive(nw_parameters_t parameters, BOOL prohibit_expensive)
{
  __int16 v2 = prohibit_expensive;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((_WORD *)v3[13].isa + 50) = *((_WORD *)v3[13].isa + 50) & 0xFFFE | v2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_set_prohibit_expensive";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_set_prohibit_expensive";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_prohibit_constrained(nw_parameters_t parameters, BOOL prohibit_constrained)
{
  BOOL v2 = prohibit_constrained;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (v2) {
      __int16 v5 = 2;
    }
    else {
      __int16 v5 = 0;
    }
    *((_WORD *)v3[13].isa + 50) = *((_WORD *)v3[13].isa + 50) & 0xFFFD | v5;
    goto LABEL_6;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_prohibit_constrained";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_constrained";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_prohibit_constrained";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_constrained";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_constrained";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_parameters_set_prohibit_roaming(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 8;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100) = *(_WORD *)(*((void *)v3 + 13) + 100) & 0xFFF7 | v5;
    goto LABEL_6;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_prohibit_roaming";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_prohibit_roaming";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t __nw_parameters_prohibit_interface_type_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F8])
  {
    uint64_t v5 = 1;
    if (xpc_uint64_get_value(v4) == *(_DWORD *)(a1 + 40))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_183799118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_clear_prohibited_interface_types(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = (void **)*((void *)v1[13].isa + 22);
    if (v3)
    {
      id v4 = *v3;
      char *v3 = 0;
    }
    goto LABEL_4;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_clear_prohibited_interface_types";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_clear_prohibited_interface_types";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_4:
}

void nw_parameters_iterate_prohibited_interface_types(nw_parameters_t parameters, nw_parameters_iterate_interface_types_block_t iterate_block)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_iterate_interface_types_block_t v4 = iterate_block;
  uint64_t v5 = v4;
  if (v3)
  {
    uint64_t v6 = (void **)*((void *)v3[13].isa + 22);
    if (v6)
    {
      BOOL v7 = *v6;
      if (*v6)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_parameters_iterate_prohibited_interface_types_block_invoke;
        applier[3] = &unk_1E5244348;
        id v17 = v4;
        xpc_array_apply(v7, applier);
      }
    }
    goto LABEL_5;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v9) {
    free(v9);
  }
LABEL_5:
}

void sub_1837996DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_iterate_prohibited_interface_types_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  xpc_uint64_get_value(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v5;
}

void sub_18379974C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interface_subtypes(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F145F8];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void *)(v3[13] + 176);
        os_log_type_t v9 = *(void **)(v8 + 8);
        *(void *)(v8 + 8) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  id v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  char v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_183799B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_interface_subtypes(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F145F8];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void *)(v3[13] + 176);
        os_log_type_t v9 = *(void **)(v8 + 16);
        *(void *)(v8 + 16) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  id v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  char v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_183799FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_prohibit_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  id v4 = interface;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v46 = "nw_parameters_prohibit_interface";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v14, &type, &v43)) {
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          __int16 v47 = 2082;
          uint64_t v48 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v14) {
          goto LABEL_12;
        }
LABEL_73:
        free(v14);
        goto LABEL_12;
      }
      if (v25)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v15, v36, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  if (!v4)
  {
    id v17 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v46 = "nw_parameters_prohibit_interface";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v14, &type, &v43)) {
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v43)
    {
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v15, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          __int16 v47 = 2082;
          uint64_t v48 = (uint64_t)v26;
          _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        if (!v14) {
          goto LABEL_12;
        }
        goto LABEL_73;
      }
      if (v28)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v15, v37, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_71;
  }
  uint64_t v6 = nw_interface_copy_dictionary(v4);
  if (!v6)
  {
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v46 = "nw_parameters_prohibit_interface";
    char v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43)) {
      goto LABEL_83;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null interface_dictionary", buf, 0xCu);
      }
    }
    else if (v43)
    {
      BOOL v29 = (char *)__nw_create_backtrace_string();
      BOOL v21 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v21, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          __int16 v47 = 2082;
          uint64_t v48 = (uint64_t)v29;
          _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null interface_dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
LABEL_83:
        if (!v20) {
          goto LABEL_11;
        }
LABEL_84:
        free(v20);
        goto LABEL_11;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null interface_dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_1830D4000, v21, v38, "%{public}s called with null interface_dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_82:

    goto LABEL_83;
  }
  uint64_t v7 = *((void *)v3[13].isa + 22);
  if (v7)
  {
    uint64_t v8 = *(xpc_object_t **)(v7 + 24);
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  os_log_type_t v9 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v9)
  {
LABEL_8:
    *((void *)v3[13].isa + 22) = v9;
    uint64_t v8 = *(xpc_object_t **)(*((void *)v3[13].isa + 22) + 24);
    if (!v8)
    {
LABEL_9:
      xpc_object_t v10 = xpc_array_create(v8, 0);
      uint64_t v11 = *((void *)v3[13].isa + 22);
      os_log_type_t v12 = *(void **)(v11 + 24);
      *(void *)(v11 + 24) = v10;

      uint64_t v8 = *(xpc_object_t **)(*((void *)v3[13].isa + 22) + 24);
      if (v8) {
        goto LABEL_10;
      }
      uint64_t v34 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v46 = "nw_parameters_prohibit_interface";
      char v20 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (!__nwlog_fault(v20, &type, &v43)) {
        goto LABEL_83;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v21 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          _os_log_impl(&dword_1830D4000, v21, v35, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces", buf, 0xCu);
        }
      }
      else if (v43)
      {
        uint64_t v39 = (char *)__nw_create_backtrace_string();
        BOOL v21 = __nwlog_obj();
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v21, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v46 = "nw_parameters_prohibit_interface";
            __int16 v47 = 2082;
            uint64_t v48 = (uint64_t)v39;
            _os_log_impl(&dword_1830D4000, v21, v40, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
          if (!v20) {
            goto LABEL_11;
          }
          goto LABEL_84;
        }
        if (v41)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          _os_log_impl(&dword_1830D4000, v21, v40, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v21 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          _os_log_impl(&dword_1830D4000, v21, v42, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_82;
    }
LABEL_10:
    xpc_array_set_value(v8, 0xFFFFFFFFFFFFFFFFLL, v6);
LABEL_11:

LABEL_12:
    return;
  }
  os_log_type_t v32 = __nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446722;
  os_log_type_t v46 = "strict_calloc";
  __int16 v47 = 2048;
  uint64_t v48 = 1;
  __int16 v49 = 2048;
  uint64_t v50 = 144;
  uint64_t v33 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v33))
  {
    free(v33);
    goto LABEL_8;
  }
  __break(1u);
}

void sub_18379A9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_clear_prohibited_interfaces(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1[13].isa + 22);
    if (v3)
    {
      id v4 = *(void **)(v3 + 24);
      *(void *)(v3 + 24) = 0;
    }
    goto LABEL_4;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_4:
}

void nw_parameters_iterate_prohibited_interfaces(nw_parameters_t parameters, nw_parameters_iterate_interfaces_block_t iterate_block)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_iterate_interfaces_block_t v4 = iterate_block;
  uint64_t v5 = v4;
  if (v3)
  {
    uint64_t v6 = *((void *)v3[13].isa + 22);
    if (v6)
    {
      uint64_t v7 = *(void **)(v6 + 24);
      if (v7)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_parameters_iterate_prohibited_interfaces_block_invoke;
        applier[3] = &unk_1E5244348;
        id v17 = v4;
        xpc_array_apply(v7, applier);
      }
    }
    goto LABEL_5;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v21 = "nw_parameters_iterate_prohibited_interfaces";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v21 = "nw_parameters_iterate_prohibited_interfaces";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v9) {
    free(v9);
  }
LABEL_5:
}

void sub_18379AFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_iterate_prohibited_interfaces_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_parameters_iterate_interfaces_block_t v4 = nw_interface_create_from_dictionary(a3);
  if (v4) {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_18379B034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interfaces(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F14590];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void *)(v3[13] + 176);
        os_log_type_t v9 = *(void **)(v8 + 24);
        *(void *)(v8 + 24) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  id v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  char v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18379B464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v8 = (void *)v7;
  if (!v5)
  {
    uint64_t v23 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_40:
    if (v24) {
      free(v24);
    }
    goto LABEL_15;
  }
  if (*(void *)(v5[13] + 176))
  {
    if (v6)
    {
LABEL_4:
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        os_log_type_t v10 = (objc_class *)MEMORY[0x1E4F14568];
        if (Class == (Class)MEMORY[0x1E4F14568] && object_getClass(v8) == v10)
        {
          size_t count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v10
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              xpc_object_t v12 = xpc_retain((xpc_object_t)v6);
            }
            else
            {
              xpc_object_t v12 = 0;
            }
            uint64_t v18 = *(void *)(v5[13] + 176);
            os_log_type_t v19 = *(void **)(v18 + 32);
            *(void *)(v18 + 32) = v12;

            if (object_getClass(v8) == v10
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply(v8, applier)))
            {
              xpc_object_t v20 = xpc_retain(v8);
            }
            else
            {
              xpc_object_t v20 = 0;
            }
            uint64_t v21 = *(void *)(v5[13] + 176);
            __int16 v22 = *(void **)(v21 + 40);
            *(void *)(v21 + 40) = v20;

            goto LABEL_15;
          }
        }
      }
    }
LABEL_14:
    uint64_t v14 = *(void *)(v5[13] + 176);
    os_log_type_t v15 = *(void **)(v14 + 32);
    *(void *)(v14 + 32) = 0;

    uint64_t v16 = *(void *)(v5[13] + 176);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = 0;

    goto LABEL_15;
  }
  if (!(v6 | v7))
  {
LABEL_15:

    return;
  }
  os_log_type_t v13 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v13)
  {
LABEL_13:
    *(void *)(v5[13] + 176) = v13;
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
  os_log_type_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v36 = 144;
  BOOL v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_18379B9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        xpc_object_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        xpc_object_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  unint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F14600];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void *)(v3[13] + 176);
        os_log_type_t v9 = *(void **)(v8 + 48);
        *(void *)(v8 + 48) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  id v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  uint64_t v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18379BDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v8 = (void *)v7;
  if (!v5)
  {
    uint64_t v23 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_39:
    if (v24) {
      free(v24);
    }
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)(v5[13] + 176);
  if (v9)
  {
LABEL_6:
    os_log_type_t v11 = *(void **)(v9 + 80);
    *(void *)(v9 + 80) = 0;

    uint64_t v12 = *(void *)(v5[13] + 176);
    os_log_type_t v13 = *(void **)(v12 + 88);
    *(void *)(v12 + 88) = 0;

    if (v6)
    {
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        os_log_type_t v15 = (objc_class *)MEMORY[0x1E4F14568];
        if (Class == (Class)MEMORY[0x1E4F14568] && object_getClass(v8) == v15)
        {
          size_t count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              xpc_object_t v17 = xpc_retain((xpc_object_t)v6);
            }
            else
            {
              xpc_object_t v17 = 0;
            }
            uint64_t v18 = *(void *)(v5[13] + 176);
            os_log_type_t v19 = *(void **)(v18 + 80);
            *(void *)(v18 + 80) = v17;

            if (object_getClass(v8) == v15
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply(v8, applier)))
            {
              xpc_object_t v20 = xpc_retain(v8);
            }
            else
            {
              xpc_object_t v20 = 0;
            }
            uint64_t v21 = *(void *)(v5[13] + 176);
            __int16 v22 = *(void **)(v21 + 88);
            *(void *)(v21 + 88) = v20;
          }
        }
      }
    }
    goto LABEL_20;
  }
  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }
  os_log_type_t v10 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v10)
  {
LABEL_5:
    *(void *)(v5[13] + 176) = v10;
    uint64_t v9 = *(void *)(v5[13] + 176);
    goto LABEL_6;
  }
  os_log_type_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v36 = 144;
  BOOL v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_18379C348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_parameters_get_agent_preference(NWConcrete_nw_parameters *a1, const char *a2, const char *a3)
{
  nw_parameters_t v3 = a1;
  required_interface = v3->path_parameters->required_interface;
  if (!required_interface) {
    goto LABEL_30;
  }
  uint64_t v5 = (void *)*((void *)required_interface + 10);
  if (!v5 || !*((void *)required_interface + 11)) {
    goto LABEL_16;
  }
  size_t count = xpc_array_get_count(v5);
  size_t v7 = xpc_array_get_count(*((xpc_object_t *)v3->path_parameters->required_interface + 11));
  uint64_t v8 = 88;
  if (count < v7) {
    uint64_t v8 = 80;
  }
  size_t v9 = xpc_array_get_count(*(xpc_object_t *)((char *)v3->path_parameters->required_interface + v8));
  if (!v9)
  {
LABEL_16:
    BOOL v16 = v3->path_parameters->required_interface;
    xpc_object_t v17 = (void *)*((void *)v16 + 13);
    if (v17 && *((void *)v16 + 14))
    {
      size_t v18 = xpc_array_get_count(v17);
      size_t v19 = xpc_array_get_count(*((xpc_object_t *)v3->path_parameters->required_interface + 14));
      uint64_t v20 = 112;
      if (v18 < v19) {
        uint64_t v20 = 104;
      }
      size_t v15 = xpc_array_get_count(*(xpc_object_t *)((char *)v3->path_parameters->required_interface + v20));
      if (v15)
      {
        size_t v21 = 0;
        while (1)
        {
          string = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 13), v21);
          uint64_t v23 = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 14), v21);
          uint64_t v24 = v23;
          BOOL v25 = !string || v23 == 0;
          if (!v25 && !strcmp("com.apple.networkrelay", string) && !strcmp("CompanionProxy", v24)) {
            break;
          }
          if (v15 == ++v21) {
            goto LABEL_30;
          }
        }
        size_t v15 = 2;
      }
      goto LABEL_31;
    }
LABEL_30:
    size_t v15 = 0;
    goto LABEL_31;
  }
  size_t v10 = 0;
  while (1)
  {
    os_log_type_t v11 = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 10), v10);
    uint64_t v12 = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 11), v10);
    os_log_type_t v13 = v12;
    BOOL v14 = !v11 || v12 == 0;
    if (!v14 && !strcmp("com.apple.networkrelay", v11) && !strcmp("CompanionProxy", v13)) {
      break;
    }
    if (v9 == ++v10) {
      goto LABEL_16;
    }
  }
  size_t v15 = 1;
LABEL_31:

  return v15;
}

void sub_18379C574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_avoided_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v8 = (void *)v7;
  if (!v5)
  {
    uint64_t v23 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        BOOL v25 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_39:
    if (v24) {
      free(v24);
    }
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)(v5[13] + 176);
  if (v9)
  {
LABEL_6:
    os_log_type_t v11 = *(void **)(v9 + 104);
    *(void *)(v9 + 104) = 0;

    uint64_t v12 = *(void *)(v5[13] + 176);
    os_log_type_t v13 = *(void **)(v12 + 112);
    *(void *)(v12 + 112) = 0;

    if (v6)
    {
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        size_t v15 = (objc_class *)MEMORY[0x1E4F14568];
        if (Class == (Class)MEMORY[0x1E4F14568] && object_getClass(v8) == v15)
        {
          size_t count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              xpc_object_t v17 = xpc_retain((xpc_object_t)v6);
            }
            else
            {
              xpc_object_t v17 = 0;
            }
            uint64_t v18 = *(void *)(v5[13] + 176);
            size_t v19 = *(void **)(v18 + 104);
            *(void *)(v18 + 104) = v17;

            if (object_getClass(v8) == v15
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply(v8, applier)))
            {
              xpc_object_t v20 = xpc_retain(v8);
            }
            else
            {
              xpc_object_t v20 = 0;
            }
            uint64_t v21 = *(void *)(v5[13] + 176);
            __int16 v22 = *(void **)(v21 + 112);
            *(void *)(v21 + 112) = v20;
          }
        }
      }
    }
    goto LABEL_20;
  }
  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }
  size_t v10 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v10)
  {
LABEL_5:
    *(void *)(v5[13] + 176) = v10;
    uint64_t v9 = *(void *)(v5[13] + 176);
    goto LABEL_6;
  }
  os_log_type_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v36 = 144;
  BOOL v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_18379CACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_required_interface_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *(_DWORD *)(*((void *)v1 + 13) + 76) != 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_has_required_interface_type";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_has_required_interface_type";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parameters_has_required_interface_subtype(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *(_DWORD *)(*((void *)v1 + 13) + 80) != 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_has_required_interface_subtype";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_has_required_interface_subtype";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_require_netagent_uuid(void *a1, const unsigned __int8 *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v12, &type, &v27)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
          __int16 v31 = 2082;
          uint64_t v32 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v12) {
          goto LABEL_9;
        }
LABEL_46:
        free(v12);
        goto LABEL_9;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  uint64_t v5 = *(void *)(v3[13] + 176);
  if (v5)
  {
    unint64_t v6 = *(xpc_object_t **)(v5 + 72);
    if (!v6) {
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  unint64_t v7 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v7)
  {
LABEL_6:
    *(void *)(v4[13] + 176) = v7;
    unint64_t v6 = *(xpc_object_t **)(*(void *)(v4[13] + 176) + 72);
    if (!v6)
    {
LABEL_7:
      xpc_object_t v8 = xpc_array_create(v6, 0);
      uint64_t v9 = *(void *)(v4[13] + 176);
      os_log_type_t v10 = *(void **)(v9 + 72);
      *(void *)(v9 + 72) = v8;

      unint64_t v6 = *(xpc_object_t **)(*(void *)(v4[13] + 176) + 72);
      if (v6) {
        goto LABEL_8;
      }
      xpc_object_t v20 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
      os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (!__nwlog_fault(v12, &type, &v27)) {
        goto LABEL_45;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids", buf, 0xCu);
        }
      }
      else if (v27)
      {
        uint64_t v23 = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v13, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
            __int16 v31 = 2082;
            uint64_t v32 = (uint64_t)v23;
            _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          if (!v12) {
            goto LABEL_9;
          }
          goto LABEL_46;
        }
        if (v25)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v13 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_44;
    }
LABEL_8:
    xpc_array_set_uuid(v6, 0xFFFFFFFFFFFFFFFFLL, a2);
LABEL_9:

    return;
  }
  uint64_t v18 = __nwlog_obj();
  os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  *(_DWORD *)long long buf = 136446722;
  os_log_type_t v30 = "strict_calloc";
  __int16 v31 = 2048;
  uint64_t v32 = 1;
  __int16 v33 = 2048;
  uint64_t v34 = 144;
  uint64_t v19 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v19))
  {
    free(v19);
    goto LABEL_6;
  }
  __break(1u);
}

void sub_18379D610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_required_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  unint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F14600];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void *)(v3[13] + 176);
        uint64_t v9 = *(void **)(v8 + 72);
        *(void *)(v8 + 72) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  BOOL v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  uint64_t v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18379DA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  unint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F14600];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void *)(v3[13] + 176);
        uint64_t v9 = *(void **)(v8 + 96);
        *(void *)(v8 + 96) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  BOOL v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  uint64_t v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18379DE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_avoided_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  unint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F14600];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void *)(v3[13] + 176);
        uint64_t v9 = *(void **)(v8 + 120);
        *(void *)(v8 + 120) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  BOOL v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  uint64_t v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18379E2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_allow_socket_access(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 16;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100) = *(_WORD *)(*((void *)v3 + 13) + 100) & 0xFFEF | v5;
    goto LABEL_6;
  }
  unint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v17 = "nw_parameters_set_allow_socket_access";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v17 = "nw_parameters_set_allow_socket_access";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_parameters_set_service_class(nw_parameters_t parameters, nw_service_class_t service_class)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    xpc_object_t v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_parameters_set_service_class";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v24 = "nw_parameters_set_service_class";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v8) {
          goto LABEL_11;
        }
LABEL_46:
        free(v8);
        goto LABEL_11;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (service_class < 0xFF)
  {
    BYTE6(v3[11].isa) = service_class;
    switch(service_class)
    {
      case nw_service_class_best_effort:
        *((_DWORD *)v3[13].isa + 18) = 0;
        goto LABEL_11;
      case nw_service_class_background:
        Class isa = v3[13].isa;
        int v6 = 200;
        goto LABEL_10;
      case nw_service_class_interactive_video:
        Class isa = v3[13].isa;
        int v6 = 700;
        goto LABEL_10;
      case nw_service_class_interactive_voice:
        Class isa = v3[13].isa;
        int v6 = 800;
        goto LABEL_10;
      case nw_service_class_responsive_data:
        Class isa = v3[13].isa;
        int v6 = 300;
        goto LABEL_10;
      case nw_service_class_signaling:
        Class isa = v3[13].isa;
        int v6 = 10002;
LABEL_10:
        *((_DWORD *)isa + 18) = v6;
        break;
      default:
        goto LABEL_11;
    }
    goto LABEL_11;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v24 = "nw_parameters_set_service_class";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_45;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_parameters_set_service_class";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX)", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v21)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_parameters_set_service_class";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_44;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_parameters_set_service_class";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), no backtrace", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (v18)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v24 = "nw_parameters_set_service_class";
    __int16 v25 = 2082;
    os_log_type_t v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_46;
  }
LABEL_11:
}

nw_service_class_t nw_parameters_get_service_class(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    nw_service_class_t v3 = BYTE6(v1[11].isa);
    goto LABEL_3;
  }
  __int16 v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_get_service_class";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_get_service_class";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  nw_service_class_t v3 = nw_service_class_best_effort;
LABEL_3:

  return v3;
}

void nw_parameters_set_multipath_force_enable(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x2000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFDFFFFFFLL | v5;
    goto LABEL_5;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_multipath_force_enable";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_multipath_force_enable";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t nw_parameters_get_multipath_force_enable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_get_multipath_force_enable";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_get_multipath_force_enable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_is_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x10000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFEFFFFLL | v5;
    goto LABEL_5;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_is_fallback";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_is_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_no_fullstack_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x20000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFDFFFFLL | v5;
    goto LABEL_5;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t nw_parameters_get_no_fullstack_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_fallback_applied(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 2048;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFF7FF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_fallback_applied";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_fallback_applied";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_fallback_mode(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(unsigned char *)(*((void *)v3 + 13) + 107) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_fallback_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_fallback_mode";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_proxy_applied(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 4096;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFEFFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_proxy_applied";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_proxy_applied";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

uint64_t nw_parameters_get_proxy_applied(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 12) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_proxy_applied";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_proxy_applied";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_is_approved_app_domain(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 13);
    int v4 = *(unsigned __int16 *)(v3 + 108);
    v3 += 108;
    *(unsigned char *)(v3 + 2) = (v4 | (*(unsigned __int8 *)(v3 + 2) << 16) | 0x10000u) >> 16;
    *(_WORD *)uint64_t v3 = v4;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_is_known_tracker(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 0x4000;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFBFFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

uint64_t nw_parameters_get_parent_is_known_tracker(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[99] >> 7;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_block_trackers(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x200000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFDFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_block_trackers";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_block_trackers";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_internal_attribution(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(unsigned char *)(*((void *)v3 + 13) + 102) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_internal_attribution";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_internal_attribution";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_website_attribution(void *a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(unsigned char *)(v3[13] + 102) = 2 * (a2 != 0);
    nw_parameters_set_attribution_context(v3, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_website_attribution";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_website_attribution";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

const char *nw_parameters_internal_attribution_to_string(unsigned int a1)
{
  if (a1 > 2) {
    return "unknown";
  }
  else {
    return off_1E523D470[a1];
  }
}

uint64_t nw_parameters_string_to_internal_attribution(const char *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!strncasecmp(a1, "user", 5uLL)) {
      return 1;
    }
    uint64_t result = strncasecmp(a1, "developer", 0xAuLL);
    if (result) {
      return 2 * (strncasecmp(a1, "website", 8uLL) == 0);
    }
    return result;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v13 = "nw_parameters_string_to_internal_attribution";
  int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v13 = "nw_parameters_string_to_internal_attribution";
        int v7 = "%{public}s called with null string";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)long long buf = 136446466;
            char v13 = "nw_parameters_string_to_internal_attribution";
            __int16 v14 = 2082;
            BOOL v15 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v9) {
          goto LABEL_21;
        }
        *(_DWORD *)long long buf = 136446210;
        char v13 = "nw_parameters_string_to_internal_attribution";
        int v7 = "%{public}s called with null string, no backtrace";
        goto LABEL_20;
      }
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v13 = "nw_parameters_string_to_internal_attribution";
        int v7 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:
  }
LABEL_22:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_parameters_set_is_non_app_initiated(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *(unsigned char *)(*((void *)v3 + 13) + 102) = v5;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_is_non_app_initiated";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_is_non_app_initiated";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_parameters_set_desperate_ivan(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x40000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFBFFFFLL | v5;
    goto LABEL_5;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_desperate_ivan";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_desperate_ivan";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_tls(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v22 = "nw_parameters_set_tls";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v22 = "nw_parameters_set_tls";
            __int16 v23 = 2082;
            uint64_t v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v17)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  uint64_t v5 = (void *)v3[19];
  if (!a2)
  {
    nw_protocol_options_t options = (void *)nw_protocol_boringssl_copy_definition();
    nw_protocol_stack_remove_protocol(v5, options);
    goto LABEL_6;
  }
  os_log_type_t v6 = (void *)nw_protocol_boringssl_copy_definition();
  char v7 = nw_protocol_stack_includes_protocol(v5, v6);

  if ((v7 & 1) == 0)
  {
    os_log_type_t v8 = (void *)v4[19];
    os_log_type_t v9 = (void *)nw_protocol_boringssl_copy_definition();
    nw_protocol_options_t options = nw_protocol_create_options(v9);

    nw_protocol_stack_append_application_protocol(v8, options);
LABEL_6:
  }
LABEL_7:
}

void sub_1837A2048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_is_custom_protocols_only(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[97] >> 3) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_custom_protocols_only(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = 2048;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFF7FFLL | v5;
    goto LABEL_5;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_custom_protocols_only";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_custom_protocols_only";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_companion_link_upgrade_preference(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 88) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_parameters_get_companion_link_upgrade_preference(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 88);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_tls_session_id(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 16, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_tls_session_id";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_tls_session_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_fast_open_enabled(nw_parameters_t parameters, BOOL fast_open_enabled)
{
  BOOL v2 = fast_open_enabled;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 4;
    if (!v2) {
      uint64_t v5 = 0;
    }
    v3[12].Class isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFFFFFFFFBLL | v5);
    goto LABEL_5;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_fast_open_enabled";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_fast_open_enabled";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_tfo_no_cookie(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_no_fast_open_cookie(v5, a2);
    }

    goto LABEL_5;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_parameters_set_tfo_no_cookie";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_parameters_set_tfo_no_cookie";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A32FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_tfo_no_cookie(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL no_fast_open_cookie = nw_tcp_options_get_no_fast_open_cookie(v3);
    }
    else {
      BOOL no_fast_open_cookie = 0;
    }

    goto LABEL_6;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_parameters_get_tfo_no_cookie";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_parameters_get_tfo_no_cookie";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL no_fast_open_cookie = 0;
LABEL_6:

  return no_fast_open_cookie;
}

void sub_1837A35D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_use_tfo_heuristics(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v2 = (id)gLogObj;
  nw_parameters_t v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s nw_parameters_set_use_tfo_heuristics is deprecated", buf, 0xCu);
    }

    return;
  }
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v4) {
    free(v4);
  }
}

uint64_t nw_parameters_get_use_tfo_heuristics(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  nw_parameters_t v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0;
}

void nw_parameters_set_fast_open_force_enable(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_fast_open_force_enable(v5, a2);
    }

    goto LABEL_5;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_parameters_set_fast_open_force_enable";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_parameters_set_fast_open_force_enable";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A3E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_fast_open_force_enable(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL fast_open_force_enable = nw_tcp_options_get_fast_open_force_enable(v3);
    }
    else {
      BOOL fast_open_force_enable = 0;
    }

    goto LABEL_6;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_parameters_get_fast_open_force_enable";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_parameters_get_fast_open_force_enable";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL fast_open_force_enable = 0;
LABEL_6:

  return fast_open_force_enable;
}

void sub_1837A4104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_reduce_buffering(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_reduce_buffering(v5, a2);
    }

    goto LABEL_5;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_parameters_set_reduce_buffering";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_parameters_set_reduce_buffering";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A43D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_reduce_buffering(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL reduce_buffering = nw_tcp_options_get_reduce_buffering(v3);
    }
    else {
      BOOL reduce_buffering = 0;
    }

    goto LABEL_6;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_parameters_get_reduce_buffering";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_parameters_get_reduce_buffering";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL reduce_buffering = 0;
LABEL_6:

  return reduce_buffering;
}

void sub_1837A46B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_no_delay(void *a1, BOOL a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_no_delay(v5, a2);
    }

    goto LABEL_5;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v18 = "nw_parameters_set_no_delay";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v18 = "nw_parameters_set_no_delay";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A4980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_use_long_outstanding_queries(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 8;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFF7 | v5;
    goto LABEL_5;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v17 = "nw_parameters_set_use_long_outstanding_queries";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v17 = "nw_parameters_set_use_long_outstanding_queries";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_ignore_resolver_stats(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 16;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFEFLL | v5;
    goto LABEL_5;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v17 = "nw_parameters_set_ignore_resolver_stats";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v17 = "nw_parameters_set_ignore_resolver_stats";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_include_peer_to_peer(nw_parameters_t parameters, BOOL include_peer_to_peer)
{
  BOOL v2 = include_peer_to_peer;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    Class isa = v3[13].isa;
    int v7 = *((unsigned __int16 *)isa + 54);
    os_log_type_t v6 = (char *)isa + 108;
    int v8 = v7 | (v6[2] << 16);
    if (v2) {
      __int16 v9 = 8;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFF7;
    *(_WORD *)os_log_type_t v6 = v10 | v9;
    v6[2] = BYTE2(v10);
    goto LABEL_6;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_use_awdl(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 8;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFF7;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_use_awdl";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_use_awdl";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_use_p2p(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 16;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFEF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_use_p2p";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_use_p2p";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_resolve_ptr(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 32;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFDFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v17 = "nw_parameters_set_resolve_ptr";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v17 = "nw_parameters_set_resolve_ptr";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t nw_parameters_get_indefinite_set(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[96] >> 7;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_indefinite_set";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite_set";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_indefinite_set";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite_set";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite_set";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_no_proxy(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 2;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFFD;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_proxy";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_proxy";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

uint64_t nw_parameters_get_no_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_proxy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_proxy";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_no_opaque_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 2;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFFDLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v17 = "nw_parameters_set_no_opaque_proxy";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v17 = "nw_parameters_set_no_opaque_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t nw_parameters_get_no_opaque_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_no_transform(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 4;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFFB;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_transform";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_transform";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

uint64_t nw_parameters_get_no_transform(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 2) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_transform";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_transform";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_no_cellular_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 6) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_no_wake_from_sleep(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 128;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFF7F;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_sleep_keepalive_interval(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 22) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_keepalive_enabled(void *a1, BOOL a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_enable_keepalive(v5, a2);
    }

    goto LABEL_5;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A772C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_keepalive_enabled(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL enable_keepalive = nw_tcp_options_get_enable_keepalive(v3);
    }
    else {
      BOOL enable_keepalive = 0;
    }

    goto LABEL_6;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL enable_keepalive = 0;
LABEL_6:

  return enable_keepalive;
}

void sub_1837A7A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_idle_time(void *a1, uint32_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_keepalive_idle_time(v5, a2);
    }

    goto LABEL_5;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A7CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_keepalive_idle_time(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      uint64_t keepalive_idle_time = nw_tcp_options_get_keepalive_idle_time(v3);
    }
    else {
      uint64_t keepalive_idle_time = 0;
    }

    goto LABEL_6;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  uint64_t keepalive_idle_time = 0;
LABEL_6:

  return keepalive_idle_time;
}

void sub_1837A7FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_interval(void *a1, uint32_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_keepalive_interval(v5, a2);
    }

    goto LABEL_5;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A8284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_keepalive_interval(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      uint64_t keepalive_interval = nw_tcp_options_get_keepalive_interval(v3);
    }
    else {
      uint64_t keepalive_interval = 0;
    }

    goto LABEL_6;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  uint64_t keepalive_interval = 0;
LABEL_6:

  return keepalive_interval;
}

void sub_1837A8560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_offload(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_enable_keepalive_offload(v5, a2);
    }

    goto LABEL_5;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A8830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_keepalive_offload(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL enable_keepalive_offload = nw_tcp_options_get_enable_keepalive_offload(v3);
    }
    else {
      BOOL enable_keepalive_offload = 0;
    }

    goto LABEL_6;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL enable_keepalive_offload = 0;
LABEL_6:

  return enable_keepalive_offload;
}

void sub_1837A8B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_minimum_tls_protocol_version(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tls_options(v1);
    nw_parameters_t v4 = v3;
    if (v3)
    {
      uint64_t v5 = v3;
      SSLProtocol v6 = tls_helper_SSLProtocol_from_version();
      sec_protocol_options_set_tls_min_version(v5, v6);
    }
    goto LABEL_5;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A8DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_tls_options(NWConcrete_nw_parameters *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v11 = 0;
  os_log_type_t v12 = &v11;
  uint64_t v13 = 0x3032000000;
  os_log_type_t v14 = __Block_byref_object_copy__19403;
  char v15 = __Block_byref_object_dispose__19404;
  id v16 = 0;
  p_super = &v1->default_stack->super;
  if (!p_super
    || (iterate_block[0] = MEMORY[0x1E4F143A8],
        iterate_block[1] = 3221225472,
        iterate_block[2] = ___ZL30nw_parameters_copy_tls_optionsP24NWConcrete_nw_parametersb_block_invoke,
        iterate_block[3] = &unk_1E5240D88,
        iterate_void block[4] = &v11,
        nw_protocol_stack_iterate_application_protocols(p_super, iterate_block),
        (id v3 = (void *)v12[5]) == 0))
  {
    nw_parameters_t v4 = (void *)nw_protocol_boringssl_copy_definition();
    nw_protocol_options_t options = nw_protocol_create_options(v4);

    SSLProtocol v6 = (void *)v12[5];
    v12[5] = (uint64_t)options;

    nw_protocol_stack_append_application_protocol(v1->default_stack, (void *)v12[5]);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v18 = "nw_parameters_copy_tls_options";
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s TLS-specific parameter set without TLS set, adding TLS", buf, 0xCu);
    }

    id v3 = (void *)v12[5];
  }
  id v8 = v3;
  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_1837A8FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  os_log_type_t v22 = v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZL30nw_parameters_copy_tls_optionsP24NWConcrete_nw_parametersb_block_invoke(uint64_t a1, void *a2)
{
  nw_protocol_options_t options = a2;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    nw_parameters_t v4 = (void *)nw_protocol_boringssl_copy_definition();
    nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(options);
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

    if (is_equal_unsafe) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    }
  }
}

void sub_1837A90DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_minimum_tls_protocol_version(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_definition_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_protocol_definition_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
          __int16 v15 = 2082;
          id v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_protocol_definition_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0;
}

void nw_parameters_set_maximum_tls_protocol_version(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tls_options(v1);
    nw_parameters_t v4 = v3;
    if (v3)
    {
      nw_protocol_definition_t v5 = v3;
      SSLProtocol v6 = tls_helper_SSLProtocol_from_version();
      sec_protocol_options_set_tls_max_version(v5, v6);
    }
    goto LABEL_5;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837A9650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_maximum_tls_protocol_version(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_definition_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_protocol_definition_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
          __int16 v15 = 2082;
          id v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_protocol_definition_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0;
}

void nw_parameters_set_ssl_cipher_suites(void *a1, tls_ciphersuite_t *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  nw_protocol_definition_t v5 = a1;
  os_log_type_t v6 = v5;
  if (!v5)
  {
    char v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v12) {
          goto LABEL_9;
        }
LABEL_44:
        free(v12);
        goto LABEL_9;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (a2)
  {
    id v7 = nw_parameters_copy_tls_options(v5);
    os_log_type_t v8 = v7;
    if (v7)
    {
      BOOL v9 = v7;
      if (v3)
      {
        uint64_t v3 = v3;
        do
        {
          tls_ciphersuite_t v10 = *a2++;
          sec_protocol_options_append_tls_ciphersuite(v9, v10);
          --v3;
        }
        while (v3);
      }
    }
    goto LABEL_9;
  }
  __int16 v15 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v12, &type, &v25)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null cipher_suites", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v25)
  {
    BOOL v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null cipher_suites, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  uint64_t v20 = (char *)__nw_create_backtrace_string();
  BOOL v13 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null cipher_suites, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v22)
  {
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
    __int16 v29 = 2082;
    os_log_type_t v30 = v20;
    _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null cipher_suites, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_44;
  }
LABEL_9:
}

void sub_1837A9DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_get_ssl_cipher_suites(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!v5)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_56:
        free(v7);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    tls_ciphersuite_t v10 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null cipher_suites", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s called with null cipher_suites, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v17 = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null cipher_suites, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
      __int16 v29 = 2082;
      os_log_type_t v30 = v17;
      _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null cipher_suites, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null count", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v24, "%{public}s called with null count, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v17 = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v21)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null count, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
      __int16 v29 = 2082;
      os_log_type_t v30 = v17;
      _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null count, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v17);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  *a3 = 0;
LABEL_5:
}

void nw_parameters_set_tls_session_ticket_enabled(void *a1, BOOL a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    id v5 = nw_parameters_copy_tls_options(v3);
    os_log_type_t v6 = v5;
    if (v5)
    {
      id v7 = v5;
      sec_protocol_options_set_tls_tickets_enabled(v7, a2);
    }
    goto LABEL_5;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      tls_ciphersuite_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      tls_ciphersuite_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      tls_ciphersuite_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v9) {
    free(v9);
  }
LABEL_5:
}

void sub_1837AA770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_tls_session_ticket_enabled(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0;
}

void nw_parameters_set_tls_enforce_ev(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  BOOL v2 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_parameters_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_parameters_t v4 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
          __int16 v14 = 2082;
          __int16 v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_1830D4000, v4, v7, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_parameters_t v4 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_1830D4000, v4, v9, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_19:
  if (v3) {
    free(v3);
  }
LABEL_2:
}

void nw_parameters_set_receive_any_interface(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 512;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFDFFLL | v5;
    goto LABEL_5;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v17 = "nw_parameters_set_receive_any_interface";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v17 = "nw_parameters_set_receive_any_interface";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t nw_parameters_get_receive_any_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[97] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v16 = "nw_parameters_get_receive_any_interface";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v16 = "nw_parameters_get_receive_any_interface";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_ecn_mode(void *a1, unsigned int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v22 = "nw_parameters_set_ecn_mode";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v22 = "nw_parameters_set_ecn_mode";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2 < 0xFF)
  {
    *((unsigned char *)v3 + 93) = a2;
    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v22 = "nw_parameters_set_ecn_mode";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v22 = "nw_parameters_set_ecn_mode";
    __int16 v23 = 2082;
    os_log_type_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_parameters_set_background_traffic_management(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_enable_background_traffic_management(v5, a2);
    }

    goto LABEL_5;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

void sub_1837AB954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_background_traffic_management(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL enable_background_traffic_management = nw_tcp_options_get_enable_background_traffic_management(v3);
    }
    else {
      BOOL enable_background_traffic_management = 0;
    }

    goto LABEL_6;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL enable_background_traffic_management = 0;
LABEL_6:

  return enable_background_traffic_management;
}

void sub_1837ABC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_initial_data_payload(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v23 = "nw_parameters_set_initial_data_payload";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_22;
      }
      if (!v20)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_22;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v23 = "nw_parameters_set_initial_data_payload";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_23:
    if (!v7) {
      goto LABEL_5;
    }
LABEL_24:
    free(v7);
    goto LABEL_5;
  }
  if (!v4 || dispatch_data_get_size(v4))
  {
    objc_storeStrong(v3 + 18, a2);
    goto LABEL_5;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  __int16 v23 = "nw_parameters_set_initial_data_payload";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_23;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (id)gLogObj;
    os_log_type_t v9 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_parameters_set_initial_data_payload";
      _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s initial_data_payload is empty", buf, 0xCu);
    }
LABEL_22:

    goto LABEL_23;
  }
  if (!v20)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (id)gLogObj;
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_parameters_set_initial_data_payload";
      _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s initial_data_payload is empty, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_22;
  }
  os_log_type_t v10 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v8 = (id)gLogObj;
  os_log_type_t v11 = type;
  BOOL v12 = os_log_type_enabled(v8, type);
  if (!v10)
  {
    if (v12)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_parameters_set_initial_data_payload";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s initial_data_payload is empty, no backtrace", buf, 0xCu);
    }
    goto LABEL_22;
  }
  if (v12)
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v23 = "nw_parameters_set_initial_data_payload";
    __int16 v24 = 2082;
    uint64_t v25 = v10;
    _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s initial_data_payload is empty, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v10);
  if (v7) {
    goto LABEL_24;
  }
LABEL_5:
}

id nw_parameters_copy_initial_data_payload(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1[18];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_copy_initial_data_payload";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_copy_initial_data_payload";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

BOOL __nw_parameters_has_protocol_at_level_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  BOOL v6 = nw_protocols_are_equal(*(void **)(a1 + 40), identifier);
  if (v6) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  BOOL v7 = !v6;

  return v7;
}

BOOL nw_parameters_has_proxy_protocol_in_effective_config(void *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = (nw_protocol_stack_t *)v1;
  if (v1)
  {
    if (*((void *)v1 + 19))
    {
      id v3 = *((id *)v1 + 23);
      nw_protocol_definition_t v4 = v3;
      if (v3 && (uint64_t v5 = v3, v6 = v5[38], v5, v6 == 1))
      {
        nw_protocol_options_t v7 = nw_protocol_stack_copy_transport_protocol(v2[19]);
        nw_protocol_options_t v8 = v7;
        if (v7)
        {
          os_log_type_t v9 = v7;
          id v10 = v9[1];

          *(_DWORD *)os_log_type_t type = 4;
          BOOL v11 = nw_proxy_config_copy_protocol_stack(v5, v10, type);
          os_log_type_t v12 = v11;
          if (v11)
          {
            *(void *)long long buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000;
            char v32 = 0;
            iterate_block[0] = MEMORY[0x1E4F143A8];
            iterate_block[1] = 3221225472;
            iterate_block[2] = __nw_parameters_has_proxy_protocol_in_effective_config_block_invoke;
            iterate_block[3] = &unk_1E5240D88;
            iterate_void block[4] = buf;
            nw_protocol_stack_iterate_application_protocols(v11, iterate_block);
            BOOL v13 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
            _Block_object_dispose(buf, 8);
          }
          else
          {
            BOOL v13 = 0;
          }
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = 0;
      }

      goto LABEL_14;
    }
    uint64_t v19 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v16, type, &v30))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v20 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null parameters->default_stack", buf, 0xCu);
        }
LABEL_46:

        goto LABEL_47;
      }
      if (!v30)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v27 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s called with null parameters->default_stack, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v17 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      BOOL v25 = os_log_type_enabled(v17, type[0]);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null parameters->default_stack, no backtrace", buf, 0xCu);
        }
        goto LABEL_46;
      }
      if (v25)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null parameters->default_stack, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_34;
    }
  }
  else
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v16, type, &v30))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v18 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_46;
      }
      if (!v30)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v26 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v17 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      BOOL v23 = os_log_type_enabled(v17, type[0]);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_46;
      }
      if (v23)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_34:

      free(backtrace_string);
    }
  }
LABEL_47:
  if (v16) {
    free(v16);
  }
  BOOL v13 = 0;
LABEL_14:

  return v13;
}

void sub_1837ACA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_parameters_has_proxy_protocol_in_effective_config_block_invoke(uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v3 = nw_protocol_options_copy_definition(options);
  if (nw_protocol_definition_is_proxy(v3)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

BOOL nw_parameters_has_multiplexed_protocol_in_stack(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    if (nw_protocol_http2_transport_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_37312);
    }
    if (nw_parameters_has_protocol_in_stack(v1, &g_http2_transport_protocol_identifier)) {
      goto LABEL_8;
    }
    if (nw_protocol_http2_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_85036);
    }
    if (nw_parameters_has_protocol_in_stack(v1, &nw_protocol_http2_identifier::http2_protocol_identifier))
    {
LABEL_8:
      BOOL has_protocol_in_stack = 1;
    }
    else
    {
      quic_stream_protocol_identifier = nw_protocol_get_quic_stream_protocol_identifier();
      BOOL has_protocol_in_stack = nw_parameters_has_protocol_in_stack(v1, quic_stream_protocol_identifier);
    }
    goto LABEL_10;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_options_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_protocol_options_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_protocol_options_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v6) {
    free(v6);
  }
  BOOL has_protocol_in_stack = 0;
LABEL_10:

  return has_protocol_in_stack;
}

void sub_1837ACDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_internal_iterate_protocol_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_protocol_definition_t v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v6;
}

void sub_1837ACE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_inherit_protocol_instances_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  nw_protocol_definition_t v5 = a3;
  uint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = a2 - v7;
  if (a2 > v7)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    nw_protocol_definition_t v10 = nw_protocol_options_copy_definition(v5);
    BOOL v11 = (void *)nw_protocol_stack_copy_application_protocol_at_index(*(NWConcrete_nw_protocol_stack **)(a1 + 32), v8 + v9);
    os_log_type_t v12 = v11;
    if (v6 && v11 && nw_protocol_options_matches_definition(v11, v10))
    {
      char v13 = v12;
      os_log_type_t v14 = v6;
      snprintf(v14 + 48, 0x54uLL, "%s", v13 + 48);
      *((_WORD *)v14 + 68) = *((_WORD *)v13 + 68);

      os_log_type_t v15 = v13;
      uint64_t v16 = *((void *)v15 + 2);

      __int16 v17 = v14;
      *((void *)v17 + 2) = v16;
    }
  }

  return 1;
}

void sub_1837ACF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  ++*(void *)(*(void *)(a1[5] + 8) + 24);
  if ((result & 1) == 0) {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  return result;
}

uint64_t nw_protocol_stack_copy_application_protocol_at_index(NWConcrete_nw_protocol_stack *a1, unint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_protocol_definition_t v3 = a1;
  nw_protocol_definition_t v4 = v3;
  if (v3)
  {
    uint64_t persistent_application_protocols = (uint64_t)v3->persistent_application_protocols;
    if (persistent_application_protocols)
    {
      unint64_t v6 = (uint64_t)(*(void *)(persistent_application_protocols + 24)
                   - *(void *)(persistent_application_protocols + 16)) >> 3;
      if (v6 > a2) {
        goto LABEL_7;
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    a2 -= v6;
    uint64_t persistent_application_protocols = (uint64_t)v4->application_protocols;
LABEL_7:
    uint64_t v7 = nw_array_get_object_at_index(persistent_application_protocols, a2);
    goto LABEL_8;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
  nw_protocol_definition_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_8:

  return v7;
}

uint64_t ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_397(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  identifier = nw_protocol_parameters_get_identifier(v5);
  if (nw_protocols_are_equal(identifier, *(void **)(a1 + 56))
    && *(void *)(a1 + 64) - a2 == *(void *)(a1 + 72) - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v8 = 1;
    if (v7 == -1 || v7 == a2)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

uint64_t ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  BOOL v7 = a2 >= v6;
  unint64_t v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    uint64_t v9 = (void *)nw_protocol_stack_copy_application_protocol_at_index(*(NWConcrete_nw_protocol_stack **)(a1 + 32), v8 + *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
    uint64_t is_equal = nw_protocol_option_is_equal(v5, v9);
    if ((is_equal & 1) == 0) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
  }
  else
  {
    uint64_t is_equal = 1;
  }

  return is_equal;
}

void sub_1837AD408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_protocol_parameters_get_identifier(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_protocol_definition_t v3 = (id *)v1;
    id v4 = v3[1];

    identifier = nw_protocol_definition_get_identifier(v4);
    goto LABEL_3;
  }
  BOOL v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_protocol_parameters_get_identifier";
  unint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_protocol_parameters_get_identifier";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  identifier = 0;
LABEL_3:

  return identifier;
}

void nw_parameters_log_protocol_instances(void *a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_protocol_definition_t v3 = (void **)v1[19];
    if (v3)
    {
      v53[0] = MEMORY[0x1E4F143A8];
      v53[1] = 3221225472;
      v53[2] = __nw_parameters_log_protocol_instances_block_invoke;
      v53[3] = &unk_1E523D2C8;
      id v4 = v2;
      id v54 = v4;
      nw_protocol_stack_iterate_application_protocols_with_index(v3, v53);
      id v5 = v3[3];
      if (v5)
      {
        unint64_t v6 = v5;
        id v7 = v6[1];

        identifier = nw_protocol_definition_get_identifier(v7);
        uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v3[3]);
        if (gLogDatapath)
        {
          uint64_t v33 = protocol_handle;
          uint64_t v34 = __nwlog_obj();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v35 = v3[3];
            *(_DWORD *)long long buf = 136447234;
            os_log_type_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            id v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v35;
            __int16 v63 = 2080;
            char v64 = identifier;
            __int16 v65 = 2048;
            uint64_t v66 = v33;
            _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, transport, options %p (%s), protocol handle %p", buf, 0x34u);
          }
        }
      }
      os_log_type_t v10 = v3[4];
      if (v10)
      {
        BOOL v11 = v10;
        id v12 = v11[1];

        BOOL v13 = nw_protocol_definition_get_identifier(v12);
        uint64_t v14 = nw_protocol_options_get_protocol_handle(v3[4]);
        if (gLogDatapath)
        {
          uint64_t v36 = v14;
          uint64_t v37 = __nwlog_obj();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v38 = v3[4];
            *(_DWORD *)long long buf = 136447234;
            os_log_type_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            id v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v38;
            __int16 v63 = 2080;
            char v64 = v13;
            __int16 v65 = 2048;
            uint64_t v66 = v36;
            _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, secondary transport, options %p (%s), protocol handle %p", buf, 0x34u);
          }
        }
      }
      char v15 = v3[6];
      if (v15)
      {
        os_log_type_t v16 = v15;
        id v17 = v16[1];

        os_log_type_t v18 = nw_protocol_definition_get_identifier(v17);
        uint64_t v19 = nw_protocol_options_get_protocol_handle(v3[6]);
        if (gLogDatapath)
        {
          uint64_t v39 = v19;
          os_log_type_t v40 = __nwlog_obj();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            BOOL v41 = v3[6];
            *(_DWORD *)long long buf = 136447234;
            os_log_type_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            id v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v41;
            __int16 v63 = 2080;
            char v64 = v18;
            __int16 v65 = 2048;
            uint64_t v66 = v39;
            _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, internet, options %p (%s), protocol handle %p", buf, 0x34u);
          }
        }
      }
      os_log_type_t v20 = v3[7];
      if (v20)
      {
        uint64_t v21 = v20;
        id v22 = v21[1];

        uint64_t v23 = nw_protocol_definition_get_identifier(v22);
        uint64_t v24 = nw_protocol_options_get_protocol_handle(v3[7]);
        if (gLogDatapath)
        {
          uint64_t v42 = v24;
          char v43 = __nwlog_obj();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v44 = v3[7];
            *(_DWORD *)long long buf = 136447234;
            os_log_type_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            id v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v44;
            __int16 v63 = 2080;
            char v64 = v23;
            __int16 v65 = 2048;
            uint64_t v66 = v42;
            _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, link, options %p (%s), protocol handle %p", buf, 0x34u);
          }
        }
      }

LABEL_16:
      goto LABEL_17;
    }
    __int16 v29 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v58 = "nw_parameters_log_protocol_instances";
    char v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v30, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_log_protocol_instances";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v55)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v31 = __nwlog_obj();
        os_log_type_t v49 = type;
        BOOL v50 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2082;
            id v60 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v31, v49, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v50)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_log_protocol_instances";
          _os_log_impl(&dword_1830D4000, v31, v49, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v31 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v58 = "nw_parameters_log_protocol_instances";
          _os_log_impl(&dword_1830D4000, v31, v52, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_64:
    if (v30) {
      free(v30);
    }
    goto LABEL_16;
  }
  BOOL v25 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v58 = "nw_parameters_log_protocol_instances";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v55 = 0;
  if (__nwlog_fault(v26, &type, &v55))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v58 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v55)
    {
      BOOL v45 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v27, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v58 = "nw_parameters_log_protocol_instances";
          __int16 v59 = 2082;
          id v60 = v45;
          _os_log_impl(&dword_1830D4000, v27, v46, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        goto LABEL_59;
      }
      if (v47)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v58 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_1830D4000, v27, v46, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v58 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_1830D4000, v27, v51, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_59:
  if (v26) {
    free(v26);
  }
LABEL_17:
}